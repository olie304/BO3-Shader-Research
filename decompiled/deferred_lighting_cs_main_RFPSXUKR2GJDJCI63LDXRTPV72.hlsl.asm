//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:53 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 40
dcl_thread_group 8, 8, 1
imad r0.x, cb2[57].x, l(15), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.zw, r0.xxxy, l(0, 0, 4095, 4095)
imad r1.xy, r0.zwzz, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.yzw, r1.xyww, t0.wxyz
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.yyyx
add r9.xy, r1.wzww, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r10.x, r3.x, l(0.984375)
mul r5.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r10.x, r3.x, r5.w
max r3.x, r3.x, l(0.00000001)
rcp r10.y, r3.x
and r9.zw, r0.zzzz, r10.xxxy
add r10.xy, r9.xyxx, -cb1[71].xyxx
mul r10.xy, r10.xyxx, cb1[44].zwzz
mad r10.xy, r10.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r11.x, r10.x, cb1[12].x
mul r11.y, r10.y, cb1[13].y
mov r11.z, l(1.000000)
mul r10.xyz, r9.wwww, r11.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.z, r2.w, l(3.000000), l(0.500000)
ftou r0.z, r0.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r11.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r11.z
mul r11.xy, r2.wwww, r2.xyxx
and r12.xyzw, r0.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.z, r12.w, r12.z
movc r12.z, r0.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.z, r0.w, l(-0.500000), l(-0.00146628)
add r0.z, r0.z, r2.z
mul_sat r2.y, r0.z, l(2.00982332)
dp3 r0.z, -r10.xyzx, -r10.xyzx
rsq r0.z, r0.z
mul r12.xyz, r0.zzzz, -r10.xyzx
dp2 r2.z, r1.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r2.z, r2.z
mul r2.z, r2.z, l(52.982918)
frc r2.z, r2.z
mad r2.z, r2.z, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r2.z
dp2 r1.z, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r3.x, r15.x, r1.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.z, -r12.xyzx, r11.xyzx
add r1.z, r1.z, r1.z
mad r16.xyz, r11.xyzx, -r1.zzzz, -r12.xyzx
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.w, r1.z
mul r2.zw, r9.xxxy, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r2.z, r2.zwzz, t27.yzxw, s4, l(0.000000)
mul r2.w, r2.z, r4.z
dp3 r5.w, r11.xyzx, cb2[17].xyzx
mov_sat r6.w, r5.w
movc r7.w, r0.w, |r5.w|, r6.w
ge r8.w, l(0.000000), r7.w
if_nz r8.w
  mov r9.x, l(0)
endif 
if_z r8.w
  mul r15.yzw, r10.yyyy, cb2[29].xxyz
  mad r15.yzw, r10.xxxx, cb2[28].xxyz, r15.yyzw
  mad r15.yzw, r10.zzzz, cb2[30].xxyz, r15.yyzw
  add r15.yzw, r15.yyzw, cb2[31].xxyz
  add r8.w, r15.w, -cb2[17].w
  mad r8.w, -r8.w, l(0.00006104), l(1.000000)
  mov_sat r9.y, r8.w
  eq r9.y, r8.w, r9.y
  if_nz r9.y
    mov r9.yw, l(0,0,0,0)
    loop 
      ge r12.w, r9.y, l(3.000000)
      breakc_nz r12.w
      ftou r12.w, r9.y
      add r13.zw, r15.yyyz, -cb2[r12.w + 20].xxxy
      max r13.z, |r13.w|, |r13.z|
      mul r9.w, r13.z, cb2[r12.w + 20].z
      lt r12.w, r9.w, l(1.000000)
      if_nz r12.w
        break 
      endif 
      add r9.y, r9.y, l(1.000000)
      mov r9.w, l(0)
    endloop 
  else 
    mov r9.yw, l(0,3.000000,0,0)
  endif 
  ge r12.w, r9.y, l(3.000000)
  if_nz r12.w
    mul r17.xyz, l(128.000000, 0.500000, 0.500000, 0.000000), cb2[27].zxyz
    rcp r18.xz, r17.xxxx
    mov r18.y, -r18.z
    mad r17.xyz, r15.yzyy, r18.xyzx, r17.yzyy
    add r18.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r17.xyz, r17.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r17.xyz, r18.xyzx, r17.xyzx
    mul r13.zw, r17.zzzy, cb2[32].xxxx
    round_ni r13.zw, r13.zzzw
    mul r13.w, r13.w, cb2[27].x
    mad r13.z, r13.w, cb2[32].x, r13.z
    ftou r13.z, r13.z
    iadd r13.z, r13.z, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.z, l(0), t23.xxxx
    and r14.w, r13.w, l(0x40000000)
    ishl r17.w, r13.w, l(2)
    if_z r14.w
      and r14.w, r13.w, l(0x01ffffff)
      iadd r18.x, r13.z, r14.w
      ushr r13.z, r13.w, l(25)
      utof r13.z, r13.z
      mul r17.xyz, r13.zzzz, r17.xyzx
      frc r17.xyz, r17.xyzx
      mul r17.xyz, r17.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
      ftou r17.xyz, r17.xyzx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      ushr r13.zw, r17.zzzy, l(0, 0, 6, 6)
      and r14.w, r18.z, l(0xc0000000)
      iadd r18.w, r18.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.w, l(0), t23.xxxx
      movc r13.w, r13.w, r18.z, r18.w
      ushr r18.w, r13.w, l(13)
      movc r13.z, r13.z, r18.w, r13.w
      and r13.z, r13.z, l(8191)
      iadd r19.x, r13.z, r18.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      mov r18.y, l(0)
      mov r19.y, l(1)
      movc r19.xyz, r14.wwww, r18.xyzx, r19.xyzx
      movc r20.yz, r14.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r13.zw, r17.zzzy, r20.yyyy
      and r13.zw, r13.zzzw, l(0, 0, 1, 1)
      and r18.w, r19.z, l(0xc0000000)
      iadd r19.w, r19.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.w, l(0), t23.xxxx
      movc r13.w, r13.w, r19.z, r19.w
      ushr r19.w, r13.w, l(13)
      movc r13.z, r13.z, r19.w, r13.w
      and r13.z, r13.z, l(8191)
      iadd r20.x, r13.z, r19.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.w, r20.x, l(0), t23.xxxx
      movc r19.xyz, r18.wwww, r19.xyzx, r20.xzwx
      movc r18.xyz, r14.wwww, r18.xyzx, r19.xyzx
      and r13.z, r18.z, l(0xc0000000)
      if_z r13.z
        iadd r13.z, -r18.y, l(6)
        ushr r13.zw, r17.zzzy, r13.zzzz
        or r14.w, r18.z, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r14.w, r13.z
        and r13.z, r13.z, l(1023)
        iadd r19.x, r13.z, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
        iadd r19.yz, r18.yyyy, l(0, 1, 2, 0)
        iadd r13.z, -r19.y, l(6)
        ushr r13.zw, r17.zzzy, r13.zzzz
        and r14.w, r19.w, l(0xc0000000)
        or r18.y, r19.w, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r18.y, r13.z
        and r13.z, r13.z, l(1023)
        iadd r20.x, r13.z, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
        mov r20.y, r19.z
        movc r20.xyz, r14.wwww, r19.xywx, r20.xyzx
        iadd r13.z, -r20.y, l(6)
        ushr r13.zw, r17.zzzy, r13.zzzz
        and r18.y, r20.z, l(0xc0000000)
        or r18.w, r20.z, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r18.w, r13.z
        and r13.z, r13.z, l(1023)
        iadd r21.x, r13.z, r20.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r21.y, r21.x, l(0), t23.xxxx
        movc r13.zw, r18.yyyy, r20.xxxz, r21.xxxy
        movc r18.xz, r14.wwww, r19.xxwx, r13.zzwz
      endif 
      and r13.z, r18.z, l(0xc0000000)
      if_z r13.z
        ubfe r13.w, l(14), l(15), r18.z
        utof r13.w, r13.w
        mul r13.w, r13.w, cb2[27].w
        mul r13.w, r13.w, l(0.00006104)
        and r18.yw, r18.zzzz, l(0, 0x00007fff, 0, 0x20000000)
        utof r14.w, r18.y
        mul r14.w, r14.w, cb2[27].w
        mul r14.w, r14.w, l(0.00003052)
        and r18.y, r17.y, l(3)
        iadd r18.y, r18.y, r18.x
        iadd r18.y, r18.y, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.y, r18.y, l(0), t23.xxxx
        bfi r19.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r17.xyzx, l(0, 0, 0, 0)
        ushr r17.x, r18.y, r19.x
        and r17.x, r17.x, l(255)
        utof r17.x, r17.x
        mul r17.x, r14.w, r17.x
        mad r17.x, r17.x, l(0.00392157), r13.w
        iadd r17.y, r19.y, l(1)
        ubfe r17.z, l(1), l(1), r17.z
        iadd r17.y, r17.z, r17.y
        iadd r17.y, r17.y, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.y, r17.y, l(0), t23.xxxx
        ushr r17.y, r17.y, r19.z
        and r17.y, r17.y, l(0x0000ffff)
        utof r17.y, r17.y
        mul r14.w, r14.w, r17.y
        mad r13.w, r14.w, l(0.00001526), r13.w
        movc r17.w, r18.w, r17.x, r13.w
      else 
        and r13.w, r18.z, l(0x80000000)
        iadd r14.w, r18.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t23.xxxx
        movc r13.w, r13.w, r14.w, l(0)
        ishl r14.w, r18.z, l(2)
        ushr r17.x, r13.w, l(16)
        f16tof32 r17.x, r17.x
        and r13.w, r13.w, l(0x0000ffff)
        f16tof32 r13.w, r13.w
        mad r14.w, r15.y, r17.x, r14.w
        mad r13.w, r15.z, r13.w, r14.w
        movc r17.w, r13.z, r13.w, r17.w
      endif 
    endif 
    mad r13.z, -cb2[27].z, l(2.000000), r15.w
    lt r13.z, r17.w, r13.z
    movc r9.x, r13.z, l(0), l(1.000000)
  endif 
  if_z r12.w
    if_z cb2[58].y
      ftou r12.w, r9.y
      add r13.zw, r15.yyyz, -cb2[r12.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r12.w + 20].zzzz
      mad r17.xy, r13.zwzz, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r12.w, cb2[26].y
      add r17.z, r9.y, r12.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r17.xyzx, t13.xxxx, s13, r8.w
      sample_l_indexable(texture2darray)(float,float,float,float) r13.z, r17.xyzx, t31.yzxw, s0, l(0.000000)
      add r12.w, r12.w, r13.z
      add_sat r12.w, r12.w, l(-1.000000)
      mul r13.z, r12.w, r12.w
      mul r9.x, r12.w, r13.z
    endif 
    if_nz cb2[58].y
      mov r17.x, -r13.x
      ftou r12.w, r9.y
      add r9.y, r9.y, l(1.000000)
      min r9.y, r9.y, l(2.000000)
      add r9.w, -r9.w, l(1.000000)
      mul r9.w, r9.w, l(28.000000)
      ftou r9.yw, r9.yyyw
      add r13.zw, r15.yyyz, -cb2[r12.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r12.w + 20].zzzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r15.yz, r15.yyzy, -cb2[r9.y + 20].xxyx
      mul r15.yz, r15.yyzy, cb2[r9.y + 20].zzzz
      mad r15.yz, r15.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r17.y, r14.x
      mov r17.z, r13.x
      mov r14.w, l(0)
      mov r15.w, l(0)
      loop 
        uge r17.w, r15.w, l(8)
        breakc_nz r17.w
        ult r17.w, r9.w, r15.w
        movc r18.xy, r17.wwww, r15.yzyy, r13.zwzz
        movc r18.z, r17.w, cb2[r9.y + 20].w, cb2[r12.w + 20].w
        movc r17.w, r17.w, r9.y, r12.w
        dp2 r19.x, icb[r15.w + 0].yxyy, r17.xyxx
        dp2 r19.y, icb[r15.w + 0].yxyy, r17.yzyy
        mad r18.xy, r19.xyxx, r18.zzzz, r18.xyxx
        iadd r17.w, r17.w, cb2[26].y
        utof r18.z, r17.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r18.xyzx, t13.xxxx, s13, r8.w
        sample_l_indexable(texture2darray)(float,float,float,float) r18.x, r18.xyzx, t31.xyzw, s0, l(0.000000)
        add r17.w, r17.w, r18.x
        add_sat r17.w, r17.w, l(-1.000000)
        mad r14.w, r17.w, l(0.125000), r14.w
        iadd r15.w, r15.w, l(1)
      endloop 
      mul r8.w, r14.w, r14.w
      mul r9.x, r14.w, r8.w
    endif 
  endif 
endif 
add r8.w, -r2.y, l(1.000000)
mul r9.y, r8.w, l(5.000000)
mad r9.w, r8.w, l(5.000000), l(-2.500000)
mul r9.w, r9.w, l(0.400000)
max r9.w, r9.w, l(0.000000)
mul r9.w, r9.w, l(100.000000)
mad r13.zw, -r8.wwww, l(0.000000, 0.000000, 10.000000, 5.000000), l(0.000000, 0.000000, 6.857410, 7.085000)
exp r12.w, r13.z
mul r12.w, r2.x, r12.w
mul r12.w, r12.w, l(9.136810)
mul r13.z, r8.w, r9.y
mad r13.z, -r13.z, l(2.015905), r13.w
exp r13.z, r13.z
mul r13.z, r2.x, r13.z
mul r13.z, r13.z, l(9.708090)
max r12.w, r12.w, r13.z
max r12.w, r12.w, l(1.268160)
iadd r13.z, cb2[0].y, -cb2[58].x
ushr r15.yz, r0.yyxy, l(0, 24, 24, 0)
ubfe r0.xy, l(10, 10, 0, 0), l(12, 12, 0, 0), r0.yxyy
mov r17.yz, l(0,0,1.000000,0)
mov r18.xy, l(0,0,0,0)
mov r19.x, l(1.000000)
mov r20.xy, l(0,0,0,0)
mov r21.xy, l(0,0,0,0)
mov r22.xyzw, l(0,0,0,0)
mov r23.yzw, l(0,0,0,0)
mov r13.w, l(0)
loop 
  ieq r14.w, r13.w, l(2)
  breakc_nz r14.w
  movc r14.w, r13.w, r0.x, r15.y
  uge r15.w, r14.w, r13.z
  ult r17.w, r14.w, cb2[0].y
  and r15.w, r15.w, r17.w
  if_nz r15.w
    imul null, r14.w, r14.w, l(14)
    add r24.xyz, r10.xyzx, -cb10[r14.w + 0].xyzx
    and r15.w, l(0x0000ffff), cb10[r14.w + 7].z
    ubfe r17.w, l(6), l(25), cb10[r14.w + 7].z
    imul null, r18.w, r15.w, l(6)
    dp3 r19.z, cb11[r18.w + 0].xyzx, r24.xyzx
    add_sat r19.z, r19.z, cb11[r18.w + 0].w
    dp3 r19.w, cb11[r18.w + 1].xyzx, r24.xyzx
    add_sat r19.w, r19.w, cb11[r18.w + 1].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 2].xyzx, r24.xyzx
    add_sat r19.w, r19.w, cb11[r18.w + 2].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 3].xyzx, r24.xyzx
    add_sat r19.w, r19.w, cb11[r18.w + 3].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 4].xyzx, r24.xyzx
    add_sat r19.w, r19.w, cb11[r18.w + 4].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 5].xyzx, r24.xyzx
    add_sat r18.w, r19.w, cb11[r18.w + 5].w
    mul r17.x, r18.w, r19.z
    and r18.w, l(1), cb10[r14.w + 6].x
    movc r19.zw, r18.wwww, r17.xxxy, r17.zzzx
    mov r17.x, cb10[r14.w + 6].x
    mov r25.xy, r19.zwzz
    mov r18.w, l(1)
    loop 
      ige r20.w, r18.w, r17.w
      breakc_nz r20.w
      iadd r20.w, r15.w, r18.w
      imul null, r20.w, r20.w, l(6)
      dp3 r21.w, cb11[r20.w + 0].xyzx, r24.xyzx
      add_sat r21.w, r21.w, cb11[r20.w + 0].w
      mul r21.w, r21.w, r25.x
      dp3 r24.w, cb11[r20.w + 1].xyzx, r24.xyzx
      add_sat r24.w, r24.w, cb11[r20.w + 1].w
      mul r21.w, r21.w, r24.w
      dp3 r24.w, cb11[r20.w + 2].xyzx, r24.xyzx
      add_sat r24.w, r24.w, cb11[r20.w + 2].w
      mul r21.w, r21.w, r24.w
      dp3 r24.w, cb11[r20.w + 3].xyzx, r24.xyzx
      add_sat r24.w, r24.w, cb11[r20.w + 3].w
      mul r21.w, r21.w, r24.w
      dp3 r24.w, cb11[r20.w + 4].xyzx, r24.xyzx
      add_sat r24.w, r24.w, cb11[r20.w + 4].w
      mul r21.w, r21.w, r24.w
      dp3 r24.w, cb11[r20.w + 5].xyzx, r24.xyzx
      add_sat r20.w, r24.w, cb11[r20.w + 5].w
      mul r25.x, r20.w, r21.w
      ushr r24.w, r17.x, l(2)
      ubfe r25.z, l(1), l(2), r17.x
      and r25.w, r24.w, l(2)
      max r26.x, r25.x, r25.y
      mad r20.w, -r21.w, r20.w, l(1.000000)
      mul r20.w, r20.w, r25.y
      movc r19.y, r25.w, r20.w, r26.x
      movc r25.xy, r25.zzzz, r25.xyxx, r19.xyxx
      iadd r18.w, r18.w, l(1)
      mov r17.x, r24.w
    endloop 
    mov_sat r25.y, r25.y
    mul r15.w, r25.y, cb10[r14.w + 6].y
    lt r17.x, l(0.000000), r15.w
    if_nz r17.x
      mad r23.w, r25.y, cb10[r14.w + 6].y, r23.w
      mul r15.w, r15.w, cb10[r14.w + 7].y
      mov r26.x, cb10[r14.w + 7].w
      mov r26.yz, cb10[r14.w + 8].xxyx
      dp3 r17.x, r16.xyzx, r26.xyzx
      dp3 r17.w, r24.xyzx, r26.xyzx
      add r17.w, r17.w, -cb10[r14.w + 8].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r9.w, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r17.x, -r17.x, l(0.00000010)
      div r17.x, r17.w, r17.x
      min r17.x, |r17.x|, l(131072.000000)
      mov r26.x, cb10[r14.w + 8].w
      mov r26.yz, cb10[r14.w + 9].xxyx
      dp3 r17.w, r16.xyzx, r26.xyzx
      dp3 r18.w, r24.xyzx, r26.xyzx
      add r18.w, r18.w, -cb10[r14.w + 9].z
      ge r19.y, r18.w, l(0.000000)
      max r18.w, r9.w, |r18.w|
      movc r18.w, r19.y, r18.w, -r18.w
      max r17.w, -r17.w, l(0.00000010)
      div r17.w, r18.w, r17.w
      min r17.x, |r17.w|, r17.x
      mov r26.x, cb10[r14.w + 9].w
      mov r26.yz, cb10[r14.w + 10].xxyx
      dp3 r17.w, r16.xyzx, r26.xyzx
      dp3 r18.w, r24.xyzx, r26.xyzx
      add r18.w, r18.w, -cb10[r14.w + 10].z
      ge r19.y, r18.w, l(0.000000)
      max r18.w, r9.w, |r18.w|
      movc r18.w, r19.y, r18.w, -r18.w
      max r17.w, -r17.w, l(0.00000010)
      div r17.w, r18.w, r17.w
      min r17.x, |r17.w|, r17.x
      mov r26.x, cb10[r14.w + 10].w
      mov r26.yz, cb10[r14.w + 11].xxyx
      dp3 r17.w, r16.xyzx, r26.xyzx
      dp3 r18.w, r24.xyzx, r26.xyzx
      add r18.w, r18.w, -cb10[r14.w + 11].z
      ge r19.y, r18.w, l(0.000000)
      max r18.w, r9.w, |r18.w|
      movc r18.w, r19.y, r18.w, -r18.w
      max r17.w, -r17.w, l(0.00000010)
      div r17.w, r18.w, r17.w
      min r17.x, |r17.w|, r17.x
      mov r26.x, cb10[r14.w + 11].w
      mov r26.yz, cb10[r14.w + 12].xxyx
      dp3 r17.w, r16.xyzx, r26.xyzx
      dp3 r18.w, r24.xyzx, r26.xyzx
      add r18.w, r18.w, -cb10[r14.w + 12].z
      ge r19.y, r18.w, l(0.000000)
      max r18.w, r9.w, |r18.w|
      movc r18.w, r19.y, r18.w, -r18.w
      max r17.w, -r17.w, l(0.00000010)
      div r17.w, r18.w, r17.w
      min r17.x, |r17.w|, r17.x
      mov r26.x, cb10[r14.w + 12].w
      mov r26.yz, cb10[r14.w + 13].xxyx
      dp3 r17.w, r16.xyzx, r26.xyzx
      dp3 r18.w, r24.xyzx, r26.xyzx
      add r18.w, r18.w, -cb10[r14.w + 13].z
      ge r19.y, r18.w, l(0.000000)
      max r18.w, r9.w, |r18.w|
      movc r18.w, r19.y, r18.w, -r18.w
      max r17.w, -r17.w, l(0.00000010)
      div r17.w, r18.w, r17.w
      min r17.x, |r17.w|, r17.x
      add r26.x, r24.x, cb10[r14.w + 3].w
      add r26.yz, r24.yyzy, cb10[r14.w + 4].xxyx
      mad r19.yzw, r16.xxyz, r17.xxxx, r26.xxyz
      dp3 r17.w, r19.yzwy, r19.yzwy
      sqrt r17.w, r17.w
      div r17.x, r17.x, r17.w
      add r17.x, r17.x, r17.x
      sqrt r17.x, r17.x
      mad r17.x, r8.w, l(5.000000), r17.x
      add r17.x, r17.x, l(-0.844800)
      mov r26.x, cb10[r14.w + 0].w
      mov r26.y, cb10[r14.w + 1].z
      mov r26.z, cb10[r14.w + 2].y
      dp3 r27.x, r19.yzwy, r26.xyzx
      mov r28.xy, cb10[r14.w + 1].xwxx
      mov r28.z, cb10[r14.w + 2].z
      dp3 r27.y, r19.yzwy, r28.xyzx
      mov r29.x, cb10[r14.w + 1].y
      mov r29.yz, cb10[r14.w + 2].xxwx
      dp3 r27.z, r19.yzwy, r29.xyzx
      ubfe r17.w, l(9), l(16), cb10[r14.w + 7].z
      utof r27.w, r17.w
      sample_l_indexable(texturecubearray)(float,float,float,float) r19.yzw, r27.xyzw, t8.wxyz, s2, r17.x
      dp3 r30.x, r24.xyzx, r26.xyzx
      dp3 r30.y, r24.xyzx, r28.xyzx
      dp3 r30.z, r24.xyzx, r29.xyzx
      mad_sat r24.xyz, r30.xyzx, cb10[r14.w + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      mul r30.xy, r24.xyxx, cb10[r14.w + 4].zwzz
      mul r30.z, r24.z, cb10[r14.w + 5].x
      add r24.xyz, r30.xyzx, cb10[r14.w + 5].yzwy
      dp3 r27.x, r11.xyzx, r26.xyzx
      dp3 r27.y, r11.xyzx, r28.xyzx
      dp3 r27.z, r11.xyzx, r29.xyzx
      lt r25.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r27.xxyz
      movc r18.z, r25.x, l(0), l(0.500000)
      add r26.xyz, r18.xyzx, r24.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t17.xyzw, s4, l(0.000000)
      mul r28.xyz, r27.xyzx, r27.xyzx
      mul r28.xyz, r15.wwww, r28.xyzx
      movc r20.z, r25.z, l(0), l(0.500000)
      add r29.xyz, r20.xyzx, r24.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t18.xyzw, s4, l(0.000000)
      mul r29.xyz, r28.yyyy, r29.xyzx
      mad r26.xyz, r26.xyzx, r28.xxxx, r29.xyzx
      movc r21.z, r25.w, l(0), l(0.500000)
      add r24.xyz, r21.xyzx, r24.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r24.xyz, r24.xyzx, t19.xyzw, s4, l(0.000000)
      mad r24.xyz, r24.xyzx, r28.zzzz, r26.xyzx
      sample_l_indexable(texturecubearray)(float,float,float,float) r25.xzw, r27.xyzw, t8.xwyz, s2, l(6.000000)
      mul r26.xyz, r24.xyzx, r25.xzwx
      dp3 r14.w, r26.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r22.xyz, r24.xyzx, r25.xzwx, r22.xyzx
      mul r17.x, r12.w, r14.w
      mul r19.yzw, r15.wwww, r19.yyzw
      dp3 r15.w, r19.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r14.w, r12.w, r14.w, r15.w
      div r14.w, r17.x, r14.w
      mov r24.x, r22.w
      mov r24.yz, r23.yyzy
      mad r23.xyz, r19.yzwy, r14.wwww, r24.xyzx
      mov r22.w, r23.x
    endif 
  endif 
  iadd r13.w, r13.w, l(1)
endloop 
lt r13.w, r23.w, l(1.000000)
if_nz r13.w
  mov r17.yz, l(0,0,1.000000,0)
  mov r18.xy, l(0,0,0,0)
  mov r19.x, l(1.000000)
  mov r20.xy, l(0,0,0,0)
  mov r21.xy, l(0,0,0,0)
  mov r24.x, r22.w
  mov r24.yzw, r23.yyzw
  mov r25.xyz, r22.xyzx
  mov r13.w, l(0)
  loop 
    ieq r14.w, r13.w, l(2)
    breakc_nz r14.w
    movc r14.w, r13.w, r0.x, r15.y
    ult r15.w, r14.w, r13.z
    if_nz r15.w
      imul null, r14.w, r14.w, l(14)
      add r26.xyz, r10.xyzx, -cb10[r14.w + 0].xyzx
      and r15.w, l(0x0000ffff), cb10[r14.w + 7].z
      ubfe r17.w, l(6), l(25), cb10[r14.w + 7].z
      imul null, r18.w, r15.w, l(6)
      dp3 r19.z, cb11[r18.w + 0].xyzx, r26.xyzx
      add_sat r19.z, r19.z, cb11[r18.w + 0].w
      dp3 r19.w, cb11[r18.w + 1].xyzx, r26.xyzx
      add_sat r19.w, r19.w, cb11[r18.w + 1].w
      mul r19.z, r19.w, r19.z
      dp3 r19.w, cb11[r18.w + 2].xyzx, r26.xyzx
      add_sat r19.w, r19.w, cb11[r18.w + 2].w
      mul r19.z, r19.w, r19.z
      dp3 r19.w, cb11[r18.w + 3].xyzx, r26.xyzx
      add_sat r19.w, r19.w, cb11[r18.w + 3].w
      mul r19.z, r19.w, r19.z
      dp3 r19.w, cb11[r18.w + 4].xyzx, r26.xyzx
      add_sat r19.w, r19.w, cb11[r18.w + 4].w
      mul r19.z, r19.w, r19.z
      dp3 r19.w, cb11[r18.w + 5].xyzx, r26.xyzx
      add_sat r18.w, r19.w, cb11[r18.w + 5].w
      mul r17.x, r18.w, r19.z
      and r18.w, l(1), cb10[r14.w + 6].x
      movc r19.zw, r18.wwww, r17.xxxy, r17.zzzx
      mov r17.x, cb10[r14.w + 6].x
      mov r27.xy, r19.zwzz
      mov r18.w, l(1)
      loop 
        ige r20.w, r18.w, r17.w
        breakc_nz r20.w
        iadd r20.w, r15.w, r18.w
        imul null, r20.w, r20.w, l(6)
        dp3 r21.w, cb11[r20.w + 0].xyzx, r26.xyzx
        add_sat r21.w, r21.w, cb11[r20.w + 0].w
        mul r21.w, r21.w, r27.x
        dp3 r25.w, cb11[r20.w + 1].xyzx, r26.xyzx
        add_sat r25.w, r25.w, cb11[r20.w + 1].w
        mul r21.w, r21.w, r25.w
        dp3 r25.w, cb11[r20.w + 2].xyzx, r26.xyzx
        add_sat r25.w, r25.w, cb11[r20.w + 2].w
        mul r21.w, r21.w, r25.w
        dp3 r25.w, cb11[r20.w + 3].xyzx, r26.xyzx
        add_sat r25.w, r25.w, cb11[r20.w + 3].w
        mul r21.w, r21.w, r25.w
        dp3 r25.w, cb11[r20.w + 4].xyzx, r26.xyzx
        add_sat r25.w, r25.w, cb11[r20.w + 4].w
        mul r21.w, r21.w, r25.w
        dp3 r25.w, cb11[r20.w + 5].xyzx, r26.xyzx
        add_sat r20.w, r25.w, cb11[r20.w + 5].w
        mul r27.x, r20.w, r21.w
        ushr r25.w, r17.x, l(2)
        ubfe r26.w, l(1), l(2), r17.x
        and r27.z, r25.w, l(2)
        max r27.w, r27.x, r27.y
        mad r20.w, -r21.w, r20.w, l(1.000000)
        mul r20.w, r20.w, r27.y
        movc r19.y, r27.z, r20.w, r27.w
        movc r27.xy, r26.wwww, r27.xyxx, r19.xyxx
        iadd r18.w, r18.w, l(1)
        mov r17.x, r25.w
      endloop 
      add_sat r15.w, -r23.w, r27.y
      mul r17.x, r15.w, cb10[r14.w + 6].y
      lt r17.w, l(0.000000), r17.x
      if_nz r17.w
        mad r24.w, r15.w, cb10[r14.w + 6].y, r24.w
        mul r15.w, r17.x, cb10[r14.w + 7].y
        mov r28.x, cb10[r14.w + 7].w
        mov r28.yz, cb10[r14.w + 8].xxyx
        dp3 r17.x, r16.xyzx, r28.xyzx
        dp3 r17.w, r26.xyzx, r28.xyzx
        add r17.w, r17.w, -cb10[r14.w + 8].z
        ge r18.w, r17.w, l(0.000000)
        max r17.w, r9.w, |r17.w|
        movc r17.w, r18.w, r17.w, -r17.w
        max r17.x, -r17.x, l(0.00000010)
        div r17.x, r17.w, r17.x
        min r17.x, |r17.x|, l(131072.000000)
        mov r28.x, cb10[r14.w + 8].w
        mov r28.yz, cb10[r14.w + 9].xxyx
        dp3 r17.w, r16.xyzx, r28.xyzx
        dp3 r18.w, r26.xyzx, r28.xyzx
        add r18.w, r18.w, -cb10[r14.w + 9].z
        ge r19.y, r18.w, l(0.000000)
        max r18.w, r9.w, |r18.w|
        movc r18.w, r19.y, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.x, |r17.w|, r17.x
        mov r28.x, cb10[r14.w + 9].w
        mov r28.yz, cb10[r14.w + 10].xxyx
        dp3 r17.w, r16.xyzx, r28.xyzx
        dp3 r18.w, r26.xyzx, r28.xyzx
        add r18.w, r18.w, -cb10[r14.w + 10].z
        ge r19.y, r18.w, l(0.000000)
        max r18.w, r9.w, |r18.w|
        movc r18.w, r19.y, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.x, |r17.w|, r17.x
        mov r28.x, cb10[r14.w + 10].w
        mov r28.yz, cb10[r14.w + 11].xxyx
        dp3 r17.w, r16.xyzx, r28.xyzx
        dp3 r18.w, r26.xyzx, r28.xyzx
        add r18.w, r18.w, -cb10[r14.w + 11].z
        ge r19.y, r18.w, l(0.000000)
        max r18.w, r9.w, |r18.w|
        movc r18.w, r19.y, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.x, |r17.w|, r17.x
        mov r28.x, cb10[r14.w + 11].w
        mov r28.yz, cb10[r14.w + 12].xxyx
        dp3 r17.w, r16.xyzx, r28.xyzx
        dp3 r18.w, r26.xyzx, r28.xyzx
        add r18.w, r18.w, -cb10[r14.w + 12].z
        ge r19.y, r18.w, l(0.000000)
        max r18.w, r9.w, |r18.w|
        movc r18.w, r19.y, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.x, |r17.w|, r17.x
        mov r28.x, cb10[r14.w + 12].w
        mov r28.yz, cb10[r14.w + 13].xxyx
        dp3 r17.w, r16.xyzx, r28.xyzx
        dp3 r18.w, r26.xyzx, r28.xyzx
        add r18.w, r18.w, -cb10[r14.w + 13].z
        ge r19.y, r18.w, l(0.000000)
        max r18.w, r9.w, |r18.w|
        movc r18.w, r19.y, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.x, |r17.w|, r17.x
        add r28.x, r26.x, cb10[r14.w + 3].w
        add r28.yz, r26.yyzy, cb10[r14.w + 4].xxyx
        mad r19.yzw, r16.xxyz, r17.xxxx, r28.xxyz
        dp3 r17.w, r19.yzwy, r19.yzwy
        sqrt r17.w, r17.w
        div r17.x, r17.x, r17.w
        add r17.x, r17.x, r17.x
        sqrt r17.x, r17.x
        mad r17.x, r8.w, l(5.000000), r17.x
        add r17.x, r17.x, l(-0.844800)
        mov r28.x, cb10[r14.w + 0].w
        mov r28.y, cb10[r14.w + 1].z
        mov r28.z, cb10[r14.w + 2].y
        dp3 r29.x, r19.yzwy, r28.xyzx
        mov r30.xy, cb10[r14.w + 1].xwxx
        mov r30.z, cb10[r14.w + 2].z
        dp3 r29.y, r19.yzwy, r30.xyzx
        mov r31.x, cb10[r14.w + 1].y
        mov r31.yz, cb10[r14.w + 2].xxwx
        dp3 r29.z, r19.yzwy, r31.xyzx
        ubfe r17.w, l(9), l(16), cb10[r14.w + 7].z
        utof r29.w, r17.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r19.yzw, r29.xyzw, t8.wxyz, s2, r17.x
        dp3 r32.x, r26.xyzx, r28.xyzx
        dp3 r32.y, r26.xyzx, r30.xyzx
        dp3 r32.z, r26.xyzx, r31.xyzx
        mad_sat r26.xyz, r32.xyzx, cb10[r14.w + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
        mul r32.xy, r26.xyxx, cb10[r14.w + 4].zwzz
        mul r32.z, r26.z, cb10[r14.w + 5].x
        add r26.xyz, r32.xyzx, cb10[r14.w + 5].yzwy
        dp3 r29.x, r11.xyzx, r28.xyzx
        dp3 r29.y, r11.xyzx, r30.xyzx
        dp3 r29.z, r11.xyzx, r31.xyzx
        lt r27.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r29.xxyz
        movc r18.z, r27.x, l(0), l(0.500000)
        add r28.xyz, r18.xyzx, r26.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r28.xyz, r28.xyzx, t17.xyzw, s4, l(0.000000)
        mul r30.xyz, r29.xyzx, r29.xyzx
        mul r30.xyz, r15.wwww, r30.xyzx
        movc r20.z, r27.z, l(0), l(0.500000)
        add r31.xyz, r20.xyzx, r26.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r31.xyz, r31.xyzx, t18.xyzw, s4, l(0.000000)
        mul r31.xyz, r30.yyyy, r31.xyzx
        mad r28.xyz, r28.xyzx, r30.xxxx, r31.xyzx
        movc r21.z, r27.w, l(0), l(0.500000)
        add r26.xyz, r21.xyzx, r26.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t19.xyzw, s4, l(0.000000)
        mad r26.xyz, r26.xyzx, r30.zzzz, r28.xyzx
        sample_l_indexable(texturecubearray)(float,float,float,float) r27.xzw, r29.xyzw, t8.xwyz, s2, l(6.000000)
        mul r28.xyz, r26.xyzx, r27.xzwx
        dp3 r14.w, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r25.xyz, r26.xyzx, r27.xzwx, r25.xyzx
        mul r17.x, r12.w, r14.w
        mul r19.yzw, r15.wwww, r19.yyzw
        dp3 r15.w, r19.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r14.w, r12.w, r14.w, r15.w
        div r14.w, r17.x, r14.w
        mad r24.xyz, r19.yzwy, r14.wwww, r24.xyzx
      endif 
    endif 
    iadd r13.w, r13.w, l(1)
  endloop 
  mov r23.xyzw, r24.zxyw
  mov r22.xyz, r25.xyzx
  mov r23.xyzw, r23.yzxw
else 
  mov r23.x, r22.w
endif 
max r0.x, r23.w, l(1.000000)
rcp r0.x, r0.x
mov_sat r23.w, r23.w
mul r17.xyz, r0.xxxx, r22.xyzx
mul r18.xyz, r0.xxxx, r23.xyzx
lt r8.w, r23.w, l(0.990000)
if_nz r8.w
  add r8.w, -r23.w, l(1.000000)
  mul r9.w, r8.w, cb2[19].x
  add r19.xyz, r10.xyzx, -cb2[35].xyzx
  mul r20.x, r19.x, cb2[35].w
  mul r20.yz, r19.yyzy, cb2[36].xxyx
  add_sat r19.xyz, r20.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r20.xy, r19.xyxx, cb2[36].zwzz
  mul r20.z, r19.z, cb2[37].x
  add r19.xyz, r20.xyzx, cb2[37].yzwy
  lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r20.xyz, r20.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r20.w, l(0)
  add r21.xyz, r19.xyzx, r20.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t17.xyzw, s4, l(0.000000)
  mul r23.xyz, r11.xyzx, r11.xyzx
  mul r23.xyz, r9.wwww, r23.xyzx
  add r24.xyz, r19.xyzx, r20.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r24.xyz, r24.xyzx, t18.xyzw, s4, l(0.000000)
  mul r24.xyz, r23.yyyy, r24.xyzx
  mad r21.xyz, r21.xyzx, r23.xxxx, r24.xyzx
  add r19.xyz, r19.xyzx, r20.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t19.xyzw, s4, l(0.000000)
  mad r19.xyz, r19.xyzx, r23.zzzz, r21.xyzx
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r19.xyz, r19.xyzx, r20.xyzx
  dp3 r9.w, r19.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r17.xyz, r22.xyzx, r0.xxxx, r19.xyzx
  mov r16.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r16.xyzw, t8.xyzw, s2, r9.y
  mad r0.x, cb2[19].x, r8.w, -r9.w
  mad r0.x, r2.y, r0.x, r9.w
  mad r18.xyz, r19.xyzx, r0.xxxx, r18.xyzx
endif 
mad r0.x, r4.z, r2.z, r2.x
log r0.x, |r0.x|
mul r0.x, r0.x, r1.w
exp r0.x, r0.x
mad r0.x, r4.z, r2.z, r0.x
add_sat r0.x, r0.x, l(-1.000000)
mul r19.xyz, r2.wwww, r17.xyzx
and r20.xyz, r0.wwww, r19.yzxy
mad r2.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t5.zxyw, s2, l(0.000000)
mul r18.xyz, r0.xxxx, r18.xyzx
mul r21.xyz, r2.yyyy, r18.xyzx
mul r18.xyz, r2.zzzz, r18.xyzx
sqrt r0.x, r1.w
mad r0.x, r0.x, l(0.500000), l(0.500000)
mul r0.x, r0.x, r0.x
mul r2.y, r0.x, l(0.500000)
mad r0.x, -r0.x, l(0.500000), l(1.000000)
mad r2.z, r2.x, r0.x, r2.y
mul r0.x, r0.x, r2.z
mul r2.y, r2.z, r2.y
lt r2.z, l(0.000000), r7.w
if_nz r2.z
  lt r2.z, l(0.000000), r9.x
  if_nz r2.z
    mul r2.z, r1.z, cb2[18].w
    mul r2.z, r6.w, r2.z
    if_nz cb2[23].x
      add r22.xyz, r10.xyzx, cb1[24].xyzx
      mov r22.w, l(1.000000)
      dp4 r4.z, cb2[24].xyzw, r22.xyzw
      dp4 r8.w, cb2[25].xyzw, r22.xyzw
      frc r22.x, r4.z
      frc r22.y, r8.w
      iadd r4.z, l(-1), cb2[23].x
      utof r22.z, r4.z
      sample_l_indexable(texture2darray)(float,float,float,float) r22.xyz, r22.xyzx, t20.xyzw, s2, l(0.000000)
      add r22.xyz, r22.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r22.xyz, cb2[23].yyyy, r22.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r22.xyz, r22.xyzx, cb2[18].xyzx
    else 
      mov r22.xyz, cb2[18].xyzx
    endif 
    ushr r4.z, cb2[53].x, l(16)
    ult r8.w, l(0), r4.z
    and r8.w, r9.z, r8.w
    if_nz r8.w
      iadd r4.z, r4.z, cb2[0].x
      imad r4.z, r4.z, l(15), l(-15)
      mad r8.w, |r5.w|, l(-0.200000), l(0.400000)
      lt r9.y, r5.w, l(0.000000)
      and r9.y, r0.w, r9.y
      movc r8.w, r9.y, -r8.w, r8.w
      mad r23.xyz, r11.xyzx, r8.wwww, r10.xyzx
      mov r24.xyz, cb9[r4.z + 4].yzwy
      mov r24.w, cb9[r4.z + 5].x
      mov r23.w, l(1.000000)
      dp4 r24.x, r24.xyzw, r23.xyzw
      mov r25.xyz, cb9[r4.z + 5].yzwy
      mov r25.w, cb9[r4.z + 6].x
      dp4 r24.y, r25.xyzw, r23.xyzw
      mad r9.yw, r24.xxxy, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
      add r24.x, r9.y, cb9[r4.z + 9].w
      add r24.y, r9.w, cb9[r4.z + 10].x
      mul r9.yw, r24.xxxy, cb9[r4.z + 9].yyyz
      div r13.zw, cb9[r4.z + 3].yyyy, cb9[r4.z + 8].yyyw
      add r15.yw, -r13.zzzw, l(0.000000, 1.000000, 0.000000, 1.000000)
      ge r15.yw, r9.yyyw, r15.yyyw
      ge r13.zw, r13.zzzw, r9.yyyw
      or r13.zw, r13.zzzw, r15.yyyw
      or r8.w, r13.w, r13.z
      if_z r8.w
        mov r24.xyz, cb9[r4.z + 6].yzwy
        mov r24.w, cb9[r4.z + 7].x
        dp4 r8.w, r24.xyzw, r23.xyzw
        mov_sat r9.yw, r9.yyyw
        mad r23.x, r9.y, cb9[r4.z + 8].y, cb9[r4.z + 8].z
        mad r23.y, r9.w, cb9[r4.z + 8].w, cb9[r4.z + 9].x
        add r8.w, r8.w, cb9[r4.z + 10].y
        div r8.w, r8.w, cb9[r4.z + 10].z
        max r8.w, r8.w, l(0.00006104)
        and r9.y, l(0x0000ffff), cb9[r4.z + 1].w
        if_nz cb2[58].y
          mov r24.x, -r13.x
          utof r25.z, r9.y
          mov r24.y, r14.x
          mov r24.z, r13.x
          mov r9.w, l(0)
          mov r11.w, l(0)
          loop 
            ige r12.w, r11.w, l(8)
            breakc_nz r12.w
            dp2 r26.x, icb[r11.w + 0].yxyy, r24.xyxx
            dp2 r26.y, icb[r11.w + 0].yxyy, r24.yzyy
            mad r25.xy, r26.xyxx, cb9[r4.z + 3].yyyy, r23.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r25.xyzx, t9.xxxx, s13, r8.w
            mad r9.w, r12.w, l(0.125000), r9.w
            iadd r11.w, r11.w, l(1)
          endloop 
        else 
          utof r23.z, r9.y
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r23.xyzx, t9.xxxx, s13, r8.w
        endif 
        mul r4.z, r9.w, r9.w
        mul r4.z, r9.w, r4.z
      else 
        mov r4.z, l(1.000000)
      endif 
      mul r9.x, r4.z, r9.x
    else 
      and r4.z, cb2[53].x, l(0x0000ffff)
      ult r8.w, l(0), r4.z
      not r9.y, r9.z
      and r8.w, r8.w, r9.y
      if_nz r8.w
        iadd r4.z, r4.z, cb2[0].x
        imad r4.z, r4.z, l(15), l(-15)
        mad r8.w, |r5.w|, l(-0.200000), l(0.400000)
        lt r9.y, r5.w, l(0.000000)
        and r9.y, r0.w, r9.y
        movc r8.w, r9.y, -r8.w, r8.w
        mad r23.xyz, r11.xyzx, r8.wwww, r10.xyzx
        mov r24.xyz, cb9[r4.z + 4].yzwy
        mov r24.w, cb9[r4.z + 5].x
        mov r23.w, l(1.000000)
        dp4 r24.x, r24.xyzw, r23.xyzw
        mov r25.xyz, cb9[r4.z + 5].yzwy
        mov r25.w, cb9[r4.z + 6].x
        dp4 r24.y, r25.xyzw, r23.xyzw
        mad r9.yw, r24.xxxy, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
        add r24.x, r9.y, cb9[r4.z + 9].w
        add r24.y, r9.w, cb9[r4.z + 10].x
        mul r9.yw, r24.xxxy, cb9[r4.z + 9].yyyz
        div r13.zw, cb9[r4.z + 3].yyyy, cb9[r4.z + 8].yyyw
        add r15.yw, -r13.zzzw, l(0.000000, 1.000000, 0.000000, 1.000000)
        ge r15.yw, r9.yyyw, r15.yyyw
        ge r13.zw, r13.zzzw, r9.yyyw
        or r13.zw, r13.zzzw, r15.yyyw
        or r8.w, r13.w, r13.z
        if_z r8.w
          mov r24.xyz, cb9[r4.z + 6].yzwy
          mov r24.w, cb9[r4.z + 7].x
          dp4 r8.w, r24.xyzw, r23.xyzw
          mov_sat r9.yw, r9.yyyw
          mad r23.x, r9.y, cb9[r4.z + 8].y, cb9[r4.z + 8].z
          mad r23.y, r9.w, cb9[r4.z + 8].w, cb9[r4.z + 9].x
          add r8.w, r8.w, cb9[r4.z + 10].y
          div r8.w, r8.w, cb9[r4.z + 10].z
          max r8.w, r8.w, l(0.00006104)
          and r9.y, l(0x0000ffff), cb9[r4.z + 1].w
          if_nz cb2[58].y
            mov r24.x, -r13.x
            utof r25.z, r9.y
            mov r24.y, r14.x
            mov r24.z, r13.x
            mov r9.w, l(0)
            mov r11.w, l(0)
            loop 
              ige r12.w, r11.w, l(8)
              breakc_nz r12.w
              dp2 r26.x, icb[r11.w + 0].yxyy, r24.xyxx
              dp2 r26.y, icb[r11.w + 0].yxyy, r24.yzyy
              mad r25.xy, r26.xyxx, cb9[r4.z + 3].yyyy, r23.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r25.xyzx, t9.xxxx, s13, r8.w
              mad r9.w, r12.w, l(0.125000), r9.w
              iadd r11.w, r11.w, l(1)
            endloop 
          else 
            utof r23.z, r9.y
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r23.xyzx, t9.xxxx, s13, r8.w
          endif 
          mul r4.z, r9.w, r9.w
          mul r4.z, r9.w, r4.z
        else 
          mov r4.z, l(1.000000)
        endif 
        mul r9.x, r4.z, r9.x
      endif 
    endif 
    mad r4.z, -r2.x, l(0.500000), l(1.000000)
    mad r4.z, -r7.w, r4.z, l(1.000000)
    mul r4.z, r4.z, r4.z
    mad r4.z, -r4.z, l(0.620000), l(0.620000)
    add r4.z, -r7.w, r4.z
    mad r4.z, r1.w, r4.z, r7.w
    mul r4.z, r9.x, r4.z
    mul r23.xyz, r22.xyzx, r4.zzzz
    lt r5.w, l(0.000000), r5.w
    mad r17.xyz, r17.xyzx, r2.wwww, r23.xyzx
    mad r23.xyz, -r10.xyzx, r0.zzzz, cb2[17].xyzx
    dp3 r0.z, r23.xyzx, r23.xyzx
    rsq r0.z, r0.z
    mul r23.xyz, r0.zzzz, r23.xyzx
    dp3 r0.z, r23.xyzx, r12.xyzx
    dp3 r2.w, r11.xyzx, r23.xyzx
    mad r7.w, |r2.w|, r1.z, -|r2.w|
    mad r2.w, |r2.w|, r7.w, l(1.000000)
    mad r6.w, r6.w, r0.x, r2.y
    mul r2.w, r2.w, r2.w
    mul r2.w, r6.w, r2.w
    rcp r2.w, r2.w
    mul r2.z, r2.z, r2.w
    mul r2.z, r2.z, r9.x
    mul r2.z, r2.z, l(0.250000)
    mad r23.yzw, r2.zzzz, r22.xxyz, r18.xxyz
    add_sat r0.z, -r0.z, l(1.000000)
    mul r2.w, r0.z, r0.z
    mul r2.w, r2.w, r2.w
    mul r0.z, r0.z, r2.w
    mul r0.z, r0.z, r2.z
    mad r9.xyw, r0.zzzz, r22.xyxz, r21.xyxz
    mad r22.xyz, r4.zzzz, r22.xyzx, r20.zxyz
    and r22.xyz, r0.wwww, r22.yzxy
    mov r17.w, r20.z
    mov r19.w, r22.z
    movc r19.xyzw, r5.wwww, r17.xyzw, r19.xyzw
    mov r20.zw, r9.xxxy
    mov r22.zw, r21.xxxy
    movc r17.xyzw, r5.wwww, r20.xyzw, r22.xyzw
    mov r23.x, r9.w
    mov r18.w, r21.z
    movc r18.xyzw, r5.wwww, r23.yzwx, r18.xyzw
    mov r20.z, r19.w
    mov r20.xy, r17.xyxx
    mov r21.xy, r17.zwzz
    mov r21.z, r18.w
  endif 
endif 
mov r17.x, -r13.x
not r0.z, r9.z
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r10.w, l(1.000000)
mov r22.w, l(1.000000)
mov r17.z, r13.x
mov r23.z, l(1.000000)
mov r24.w, l(1.000000)
mov r25.w, l(1.000000)
mov r17.yw, r14.xxxx
mov r13.y, r17.w
mov r26.w, l(1.000000)
mov r14.y, r17.x
mov r14.z, r13.x
mov r27.w, l(1.000000)
mov r28.x, r14.x
mov r28.y, r17.x
mov r28.z, r13.x
mov r29.x, r14.x
mov r29.y, r17.x
mov r29.z, r13.x
mov r30.x, r14.x
mov r30.y, r17.x
mov r30.z, r13.x
mov r9.xyw, r19.xyxz
mov r31.xyz, r20.zxyz
mov r32.xyz, r21.xyzx
mov r33.xyz, r18.xyzx
mov r2.z, l(0)
loop 
  ieq r2.w, r2.z, l(2)
  breakc_nz r2.w
  movc r2.w, r2.z, r0.y, r15.z
  imul null, r2.w, r2.w, l(15)
  ubfe r4.z, l(3), l(24), cb9[r2.w + 1].w
  switch r4.z
    case l(4)
    lt r4.z, l(0.000000), cb9[r2.w + 6].y
    mov r34.xy, cb9[r2.w + 5].zwzz
    mov r34.z, cb9[r2.w + 6].x
    mad r35.xyz, -r34.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), cb9[r2.w + 0].xyzx
    add r36.xyz, -r10.xyzx, r35.xyzx
    dp3 r5.w, r34.xyzx, r36.xyzx
    div_sat r6.w, -r5.w, cb9[r2.w + 6].y
    mad r37.xyz, r6.wwww, r34.xyzx, r35.xyzx
    movc r37.xyz, r4.zzzz, r37.xyzx, cb9[r2.w + 0].xyzx
    add r37.xyz, -r10.xyzx, r37.xyzx
    dp3 r7.w, r37.xyzx, r37.xyzx
    rsq r8.w, r7.w
    mul r37.xyz, r8.wwww, r37.xyzx
    dp3 r8.w, r11.xyzx, r37.xyzx
    mov_sat r11.w, r8.w
    movc r11.w, r0.w, |r8.w|, r11.w
    lt r12.w, l(0.000000), r11.w
    if_nz r12.w
      sqrt r12.w, r7.w
      mul r13.z, cb9[r2.w + 3].x, cb9[r2.w + 3].x
      div r7.w, r13.z, r7.w
      min r7.w, r7.w, l(1.000000)
      mad_sat r13.zw, r12.wwww, cb9[r2.w + 2].xxxz, cb9[r2.w + 2].yyyw
      mul r15.yw, r13.zzzw, r13.zzzw
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
      mul r13.zw, r13.zzzw, r15.yyyw
      mul r7.w, r7.w, r13.z
      mul r7.w, r13.w, r7.w
      lt r12.w, l(0.000000), r7.w
      if_nz r12.w
        ubfe r12.w, l(3), l(27), cb9[r2.w + 1].w
        ine r12.w, r12.w, l(1)
        if_nz r12.w
          mad r12.w, |r8.w|, l(-0.200000), l(0.400000)
          lt r13.z, r8.w, l(0.000000)
          and r13.z, r0.w, r13.z
          movc r12.w, r13.z, -r12.w, r12.w
          mad r37.xyz, r11.xyzx, r12.wwww, r10.xyzx
          add r37.xyz, r37.xyzx, -cb9[r2.w + 4].yzwy
          max r12.w, |r37.z|, |r37.y|
          max r12.w, r12.w, |r37.x|
          div r12.w, cb9[r2.w + 5].x, r12.w
          add r12.w, r12.w, cb9[r2.w + 5].y
          dp3 r13.z, r37.xyzx, r37.xyzx
          rsq r13.z, r13.z
          max r12.w, r12.w, l(0.00006104)
          and r13.w, l(0x0000ffff), cb9[r2.w + 1].w
          utof r38.w, r13.w
          mov r13.w, l(0)
          mov r14.w, l(0)
          loop 
            ige r15.y, r14.w, l(8)
            breakc_nz r15.y
            dp2 r39.y, icb[r14.w + 0].yxyy, r17.xyxx
            dp2 r39.z, icb[r14.w + 0].yxyy, r17.yzyy
            mul r39.yz, r39.yyzy, cb9[r2.w + 3].yyyy
            mul r39.x, r15.x, r39.y
            mul r39.w, r3.x, r39.y
            mad r38.xyz, r37.xyzx, r13.zzzz, r39.xzwx
            sample_c_lz_indexable(texturecubearray)(float,float,float,float) r15.y, r38.xyzw, t10.xxxx, s13, r12.w
            mad r13.w, r15.y, l(0.125000), r13.w
            iadd r14.w, r14.w, l(1)
          endloop 
        else 
          mov r13.w, l(1.000000)
        endif 
        mul r7.w, r7.w, r13.w
        lt r12.w, l(0.000000), r7.w
        if_nz r12.w
          mul r12.w, r1.z, cb9[r2.w + 1].z
          mul r12.w, r12.w, l(0.250000)
          dp3 r13.z, r34.xyzx, r16.xyzx
          dp3 r14.w, r16.xyzx, r36.xyzx
          mad r15.y, -r13.z, r13.z, cb9[r2.w + 6].y
          mad r5.w, r13.z, r14.w, -r5.w
          div_sat r5.w, r5.w, r15.y
          div r13.z, r15.y, cb9[r2.w + 6].y
          mul r13.z, r13.z, l(10.000000)
          min r13.z, r13.z, l(1.000000)
          add r5.w, -r6.w, r5.w
          mad r5.w, r13.z, r5.w, r6.w
          mad r34.xyz, r5.wwww, r34.xyzx, r35.xyzx
          movc r34.xyz, r4.zzzz, r34.xyzx, cb9[r2.w + 0].xyzx
          add r34.xyz, -r10.xyzx, r34.xyzx
          dp3 r4.z, r34.xyzx, r34.xyzx
          rsq r4.z, r4.z
          mul r35.xyz, r4.zzzz, r34.xyzx
          ubfe r5.w, l(4), l(16), cb9[r2.w + 1].w
          ult r6.w, l(0), r5.w
          and r6.w, r9.z, r6.w
          if_nz r6.w
            iadd r5.w, r5.w, cb2[0].x
            imad r5.w, r5.w, l(15), l(-15)
            mad r6.w, |r8.w|, l(-0.200000), l(0.400000)
            lt r13.z, r8.w, l(0.000000)
            and r13.z, r0.w, r13.z
            movc r6.w, r13.z, -r6.w, r6.w
            mad r22.xyz, r11.xyzx, r6.wwww, r10.xyzx
            mov r36.xyz, cb9[r5.w + 6].yzwy
            mov r36.w, cb9[r5.w + 7].x
            dp4 r6.w, r36.xyzw, r22.xyzw
            mov r36.xyz, cb9[r5.w + 7].yzwy
            mov r36.w, cb9[r5.w + 8].x
            dp4 r13.z, r36.xyzw, r22.xyzw
            lt r14.w, r13.z, r6.w
            if_z r14.w
              mov r36.xyz, cb9[r5.w + 4].yzwy
              mov r36.w, cb9[r5.w + 5].x
              dp4 r36.x, r36.xyzw, r22.xyzw
              mov r37.xyz, cb9[r5.w + 5].yzwy
              mov r37.w, cb9[r5.w + 6].x
              dp4 r36.y, r37.xyzw, r22.xyzw
              div r15.yw, r36.xxxy, r13.zzzz
              mad r15.yw, r15.yyyw, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
              add r22.x, r15.y, cb9[r5.w + 9].w
              add r22.y, r15.w, cb9[r5.w + 10].x
              mul r15.yw, r22.xxxy, cb9[r5.w + 9].yyyz
              div r22.xy, cb9[r5.w + 3].yyyy, cb9[r5.w + 8].ywyy
              add r36.xy, -r22.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r36.xy, r15.ywyy, r36.xyxx
              ge r22.xy, r22.xyxx, r15.ywyy
              or r22.xy, r22.xyxx, r36.xyxx
              or r16.w, r22.y, r22.x
              if_z r16.w
                mov_sat r15.yw, r15.yyyw
                mad r22.x, r15.y, cb9[r5.w + 8].y, cb9[r5.w + 8].z
                mad r22.y, r15.w, cb9[r5.w + 8].w, cb9[r5.w + 9].x
                mul r15.y, r13.z, cb9[r5.w + 10].z
                mad r6.w, cb9[r5.w + 10].y, r13.z, r6.w
                div r6.w, r6.w, r15.y
              endif 
            else 
              mov r16.w, l(-1)
            endif 
            or r13.z, r14.w, r16.w
            if_z r13.z
              max r6.w, r6.w, l(0.00006104)
              and r13.z, l(0x0000ffff), cb9[r5.w + 1].w
              if_nz cb2[58].y
                utof r36.z, r13.z
                mov r14.w, l(0)
                mov r15.y, l(0)
                loop 
                  ige r15.w, r15.y, l(8)
                  breakc_nz r15.w
                  dp2 r37.x, icb[r15.y + 0].yxyy, r17.xwxx
                  dp2 r37.y, icb[r15.y + 0].xyxx, r13.xyxx
                  mad r36.xy, r37.xyxx, cb9[r5.w + 3].yyyy, r22.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r36.xyzx, t9.xxxx, s13, r6.w
                  mad r14.w, r15.w, l(0.125000), r14.w
                  iadd r15.y, r15.y, l(1)
                endloop 
              else 
                utof r22.z, r13.z
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r22.xyzx, t9.xxxx, s13, r6.w
              endif 
              mul r5.w, r14.w, r14.w
              mul r5.w, r14.w, r5.w
            else 
              mov r5.w, l(1.000000)
            endif 
            mul r7.w, r5.w, r7.w
          else 
            ubfe r5.w, l(4), l(20), cb9[r2.w + 1].w
            ult r6.w, l(0), r5.w
            and r6.w, r0.z, r6.w
            if_nz r6.w
              iadd r5.w, r5.w, cb2[0].x
              imad r5.w, r5.w, l(15), l(-15)
              mad r6.w, |r8.w|, l(-0.200000), l(0.400000)
              lt r13.z, r8.w, l(0.000000)
              and r13.z, r0.w, r13.z
              movc r6.w, r13.z, -r6.w, r6.w
              mad r24.xyz, r11.xyzx, r6.wwww, r10.xyzx
              mov r36.xyz, cb9[r5.w + 6].yzwy
              mov r36.w, cb9[r5.w + 7].x
              dp4 r6.w, r36.xyzw, r24.xyzw
              mov r36.xyz, cb9[r5.w + 7].yzwy
              mov r36.w, cb9[r5.w + 8].x
              dp4 r13.z, r36.xyzw, r24.xyzw
              lt r15.y, r13.z, r6.w
              if_z r15.y
                mov r36.xyz, cb9[r5.w + 4].yzwy
                mov r36.w, cb9[r5.w + 5].x
                dp4 r22.x, r36.xyzw, r24.xyzw
                mov r36.xyz, cb9[r5.w + 5].yzwy
                mov r36.w, cb9[r5.w + 6].x
                dp4 r22.y, r36.xyzw, r24.xyzw
                div r22.xy, r22.xyxx, r13.zzzz
                mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r24.x, r22.x, cb9[r5.w + 9].w
                add r24.y, r22.y, cb9[r5.w + 10].x
                mul r22.xy, r24.xyxx, cb9[r5.w + 9].yzyy
                div r24.xy, cb9[r5.w + 3].yyyy, cb9[r5.w + 8].ywyy
                add r36.xy, -r24.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r36.xy, r22.xyxx, r36.xyxx
                ge r24.xy, r24.xyxx, r22.xyxx
                or r24.xy, r24.xyxx, r36.xyxx
                or r15.w, r24.y, r24.x
                if_z r15.w
                  mov_sat r22.xy, r22.xyxx
                  mad r24.x, r22.x, cb9[r5.w + 8].y, cb9[r5.w + 8].z
                  mad r24.y, r22.y, cb9[r5.w + 8].w, cb9[r5.w + 9].x
                  mul r16.w, r13.z, cb9[r5.w + 10].z
                  mad r6.w, cb9[r5.w + 10].y, r13.z, r6.w
                  div r6.w, r6.w, r16.w
                endif 
              else 
                mov r15.w, l(-1)
              endif 
              or r13.z, r15.y, r15.w
              if_z r13.z
                max r6.w, r6.w, l(0.00006104)
                and r13.z, l(0x0000ffff), cb9[r5.w + 1].w
                if_nz cb2[58].y
                  utof r22.z, r13.z
                  mov r15.yw, l(0,0,0,0)
                  loop 
                    ige r16.w, r15.w, l(8)
                    breakc_nz r16.w
                    dp2 r36.x, icb[r15.w + 0].xyxx, r14.xyxx
                    dp2 r36.y, icb[r15.w + 0].yxyy, r14.xzxx
                    mad r22.xy, r36.xyxx, cb9[r5.w + 3].yyyy, r24.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r22.xyzx, t9.xxxx, s13, r6.w
                    mad r15.y, r16.w, l(0.125000), r15.y
                    iadd r15.w, r15.w, l(1)
                  endloop 
                else 
                  utof r24.z, r13.z
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.y, r24.xyzx, t9.xxxx, s13, r6.w
                endif 
                mul r5.w, r15.y, r15.y
                mul r5.w, r15.y, r5.w
              else 
                mov r5.w, l(1.000000)
              endif 
              mul r7.w, r5.w, r7.w
            endif 
          endif 
          mad r5.w, -r11.w, r2.x, l(1.000000)
          mul r5.w, r5.w, r5.w
          mad r5.w, -r5.w, l(0.620000), l(0.620000)
          add r5.w, -r11.w, r5.w
          mad r5.w, r1.w, r5.w, r11.w
          mul r5.w, r7.w, r5.w
          mov r22.x, cb9[r2.w + 0].w
          mov r22.yz, cb9[r2.w + 1].xxyx
          lt r6.w, l(0.000000), r8.w
          mad r24.xyz, r5.wwww, r22.xyzx, r9.xywx
          dp3_sat r8.w, r11.xyzx, r35.xyzx
          mad r34.xyz, r34.xyzx, r4.zzzz, r12.xyzx
          dp3 r4.z, r34.xyzx, r34.xyzx
          rsq r4.z, r4.z
          mul r34.xyz, r4.zzzz, r34.xyzx
          dp3 r4.z, r34.xyzx, r12.xyzx
          dp3 r11.w, r11.xyzx, r34.xyzx
          mad r13.z, |r11.w|, r1.z, -|r11.w|
          mad r11.w, |r11.w|, r13.z, l(1.000000)
          mad r13.z, r8.w, r0.x, r2.y
          mul r11.w, r11.w, r11.w
          mul r11.w, r13.z, r11.w
          rcp r11.w, r11.w
          mul r8.w, r12.w, r8.w
          mul r8.w, r8.w, r11.w
          mul r7.w, r7.w, r8.w
          mad r34.xyz, r7.wwww, r22.xyzx, r33.xyzx
          add_sat r4.z, -r4.z, l(1.000000)
          mul r8.w, r4.z, r4.z
          mul r8.w, r8.w, r8.w
          mul r4.z, r4.z, r8.w
          mul r4.z, r4.z, r7.w
          mad r35.xyz, r4.zzzz, r22.xyzx, r32.xyzx
          mad r22.xyz, r5.wwww, r22.xyzx, r31.xyzx
          movc r22.xyz, r0.wwww, r22.xyzx, r31.xyzx
          movc r9.xyw, r6.wwww, r24.xyxz, r9.xyxw
          movc r31.xyz, r6.wwww, r31.xyzx, r22.xyzx
          movc r32.xyz, r6.wwww, r35.xyzx, r32.xyzx
          movc r33.xyz, r6.wwww, r34.xyzx, r33.xyzx
        endif 
      endif 
    endif 
    break 
    case l(2)
    add r22.xy, -r10.xyxx, cb9[r2.w + 3].zwzz
    add r22.z, -r10.z, cb9[r2.w + 4].x
    dp3 r4.z, r22.xyzx, r22.xyzx
    rsq r4.z, r4.z
    mul r24.xyz, r4.zzzz, r22.xyzx
    dp3 r5.w, r11.xyzx, r24.xyzx
    mov_sat r6.w, r5.w
    movc r7.w, r0.w, |r5.w|, r6.w
    lt r8.w, l(0.000000), r7.w
    if_nz r8.w
      mov r34.xyz, cb9[r2.w + 7].yzwy
      mov r34.w, cb9[r2.w + 8].x
      dp4 r8.w, r34.xyzw, r10.xyzw
      lt r11.w, r8.w, l(1.000000)
      if_nz r11.w
        mov r24.xyz, l(1.000000,1.000000,1.000000,0)
        mov r11.w, l(0)
      else 
        add r35.xyz, -r10.xyzx, cb9[r2.w + 0].xyzx
        mul r12.w, cb9[r2.w + 3].x, cb9[r2.w + 3].x
        dp3 r13.z, r35.xyzx, r35.xyzx
        div r12.w, r12.w, r13.z
        min r12.w, r12.w, l(1.000000)
        mad_sat r35.xy, r8.wwww, cb9[r2.w + 2].xzxx, cb9[r2.w + 2].ywyy
        mul r35.zw, r35.xxxy, r35.xxxy
        mad r35.xy, r35.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r35.xy, r35.xyxx, r35.zwzz
        mul r12.w, r12.w, r35.x
        mul r12.w, r35.y, r12.w
        mov r35.xyz, cb9[r2.w + 4].yzwy
        mov r35.w, cb9[r2.w + 5].x
        dp4 r35.x, r35.xyzw, r10.xyzw
        mov r36.xyz, cb9[r2.w + 5].yzwy
        mov r36.w, cb9[r2.w + 6].x
        dp4 r35.y, r36.xyzw, r10.xyzw
        div r23.xy, r35.xyxx, r8.wwww
        lt r8.w, cb9[r2.w + 10].w, l(0.00048828)
        if_nz r8.w
          mad_sat r35.xy, |r23.xyxx|, cb9[r2.w + 12].xyxx, cb9[r2.w + 12].zwzz
          mul r35.zw, r35.xxxy, r35.xxxy
          mad r35.xy, r35.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r35.xy, r35.xyxx, r35.zwzz
          mul r8.w, r35.y, r35.x
        else 
          mul_sat r35.xyzw, |r23.yyxx|, cb9[r2.w + 11].xyzw
          log r35.xyzw, r35.xyzw
          mul r35.xyzw, r35.xyzw, cb9[r2.w + 12].zzzz
          exp r35.xyzw, r35.xyzw
          add r35.xy, r35.zwzz, r35.xyxx
          log r35.xy, r35.xyxx
          mul r35.xy, r35.xyxx, cb9[r2.w + 12].wwww
          exp r35.xy, r35.xyxx
          mul r13.z, r35.x, cb9[r2.w + 12].x
          mad r15.w, cb9[r2.w + 12].y, r35.y, l(-1.000000)
          mad r13.z, cb9[r2.w + 12].y, r35.y, -r13.z
          div_sat r13.z, r15.w, r13.z
          mul r15.w, r13.z, r13.z
          mad r13.z, r13.z, l(-2.000000), l(3.000000)
          mul r8.w, r13.z, r15.w
        endif 
        mul r11.w, r8.w, r12.w
        and r8.w, l(255), cb9[r2.w + 14].w
        if_nz r8.w
          dp3 r12.w, cb9[r2.w + 13].xyzx, r23.xyzx
          mov r35.x, cb9[r2.w + 13].w
          mov r35.yz, cb9[r2.w + 14].xxyx
          dp3 r13.z, r35.xyzx, r23.xyzx
          frc r35.x, r12.w
          frc r35.y, r13.z
          iadd r8.w, r8.w, l(-1)
          utof r35.z, r8.w
          sample_l_indexable(texture2darray)(float,float,float,float) r24.xyz, r35.xyzx, t20.xyzw, s2, l(0.000000)
        else 
          mov r24.xyz, l(1.000000,1.000000,1.000000,0)
        endif 
      endif 
      mov r35.x, cb9[r2.w + 0].w
      mov r35.yz, cb9[r2.w + 1].xxyx
      mul r23.xyw, r24.xyxz, r35.xyxz
      lt r8.w, l(0.000000), r11.w
      if_nz r8.w
        ubfe r8.w, l(3), l(27), cb9[r2.w + 1].w
        ine r8.w, r8.w, l(1)
        if_nz r8.w
          mad r8.w, |r5.w|, l(-0.200000), l(0.400000)
          lt r12.w, r5.w, l(0.000000)
          and r12.w, r0.w, r12.w
          movc r8.w, r12.w, -r8.w, r8.w
          mad r25.xyz, r11.xyzx, r8.wwww, r10.xyzx
          mov r35.xyz, cb9[r2.w + 6].yzwy
          mov r35.w, cb9[r2.w + 7].x
          dp4 r8.w, r35.xyzw, r25.xyzw
          dp4 r12.w, r34.xyzw, r25.xyzw
          ge r13.z, r12.w, r8.w
          if_nz r13.z
            mov r34.xyz, cb9[r2.w + 4].yzwy
            mov r34.w, cb9[r2.w + 5].x
            dp4 r24.x, r34.xyzw, r25.xyzw
            mov r34.xyz, cb9[r2.w + 5].yzwy
            mov r34.w, cb9[r2.w + 6].x
            dp4 r24.y, r34.xyzw, r25.xyzw
            div r24.xy, r24.xyxx, r12.wwww
            mad_sat r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            mad r25.x, r24.x, cb9[r2.w + 8].y, cb9[r2.w + 8].z
            mad r25.y, r24.y, cb9[r2.w + 8].w, cb9[r2.w + 9].x
            div r8.w, r8.w, r12.w
            max r8.w, r8.w, l(0.00006104)
            and r12.w, l(0x0000ffff), cb9[r2.w + 1].w
            if_nz cb2[58].y
              utof r24.z, r12.w
              mov r13.z, l(0)
              mov r15.w, l(0)
              loop 
                ige r16.w, r15.w, l(8)
                breakc_nz r16.w
                dp2 r34.x, icb[r15.w + 0].xyxx, r28.xyxx
                dp2 r34.y, icb[r15.w + 0].yxyy, r28.xzxx
                mad r24.xy, r34.xyxx, cb9[r2.w + 3].yyyy, r25.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r24.xyzx, t9.xxxx, s13, r8.w
                mad r13.z, r16.w, l(0.125000), r13.z
                iadd r15.w, r15.w, l(1)
              endloop 
            else 
              utof r25.z, r12.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.z, r25.xyzx, t9.xxxx, s13, r8.w
            endif 
            mul r8.w, r13.z, r13.z
            mul r8.w, r13.z, r8.w
          else 
            mov r8.w, l(1.000000)
          endif 
        else 
          mov r8.w, l(1.000000)
        endif 
        mul r8.w, r8.w, r11.w
        lt r11.w, l(0.000000), r8.w
        if_nz r11.w
          mul r11.w, r1.z, cb9[r2.w + 1].z
          mul r11.w, r6.w, r11.w
          ubfe r12.w, l(4), l(16), cb9[r2.w + 1].w
          ult r15.w, l(0), r12.w
          and r15.w, r9.z, r15.w
          if_nz r15.w
            iadd r12.w, r12.w, cb2[0].x
            imad r12.w, r12.w, l(15), l(-15)
            mad r15.w, |r5.w|, l(-0.200000), l(0.400000)
            lt r16.w, r5.w, l(0.000000)
            and r16.w, r0.w, r16.w
            movc r15.w, r16.w, -r15.w, r15.w
            mad r26.xyz, r11.xyzx, r15.wwww, r10.xyzx
            mov r34.xyz, cb9[r12.w + 6].yzwy
            mov r34.w, cb9[r12.w + 7].x
            dp4 r15.w, r34.xyzw, r26.xyzw
            mov r34.xyz, cb9[r12.w + 7].yzwy
            mov r34.w, cb9[r12.w + 8].x
            dp4 r16.w, r34.xyzw, r26.xyzw
            lt r18.w, r16.w, r15.w
            if_z r18.w
              mov r34.xyz, cb9[r12.w + 4].yzwy
              mov r34.w, cb9[r12.w + 5].x
              dp4 r24.x, r34.xyzw, r26.xyzw
              mov r34.xyz, cb9[r12.w + 5].yzwy
              mov r34.w, cb9[r12.w + 6].x
              dp4 r24.y, r34.xyzw, r26.xyzw
              div r24.xy, r24.xyxx, r16.wwww
              mad r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r25.x, r24.x, cb9[r12.w + 9].w
              add r25.y, r24.y, cb9[r12.w + 10].x
              mul r24.xy, r25.xyxx, cb9[r12.w + 9].yzyy
              div r25.xy, cb9[r12.w + 3].yyyy, cb9[r12.w + 8].ywyy
              add r26.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r26.xy, r24.xyxx, r26.xyxx
              ge r25.xy, r25.xyxx, r24.xyxx
              or r25.xy, r25.xyxx, r26.xyxx
              or r19.w, r25.y, r25.x
              if_z r19.w
                mov_sat r24.xy, r24.xyxx
                mad r25.x, r24.x, cb9[r12.w + 8].y, cb9[r12.w + 8].z
                mad r25.y, r24.y, cb9[r12.w + 8].w, cb9[r12.w + 9].x
                mul r20.w, r16.w, cb9[r12.w + 10].z
                mad r15.w, cb9[r12.w + 10].y, r16.w, r15.w
                div r15.w, r15.w, r20.w
              endif 
            else 
              mov r19.w, l(-1)
            endif 
            or r16.w, r18.w, r19.w
            if_z r16.w
              max r15.w, r15.w, l(0.00006104)
              and r16.w, l(0x0000ffff), cb9[r12.w + 1].w
              if_nz cb2[58].y
                utof r24.z, r16.w
                mov r18.w, l(0)
                mov r19.w, l(0)
                loop 
                  ige r20.w, r19.w, l(8)
                  breakc_nz r20.w
                  dp2 r26.x, icb[r19.w + 0].xyxx, r29.xyxx
                  dp2 r26.y, icb[r19.w + 0].yxyy, r29.xzxx
                  mad r24.xy, r26.xyxx, cb9[r12.w + 3].yyyy, r25.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r24.xyzx, t9.xxxx, s13, r15.w
                  mad r18.w, r20.w, l(0.125000), r18.w
                  iadd r19.w, r19.w, l(1)
                endloop 
              else 
                utof r25.z, r16.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r25.xyzx, t9.xxxx, s13, r15.w
              endif 
              mul r12.w, r18.w, r18.w
              mul r12.w, r18.w, r12.w
            else 
              mov r12.w, l(1.000000)
            endif 
            mul r8.w, r8.w, r12.w
          else 
            ubfe r2.w, l(4), l(20), cb9[r2.w + 1].w
            ult r12.w, l(0), r2.w
            and r12.w, r0.z, r12.w
            if_nz r12.w
              iadd r2.w, r2.w, cb2[0].x
              imad r2.w, r2.w, l(15), l(-15)
              mad r12.w, |r5.w|, l(-0.200000), l(0.400000)
              lt r15.w, r5.w, l(0.000000)
              and r15.w, r0.w, r15.w
              movc r12.w, r15.w, -r12.w, r12.w
              mad r27.xyz, r11.xyzx, r12.wwww, r10.xyzx
              mov r34.xyz, cb9[r2.w + 6].yzwy
              mov r34.w, cb9[r2.w + 7].x
              dp4 r12.w, r34.xyzw, r27.xyzw
              mov r34.xyz, cb9[r2.w + 7].yzwy
              mov r34.w, cb9[r2.w + 8].x
              dp4 r15.w, r34.xyzw, r27.xyzw
              lt r16.w, r15.w, r12.w
              if_z r16.w
                mov r34.xyz, cb9[r2.w + 4].yzwy
                mov r34.w, cb9[r2.w + 5].x
                dp4 r24.x, r34.xyzw, r27.xyzw
                mov r34.xyz, cb9[r2.w + 5].yzwy
                mov r34.w, cb9[r2.w + 6].x
                dp4 r24.y, r34.xyzw, r27.xyzw
                div r24.xy, r24.xyxx, r15.wwww
                mad r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r25.x, r24.x, cb9[r2.w + 9].w
                add r25.y, r24.y, cb9[r2.w + 10].x
                mul r24.xy, r25.xyxx, cb9[r2.w + 9].yzyy
                div r25.xy, cb9[r2.w + 3].yyyy, cb9[r2.w + 8].ywyy
                add r26.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r26.xy, r24.xyxx, r26.xyxx
                ge r25.xy, r25.xyxx, r24.xyxx
                or r25.xy, r25.xyxx, r26.xyxx
                or r19.w, r25.y, r25.x
                if_z r19.w
                  mov_sat r24.xy, r24.xyxx
                  mad r25.x, r24.x, cb9[r2.w + 8].y, cb9[r2.w + 8].z
                  mad r25.y, r24.y, cb9[r2.w + 8].w, cb9[r2.w + 9].x
                  mul r20.w, r15.w, cb9[r2.w + 10].z
                  mad r12.w, cb9[r2.w + 10].y, r15.w, r12.w
                  div r12.w, r12.w, r20.w
                endif 
              else 
                mov r19.w, l(-1)
              endif 
              or r15.w, r16.w, r19.w
              if_z r15.w
                max r12.w, r12.w, l(0.00006104)
                and r15.w, l(0x0000ffff), cb9[r2.w + 1].w
                if_nz cb2[58].y
                  utof r24.z, r15.w
                  mov r16.w, l(0)
                  mov r19.w, l(0)
                  loop 
                    ige r20.w, r19.w, l(8)
                    breakc_nz r20.w
                    dp2 r26.x, icb[r19.w + 0].xyxx, r30.xyxx
                    dp2 r26.y, icb[r19.w + 0].yxyy, r30.xzxx
                    mad r24.xy, r26.xyxx, cb9[r2.w + 3].yyyy, r25.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r24.xyzx, t9.xxxx, s13, r12.w
                    mad r16.w, r20.w, l(0.125000), r16.w
                    iadd r19.w, r19.w, l(1)
                  endloop 
                else 
                  utof r25.z, r15.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r25.xyzx, t9.xxxx, s13, r12.w
                endif 
                mul r2.w, r16.w, r16.w
                mul r2.w, r16.w, r2.w
              else 
                mov r2.w, l(1.000000)
              endif 
              mul r8.w, r2.w, r8.w
            endif 
          endif 
          mad r2.w, -r7.w, r2.x, l(1.000000)
          mul r2.w, r2.w, r2.w
          mad r2.w, -r2.w, l(0.620000), l(0.620000)
          add r2.w, -r7.w, r2.w
          mad r2.w, r1.w, r2.w, r7.w
          mul r2.w, r8.w, r2.w
          lt r5.w, l(0.000000), r5.w
          mad r24.xyz, r2.wwww, r23.xywx, r9.xywx
          mad r22.xyz, r22.xyzx, r4.zzzz, r12.xyzx
          dp3 r4.z, r22.xyzx, r22.xyzx
          rsq r4.z, r4.z
          mul r22.xyz, r4.zzzz, r22.xyzx
          dp3 r4.z, r22.xyzx, r12.xyzx
          dp3 r7.w, r11.xyzx, r22.xyzx
          mad r12.w, |r7.w|, r1.z, -|r7.w|
          mad r7.w, |r7.w|, r12.w, l(1.000000)
          mad r6.w, r6.w, r0.x, r2.y
          mul r7.w, r7.w, r7.w
          mul r6.w, r6.w, r7.w
          rcp r6.w, r6.w
          mul r6.w, r11.w, r6.w
          mul r6.w, r6.w, r8.w
          mul r6.w, r6.w, l(0.250000)
          mad r22.xyz, r6.wwww, r23.xywx, r33.xyzx
          add_sat r4.z, -r4.z, l(1.000000)
          mul r7.w, r4.z, r4.z
          mul r7.w, r7.w, r7.w
          mul r4.z, r4.z, r7.w
          mul r4.z, r4.z, r6.w
          mad r25.xyz, r4.zzzz, r23.xywx, r32.xyzx
          mad r23.xyw, r2.wwww, r23.xyxw, r31.xyxz
          movc r23.xyw, r0.wwww, r23.xyxw, r31.xyxz
          movc r9.xyw, r5.wwww, r24.xyxz, r9.xyxw
          movc r31.xyz, r5.wwww, r31.xyzx, r23.xywx
          movc r32.xyz, r5.wwww, r25.xyzx, r32.xyzx
          movc r33.xyz, r5.wwww, r22.xyzx, r33.xyzx
        endif 
      endif 
    endif 
    break 
    default 
    break 
  endswitch 
  iadd r2.z, r2.z, l(1)
endloop 
mad r2.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.x, r2.y
mad r4.xyz, r5.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.y, r4.x
ieq r0.y, r0.x, r0.y
movc r0.yz, r0.yyyy, r4.yyzy, l(0,-1.000000,0,0)
mad r4.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r4.x
ieq r1.z, r0.x, r1.z
movc r1.zw, r1.zzzz, r4.yyyz, l(0,0,-1.000000,0)
mad r4.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r3.x, r4.x
ieq r3.x, r0.x, r3.x
movc r4.xy, r3.xxxx, r4.yzyy, l(-1.000000,0,0,0)
mad r5.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r3.x, r5.x
ieq r0.x, r0.x, r3.x
movc r4.zw, r0.xxxx, r5.yyyz, l(0,0,-1.000000,0)
mov r5.x, r0.y
mov r5.y, r1.z
mov r5.zw, r4.xxxz
add r5.xyzw, -r2.xxxx, r5.xyzw
ge r5.xyzw, |r5.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r5.xyzw, r5.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.x, r5.y, r5.x
add r0.x, r5.z, r0.x
add r0.x, r5.w, r0.x
mul r0.y, r1.w, r5.y
mad r0.y, r5.x, r0.z, r0.y
mad r0.y, r5.z, r4.y, r0.y
mad r0.y, r5.w, r4.w, r0.y
div r2.w, r0.y, r0.x
ge r0.x, l(0.000000), r0.x
movc r2.yz, r0.xxxx, l(0,0,0,0), r2.zzwz
and r0.xy, r1.xyxx, l(1, 1, 0, 0)
ieq r0.x, r0.y, r0.x
movc r0.xyz, r0.xxxx, r2.xyzx, r2.xzyx
mad r0.x, -r0.z, l(0.500000), r0.x
add r2.y, r0.x, r0.z
mad r2.z, -r0.y, l(0.500000), r0.x
add r2.x, r0.y, r2.z
mul r0.xyz, r3.yzwy, r9.xywx
mad r0.xyz, r31.xyzx, r2.xyzx, r0.xyzx
mul r4.xyz, r32.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r4.xyz, r33.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000), r4.xyzx
add r0.xyz, r0.xyzx, r4.xyzx
add r4.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, r32.xyzx
mad r2.xyz, r33.xyzx, r2.xyzx, r4.xyzx
mad r2.xyz, r9.xywx, r3.yzwy, r2.xyzx
movc r0.xyz, r0.wwww, r0.xyzx, r2.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r10.xyzx, r10.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r10.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r10.z|
    mul r3.xy, r10.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r10.z|
    mul r2.w, r10.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r10.z, cb2[6].x
  mad r1.z, cb2[6].x, r10.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r10.xyzx, r10.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r10.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 1852 instruction slots used
