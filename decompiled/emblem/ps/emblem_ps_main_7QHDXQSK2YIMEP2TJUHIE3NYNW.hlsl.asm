//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:25:51 2021
//
//
// Buffer Definitions: 
//
// cbuffer GenericsCBuffer
// {
//
//   float4 scriptVector0;              // Offset:    0 Size:    16
//   float4 scriptVector1;              // Offset:   16 Size:    16
//   float4 scriptVector2;              // Offset:   32 Size:    16
//   float4 scriptVector3;              // Offset:   48 Size:    16
//   float4 scriptVector4;              // Offset:   64 Size:    16
//   float4 scriptVector5;              // Offset:   80 Size:    16
//   float4 scriptVector6;              // Offset:   96 Size:    16
//   float4 scriptVector7;              // Offset:  112 Size:    16 [unused]
//   float4 weaponParam0;               // Offset:  128 Size:    16 [unused]
//   float4 weaponParam1;               // Offset:  144 Size:    16 [unused]
//   float4 weaponParam2;               // Offset:  160 Size:    16 [unused]
//   float4 weaponParam3;               // Offset:  176 Size:    16 [unused]
//   float4 weaponParam4;               // Offset:  192 Size:    16 [unused]
//   float4 weaponParam5;               // Offset:  208 Size:    16 [unused]
//   float4 weaponParam6;               // Offset:  224 Size:    16 [unused]
//   float4 weaponParam7;               // Offset:  240 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// emblemSampler                     sampler      NA          NA             s1      1 
// modSampler                        sampler      NA          NA             s2      1 
// emblemTexture                     texture  float4          2d             t0      1 
// modTexture                        texture  float4          2d             t6      1 
// GenericsCBuffer                   cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// COLOR                    0   xyzw        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[7], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 4
ne r0.x, cb3[5].x, l(0.000000)
if_nz r0.x
  ftoi r0.xy, v0.xyxx
  ftoi r0.zw, cb3[6].zzzw
  ieq r1.xy, r0.xyxx, l(0, 0, 0, 0)
  iadd r1.zw, r0.zzzw, l(0, 0, -1, -1)
  ieq r2.xy, r0.xyxx, r1.zwzz
  or r1.x, r1.x, r2.x
  or r1.x, r1.y, r1.x
  or r1.x, r2.y, r1.x
  if_nz r1.x
    mov o0.xyzw, l(1.000000,0,0,1.000000)
  else 
    ftoi r1.x, cb3[5].z
    and r2.xy, r0.xyxx, l(0x80000000, 0x80000000, 0, 0)
    imax r2.zw, r0.xxxy, -r0.xxxy
    imax r1.y, r1.x, -r1.x
    udiv null, r3.xy, r2.zwzz, r1.yyyy
    ineg r3.zw, r3.xxxy
    movc r2.xy, r2.xyxx, r3.zwzz, r3.xyxx
    ieq r2.xy, r2.xyxx, l(0, 0, 0, 0)
    or r2.x, r2.y, r2.x
    if_nz r2.x
      mov o0.xyzw, l(1.000000,1.000000,1.000000,1.000000)
    else 
      ne r2.x, cb3[5].y, l(0.000000)
      if_nz r2.x
        xor r2.xy, r0.zwzz, l(2, 2, 0, 0)
        imax r0.zw, r0.zzzw, -r0.zzzw
        ushr r0.zw, r0.zzzw, l(0, 0, 1, 1)
        ineg r3.xy, r0.zwzz
        and r2.xy, r2.xyxx, l(0x80000000, 0x80000000, 0, 0)
        movc r0.zw, r2.xxxy, r3.xxxy, r0.zzzw
        iadd r0.zw, -r0.zzzw, r0.xxxy
        imax r0.zw, -r0.zzzw, r0.zzzw
        ige r0.zw, l(0, 0, 1, 1), r0.zzzw
        or r0.z, r0.w, r0.z
        xor r0.xy, r0.xyxx, r1.xxxx
        udiv r2.xy, null, r2.zwzz, r1.yyyy
        ineg r2.zw, r2.xxxy
        and r0.xy, r0.xyxx, l(0x80000000, 0x80000000, 0, 0)
        movc r0.xy, r0.xyxx, r2.zwzz, r2.xyxx
        xor r2.xy, r1.xxxx, r1.zwzz
        imax r1.xz, r1.zzwz, -r1.zzwz
        udiv r1.xy, null, r1.xzxx, r1.yyyy
        ineg r1.zw, r1.xxxy
        and r2.xy, r2.xyxx, l(0x80000000, 0x80000000, 0, 0)
        movc r1.xy, r2.xyxx, r1.zwzz, r1.xyxx
        ieq r1.zw, r0.xxxy, l(0, 0, 0, 0)
        or r0.w, r1.w, r1.z
        ieq r0.xy, r0.xyxx, r1.xyxx
        or r0.x, r0.x, r0.w
        or r0.x, r0.y, r0.x
        or r0.x, r0.z, r0.x
        and o0.xyzw, r0.xxxx, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
      else 
        mov o0.xyzw, l(0,0,0,0)
      endif 
    endif 
  endif 
  ret 
endif 
lt r0.xy, v2.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.x, r0.y, r0.x
lt r0.yz, l(0.000000, 1.000000, 1.000000, 0.000000), v2.xxyx
or r0.y, r0.z, r0.y
or r0.x, r0.y, r0.x
discard_nz r0.x
sample_indexable(texture2d)(float,float,float,float) r0.x, v2.xyxx, t0.zxyw, s1
add r0.yz, -cb3[6].yyxy, l(0.000000, 0.500000, 0.500000, 0.000000)
lt r0.w, r0.x, r0.y
add r1.x, cb3[6].x, cb3[6].y
add r1.x, -r1.x, l(0.500000)
add r0.y, r0.y, -r1.x
add r1.x, r0.x, -r1.x
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mul_sat r0.y, r0.y, r1.x
mad r1.x, r0.y, l(-2.000000), l(3.000000)
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r1.x
add r1.x, cb3[6].y, l(0.500000)
lt r1.y, r1.x, r0.x
add r1.x, r0.x, -r1.x
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[6].x
mul_sat r1.x, r1.z, r1.x
mad r1.z, r1.x, l(-2.000000), l(3.000000)
mul r1.x, r1.x, r1.x
mad r1.x, -r1.z, r1.x, l(1.000000)
movc r1.x, r1.y, r1.x, l(1.000000)
movc r0.y, r0.w, r0.y, r1.x
lt r1.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb3[6].yxyy
add r0.w, -r0.z, l(0.500000)
add r0.z, -r0.z, r0.x
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul_sat r0.z, r0.w, r0.z
mad r0.w, r0.z, l(-2.000000), l(3.000000)
mul r0.z, r0.z, r0.z
mul r0.z, r0.z, r0.w
lt r0.x, l(0.500000), r0.x
and r0.x, r0.x, l(0x3f800000)
movc r0.x, r1.y, r0.z, r0.x
movc r0.x, r1.x, r0.y, r0.x
ge r0.y, l(0.000000), r0.x
discard_nz r0.y
ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb3[2].z
add r0.zw, v2.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
dp2 r1.x, r0.zwzz, r0.zwzz
sqrt r1.x, r1.x
mul r1.x, r1.x, l(1.41421354)
mul r1.y, cb3[2].x, l(0.01745278)
sincos r2.x, r3.x, r1.y
mul r0.w, r0.w, r2.x
mad r0.z, r0.z, r3.x, r0.w
mul r0.w, |r2.x|, l(0.500000)
mad r0.w, |r3.x|, l(0.500000), r0.w
div r0.z, r0.z, r0.w
mad r0.z, r0.z, l(0.500000), l(0.500000)
movc r0.y, r0.y, r1.x, r0.z
max r0.y, r0.y, l(0.010000)
min r0.y, r0.y, l(0.990000)
lt r0.z, r0.y, cb3[2].y
div r0.w, r0.y, cb3[2].y
mul r0.w, r0.w, l(0.500000)
add r0.y, r0.y, -cb3[2].y
add r1.x, -cb3[2].y, l(1.000000)
div r0.y, r0.y, r1.x
mad r0.y, r0.y, l(0.500000), l(0.500000)
movc r0.y, r0.z, r0.w, r0.y
add r1.xyzw, -cb3[0].xyzw, cb3[1].xyzw
mad r1.xyzw, r0.yyyy, r1.xyzw, cb3[0].xyzw
mov r2.xy, v2.xyxx
mov r2.z, l(1.000000)
dp3 r3.x, r2.xyzx, cb3[3].xyzx
dp3 r3.y, r2.xyzx, cb3[4].xyzx
sample_indexable(texture2d)(float,float,float,float) r0.yzw, r3.xyxx, t6.wxyz, s2
mul o0.xyz, r0.yzwy, r1.xyzx
mul o0.w, r0.x, r1.w
ret 
// Approximately 138 instruction slots used
