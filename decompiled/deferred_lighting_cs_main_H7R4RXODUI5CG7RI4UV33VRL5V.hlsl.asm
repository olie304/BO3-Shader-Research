//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:26 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4
//   float probeDebugRadius;            // Offset:  868 Size:     4
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 45
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(35), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.yz, r0.xxyx, l(0, 4095, 4095, 0)
imad r1.xy, r0.yzyy, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.yz, r1.xxyx
add r5.xy, r3.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r6.x, r3.x, l(0.984375)
mul r3.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r6.x, r3.x, r3.w
max r3.x, r3.x, l(0.00000001)
rcp r6.y, r3.x
and r3.xw, r0.wwww, r6.xxxy
mul r5.zw, r5.xxxy, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r7.xyzw, r5.zwzz, t28.xyzw, s4.x
mul r5.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r5.zw, r5.zzzw
add r8.xy, -r5.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r9.y, r8.x, r8.y
mul r9.xz, r5.zzwz, r8.xxyx
mul r9.w, r5.w, r5.z
dp4 r0.w, r6.xyzw, r9.xyzw
add r7.xyzw, -r3.wwww, r7.xyzw
min r5.z, |r7.w|, |r7.z|
min r5.z, r5.z, |r7.y|
min r5.z, r5.z, |r7.x|
max r5.w, |r7.w|, |r7.z|
max r5.w, r5.w, |r7.y|
max r5.w, r5.w, |r7.x|
eq r7.xyz, r5.zzzz, |r7.yzwy|
movc r5.z, r7.x, r6.y, r6.x
movc r5.z, r7.y, r6.z, r5.z
movc r5.z, r7.z, r6.w, r5.z
mul r6.x, r3.w, l(0.010000)
lt r5.w, r6.x, r5.w
movc r0.w, r5.w, r5.z, r0.w
mul r0.w, r0.w, r4.z
if_nz cb2[55].x
  mul r4.z, r0.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r4.zzzz
  ret 
else 
  movc r4.z, cb2[54].w, r0.w, l(1.000000)
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
add r1.zw, r5.xxxy, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r5.x, r1.z, cb1[12].x
mul r5.y, r1.w, cb1[13].y
mov r5.z, l(1.000000)
mul r5.xyz, r3.wwww, r5.xyzx
mul r11.xyz, r5.yyyy, cb1[17].xyzx
mad r5.xyw, r5.xxxx, cb1[16].xyxz, r11.xyxz
mad r5.xyz, r5.zzzz, cb1[18].xyzx, r5.xywx
mad r1.z, r2.w, l(3.000000), l(0.500000)
ftou r1.z, r1.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r11.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r11.z
mul r11.xy, r1.wwww, r2.xyxx
and r12.xyzw, r1.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.z, r12.w, r12.z
movc r12.z, r1.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.w, r0.w, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r5.xyzx, -r5.xyzx
rsq r0.w, r0.w
mul r12.xyz, r0.wwww, -r5.xyzx
dp2 r1.z, r3.yzyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r1.z
utof r1.zw, r1.yyyx
dp2 r1.z, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r15.x, r16.x, r1.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.z, -r12.xyzx, r11.xyzx
add r1.z, r1.z, r1.z
mad r17.xyz, r11.xyzx, -r1.zzzz, -r12.xyzx
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.w, r1.z
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r2.zw, r2.zzzw
ieq r2.zw, r1.xxxy, r2.zzzw
and r2.z, r2.w, r2.z
dp3 r2.w, r11.xyzx, cb2[17].xyzx
mov_sat r3.y, r2.w
ge r3.z, l(0.000000), r3.y
if_nz r3.z
  mov r3.w, l(0)
endif 
if_z r3.z
  mul r15.yzw, r5.yyyy, cb2[29].xxyz
  mad r15.yzw, r5.xxxx, cb2[28].xxyz, r15.yyzw
  mad r15.yzw, r5.zzzz, cb2[30].xxyz, r15.yyzw
  add r15.yzw, r15.yyzw, cb2[31].xxyz
  add r3.z, r15.w, -cb2[17].w
  mad r3.z, -r3.z, l(0.00006104), l(1.000000)
  mov_sat r6.w, r3.z
  eq r6.w, r3.z, r6.w
  if_nz r6.w
    mov r6.w, l(0)
    mov r7.w, l(0)
    loop 
      ge r8.w, r6.w, l(3.000000)
      breakc_nz r8.w
      ftou r8.w, r6.w
      add r13.zw, r15.yyyz, -cb2[r8.w + 20].xxxy
      max r9.w, |r13.w|, |r13.z|
      mul r7.w, r9.w, cb2[r8.w + 20].z
      lt r8.w, r7.w, l(1.000000)
      if_nz r8.w
        break 
      endif 
      add r6.w, r6.w, l(1.000000)
      mov r7.w, l(0)
    endloop 
  else 
    mov r6.w, l(3.000000)
    mov r7.w, l(0)
  endif 
  ge r8.w, r6.w, l(3.000000)
  if_nz r8.w
    mul r16.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r18.xz, r16.yyyy
    mov r18.y, -r18.z
    mad r16.yzw, r15.yyzy, r18.xxyz, r16.zzwz
    add r18.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r16.yzw, r16.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r16.yzw, r18.xxyz, r16.yyzw
    mul r13.zw, r16.wwwz, cb2[32].xxxx
    round_ni r13.zw, r13.zzzw
    mul r9.w, r13.w, cb2[27].x
    mad r9.w, r9.w, cb2[32].x, r13.z
    ftou r9.w, r9.w
    iadd r9.w, r9.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r9.w, l(0), t23.xxxx
    and r12.w, r10.w, l(0x40000000)
    ishl r13.z, r10.w, l(2)
    if_z r12.w
      and r12.w, r10.w, l(0x01ffffff)
      iadd r18.x, r9.w, r12.w
      ushr r9.w, r10.w, l(25)
      utof r9.w, r9.w
      mul r16.yzw, r9.wwww, r16.yyzw
      frc r16.yzw, r16.yyzw
      mul r16.yzw, r16.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r16.yzw, r16.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      ushr r19.xy, r16.wzww, l(6, 6, 0, 0)
      and r9.w, r18.z, l(0xc0000000)
      iadd r10.w, r18.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r10.w, l(0), t23.xxxx
      movc r10.w, r19.y, r18.z, r10.w
      ushr r12.w, r10.w, l(13)
      movc r10.w, r19.x, r12.w, r10.w
      and r10.w, r10.w, l(8191)
      iadd r19.x, r10.w, r18.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      mov r18.y, l(0)
      mov r19.y, l(1)
      movc r19.xyz, r9.wwww, r18.xyzx, r19.xyzx
      movc r20.yz, r9.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r21.xy, r16.wzww, r20.yyyy
      and r21.xy, r21.xyxx, l(1, 1, 0, 0)
      and r10.w, r19.z, l(0xc0000000)
      iadd r12.w, r19.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.w, r12.w, l(0), t23.xxxx
      movc r12.w, r21.y, r19.z, r12.w
      ushr r13.w, r12.w, l(13)
      movc r12.w, r21.x, r13.w, r12.w
      and r12.w, r12.w, l(8191)
      iadd r20.x, r12.w, r19.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.w, r20.x, l(0), t23.xxxx
      movc r19.xyz, r10.wwww, r19.xyzx, r20.xzwx
      movc r18.xyz, r9.wwww, r18.xyzx, r19.xyzx
      and r9.w, r18.z, l(0xc0000000)
      if_z r9.w
        iadd r9.w, -r18.y, l(6)
        ushr r19.xy, r16.wzww, r9.wwww
        or r9.w, r18.z, l(0x40000000)
        bfi r10.w, l(1), l(1), r19.y, l(0)
        bfi r10.w, l(1), l(0), r19.x, r10.w
        imul null, r10.w, r10.w, l(10)
        ushr r9.w, r9.w, r10.w
        and r9.w, r9.w, l(1023)
        iadd r19.x, r9.w, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
        iadd r19.yz, r18.yyyy, l(0, 1, 2, 0)
        iadd r9.w, -r19.y, l(6)
        ushr r18.yw, r16.wwwz, r9.wwww
        and r9.w, r19.w, l(0xc0000000)
        or r10.w, r19.w, l(0x40000000)
        bfi r12.w, l(1), l(1), r18.w, l(0)
        bfi r12.w, l(1), l(0), r18.y, r12.w
        imul null, r12.w, r12.w, l(10)
        ushr r10.w, r10.w, r12.w
        and r10.w, r10.w, l(1023)
        iadd r20.x, r10.w, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
        mov r20.y, r19.z
        movc r20.xyz, r9.wwww, r19.xywx, r20.xyzx
        iadd r10.w, -r20.y, l(6)
        ushr r18.yw, r16.wwwz, r10.wwww
        and r10.w, r20.z, l(0xc0000000)
        or r12.w, r20.z, l(0x40000000)
        bfi r13.w, l(1), l(1), r18.w, l(0)
        bfi r13.w, l(1), l(0), r18.y, r13.w
        imul null, r13.w, r13.w, l(10)
        ushr r12.w, r12.w, r13.w
        and r12.w, r12.w, l(1023)
        iadd r21.x, r12.w, r20.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r21.y, r21.x, l(0), t23.xxxx
        movc r18.yw, r10.wwww, r20.xxxz, r21.xxxy
        movc r18.xz, r9.wwww, r19.xxwx, r18.yywy
      endif 
      and r9.w, r18.z, l(0xc0000000)
      if_z r9.w
        ubfe r10.w, l(14), l(15), r18.z
        utof r10.w, r10.w
        mul r10.w, r10.w, cb2[27].w
        mul r10.w, r10.w, l(0.00006104)
        and r18.yw, r18.zzzz, l(0, 0x00007fff, 0, 0x20000000)
        utof r12.w, r18.y
        mul r12.w, r12.w, cb2[27].w
        mul r12.w, r12.w, l(0.00003052)
        and r13.w, r16.z, l(3)
        iadd r13.w, r13.w, r18.x
        iadd r13.w, r13.w, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.w, l(0), t23.xxxx
        bfi r19.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r16.yzwy, l(0, 0, 0, 0)
        ushr r13.w, r13.w, r19.x
        and r13.w, r13.w, l(255)
        utof r13.w, r13.w
        mul r13.w, r12.w, r13.w
        mad r13.w, r13.w, l(0.00392157), r10.w
        iadd r14.w, r19.y, l(1)
        ubfe r16.y, l(1), l(1), r16.w
        iadd r14.w, r14.w, r16.y
        iadd r14.w, r14.w, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t23.xxxx
        ushr r14.w, r14.w, r19.z
        and r14.w, r14.w, l(0x0000ffff)
        utof r14.w, r14.w
        mul r12.w, r12.w, r14.w
        mad r10.w, r12.w, l(0.00001526), r10.w
        movc r13.z, r18.w, r13.w, r10.w
      else 
        and r10.w, r18.z, l(0x80000000)
        iadd r12.w, r18.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.w, r12.w, l(0), t23.xxxx
        movc r10.w, r10.w, r12.w, l(0)
        ishl r12.w, r18.z, l(2)
        ushr r13.w, r10.w, l(16)
        f16tof32 r13.w, r13.w
        and r10.w, r10.w, l(0x0000ffff)
        f16tof32 r10.w, r10.w
        mad r12.w, r15.y, r13.w, r12.w
        mad r10.w, r15.z, r10.w, r12.w
        movc r13.z, r9.w, r10.w, r13.z
      endif 
    endif 
    mad r9.w, -cb2[27].z, l(2.000000), r15.w
    lt r9.w, r13.z, r9.w
    movc r3.w, r9.w, l(0), l(1.000000)
  endif 
  if_z r8.w
    if_z cb2[58].y
      ftou r8.w, r6.w
      add r13.zw, r15.yyyz, -cb2[r8.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r8.w + 20].zzzz
      mad r18.xy, r13.zwzz, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r8.w, cb2[26].y
      add r18.z, r6.w, r8.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r18.xyzx, t13.xxxx, s13, r3.z
      sample_l_indexable(texture2darray)(float,float,float,float) r9.w, r18.xyzx, t31.yzwx, s0, l(0.000000)
      add r8.w, r8.w, r9.w
      add_sat r8.w, r8.w, l(-1.000000)
      mul r9.w, r8.w, r8.w
      mul r3.w, r8.w, r9.w
    endif 
    if_nz cb2[58].y
      mov r18.x, -r13.x
      ftou r8.w, r6.w
      add r6.w, r6.w, l(1.000000)
      min r6.w, r6.w, l(2.000000)
      ftou r6.w, r6.w
      add r7.w, -r7.w, l(1.000000)
      mul r7.w, r7.w, l(28.000000)
      ftou r7.w, r7.w
      add r13.zw, r15.yyyz, -cb2[r8.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r8.w + 20].zzzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r15.yz, r15.yyzy, -cb2[r6.w + 20].xxyx
      mul r15.yz, r15.yyzy, cb2[r6.w + 20].zzzz
      mad r15.yz, r15.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r18.y, r14.x
      mov r18.z, r13.x
      mov r9.w, l(0)
      mov r10.w, l(0)
      loop 
        uge r12.w, r10.w, l(8)
        breakc_nz r12.w
        ult r12.w, r7.w, r10.w
        movc r16.yz, r12.wwww, r15.yyzy, r13.zzwz
        movc r14.w, r12.w, cb2[r6.w + 20].w, cb2[r8.w + 20].w
        movc r12.w, r12.w, r6.w, r8.w
        dp2 r19.x, icb[r10.w + 0].yxyy, r18.xyxx
        dp2 r19.y, icb[r10.w + 0].yxyy, r18.yzyy
        mad r19.xy, r19.xyxx, r14.wwww, r16.yzyy
        iadd r12.w, r12.w, cb2[26].y
        utof r19.z, r12.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r19.xyzx, t13.xxxx, s13, r3.z
        sample_l_indexable(texture2darray)(float,float,float,float) r14.w, r19.xyzx, t31.yzwx, s0, l(0.000000)
        add r12.w, r12.w, r14.w
        add_sat r12.w, r12.w, l(-1.000000)
        mad r9.w, r12.w, l(0.125000), r9.w
        iadd r10.w, r10.w, l(1)
      endloop 
      mul r3.z, r9.w, r9.w
      mul r3.w, r9.w, r3.z
    endif 
  endif 
endif 
add r3.z, -r2.y, l(1.000000)
mul r6.w, r3.z, l(5.000000)
mad r7.w, r3.z, l(5.000000), l(-2.500000)
mul r7.w, r7.w, l(0.400000)
max r7.w, r7.w, l(0.000000)
mul r7.w, r7.w, l(100.000000)
mad r13.zw, -r3.zzzz, l(0.000000, 0.000000, 10.000000, 5.000000), l(0.000000, 0.000000, 6.857410, 7.085000)
exp r8.w, r13.z
mul r8.w, r2.x, r8.w
mul r8.w, r8.w, l(9.136810)
mul r9.w, r3.z, r6.w
mad r9.w, -r9.w, l(2.015905), r13.w
exp r9.w, r9.w
mul r9.w, r2.x, r9.w
mul r9.w, r9.w, l(9.708090)
max r8.w, r8.w, r9.w
max r8.w, r8.w, l(1.268160)
if_nz cb2[54].x
  ftou r9.w, cb1[44].x
  iadd r9.w, r9.w, l(7)
  ushr r9.w, r9.w, l(3)
  imad r9.w, r0.z, r9.w, r0.y
  bfi r9.w, l(27), l(5), r9.w, l(16)
  mov r18.xyzw, l(0,0,0,0)
  mov r19.xyzw, l(0,0,0,0)
  mov r20.xyzw, l(0,0,0,0)
  mov r21.xyzw, l(0,0,0,0)
  mov r22.xyzw, l(0,0,0,0)
  mov r23.xyzw, l(0,0,0,0)
  mov r24.xyzw, l(0,0,0,0)
  mov r25.xyzw, l(0,0,0,0)
  mov r26.xyzw, l(0,0,0,0)
  mov r27.xyzw, l(0,0,0,0)
  mov r28.xyzw, l(0,0,0,0)
  mov r15.yzw, l(0,0,0,0)
  mov r13.zw, l(0,0,0,0)
  mov r10.w, l(0)
  mov r29.z, l(0)
  mov r30.z, l(0)
  mov r12.w, l(0)
  mov r14.w, l(0)
  loop 
    uge r16.y, r14.w, cb2[0].y
    breakc_nz r16.y
    ushr r16.y, r14.w, l(5)
    iadd r16.y, r9.w, r16.y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.y, r16.y, l(0), t26.xxxx
    mov r31.xyzw, r18.yxzw
    mov r32.xyzw, r19.xyzw
    mov r33.xyzw, r20.yzwx
    mov r34.xyzw, r21.xyzw
    mov r35.xyzw, r22.xyzw
    mov r36.xyzw, r23.zwxy
    mov r37.xyzw, r24.zwxy
    mov r38.xyzw, r26.zwxy
    mov r39.xyzw, r27.zwxy
    mov r40.xyz, r15.yzwy
    mov r16.zw, r13.wwwz
    mov r29.w, r10.w
    mov r30.w, r29.z
    mov r40.w, r30.z
    mov r41.x, r12.w
    mov r42.xyzw, r25.zwxy
    mov r43.xyzw, r28.zwxy
    mov r41.y, r16.y
    loop 
      breakc_z r41.y
      firstbit_lo r41.z, r41.y
      ishl r41.w, l(1), r41.z
      not r41.w, r41.w
      and r41.y, r41.w, r41.y
      iadd r41.z, r14.w, r41.z
      imul null, r41.z, r41.z, l(14)
      add r44.xyz, r5.xyzx, -cb10[r41.z + 0].xyzx
      dp3 r41.w, r44.xyzx, r44.xyzx
      sqrt r41.w, r41.w
      ge r41.w, cb2[54].y, r41.w
      if_nz r41.w
        mov r31.yzw, cb10[r41.z + 1].xxyz
        mov r31.x, cb10[r41.z + 0].w
        mov r32.yzw, cb10[r41.z + 2].xxyz
        mov r32.x, cb10[r41.z + 1].w
        mov r33.xyz, cb10[r41.z + 3].xyzx
        mov r33.w, cb10[r41.z + 4].z
        mov r34.yz, cb10[r41.z + 4].xxyx
        mov r34.x, cb10[r41.z + 3].w
        mov r34.w, cb10[r41.z + 6].x
        mov r35.yzw, cb10[r41.z + 5].xxyz
        mov r35.x, cb10[r41.z + 4].w
        mov r36.yz, cb10[r41.z + 7].yywy
        mov r36.x, cb10[r41.z + 6].y
        mov r36.w, cb10[r41.z + 8].x
        mov r37.xyz, cb10[r41.z + 8].yzwy
        mov r37.w, cb10[r41.z + 9].x
        mov r38.xyz, cb10[r41.z + 10].yzwy
        mov r38.w, cb10[r41.z + 11].x
        mov r39.xyz, cb10[r41.z + 11].yzwy
        mov r39.w, cb10[r41.z + 12].x
        mov r40.xyz, cb10[r41.z + 0].xyzx
        mov r44.xy, cb10[r41.z + 13].yzyy
        mov r29.w, l(-1)
        mov r30.w, cb10[r41.z + 2].w
        mov r40.w, cb10[r41.z + 5].w
        mov r41.x, cb10[r41.z + 7].z
        mov r42.xyz, cb10[r41.z + 9].yzwy
        mov r42.w, cb10[r41.z + 10].x
        mov r43.xyz, cb10[r41.z + 12].yzwy
        mov r43.w, cb10[r41.z + 13].x
        mov r16.zw, r44.xxxy
        break 
      endif 
    endloop 
    if_nz r29.w
      mov r18.xyzw, r31.yxzw
      mov r19.xyzw, r32.xyzw
      mov r20.xyzw, r33.wxyz
      mov r21.xyzw, r34.xyzw
      mov r22.xyzw, r35.xyzw
      mov r23.xyzw, r36.zwxy
      mov r24.xyzw, r37.zwxy
      mov r25.xyzw, r42.zwxy
      mov r26.xyzw, r38.zwxy
      mov r27.xyzw, r39.zwxy
      mov r28.xyzw, r43.zwxy
      mov r15.yzw, r40.xxyz
      mov r13.zw, r16.wwwz
      mov r10.w, l(-1)
      mov r29.z, r30.w
      mov r30.z, r40.w
      mov r12.w, r41.x
      break 
    endif 
    iadd r14.w, r14.w, l(32)
    mov r18.xyzw, r31.yxzw
    mov r19.xyzw, r32.xyzw
    mov r20.xyzw, r33.wxyz
    mov r21.xyzw, r34.xyzw
    mov r22.xyzw, r35.xyzw
    mov r23.xyzw, r36.zwxy
    mov r24.xyzw, r37.zwxy
    mov r26.xyzw, r38.zwxy
    mov r27.xyzw, r39.zwxy
    mov r15.yzw, r40.xxyz
    mov r13.zw, r16.wwwz
    mov r10.w, r29.w
    mov r29.z, r30.w
    mov r30.z, r40.w
    mov r12.w, r41.x
    mov r25.xyzw, r42.zwxy
    mov r28.xyzw, r43.zwxy
  endloop 
  mov r31.xy, r18.ywyy
  mov r29.x, r18.z
  mov r18.yz, r19.xxwx
  mov r29.y, r19.y
  mov r31.z, r19.z
  mov r16.yzw, r20.yyzw
  mov r20.yz, r22.xxyx
  mov r30.xy, r22.zwzz
  mov r19.xy, r23.zwzz
  mov r23.z, r24.z
  mov r24.z, r25.z
  mov r25.z, r26.z
  mov r26.z, r27.z
  mov r27.z, r28.z
  mov r28.z, r13.w
else 
  mov r10.w, l(0)
endif 
if_nz r10.w
  if_nz r2.z
    add r22.yzw, r15.yyzw, cb1[24].xxyz
    mov r22.x, l(16)
    store_structured u2.xyzw, cb2[52].x, l(880), r22.xyzw
  endif 
  add r15.yzw, r5.xxyz, -r15.yyzw
  and r9.w, r12.w, l(0x0000ffff)
  ubfe r13.w, l(6), l(25), r12.w
  imul null, r14.w, r9.w, l(6)
  dp3 r18.w, cb11[r14.w + 0].xyzx, r15.yzwy
  add_sat r18.w, r18.w, cb11[r14.w + 0].w
  dp3 r19.z, cb11[r14.w + 1].xyzx, r15.yzwy
  add_sat r19.z, r19.z, cb11[r14.w + 1].w
  mul r18.w, r18.w, r19.z
  dp3 r19.z, cb11[r14.w + 2].xyzx, r15.yzwy
  add_sat r19.z, r19.z, cb11[r14.w + 2].w
  mul r18.w, r18.w, r19.z
  dp3 r19.z, cb11[r14.w + 3].xyzx, r15.yzwy
  add_sat r19.z, r19.z, cb11[r14.w + 3].w
  mul r18.w, r18.w, r19.z
  dp3 r19.z, cb11[r14.w + 4].xyzx, r15.yzwy
  add_sat r19.z, r19.z, cb11[r14.w + 4].w
  mul r18.w, r18.w, r19.z
  dp3 r19.z, cb11[r14.w + 5].xyzx, r15.yzwy
  add_sat r14.w, r19.z, cb11[r14.w + 5].w
  mul r22.x, r14.w, r18.w
  and r14.w, r21.w, l(1)
  mov r22.yz, l(0,0,1.000000,0)
  movc r19.zw, r14.wwww, r22.xxxy, r22.zzzx
  mov r22.x, l(1.000000)
  mov r14.w, r21.w
  mov r32.xy, r19.zwzz
  mov r18.w, l(1)
  loop 
    ige r20.w, r18.w, r13.w
    breakc_nz r20.w
    iadd r20.w, r9.w, r18.w
    imul null, r20.w, r20.w, l(6)
    dp3 r22.z, cb11[r20.w + 0].xyzx, r15.yzwy
    add_sat r22.z, r22.z, cb11[r20.w + 0].w
    mul r22.z, r22.z, r32.x
    dp3 r22.w, cb11[r20.w + 1].xyzx, r15.yzwy
    add_sat r22.w, r22.w, cb11[r20.w + 1].w
    mul r22.z, r22.w, r22.z
    dp3 r22.w, cb11[r20.w + 2].xyzx, r15.yzwy
    add_sat r22.w, r22.w, cb11[r20.w + 2].w
    mul r22.z, r22.w, r22.z
    dp3 r22.w, cb11[r20.w + 3].xyzx, r15.yzwy
    add_sat r22.w, r22.w, cb11[r20.w + 3].w
    mul r22.z, r22.w, r22.z
    dp3 r22.w, cb11[r20.w + 4].xyzx, r15.yzwy
    add_sat r22.w, r22.w, cb11[r20.w + 4].w
    mul r22.z, r22.w, r22.z
    dp3 r22.w, cb11[r20.w + 5].xyzx, r15.yzwy
    add_sat r20.w, r22.w, cb11[r20.w + 5].w
    mul r32.x, r20.w, r22.z
    ushr r22.w, r14.w, l(2)
    ubfe r23.w, l(1), l(2), r14.w
    and r29.w, r22.w, l(2)
    max r30.w, r32.x, r32.y
    mad r20.w, -r22.z, r20.w, l(1.000000)
    mul r20.w, r20.w, r32.y
    movc r22.y, r29.w, r20.w, r30.w
    movc r32.xy, r23.wwww, r32.xyxx, r22.xyxx
    iadd r18.w, r18.w, l(1)
    mov r14.w, r22.w
  endloop 
  mov_sat r32.y, r32.y
  mul r22.w, r19.x, r32.y
  lt r9.w, l(0.000000), r22.w
  if_nz r9.w
    if_nz r2.z
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r9.w, cb2[52].x, l(880), u2.xxxx
      or r9.w, r9.w, l(32)
      store_structured u2.x, cb2[52].x, l(880), r9.w
      store_structured u2.x, cb2[52].x, l(896), r22.w
    endif 
    mul r9.w, r19.y, r22.w
    dp3 r13.w, r17.xyzx, r23.xyzx
    dp3 r14.w, r15.yzwy, r23.xyzx
    add r14.w, -r24.w, r14.w
    ge r18.w, r14.w, l(0.000000)
    max r14.w, r7.w, |r14.w|
    movc r14.w, r18.w, r14.w, -r14.w
    max r13.w, -r13.w, l(0.00000010)
    div r13.w, r14.w, r13.w
    min r13.w, |r13.w|, l(131072.000000)
    dp3 r14.w, r17.xyzx, r24.xyzx
    dp3 r18.w, r15.yzwy, r24.xyzx
    add r18.w, -r25.w, r18.w
    ge r19.x, r18.w, l(0.000000)
    max r18.w, r7.w, |r18.w|
    movc r18.w, r19.x, r18.w, -r18.w
    max r14.w, -r14.w, l(0.00000010)
    div r14.w, r18.w, r14.w
    min r13.w, r13.w, |r14.w|
    dp3 r14.w, r17.xyzx, r25.xyzx
    dp3 r18.w, r15.yzwy, r25.xyzx
    add r18.w, -r26.w, r18.w
    ge r19.x, r18.w, l(0.000000)
    max r18.w, r7.w, |r18.w|
    movc r18.w, r19.x, r18.w, -r18.w
    max r14.w, -r14.w, l(0.00000010)
    div r14.w, r18.w, r14.w
    min r13.w, r13.w, |r14.w|
    dp3 r14.w, r17.xyzx, r26.xyzx
    dp3 r18.w, r15.yzwy, r26.xyzx
    add r18.w, -r27.w, r18.w
    ge r19.x, r18.w, l(0.000000)
    max r18.w, r7.w, |r18.w|
    movc r18.w, r19.x, r18.w, -r18.w
    max r14.w, -r14.w, l(0.00000010)
    div r14.w, r18.w, r14.w
    min r13.w, r13.w, |r14.w|
    dp3 r14.w, r17.xyzx, r27.xyzx
    dp3 r18.w, r15.yzwy, r27.xyzx
    add r18.w, -r28.w, r18.w
    ge r19.x, r18.w, l(0.000000)
    max r18.w, r7.w, |r18.w|
    movc r18.w, r19.x, r18.w, -r18.w
    max r14.w, -r14.w, l(0.00000010)
    div r14.w, r18.w, r14.w
    min r13.w, r13.w, |r14.w|
    dp3 r14.w, r17.xyzx, r28.xyzx
    dp3 r18.w, r15.yzwy, r28.xyzx
    add r13.z, -r13.z, r18.w
    ge r18.w, r13.z, l(0.000000)
    max r13.z, r7.w, |r13.z|
    movc r13.z, r18.w, r13.z, -r13.z
    max r14.w, -r14.w, l(0.00000010)
    div r13.z, r13.z, r14.w
    min r13.z, |r13.z|, r13.w
    add r19.xyz, r15.yzwy, r21.xyzx
    mad r19.xyz, r17.xyzx, r13.zzzz, r19.xyzx
    dp3 r13.w, r19.xyzx, r19.xyzx
    sqrt r13.w, r13.w
    div r13.z, r13.z, r13.w
    add r13.z, r13.z, r13.z
    sqrt r13.z, r13.z
    mad r13.z, r3.z, l(5.000000), r13.z
    add r13.z, r13.z, l(-0.844800)
    dp3 r21.x, r19.xyzx, r31.xyzx
    dp3 r21.y, r19.xyzx, r18.xyzx
    dp3 r21.z, r19.xyzx, r29.xyzx
    ubfe r12.w, l(9), l(16), r12.w
    utof r21.w, r12.w
    sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r21.xyzw, t8.xyzw, s2, r13.z
    and r23.xyz, r19.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r23.xyz, r23.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r12.w, r23.y, r23.x
    or r12.w, r23.z, r12.w
    movc r19.xyz, r12.wwww, l(1.000000,1.000000,0,0), r19.xyzx
    dp3 r23.x, r15.yzwy, r31.xyzx
    dp3 r23.y, r15.yzwy, r18.xyzx
    dp3 r23.z, r15.yzwy, r29.xyzx
    mad_sat r15.yzw, r23.xxyz, r16.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000)
    mad r15.yzw, r15.yyzw, r20.xxyz, r30.xxyz
    dp3 r21.x, r11.xyzx, r31.xyzx
    dp3 r21.y, r11.xyzx, r18.xyzx
    dp3 r21.z, r11.xyzx, r29.xyzx
    lt r16.yzw, l(0.000000, 0.000000, 0.000000, 0.000000), r21.xxyz
    movc r18.z, r16.y, l(0), l(0.500000)
    mov r18.xy, l(0,0,0,0)
    add r18.xyz, r15.yzwy, r18.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t17.xyzw, s4, l(0.000000)
    mul r20.xyz, r21.xyzx, r21.xyzx
    mul r20.xyz, r9.wwww, r20.xyzx
    movc r23.z, r16.z, l(0), l(0.500000)
    mov r23.xy, l(0,0,0,0)
    add r23.xyz, r15.yzwy, r23.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r23.xyz, r23.xyzx, t18.xyzw, s4, l(0.000000)
    mul r23.xyz, r20.yyyy, r23.xyzx
    mad r18.xyz, r18.xyzx, r20.xxxx, r23.xyzx
    movc r23.z, r16.w, l(0), l(0.500000)
    mov r23.xy, l(0,0,0,0)
    add r15.yzw, r15.yyzw, r23.xxyz
    sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t19.wxyz, s4, l(0.000000)
    mad r15.yzw, r15.yyzw, r20.zzzz, r18.xxyz
    sample_l_indexable(texturecubearray)(float,float,float,float) r16.yzw, r21.xyzw, t8.wxyz, s2, l(6.000000)
    and r18.xyz, r16.yzwy, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r18.xyz, r18.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r12.w, r18.y, r18.x
    or r12.w, r18.z, r12.w
    movc r16.yzw, r12.wwww, l(0,1.000000,1.000000,0), r16.yyzw
    mul r15.yzw, r15.yyzw, r16.yyzw
    dp3 r12.w, r15.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r13.z, r8.w, r12.w
    mul r15.yzw, r9.wwww, r19.xxyz
    dp3 r9.w, r15.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r9.w, r8.w, r12.w, r9.w
    div r9.w, r13.z, r9.w
    mul r22.xyz, r9.wwww, r15.yzwy
    mov r9.w, l(257)
  else 
    mov r22.xyzw, l(0,0,0,0)
    mov r9.w, l(1)
  endif 
  mov r12.w, l(-1)
else 
  mov r22.xyzw, l(0,0,0,0)
  mov r9.w, l(0)
endif 
and r10.w, r10.w, r12.w
if_z r10.w
  iadd r10.w, cb2[0].y, -cb2[58].x
  ftou r12.w, cb1[44].x
  iadd r12.w, r12.w, l(7)
  ushr r12.w, r12.w, l(3)
  imad r12.w, r0.z, r12.w, r0.y
  bfi r12.w, l(27), l(5), r12.w, l(16)
  and r13.z, r10.w, l(-32)
  iadd r13.w, r10.w, -r13.z
  and r14.w, cb2[0].y, l(-32)
  iadd r15.y, -r14.w, cb2[0].y
  mov r18.x, l(16)
  mov r19.yz, l(0,0,1.000000,0)
  mov r20.xy, l(0,0,0,0)
  mov r21.xz, l(1.000000,0,1.000000,0)
  mov r23.xy, l(0,0,0,0)
  mov r24.xy, l(0,0,0,0)
  mov r25.xyz, l(0,0,0,0)
  mov r25.w, r22.x
  mov r26.xyz, r22.yzwy
  mov r26.w, r9.w
  mov r15.z, r13.z
  loop 
    uge r15.w, r15.z, cb2[0].y
    breakc_nz r15.w
    ushr r15.w, r15.z, l(5)
    iadd r15.w, r12.w, r15.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.w, r15.w, l(0), t26.xxxx
    ieq r16.y, r13.z, r15.z
    bfi r16.z, r13.w, l(0), l(0), r15.w
    movc r15.w, r16.y, r16.z, r15.w
    ieq r16.y, r14.w, r15.z
    ubfe r16.z, r15.y, l(0), r15.w
    movc r15.w, r16.y, r16.z, r15.w
    mov r27.xyzw, r25.xyzw
    mov r28.xyzw, r26.xyzw
    mov r16.y, r15.w
    loop 
      breakc_z r16.y
      firstbit_lo r16.z, r16.y
      ishl r16.w, l(1), r16.z
      not r16.w, r16.w
      and r16.y, r16.w, r16.y
      iadd r16.z, r15.z, r16.z
      imul null, r16.z, r16.z, l(14)
      and r16.w, r28.w, l(255)
      ult r19.w, r16.w, l(32)
      and r19.w, r2.z, r19.w
      if_nz r19.w
        imad r16.w, r16.w, l(20), l(880)
        add r18.yzw, cb1[24].xxyz, cb10[r16.z + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r16.w, r18.xyzw
      endif 
      iadd r29.w, r28.w, l(1)
      add r18.yzw, r5.xxyz, -cb10[r16.z + 0].xxyz
      and r16.w, l(0x0000ffff), cb10[r16.z + 7].z
      ubfe r19.w, l(6), l(25), cb10[r16.z + 7].z
      imul null, r20.w, r16.w, l(6)
      dp3 r23.w, cb11[r20.w + 0].xyzx, r18.yzwy
      add_sat r23.w, r23.w, cb11[r20.w + 0].w
      dp3 r24.w, cb11[r20.w + 1].xyzx, r18.yzwy
      add_sat r24.w, r24.w, cb11[r20.w + 1].w
      mul r23.w, r23.w, r24.w
      dp3 r24.w, cb11[r20.w + 2].xyzx, r18.yzwy
      add_sat r24.w, r24.w, cb11[r20.w + 2].w
      mul r23.w, r23.w, r24.w
      dp3 r24.w, cb11[r20.w + 3].xyzx, r18.yzwy
      add_sat r24.w, r24.w, cb11[r20.w + 3].w
      mul r23.w, r23.w, r24.w
      dp3 r24.w, cb11[r20.w + 4].xyzx, r18.yzwy
      add_sat r24.w, r24.w, cb11[r20.w + 4].w
      mul r23.w, r23.w, r24.w
      dp3 r24.w, cb11[r20.w + 5].xyzx, r18.yzwy
      add_sat r20.w, r24.w, cb11[r20.w + 5].w
      mul r19.x, r20.w, r23.w
      and r20.w, l(1), cb10[r16.z + 6].x
      movc r30.xy, r20.wwww, r19.xyxx, r19.zxzz
      mov r19.x, cb10[r16.z + 6].x
      mov r31.xy, r30.xyxx
      mov r20.w, l(1)
      loop 
        ige r23.w, r20.w, r19.w
        breakc_nz r23.w
        iadd r23.w, r16.w, r20.w
        imul null, r23.w, r23.w, l(6)
        dp3 r24.w, cb11[r23.w + 0].xyzx, r18.yzwy
        add_sat r24.w, r24.w, cb11[r23.w + 0].w
        mul r24.w, r24.w, r31.x
        dp3 r30.z, cb11[r23.w + 1].xyzx, r18.yzwy
        add_sat r30.z, r30.z, cb11[r23.w + 1].w
        mul r24.w, r24.w, r30.z
        dp3 r30.z, cb11[r23.w + 2].xyzx, r18.yzwy
        add_sat r30.z, r30.z, cb11[r23.w + 2].w
        mul r24.w, r24.w, r30.z
        dp3 r30.z, cb11[r23.w + 3].xyzx, r18.yzwy
        add_sat r30.z, r30.z, cb11[r23.w + 3].w
        mul r24.w, r24.w, r30.z
        dp3 r30.z, cb11[r23.w + 4].xyzx, r18.yzwy
        add_sat r30.z, r30.z, cb11[r23.w + 4].w
        mul r24.w, r24.w, r30.z
        dp3 r30.z, cb11[r23.w + 5].xyzx, r18.yzwy
        add_sat r23.w, r30.z, cb11[r23.w + 5].w
        mul r31.x, r23.w, r24.w
        ushr r30.z, r19.x, l(2)
        ubfe r30.w, l(1), l(2), r19.x
        and r31.z, r30.z, l(2)
        max r31.w, r31.x, r31.y
        mad r23.w, -r24.w, r23.w, l(1.000000)
        mul r23.w, r23.w, r31.y
        movc r21.y, r31.z, r23.w, r31.w
        movc r31.xy, r30.wwww, r31.xyxx, r21.xyxx
        iadd r20.w, r20.w, l(1)
        mov r19.x, r30.z
      endloop 
      mov_sat r31.y, r31.y
      mul r16.w, r31.y, cb10[r16.z + 6].y
      lt r19.x, l(0.000000), r16.w
      if_nz r19.x
        and r19.x, r29.w, l(255)
        iadd r19.w, r19.x, l(-1)
        ult r19.w, r19.w, l(32)
        and r19.w, r2.z, r19.w
        if_nz r19.w
          imad r19.xw, r19.xxxx, l(20, 0, 0, 20), l(860, 0, 0, 876)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r20.w, cb2[52].x, r19.x, u2.xxxx
          or r20.w, r20.w, l(32)
          store_structured u2.x, cb2[52].x, r19.x, r20.w
          store_structured u2.x, cb2[52].x, r19.w, r16.w
        endif 
        iadd r28.w, r28.w, l(257)
        mad r28.z, r31.y, cb10[r16.z + 6].y, r28.z
        mul r16.w, r16.w, cb10[r16.z + 7].y
        mov r30.x, cb10[r16.z + 7].w
        mov r30.yz, cb10[r16.z + 8].xxyx
        dp3 r19.x, r17.xyzx, r30.xyzx
        dp3 r19.w, r18.yzwy, r30.xyzx
        add r19.w, r19.w, -cb10[r16.z + 8].z
        ge r20.w, r19.w, l(0.000000)
        max r19.w, r7.w, |r19.w|
        movc r19.w, r20.w, r19.w, -r19.w
        max r19.x, -r19.x, l(0.00000010)
        div r19.x, r19.w, r19.x
        min r19.x, |r19.x|, l(131072.000000)
        mov r30.x, cb10[r16.z + 8].w
        mov r30.yz, cb10[r16.z + 9].xxyx
        dp3 r19.w, r17.xyzx, r30.xyzx
        dp3 r20.w, r18.yzwy, r30.xyzx
        add r20.w, r20.w, -cb10[r16.z + 9].z
        ge r21.y, r20.w, l(0.000000)
        max r20.w, r7.w, |r20.w|
        movc r20.w, r21.y, r20.w, -r20.w
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r20.w, r19.w
        min r19.x, |r19.w|, r19.x
        mov r30.x, cb10[r16.z + 9].w
        mov r30.yz, cb10[r16.z + 10].xxyx
        dp3 r19.w, r17.xyzx, r30.xyzx
        dp3 r20.w, r18.yzwy, r30.xyzx
        add r20.w, r20.w, -cb10[r16.z + 10].z
        ge r21.y, r20.w, l(0.000000)
        max r20.w, r7.w, |r20.w|
        movc r20.w, r21.y, r20.w, -r20.w
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r20.w, r19.w
        min r19.x, |r19.w|, r19.x
        mov r30.x, cb10[r16.z + 10].w
        mov r30.yz, cb10[r16.z + 11].xxyx
        dp3 r19.w, r17.xyzx, r30.xyzx
        dp3 r20.w, r18.yzwy, r30.xyzx
        add r20.w, r20.w, -cb10[r16.z + 11].z
        ge r21.y, r20.w, l(0.000000)
        max r20.w, r7.w, |r20.w|
        movc r20.w, r21.y, r20.w, -r20.w
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r20.w, r19.w
        min r19.x, |r19.w|, r19.x
        mov r30.x, cb10[r16.z + 11].w
        mov r30.yz, cb10[r16.z + 12].xxyx
        dp3 r19.w, r17.xyzx, r30.xyzx
        dp3 r20.w, r18.yzwy, r30.xyzx
        add r20.w, r20.w, -cb10[r16.z + 12].z
        ge r21.y, r20.w, l(0.000000)
        max r20.w, r7.w, |r20.w|
        movc r20.w, r21.y, r20.w, -r20.w
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r20.w, r19.w
        min r19.x, |r19.w|, r19.x
        mov r30.x, cb10[r16.z + 12].w
        mov r30.yz, cb10[r16.z + 13].xxyx
        dp3 r19.w, r17.xyzx, r30.xyzx
        dp3 r20.w, r18.yzwy, r30.xyzx
        add r20.w, r20.w, -cb10[r16.z + 13].z
        ge r21.y, r20.w, l(0.000000)
        max r20.w, r7.w, |r20.w|
        movc r20.w, r21.y, r20.w, -r20.w
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r20.w, r19.w
        min r19.x, |r19.w|, r19.x
        add r30.x, r18.y, cb10[r16.z + 3].w
        add r30.yz, r18.zzwz, cb10[r16.z + 4].xxyx
        mad r30.xyz, r17.xyzx, r19.xxxx, r30.xyzx
        dp3 r19.w, r30.xyzx, r30.xyzx
        sqrt r19.w, r19.w
        div r19.x, r19.x, r19.w
        add r19.x, r19.x, r19.x
        sqrt r19.x, r19.x
        mad r19.x, r3.z, l(5.000000), r19.x
        add r19.x, r19.x, l(-0.844800)
        mov r32.x, cb10[r16.z + 0].w
        mov r32.y, cb10[r16.z + 1].z
        mov r32.z, cb10[r16.z + 2].y
        dp3 r33.x, r30.xyzx, r32.xyzx
        mov r34.xy, cb10[r16.z + 1].xwxx
        mov r34.z, cb10[r16.z + 2].z
        dp3 r33.y, r30.xyzx, r34.xyzx
        mov r35.x, cb10[r16.z + 1].y
        mov r35.yz, cb10[r16.z + 2].xxwx
        dp3 r33.z, r30.xyzx, r35.xyzx
        ubfe r19.w, l(9), l(16), cb10[r16.z + 7].z
        utof r33.w, r19.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r30.xyz, r33.xyzw, t8.xyzw, s2, r19.x
        and r31.xzw, r30.xxyz, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
        ieq r31.xzw, r31.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
        or r19.x, r31.z, r31.x
        or r19.x, r31.w, r19.x
        movc r30.xyz, r19.xxxx, l(1.000000,1.000000,0,0), r30.xyzx
        dp3 r36.x, r18.yzwy, r32.xyzx
        dp3 r36.y, r18.yzwy, r34.xyzx
        dp3 r36.z, r18.yzwy, r35.xyzx
        mad_sat r18.yzw, r36.xxyz, cb10[r16.z + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r36.xy, r18.yzyy, cb10[r16.z + 4].zwzz
        mul r36.z, r18.w, cb10[r16.z + 5].x
        add r18.yzw, r36.xxyz, cb10[r16.z + 5].yyzw
        dp3 r33.x, r11.xyzx, r32.xyzx
        dp3 r33.y, r11.xyzx, r34.xyzx
        dp3 r33.z, r11.xyzx, r35.xyzx
        lt r31.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r33.xxyz
        movc r20.z, r31.x, l(0), l(0.500000)
        add r32.xyz, r18.yzwy, r20.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r32.xyz, r32.xyzx, t17.xyzw, s4, l(0.000000)
        mul r34.xyz, r33.xyzx, r33.xyzx
        mul r34.xyz, r16.wwww, r34.xyzx
        movc r23.z, r31.z, l(0), l(0.500000)
        add r35.xyz, r18.yzwy, r23.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r35.xyz, r35.xyzx, t18.xyzw, s4, l(0.000000)
        mul r35.xyz, r34.yyyy, r35.xyzx
        mad r32.xyz, r32.xyzx, r34.xxxx, r35.xyzx
        movc r24.z, r31.w, l(0), l(0.500000)
        add r18.yzw, r18.yyzw, r24.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r18.yzw, r18.yzwy, t19.wxyz, s4, l(0.000000)
        mad r18.yzw, r18.yyzw, r34.zzzz, r32.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r31.xzw, r33.xyzw, t8.xwyz, s2, l(6.000000)
        and r32.xyz, r31.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r32.xyz, r32.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r16.z, r32.y, r32.x
        or r16.z, r32.z, r16.z
        movc r31.xzw, r16.zzzz, l(1.000000,0,1.000000,0), r31.xxzw
        mul r32.xyz, r18.yzwy, r31.xzwx
        dp3 r16.z, r32.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r27.xyz, r18.yzwy, r31.xzwx, r27.xyzx
        mul r18.y, r8.w, r16.z
        mul r30.xyz, r16.wwww, r30.xyzx
        dp3 r16.w, r30.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r16.z, r8.w, r16.z, r16.w
        div r16.z, r18.y, r16.z
        mov r32.x, r27.w
        mov r32.yz, r28.xxyx
        mad r18.yzw, r30.xxyz, r16.zzzz, r32.xxyz
        mov r27.w, r18.y
        mov r28.xy, r18.zwzz
      else 
        mov r29.xyz, r28.xyzx
        mov r28.xyzw, r29.xyzw
      endif 
    endloop 
    mov r25.xyzw, r27.xyzw
    mov r26.xyzw, r28.xyzw
    iadd r15.z, r15.z, l(32)
  endloop 
  mov r18.x, l(16)
  mov r19.yz, l(0,0,1.000000,0)
  mov r20.xy, l(0,0,0,0)
  mov r23.xy, l(0,0,0,0)
  mov r24.xy, l(0,0,0,0)
  mov r15.yzw, r25.xxyz
  mov r27.x, r25.w
  mov r27.yz, r26.xxyx
  mov r16.yzw, r26.zzwz
  mov r14.w, l(0)
  loop 
    uge r19.w, r14.w, r10.w
    breakc_nz r19.w
    ushr r19.w, r14.w, l(5)
    iadd r19.w, r12.w, r19.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.w, l(0), t26.xxxx
    ieq r20.w, r13.z, r14.w
    ubfe r21.x, r13.w, l(0), r19.w
    movc r19.w, r20.w, r21.x, r19.w
    mov r28.xyz, r15.yzwy
    mov r29.xyz, r27.xyzx
    mov r30.xyz, r16.ywzy
    mov r20.w, r19.w
    loop 
      breakc_z r20.w
      firstbit_lo r21.x, r20.w
      ishl r21.y, l(1), r21.x
      not r21.y, r21.y
      and r20.w, r20.w, r21.y
      iadd r21.x, r14.w, r21.x
      imul null, r21.x, r21.x, l(14)
      and r21.y, r30.z, l(255)
      ult r22.w, r21.y, l(32)
      and r22.w, r2.z, r22.w
      if_nz r22.w
        imad r21.y, r21.y, l(20), l(880)
        add r18.yzw, cb1[24].xxyz, cb10[r21.x + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r21.y, r18.xyzw
      endif 
      iadd r31.y, r30.z, l(1)
      add r18.yzw, r5.xxyz, -cb10[r21.x + 0].xxyz
      and r21.y, l(0x0000ffff), cb10[r21.x + 7].z
      ubfe r22.w, l(6), l(25), cb10[r21.x + 7].z
      imul null, r23.w, r21.y, l(6)
      dp3 r24.w, cb11[r23.w + 0].xyzx, r18.yzwy
      add_sat r24.w, r24.w, cb11[r23.w + 0].w
      dp3 r27.w, cb11[r23.w + 1].xyzx, r18.yzwy
      add_sat r27.w, r27.w, cb11[r23.w + 1].w
      mul r24.w, r24.w, r27.w
      dp3 r27.w, cb11[r23.w + 2].xyzx, r18.yzwy
      add_sat r27.w, r27.w, cb11[r23.w + 2].w
      mul r24.w, r24.w, r27.w
      dp3 r27.w, cb11[r23.w + 3].xyzx, r18.yzwy
      add_sat r27.w, r27.w, cb11[r23.w + 3].w
      mul r24.w, r24.w, r27.w
      dp3 r27.w, cb11[r23.w + 4].xyzx, r18.yzwy
      add_sat r27.w, r27.w, cb11[r23.w + 4].w
      mul r24.w, r24.w, r27.w
      dp3 r27.w, cb11[r23.w + 5].xyzx, r18.yzwy
      add_sat r23.w, r27.w, cb11[r23.w + 5].w
      mul r19.x, r23.w, r24.w
      and r23.w, l(1), cb10[r21.x + 6].x
      movc r31.zw, r23.wwww, r19.xxxy, r19.zzzx
      mov r19.x, cb10[r21.x + 6].x
      mov r32.xy, r31.zwzz
      mov r23.w, l(1)
      loop 
        ige r24.w, r23.w, r22.w
        breakc_nz r24.w
        iadd r24.w, r21.y, r23.w
        imul null, r24.w, r24.w, l(6)
        dp3 r27.w, cb11[r24.w + 0].xyzx, r18.yzwy
        add_sat r27.w, r27.w, cb11[r24.w + 0].w
        mul r27.w, r27.w, r32.x
        dp3 r28.w, cb11[r24.w + 1].xyzx, r18.yzwy
        add_sat r28.w, r28.w, cb11[r24.w + 1].w
        mul r27.w, r27.w, r28.w
        dp3 r28.w, cb11[r24.w + 2].xyzx, r18.yzwy
        add_sat r28.w, r28.w, cb11[r24.w + 2].w
        mul r27.w, r27.w, r28.w
        dp3 r28.w, cb11[r24.w + 3].xyzx, r18.yzwy
        add_sat r28.w, r28.w, cb11[r24.w + 3].w
        mul r27.w, r27.w, r28.w
        dp3 r28.w, cb11[r24.w + 4].xyzx, r18.yzwy
        add_sat r28.w, r28.w, cb11[r24.w + 4].w
        mul r27.w, r27.w, r28.w
        dp3 r28.w, cb11[r24.w + 5].xyzx, r18.yzwy
        add_sat r24.w, r28.w, cb11[r24.w + 5].w
        mul r32.x, r24.w, r27.w
        ushr r28.w, r19.x, l(2)
        ubfe r29.w, l(1), l(2), r19.x
        and r30.w, r28.w, l(2)
        max r32.z, r32.x, r32.y
        mad r24.w, -r27.w, r24.w, l(1.000000)
        mul r24.w, r24.w, r32.y
        movc r21.w, r30.w, r24.w, r32.z
        movc r32.xy, r29.wwww, r32.xyxx, r21.zwzz
        iadd r23.w, r23.w, l(1)
        mov r19.x, r28.w
      endloop 
      add_sat r19.x, -r30.y, r32.y
      mul r21.y, r19.x, cb10[r21.x + 6].y
      lt r21.w, l(0.000000), r21.y
      if_nz r21.w
        and r21.w, r31.y, l(255)
        iadd r22.w, r21.w, l(-1)
        ult r22.w, r22.w, l(32)
        and r22.w, r2.z, r22.w
        if_nz r22.w
          imad r31.zw, r21.wwww, l(0, 0, 20, 20), l(0, 0, 860, 876)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r21.w, cb2[52].x, r31.z, u2.xxxx
          or r21.w, r21.w, l(32)
          store_structured u2.x, cb2[52].x, r31.z, r21.w
          store_structured u2.x, cb2[52].x, r31.w, r21.y
        endif 
        iadd r30.z, r30.z, l(257)
        mad r30.x, r19.x, cb10[r21.x + 6].y, r30.x
        mul r19.x, r21.y, cb10[r21.x + 7].y
        mov r33.x, cb10[r21.x + 7].w
        mov r33.yz, cb10[r21.x + 8].xxyx
        dp3 r21.y, r17.xyzx, r33.xyzx
        dp3 r21.w, r18.yzwy, r33.xyzx
        add r21.w, r21.w, -cb10[r21.x + 8].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r7.w, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r21.y, -r21.y, l(0.00000010)
        div r21.y, r21.w, r21.y
        min r21.y, |r21.y|, l(131072.000000)
        mov r33.x, cb10[r21.x + 8].w
        mov r33.yz, cb10[r21.x + 9].xxyx
        dp3 r21.w, r17.xyzx, r33.xyzx
        dp3 r22.w, r18.yzwy, r33.xyzx
        add r22.w, r22.w, -cb10[r21.x + 9].z
        ge r23.w, r22.w, l(0.000000)
        max r22.w, r7.w, |r22.w|
        movc r22.w, r23.w, r22.w, -r22.w
        max r21.w, -r21.w, l(0.00000010)
        div r21.w, r22.w, r21.w
        min r21.y, |r21.w|, r21.y
        mov r33.x, cb10[r21.x + 9].w
        mov r33.yz, cb10[r21.x + 10].xxyx
        dp3 r21.w, r17.xyzx, r33.xyzx
        dp3 r22.w, r18.yzwy, r33.xyzx
        add r22.w, r22.w, -cb10[r21.x + 10].z
        ge r23.w, r22.w, l(0.000000)
        max r22.w, r7.w, |r22.w|
        movc r22.w, r23.w, r22.w, -r22.w
        max r21.w, -r21.w, l(0.00000010)
        div r21.w, r22.w, r21.w
        min r21.y, |r21.w|, r21.y
        mov r33.x, cb10[r21.x + 10].w
        mov r33.yz, cb10[r21.x + 11].xxyx
        dp3 r21.w, r17.xyzx, r33.xyzx
        dp3 r22.w, r18.yzwy, r33.xyzx
        add r22.w, r22.w, -cb10[r21.x + 11].z
        ge r23.w, r22.w, l(0.000000)
        max r22.w, r7.w, |r22.w|
        movc r22.w, r23.w, r22.w, -r22.w
        max r21.w, -r21.w, l(0.00000010)
        div r21.w, r22.w, r21.w
        min r21.y, |r21.w|, r21.y
        mov r33.x, cb10[r21.x + 11].w
        mov r33.yz, cb10[r21.x + 12].xxyx
        dp3 r21.w, r17.xyzx, r33.xyzx
        dp3 r22.w, r18.yzwy, r33.xyzx
        add r22.w, r22.w, -cb10[r21.x + 12].z
        ge r23.w, r22.w, l(0.000000)
        max r22.w, r7.w, |r22.w|
        movc r22.w, r23.w, r22.w, -r22.w
        max r21.w, -r21.w, l(0.00000010)
        div r21.w, r22.w, r21.w
        min r21.y, |r21.w|, r21.y
        mov r33.x, cb10[r21.x + 12].w
        mov r33.yz, cb10[r21.x + 13].xxyx
        dp3 r21.w, r17.xyzx, r33.xyzx
        dp3 r22.w, r18.yzwy, r33.xyzx
        add r22.w, r22.w, -cb10[r21.x + 13].z
        ge r23.w, r22.w, l(0.000000)
        max r22.w, r7.w, |r22.w|
        movc r22.w, r23.w, r22.w, -r22.w
        max r21.w, -r21.w, l(0.00000010)
        div r21.w, r22.w, r21.w
        min r21.y, |r21.w|, r21.y
        add r33.x, r18.y, cb10[r21.x + 3].w
        add r33.yz, r18.zzwz, cb10[r21.x + 4].xxyx
        mad r32.xzw, r17.xxyz, r21.yyyy, r33.xxyz
        dp3 r21.w, r32.xzwx, r32.xzwx
        sqrt r21.w, r21.w
        div r21.y, r21.y, r21.w
        add r21.y, r21.y, r21.y
        sqrt r21.y, r21.y
        mad r21.y, r3.z, l(5.000000), r21.y
        add r21.y, r21.y, l(-0.844800)
        mov r33.x, cb10[r21.x + 0].w
        mov r33.y, cb10[r21.x + 1].z
        mov r33.z, cb10[r21.x + 2].y
        dp3 r34.x, r32.xzwx, r33.xyzx
        mov r35.xy, cb10[r21.x + 1].xwxx
        mov r35.z, cb10[r21.x + 2].z
        dp3 r34.y, r32.xzwx, r35.xyzx
        mov r36.x, cb10[r21.x + 1].y
        mov r36.yz, cb10[r21.x + 2].xxwx
        dp3 r34.z, r32.xzwx, r36.xyzx
        ubfe r21.w, l(9), l(16), cb10[r21.x + 7].z
        utof r34.w, r21.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r32.xzw, r34.xyzw, t8.xwyz, s2, r21.y
        and r37.xyz, r32.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r37.xyz, r37.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r21.y, r37.y, r37.x
        or r21.y, r37.z, r21.y
        movc r32.xzw, r21.yyyy, l(1.000000,0,1.000000,0), r32.xxzw
        dp3 r37.x, r18.yzwy, r33.xyzx
        dp3 r37.y, r18.yzwy, r35.xyzx
        dp3 r37.z, r18.yzwy, r36.xyzx
        mad_sat r18.yzw, r37.xxyz, cb10[r21.x + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r37.xy, r18.yzyy, cb10[r21.x + 4].zwzz
        mul r37.z, r18.w, cb10[r21.x + 5].x
        add r18.yzw, r37.xxyz, cb10[r21.x + 5].yyzw
        dp3 r34.x, r11.xyzx, r33.xyzx
        dp3 r34.y, r11.xyzx, r35.xyzx
        dp3 r34.z, r11.xyzx, r36.xyzx
        lt r21.xyw, l(0.000000, 0.000000, 0.000000, 0.000000), r34.xyxz
        movc r20.z, r21.x, l(0), l(0.500000)
        add r33.xyz, r18.yzwy, r20.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r33.xyz, r33.xyzx, t17.xyzw, s4, l(0.000000)
        mul r35.xyz, r34.xyzx, r34.xyzx
        mul r35.xyz, r19.xxxx, r35.xyzx
        movc r23.z, r21.y, l(0), l(0.500000)
        add r36.xyz, r18.yzwy, r23.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r36.xyz, r36.xyzx, t18.xyzw, s4, l(0.000000)
        mul r36.xyz, r35.yyyy, r36.xyzx
        mad r33.xyz, r33.xyzx, r35.xxxx, r36.xyzx
        movc r24.z, r21.w, l(0), l(0.500000)
        add r18.yzw, r18.yyzw, r24.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r18.yzw, r18.yzwy, t19.wxyz, s4, l(0.000000)
        mad r18.yzw, r18.yyzw, r35.zzzz, r33.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r21.xyw, r34.xyzw, t8.xywz, s2, l(6.000000)
        and r33.xyz, r21.xywx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r33.xyz, r33.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r20.z, r33.y, r33.x
        or r20.z, r33.z, r20.z
        movc r21.xyw, r20.zzzz, l(1.000000,1.000000,0,0), r21.xyxw
        mul r33.xyz, r18.yzwy, r21.xywx
        dp3 r20.z, r33.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r28.xyz, r18.yzwy, r21.xywx, r28.xyzx
        mul r18.y, r8.w, r20.z
        mul r21.xyw, r19.xxxx, r32.xzxw
        dp3 r18.z, r21.xywx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r18.z, r8.w, r20.z, r18.z
        div r18.y, r18.y, r18.z
        mad r29.xyz, r21.xywx, r18.yyyy, r29.xyzx
      else 
        mov r31.x, r30.x
        mov r30.xz, r31.xxyx
      endif 
    endloop 
    mov r15.yzw, r28.xxyz
    mov r27.xyz, r29.xyzx
    mov r16.yz, r30.xxzx
    iadd r14.w, r14.w, l(32)
  endloop 
  ge r3.z, r26.z, l(1.000000)
  and r7.w, r26.w, l(0x0000ff00)
  bfi r7.w, l(8), l(0), r16.z, r7.w
  movc r9.w, r3.z, r7.w, r16.z
  max r3.z, r16.y, l(1.000000)
  rcp r3.z, r3.z
  mov_sat r16.y, r16.y
  mul r18.xyz, r3.zzzz, r15.yzwy
  mul r22.xyz, r3.zzzz, r27.xyzx
  lt r7.w, r16.y, l(0.990000)
  if_nz r7.w
    iadd r9.w, r9.w, l(256)
    add r7.w, -r16.y, l(1.000000)
    mul r8.w, r7.w, cb2[19].x
    add r16.yzw, r5.xxyz, -cb2[35].xxyz
    mul r19.x, r16.y, cb2[35].w
    mul r19.yz, r16.zzwz, cb2[36].xxyx
    add_sat r16.yzw, r19.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    mul r19.xy, r16.yzyy, cb2[36].zwzz
    mul r19.z, r16.w, cb2[37].x
    add r16.yzw, r19.xxyz, cb2[37].yyzw
    lt r19.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
    movc r19.xyz, r19.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
    mov r19.w, l(0)
    add r20.xyz, r16.yzwy, r19.wwxw
    sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
    mul r21.xyz, r11.xyzx, r11.xyzx
    mul r21.xyz, r8.wwww, r21.xyzx
    add r23.xyz, r16.yzwy, r19.wwyw
    sample_l_indexable(texture3d)(float,float,float,float) r23.xyz, r23.xyzx, t18.xyzw, s4, l(0.000000)
    mul r23.xyz, r21.yyyy, r23.xyzx
    mad r20.xyz, r20.xyzx, r21.xxxx, r23.xyzx
    add r16.yzw, r16.yyzw, r19.wwwz
    sample_l_indexable(texture3d)(float,float,float,float) r16.yzw, r16.yzwy, t19.wxyz, s4, l(0.000000)
    mad r16.yzw, r16.yyzw, r21.zzzz, r20.xxyz
    mov r11.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
    mul r16.yzw, r16.yyzw, r19.xxyz
    dp3 r8.w, r16.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r18.xyz, r15.yzwy, r3.zzzz, r16.yzwy
    mov r17.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r17.xyzw, t8.wxyz, s2, r6.w
    mad r3.z, cb2[19].x, r7.w, -r8.w
    mad r3.z, r2.y, r3.z, r8.w
    mad r22.xyz, r15.yzwy, r3.zzzz, r22.xyzx
  endif 
else 
  mov r18.xyz, l(0,0,0,0)
endif 
add r3.z, r4.z, r2.x
log r3.z, |r3.z|
mul r3.z, r1.w, r3.z
exp r3.z, r3.z
add r3.z, r4.z, r3.z
add_sat r3.z, r3.z, l(-1.000000)
mul r18.xyz, r4.zzzz, r18.xyzx
mad r13.zw, r2.xxxy, l(0.000000, 0.000000, 0.984375, 0.984375), l(0.000000, 0.000000, 0.00781250, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r13.zw, r13.zwzz, t5.zwxy, s2, l(0.000000)
mul r15.yzw, r3.zzzz, r22.xxyz
mul r19.xyz, r13.zzzz, r15.zwyz
mul r15.yzw, r13.wwww, r15.yyzw
sqrt r2.y, r1.w
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r3.z, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r4.z, r2.x, r2.y, r3.z
mul r2.y, r2.y, r4.z
mul r3.z, r3.z, r4.z
if_nz r2.z
  mov r20.x, l(3)
  mov r20.yzw, cb1[24].xxyz
  store_structured u2.xyzw, cb2[52].x, l(112), r20.xyzw
endif 
lt r4.z, l(0.000000), r3.y
if_nz r4.z
  if_nz r2.z
    ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r4.z, cb2[52].x, l(112), u2.xxxx
    or r4.z, r4.z, l(4)
    store_structured u2.x, cb2[52].x, l(112), r4.z
    store_structured u2.x, cb2[52].x, l(128), r3.w
  endif 
  lt r4.z, l(0.000000), r3.w
  if_nz r4.z
    mul r4.z, r1.z, cb2[18].w
    mul r4.z, r3.y, r4.z
    if_nz cb2[23].x
      add r20.xyz, r5.xyzx, cb1[24].xyzx
      mov r20.w, l(1.000000)
      dp4 r6.w, cb2[24].xyzw, r20.xyzw
      dp4 r7.w, cb2[25].xyzw, r20.xyzw
      frc r20.x, r6.w
      frc r20.y, r7.w
      iadd r6.w, l(-1), cb2[23].x
      utof r20.z, r6.w
      sample_l_indexable(texture2darray)(float,float,float,float) r16.yzw, r20.xyzx, t20.wxyz, s2, l(0.000000)
      add r16.yzw, r16.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
      mad r16.yzw, cb2[23].yyyy, r16.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      mul r16.yzw, r16.yyzw, cb2[18].xxyz
    else 
      mov r16.yzw, cb2[18].xxyz
    endif 
    ushr r6.w, cb2[53].x, l(16)
    ult r7.w, l(0), r6.w
    and r7.w, r3.x, r7.w
    if_nz r7.w
      iadd r6.w, r6.w, cb2[0].x
      imad r6.w, r6.w, l(15), l(-15)
      mad r7.w, |r2.w|, l(-0.200000), l(0.400000)
      mad r20.xyz, r11.xyzx, r7.wwww, r5.xyzx
      mov r21.xyz, cb9[r6.w + 4].yzwy
      mov r21.w, cb9[r6.w + 5].x
      mov r20.w, l(1.000000)
      dp4 r21.x, r21.xyzw, r20.xyzw
      mov r22.xyz, cb9[r6.w + 5].yzwy
      mov r22.w, cb9[r6.w + 6].x
      dp4 r21.y, r22.xyzw, r20.xyzw
      mad r13.zw, r21.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r21.x, r13.z, cb9[r6.w + 9].w
      add r21.y, r13.w, cb9[r6.w + 10].x
      mul r13.zw, r21.xxxy, cb9[r6.w + 9].yyyz
      div r21.xy, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].ywyy
      add r21.zw, -r21.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      ge r21.zw, r13.zzzw, r21.zzzw
      ge r21.xy, r21.xyxx, r13.zwzz
      or r21.xy, r21.xyxx, r21.zwzz
      or r7.w, r21.y, r21.x
      if_z r7.w
        mov r21.xyz, cb9[r6.w + 6].yzwy
        mov r21.w, cb9[r6.w + 7].x
        dp4 r7.w, r21.xyzw, r20.xyzw
        mov_sat r13.zw, r13.zzzw
        mad r20.x, r13.z, cb9[r6.w + 8].y, cb9[r6.w + 8].z
        mad r20.y, r13.w, cb9[r6.w + 8].w, cb9[r6.w + 9].x
        add r7.w, r7.w, cb9[r6.w + 10].y
        div r7.w, r7.w, cb9[r6.w + 10].z
        max r7.w, r7.w, l(0.00006104)
        and r8.w, l(0x0000ffff), cb9[r6.w + 1].w
        if_nz cb2[58].y
          mov r21.x, -r13.x
          utof r22.z, r8.w
          mov r21.y, r14.x
          mov r21.z, r13.x
          mov r10.w, l(0)
          mov r11.w, l(0)
          loop 
            ige r12.w, r11.w, l(8)
            breakc_nz r12.w
            dp2 r23.x, icb[r11.w + 0].yxyy, r21.xyxx
            dp2 r23.y, icb[r11.w + 0].yxyy, r21.yzyy
            mad r22.xy, r23.xyxx, cb9[r6.w + 3].yyyy, r20.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r22.xyzx, t9.xxxx, s13, r7.w
            mad r10.w, r12.w, l(0.125000), r10.w
            iadd r11.w, r11.w, l(1)
          endloop 
        else 
          utof r20.z, r8.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r20.xyzx, t9.xxxx, s13, r7.w
        endif 
        mul r6.w, r10.w, r10.w
        mul r6.w, r10.w, r6.w
      else 
        mov r6.w, l(1.000000)
      endif 
      mul r3.w, r3.w, r6.w
    else 
      and r6.w, cb2[53].x, l(0x0000ffff)
      ult r7.w, l(0), r6.w
      not r8.w, r3.x
      and r7.w, r7.w, r8.w
      if_nz r7.w
        iadd r6.w, r6.w, cb2[0].x
        imad r6.w, r6.w, l(15), l(-15)
        mad r7.w, |r2.w|, l(-0.200000), l(0.400000)
        mad r20.xyz, r11.xyzx, r7.wwww, r5.xyzx
        mov r21.xyz, cb9[r6.w + 4].yzwy
        mov r21.w, cb9[r6.w + 5].x
        mov r20.w, l(1.000000)
        dp4 r21.x, r21.xyzw, r20.xyzw
        mov r22.xyz, cb9[r6.w + 5].yzwy
        mov r22.w, cb9[r6.w + 6].x
        dp4 r21.y, r22.xyzw, r20.xyzw
        mad r13.zw, r21.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r21.x, r13.z, cb9[r6.w + 9].w
        add r21.y, r13.w, cb9[r6.w + 10].x
        mul r13.zw, r21.xxxy, cb9[r6.w + 9].yyyz
        div r21.xy, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].ywyy
        add r21.zw, -r21.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
        ge r21.zw, r13.zzzw, r21.zzzw
        ge r21.xy, r21.xyxx, r13.zwzz
        or r21.xy, r21.xyxx, r21.zwzz
        or r7.w, r21.y, r21.x
        if_z r7.w
          mov r21.xyz, cb9[r6.w + 6].yzwy
          mov r21.w, cb9[r6.w + 7].x
          dp4 r7.w, r21.xyzw, r20.xyzw
          mov_sat r13.zw, r13.zzzw
          mad r20.x, r13.z, cb9[r6.w + 8].y, cb9[r6.w + 8].z
          mad r20.y, r13.w, cb9[r6.w + 8].w, cb9[r6.w + 9].x
          add r7.w, r7.w, cb9[r6.w + 10].y
          div r7.w, r7.w, cb9[r6.w + 10].z
          max r7.w, r7.w, l(0.00006104)
          and r8.w, l(0x0000ffff), cb9[r6.w + 1].w
          if_nz cb2[58].y
            mov r21.x, -r13.x
            utof r22.z, r8.w
            mov r21.y, r14.x
            mov r21.z, r13.x
            mov r10.w, l(0)
            mov r11.w, l(0)
            loop 
              ige r12.w, r11.w, l(8)
              breakc_nz r12.w
              dp2 r23.x, icb[r11.w + 0].yxyy, r21.xyxx
              dp2 r23.y, icb[r11.w + 0].yxyy, r21.yzyy
              mad r22.xy, r23.xyxx, cb9[r6.w + 3].yyyy, r20.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r22.xyzx, t9.xxxx, s13, r7.w
              mad r10.w, r12.w, l(0.125000), r10.w
              iadd r11.w, r11.w, l(1)
            endloop 
          else 
            utof r20.z, r8.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r20.xyzx, t9.xxxx, s13, r7.w
          endif 
          mul r6.w, r10.w, r10.w
          mul r6.w, r10.w, r6.w
        else 
          mov r6.w, l(1.000000)
        endif 
        mul r3.w, r3.w, r6.w
      endif 
    endif 
    mad r6.w, -r2.x, l(0.500000), l(1.000000)
    mad r6.w, -r3.y, r6.w, l(1.000000)
    mul r6.w, r6.w, r6.w
    mad r6.w, -r6.w, l(0.620000), l(0.620000)
    add r6.w, -r3.y, r6.w
    mad r6.w, r1.w, r6.w, r3.y
    mul r6.w, r3.w, r6.w
    lt r2.w, l(0.000000), r2.w
    mad r20.xyz, r6.wwww, r16.yzwy, r18.xyzx
    mad r21.xyz, -r5.xyzx, r0.wwww, cb2[17].xyzx
    dp3 r0.w, r21.xyzx, r21.xyzx
    rsq r0.w, r0.w
    mul r21.xyz, r0.wwww, r21.xyzx
    dp3 r0.w, r21.xyzx, r12.xyzx
    dp3 r6.w, r11.xyzx, r21.xyzx
    mad r7.w, |r6.w|, r1.z, -|r6.w|
    mad r6.w, |r6.w|, r7.w, l(1.000000)
    mad r3.y, r3.y, r2.y, r3.z
    mul r6.w, r6.w, r6.w
    mul r3.y, r3.y, r6.w
    rcp r3.y, r3.y
    mul r3.y, r4.z, r3.y
    mul r3.y, r3.y, r3.w
    mul r3.y, r3.y, l(0.250000)
    mad r21.xyz, r3.yyyy, r16.yzwy, r15.yzwy
    add_sat r0.w, -r0.w, l(1.000000)
    mul r4.z, r0.w, r0.w
    mul r4.z, r4.z, r4.z
    mul r0.w, r0.w, r4.z
    mul r0.w, r0.w, r3.y
    mad r22.xyz, r0.wwww, r16.zwyz, r19.xyzx
    mov r20.w, r22.z
    mov r18.w, r19.z
    movc r18.xyzw, r2.wwww, r20.xyzw, r18.xyzw
    mov r22.zw, r21.xxxy
    mov r19.zw, r15.yyyz
    movc r20.xyzw, r2.wwww, r22.xyzw, r19.xyzw
    movc r15.w, r2.w, r21.z, r15.w
    if_nz r2.z
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r0.w, cb2[52].x, l(112), u2.xxxx
      or r0.w, r0.w, l(8)
      store_structured u2.x, cb2[52].x, l(112), r0.w
      store_structured u2.x, cb2[52].x, l(132), r3.w
    endif 
    mov r19.z, r18.w
    mov r19.xy, r20.xyxx
    mov r15.yz, r20.zzwz
    mov r0.w, l(0x00010101)
  else 
    mov r0.w, l(257)
  endif 
else 
  mov r0.w, l(1)
endif 
ushr r2.w, r0.x, l(24)
ubfe r0.x, l(10), l(12), r0.x
mov r20.x, -r13.x
not r3.y, r3.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r21.x, l(2)
mov r22.x, l(2)
mov r5.w, l(1.000000)
mov r23.w, l(1.000000)
mov r20.z, r13.x
mov r24.w, l(1.000000)
mov r25.z, l(1.000000)
mov r26.w, l(1.000000)
mov r20.yw, r14.xxxx
mov r13.y, r20.w
mov r27.w, l(1.000000)
mov r14.y, r20.x
mov r14.z, r13.x
mov r28.w, l(1.000000)
mov r29.x, r14.x
mov r29.y, r20.x
mov r29.z, r13.x
mov r30.x, r14.x
mov r30.y, r20.x
mov r30.z, r13.x
mov r31.x, r14.x
mov r31.y, r20.x
mov r31.z, r13.x
mov r16.yzw, r18.xxyz
mov r32.xyz, r19.zxyz
mov r33.xyz, r15.yzwy
mov r3.w, r0.w
mov r4.z, l(0)
loop 
  ieq r6.w, r4.z, l(2)
  breakc_nz r6.w
  movc r6.w, r4.z, r0.x, r2.w
  imul null, r6.w, r6.w, l(15)
  ubfe r7.w, l(3), l(24), cb9[r6.w + 1].w
  switch r7.w
    case l(4)
    if_nz r2.z
      and r7.w, r3.w, l(7)
      imad r7.w, r7.w, l(24), l(112)
      add r21.yzw, cb1[24].xxyz, cb9[r6.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r7.w, r21.xyzw
    endif 
    iadd r7.w, r3.w, l(1)
    lt r8.w, l(0.000000), cb9[r6.w + 6].y
    mov r34.xy, cb9[r6.w + 5].zwzz
    mov r34.z, cb9[r6.w + 6].x
    mad r21.yzw, -r34.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r6.w + 0].xxyz
    add r35.xyz, -r5.xyzx, r21.yzwy
    dp3 r10.w, r34.xyzx, r35.xyzx
    div_sat r11.w, -r10.w, cb9[r6.w + 6].y
    mad r36.xyz, r11.wwww, r34.xyzx, r21.yzwy
    movc r36.xyz, r8.wwww, r36.xyzx, cb9[r6.w + 0].xyzx
    add r36.xyz, -r5.xyzx, r36.xyzx
    dp3 r12.w, r36.xyzx, r36.xyzx
    rsq r13.z, r12.w
    mul r36.xyz, r13.zzzz, r36.xyzx
    dp3 r13.z, r11.xyzx, r36.xyzx
    mov_sat r13.w, r13.z
    lt r14.w, l(0.000000), r13.w
    if_nz r14.w
      sqrt r14.w, r12.w
      mul r17.w, cb9[r6.w + 3].x, cb9[r6.w + 3].x
      div r12.w, r17.w, r12.w
      min r12.w, r12.w, l(1.000000)
      mad_sat r36.xy, r14.wwww, cb9[r6.w + 2].xzxx, cb9[r6.w + 2].ywyy
      mul r36.zw, r36.xxxy, r36.xxxy
      mad r36.xy, r36.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r36.xy, r36.xyxx, r36.zwzz
      mul r12.w, r12.w, r36.x
      mul r12.w, r36.y, r12.w
      lt r14.w, l(0.000000), r12.w
      if_nz r14.w
        ubfe r14.w, l(3), l(27), cb9[r6.w + 1].w
        and r17.w, r7.w, l(15)
        iadd r18.w, r17.w, l(-1)
        ult r18.w, r18.w, l(32)
        and r18.w, r2.z, r18.w
        if_nz r18.w
          imad r36.xy, r17.wwww, l(24, 24, 0, 0), l(88, 104, 0, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.w, cb2[52].x, r36.x, u2.xxxx
          or r17.w, r17.w, l(4)
          store_structured u2.x, cb2[52].x, r36.x, r17.w
          store_structured u2.x, cb2[52].x, r36.y, r12.w
        endif 
        iadd r17.w, r3.w, l(257)
        ine r14.w, r14.w, l(1)
        if_nz r14.w
          mad r14.w, |r13.z|, l(-0.200000), l(0.400000)
          mad r36.xyz, r11.xyzx, r14.wwww, r5.xyzx
          add r36.xyz, r36.xyzx, -cb9[r6.w + 4].yzwy
          max r14.w, |r36.z|, |r36.y|
          max r14.w, r14.w, |r36.x|
          div r14.w, cb9[r6.w + 5].x, r14.w
          add r14.w, r14.w, cb9[r6.w + 5].y
          dp3 r18.w, r36.xyzx, r36.xyzx
          rsq r18.w, r18.w
          max r14.w, r14.w, l(0.00006104)
          and r19.w, l(0x0000ffff), cb9[r6.w + 1].w
          utof r37.w, r19.w
          mov r19.w, l(0)
          mov r25.w, l(0)
          loop 
            ige r29.w, r25.w, l(8)
            breakc_nz r29.w
            dp2 r38.y, icb[r25.w + 0].yxyy, r20.xyxx
            dp2 r38.z, icb[r25.w + 0].yxyy, r20.yzyy
            mul r38.yz, r38.yyzy, cb9[r6.w + 3].yyyy
            mul r38.x, r16.x, r38.y
            mul r38.w, r15.x, r38.y
            mad r37.xyz, r36.xyzx, r18.wwww, r38.xzwx
            sample_c_lz_indexable(texturecubearray)(float,float,float,float) r29.w, r37.xyzw, t10.xxxx, s13, r14.w
            mad r19.w, r29.w, l(0.125000), r19.w
            iadd r25.w, r25.w, l(1)
          endloop 
        else 
          mov r19.w, l(1.000000)
        endif 
        mul r12.w, r12.w, r19.w
        lt r14.w, l(0.000000), r12.w
        if_nz r14.w
          mul r14.w, r1.z, cb9[r6.w + 1].z
          mul r14.w, r14.w, l(0.250000)
          dp3 r18.w, r34.xyzx, r17.xyzx
          dp3 r25.w, r17.xyzx, r35.xyzx
          mad r29.w, -r18.w, r18.w, cb9[r6.w + 6].y
          mad r10.w, r18.w, r25.w, -r10.w
          div_sat r10.w, r10.w, r29.w
          div r18.w, r29.w, cb9[r6.w + 6].y
          mul r18.w, r18.w, l(10.000000)
          min r18.w, r18.w, l(1.000000)
          add r10.w, -r11.w, r10.w
          mad r10.w, r18.w, r10.w, r11.w
          mad r21.yzw, r10.wwww, r34.xxyz, r21.yyzw
          movc r21.yzw, r8.wwww, r21.yyzw, cb9[r6.w + 0].xxyz
          add r21.yzw, -r5.xxyz, r21.yyzw
          dp3 r8.w, r21.yzwy, r21.yzwy
          rsq r8.w, r8.w
          mul r34.xyz, r8.wwww, r21.yzwy
          ubfe r10.w, l(4), l(16), cb9[r6.w + 1].w
          ult r11.w, l(0), r10.w
          and r11.w, r3.x, r11.w
          if_nz r11.w
            iadd r10.w, r10.w, cb2[0].x
            imad r10.w, r10.w, l(15), l(-15)
            mad r11.w, |r13.z|, l(-0.200000), l(0.400000)
            mad r23.xyz, r11.xyzx, r11.wwww, r5.xyzx
            mov r35.xyz, cb9[r10.w + 6].yzwy
            mov r35.w, cb9[r10.w + 7].x
            dp4 r11.w, r35.xyzw, r23.xyzw
            mov r35.xyz, cb9[r10.w + 7].yzwy
            mov r35.w, cb9[r10.w + 8].x
            dp4 r18.w, r35.xyzw, r23.xyzw
            lt r25.w, r18.w, r11.w
            if_z r25.w
              mov r35.xyz, cb9[r10.w + 4].yzwy
              mov r35.w, cb9[r10.w + 5].x
              dp4 r35.x, r35.xyzw, r23.xyzw
              mov r36.xyz, cb9[r10.w + 5].yzwy
              mov r36.w, cb9[r10.w + 6].x
              dp4 r35.y, r36.xyzw, r23.xyzw
              div r23.xy, r35.xyxx, r18.wwww
              mad r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r35.x, r23.x, cb9[r10.w + 9].w
              add r35.y, r23.y, cb9[r10.w + 10].x
              mul r23.xy, r35.xyxx, cb9[r10.w + 9].yzyy
              div r35.xy, cb9[r10.w + 3].yyyy, cb9[r10.w + 8].ywyy
              add r35.zw, -r35.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              ge r35.zw, r23.xxxy, r35.zzzw
              ge r35.xy, r35.xyxx, r23.xyxx
              or r35.xy, r35.xyxx, r35.zwzz
              or r23.z, r35.y, r35.x
              if_z r23.z
                mov_sat r23.xy, r23.xyxx
                mad r35.x, r23.x, cb9[r10.w + 8].y, cb9[r10.w + 8].z
                mad r35.y, r23.y, cb9[r10.w + 8].w, cb9[r10.w + 9].x
                mul r23.x, r18.w, cb9[r10.w + 10].z
                mad r11.w, cb9[r10.w + 10].y, r18.w, r11.w
                div r11.w, r11.w, r23.x
              endif 
            else 
              mov r23.z, l(-1)
            endif 
            or r18.w, r25.w, r23.z
            if_z r18.w
              max r11.w, r11.w, l(0.00006104)
              and r18.w, l(0x0000ffff), cb9[r10.w + 1].w
              if_nz cb2[58].y
                utof r23.z, r18.w
                mov r25.w, l(0)
                mov r29.w, l(0)
                loop 
                  ige r30.w, r29.w, l(8)
                  breakc_nz r30.w
                  dp2 r36.x, icb[r29.w + 0].yxyy, r20.xwxx
                  dp2 r36.y, icb[r29.w + 0].xyxx, r13.xyxx
                  mad r23.xy, r36.xyxx, cb9[r10.w + 3].yyyy, r35.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r11.w
                  mad r25.w, r23.x, l(0.125000), r25.w
                  iadd r29.w, r29.w, l(1)
                endloop 
              else 
                utof r35.z, r18.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.w, r35.xyzx, t9.xxxx, s13, r11.w
              endif 
              mul r10.w, r25.w, r25.w
              mul r10.w, r25.w, r10.w
            else 
              mov r10.w, l(1.000000)
            endif 
            mul r12.w, r10.w, r12.w
          else 
            ubfe r10.w, l(4), l(20), cb9[r6.w + 1].w
            ult r11.w, l(0), r10.w
            and r11.w, r3.y, r11.w
            if_nz r11.w
              iadd r10.w, r10.w, cb2[0].x
              imad r10.w, r10.w, l(15), l(-15)
              mad r11.w, |r13.z|, l(-0.200000), l(0.400000)
              mad r24.xyz, r11.xyzx, r11.wwww, r5.xyzx
              mov r35.xyz, cb9[r10.w + 6].yzwy
              mov r35.w, cb9[r10.w + 7].x
              dp4 r11.w, r35.xyzw, r24.xyzw
              mov r35.xyz, cb9[r10.w + 7].yzwy
              mov r35.w, cb9[r10.w + 8].x
              dp4 r18.w, r35.xyzw, r24.xyzw
              lt r23.x, r18.w, r11.w
              if_z r23.x
                mov r35.xyz, cb9[r10.w + 4].yzwy
                mov r35.w, cb9[r10.w + 5].x
                dp4 r35.x, r35.xyzw, r24.xyzw
                mov r36.xyz, cb9[r10.w + 5].yzwy
                mov r36.w, cb9[r10.w + 6].x
                dp4 r35.y, r36.xyzw, r24.xyzw
                div r23.yz, r35.xxyx, r18.wwww
                mad r23.yz, r23.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r24.x, r23.y, cb9[r10.w + 9].w
                add r24.y, r23.z, cb9[r10.w + 10].x
                mul r23.yz, r24.xxyx, cb9[r10.w + 9].yyzy
                div r24.xy, cb9[r10.w + 3].yyyy, cb9[r10.w + 8].ywyy
                add r35.xy, -r24.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r35.xy, r23.yzyy, r35.xyxx
                ge r24.xy, r24.xyxx, r23.yzyy
                or r24.xy, r24.xyxx, r35.xyxx
                or r24.x, r24.y, r24.x
                if_z r24.x
                  mov_sat r23.yz, r23.yyzy
                  mad r35.x, r23.y, cb9[r10.w + 8].y, cb9[r10.w + 8].z
                  mad r35.y, r23.z, cb9[r10.w + 8].w, cb9[r10.w + 9].x
                  mul r23.y, r18.w, cb9[r10.w + 10].z
                  mad r11.w, cb9[r10.w + 10].y, r18.w, r11.w
                  div r11.w, r11.w, r23.y
                endif 
              else 
                mov r24.x, l(-1)
              endif 
              or r18.w, r23.x, r24.x
              if_z r18.w
                max r11.w, r11.w, l(0.00006104)
                and r18.w, l(0x0000ffff), cb9[r10.w + 1].w
                if_nz cb2[58].y
                  utof r23.z, r18.w
                  mov r24.xy, l(0,0,0,0)
                  loop 
                    ige r24.z, r24.y, l(8)
                    breakc_nz r24.z
                    dp2 r36.x, icb[r24.y + 0].xyxx, r14.xyxx
                    dp2 r36.y, icb[r24.y + 0].yxyy, r14.xzxx
                    mad r23.xy, r36.xyxx, cb9[r10.w + 3].yyyy, r35.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r11.w
                    mad r24.x, r23.x, l(0.125000), r24.x
                    iadd r24.y, r24.y, l(1)
                  endloop 
                else 
                  utof r35.z, r18.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r35.xyzx, t9.xxxx, s13, r11.w
                endif 
                mul r10.w, r24.x, r24.x
                mul r10.w, r24.x, r10.w
              else 
                mov r10.w, l(1.000000)
              endif 
              mul r12.w, r10.w, r12.w
            endif 
          endif 
          mad r10.w, -r13.w, r2.x, l(1.000000)
          mul r10.w, r10.w, r10.w
          mad r10.w, -r10.w, l(0.620000), l(0.620000)
          add r10.w, -r13.w, r10.w
          mad r10.w, r1.w, r10.w, r13.w
          mul r10.w, r12.w, r10.w
          mov r23.x, cb9[r6.w + 0].w
          mov r23.yz, cb9[r6.w + 1].xxyx
          lt r11.w, l(0.000000), r13.z
          mad r35.xyz, r10.wwww, r23.xyzx, r16.yzwy
          dp3_sat r10.w, r11.xyzx, r34.xyzx
          mad r21.yzw, r21.yyzw, r8.wwww, r12.xxyz
          dp3 r8.w, r21.yzwy, r21.yzwy
          rsq r8.w, r8.w
          mul r21.yzw, r8.wwww, r21.yyzw
          dp3 r8.w, r21.yzwy, r12.xyzx
          dp3 r13.z, r11.xyzx, r21.yzwy
          mad r13.w, |r13.z|, r1.z, -|r13.z|
          mad r13.z, |r13.z|, r13.w, l(1.000000)
          mad r13.w, r10.w, r2.y, r3.z
          mul r13.z, r13.z, r13.z
          mul r13.z, r13.w, r13.z
          rcp r13.z, r13.z
          mul r10.w, r14.w, r10.w
          mul r10.w, r10.w, r13.z
          mul r10.w, r12.w, r10.w
          mad r21.yzw, r10.wwww, r23.xxyz, r33.xxyz
          add_sat r8.w, -r8.w, l(1.000000)
          mul r13.z, r8.w, r8.w
          mul r13.z, r13.z, r13.z
          mul r8.w, r8.w, r13.z
          mul r8.w, r8.w, r10.w
          mad r23.xyz, r8.wwww, r23.xyzx, r32.xyzx
          movc r16.yzw, r11.wwww, r35.xxyz, r16.yyzw
          movc r32.xyz, r11.wwww, r23.xyzx, r32.xyzx
          movc r33.xyz, r11.wwww, r21.yzwy, r33.xyzx
          and r8.w, r17.w, l(15)
          iadd r10.w, r8.w, l(-1)
          ult r10.w, r10.w, l(32)
          and r10.w, r2.z, r10.w
          if_nz r10.w
            imad r13.zw, r8.wwww, l(0, 0, 24, 24), l(0, 0, 88, 108)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r8.w, cb2[52].x, r13.z, u2.xxxx
            or r8.w, r8.w, l(8)
            store_structured u2.x, cb2[52].x, r13.z, r8.w
            store_structured u2.x, cb2[52].x, r13.w, r12.w
          endif 
          iadd r3.w, r3.w, l(0x00010101)
        else 
          mov r3.w, r17.w
        endif 
      else 
        mov r3.w, r7.w
      endif 
    else 
      mov r3.w, r7.w
    endif 
    break 
    case l(2)
    if_nz r2.z
      and r7.w, r3.w, l(7)
      imad r7.w, r7.w, l(24), l(112)
      add r22.yzw, cb1[24].xxyz, cb9[r6.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r7.w, r22.xyzw
    endif 
    iadd r7.w, r3.w, l(1)
    add r23.xy, -r5.xyxx, cb9[r6.w + 3].zwzz
    add r23.z, -r5.z, cb9[r6.w + 4].x
    dp3 r8.w, r23.xyzx, r23.xyzx
    rsq r8.w, r8.w
    mul r21.yzw, r8.wwww, r23.xxyz
    dp3 r10.w, r11.xyzx, r21.yzwy
    mov_sat r11.w, r10.w
    lt r12.w, l(0.000000), r11.w
    if_nz r12.w
      mov r34.xyz, cb9[r6.w + 7].yzwy
      mov r34.w, cb9[r6.w + 8].x
      dp4 r12.w, r34.xyzw, r5.xyzw
      lt r13.z, r12.w, l(1.000000)
      if_nz r13.z
        mov r21.yzw, l(0,1.000000,1.000000,1.000000)
        mov r13.z, l(0)
      else 
        add r22.yzw, -r5.xxyz, cb9[r6.w + 0].xxyz
        mul r13.w, cb9[r6.w + 3].x, cb9[r6.w + 3].x
        dp3 r14.w, r22.yzwy, r22.yzwy
        div r13.w, r13.w, r14.w
        min r13.w, r13.w, l(1.000000)
        mad_sat r22.yz, r12.wwww, cb9[r6.w + 2].xxzx, cb9[r6.w + 2].yywy
        mul r24.yz, r22.yyzy, r22.yyzy
        mad r22.yz, r22.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
        mul r22.yz, r22.yyzy, r24.yyzy
        mul r13.w, r13.w, r22.y
        mul r13.w, r22.z, r13.w
        mov r35.xyz, cb9[r6.w + 4].yzwy
        mov r35.w, cb9[r6.w + 5].x
        dp4 r35.x, r35.xyzw, r5.xyzw
        mov r36.xyz, cb9[r6.w + 5].yzwy
        mov r36.w, cb9[r6.w + 6].x
        dp4 r35.y, r36.xyzw, r5.xyzw
        div r25.xy, r35.xyxx, r12.wwww
        lt r12.w, cb9[r6.w + 10].w, l(0.00048828)
        if_nz r12.w
          mad_sat r22.yz, |r25.xxyx|, cb9[r6.w + 12].xxyx, cb9[r6.w + 12].zzwz
          mul r24.yz, r22.yyzy, r22.yyzy
          mad r22.yz, r22.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
          mul r22.yz, r22.yyzy, r24.yyzy
          mul r12.w, r22.z, r22.y
        else 
          mul_sat r35.xyzw, |r25.yyxx|, cb9[r6.w + 11].xyzw
          log r35.xyzw, r35.xyzw
          mul r35.xyzw, r35.xyzw, cb9[r6.w + 12].zzzz
          exp r35.xyzw, r35.xyzw
          add r22.yz, r35.zzwz, r35.xxyx
          log r22.yz, r22.yyzy
          mul r22.yz, r22.yyzy, cb9[r6.w + 12].wwww
          exp r22.yz, r22.yyzy
          mul r14.w, r22.y, cb9[r6.w + 12].x
          mad r17.w, cb9[r6.w + 12].y, r22.z, l(-1.000000)
          mad r14.w, cb9[r6.w + 12].y, r22.z, -r14.w
          div_sat r14.w, r17.w, r14.w
          mul r17.w, r14.w, r14.w
          mad r14.w, r14.w, l(-2.000000), l(3.000000)
          mul r12.w, r14.w, r17.w
        endif 
        mul r13.z, r12.w, r13.w
        and r12.w, l(255), cb9[r6.w + 14].w
        if_nz r12.w
          dp3 r13.w, cb9[r6.w + 13].xyzx, r25.xyzx
          mov r35.x, cb9[r6.w + 13].w
          mov r35.yz, cb9[r6.w + 14].xxyx
          dp3 r14.w, r35.xyzx, r25.xyzx
          frc r35.x, r13.w
          frc r35.y, r14.w
          iadd r12.w, r12.w, l(-1)
          utof r35.z, r12.w
          sample_l_indexable(texture2darray)(float,float,float,float) r21.yzw, r35.xyzx, t20.wxyz, s2, l(0.000000)
        else 
          mov r21.yzw, l(0,1.000000,1.000000,1.000000)
        endif 
      endif 
      mov r35.x, cb9[r6.w + 0].w
      mov r35.yz, cb9[r6.w + 1].xxyx
      mul r21.yzw, r21.yyzw, r35.xxyz
      lt r12.w, l(0.000000), r13.z
      if_nz r12.w
        ubfe r12.w, l(3), l(27), cb9[r6.w + 1].w
        and r13.w, r7.w, l(15)
        iadd r14.w, r13.w, l(-1)
        ult r14.w, r14.w, l(32)
        and r14.w, r2.z, r14.w
        if_nz r14.w
          imad r22.yz, r13.wwww, l(0, 24, 24, 0), l(0, 88, 104, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r13.w, cb2[52].x, r22.y, u2.xxxx
          or r13.w, r13.w, l(4)
          store_structured u2.x, cb2[52].x, r22.y, r13.w
          store_structured u2.x, cb2[52].x, r22.z, r13.z
        endif 
        iadd r13.w, r3.w, l(257)
        ine r12.w, r12.w, l(1)
        if_nz r12.w
          mad r12.w, |r10.w|, l(-0.200000), l(0.400000)
          mad r26.xyz, r11.xyzx, r12.wwww, r5.xyzx
          mov r35.xyz, cb9[r6.w + 6].yzwy
          mov r35.w, cb9[r6.w + 7].x
          dp4 r12.w, r35.xyzw, r26.xyzw
          dp4 r14.w, r34.xyzw, r26.xyzw
          ge r17.w, r14.w, r12.w
          if_nz r17.w
            mov r34.xyz, cb9[r6.w + 4].yzwy
            mov r34.w, cb9[r6.w + 5].x
            dp4 r25.x, r34.xyzw, r26.xyzw
            mov r34.xyz, cb9[r6.w + 5].yzwy
            mov r34.w, cb9[r6.w + 6].x
            dp4 r25.y, r34.xyzw, r26.xyzw
            div r22.yz, r25.xxyx, r14.wwww
            mad_sat r22.yz, r22.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
            mad r26.x, r22.y, cb9[r6.w + 8].y, cb9[r6.w + 8].z
            mad r26.y, r22.z, cb9[r6.w + 8].w, cb9[r6.w + 9].x
            div r12.w, r12.w, r14.w
            max r12.w, r12.w, l(0.00006104)
            and r14.w, l(0x0000ffff), cb9[r6.w + 1].w
            if_nz cb2[58].y
              utof r34.z, r14.w
              mov r17.w, l(0)
              mov r18.w, l(0)
              loop 
                ige r22.y, r18.w, l(8)
                breakc_nz r22.y
                dp2 r25.x, icb[r18.w + 0].xyxx, r29.xyxx
                dp2 r25.y, icb[r18.w + 0].yxyy, r29.xzxx
                mad r34.xy, r25.xyxx, cb9[r6.w + 3].yyyy, r26.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.y, r34.xyzx, t9.xxxx, s13, r12.w
                mad r17.w, r22.y, l(0.125000), r17.w
                iadd r18.w, r18.w, l(1)
              endloop 
            else 
              utof r26.z, r14.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r26.xyzx, t9.xxxx, s13, r12.w
            endif 
            mul r12.w, r17.w, r17.w
            mul r12.w, r17.w, r12.w
          else 
            mov r12.w, l(1.000000)
          endif 
        else 
          mov r12.w, l(1.000000)
        endif 
        mul r12.w, r12.w, r13.z
        lt r13.z, l(0.000000), r12.w
        if_nz r13.z
          mul r13.z, r1.z, cb9[r6.w + 1].z
          mul r13.z, r11.w, r13.z
          ubfe r14.w, l(4), l(16), cb9[r6.w + 1].w
          ult r18.w, l(0), r14.w
          and r18.w, r3.x, r18.w
          if_nz r18.w
            iadd r14.w, r14.w, cb2[0].x
            imad r14.w, r14.w, l(15), l(-15)
            mad r18.w, |r10.w|, l(-0.200000), l(0.400000)
            mad r27.xyz, r11.xyzx, r18.wwww, r5.xyzx
            mov r34.xyz, cb9[r14.w + 6].yzwy
            mov r34.w, cb9[r14.w + 7].x
            dp4 r18.w, r34.xyzw, r27.xyzw
            mov r34.xyz, cb9[r14.w + 7].yzwy
            mov r34.w, cb9[r14.w + 8].x
            dp4 r22.y, r34.xyzw, r27.xyzw
            lt r22.z, r22.y, r18.w
            if_z r22.z
              mov r34.xyz, cb9[r14.w + 4].yzwy
              mov r34.w, cb9[r14.w + 5].x
              dp4 r25.x, r34.xyzw, r27.xyzw
              mov r34.xyz, cb9[r14.w + 5].yzwy
              mov r34.w, cb9[r14.w + 6].x
              dp4 r25.y, r34.xyzw, r27.xyzw
              div r24.yz, r25.xxyx, r22.yyyy
              mad r24.yz, r24.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
              add r25.x, r24.y, cb9[r14.w + 9].w
              add r25.y, r24.z, cb9[r14.w + 10].x
              mul r24.yz, r25.xxyx, cb9[r14.w + 9].yyzy
              div r25.xy, cb9[r14.w + 3].yyyy, cb9[r14.w + 8].ywyy
              add r26.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r26.xy, r24.yzyy, r26.xyxx
              ge r25.xy, r25.xyxx, r24.yzyy
              or r25.xy, r25.xyxx, r26.xyxx
              or r22.w, r25.y, r25.x
              if_z r22.w
                mov_sat r24.yz, r24.yyzy
                mad r26.x, r24.y, cb9[r14.w + 8].y, cb9[r14.w + 8].z
                mad r26.y, r24.z, cb9[r14.w + 8].w, cb9[r14.w + 9].x
                mul r24.y, r22.y, cb9[r14.w + 10].z
                mad r18.w, cb9[r14.w + 10].y, r22.y, r18.w
                div r18.w, r18.w, r24.y
              endif 
            else 
              mov r22.w, l(-1)
            endif 
            or r22.y, r22.z, r22.w
            if_z r22.y
              max r18.w, r18.w, l(0.00006104)
              and r22.y, l(0x0000ffff), cb9[r14.w + 1].w
              if_nz cb2[58].y
                utof r27.z, r22.y
                mov r22.zw, l(0,0,0,0)
                loop 
                  ige r24.y, r22.w, l(8)
                  breakc_nz r24.y
                  dp2 r25.x, icb[r22.w + 0].xyxx, r30.xyxx
                  dp2 r25.y, icb[r22.w + 0].yxyy, r30.xzxx
                  mad r27.xy, r25.xyxx, cb9[r14.w + 3].yyyy, r26.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.y, r27.xyzx, t9.xxxx, s13, r18.w
                  mad r22.z, r24.y, l(0.125000), r22.z
                  iadd r22.w, r22.w, l(1)
                endloop 
              else 
                utof r26.z, r22.y
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.z, r26.xyzx, t9.xxxx, s13, r18.w
              endif 
              mul r14.w, r22.z, r22.z
              mul r14.w, r22.z, r14.w
            else 
              mov r14.w, l(1.000000)
            endif 
            mul r12.w, r12.w, r14.w
          else 
            ubfe r6.w, l(4), l(20), cb9[r6.w + 1].w
            ult r14.w, l(0), r6.w
            and r14.w, r3.y, r14.w
            if_nz r14.w
              iadd r6.w, r6.w, cb2[0].x
              imad r6.w, r6.w, l(15), l(-15)
              mad r14.w, |r10.w|, l(-0.200000), l(0.400000)
              mad r28.xyz, r11.xyzx, r14.wwww, r5.xyzx
              mov r34.xyz, cb9[r6.w + 6].yzwy
              mov r34.w, cb9[r6.w + 7].x
              dp4 r14.w, r34.xyzw, r28.xyzw
              mov r34.xyz, cb9[r6.w + 7].yzwy
              mov r34.w, cb9[r6.w + 8].x
              dp4 r18.w, r34.xyzw, r28.xyzw
              lt r22.y, r18.w, r14.w
              if_z r22.y
                mov r34.xyz, cb9[r6.w + 4].yzwy
                mov r34.w, cb9[r6.w + 5].x
                dp4 r25.x, r34.xyzw, r28.xyzw
                mov r34.xyz, cb9[r6.w + 5].yzwy
                mov r34.w, cb9[r6.w + 6].x
                dp4 r25.y, r34.xyzw, r28.xyzw
                div r24.yz, r25.xxyx, r18.wwww
                mad r24.yz, r24.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r25.x, r24.y, cb9[r6.w + 9].w
                add r25.y, r24.z, cb9[r6.w + 10].x
                mul r24.yz, r25.xxyx, cb9[r6.w + 9].yyzy
                div r25.xy, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].ywyy
                add r26.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r26.xy, r24.yzyy, r26.xyxx
                ge r25.xy, r25.xyxx, r24.yzyy
                or r25.xy, r25.xyxx, r26.xyxx
                or r22.w, r25.y, r25.x
                if_z r22.w
                  mov_sat r24.yz, r24.yyzy
                  mad r26.x, r24.y, cb9[r6.w + 8].y, cb9[r6.w + 8].z
                  mad r26.y, r24.z, cb9[r6.w + 8].w, cb9[r6.w + 9].x
                  mul r24.y, r18.w, cb9[r6.w + 10].z
                  mad r14.w, cb9[r6.w + 10].y, r18.w, r14.w
                  div r14.w, r14.w, r24.y
                endif 
              else 
                mov r22.w, l(-1)
              endif 
              or r18.w, r22.y, r22.w
              if_z r18.w
                max r14.w, r14.w, l(0.00006104)
                and r18.w, l(0x0000ffff), cb9[r6.w + 1].w
                if_nz cb2[58].y
                  utof r27.z, r18.w
                  mov r22.yw, l(0,0,0,0)
                  loop 
                    ige r24.y, r22.w, l(8)
                    breakc_nz r24.y
                    dp2 r25.x, icb[r22.w + 0].xyxx, r31.xyxx
                    dp2 r25.y, icb[r22.w + 0].yxyy, r31.xzxx
                    mad r27.xy, r25.xyxx, cb9[r6.w + 3].yyyy, r26.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.y, r27.xyzx, t9.xxxx, s13, r14.w
                    mad r22.y, r24.y, l(0.125000), r22.y
                    iadd r22.w, r22.w, l(1)
                  endloop 
                else 
                  utof r26.z, r18.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.y, r26.xyzx, t9.xxxx, s13, r14.w
                endif 
                mul r6.w, r22.y, r22.y
                mul r6.w, r22.y, r6.w
              else 
                mov r6.w, l(1.000000)
              endif 
              mul r12.w, r6.w, r12.w
            endif 
          endif 
          mad r6.w, -r11.w, r2.x, l(1.000000)
          mul r6.w, r6.w, r6.w
          mad r6.w, -r6.w, l(0.620000), l(0.620000)
          add r6.w, -r11.w, r6.w
          mad r6.w, r1.w, r6.w, r11.w
          mul r6.w, r12.w, r6.w
          lt r10.w, l(0.000000), r10.w
          mad r26.xyz, r6.wwww, r21.yzwy, r16.yzwy
          mad r23.xyz, r23.xyzx, r8.wwww, r12.xyzx
          dp3 r6.w, r23.xyzx, r23.xyzx
          rsq r6.w, r6.w
          mul r23.xyz, r6.wwww, r23.xyzx
          dp3 r6.w, r23.xyzx, r12.xyzx
          dp3 r8.w, r11.xyzx, r23.xyzx
          mad r14.w, |r8.w|, r1.z, -|r8.w|
          mad r8.w, |r8.w|, r14.w, l(1.000000)
          mad r11.w, r11.w, r2.y, r3.z
          mul r8.w, r8.w, r8.w
          mul r8.w, r11.w, r8.w
          rcp r8.w, r8.w
          mul r8.w, r13.z, r8.w
          mul r8.w, r8.w, r12.w
          mul r8.w, r8.w, l(0.250000)
          mad r23.xyz, r8.wwww, r21.yzwy, r33.xyzx
          add_sat r6.w, -r6.w, l(1.000000)
          mul r11.w, r6.w, r6.w
          mul r11.w, r11.w, r11.w
          mul r6.w, r6.w, r11.w
          mul r6.w, r6.w, r8.w
          mad r21.yzw, r6.wwww, r21.yyzw, r32.xxyz
          movc r16.yzw, r10.wwww, r26.xxyz, r16.yyzw
          movc r32.xyz, r10.wwww, r21.yzwy, r32.xyzx
          movc r33.xyz, r10.wwww, r23.xyzx, r33.xyzx
          and r6.w, r13.w, l(15)
          iadd r8.w, r6.w, l(-1)
          ult r8.w, r8.w, l(32)
          and r8.w, r2.z, r8.w
          if_nz r8.w
            imad r21.yz, r6.wwww, l(0, 24, 24, 0), l(0, 88, 108, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r6.w, cb2[52].x, r21.y, u2.xxxx
            or r6.w, r6.w, l(8)
            store_structured u2.x, cb2[52].x, r21.y, r6.w
            store_structured u2.x, cb2[52].x, r21.z, r12.w
          endif 
          iadd r3.w, r3.w, l(0x00010101)
        else 
          mov r3.w, r13.w
        endif 
      else 
        mov r3.w, r7.w
      endif 
    else 
      mov r3.w, r7.w
    endif 
    break 
    default 
    break 
  endswitch 
  iadd r4.z, r4.z, l(1)
endloop 
mad r4.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.x, r4.y
mad r2.xyw, r7.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r0.w, r2.x
ieq r0.w, r0.x, r0.w
movc r1.zw, r0.wwww, r2.yyyw, l(0,0,-1.000000,0)
mad r2.xyw, r8.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r0.w, r2.x
ieq r0.w, r0.x, r0.w
movc r2.xy, r0.wwww, r2.ywyy, l(-1.000000,0,0,0)
mad r3.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r3.x
ieq r0.w, r0.x, r0.w
movc r3.xy, r0.wwww, r3.yzyy, l(-1.000000,0,0,0)
mad r7.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r7.x
ieq r0.x, r0.x, r0.w
movc r0.xw, r0.xxxx, r7.yyyz, l(-1.000000,0,0,0)
mov r7.x, r1.z
mov r7.y, r2.x
mov r7.z, r3.x
mov r7.w, r0.x
add r7.xyzw, -r4.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.x, r7.y, r7.x
add r0.x, r7.z, r0.x
add r0.x, r7.w, r0.x
mul r1.z, r2.y, r7.y
mad r1.z, r7.x, r1.w, r1.z
mad r1.z, r7.z, r3.y, r1.z
mad r0.w, r7.w, r0.w, r1.z
div r4.w, r0.w, r0.x
ge r0.x, l(0.000000), r0.x
movc r4.yz, r0.xxxx, l(0,0,0,0), r4.zzwz
and r0.xw, r1.xxxy, l(1, 0, 0, 1)
ieq r0.x, r0.w, r0.x
movc r2.xyw, r0.xxxx, r4.xyxz, r4.xzxy
mad r0.x, -r2.w, l(0.500000), r2.x
add r3.y, r0.x, r2.w
mad r3.z, -r2.y, l(0.500000), r0.x
add r3.x, r2.y, r3.z
add r2.xyw, -r3.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
mul r2.xyw, r2.xyxw, r32.xyxz
mad r2.xyw, r33.xyxz, r3.xyxz, r2.xyxw
mad r2.xyw, r16.yzyw, r6.xyxz, r2.xyxw
lt r0.x, l(0.000000), cb2[9].z
if_nz r0.x
  dp3 r0.x, r5.xyzx, r5.xyzx
  rsq r0.w, r0.x
  mul r3.xyz, r0.wwww, r5.xyzx
  sqrt r0.x, r0.x
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r1.zw, r0.xxxx, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r0.w, l(0.010000), |r5.z|
    mul r4.xy, r5.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r0.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r6.xyz, r1.wwww, cb2[12].xyzx
    exp r6.xyz, r6.xyzx
    add r6.xyz, -r4.xyzx, r6.xyzx
    mad r4.xyz, cb2[13].wwww, r6.xyzx, r4.xyzx
  else 
    mad r0.w, r0.x, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r5.z|
    mul r1.w, r5.z, cb2[15].z
    mul r4.w, r1.w, l(-1.442695)
    exp r4.w, r4.w
    add r4.w, -r4.w, l(1.000000)
    div r1.w, r4.w, r1.w
    mul r1.w, r0.w, r1.w
    movc r0.w, r1.z, r1.w, r0.w
    mul r6.xyz, r0.wwww, cb2[12].xyzx
    exp r4.xyz, r6.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xyzx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r1.w, cb2[8].w, -r0.w, l(1.000000)
  mul r1.w, r1.w, r1.w
  mul r1.w, r1.w, l(12.566371)
  div r1.z, r1.z, r1.w
  add r0.x, r0.x, -cb2[10].w
  mul_sat r0.x, r0.x, cb2[11].w
  mul r0.x, r0.x, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyz, r0.xxxx, cb2[11].xyzx
  mad r3.xyz, r0.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r6.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r6.xyzx
  mad r3.xyz, r2.xywx, r4.xyzx, r3.xyzx
else 
  mul r0.x, r5.z, cb2[6].x
  mad r0.w, cb2[6].x, r5.z, cb2[5].x
  lt r1.z, |r0.x|, l(0.000100)
  min r1.w, r0.w, l(64.000000)
  mul r1.w, r1.w, l(1.442695)
  exp r1.w, r1.w
  mov_sat r4.x, cb2[6].z
  lt r4.y, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r4.y, r1.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.x, r1.z, l(1.000000), r0.x
  div r0.x, r0.w, r0.x
  movc r0.x, r1.z, r4.x, r0.x
  mul r0.x, r0.x, cb2[5].z
  dp3 r0.w, r5.xyzx, r5.xyzx
  sqrt r1.z, r0.w
  mad r0.x, r0.x, r1.z, cb2[5].w
  exp r0.x, r0.x
  min r0.x, r0.x, l(1.000000)
  add r0.x, -r0.x, l(1.000000)
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r5.xyzx
  dp3 r0.w, cb2[7].yzwy, r4.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r0.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.x, r0.x, r4.w
  add r4.xyz, -r2.xywx, r4.xyzx
  mad r3.xyz, r0.xxxx, r4.xyzx, r2.xywx
endif 
mul r2.xyw, r3.xyxz, cb1[85].yyyy
ge r3.xyz, r2.xywx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyw, r2.xyxw, r3.xyxz
min r2.xyw, r2.xyxw, l(65024.000000, 65024.000000, 0.000000, 64512.000000)
ilt r0.x, l(0), cb2[55].w
and r4.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r4.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r4.ywyy, l(3, 0, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(0)
and r0.w, r0.w, r1.z
and r3.z, r0.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xywx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xywx
movc r2.xyw, r0.xxxx, r3.xyxz, r2.xyxw
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.x, r3.w, l(7)
      break 
      case l(2)
      ubfe r0.x, l(3), l(8), r3.w
      break 
      case l(3)
      ushr r0.x, r3.w, l(16)
      break 
      case l(4)
      and r0.x, r9.w, l(255)
      break 
      case l(5)
      ubfe r0.x, l(8), l(8), r9.w
      break 
      default 
      mov r0.x, l(0)
      break 
    endswitch 
    utof r0.x, r0.x
    mul r0.x, r0.x, cb2[53].z
    mad r3.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xywx
    mad r2.xyw, cb2[53].wwww, r3.xyxz, r2.xyxw
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xywx
if_nz r2.z
  add r1.xyz, r5.xyzx, cb1[24].xyzx
  and r1.w, r3.w, l(7)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.x, r9.w, l(255)
  store_structured u2.x, cb2[52].x, l(108), r0.x
endif 
if_nz cb2[52].y
  and r0.x, r3.w, l(7)
  atomic_iadd g1, l(0), r0.x
  ubfe r0.w, l(3), l(8), r3.w
  atomic_iadd g1, l(4), r0.w
  ushr r1.x, r3.w, l(16)
  atomic_iadd g1, l(8), r1.x
  and r1.y, r9.w, l(255)
  atomic_iadd g1, l(12), r1.y
  ubfe r1.z, l(8), l(8), r9.w
  atomic_iadd g1, l(16), r1.z
  atomic_umax g2, l(0), r0.x
  atomic_umax g2, l(4), r0.w
  atomic_umax g2, l(8), r1.x
  atomic_umax g2, l(12), r1.y
  atomic_umax g2, l(16), r1.z
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.x, r1.x, l(63)
  if_nz r0.x
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.x, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.x
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.x, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.x
    ieq r0.yz, r0.yyzy, cb2[52].zzwz
    and r0.y, r0.z, r0.y
    if_nz r0.y
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.x
    endif 
  endif 
endif 
ret 
// Approximately 2520 instruction slots used
