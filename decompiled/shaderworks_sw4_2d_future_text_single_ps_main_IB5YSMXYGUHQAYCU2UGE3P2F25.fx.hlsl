// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:40:36 2021

cbuffer _Globals : register(b0)
{
  float4 flagParams : packoffset(c0);
  float4 colorObjMin : packoffset(c1);
  float4 colorObjMax : packoffset(c2);
  float colorObjMinBaseBlend : packoffset(c3);
  float colorObjMaxBaseBlend : packoffset(c3.y);
  float2 uvScroll : packoffset(c3.z);
  float4 detailScale : packoffset(c4);
  float4 detailScale1 : packoffset(c5);
  float4 detailScale2 : packoffset(c6);
  float4 detailScale3 : packoffset(c7);
  float4 alphaRevealParms : packoffset(c8);
  float4 colorDetailScale : packoffset(c9);
  float4 LightTextColor : packoffset(c10);
  float4 LightGlowColor : packoffset(c11);
  float4 LightRevealColor : packoffset(c12);
  float LightGlowIntensity : packoffset(c13);
  float Indent : packoffset(c13.y);
  float RevealScale : packoffset(c13.z);
  float4 Background : packoffset(c14);
  float4 DarkTextColor : packoffset(c15);
  float4 DarkRevealColor : packoffset(c16);
  float4 DarkGlowColor : packoffset(c17);
  float DarkGlowIntensity : packoffset(c18);
  float DarkOutlinePower : packoffset(c18.y);
  float DebugTime : packoffset(c18.z);
  float LightOutlinePower : packoffset(c18.w);
  float4 LightDisolveColor : packoffset(c19);
  float4 DarkDisolveColor : packoffset(c20);
  float RevealWidth : packoffset(c21);
  float RevealColorWidth : packoffset(c21.y);
  float2 Disolve1Direction : packoffset(c21.z);
  float2 Disolve1Scale : packoffset(c22);
  float2 Disolve2Direction : packoffset(c22.z);
  float2 Disolve2Scale : packoffset(c23);
  float4 LightTextColorOuter : packoffset(c24);
  float4 DarkTextColorOuter : packoffset(c25);
  float2 RevealDirection : packoffset(c26);
}

cbuffer GenericsCBuffer : register(b3)
{
  float4 scriptVector0 : packoffset(c0);
  float4 scriptVector1 : packoffset(c1);
  float4 scriptVector2 : packoffset(c2);
  float4 scriptVector3 : packoffset(c3);
  float4 scriptVector4 : packoffset(c4);
  float4 scriptVector5 : packoffset(c5);
  float4 scriptVector6 : packoffset(c6);
  float4 scriptVector7 : packoffset(c7);
  float4 weaponParam0 : packoffset(c8);
  float4 weaponParam1 : packoffset(c9);
  float4 weaponParam2 : packoffset(c10);
  float4 weaponParam3 : packoffset(c11);
  float4 weaponParam4 : packoffset(c12);
  float4 weaponParam5 : packoffset(c13);
  float4 weaponParam6 : packoffset(c14);
  float4 weaponParam7 : packoffset(c15);
}

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}

SamplerState FutureMap_Sampler_s : register(s1);
SamplerState ui3dSampler_C1_P0_sampler_s : register(s2);
Texture2D<float4> FutureMap : register(t0);
Texture2D<float4> ui3dSampler_C1_P0 : register(t6);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = 0.100000001 * DebugTime;
  r0.x = frac(r0.x);
  r0.y = 0.100000001 * gameTime.w;
  r0.y = frac(r0.y);
  r0.xz = float2(10,10) * r0.xy;
  r0.w = cmp(0 < DebugTime);
  r0.x = r0.w ? r0.x : r0.z;
  r0.z = 0.5 * r0.x;
  r1.x = 4 * scriptVector2.x;
  r0.z = r0.w ? r0.z : r1.x;
  r1.x = saturate(r1.x);
  r2.xy = float2(0.0009765625,0.001953125) * scriptVector0.xy;
  r3.yz = scriptVector0.wz * float2(0.001953125,0.0009765625) + -r2.yx;
  r2.y = r0.z * r3.z + r2.x;
  r0.z = cmp(0.99000001 < r0.z);
  r2.x = scriptVector1.x * 0.0009765625 + -r2.x;
  r2.z = -RevealColorWidth + r2.y;
  r2.w = r2.y + -r2.z;
  r3.zw = v0.xy / renderTargetSize.xy;
  r2.z = r3.z + -r2.z;
  r2.z = saturate(r2.z / r2.w);
  r2.z = r2.z * r2.z;
  r2.z = r2.z * r2.z;
  r2.w = 1 + -RevealDirection.x;
  r4.xy = frac(v2.zw);
  r4.x = FutureMap.SampleGrad(FutureMap_Sampler_s, r4.xy, 0, 0).y;
  r4.y = saturate(r4.x);
  r4.x = saturate(0.200000003 + r4.x);
  r4.x = r4.x * r4.x;
  r2.w = r4.y * r2.w;
  r2.w = r2.w * r2.z;
  r4.zw = max(float2(4,7), r0.xx);
  r0.x = min(2, r0.x);
  r5.x = 0.5 * r0.x;
  r4.zw = min(float2(5,8), r4.zw);
  r5.zw = float2(-4,-7) + r4.zw;
  r6.xyz = scriptVector2.yzw * scriptVector2.yzw;
  r1.yzw = r6.xyz * r6.xyz;
  r1.xyzw = r0.wwww ? r5.zwxz : r1.ywxz;
  r0.x = 1 + -Disolve1Direction.x;
  r0.x = r0.x * r4.y;
  r0.x = r0.x * r1.x;
  r3.x = 1;
  r5.xz = v1.yx * r3.yx;
  r5.w = scriptVector0.y * 0.001953125 + r5.x;
  r3.xy = r5.zw * ui3dUVSetup4.xy + ui3dUVSetup4.zw;
  r0.w = scriptVector3.x * Indent;
  r4.z = 0.5 * r0.w;
  r4.w = 0;
  r5.yw = -r4.wz + r3.yx;
  r0.x = r0.x * Disolve1Scale.x + r5.w;
  r5.z = r2.w * RevealScale + r0.x;
  r0.xw = saturate(r5.zy);
  r0.x = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r0.xw).w;
  r0.w = cmp(scriptVector1.z == 0.000000);
  r6.xyzw = r0.wwww ? LightTextColor.xyzw : DarkTextColor.xyzw;
  r7.xyz = r0.www ? LightTextColorOuter.xyz : DarkTextColorOuter.xyz;
  r8.xyz = -r7.xyz + r6.xyz;
  r7.xyz = r0.xxx * r8.xyz + r7.xyz;
  r8.xyz = r0.www ? LightRevealColor.xyz : DarkRevealColor.xyz;
  r9.xyz = r8.xyz + -r7.xyz;
  r7.xyz = r2.zzz * r9.xyz + r7.xyz;
  r2.z = log2(r2.z);
  r2.z = 0.100000001 * r2.z;
  r2.z = exp2(r2.z);
  r2.z = dot(r2.zz, r4.xx);
  r4.xzw = r8.xyz + -r7.xyz;
  r4.xzw = float3(0.600000024,0.600000024,0.600000024) * r4.xzw;
  r4.xzw = r2.zzz * r4.xzw + r7.xyz;
  r7.xyz = r0.www ? LightDisolveColor.xyz : DarkDisolveColor.xyz;
  r8.xyz = r7.xyz + -r4.xzw;
  r2.z = r4.y * r4.y;
  r2.z = r2.z * r2.z;
  r2.w = r2.z * r1.x;
  r8.xyz = r2.www * r8.xyz + r4.xzw;
  r8.xyz = r0.zzz ? r8.xyz : r4.xzw;
  r0.z = r3.z + -r2.y;
  r0.y = r3.w + r0.y;
  r3.y = frac(r0.y);
  r0.y = saturate(r0.z / RevealWidth);
  r0.y = 1 + -r0.y;
  r8.w = r0.x * r0.y;
  r9.xyzw = float4(0.5,0.5,0.5,0) + -r8.xyzw;
  r8.xyzw = r1.xxxx * r9.xyzw + r8.xyzw;
  r0.xy = float2(1,1) + -Disolve2Direction.xy;
  r0.xy = r0.xy * r4.yy;
  r1.yz = float2(4,10) * r1.yz;
  r1.yz = min(float2(1,1), r1.yz);
  r0.xy = r1.yy * r0.xy;
  r0.z = min(1, r1.w);
  r1.x = log2(r1.x);
  r1.x = 0.25 * r1.x;
  r1.x = exp2(r1.x);
  r1.w = r0.z * -2 + 3;
  r2.y = r0.z * r0.z;
  r0.z = 1 + -r0.z;
  r1.w = r2.y * r1.w;
  r5.x = r1.w * r2.x + r5.w;
  r0.xy = saturate(r0.xy * Disolve2Scale.xy + r5.xy);
  r2.xy = float2(0.0009765625,0.0009765625) * scriptVector1.xy;
  r1.w = cmp(r2.x < r0.x);
  r2.x = cmp(r0.x < r2.y);
  r0.x = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r0.xy).w;
  r4.xyzw = r6.xyzw * r0.xxxx + float4(-0.5,-0.5,-0.5,-0);
  r0.x = r1.w ? r2.x : 0;
  r0.x = (int)r0.x & 0x3f800000;
  r4.xyzw = r0.xxxx * r4.xyzw + float4(0.5,0.5,0.5,0);
  r2.xyw = r7.xyz + -r4.xyz;
  r2.xyz = r2.zzz * r2.xyw + r4.xyz;
  r2.w = 0;
  r2.xyzw = r2.xyzw + -r4.xyzw;
  r2.xyzw = r1.yyyy * r2.xyzw + r4.xyzw;
  r0.x = r2.w * r1.x + r8.w;
  r0.x = log2(r0.x);
  r0.x = 0.200000003 * r0.x;
  r0.x = exp2(r0.x);
  r3.x = 0.200000003;
  r0.y = FutureMap.SampleGrad(FutureMap_Sampler_s, r3.xy, 0, 0).z;
  r0.y = -0.5 + r0.y;
  r5.x = r0.y * 0.0500000007 + r5.w;
  r3.xy = cmp(r5.xy < float2(0,0));
  r0.y = (int)r3.y | (int)r3.x;
  r3.xy = cmp(float2(1,1) < r5.xy);
  r1.w = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r5.xy).w;
  r0.y = (int)r0.y | (int)r3.x;
  r0.y = (int)r3.y | (int)r0.y;
  r3.xy = v2.xy + v2.xy;
  r3.xy = frac(r3.xy);
  r3.x = FutureMap.SampleGrad(FutureMap_Sampler_s, r3.xy, 0, 0).y;
  r0.z = r3.x * r0.z;
  r3.x = r0.w ? LightGlowIntensity : DarkGlowIntensity;
  r0.z = saturate(r3.x * r0.z);
  r1.y = 1 + -r1.y;
  r0.z = r1.y * r0.z;
  r0.z = r0.z * r1.w;
  r3.w = r0.y ? 0 : r0.z;
  r0.y = log2(r3.w);
  r0.y = 0.300000012 * r0.y;
  r0.y = exp2(r0.y);
  r4.xyz = r0.www ? LightGlowColor.xyz : DarkGlowColor.xyz;
  r0.z = r0.w ? LightOutlinePower : DarkOutlinePower;
  r4.xyz = -scriptVector1.zzz + r4.xyz;
  r3.xyz = r0.yyy * r4.xyz + scriptVector1.zzz;
  r3.xyzw = r3.xyzw * r1.zzzz;
  r3.xyzw = r0.xxxx * -r3.xyzw + r3.xyzw;
  r0.xyw = r8.xyz + -r3.xyz;
  r1.y = log2(r8.w);
  r1.z = saturate(r3.w + r8.w);
  r4.w = saturate(r2.w * r1.x + r1.z);
  r1.x = r2.w * r1.x;
  r1.x = log2(r1.x);
  r1.x = r1.x * r0.z;
  r0.z = r1.y * r0.z;
  r0.z = exp2(r0.z);
  r0.xyz = r0.zzz * r0.xyw + r3.xyz;
  r0.w = exp2(r1.x);
  r1.xyz = float3(1,1,1);
  r1.xyz = r2.xyz * r1.xyz + -r0.xyz;
  r4.xyz = r0.www * r1.xyz + r0.xyz;
  r0.xyz = -Background.xyz + r4.xyz;
  r0.xyz = r4.www * r0.xyz + Background.xyz;
  r1.x = cmp(0.800000012 < Background.w);
  r0.w = 1;
  r0.xyzw = r1.xxxx ? r0.xyzw : r4.xyzw;
  o0.xyz = r0.xyz * r0.www;
  o0.w = r0.w;
  return;
}