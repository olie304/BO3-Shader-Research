//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:52 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 41
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(31), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.zw, r0.xxxy, l(0, 0, 4095, 4095)
imad r1.xy, r0.zwzz, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r3.x, r3.y, r3.x
lt r3.y, l(0.000000), r2.z
and r3.x, r3.y, r3.x
if_z r3.x
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.yz, r1.xxyx
add r5.xy, r3.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r5.zw, r5.xxxy, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r3.w, r5.zwzz, t27.yzwx, s4, l(0.000000)
mul r3.w, r3.w, r4.z
if_nz cb2[55].x
  mul r4.z, r3.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r4.zzzz
  ret 
else 
  movc r4.z, cb2[54].w, r3.w, l(1.000000)
endif 
ge r3.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.z, r1.xyww, t4.yzxw
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
ge r11.x, r5.z, l(0.984375)
mul r1.z, r5.z, l(1.01587307)
mad r1.w, r5.z, l(64.000000), l(-63.000000)
movc r1.z, r11.x, r1.w, r1.z
max r1.z, r1.z, l(0.00000001)
rcp r11.y, r1.z
and r1.zw, r3.xxxx, r11.xxxy
add r5.xy, r5.xyxx, -cb1[71].xyxx
mul r5.xy, r5.xyxx, cb1[44].zwzz
mad r5.xy, r5.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r11.x, r5.x, cb1[12].x
mul r11.y, r5.y, cb1[13].y
mov r11.z, l(1.000000)
mul r5.xyz, r1.wwww, r11.xyzx
mul r11.xyz, r5.yyyy, cb1[17].xyzx
mad r5.xyw, r5.xxxx, cb1[16].xyxz, r11.xyxz
mad r5.xyz, r5.zzzz, cb1[18].xyzx, r5.xywx
mad r1.w, r2.w, l(3.000000), l(0.500000)
ftou r1.w, r1.w
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r11.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r11.z
mul r11.xy, r2.wwww, r2.xyxx
and r12.xyzw, r1.wwww, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.w, r12.w, r12.z
movc r12.z, r1.w, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r1.w, r3.w, l(-0.500000), l(-0.00146628)
add r1.w, r1.w, r2.z
mul_sat r2.y, r1.w, l(2.00982332)
dp3 r1.w, -r5.xyzx, -r5.xyzx
rsq r1.w, r1.w
mul r12.xyz, r1.wwww, -r5.xyzx
dp2 r1.w, r3.yzyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r3.x, r13.x, r1.w
utof r2.zw, r1.yyyx
dp2 r1.w, r2.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r14.x, r15.x, r1.w
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.w, -r12.xyzx, r11.xyzx
add r1.w, r1.w, r1.w
mad r16.xyz, r11.xyzx, -r1.wwww, -r12.xyzx
mul r1.w, r2.y, l(17.000000)
exp r1.w, r1.w
add r1.w, r1.w, l(2.000000)
div r1.w, l(2.000000), r1.w
sqrt r2.z, r1.w
mul r14.yz, cb1[44].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
ftou r14.yz, r14.yyzy
ieq r14.yz, r1.xxyx, r14.yyzy
and r2.w, r14.z, r14.y
add r3.z, -r2.y, l(1.000000)
mul r6.w, r3.z, l(5.000000)
mad r7.w, r3.z, l(5.000000), l(-2.500000)
mul r7.w, r7.w, l(0.400000)
max r7.w, r7.w, l(0.000000)
mul r7.w, r7.w, l(100.000000)
mad r14.yz, -r3.zzzz, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r8.w, r14.y
mul r8.w, r2.x, r8.w
mul r8.w, r8.w, l(9.136810)
mul r9.w, r3.z, r6.w
mad r9.w, -r9.w, l(2.015905), r14.z
exp r9.w, r9.w
mul r9.w, r2.x, r9.w
mul r9.w, r9.w, l(9.708090)
max r8.w, r8.w, r9.w
max r8.w, r8.w, l(1.268160)
iadd r9.w, cb2[0].y, -cb2[58].x
ushr r14.yz, r0.yyxy, l(0, 24, 24, 0)
ubfe r0.xy, l(10, 10, 0, 0), l(12, 12, 0, 0), r0.yxyy
mov r17.x, l(16)
mov r18.yz, l(0,0,1.000000,0)
mov r19.xy, l(0,0,0,0)
mov r20.xz, l(1.000000,0,1.000000,0)
mov r21.xy, l(0,0,0,0)
mov r22.xy, l(0,0,0,0)
mov r23.xyzw, l(0,0,0,0)
mov r24.xyzw, l(0,0,0,0)
mov r10.w, l(0)
loop 
  ieq r12.w, r10.w, l(2)
  breakc_nz r12.w
  movc r12.w, r10.w, r0.x, r14.y
  uge r13.w, r12.w, r9.w
  ult r14.w, r12.w, cb2[0].y
  and r13.w, r13.w, r14.w
  if_nz r13.w
    imul null, r12.w, r12.w, l(14)
    if_nz r2.w
      and r13.w, r24.w, l(3)
      imad r13.w, r13.w, l(20), l(880)
      add r17.yzw, cb1[24].xxyz, cb10[r12.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r13.w, r17.xyzw
    endif 
    iadd r25.w, r24.w, l(1)
    add r15.yzw, r5.xxyz, -cb10[r12.w + 0].xxyz
    and r13.w, l(0x0000ffff), cb10[r12.w + 7].z
    ubfe r14.w, l(6), l(25), cb10[r12.w + 7].z
    imul null, r17.y, r13.w, l(6)
    dp3 r17.z, cb11[r17.y + 0].xyzx, r15.yzwy
    add_sat r17.z, r17.z, cb11[r17.y + 0].w
    dp3 r17.w, cb11[r17.y + 1].xyzx, r15.yzwy
    add_sat r17.w, r17.w, cb11[r17.y + 1].w
    mul r17.z, r17.w, r17.z
    dp3 r17.w, cb11[r17.y + 2].xyzx, r15.yzwy
    add_sat r17.w, r17.w, cb11[r17.y + 2].w
    mul r17.z, r17.w, r17.z
    dp3 r17.w, cb11[r17.y + 3].xyzx, r15.yzwy
    add_sat r17.w, r17.w, cb11[r17.y + 3].w
    mul r17.z, r17.w, r17.z
    dp3 r17.w, cb11[r17.y + 4].xyzx, r15.yzwy
    add_sat r17.w, r17.w, cb11[r17.y + 4].w
    mul r17.z, r17.w, r17.z
    dp3 r17.w, cb11[r17.y + 5].xyzx, r15.yzwy
    add_sat r17.y, r17.w, cb11[r17.y + 5].w
    mul r18.x, r17.y, r17.z
    and r17.y, l(1), cb10[r12.w + 6].x
    movc r17.yz, r17.yyyy, r18.xxyx, r18.zzxz
    mov r17.w, cb10[r12.w + 6].x
    mov r26.xy, r17.yzyy
    mov r18.x, l(1)
    loop 
      ige r18.w, r18.x, r14.w
      breakc_nz r18.w
      iadd r18.w, r13.w, r18.x
      imul null, r18.w, r18.w, l(6)
      dp3 r19.w, cb11[r18.w + 0].xyzx, r15.yzwy
      add_sat r19.w, r19.w, cb11[r18.w + 0].w
      mul r19.w, r19.w, r26.x
      dp3 r21.w, cb11[r18.w + 1].xyzx, r15.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 1].w
      mul r19.w, r19.w, r21.w
      dp3 r21.w, cb11[r18.w + 2].xyzx, r15.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 2].w
      mul r19.w, r19.w, r21.w
      dp3 r21.w, cb11[r18.w + 3].xyzx, r15.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 3].w
      mul r19.w, r19.w, r21.w
      dp3 r21.w, cb11[r18.w + 4].xyzx, r15.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 4].w
      mul r19.w, r19.w, r21.w
      dp3 r21.w, cb11[r18.w + 5].xyzx, r15.yzwy
      add_sat r18.w, r21.w, cb11[r18.w + 5].w
      mul r26.x, r18.w, r19.w
      ushr r21.w, r17.w, l(2)
      ubfe r22.w, l(1), l(2), r17.w
      and r26.z, r21.w, l(2)
      max r26.w, r26.x, r26.y
      mad r18.w, -r19.w, r18.w, l(1.000000)
      mul r18.w, r18.w, r26.y
      movc r20.y, r26.z, r18.w, r26.w
      movc r26.xy, r22.wwww, r26.xyxx, r20.xyxx
      iadd r18.x, r18.x, l(1)
      mov r17.w, r21.w
    endloop 
    mov_sat r26.y, r26.y
    mul r13.w, r26.y, cb10[r12.w + 6].y
    lt r14.w, l(0.000000), r13.w
    if_nz r14.w
      and r14.w, r25.w, l(7)
      iadd r17.y, r14.w, l(-1)
      ult r17.y, r17.y, l(32)
      and r17.y, r2.w, r17.y
      if_nz r17.y
        imad r17.yz, r14.wwww, l(0, 20, 20, 0), l(0, 860, 876, 0)
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r14.w, cb2[52].x, r17.y, u2.xxxx
        or r14.w, r14.w, l(32)
        store_structured u2.x, cb2[52].x, r17.y, r14.w
        store_structured u2.x, cb2[52].x, r17.z, r13.w
      endif 
      iadd r24.w, r24.w, l(257)
      mad r24.z, r26.y, cb10[r12.w + 6].y, r24.z
      mul r13.w, r13.w, cb10[r12.w + 7].y
      mov r27.x, cb10[r12.w + 7].w
      mov r27.yz, cb10[r12.w + 8].xxyx
      dp3 r14.w, r16.xyzx, r27.xyzx
      dp3 r17.y, r15.yzwy, r27.xyzx
      add r17.y, r17.y, -cb10[r12.w + 8].z
      ge r17.z, r17.y, l(0.000000)
      max r17.y, r7.w, |r17.y|
      movc r17.y, r17.z, r17.y, -r17.y
      max r14.w, -r14.w, l(0.00000010)
      div r14.w, r17.y, r14.w
      min r14.w, |r14.w|, l(131072.000000)
      mov r27.x, cb10[r12.w + 8].w
      mov r27.yz, cb10[r12.w + 9].xxyx
      dp3 r17.y, r16.xyzx, r27.xyzx
      dp3 r17.z, r15.yzwy, r27.xyzx
      add r17.z, r17.z, -cb10[r12.w + 9].z
      ge r17.w, r17.z, l(0.000000)
      max r17.z, r7.w, |r17.z|
      movc r17.z, r17.w, r17.z, -r17.z
      max r17.y, -r17.y, l(0.00000010)
      div r17.y, r17.z, r17.y
      min r14.w, r14.w, |r17.y|
      mov r27.x, cb10[r12.w + 9].w
      mov r27.yz, cb10[r12.w + 10].xxyx
      dp3 r17.y, r16.xyzx, r27.xyzx
      dp3 r17.z, r15.yzwy, r27.xyzx
      add r17.z, r17.z, -cb10[r12.w + 10].z
      ge r17.w, r17.z, l(0.000000)
      max r17.z, r7.w, |r17.z|
      movc r17.z, r17.w, r17.z, -r17.z
      max r17.y, -r17.y, l(0.00000010)
      div r17.y, r17.z, r17.y
      min r14.w, r14.w, |r17.y|
      mov r27.x, cb10[r12.w + 10].w
      mov r27.yz, cb10[r12.w + 11].xxyx
      dp3 r17.y, r16.xyzx, r27.xyzx
      dp3 r17.z, r15.yzwy, r27.xyzx
      add r17.z, r17.z, -cb10[r12.w + 11].z
      ge r17.w, r17.z, l(0.000000)
      max r17.z, r7.w, |r17.z|
      movc r17.z, r17.w, r17.z, -r17.z
      max r17.y, -r17.y, l(0.00000010)
      div r17.y, r17.z, r17.y
      min r14.w, r14.w, |r17.y|
      mov r27.x, cb10[r12.w + 11].w
      mov r27.yz, cb10[r12.w + 12].xxyx
      dp3 r17.y, r16.xyzx, r27.xyzx
      dp3 r17.z, r15.yzwy, r27.xyzx
      add r17.z, r17.z, -cb10[r12.w + 12].z
      ge r17.w, r17.z, l(0.000000)
      max r17.z, r7.w, |r17.z|
      movc r17.z, r17.w, r17.z, -r17.z
      max r17.y, -r17.y, l(0.00000010)
      div r17.y, r17.z, r17.y
      min r14.w, r14.w, |r17.y|
      mov r27.x, cb10[r12.w + 12].w
      mov r27.yz, cb10[r12.w + 13].xxyx
      dp3 r17.y, r16.xyzx, r27.xyzx
      dp3 r17.z, r15.yzwy, r27.xyzx
      add r17.z, r17.z, -cb10[r12.w + 13].z
      ge r17.w, r17.z, l(0.000000)
      max r17.z, r7.w, |r17.z|
      movc r17.z, r17.w, r17.z, -r17.z
      max r17.y, -r17.y, l(0.00000010)
      div r17.y, r17.z, r17.y
      min r14.w, r14.w, |r17.y|
      add r27.x, r15.y, cb10[r12.w + 3].w
      add r27.yz, r15.zzwz, cb10[r12.w + 4].xxyx
      mad r17.yzw, r16.xxyz, r14.wwww, r27.xxyz
      dp3 r18.x, r17.yzwy, r17.yzwy
      sqrt r18.x, r18.x
      div r14.w, r14.w, r18.x
      add r14.w, r14.w, r14.w
      sqrt r14.w, r14.w
      mad r14.w, r3.z, l(5.000000), r14.w
      add r14.w, r14.w, l(-0.844800)
      mov r27.x, cb10[r12.w + 0].w
      mov r27.y, cb10[r12.w + 1].z
      mov r27.z, cb10[r12.w + 2].y
      dp3 r28.x, r17.yzwy, r27.xyzx
      mov r29.xy, cb10[r12.w + 1].xwxx
      mov r29.z, cb10[r12.w + 2].z
      dp3 r28.y, r17.yzwy, r29.xyzx
      mov r30.x, cb10[r12.w + 1].y
      mov r30.yz, cb10[r12.w + 2].xxwx
      dp3 r28.z, r17.yzwy, r30.xyzx
      ubfe r17.y, l(9), l(16), cb10[r12.w + 7].z
      utof r28.w, r17.y
      sample_l_indexable(texturecubearray)(float,float,float,float) r17.yzw, r28.xyzw, t8.wxyz, s2, r14.w
      and r26.xzw, r17.yyzw, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
      ieq r26.xzw, r26.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
      or r14.w, r26.z, r26.x
      or r14.w, r26.w, r14.w
      movc r17.yzw, r14.wwww, l(0,1.000000,1.000000,0), r17.yyzw
      dp3 r31.x, r15.yzwy, r27.xyzx
      dp3 r31.y, r15.yzwy, r29.xyzx
      dp3 r31.z, r15.yzwy, r30.xyzx
      mad_sat r15.yzw, r31.xxyz, cb10[r12.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r31.xy, r15.yzyy, cb10[r12.w + 4].zwzz
      mul r31.z, r15.w, cb10[r12.w + 5].x
      add r15.yzw, r31.xxyz, cb10[r12.w + 5].yyzw
      dp3 r28.x, r11.xyzx, r27.xyzx
      dp3 r28.y, r11.xyzx, r29.xyzx
      dp3 r28.z, r11.xyzx, r30.xyzx
      lt r26.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r28.xxyz
      movc r19.z, r26.x, l(0), l(0.500000)
      add r27.xyz, r15.yzwy, r19.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r27.xyz, r27.xyzx, t17.xyzw, s4, l(0.000000)
      mul r29.xyz, r28.xyzx, r28.xyzx
      mul r29.xyz, r13.wwww, r29.xyzx
      movc r21.z, r26.z, l(0), l(0.500000)
      add r30.xyz, r15.yzwy, r21.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r30.xyz, r30.xyzx, t18.xyzw, s4, l(0.000000)
      mul r30.xyz, r29.yyyy, r30.xyzx
      mad r27.xyz, r27.xyzx, r29.xxxx, r30.xyzx
      movc r22.z, r26.w, l(0), l(0.500000)
      add r15.yzw, r15.yyzw, r22.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t19.wxyz, s4, l(0.000000)
      mad r15.yzw, r15.yyzw, r29.zzzz, r27.xxyz
      sample_l_indexable(texturecubearray)(float,float,float,float) r26.xzw, r28.xyzw, t8.xwyz, s2, l(6.000000)
      and r27.xyz, r26.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r27.xyz, r27.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r12.w, r27.y, r27.x
      or r12.w, r27.z, r12.w
      movc r26.xzw, r12.wwww, l(1.000000,0,1.000000,0), r26.xxzw
      mul r27.xyz, r15.yzwy, r26.xzwx
      dp3 r12.w, r27.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r23.xyz, r15.yzwy, r26.xzwx, r23.xyzx
      mul r14.w, r8.w, r12.w
      mul r15.yzw, r13.wwww, r17.yyzw
      dp3 r13.w, r15.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r12.w, r8.w, r12.w, r13.w
      div r12.w, r14.w, r12.w
      mov r27.x, r23.w
      mov r27.yz, r24.xxyx
      mad r15.yzw, r15.yyzw, r12.wwww, r27.xxyz
      mov r23.w, r15.y
      mov r24.xy, r15.zwzz
    else 
      mov r25.xyz, r24.xyzx
      mov r24.xyzw, r25.xyzw
    endif 
  endif 
  iadd r10.w, r10.w, l(1)
endloop 
mov r17.x, l(16)
mov r18.yz, l(0,0,1.000000,0)
mov r19.xy, l(0,0,0,0)
mov r21.xy, l(0,0,0,0)
mov r22.xy, l(0,0,0,0)
mov r15.yzw, r23.xxyz
mov r25.x, r23.w
mov r25.yz, r24.xxyx
mov r20.xy, r24.zwzz
mov r10.w, l(0)
loop 
  ieq r12.w, r10.w, l(2)
  breakc_nz r12.w
  movc r12.w, r10.w, r0.x, r14.y
  ult r13.w, r12.w, r9.w
  if_nz r13.w
    imul null, r12.w, r12.w, l(14)
    if_nz r2.w
      and r13.w, r20.y, l(15)
      imad r13.w, r13.w, l(20), l(880)
      add r17.yzw, cb1[24].xxyz, cb10[r12.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r13.w, r17.xyzw
    endif 
    iadd r26.y, r20.y, l(1)
    add r17.yzw, r5.xxyz, -cb10[r12.w + 0].xxyz
    and r13.w, l(0x0000ffff), cb10[r12.w + 7].z
    ubfe r14.w, l(6), l(25), cb10[r12.w + 7].z
    imul null, r18.w, r13.w, l(6)
    dp3 r19.w, cb11[r18.w + 0].xyzx, r17.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 0].w
    dp3 r21.w, cb11[r18.w + 1].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 1].w
    mul r19.w, r19.w, r21.w
    dp3 r21.w, cb11[r18.w + 2].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 2].w
    mul r19.w, r19.w, r21.w
    dp3 r21.w, cb11[r18.w + 3].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 3].w
    mul r19.w, r19.w, r21.w
    dp3 r21.w, cb11[r18.w + 4].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 4].w
    mul r19.w, r19.w, r21.w
    dp3 r21.w, cb11[r18.w + 5].xyzx, r17.yzwy
    add_sat r18.w, r21.w, cb11[r18.w + 5].w
    mul r18.x, r18.w, r19.w
    and r18.w, l(1), cb10[r12.w + 6].x
    movc r18.xw, r18.wwww, r18.xxxy, r18.zzzx
    mov r19.w, cb10[r12.w + 6].x
    mov r27.xy, r18.xwxx
    mov r21.w, l(1)
    loop 
      ige r22.w, r21.w, r14.w
      breakc_nz r22.w
      iadd r22.w, r13.w, r21.w
      imul null, r22.w, r22.w, l(6)
      dp3 r25.w, cb11[r22.w + 0].xyzx, r17.yzwy
      add_sat r25.w, r25.w, cb11[r22.w + 0].w
      mul r25.w, r25.w, r27.x
      dp3 r26.z, cb11[r22.w + 1].xyzx, r17.yzwy
      add_sat r26.z, r26.z, cb11[r22.w + 1].w
      mul r25.w, r25.w, r26.z
      dp3 r26.z, cb11[r22.w + 2].xyzx, r17.yzwy
      add_sat r26.z, r26.z, cb11[r22.w + 2].w
      mul r25.w, r25.w, r26.z
      dp3 r26.z, cb11[r22.w + 3].xyzx, r17.yzwy
      add_sat r26.z, r26.z, cb11[r22.w + 3].w
      mul r25.w, r25.w, r26.z
      dp3 r26.z, cb11[r22.w + 4].xyzx, r17.yzwy
      add_sat r26.z, r26.z, cb11[r22.w + 4].w
      mul r25.w, r25.w, r26.z
      dp3 r26.z, cb11[r22.w + 5].xyzx, r17.yzwy
      add_sat r22.w, r26.z, cb11[r22.w + 5].w
      mul r27.x, r22.w, r25.w
      ushr r26.z, r19.w, l(2)
      ubfe r26.w, l(1), l(2), r19.w
      and r27.z, r26.z, l(2)
      max r27.w, r27.x, r27.y
      mad r22.w, -r25.w, r22.w, l(1.000000)
      mul r22.w, r22.w, r27.y
      movc r20.w, r27.z, r22.w, r27.w
      movc r27.xy, r26.wwww, r27.xyxx, r20.zwzz
      iadd r21.w, r21.w, l(1)
      mov r19.w, r26.z
    endloop 
    add_sat r13.w, -r24.z, r27.y
    mul r14.w, r13.w, cb10[r12.w + 6].y
    lt r18.x, l(0.000000), r14.w
    if_nz r18.x
      and r18.x, r26.y, l(31)
      iadd r18.w, r18.x, l(-1)
      ult r18.w, r18.w, l(32)
      and r18.w, r2.w, r18.w
      if_nz r18.w
        imad r18.xw, r18.xxxx, l(20, 0, 0, 20), l(860, 0, 0, 876)
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r19.w, cb2[52].x, r18.x, u2.xxxx
        or r19.w, r19.w, l(32)
        store_structured u2.x, cb2[52].x, r18.x, r19.w
        store_structured u2.x, cb2[52].x, r18.w, r14.w
      endif 
      iadd r20.y, r20.y, l(257)
      mad r20.x, r13.w, cb10[r12.w + 6].y, r20.x
      mul r13.w, r14.w, cb10[r12.w + 7].y
      mov r28.x, cb10[r12.w + 7].w
      mov r28.yz, cb10[r12.w + 8].xxyx
      dp3 r14.w, r16.xyzx, r28.xyzx
      dp3 r18.x, r17.yzwy, r28.xyzx
      add r18.x, r18.x, -cb10[r12.w + 8].z
      ge r18.w, r18.x, l(0.000000)
      max r18.x, r7.w, |r18.x|
      movc r18.x, r18.w, r18.x, -r18.x
      max r14.w, -r14.w, l(0.00000010)
      div r14.w, r18.x, r14.w
      min r14.w, |r14.w|, l(131072.000000)
      mov r28.x, cb10[r12.w + 8].w
      mov r28.yz, cb10[r12.w + 9].xxyx
      dp3 r18.x, r16.xyzx, r28.xyzx
      dp3 r18.w, r17.yzwy, r28.xyzx
      add r18.w, r18.w, -cb10[r12.w + 9].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r7.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r14.w, r14.w, |r18.x|
      mov r28.x, cb10[r12.w + 9].w
      mov r28.yz, cb10[r12.w + 10].xxyx
      dp3 r18.x, r16.xyzx, r28.xyzx
      dp3 r18.w, r17.yzwy, r28.xyzx
      add r18.w, r18.w, -cb10[r12.w + 10].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r7.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r14.w, r14.w, |r18.x|
      mov r28.x, cb10[r12.w + 10].w
      mov r28.yz, cb10[r12.w + 11].xxyx
      dp3 r18.x, r16.xyzx, r28.xyzx
      dp3 r18.w, r17.yzwy, r28.xyzx
      add r18.w, r18.w, -cb10[r12.w + 11].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r7.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r14.w, r14.w, |r18.x|
      mov r28.x, cb10[r12.w + 11].w
      mov r28.yz, cb10[r12.w + 12].xxyx
      dp3 r18.x, r16.xyzx, r28.xyzx
      dp3 r18.w, r17.yzwy, r28.xyzx
      add r18.w, r18.w, -cb10[r12.w + 12].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r7.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r14.w, r14.w, |r18.x|
      mov r28.x, cb10[r12.w + 12].w
      mov r28.yz, cb10[r12.w + 13].xxyx
      dp3 r18.x, r16.xyzx, r28.xyzx
      dp3 r18.w, r17.yzwy, r28.xyzx
      add r18.w, r18.w, -cb10[r12.w + 13].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r7.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r14.w, r14.w, |r18.x|
      add r28.x, r17.y, cb10[r12.w + 3].w
      add r28.yz, r17.zzwz, cb10[r12.w + 4].xxyx
      mad r27.xzw, r16.xxyz, r14.wwww, r28.xxyz
      dp3 r18.x, r27.xzwx, r27.xzwx
      sqrt r18.x, r18.x
      div r14.w, r14.w, r18.x
      add r14.w, r14.w, r14.w
      sqrt r14.w, r14.w
      mad r14.w, r3.z, l(5.000000), r14.w
      add r14.w, r14.w, l(-0.844800)
      mov r28.x, cb10[r12.w + 0].w
      mov r28.y, cb10[r12.w + 1].z
      mov r28.z, cb10[r12.w + 2].y
      dp3 r29.x, r27.xzwx, r28.xyzx
      mov r30.xy, cb10[r12.w + 1].xwxx
      mov r30.z, cb10[r12.w + 2].z
      dp3 r29.y, r27.xzwx, r30.xyzx
      mov r31.x, cb10[r12.w + 1].y
      mov r31.yz, cb10[r12.w + 2].xxwx
      dp3 r29.z, r27.xzwx, r31.xyzx
      ubfe r18.x, l(9), l(16), cb10[r12.w + 7].z
      utof r29.w, r18.x
      sample_l_indexable(texturecubearray)(float,float,float,float) r27.xzw, r29.xyzw, t8.xwyz, s2, r14.w
      and r32.xyz, r27.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r32.xyz, r32.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r14.w, r32.y, r32.x
      or r14.w, r32.z, r14.w
      movc r27.xzw, r14.wwww, l(1.000000,0,1.000000,0), r27.xxzw
      dp3 r32.x, r17.yzwy, r28.xyzx
      dp3 r32.y, r17.yzwy, r30.xyzx
      dp3 r32.z, r17.yzwy, r31.xyzx
      mad_sat r17.yzw, r32.xxyz, cb10[r12.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r32.xy, r17.yzyy, cb10[r12.w + 4].zwzz
      mul r32.z, r17.w, cb10[r12.w + 5].x
      add r17.yzw, r32.xxyz, cb10[r12.w + 5].yyzw
      dp3 r29.x, r11.xyzx, r28.xyzx
      dp3 r29.y, r11.xyzx, r30.xyzx
      dp3 r29.z, r11.xyzx, r31.xyzx
      lt r28.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r29.xyzx
      movc r19.z, r28.x, l(0), l(0.500000)
      add r30.xyz, r17.yzwy, r19.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r30.xyz, r30.xyzx, t17.xyzw, s4, l(0.000000)
      mul r31.xyz, r29.xyzx, r29.xyzx
      mul r31.xyz, r13.wwww, r31.xyzx
      movc r21.z, r28.y, l(0), l(0.500000)
      add r28.xyw, r17.yzyw, r21.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r28.xyw, r28.xywx, t18.xywz, s4, l(0.000000)
      mul r28.xyw, r31.yyyy, r28.xyxw
      mad r28.xyw, r30.xyxz, r31.xxxx, r28.xyxw
      movc r22.z, r28.z, l(0), l(0.500000)
      add r17.yzw, r17.yyzw, r22.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r17.yzw, r17.yzwy, t19.wxyz, s4, l(0.000000)
      mad r17.yzw, r17.yyzw, r31.zzzz, r28.xxyw
      sample_l_indexable(texturecubearray)(float,float,float,float) r28.xyz, r29.xyzw, t8.xyzw, s2, l(6.000000)
      and r29.xyz, r28.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r29.xyz, r29.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r12.w, r29.y, r29.x
      or r12.w, r29.z, r12.w
      movc r28.xyz, r12.wwww, l(1.000000,1.000000,0,0), r28.xyzx
      mul r29.xyz, r17.yzwy, r28.xyzx
      dp3 r12.w, r29.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r15.yzw, r17.yyzw, r28.xxyz, r15.yyzw
      mul r14.w, r8.w, r12.w
      mul r17.yzw, r13.wwww, r27.xxzw
      dp3 r13.w, r17.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r12.w, r8.w, r12.w, r13.w
      div r12.w, r14.w, r12.w
      mad r25.xyz, r17.yzwy, r12.wwww, r25.xyzx
    else 
      mov r26.x, r20.x
      mov r20.xy, r26.xyxx
    endif 
  endif 
  iadd r10.w, r10.w, l(1)
endloop 
ge r0.x, r24.z, l(1.000000)
bfi r3.z, l(8), l(0), r20.y, r24.w
movc r0.x, r0.x, r3.z, r20.y
max r3.z, r20.x, l(1.000000)
rcp r3.z, r3.z
mov_sat r20.x, r20.x
mul r17.xyz, r3.zzzz, r15.yzwy
mul r18.xyz, r3.zzzz, r25.xyzx
lt r7.w, r20.x, l(0.990000)
if_nz r7.w
  iadd r0.x, r0.x, l(256)
  add r7.w, -r20.x, l(1.000000)
  mul r8.w, r7.w, cb2[19].x
  add r19.xyz, r5.xyzx, -cb2[35].xyzx
  mul r20.x, r19.x, cb2[35].w
  mul r20.yz, r19.yyzy, cb2[36].xxyx
  add_sat r19.xyz, r20.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r20.xy, r19.xyxx, cb2[36].zwzz
  mul r20.z, r19.z, cb2[37].x
  add r19.xyz, r20.xyzx, cb2[37].yzwy
  lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r20.xyz, r20.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r20.w, l(0)
  add r21.xyz, r19.xyzx, r20.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t17.xyzw, s4, l(0.000000)
  mul r22.xyz, r11.xyzx, r11.xyzx
  mul r22.xyz, r8.wwww, r22.xyzx
  add r23.xyz, r19.xyzx, r20.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r23.xyz, r23.xyzx, t18.xyzw, s4, l(0.000000)
  mul r23.xyz, r22.yyyy, r23.xyzx
  mad r21.xyz, r21.xyzx, r22.xxxx, r23.xyzx
  add r19.xyz, r19.xyzx, r20.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t19.xyzw, s4, l(0.000000)
  mad r19.xyz, r19.xyzx, r22.zzzz, r21.xyzx
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r19.xyz, r19.xyzx, r20.xyzx
  dp3 r8.w, r19.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r17.xyz, r15.yzwy, r3.zzzz, r19.xyzx
  mov r16.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r16.xyzw, t8.wxyz, s2, r6.w
  mad r3.z, cb2[19].x, r7.w, -r8.w
  mad r3.z, r2.y, r3.z, r8.w
  mad r18.xyz, r15.yzwy, r3.zzzz, r18.xyzx
endif 
add r3.z, r4.z, r2.x
log r3.z, |r3.z|
mul r3.z, r2.z, r3.z
exp r3.z, r3.z
add r3.z, r4.z, r3.z
add_sat r3.z, r3.z, l(-1.000000)
mul r15.yzw, r4.zzzz, r17.xxyz
and r17.xyz, r3.wwww, r15.yzwy
mad r14.yw, r2.xxxy, l(0.000000, 0.984375, 0.000000, 0.984375), l(0.000000, 0.00781250, 0.000000, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r14.yw, r14.ywyy, t5.zxwy, s2, l(0.000000)
mul r18.xyz, r3.zzzz, r18.xyzx
mul r19.xyz, r14.yyyy, r18.xyzx
mul r18.xyz, r14.wwww, r18.xyzx
sqrt r2.y, r2.z
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r3.z, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r4.z, r2.x, r2.y, r3.z
mul r2.y, r2.y, r4.z
mul r3.z, r3.z, r4.z
mov r20.x, -r3.x
not r4.z, r1.z
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r21.x, l(2)
mov r22.x, l(2)
mov r5.w, l(1.000000)
mov r23.w, l(1.000000)
mov r20.z, r3.x
mov r24.w, l(1.000000)
mov r25.z, l(1.000000)
mov r26.w, l(1.000000)
mov r20.yw, r13.xxxx
mov r3.y, r20.w
mov r27.w, l(1.000000)
mov r13.y, r20.x
mov r13.z, r3.x
mov r28.w, l(1.000000)
mov r29.x, r13.x
mov r29.y, r20.x
mov r29.z, r3.x
mov r30.x, r13.x
mov r30.y, r20.x
mov r30.z, r3.x
mov r31.x, r13.x
mov r31.y, r20.x
mov r31.z, r3.x
mov r32.xyz, r15.yzwy
mov r33.xyz, r17.xyzx
mov r34.xyz, r19.xyzx
mov r35.xyz, r18.xyzx
mov r6.w, l(0)
mov r7.w, l(0)
loop 
  ieq r8.w, r7.w, l(2)
  breakc_nz r8.w
  movc r8.w, r7.w, r0.y, r14.z
  imul null, r8.w, r8.w, l(15)
  ubfe r9.w, l(3), l(24), cb9[r8.w + 1].w
  switch r9.w
    case l(4)
    if_nz r2.w
      and r9.w, r6.w, l(3)
      imad r9.w, r9.w, l(24), l(112)
      add r21.yzw, cb1[24].xxyz, cb9[r8.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r9.w, r21.xyzw
    endif 
    iadd r9.w, r6.w, l(1)
    lt r10.w, l(0.000000), cb9[r8.w + 6].y
    mov r36.xy, cb9[r8.w + 5].zwzz
    mov r36.z, cb9[r8.w + 6].x
    mad r21.yzw, -r36.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r8.w + 0].xxyz
    add r37.xyz, -r5.xyzx, r21.yzwy
    dp3 r11.w, r36.xyzx, r37.xyzx
    div_sat r12.w, -r11.w, cb9[r8.w + 6].y
    mad r38.xyz, r12.wwww, r36.xyzx, r21.yzwy
    movc r38.xyz, r10.wwww, r38.xyzx, cb9[r8.w + 0].xyzx
    add r38.xyz, -r5.xyzx, r38.xyzx
    dp3 r13.w, r38.xyzx, r38.xyzx
    rsq r14.y, r13.w
    mul r38.xyz, r14.yyyy, r38.xyzx
    dp3 r14.y, r11.xyzx, r38.xyzx
    mov_sat r14.w, r14.y
    movc r14.w, r3.w, |r14.y|, r14.w
    lt r16.w, l(0.000000), r14.w
    if_nz r16.w
      sqrt r16.w, r13.w
      mul r17.w, cb9[r8.w + 3].x, cb9[r8.w + 3].x
      div r13.w, r17.w, r13.w
      min r13.w, r13.w, l(1.000000)
      mad_sat r38.xy, r16.wwww, cb9[r8.w + 2].xzxx, cb9[r8.w + 2].ywyy
      mul r38.zw, r38.xxxy, r38.xxxy
      mad r38.xy, r38.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r38.xy, r38.xyxx, r38.zwzz
      mul r13.w, r13.w, r38.x
      mul r13.w, r38.y, r13.w
      lt r16.w, l(0.000000), r13.w
      if_nz r16.w
        ubfe r16.w, l(3), l(27), cb9[r8.w + 1].w
        and r17.w, r9.w, l(7)
        iadd r18.w, r17.w, l(-1)
        ult r18.w, r18.w, l(32)
        and r18.w, r2.w, r18.w
        if_nz r18.w
          imad r38.xy, r17.wwww, l(24, 24, 0, 0), l(88, 104, 0, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.w, cb2[52].x, r38.x, u2.xxxx
          or r17.w, r17.w, l(4)
          store_structured u2.x, cb2[52].x, r38.x, r17.w
          store_structured u2.x, cb2[52].x, r38.y, r13.w
        endif 
        iadd r17.w, r6.w, l(257)
        ine r16.w, r16.w, l(1)
        if_nz r16.w
          mad r16.w, |r14.y|, l(-0.200000), l(0.400000)
          lt r18.w, r14.y, l(0.000000)
          and r18.w, r3.w, r18.w
          movc r16.w, r18.w, -r16.w, r16.w
          mad r38.xyz, r11.xyzx, r16.wwww, r5.xyzx
          add r38.xyz, r38.xyzx, -cb9[r8.w + 4].yzwy
          max r16.w, |r38.z|, |r38.y|
          max r16.w, r16.w, |r38.x|
          div r16.w, cb9[r8.w + 5].x, r16.w
          add r16.w, r16.w, cb9[r8.w + 5].y
          dp3 r18.w, r38.xyzx, r38.xyzx
          rsq r18.w, r18.w
          max r16.w, r16.w, l(0.00006104)
          and r19.w, l(0x0000ffff), cb9[r8.w + 1].w
          utof r39.w, r19.w
          mov r19.w, l(0)
          mov r25.w, l(0)
          loop 
            ige r29.w, r25.w, l(8)
            breakc_nz r29.w
            dp2 r40.y, icb[r25.w + 0].yxyy, r20.xyxx
            dp2 r40.z, icb[r25.w + 0].yxyy, r20.yzyy
            mul r40.yz, r40.yyzy, cb9[r8.w + 3].yyyy
            mul r40.x, r15.x, r40.y
            mul r40.w, r14.x, r40.y
            mad r39.xyz, r38.xyzx, r18.wwww, r40.xzwx
            sample_c_lz_indexable(texturecubearray)(float,float,float,float) r29.w, r39.xyzw, t10.xxxx, s13, r16.w
            mad r19.w, r29.w, l(0.125000), r19.w
            iadd r25.w, r25.w, l(1)
          endloop 
        else 
          mov r19.w, l(1.000000)
        endif 
        mul r13.w, r13.w, r19.w
        lt r16.w, l(0.000000), r13.w
        if_nz r16.w
          mul r16.w, r1.w, cb9[r8.w + 1].z
          mul r16.w, r16.w, l(0.250000)
          dp3 r18.w, r36.xyzx, r16.xyzx
          dp3 r25.w, r16.xyzx, r37.xyzx
          mad r29.w, -r18.w, r18.w, cb9[r8.w + 6].y
          mad r11.w, r18.w, r25.w, -r11.w
          div_sat r11.w, r11.w, r29.w
          div r18.w, r29.w, cb9[r8.w + 6].y
          mul r18.w, r18.w, l(10.000000)
          min r18.w, r18.w, l(1.000000)
          add r11.w, -r12.w, r11.w
          mad r11.w, r18.w, r11.w, r12.w
          mad r21.yzw, r11.wwww, r36.xxyz, r21.yyzw
          movc r21.yzw, r10.wwww, r21.yyzw, cb9[r8.w + 0].xxyz
          add r21.yzw, -r5.xxyz, r21.yyzw
          dp3 r10.w, r21.yzwy, r21.yzwy
          rsq r10.w, r10.w
          mul r36.xyz, r10.wwww, r21.yzwy
          ubfe r11.w, l(4), l(16), cb9[r8.w + 1].w
          ult r12.w, l(0), r11.w
          and r12.w, r1.z, r12.w
          if_nz r12.w
            iadd r11.w, r11.w, cb2[0].x
            imad r11.w, r11.w, l(15), l(-15)
            mad r12.w, |r14.y|, l(-0.200000), l(0.400000)
            lt r18.w, r14.y, l(0.000000)
            and r18.w, r3.w, r18.w
            movc r12.w, r18.w, -r12.w, r12.w
            mad r23.xyz, r11.xyzx, r12.wwww, r5.xyzx
            mov r37.xyz, cb9[r11.w + 6].yzwy
            mov r37.w, cb9[r11.w + 7].x
            dp4 r12.w, r37.xyzw, r23.xyzw
            mov r37.xyz, cb9[r11.w + 7].yzwy
            mov r37.w, cb9[r11.w + 8].x
            dp4 r18.w, r37.xyzw, r23.xyzw
            lt r25.w, r18.w, r12.w
            if_z r25.w
              mov r37.xyz, cb9[r11.w + 4].yzwy
              mov r37.w, cb9[r11.w + 5].x
              dp4 r37.x, r37.xyzw, r23.xyzw
              mov r38.xyz, cb9[r11.w + 5].yzwy
              mov r38.w, cb9[r11.w + 6].x
              dp4 r37.y, r38.xyzw, r23.xyzw
              div r23.xy, r37.xyxx, r18.wwww
              mad r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r37.x, r23.x, cb9[r11.w + 9].w
              add r37.y, r23.y, cb9[r11.w + 10].x
              mul r23.xy, r37.xyxx, cb9[r11.w + 9].yzyy
              div r37.xy, cb9[r11.w + 3].yyyy, cb9[r11.w + 8].ywyy
              add r37.zw, -r37.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              ge r37.zw, r23.xxxy, r37.zzzw
              ge r37.xy, r37.xyxx, r23.xyxx
              or r37.xy, r37.xyxx, r37.zwzz
              or r23.z, r37.y, r37.x
              if_z r23.z
                mov_sat r23.xy, r23.xyxx
                mad r37.x, r23.x, cb9[r11.w + 8].y, cb9[r11.w + 8].z
                mad r37.y, r23.y, cb9[r11.w + 8].w, cb9[r11.w + 9].x
                mul r23.x, r18.w, cb9[r11.w + 10].z
                mad r12.w, cb9[r11.w + 10].y, r18.w, r12.w
                div r12.w, r12.w, r23.x
              endif 
            else 
              mov r23.z, l(-1)
            endif 
            or r18.w, r25.w, r23.z
            if_z r18.w
              max r12.w, r12.w, l(0.00006104)
              and r18.w, l(0x0000ffff), cb9[r11.w + 1].w
              if_nz cb2[58].y
                utof r23.z, r18.w
                mov r25.w, l(0)
                mov r29.w, l(0)
                loop 
                  ige r30.w, r29.w, l(8)
                  breakc_nz r30.w
                  dp2 r38.x, icb[r29.w + 0].yxyy, r20.xwxx
                  dp2 r38.y, icb[r29.w + 0].xyxx, r3.xyxx
                  mad r23.xy, r38.xyxx, cb9[r11.w + 3].yyyy, r37.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r12.w
                  mad r25.w, r23.x, l(0.125000), r25.w
                  iadd r29.w, r29.w, l(1)
                endloop 
              else 
                utof r37.z, r18.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.w, r37.xyzx, t9.xxxx, s13, r12.w
              endif 
              mul r11.w, r25.w, r25.w
              mul r11.w, r25.w, r11.w
            else 
              mov r11.w, l(1.000000)
            endif 
            mul r13.w, r11.w, r13.w
          else 
            ubfe r11.w, l(4), l(20), cb9[r8.w + 1].w
            ult r12.w, l(0), r11.w
            and r12.w, r4.z, r12.w
            if_nz r12.w
              iadd r11.w, r11.w, cb2[0].x
              imad r11.w, r11.w, l(15), l(-15)
              mad r12.w, |r14.y|, l(-0.200000), l(0.400000)
              lt r18.w, r14.y, l(0.000000)
              and r18.w, r3.w, r18.w
              movc r12.w, r18.w, -r12.w, r12.w
              mad r24.xyz, r11.xyzx, r12.wwww, r5.xyzx
              mov r37.xyz, cb9[r11.w + 6].yzwy
              mov r37.w, cb9[r11.w + 7].x
              dp4 r12.w, r37.xyzw, r24.xyzw
              mov r37.xyz, cb9[r11.w + 7].yzwy
              mov r37.w, cb9[r11.w + 8].x
              dp4 r18.w, r37.xyzw, r24.xyzw
              lt r23.x, r18.w, r12.w
              if_z r23.x
                mov r37.xyz, cb9[r11.w + 4].yzwy
                mov r37.w, cb9[r11.w + 5].x
                dp4 r37.x, r37.xyzw, r24.xyzw
                mov r38.xyz, cb9[r11.w + 5].yzwy
                mov r38.w, cb9[r11.w + 6].x
                dp4 r37.y, r38.xyzw, r24.xyzw
                div r23.yz, r37.xxyx, r18.wwww
                mad r23.yz, r23.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r24.x, r23.y, cb9[r11.w + 9].w
                add r24.y, r23.z, cb9[r11.w + 10].x
                mul r23.yz, r24.xxyx, cb9[r11.w + 9].yyzy
                div r24.xy, cb9[r11.w + 3].yyyy, cb9[r11.w + 8].ywyy
                add r37.xy, -r24.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r37.xy, r23.yzyy, r37.xyxx
                ge r24.xy, r24.xyxx, r23.yzyy
                or r24.xy, r24.xyxx, r37.xyxx
                or r24.x, r24.y, r24.x
                if_z r24.x
                  mov_sat r23.yz, r23.yyzy
                  mad r37.x, r23.y, cb9[r11.w + 8].y, cb9[r11.w + 8].z
                  mad r37.y, r23.z, cb9[r11.w + 8].w, cb9[r11.w + 9].x
                  mul r23.y, r18.w, cb9[r11.w + 10].z
                  mad r12.w, cb9[r11.w + 10].y, r18.w, r12.w
                  div r12.w, r12.w, r23.y
                endif 
              else 
                mov r24.x, l(-1)
              endif 
              or r18.w, r23.x, r24.x
              if_z r18.w
                max r12.w, r12.w, l(0.00006104)
                and r18.w, l(0x0000ffff), cb9[r11.w + 1].w
                if_nz cb2[58].y
                  utof r23.z, r18.w
                  mov r24.xy, l(0,0,0,0)
                  loop 
                    ige r24.z, r24.y, l(8)
                    breakc_nz r24.z
                    dp2 r38.x, icb[r24.y + 0].xyxx, r13.xyxx
                    dp2 r38.y, icb[r24.y + 0].yxyy, r13.xzxx
                    mad r23.xy, r38.xyxx, cb9[r11.w + 3].yyyy, r37.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r12.w
                    mad r24.x, r23.x, l(0.125000), r24.x
                    iadd r24.y, r24.y, l(1)
                  endloop 
                else 
                  utof r37.z, r18.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r37.xyzx, t9.xxxx, s13, r12.w
                endif 
                mul r11.w, r24.x, r24.x
                mul r11.w, r24.x, r11.w
              else 
                mov r11.w, l(1.000000)
              endif 
              mul r13.w, r11.w, r13.w
            endif 
          endif 
          mad r11.w, -r14.w, r2.x, l(1.000000)
          mul r11.w, r11.w, r11.w
          mad r11.w, -r11.w, l(0.620000), l(0.620000)
          add r11.w, -r14.w, r11.w
          mad r11.w, r2.z, r11.w, r14.w
          mul r11.w, r13.w, r11.w
          mov r23.x, cb9[r8.w + 0].w
          mov r23.yz, cb9[r8.w + 1].xxyx
          lt r12.w, l(0.000000), r14.y
          mad r37.xyz, r11.wwww, r23.xyzx, r32.xyzx
          dp3_sat r14.y, r11.xyzx, r36.xyzx
          mad r21.yzw, r21.yyzw, r10.wwww, r12.xxyz
          dp3 r10.w, r21.yzwy, r21.yzwy
          rsq r10.w, r10.w
          mul r21.yzw, r10.wwww, r21.yyzw
          dp3 r10.w, r21.yzwy, r12.xyzx
          dp3 r14.w, r11.xyzx, r21.yzwy
          mad r18.w, |r14.w|, r1.w, -|r14.w|
          mad r14.w, |r14.w|, r18.w, l(1.000000)
          mad r18.w, r14.y, r2.y, r3.z
          mul r14.w, r14.w, r14.w
          mul r14.w, r18.w, r14.w
          rcp r14.w, r14.w
          mul r14.y, r16.w, r14.y
          mul r14.y, r14.y, r14.w
          mul r14.y, r13.w, r14.y
          mad r21.yzw, r14.yyyy, r23.xxyz, r35.xxyz
          add_sat r10.w, -r10.w, l(1.000000)
          mul r14.w, r10.w, r10.w
          mul r14.w, r14.w, r14.w
          mul r10.w, r10.w, r14.w
          mul r10.w, r10.w, r14.y
          mad r36.xyz, r10.wwww, r23.xyzx, r34.xyzx
          mad r23.xyz, r11.wwww, r23.xyzx, r33.xyzx
          movc r23.xyz, r3.wwww, r23.xyzx, r33.xyzx
          movc r32.xyz, r12.wwww, r37.xyzx, r32.xyzx
          movc r33.xyz, r12.wwww, r33.xyzx, r23.xyzx
          movc r34.xyz, r12.wwww, r36.xyzx, r34.xyzx
          movc r35.xyz, r12.wwww, r21.yzwy, r35.xyzx
          and r10.w, r17.w, l(7)
          iadd r11.w, r10.w, l(-1)
          ult r11.w, r11.w, l(32)
          and r11.w, r2.w, r11.w
          if_nz r11.w
            imad r14.yw, r10.wwww, l(0, 24, 0, 24), l(0, 88, 0, 108)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r10.w, cb2[52].x, r14.y, u2.xxxx
            or r10.w, r10.w, l(8)
            store_structured u2.x, cb2[52].x, r14.y, r10.w
            store_structured u2.x, cb2[52].x, r14.w, r13.w
          endif 
          iadd r6.w, r6.w, l(0x00010101)
        else 
          mov r6.w, r17.w
        endif 
      else 
        mov r6.w, r9.w
      endif 
    else 
      mov r6.w, r9.w
    endif 
    break 
    case l(2)
    if_nz r2.w
      and r9.w, r6.w, l(3)
      imad r9.w, r9.w, l(24), l(112)
      add r22.yzw, cb1[24].xxyz, cb9[r8.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r9.w, r22.xyzw
    endif 
    iadd r9.w, r6.w, l(1)
    add r23.xy, -r5.xyxx, cb9[r8.w + 3].zwzz
    add r23.z, -r5.z, cb9[r8.w + 4].x
    dp3 r10.w, r23.xyzx, r23.xyzx
    rsq r10.w, r10.w
    mul r21.yzw, r10.wwww, r23.xxyz
    dp3 r11.w, r11.xyzx, r21.yzwy
    mov_sat r12.w, r11.w
    movc r13.w, r3.w, |r11.w|, r12.w
    lt r14.y, l(0.000000), r13.w
    if_nz r14.y
      mov r36.xyz, cb9[r8.w + 7].yzwy
      mov r36.w, cb9[r8.w + 8].x
      dp4 r14.y, r36.xyzw, r5.xyzw
      lt r14.w, r14.y, l(1.000000)
      if_nz r14.w
        mov r21.yzw, l(0,1.000000,1.000000,1.000000)
        mov r14.w, l(0)
      else 
        add r22.yzw, -r5.xxyz, cb9[r8.w + 0].xxyz
        mul r16.w, cb9[r8.w + 3].x, cb9[r8.w + 3].x
        dp3 r17.w, r22.yzwy, r22.yzwy
        div r16.w, r16.w, r17.w
        min r16.w, r16.w, l(1.000000)
        mad_sat r22.yz, r14.yyyy, cb9[r8.w + 2].xxzx, cb9[r8.w + 2].yywy
        mul r24.yz, r22.yyzy, r22.yyzy
        mad r22.yz, r22.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
        mul r22.yz, r22.yyzy, r24.yyzy
        mul r16.w, r16.w, r22.y
        mul r16.w, r22.z, r16.w
        mov r37.xyz, cb9[r8.w + 4].yzwy
        mov r37.w, cb9[r8.w + 5].x
        dp4 r37.x, r37.xyzw, r5.xyzw
        mov r38.xyz, cb9[r8.w + 5].yzwy
        mov r38.w, cb9[r8.w + 6].x
        dp4 r37.y, r38.xyzw, r5.xyzw
        div r25.xy, r37.xyxx, r14.yyyy
        lt r14.y, cb9[r8.w + 10].w, l(0.00048828)
        if_nz r14.y
          mad_sat r22.yz, |r25.xxyx|, cb9[r8.w + 12].xxyx, cb9[r8.w + 12].zzwz
          mul r24.yz, r22.yyzy, r22.yyzy
          mad r22.yz, r22.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
          mul r22.yz, r22.yyzy, r24.yyzy
          mul r14.y, r22.z, r22.y
        else 
          mul_sat r37.xyzw, |r25.yyxx|, cb9[r8.w + 11].xyzw
          log r37.xyzw, r37.xyzw
          mul r37.xyzw, r37.xyzw, cb9[r8.w + 12].zzzz
          exp r37.xyzw, r37.xyzw
          add r22.yz, r37.zzwz, r37.xxyx
          log r22.yz, r22.yyzy
          mul r22.yz, r22.yyzy, cb9[r8.w + 12].wwww
          exp r22.yz, r22.yyzy
          mul r17.w, r22.y, cb9[r8.w + 12].x
          mad r18.w, cb9[r8.w + 12].y, r22.z, l(-1.000000)
          mad r17.w, cb9[r8.w + 12].y, r22.z, -r17.w
          div_sat r17.w, r18.w, r17.w
          mul r18.w, r17.w, r17.w
          mad r17.w, r17.w, l(-2.000000), l(3.000000)
          mul r14.y, r17.w, r18.w
        endif 
        mul r14.w, r14.y, r16.w
        and r14.y, l(255), cb9[r8.w + 14].w
        if_nz r14.y
          dp3 r16.w, cb9[r8.w + 13].xyzx, r25.xyzx
          mov r37.x, cb9[r8.w + 13].w
          mov r37.yz, cb9[r8.w + 14].xxyx
          dp3 r17.w, r37.xyzx, r25.xyzx
          frc r37.x, r16.w
          frc r37.y, r17.w
          iadd r14.y, r14.y, l(-1)
          utof r37.z, r14.y
          sample_l_indexable(texture2darray)(float,float,float,float) r21.yzw, r37.xyzx, t20.wxyz, s2, l(0.000000)
        else 
          mov r21.yzw, l(0,1.000000,1.000000,1.000000)
        endif 
      endif 
      mov r37.x, cb9[r8.w + 0].w
      mov r37.yz, cb9[r8.w + 1].xxyx
      mul r21.yzw, r21.yyzw, r37.xxyz
      lt r14.y, l(0.000000), r14.w
      if_nz r14.y
        ubfe r14.y, l(3), l(27), cb9[r8.w + 1].w
        and r16.w, r9.w, l(7)
        iadd r17.w, r16.w, l(-1)
        ult r17.w, r17.w, l(32)
        and r17.w, r2.w, r17.w
        if_nz r17.w
          imad r22.yz, r16.wwww, l(0, 24, 24, 0), l(0, 88, 104, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r16.w, cb2[52].x, r22.y, u2.xxxx
          or r16.w, r16.w, l(4)
          store_structured u2.x, cb2[52].x, r22.y, r16.w
          store_structured u2.x, cb2[52].x, r22.z, r14.w
        endif 
        iadd r16.w, r6.w, l(257)
        ine r14.y, r14.y, l(1)
        if_nz r14.y
          mad r14.y, |r11.w|, l(-0.200000), l(0.400000)
          lt r17.w, r11.w, l(0.000000)
          and r17.w, r3.w, r17.w
          movc r14.y, r17.w, -r14.y, r14.y
          mad r26.xyz, r11.xyzx, r14.yyyy, r5.xyzx
          mov r37.xyz, cb9[r8.w + 6].yzwy
          mov r37.w, cb9[r8.w + 7].x
          dp4 r14.y, r37.xyzw, r26.xyzw
          dp4 r17.w, r36.xyzw, r26.xyzw
          ge r18.w, r17.w, r14.y
          if_nz r18.w
            mov r36.xyz, cb9[r8.w + 4].yzwy
            mov r36.w, cb9[r8.w + 5].x
            dp4 r25.x, r36.xyzw, r26.xyzw
            mov r36.xyz, cb9[r8.w + 5].yzwy
            mov r36.w, cb9[r8.w + 6].x
            dp4 r25.y, r36.xyzw, r26.xyzw
            div r22.yz, r25.xxyx, r17.wwww
            mad_sat r22.yz, r22.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
            mad r26.x, r22.y, cb9[r8.w + 8].y, cb9[r8.w + 8].z
            mad r26.y, r22.z, cb9[r8.w + 8].w, cb9[r8.w + 9].x
            div r14.y, r14.y, r17.w
            max r14.y, r14.y, l(0.00006104)
            and r17.w, l(0x0000ffff), cb9[r8.w + 1].w
            if_nz cb2[58].y
              utof r36.z, r17.w
              mov r18.w, l(0)
              mov r22.y, l(0)
              loop 
                ige r22.z, r22.y, l(8)
                breakc_nz r22.z
                dp2 r25.x, icb[r22.y + 0].xyxx, r29.xyxx
                dp2 r25.y, icb[r22.y + 0].yxyy, r29.xzxx
                mad r36.xy, r25.xyxx, cb9[r8.w + 3].yyyy, r26.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.z, r36.xyzx, t9.xxxx, s13, r14.y
                mad r18.w, r22.z, l(0.125000), r18.w
                iadd r22.y, r22.y, l(1)
              endloop 
            else 
              utof r26.z, r17.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r26.xyzx, t9.xxxx, s13, r14.y
            endif 
            mul r14.y, r18.w, r18.w
            mul r14.y, r18.w, r14.y
          else 
            mov r14.y, l(1.000000)
          endif 
        else 
          mov r14.y, l(1.000000)
        endif 
        mul r14.y, r14.y, r14.w
        lt r14.w, l(0.000000), r14.y
        if_nz r14.w
          mul r14.w, r1.w, cb9[r8.w + 1].z
          mul r14.w, r12.w, r14.w
          ubfe r17.w, l(4), l(16), cb9[r8.w + 1].w
          ult r22.y, l(0), r17.w
          and r22.y, r1.z, r22.y
          if_nz r22.y
            iadd r17.w, r17.w, cb2[0].x
            imad r17.w, r17.w, l(15), l(-15)
            mad r22.y, |r11.w|, l(-0.200000), l(0.400000)
            lt r22.z, r11.w, l(0.000000)
            and r22.z, r3.w, r22.z
            movc r22.y, r22.z, -r22.y, r22.y
            mad r27.xyz, r11.xyzx, r22.yyyy, r5.xyzx
            mov r36.xyz, cb9[r17.w + 6].yzwy
            mov r36.w, cb9[r17.w + 7].x
            dp4 r22.y, r36.xyzw, r27.xyzw
            mov r36.xyz, cb9[r17.w + 7].yzwy
            mov r36.w, cb9[r17.w + 8].x
            dp4 r22.z, r36.xyzw, r27.xyzw
            lt r22.w, r22.z, r22.y
            if_z r22.w
              mov r36.xyz, cb9[r17.w + 4].yzwy
              mov r36.w, cb9[r17.w + 5].x
              dp4 r25.x, r36.xyzw, r27.xyzw
              mov r36.xyz, cb9[r17.w + 5].yzwy
              mov r36.w, cb9[r17.w + 6].x
              dp4 r25.y, r36.xyzw, r27.xyzw
              div r24.yz, r25.xxyx, r22.zzzz
              mad r24.yz, r24.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
              add r25.x, r24.y, cb9[r17.w + 9].w
              add r25.y, r24.z, cb9[r17.w + 10].x
              mul r24.yz, r25.xxyx, cb9[r17.w + 9].yyzy
              div r25.xy, cb9[r17.w + 3].yyyy, cb9[r17.w + 8].ywyy
              add r26.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r26.xy, r24.yzyy, r26.xyxx
              ge r25.xy, r25.xyxx, r24.yzyy
              or r25.xy, r25.xyxx, r26.xyxx
              or r25.x, r25.y, r25.x
              if_z r25.x
                mov_sat r24.yz, r24.yyzy
                mad r26.x, r24.y, cb9[r17.w + 8].y, cb9[r17.w + 8].z
                mad r26.y, r24.z, cb9[r17.w + 8].w, cb9[r17.w + 9].x
                mul r24.y, r22.z, cb9[r17.w + 10].z
                mad r22.y, cb9[r17.w + 10].y, r22.z, r22.y
                div r22.y, r22.y, r24.y
              endif 
            else 
              mov r25.x, l(-1)
            endif 
            or r22.z, r22.w, r25.x
            if_z r22.z
              max r22.y, r22.y, l(0.00006104)
              and r22.z, l(0x0000ffff), cb9[r17.w + 1].w
              if_nz cb2[58].y
                utof r27.z, r22.z
                mov r22.w, l(0)
                mov r24.y, l(0)
                loop 
                  ige r24.z, r24.y, l(8)
                  breakc_nz r24.z
                  dp2 r25.x, icb[r24.y + 0].xyxx, r30.xyxx
                  dp2 r25.y, icb[r24.y + 0].yxyy, r30.xzxx
                  mad r27.xy, r25.xyxx, cb9[r17.w + 3].yyyy, r26.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.z, r27.xyzx, t9.xxxx, s13, r22.y
                  mad r22.w, r24.z, l(0.125000), r22.w
                  iadd r24.y, r24.y, l(1)
                endloop 
              else 
                utof r26.z, r22.z
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.w, r26.xyzx, t9.xxxx, s13, r22.y
              endif 
              mul r17.w, r22.w, r22.w
              mul r17.w, r22.w, r17.w
            else 
              mov r17.w, l(1.000000)
            endif 
            mul r14.y, r14.y, r17.w
          else 
            ubfe r8.w, l(4), l(20), cb9[r8.w + 1].w
            ult r17.w, l(0), r8.w
            and r17.w, r4.z, r17.w
            if_nz r17.w
              iadd r8.w, r8.w, cb2[0].x
              imad r8.w, r8.w, l(15), l(-15)
              mad r17.w, |r11.w|, l(-0.200000), l(0.400000)
              lt r22.y, r11.w, l(0.000000)
              and r22.y, r3.w, r22.y
              movc r17.w, r22.y, -r17.w, r17.w
              mad r28.xyz, r11.xyzx, r17.wwww, r5.xyzx
              mov r36.xyz, cb9[r8.w + 6].yzwy
              mov r36.w, cb9[r8.w + 7].x
              dp4 r17.w, r36.xyzw, r28.xyzw
              mov r36.xyz, cb9[r8.w + 7].yzwy
              mov r36.w, cb9[r8.w + 8].x
              dp4 r22.y, r36.xyzw, r28.xyzw
              lt r22.z, r22.y, r17.w
              if_z r22.z
                mov r36.xyz, cb9[r8.w + 4].yzwy
                mov r36.w, cb9[r8.w + 5].x
                dp4 r25.x, r36.xyzw, r28.xyzw
                mov r36.xyz, cb9[r8.w + 5].yzwy
                mov r36.w, cb9[r8.w + 6].x
                dp4 r25.y, r36.xyzw, r28.xyzw
                div r24.yz, r25.xxyx, r22.yyyy
                mad r24.yz, r24.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r25.x, r24.y, cb9[r8.w + 9].w
                add r25.y, r24.z, cb9[r8.w + 10].x
                mul r24.yz, r25.xxyx, cb9[r8.w + 9].yyzy
                div r25.xy, cb9[r8.w + 3].yyyy, cb9[r8.w + 8].ywyy
                add r26.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r26.xy, r24.yzyy, r26.xyxx
                ge r25.xy, r25.xyxx, r24.yzyy
                or r25.xy, r25.xyxx, r26.xyxx
                or r25.x, r25.y, r25.x
                if_z r25.x
                  mov_sat r24.yz, r24.yyzy
                  mad r26.x, r24.y, cb9[r8.w + 8].y, cb9[r8.w + 8].z
                  mad r26.y, r24.z, cb9[r8.w + 8].w, cb9[r8.w + 9].x
                  mul r24.y, r22.y, cb9[r8.w + 10].z
                  mad r17.w, cb9[r8.w + 10].y, r22.y, r17.w
                  div r17.w, r17.w, r24.y
                endif 
              else 
                mov r25.x, l(-1)
              endif 
              or r22.y, r22.z, r25.x
              if_z r22.y
                max r17.w, r17.w, l(0.00006104)
                and r22.y, l(0x0000ffff), cb9[r8.w + 1].w
                if_nz cb2[58].y
                  utof r27.z, r22.y
                  mov r22.z, l(0)
                  mov r24.y, l(0)
                  loop 
                    ige r24.z, r24.y, l(8)
                    breakc_nz r24.z
                    dp2 r25.x, icb[r24.y + 0].xyxx, r31.xyxx
                    dp2 r25.y, icb[r24.y + 0].yxyy, r31.xzxx
                    mad r27.xy, r25.xyxx, cb9[r8.w + 3].yyyy, r26.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.z, r27.xyzx, t9.xxxx, s13, r17.w
                    mad r22.z, r24.z, l(0.125000), r22.z
                    iadd r24.y, r24.y, l(1)
                  endloop 
                else 
                  utof r26.z, r22.y
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.z, r26.xyzx, t9.xxxx, s13, r17.w
                endif 
                mul r8.w, r22.z, r22.z
                mul r8.w, r22.z, r8.w
              else 
                mov r8.w, l(1.000000)
              endif 
              mul r14.y, r8.w, r14.y
            endif 
          endif 
          mad r8.w, -r13.w, r2.x, l(1.000000)
          mul r8.w, r8.w, r8.w
          mad r8.w, -r8.w, l(0.620000), l(0.620000)
          add r8.w, -r13.w, r8.w
          mad r8.w, r2.z, r8.w, r13.w
          mul r8.w, r14.y, r8.w
          lt r11.w, l(0.000000), r11.w
          mad r26.xyz, r8.wwww, r21.yzwy, r32.xyzx
          mad r23.xyz, r23.xyzx, r10.wwww, r12.xyzx
          dp3 r10.w, r23.xyzx, r23.xyzx
          rsq r10.w, r10.w
          mul r23.xyz, r10.wwww, r23.xyzx
          dp3 r10.w, r23.xyzx, r12.xyzx
          dp3 r13.w, r11.xyzx, r23.xyzx
          mad r17.w, |r13.w|, r1.w, -|r13.w|
          mad r13.w, |r13.w|, r17.w, l(1.000000)
          mad r12.w, r12.w, r2.y, r3.z
          mul r13.w, r13.w, r13.w
          mul r12.w, r12.w, r13.w
          rcp r12.w, r12.w
          mul r12.w, r14.w, r12.w
          mul r12.w, r12.w, r14.y
          mul r12.w, r12.w, l(0.250000)
          mad r23.xyz, r12.wwww, r21.yzwy, r35.xyzx
          add_sat r10.w, -r10.w, l(1.000000)
          mul r13.w, r10.w, r10.w
          mul r13.w, r13.w, r13.w
          mul r10.w, r10.w, r13.w
          mul r10.w, r10.w, r12.w
          mad r27.xyz, r10.wwww, r21.yzwy, r34.xyzx
          mad r21.yzw, r8.wwww, r21.yyzw, r33.xxyz
          movc r21.yzw, r3.wwww, r21.yyzw, r33.xxyz
          movc r32.xyz, r11.wwww, r26.xyzx, r32.xyzx
          movc r33.xyz, r11.wwww, r33.xyzx, r21.yzwy
          movc r34.xyz, r11.wwww, r27.xyzx, r34.xyzx
          movc r35.xyz, r11.wwww, r23.xyzx, r35.xyzx
          and r8.w, r16.w, l(7)
          iadd r10.w, r8.w, l(-1)
          ult r10.w, r10.w, l(32)
          and r10.w, r2.w, r10.w
          if_nz r10.w
            imad r21.yz, r8.wwww, l(0, 24, 24, 0), l(0, 88, 108, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r8.w, cb2[52].x, r21.y, u2.xxxx
            or r8.w, r8.w, l(8)
            store_structured u2.x, cb2[52].x, r21.y, r8.w
            store_structured u2.x, cb2[52].x, r21.z, r14.y
          endif 
          iadd r6.w, r6.w, l(0x00010101)
        else 
          mov r6.w, r16.w
        endif 
      else 
        mov r6.w, r9.w
      endif 
    else 
      mov r6.w, r9.w
    endif 
    break 
    default 
    break 
  endswitch 
  iadd r7.w, r7.w, l(1)
endloop 
mad r4.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.y, r4.y
mad r2.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r2.x
ieq r1.z, r0.y, r1.z
movc r1.zw, r1.zzzz, r2.yyyz, l(0,0,-1.000000,0)
mad r2.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.x, r2.x
ieq r2.x, r0.y, r2.x
movc r2.xy, r2.xxxx, r2.yzyy, l(-1.000000,0,0,0)
mad r3.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.z, r3.x
ieq r2.z, r0.y, r2.z
movc r3.xy, r2.zzzz, r3.yzyy, l(-1.000000,0,0,0)
mad r7.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.z, r7.x
ieq r0.y, r0.y, r2.z
movc r7.xy, r0.yyyy, r7.yzyy, l(-1.000000,0,0,0)
mov r8.x, r1.z
mov r8.y, r2.x
mov r8.z, r3.x
mov r8.w, r7.x
add r8.xyzw, -r4.xxxx, r8.xyzw
ge r8.xyzw, |r8.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r8.xyzw, r8.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.y, r8.y, r8.x
add r0.y, r8.z, r0.y
add r0.y, r8.w, r0.y
mul r1.z, r2.y, r8.y
mad r1.z, r8.x, r1.w, r1.z
mad r1.z, r8.z, r3.y, r1.z
mad r1.z, r8.w, r7.y, r1.z
div r4.w, r1.z, r0.y
ge r0.y, l(0.000000), r0.y
movc r4.yz, r0.yyyy, l(0,0,0,0), r4.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.y, r1.w, r1.z
movc r2.xyz, r0.yyyy, r4.xyzx, r4.xzyx
mad r0.y, -r2.z, l(0.500000), r2.x
add r3.y, r0.y, r2.z
mad r3.z, -r2.y, l(0.500000), r0.y
add r3.x, r2.y, r3.z
mul r2.xyz, r6.xyzx, r32.xyzx
mad r2.xyz, r33.xyzx, r3.xyzx, r2.xyzx
mul r4.xyz, r34.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r4.xyz, r35.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000), r4.xyzx
add r2.xyz, r2.xyzx, r4.xyzx
add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, r34.xyzx
mad r3.xyz, r35.xyzx, r3.xyzx, r4.xyzx
mad r3.xyz, r32.xyzx, r6.xyzx, r3.xyzx
movc r2.xyz, r3.wwww, r2.xyzx, r3.xyzx
lt r0.y, l(0.000000), cb2[9].z
if_nz r0.y
  dp3 r0.y, r5.xyzx, r5.xyzx
  rsq r1.z, r0.y
  mul r3.xyz, r1.zzzz, r5.xyzx
  sqrt r0.y, r0.y
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.yyyy, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r3.w, l(0.010000), |r5.z|
    mul r4.xy, r5.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r3.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r6.xyz, r1.wwww, cb2[12].xyzx
    exp r6.xyz, r6.xyzx
    add r6.xyz, -r4.xyzx, r6.xyzx
    mad r4.xyz, cb2[13].wwww, r6.xyzx, r4.xyzx
  else 
    mad r1.z, r0.y, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r5.z|
    mul r3.w, r5.z, cb2[15].z
    mul r4.w, r3.w, l(-1.442695)
    exp r4.w, r4.w
    add r4.w, -r4.w, l(1.000000)
    div r3.w, r4.w, r3.w
    mul r3.w, r1.z, r3.w
    movc r1.z, r1.w, r3.w, r1.z
    mul r6.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r6.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r3.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r3.x, cb2[8].w, -r1.z, l(1.000000)
  mul r3.x, r3.x, r3.x
  mul r3.x, r3.x, l(12.566371)
  div r1.w, r1.w, r3.x
  add r0.y, r0.y, -cb2[10].w
  mul_sat r0.y, r0.y, cb2[11].w
  mul r0.y, r0.y, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r3.xyz, r0.yyyy, cb2[11].xyzx
  mad r3.xyz, r1.zzzz, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r6.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r6.xyzx
  mad r3.xyz, r2.xyzx, r4.xyzx, r3.xyzx
else 
  mul r0.y, r5.z, cb2[6].x
  mad r1.z, cb2[6].x, r5.z, cb2[5].x
  lt r1.w, |r0.y|, l(0.000100)
  min r3.w, r1.z, l(64.000000)
  mul r3.w, r3.w, l(1.442695)
  exp r3.w, r3.w
  mov_sat r4.x, cb2[6].z
  lt r4.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r4.y, r3.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.y, r1.w, l(1.000000), r0.y
  div r0.y, r1.z, r0.y
  movc r0.y, r1.w, r4.x, r0.y
  mul r0.y, r0.y, cb2[5].z
  dp3 r1.z, r5.xyzx, r5.xyzx
  sqrt r1.w, r1.z
  mad r0.y, r0.y, r1.w, cb2[5].w
  exp r0.y, r0.y
  min r0.y, r0.y, l(1.000000)
  add r0.y, -r0.y, l(1.000000)
  rsq r1.z, r1.z
  mul r4.xyz, r1.zzzz, r5.xyzx
  dp3 r1.z, cb2[7].yzwy, r4.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r1.zzzz, r4.xyzw, cb2[4].xyzw
  mul r0.y, r0.y, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyz, r0.yyyy, r4.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.y, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(3, 12, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r1.z, cb2[55].w, l(16)
ine r1.w, r1.z, l(0)
ieq r1.z, r1.z, l(16)
and r1.z, r1.z, r1.w
and r3.z, r1.z, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.yyyy, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.y, r6.w, l(3)
      break 
      case l(2)
      ubfe r0.y, l(2), l(8), r6.w
      break 
      case l(3)
      ushr r0.y, r6.w, l(16)
      break 
      case l(4)
      and r0.y, r0.x, l(15)
      break 
      case l(5)
      ushr r0.y, r0.x, l(8)
      break 
      default 
      mov r0.y, l(0)
      break 
    endswitch 
    utof r0.y, r0.y
    mul r0.y, r0.y, cb2[53].z
    mad r3.xyz, r0.yyyy, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r2.w
  add r1.xyz, r5.xyzx, cb1[24].xyzx
  and r1.w, r6.w, l(3)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.y, r0.x, l(15)
  store_structured u2.x, cb2[52].x, l(108), r0.y
endif 
if_nz cb2[52].y
  and r0.y, r6.w, l(3)
  atomic_iadd g1, l(0), r0.y
  ubfe r1.x, l(2), l(8), r6.w
  atomic_iadd g1, l(4), r1.x
  ushr r1.y, r6.w, l(16)
  atomic_iadd g1, l(8), r1.y
  and r1.z, r0.x, l(15)
  atomic_iadd g1, l(12), r1.z
  ushr r0.x, r0.x, l(8)
  atomic_iadd g1, l(16), r0.x
  atomic_umax g2, l(0), r0.y
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), r1.z
  atomic_umax g2, l(16), r0.x
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.x, r1.x, l(63)
  if_nz r0.x
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.x, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.x
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.x, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.x
    ieq r0.yz, r0.zzwz, cb2[52].zzwz
    and r0.y, r0.z, r0.y
    if_nz r0.y
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.x
    endif 
  endif 
endif 
ret 
// Approximately 1669 instruction slots used
