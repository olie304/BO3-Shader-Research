//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:11 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16 [unused]
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 41
dcl_thread_group 8, 8, 1
ishl r0.x, cb2[57].x, l(4)
iadd r0.x, r0.x, vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.yzw, r1.xyww, t0.wxyz
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.yyyx
add r9.xy, r1.wzww, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r10.x, r3.x, l(0.984375)
mul r5.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r10.x, r3.x, r5.w
max r3.x, r3.x, l(0.00000001)
rcp r10.y, r3.x
and r9.zw, r0.zzzz, r10.xxxy
add r10.xy, r9.xyxx, -cb1[71].xyxx
mul r10.xy, r10.xyxx, cb1[44].zwzz
mad r10.xy, r10.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r11.x, r10.x, cb1[12].x
mul r11.y, r10.y, cb1[13].y
mov r11.z, l(1.000000)
mul r10.xyz, r9.wwww, r11.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.z, r2.w, l(3.000000), l(0.500000)
ftou r0.z, r0.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r11.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r11.z
mul r11.xy, r2.wwww, r2.xyxx
and r12.xyzw, r0.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.z, r12.w, r12.z
movc r12.z, r0.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.z, r0.w, l(-0.500000), l(-0.00146628)
add r0.z, r0.z, r2.z
mul_sat r2.y, r0.z, l(2.00982332)
dp3 r0.z, -r10.xyzx, -r10.xyzx
rsq r0.z, r0.z
mul r12.xyz, r0.zzzz, -r10.xyzx
dp2 r0.z, r1.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.z, r0.z
mul r0.z, r0.z, l(52.982918)
frc r0.z, r0.z
mad r0.z, r0.z, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r0.z
dp2 r0.z, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.z, r0.z
mul r0.z, r0.z, l(52.982918)
frc r0.z, r0.z
mad r0.z, r0.z, l(6.28318548), cb1[70].w
sincos r3.x, r15.x, r0.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r0.z, -r12.xyzx, r11.xyzx
add r0.z, r0.z, r0.z
mad r16.xyz, r11.xyzx, -r0.zzzz, -r12.xyzx
mul r0.z, r2.y, l(17.000000)
exp r0.z, r0.z
add r0.z, r0.z, l(2.000000)
div r0.z, l(2.000000), r0.z
sqrt r1.z, r0.z
mul r2.zw, r9.xxxy, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r17.xyzw, r2.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r18.xyzw, r2.zwzz, t28.xyzw, s4.x
mul r2.zw, r9.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r2.zw, r2.zzzw
add r9.xy, -r2.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r19.y, r9.x, r9.y
mul r19.xz, r2.zzwz, r9.xxyx
mul r19.w, r2.w, r2.z
dp4 r1.w, r17.xyzw, r19.xyzw
add r18.xyzw, -r9.wwww, r18.xyzw
min r2.z, |r18.w|, |r18.z|
min r2.z, r2.z, |r18.y|
min r2.z, r2.z, |r18.x|
max r2.w, |r18.w|, |r18.z|
max r2.w, r2.w, |r18.y|
max r2.w, r2.w, |r18.x|
eq r15.yzw, r2.zzzz, |r18.yyzw|
movc r2.z, r15.y, r17.y, r17.x
movc r2.z, r15.z, r17.z, r2.z
movc r2.z, r15.w, r17.w, r2.z
mul r5.w, r9.w, l(0.010000)
lt r2.w, r5.w, r2.w
movc r1.w, r2.w, r2.z, r1.w
mul r2.z, r1.w, r4.z
add r2.w, -r2.y, l(1.000000)
mul r5.w, r2.w, l(5.000000)
mad r6.w, r2.w, l(5.000000), l(-2.500000)
mul r6.w, r6.w, l(0.400000)
max r6.w, r6.w, l(0.000000)
mul r6.w, r6.w, l(100.000000)
mad r9.xy, -r2.wwww, l(10.000000, 5.000000, 0.000000, 0.000000), l(6.857410, 7.085000, 0.000000, 0.000000)
exp r7.w, r9.x
mul r7.w, r2.x, r7.w
mul r7.w, r7.w, l(9.136810)
mul r8.w, r2.w, r5.w
mad r8.w, -r8.w, l(2.015905), r9.y
exp r8.w, r8.w
mul r8.w, r2.x, r8.w
mul r8.w, r8.w, l(9.708090)
max r7.w, r7.w, r8.w
max r7.w, r7.w, l(1.268160)
iadd r8.w, cb2[0].y, -cb2[58].x
ftou r9.x, cb1[44].x
iadd r9.x, r9.x, l(7)
ushr r9.x, r9.x, l(3)
imad r0.x, r0.y, r9.x, r0.x
ishl r0.y, r0.x, l(5)
bfi r0.x, l(27), l(5), r0.x, l(16)
and r9.x, r8.w, l(-32)
iadd r9.y, r8.w, -r9.x
and r9.w, cb2[0].y, l(-32)
iadd r12.w, -r9.w, cb2[0].y
mov r17.yz, l(0,0,1.000000,0)
mov r18.xy, l(0,0,0,0)
mov r19.x, l(1.000000)
mov r20.xy, l(0,0,0,0)
mov r21.xy, l(0,0,0,0)
mov r22.xyzw, l(0,0,0,0)
mov r23.yzw, l(0,0,0,0)
mov r13.z, r9.x
loop 
  uge r13.w, r13.z, cb2[0].y
  breakc_nz r13.w
  ushr r13.w, r13.z, l(5)
  iadd r13.w, r0.x, r13.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.w, l(0), t26.xxxx
  ieq r14.w, r9.x, r13.z
  bfi r15.y, r9.y, l(0), l(0), r13.w
  movc r13.w, r14.w, r15.y, r13.w
  ieq r14.w, r9.w, r13.z
  ubfe r15.y, r12.w, l(0), r13.w
  movc r13.w, r14.w, r15.y, r13.w
  mov r24.xyzw, r22.xyzw
  mov r25.xyz, r23.yzwy
  mov r14.w, r13.w
  loop 
    breakc_z r14.w
    firstbit_lo r15.y, r14.w
    ishl r15.z, l(1), r15.y
    not r15.z, r15.z
    and r14.w, r14.w, r15.z
    iadd r15.y, r13.z, r15.y
    imul null, r15.y, r15.y, l(14)
    add r26.xyz, r10.xyzx, -cb10[r15.y + 0].xyzx
    and r15.z, l(0x0000ffff), cb10[r15.y + 7].z
    ubfe r15.w, l(6), l(25), cb10[r15.y + 7].z
    imul null, r17.w, r15.z, l(6)
    dp3 r18.w, cb11[r17.w + 0].xyzx, r26.xyzx
    add_sat r18.w, r18.w, cb11[r17.w + 0].w
    dp3 r19.z, cb11[r17.w + 1].xyzx, r26.xyzx
    add_sat r19.z, r19.z, cb11[r17.w + 1].w
    mul r18.w, r18.w, r19.z
    dp3 r19.z, cb11[r17.w + 2].xyzx, r26.xyzx
    add_sat r19.z, r19.z, cb11[r17.w + 2].w
    mul r18.w, r18.w, r19.z
    dp3 r19.z, cb11[r17.w + 3].xyzx, r26.xyzx
    add_sat r19.z, r19.z, cb11[r17.w + 3].w
    mul r18.w, r18.w, r19.z
    dp3 r19.z, cb11[r17.w + 4].xyzx, r26.xyzx
    add_sat r19.z, r19.z, cb11[r17.w + 4].w
    mul r18.w, r18.w, r19.z
    dp3 r19.z, cb11[r17.w + 5].xyzx, r26.xyzx
    add_sat r17.w, r19.z, cb11[r17.w + 5].w
    mul r17.x, r17.w, r18.w
    and r17.w, l(1), cb10[r15.y + 6].x
    movc r17.xw, r17.wwww, r17.xxxy, r17.zzzx
    mov r18.w, cb10[r15.y + 6].x
    mov r27.xy, r17.xwxx
    mov r19.z, l(1)
    loop 
      ige r19.w, r19.z, r15.w
      breakc_nz r19.w
      iadd r19.w, r15.z, r19.z
      imul null, r19.w, r19.w, l(6)
      dp3 r20.w, cb11[r19.w + 0].xyzx, r26.xyzx
      add_sat r20.w, r20.w, cb11[r19.w + 0].w
      mul r20.w, r20.w, r27.x
      dp3 r21.w, cb11[r19.w + 1].xyzx, r26.xyzx
      add_sat r21.w, r21.w, cb11[r19.w + 1].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r19.w + 2].xyzx, r26.xyzx
      add_sat r21.w, r21.w, cb11[r19.w + 2].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r19.w + 3].xyzx, r26.xyzx
      add_sat r21.w, r21.w, cb11[r19.w + 3].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r19.w + 4].xyzx, r26.xyzx
      add_sat r21.w, r21.w, cb11[r19.w + 4].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r19.w + 5].xyzx, r26.xyzx
      add_sat r19.w, r21.w, cb11[r19.w + 5].w
      mul r27.x, r19.w, r20.w
      ushr r21.w, r18.w, l(2)
      ubfe r26.w, l(1), l(2), r18.w
      and r27.z, r21.w, l(2)
      max r27.w, r27.x, r27.y
      mad r19.w, -r20.w, r19.w, l(1.000000)
      mul r19.w, r19.w, r27.y
      movc r19.y, r27.z, r19.w, r27.w
      movc r27.xy, r26.wwww, r27.xyxx, r19.xyxx
      iadd r19.z, r19.z, l(1)
      mov r18.w, r21.w
    endloop 
    mov_sat r27.y, r27.y
    mul r15.z, r27.y, cb10[r15.y + 6].y
    lt r15.w, l(0.000000), r15.z
    if_nz r15.w
      mad r25.z, r27.y, cb10[r15.y + 6].y, r25.z
      mul r15.z, r15.z, cb10[r15.y + 7].y
      mov r28.x, cb10[r15.y + 7].w
      mov r28.yz, cb10[r15.y + 8].xxyx
      dp3 r15.w, r16.xyzx, r28.xyzx
      dp3 r17.x, r26.xyzx, r28.xyzx
      add r17.x, r17.x, -cb10[r15.y + 8].z
      ge r17.w, r17.x, l(0.000000)
      max r17.x, r6.w, |r17.x|
      movc r17.x, r17.w, r17.x, -r17.x
      max r15.w, -r15.w, l(0.00000010)
      div r15.w, r17.x, r15.w
      min r15.w, |r15.w|, l(131072.000000)
      mov r28.x, cb10[r15.y + 8].w
      mov r28.yz, cb10[r15.y + 9].xxyx
      dp3 r17.x, r16.xyzx, r28.xyzx
      dp3 r17.w, r26.xyzx, r28.xyzx
      add r17.w, r17.w, -cb10[r15.y + 9].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r6.w, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r17.x, -r17.x, l(0.00000010)
      div r17.x, r17.w, r17.x
      min r15.w, r15.w, |r17.x|
      mov r28.x, cb10[r15.y + 9].w
      mov r28.yz, cb10[r15.y + 10].xxyx
      dp3 r17.x, r16.xyzx, r28.xyzx
      dp3 r17.w, r26.xyzx, r28.xyzx
      add r17.w, r17.w, -cb10[r15.y + 10].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r6.w, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r17.x, -r17.x, l(0.00000010)
      div r17.x, r17.w, r17.x
      min r15.w, r15.w, |r17.x|
      mov r28.x, cb10[r15.y + 10].w
      mov r28.yz, cb10[r15.y + 11].xxyx
      dp3 r17.x, r16.xyzx, r28.xyzx
      dp3 r17.w, r26.xyzx, r28.xyzx
      add r17.w, r17.w, -cb10[r15.y + 11].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r6.w, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r17.x, -r17.x, l(0.00000010)
      div r17.x, r17.w, r17.x
      min r15.w, r15.w, |r17.x|
      mov r28.x, cb10[r15.y + 11].w
      mov r28.yz, cb10[r15.y + 12].xxyx
      dp3 r17.x, r16.xyzx, r28.xyzx
      dp3 r17.w, r26.xyzx, r28.xyzx
      add r17.w, r17.w, -cb10[r15.y + 12].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r6.w, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r17.x, -r17.x, l(0.00000010)
      div r17.x, r17.w, r17.x
      min r15.w, r15.w, |r17.x|
      mov r28.x, cb10[r15.y + 12].w
      mov r28.yz, cb10[r15.y + 13].xxyx
      dp3 r17.x, r16.xyzx, r28.xyzx
      dp3 r17.w, r26.xyzx, r28.xyzx
      add r17.w, r17.w, -cb10[r15.y + 13].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r6.w, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r17.x, -r17.x, l(0.00000010)
      div r17.x, r17.w, r17.x
      min r15.w, r15.w, |r17.x|
      add r28.x, r26.x, cb10[r15.y + 3].w
      add r28.yz, r26.yyzy, cb10[r15.y + 4].xxyx
      mad r19.yzw, r16.xxyz, r15.wwww, r28.xxyz
      dp3 r17.x, r19.yzwy, r19.yzwy
      sqrt r17.x, r17.x
      div r15.w, r15.w, r17.x
      add r15.w, r15.w, r15.w
      sqrt r15.w, r15.w
      mad r15.w, r2.w, l(5.000000), r15.w
      add r15.w, r15.w, l(-0.844800)
      mov r28.x, cb10[r15.y + 0].w
      mov r28.y, cb10[r15.y + 1].z
      mov r28.z, cb10[r15.y + 2].y
      dp3 r29.x, r19.yzwy, r28.xyzx
      mov r30.xy, cb10[r15.y + 1].xwxx
      mov r30.z, cb10[r15.y + 2].z
      dp3 r29.y, r19.yzwy, r30.xyzx
      mov r31.x, cb10[r15.y + 1].y
      mov r31.yz, cb10[r15.y + 2].xxwx
      dp3 r29.z, r19.yzwy, r31.xyzx
      ubfe r17.x, l(9), l(16), cb10[r15.y + 7].z
      utof r29.w, r17.x
      sample_l_indexable(texturecubearray)(float,float,float,float) r19.yzw, r29.xyzw, t8.wxyz, s2, r15.w
      dp3 r32.x, r26.xyzx, r28.xyzx
      dp3 r32.y, r26.xyzx, r30.xyzx
      dp3 r32.z, r26.xyzx, r31.xyzx
      mad_sat r26.xyz, r32.xyzx, cb10[r15.y + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      mul r32.xy, r26.xyxx, cb10[r15.y + 4].zwzz
      mul r32.z, r26.z, cb10[r15.y + 5].x
      add r26.xyz, r32.xyzx, cb10[r15.y + 5].yzwy
      dp3 r29.x, r11.xyzx, r28.xyzx
      dp3 r29.y, r11.xyzx, r30.xyzx
      dp3 r29.z, r11.xyzx, r31.xyzx
      lt r27.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r29.xxyz
      movc r18.z, r27.x, l(0), l(0.500000)
      add r28.xyz, r18.xyzx, r26.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r28.xyz, r28.xyzx, t17.xyzw, s4, l(0.000000)
      mul r30.xyz, r29.xyzx, r29.xyzx
      mul r30.xyz, r15.zzzz, r30.xyzx
      movc r20.z, r27.z, l(0), l(0.500000)
      add r31.xyz, r20.xyzx, r26.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r31.xyz, r31.xyzx, t18.xyzw, s4, l(0.000000)
      mul r31.xyz, r30.yyyy, r31.xyzx
      mad r28.xyz, r28.xyzx, r30.xxxx, r31.xyzx
      movc r21.z, r27.w, l(0), l(0.500000)
      add r26.xyz, r21.xyzx, r26.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t19.xyzw, s4, l(0.000000)
      mad r26.xyz, r26.xyzx, r30.zzzz, r28.xyzx
      sample_l_indexable(texturecubearray)(float,float,float,float) r27.xzw, r29.xyzw, t8.xwyz, s2, l(6.000000)
      mul r28.xyz, r26.xyzx, r27.xzwx
      dp3 r15.y, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r24.xyz, r26.xyzx, r27.xzwx, r24.xyzx
      mul r15.w, r7.w, r15.y
      mul r19.yzw, r15.zzzz, r19.yyzw
      dp3 r15.z, r19.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r15.y, r7.w, r15.y, r15.z
      div r15.y, r15.w, r15.y
      mov r26.x, r24.w
      mov r26.yz, r25.xxyx
      mad r25.xyw, r19.zwzy, r15.yyyy, r26.yzyx
      mov r24.w, r25.w
    endif 
  endloop 
  mov r22.xyzw, r24.xyzw
  mov r23.yzw, r25.xxyz
  iadd r13.z, r13.z, l(32)
endloop 
lt r9.w, r23.w, l(1.000000)
if_nz r9.w
  mov r17.yz, l(0,0,1.000000,0)
  mov r18.xy, l(0,0,0,0)
  mov r19.x, l(1.000000)
  mov r20.xy, l(0,0,0,0)
  mov r21.xy, l(0,0,0,0)
  mov r24.x, r22.w
  mov r24.yzw, r23.yyzw
  mov r15.yzw, r22.xxyz
  mov r9.w, r23.w
  mov r12.w, l(0)
  loop 
    uge r13.z, r12.w, r8.w
    breakc_nz r13.z
    ushr r13.z, r12.w, l(5)
    iadd r13.z, r0.x, r13.z
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.z, r13.z, l(0), t26.xxxx
    ieq r13.w, r9.x, r12.w
    ubfe r14.w, r9.y, l(0), r13.z
    movc r13.z, r13.w, r14.w, r13.z
    mov r25.xyzw, r24.xyzw
    mov r26.xyz, r15.yzwy
    mov r13.w, r9.w
    mov r14.w, r13.z
    loop 
      breakc_z r14.w
      firstbit_lo r17.w, r14.w
      ishl r18.w, l(1), r17.w
      not r18.w, r18.w
      and r14.w, r14.w, r18.w
      iadd r17.w, r12.w, r17.w
      imul null, r17.w, r17.w, l(14)
      add r27.xyz, r10.xyzx, -cb10[r17.w + 0].xyzx
      and r18.w, l(0x0000ffff), cb10[r17.w + 7].z
      ubfe r19.z, l(6), l(25), cb10[r17.w + 7].z
      imul null, r19.w, r18.w, l(6)
      dp3 r20.w, cb11[r19.w + 0].xyzx, r27.xyzx
      add_sat r20.w, r20.w, cb11[r19.w + 0].w
      dp3 r21.w, cb11[r19.w + 1].xyzx, r27.xyzx
      add_sat r21.w, r21.w, cb11[r19.w + 1].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r19.w + 2].xyzx, r27.xyzx
      add_sat r21.w, r21.w, cb11[r19.w + 2].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r19.w + 3].xyzx, r27.xyzx
      add_sat r21.w, r21.w, cb11[r19.w + 3].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r19.w + 4].xyzx, r27.xyzx
      add_sat r21.w, r21.w, cb11[r19.w + 4].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r19.w + 5].xyzx, r27.xyzx
      add_sat r19.w, r21.w, cb11[r19.w + 5].w
      mul r17.x, r19.w, r20.w
      and r19.w, l(1), cb10[r17.w + 6].x
      movc r28.xy, r19.wwww, r17.xyxx, r17.zxzz
      mov r17.x, cb10[r17.w + 6].x
      mov r29.xy, r28.xyxx
      mov r19.w, l(1)
      loop 
        ige r20.w, r19.w, r19.z
        breakc_nz r20.w
        iadd r20.w, r18.w, r19.w
        imul null, r20.w, r20.w, l(6)
        dp3 r21.w, cb11[r20.w + 0].xyzx, r27.xyzx
        add_sat r21.w, r21.w, cb11[r20.w + 0].w
        mul r21.w, r21.w, r29.x
        dp3 r26.w, cb11[r20.w + 1].xyzx, r27.xyzx
        add_sat r26.w, r26.w, cb11[r20.w + 1].w
        mul r21.w, r21.w, r26.w
        dp3 r26.w, cb11[r20.w + 2].xyzx, r27.xyzx
        add_sat r26.w, r26.w, cb11[r20.w + 2].w
        mul r21.w, r21.w, r26.w
        dp3 r26.w, cb11[r20.w + 3].xyzx, r27.xyzx
        add_sat r26.w, r26.w, cb11[r20.w + 3].w
        mul r21.w, r21.w, r26.w
        dp3 r26.w, cb11[r20.w + 4].xyzx, r27.xyzx
        add_sat r26.w, r26.w, cb11[r20.w + 4].w
        mul r21.w, r21.w, r26.w
        dp3 r26.w, cb11[r20.w + 5].xyzx, r27.xyzx
        add_sat r20.w, r26.w, cb11[r20.w + 5].w
        mul r29.x, r20.w, r21.w
        ushr r26.w, r17.x, l(2)
        ubfe r27.w, l(1), l(2), r17.x
        and r28.z, r26.w, l(2)
        max r28.w, r29.x, r29.y
        mad r20.w, -r21.w, r20.w, l(1.000000)
        mul r20.w, r20.w, r29.y
        movc r19.y, r28.z, r20.w, r28.w
        movc r29.xy, r27.wwww, r29.xyxx, r19.xyxx
        iadd r19.w, r19.w, l(1)
        mov r17.x, r26.w
      endloop 
      add_sat r17.x, -r13.w, r29.y
      mul r18.w, r17.x, cb10[r17.w + 6].y
      lt r19.y, l(0.000000), r18.w
      if_nz r19.y
        mad r25.w, r17.x, cb10[r17.w + 6].y, r25.w
        mul r17.x, r18.w, cb10[r17.w + 7].y
        mov r28.x, cb10[r17.w + 7].w
        mov r28.yz, cb10[r17.w + 8].xxyx
        dp3 r18.w, r16.xyzx, r28.xyzx
        dp3 r19.y, r27.xyzx, r28.xyzx
        add r19.y, r19.y, -cb10[r17.w + 8].z
        ge r19.z, r19.y, l(0.000000)
        max r19.y, r6.w, |r19.y|
        movc r19.y, r19.z, r19.y, -r19.y
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.y, r18.w
        min r18.w, |r18.w|, l(131072.000000)
        mov r28.x, cb10[r17.w + 8].w
        mov r28.yz, cb10[r17.w + 9].xxyx
        dp3 r19.y, r16.xyzx, r28.xyzx
        dp3 r19.z, r27.xyzx, r28.xyzx
        add r19.z, r19.z, -cb10[r17.w + 9].z
        ge r19.w, r19.z, l(0.000000)
        max r19.z, r6.w, |r19.z|
        movc r19.z, r19.w, r19.z, -r19.z
        max r19.y, -r19.y, l(0.00000010)
        div r19.y, r19.z, r19.y
        min r18.w, r18.w, |r19.y|
        mov r28.x, cb10[r17.w + 9].w
        mov r28.yz, cb10[r17.w + 10].xxyx
        dp3 r19.y, r16.xyzx, r28.xyzx
        dp3 r19.z, r27.xyzx, r28.xyzx
        add r19.z, r19.z, -cb10[r17.w + 10].z
        ge r19.w, r19.z, l(0.000000)
        max r19.z, r6.w, |r19.z|
        movc r19.z, r19.w, r19.z, -r19.z
        max r19.y, -r19.y, l(0.00000010)
        div r19.y, r19.z, r19.y
        min r18.w, r18.w, |r19.y|
        mov r28.x, cb10[r17.w + 10].w
        mov r28.yz, cb10[r17.w + 11].xxyx
        dp3 r19.y, r16.xyzx, r28.xyzx
        dp3 r19.z, r27.xyzx, r28.xyzx
        add r19.z, r19.z, -cb10[r17.w + 11].z
        ge r19.w, r19.z, l(0.000000)
        max r19.z, r6.w, |r19.z|
        movc r19.z, r19.w, r19.z, -r19.z
        max r19.y, -r19.y, l(0.00000010)
        div r19.y, r19.z, r19.y
        min r18.w, r18.w, |r19.y|
        mov r28.x, cb10[r17.w + 11].w
        mov r28.yz, cb10[r17.w + 12].xxyx
        dp3 r19.y, r16.xyzx, r28.xyzx
        dp3 r19.z, r27.xyzx, r28.xyzx
        add r19.z, r19.z, -cb10[r17.w + 12].z
        ge r19.w, r19.z, l(0.000000)
        max r19.z, r6.w, |r19.z|
        movc r19.z, r19.w, r19.z, -r19.z
        max r19.y, -r19.y, l(0.00000010)
        div r19.y, r19.z, r19.y
        min r18.w, r18.w, |r19.y|
        mov r28.x, cb10[r17.w + 12].w
        mov r28.yz, cb10[r17.w + 13].xxyx
        dp3 r19.y, r16.xyzx, r28.xyzx
        dp3 r19.z, r27.xyzx, r28.xyzx
        add r19.z, r19.z, -cb10[r17.w + 13].z
        ge r19.w, r19.z, l(0.000000)
        max r19.z, r6.w, |r19.z|
        movc r19.z, r19.w, r19.z, -r19.z
        max r19.y, -r19.y, l(0.00000010)
        div r19.y, r19.z, r19.y
        min r18.w, r18.w, |r19.y|
        add r28.x, r27.x, cb10[r17.w + 3].w
        add r28.yz, r27.yyzy, cb10[r17.w + 4].xxyx
        mad r19.yzw, r16.xxyz, r18.wwww, r28.xxyz
        dp3 r20.w, r19.yzwy, r19.yzwy
        sqrt r20.w, r20.w
        div r18.w, r18.w, r20.w
        add r18.w, r18.w, r18.w
        sqrt r18.w, r18.w
        mad r18.w, r2.w, l(5.000000), r18.w
        add r18.w, r18.w, l(-0.844800)
        mov r28.x, cb10[r17.w + 0].w
        mov r28.y, cb10[r17.w + 1].z
        mov r28.z, cb10[r17.w + 2].y
        dp3 r30.x, r19.yzwy, r28.xyzx
        mov r31.xy, cb10[r17.w + 1].xwxx
        mov r31.z, cb10[r17.w + 2].z
        dp3 r30.y, r19.yzwy, r31.xyzx
        mov r32.x, cb10[r17.w + 1].y
        mov r32.yz, cb10[r17.w + 2].xxwx
        dp3 r30.z, r19.yzwy, r32.xyzx
        ubfe r19.y, l(9), l(16), cb10[r17.w + 7].z
        utof r30.w, r19.y
        sample_l_indexable(texturecubearray)(float,float,float,float) r19.yzw, r30.xyzw, t8.wxyz, s2, r18.w
        dp3 r33.x, r27.xyzx, r28.xyzx
        dp3 r33.y, r27.xyzx, r31.xyzx
        dp3 r33.z, r27.xyzx, r32.xyzx
        mad_sat r27.xyz, r33.xyzx, cb10[r17.w + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
        mul r33.xy, r27.xyxx, cb10[r17.w + 4].zwzz
        mul r33.z, r27.z, cb10[r17.w + 5].x
        add r27.xyz, r33.xyzx, cb10[r17.w + 5].yzwy
        dp3 r30.x, r11.xyzx, r28.xyzx
        dp3 r30.y, r11.xyzx, r31.xyzx
        dp3 r30.z, r11.xyzx, r32.xyzx
        lt r28.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r30.xyzx
        movc r18.z, r28.x, l(0), l(0.500000)
        add r29.xzw, r18.xxyz, r27.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r29.xzw, r29.xzwx, t17.xwyz, s4, l(0.000000)
        mul r31.xyz, r30.xyzx, r30.xyzx
        mul r31.xyz, r17.xxxx, r31.xyzx
        movc r20.z, r28.y, l(0), l(0.500000)
        add r28.xyw, r20.xyxz, r27.xyxz
        sample_l_indexable(texture3d)(float,float,float,float) r28.xyw, r28.xywx, t18.xywz, s4, l(0.000000)
        mul r28.xyw, r31.yyyy, r28.xyxw
        mad r28.xyw, r29.xzxw, r31.xxxx, r28.xyxw
        movc r21.z, r28.z, l(0), l(0.500000)
        add r27.xyz, r21.xyzx, r27.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r27.xyz, r27.xyzx, t19.xyzw, s4, l(0.000000)
        mad r27.xyz, r27.xyzx, r31.zzzz, r28.xywx
        sample_l_indexable(texturecubearray)(float,float,float,float) r28.xyz, r30.xyzw, t8.xyzw, s2, l(6.000000)
        mul r29.xzw, r27.xxyz, r28.xxyz
        dp3 r17.w, r29.xzwx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r26.xyz, r27.xyzx, r28.xyzx, r26.xyzx
        mul r18.z, r7.w, r17.w
        mul r19.yzw, r17.xxxx, r19.yyzw
        dp3 r17.x, r19.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r17.x, r7.w, r17.w, r17.x
        div r17.x, r18.z, r17.x
        mad r25.xyz, r19.yzwy, r17.xxxx, r25.xyzx
      endif 
    endloop 
    mov r24.xyzw, r25.xyzw
    mov r15.yzw, r26.xxyz
    iadd r12.w, r12.w, l(32)
  endloop 
  mov r23.xyzw, r24.zxyw
  mov r22.xyz, r15.yzwy
  mov r23.xyzw, r23.yzxw
else 
  mov r23.x, r22.w
endif 
max r0.x, r23.w, l(1.000000)
rcp r0.x, r0.x
mov_sat r23.w, r23.w
mul r9.xyw, r0.xxxx, r22.xyxz
mul r15.yzw, r0.xxxx, r23.xxyz
lt r2.w, r23.w, l(0.990000)
if_nz r2.w
  add r2.w, -r23.w, l(1.000000)
  mul r6.w, r2.w, cb2[19].x
  add r17.xyz, r10.xyzx, -cb2[35].xyzx
  mul r18.x, r17.x, cb2[35].w
  mul r18.yz, r17.yyzy, cb2[36].xxyx
  add_sat r17.xyz, r18.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r18.xy, r17.xyxx, cb2[36].zwzz
  mul r18.z, r17.z, cb2[37].x
  add r17.xyz, r18.xyzx, cb2[37].yzwy
  lt r18.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r18.xyz, r18.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r18.w, l(0)
  add r19.xyz, r17.xyzx, r18.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t17.xyzw, s4, l(0.000000)
  mul r20.xyz, r11.xyzx, r11.xyzx
  mul r20.xyz, r6.wwww, r20.xyzx
  add r21.xyz, r17.xyzx, r18.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t18.xyzw, s4, l(0.000000)
  mul r21.xyz, r20.yyyy, r21.xyzx
  mad r19.xyz, r19.xyzx, r20.xxxx, r21.xyzx
  add r17.xyz, r17.xyzx, r18.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t19.xyzw, s4, l(0.000000)
  mad r17.xyz, r17.xyzx, r20.zzzz, r19.xyzx
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r17.xyz, r17.xyzx, r18.xyzx
  dp3 r6.w, r17.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r9.xyw, r22.xyxz, r0.xxxx, r17.xyxz
  mov r16.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r16.xyzw, t8.xyzw, s2, r5.w
  mad r0.x, cb2[19].x, r2.w, -r6.w
  mad r0.x, r2.y, r0.x, r6.w
  mad r15.yzw, r17.xxyz, r0.xxxx, r15.yyzw
endif 
mad r0.x, r4.z, r1.w, r2.x
log r0.x, |r0.x|
mul r0.x, r0.x, r1.z
exp r0.x, r0.x
mad r0.x, r4.z, r1.w, r0.x
add_sat r0.x, r0.x, l(-1.000000)
mul r9.xyw, r2.zzzz, r9.xyxw
and r17.xyz, r0.wwww, r9.xywx
mad r2.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t5.zxyw, s2, l(0.000000)
mul r15.yzw, r0.xxxx, r15.yyzw
mul r18.xyz, r2.yyyy, r15.yzwy
mul r2.yzw, r2.zzzz, r15.yyzw
sqrt r0.x, r1.z
mad r0.x, r0.x, l(0.500000), l(0.500000)
mul r0.x, r0.x, r0.x
mul r1.w, r0.x, l(0.500000)
mad r0.x, -r0.x, l(0.500000), l(1.000000)
mad r4.z, r2.x, r0.x, r1.w
mul r0.x, r0.x, r4.z
mul r1.w, r1.w, r4.z
not r4.z, r9.z
mov r19.x, -r13.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r10.w, l(1.000000)
mov r20.z, l(1.000000)
mov r21.w, l(1.000000)
mov r22.w, l(1.000000)
mov r23.w, l(1.000000)
mov r19.z, r13.x
mov r24.w, l(1.000000)
mov r19.yw, r14.xxxx
mov r13.y, r19.w
mov r14.y, r19.x
mov r14.z, r13.x
mov r25.x, r14.x
mov r25.y, r19.x
mov r25.z, r13.x
mov r26.w, l(1.000000)
mov r27.x, r14.x
mov r27.y, r19.x
mov r27.z, r13.x
mov r28.x, r14.x
mov r28.y, r19.x
mov r28.z, r13.x
mov r15.yzw, r9.xxyw
mov r29.xyz, r17.xyzx
mov r30.xyz, r18.xyzx
mov r31.xyz, r2.yzwy
mov r5.w, cb2[58].y
mov r6.w, l(0)
loop 
  uge r7.w, r6.w, cb2[0].x
  breakc_nz r7.w
  ushr r7.w, r6.w, l(5)
  iadd r7.w, r0.y, r7.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r7.w, r7.w, l(0), t26.xxxx
  mov r32.xyz, r15.yzwy
  mov r33.xyz, r29.xyzx
  mov r34.xyz, r30.xyzx
  mov r35.xyz, r31.xyzx
  mov r8.w, r5.w
  mov r11.w, r7.w
  loop 
    breakc_z r11.w
    firstbit_lo r12.w, r11.w
    ishl r13.z, l(1), r12.w
    not r13.z, r13.z
    and r11.w, r11.w, r13.z
    iadd r12.w, r6.w, r12.w
    imul null, r12.w, r12.w, l(15)
    ubfe r13.z, l(3), l(24), cb9[r12.w + 1].w
    ieq r13.w, r13.z, l(2)
    if_nz r13.w
      ubfe r13.w, l(3), l(27), cb9[r12.w + 1].w
      add r36.xy, -r10.xyxx, cb9[r12.w + 3].zwzz
      add r36.z, -r10.z, cb9[r12.w + 4].x
      dp3 r14.w, r36.xyzx, r36.xyzx
      rsq r14.w, r14.w
      mul r37.xyz, r14.wwww, r36.xyzx
      mul r16.w, r0.z, cb9[r12.w + 1].z
      mul r16.w, r16.w, l(0.250000)
      dp3 r17.w, r11.xyzx, r37.xyzx
      mov_sat r18.w, r17.w
      movc r20.w, r0.w, |r17.w|, r18.w
      lt r25.w, l(0.000000), r20.w
      if_nz r25.w
        mov r37.xyz, cb9[r12.w + 7].yzwy
        mov r37.w, cb9[r12.w + 8].x
        dp4 r25.w, r37.xyzw, r10.xyzw
        lt r27.w, r25.w, l(1.000000)
        if_nz r27.w
          mov r38.xyz, l(1.000000,1.000000,1.000000,0)
          mov r27.w, l(0)
        else 
          add r39.xyz, -r10.xyzx, cb9[r12.w + 0].xyzx
          mul r28.w, cb9[r12.w + 3].x, cb9[r12.w + 3].x
          dp3 r29.w, r39.xyzx, r39.xyzx
          div r28.w, r28.w, r29.w
          min r28.w, r28.w, l(1.000000)
          mad_sat r39.xy, r25.wwww, cb9[r12.w + 2].xzxx, cb9[r12.w + 2].ywyy
          mul r39.zw, r39.xxxy, r39.xxxy
          mad r39.xy, r39.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r39.xy, r39.xyxx, r39.zwzz
          mul r28.w, r28.w, r39.x
          mul r28.w, r39.y, r28.w
          mov r39.xyz, cb9[r12.w + 4].yzwy
          mov r39.w, cb9[r12.w + 5].x
          dp4 r39.x, r39.xyzw, r10.xyzw
          mov r40.xyz, cb9[r12.w + 5].yzwy
          mov r40.w, cb9[r12.w + 6].x
          dp4 r39.y, r40.xyzw, r10.xyzw
          div r20.xy, r39.xyxx, r25.wwww
          lt r25.w, cb9[r12.w + 10].w, l(0.00048828)
          if_nz r25.w
            mad_sat r39.xy, |r20.xyxx|, cb9[r12.w + 12].xyxx, cb9[r12.w + 12].zwzz
            mul r39.zw, r39.xxxy, r39.xxxy
            mad r39.xy, r39.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r39.xy, r39.xyxx, r39.zwzz
            mul r25.w, r39.y, r39.x
          else 
            mul_sat r39.xyzw, |r20.yyxx|, cb9[r12.w + 11].xyzw
            log r39.xyzw, r39.xyzw
            mul r39.xyzw, r39.xyzw, cb9[r12.w + 12].zzzz
            exp r39.xyzw, r39.xyzw
            add r39.xy, r39.zwzz, r39.xyxx
            log r39.xy, r39.xyxx
            mul r39.xy, r39.xyxx, cb9[r12.w + 12].wwww
            exp r39.xy, r39.xyxx
            mul r29.w, r39.x, cb9[r12.w + 12].x
            mad r30.w, cb9[r12.w + 12].y, r39.y, l(-1.000000)
            mad r29.w, cb9[r12.w + 12].y, r39.y, -r29.w
            div_sat r29.w, r30.w, r29.w
            mul r30.w, r29.w, r29.w
            mad r29.w, r29.w, l(-2.000000), l(3.000000)
            mul r25.w, r29.w, r30.w
          endif 
          mul r27.w, r25.w, r28.w
          and r25.w, l(255), cb9[r12.w + 14].w
          if_nz r25.w
            dp3 r28.w, cb9[r12.w + 13].xyzx, r20.xyzx
            mov r39.x, cb9[r12.w + 13].w
            mov r39.yz, cb9[r12.w + 14].xxyx
            dp3 r20.x, r39.xyzx, r20.xyzx
            frc r39.x, r28.w
            frc r39.y, r20.x
            iadd r20.x, r25.w, l(-1)
            utof r39.z, r20.x
            sample_l_indexable(texture2darray)(float,float,float,float) r38.xyz, r39.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r38.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r39.x, cb9[r12.w + 0].w
        mov r39.yz, cb9[r12.w + 1].xxyx
        mul r38.xyz, r38.xyzx, r39.xyzx
        lt r20.x, l(0.000000), r27.w
        if_nz r20.x
          ine r13.w, r13.w, l(1)
          if_nz r13.w
            mad r13.w, |r17.w|, l(-0.200000), l(0.400000)
            lt r20.x, r17.w, l(0.000000)
            and r20.x, r0.w, r20.x
            movc r13.w, r20.x, -r13.w, r13.w
            mad r21.xyz, r11.xyzx, r13.wwww, r10.xyzx
            mov r39.xyz, cb9[r12.w + 6].yzwy
            mov r39.w, cb9[r12.w + 7].x
            dp4 r13.w, r39.xyzw, r21.xyzw
            dp4 r20.x, r37.xyzw, r21.xyzw
            ge r20.y, r20.x, r13.w
            if_nz r20.y
              mov r37.xyz, cb9[r12.w + 4].yzwy
              mov r37.w, cb9[r12.w + 5].x
              dp4 r37.x, r37.xyzw, r21.xyzw
              mov r39.xyz, cb9[r12.w + 5].yzwy
              mov r39.w, cb9[r12.w + 6].x
              dp4 r37.y, r39.xyzw, r21.xyzw
              div r21.xy, r37.xyxx, r20.xxxx
              mad_sat r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r37.x, r21.x, cb9[r12.w + 8].y, cb9[r12.w + 8].z
              mad r37.y, r21.y, cb9[r12.w + 8].w, cb9[r12.w + 9].x
              div r13.w, r13.w, r20.x
              max r13.w, r13.w, l(0.00006104)
              and r20.x, l(0x0000ffff), cb9[r12.w + 1].w
              if_nz r8.w
                utof r21.z, r20.x
                mov r20.y, l(0)
                mov r25.w, l(0)
                loop 
                  ige r28.w, r25.w, l(8)
                  breakc_nz r28.w
                  dp2 r39.x, icb[r25.w + 0].yxyy, r19.xyxx
                  dp2 r39.y, icb[r25.w + 0].yxyy, r19.yzyy
                  mad r21.xy, r39.xyxx, cb9[r12.w + 3].yyyy, r37.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r13.w
                  mad r20.y, r21.x, l(0.125000), r20.y
                  iadd r25.w, r25.w, l(1)
                endloop 
              else 
                utof r37.z, r20.x
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.y, r37.xyzx, t9.xxxx, s13, r13.w
              endif 
              mul r13.w, r20.y, r20.y
              mul r13.w, r20.y, r13.w
            else 
              mov r13.w, l(1.000000)
            endif 
          else 
            mov r13.w, l(1.000000)
          endif 
          mul r13.w, r13.w, r27.w
          lt r20.x, l(0.000000), r13.w
          if_nz r20.x
            ubfe r20.x, l(4), l(16), cb9[r12.w + 1].w
            ult r21.x, l(0), r20.x
            and r21.x, r9.z, r21.x
            if_nz r21.x
              iadd r20.x, r20.x, cb2[0].x
              imad r20.x, r20.x, l(15), l(-15)
              mad r21.x, |r17.w|, l(-0.200000), l(0.400000)
              lt r21.y, r17.w, l(0.000000)
              and r21.y, r0.w, r21.y
              movc r21.x, r21.y, -r21.x, r21.x
              mad r22.xyz, r11.xyzx, r21.xxxx, r10.xyzx
              mov r37.xyz, cb9[r20.x + 6].yzwy
              mov r37.w, cb9[r20.x + 7].x
              dp4 r21.x, r37.xyzw, r22.xyzw
              mov r37.xyz, cb9[r20.x + 7].yzwy
              mov r37.w, cb9[r20.x + 8].x
              dp4 r21.y, r37.xyzw, r22.xyzw
              lt r21.z, r21.y, r21.x
              if_z r21.z
                mov r37.xyz, cb9[r20.x + 4].yzwy
                mov r37.w, cb9[r20.x + 5].x
                dp4 r37.x, r37.xyzw, r22.xyzw
                mov r39.xyz, cb9[r20.x + 5].yzwy
                mov r39.w, cb9[r20.x + 6].x
                dp4 r37.y, r39.xyzw, r22.xyzw
                div r22.xy, r37.xyxx, r21.yyyy
                mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r37.x, r22.x, cb9[r20.x + 9].w
                add r37.y, r22.y, cb9[r20.x + 10].x
                mul r22.xy, r37.xyxx, cb9[r20.x + 9].yzyy
                div r37.xy, cb9[r20.x + 3].yyyy, cb9[r20.x + 8].ywyy
                add r37.zw, -r37.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r37.zw, r22.xxxy, r37.zzzw
                ge r37.xy, r37.xyxx, r22.xyxx
                or r37.xy, r37.xyxx, r37.zwzz
                or r22.z, r37.y, r37.x
                if_z r22.z
                  mov_sat r22.xy, r22.xyxx
                  mad r37.x, r22.x, cb9[r20.x + 8].y, cb9[r20.x + 8].z
                  mad r37.y, r22.y, cb9[r20.x + 8].w, cb9[r20.x + 9].x
                  mul r22.x, r21.y, cb9[r20.x + 10].z
                  mad r21.x, cb9[r20.x + 10].y, r21.y, r21.x
                  div r21.x, r21.x, r22.x
                endif 
              else 
                mov r22.z, l(-1)
              endif 
              or r21.y, r21.z, r22.z
              if_z r21.y
                max r21.x, r21.x, l(0.00006104)
                and r21.y, l(0x0000ffff), cb9[r20.x + 1].w
                if_nz r8.w
                  utof r22.z, r21.y
                  mov r21.z, l(0)
                  mov r25.w, l(0)
                  loop 
                    ige r27.w, r25.w, l(8)
                    breakc_nz r27.w
                    dp2 r39.x, icb[r25.w + 0].yxyy, r19.xwxx
                    dp2 r39.y, icb[r25.w + 0].xyxx, r13.xyxx
                    mad r22.xy, r39.xyxx, cb9[r20.x + 3].yyyy, r37.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r21.x
                    mad r21.z, r22.x, l(0.125000), r21.z
                    iadd r25.w, r25.w, l(1)
                  endloop 
                else 
                  utof r37.z, r21.y
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.z, r37.xyzx, t9.xxxx, s13, r21.x
                endif 
                mul r20.x, r21.z, r21.z
                mul r20.x, r21.z, r20.x
              else 
                mov r20.x, l(1.000000)
              endif 
              mul r13.w, r13.w, r20.x
            else 
              ubfe r20.x, l(4), l(20), cb9[r12.w + 1].w
              ult r21.x, l(0), r20.x
              and r21.x, r4.z, r21.x
              if_nz r21.x
                iadd r20.x, r20.x, cb2[0].x
                imad r20.x, r20.x, l(15), l(-15)
                mad r21.x, |r17.w|, l(-0.200000), l(0.400000)
                lt r21.y, r17.w, l(0.000000)
                and r21.y, r0.w, r21.y
                movc r21.x, r21.y, -r21.x, r21.x
                mad r23.xyz, r11.xyzx, r21.xxxx, r10.xyzx
                mov r37.xyz, cb9[r20.x + 6].yzwy
                mov r37.w, cb9[r20.x + 7].x
                dp4 r21.x, r37.xyzw, r23.xyzw
                mov r37.xyz, cb9[r20.x + 7].yzwy
                mov r37.w, cb9[r20.x + 8].x
                dp4 r21.y, r37.xyzw, r23.xyzw
                lt r22.x, r21.y, r21.x
                if_z r22.x
                  mov r37.xyz, cb9[r20.x + 4].yzwy
                  mov r37.w, cb9[r20.x + 5].x
                  dp4 r37.x, r37.xyzw, r23.xyzw
                  mov r39.xyz, cb9[r20.x + 5].yzwy
                  mov r39.w, cb9[r20.x + 6].x
                  dp4 r37.y, r39.xyzw, r23.xyzw
                  div r22.yz, r37.xxyx, r21.yyyy
                  mad r22.yz, r22.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                  add r23.x, r22.y, cb9[r20.x + 9].w
                  add r23.y, r22.z, cb9[r20.x + 10].x
                  mul r22.yz, r23.xxyx, cb9[r20.x + 9].yyzy
                  div r23.xy, cb9[r20.x + 3].yyyy, cb9[r20.x + 8].ywyy
                  add r37.xy, -r23.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r37.xy, r22.yzyy, r37.xyxx
                  ge r23.xy, r23.xyxx, r22.yzyy
                  or r23.xy, r23.xyxx, r37.xyxx
                  or r23.x, r23.y, r23.x
                  if_z r23.x
                    mov_sat r22.yz, r22.yyzy
                    mad r37.x, r22.y, cb9[r20.x + 8].y, cb9[r20.x + 8].z
                    mad r37.y, r22.z, cb9[r20.x + 8].w, cb9[r20.x + 9].x
                    mul r22.y, r21.y, cb9[r20.x + 10].z
                    mad r21.x, cb9[r20.x + 10].y, r21.y, r21.x
                    div r21.x, r21.x, r22.y
                  endif 
                else 
                  mov r23.x, l(-1)
                endif 
                or r21.y, r22.x, r23.x
                if_z r21.y
                  max r21.x, r21.x, l(0.00006104)
                  and r21.y, l(0x0000ffff), cb9[r20.x + 1].w
                  if_nz r8.w
                    utof r22.z, r21.y
                    mov r23.xy, l(0,0,0,0)
                    loop 
                      ige r23.z, r23.y, l(8)
                      breakc_nz r23.z
                      dp2 r39.x, icb[r23.y + 0].xyxx, r25.xyxx
                      dp2 r39.y, icb[r23.y + 0].yxyy, r25.xzxx
                      mad r22.xy, r39.xyxx, cb9[r20.x + 3].yyyy, r37.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r21.x
                      mad r23.x, r22.x, l(0.125000), r23.x
                      iadd r23.y, r23.y, l(1)
                    endloop 
                  else 
                    utof r37.z, r21.y
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r37.xyzx, t9.xxxx, s13, r21.x
                  endif 
                  mul r20.x, r23.x, r23.x
                  mul r20.x, r23.x, r20.x
                else 
                  mov r20.x, l(1.000000)
                endif 
                mul r13.w, r13.w, r20.x
              endif 
            endif 
            mad r20.x, -r20.w, r2.x, l(1.000000)
            mul r20.x, r20.x, r20.x
            mad r20.x, -r20.x, l(0.620000), l(0.620000)
            add r20.x, -r20.w, r20.x
            mad r20.x, r1.z, r20.x, r20.w
            mul r20.x, r13.w, r20.x
            lt r17.w, l(0.000000), r17.w
            mad r22.xyz, r20.xxxx, r38.xyzx, r32.xyzx
            mad r36.xyz, r36.xyzx, r14.wwww, r12.xyzx
            dp3 r14.w, r36.xyzx, r36.xyzx
            rsq r14.w, r14.w
            mul r36.xyz, r14.wwww, r36.xyzx
            dp3 r14.w, r36.xyzx, r12.xyzx
            dp3 r20.w, r11.xyzx, r36.xyzx
            mad r21.x, |r20.w|, r0.z, -|r20.w|
            mad r20.w, |r20.w|, r21.x, l(1.000000)
            mad r21.x, r18.w, r0.x, r1.w
            mul r20.w, r20.w, r20.w
            mul r20.w, r21.x, r20.w
            rcp r20.w, r20.w
            mul r16.w, r16.w, r18.w
            mul r16.w, r16.w, r20.w
            mul r13.w, r13.w, r16.w
            mad r36.xyz, r13.wwww, r38.xyzx, r35.xyzx
            add_sat r14.w, -r14.w, l(1.000000)
            mul r16.w, r14.w, r14.w
            mul r16.w, r16.w, r16.w
            mul r14.w, r14.w, r16.w
            mul r13.w, r13.w, r14.w
            mad r37.xyz, r13.wwww, r38.xyzx, r34.xyzx
            mad r38.xyz, r20.xxxx, r38.xyzx, r33.xyzx
            movc r38.xyz, r0.wwww, r38.xyzx, r33.xyzx
            movc r32.xyz, r17.wwww, r22.xyzx, r32.xyzx
            movc r33.xyz, r17.wwww, r33.xyzx, r38.xyzx
            movc r34.xyz, r17.wwww, r37.xyzx, r34.xyzx
            movc r35.xyz, r17.wwww, r36.xyzx, r35.xyzx
          endif 
        endif 
      endif 
    else 
      ieq r13.z, r13.z, l(4)
      if_nz r13.z
        ubfe r13.z, l(3), l(27), cb9[r12.w + 1].w
        mul r13.w, r0.z, cb9[r12.w + 1].z
        mul r13.w, r13.w, l(0.250000)
        lt r14.w, l(0.000000), cb9[r12.w + 6].y
        mov r22.xy, cb9[r12.w + 5].zwzz
        mov r22.z, cb9[r12.w + 6].x
        mad r36.xyz, -r22.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), cb9[r12.w + 0].xyzx
        add r37.xyz, -r10.xyzx, r36.xyzx
        dp3 r16.w, r22.xyzx, r16.xyzx
        dp3 r17.w, r22.xyzx, r37.xyzx
        dp3 r18.w, r16.xyzx, r37.xyzx
        mad r20.x, -r16.w, r16.w, cb9[r12.w + 6].y
        mad r16.w, r16.w, r18.w, -r17.w
        div_sat r17.w, -r17.w, cb9[r12.w + 6].y
        div_sat r16.w, r16.w, r20.x
        div r18.w, r20.x, cb9[r12.w + 6].y
        mul r18.w, r18.w, l(10.000000)
        min r18.w, r18.w, l(1.000000)
        add r16.w, -r17.w, r16.w
        mad r16.w, r18.w, r16.w, r17.w
        mad r37.xyz, r16.wwww, r22.xyzx, r36.xyzx
        mad r22.xyz, r17.wwww, r22.xyzx, r36.xyzx
        movc r22.xyz, r14.wwww, r22.xyzx, cb9[r12.w + 0].xyzx
        movc r36.xyz, r14.wwww, r37.xyzx, cb9[r12.w + 0].xyzx
        add r36.xyz, -r10.xyzx, r36.xyzx
        add r22.xyz, -r10.xyzx, r22.xyzx
        dp3 r14.w, r36.xyzx, r36.xyzx
        rsq r14.w, r14.w
        mul r37.xyz, r14.wwww, r36.xyzx
        dp3 r16.w, r22.xyzx, r22.xyzx
        rsq r17.w, r16.w
        mul r22.xyz, r17.wwww, r22.xyzx
        dp3 r17.w, r11.xyzx, r22.xyzx
        mov_sat r18.w, r17.w
        movc r18.w, r0.w, |r17.w|, r18.w
        lt r20.x, l(0.000000), r18.w
        if_nz r20.x
          sqrt r20.x, r16.w
          mul r20.w, cb9[r12.w + 3].x, cb9[r12.w + 3].x
          div r16.w, r20.w, r16.w
          min r16.w, r16.w, l(1.000000)
          mad_sat r20.xw, r20.xxxx, cb9[r12.w + 2].xxxz, cb9[r12.w + 2].yyyw
          mul r21.xy, r20.xwxx, r20.xwxx
          mad r20.xw, r20.xxxw, l(-2.000000, 0.000000, 0.000000, -2.000000), l(3.000000, 0.000000, 0.000000, 3.000000)
          mul r20.xw, r20.xxxw, r21.xxxy
          mul r16.w, r16.w, r20.x
          mul r16.w, r20.w, r16.w
          lt r20.x, l(0.000000), r16.w
          if_nz r20.x
            ine r13.z, r13.z, l(1)
            if_nz r13.z
              mad r13.z, |r17.w|, l(-0.200000), l(0.400000)
              lt r20.x, r17.w, l(0.000000)
              and r20.x, r0.w, r20.x
              movc r13.z, r20.x, -r13.z, r13.z
              mad r22.xyz, r11.xyzx, r13.zzzz, r10.xyzx
              add r22.xyz, r22.xyzx, -cb9[r12.w + 4].yzwy
              max r13.z, |r22.z|, |r22.y|
              max r13.z, r13.z, |r22.x|
              div r13.z, cb9[r12.w + 5].x, r13.z
              add r13.z, r13.z, cb9[r12.w + 5].y
              dp3 r20.x, r22.xyzx, r22.xyzx
              rsq r20.x, r20.x
              max r13.z, r13.z, l(0.00006104)
              and r20.w, l(0x0000ffff), cb9[r12.w + 1].w
              utof r38.w, r20.w
              mov r20.w, l(0)
              mov r21.x, l(0)
              loop 
                ige r21.y, r21.x, l(8)
                breakc_nz r21.y
                dp2 r23.y, icb[r21.x + 0].xyxx, r14.xyxx
                dp2 r23.z, icb[r21.x + 0].yxyy, r14.xzxx
                mul r39.yz, r23.yyzy, cb9[r12.w + 3].yyyy
                mul r39.x, r15.x, r39.y
                mul r39.w, r3.x, r39.y
                mad r38.xyz, r22.xyzx, r20.xxxx, r39.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r21.y, r38.xyzw, t10.xxxx, s13, r13.z
                mad r20.w, r21.y, l(0.125000), r20.w
                iadd r21.x, r21.x, l(1)
              endloop 
            else 
              mov r20.w, l(1.000000)
            endif 
            mul r13.z, r16.w, r20.w
            lt r16.w, l(0.000000), r13.z
            if_nz r16.w
              ubfe r16.w, l(4), l(16), cb9[r12.w + 1].w
              ult r20.x, l(0), r16.w
              and r20.x, r9.z, r20.x
              if_nz r20.x
                iadd r16.w, r16.w, cb2[0].x
                imad r16.w, r16.w, l(15), l(-15)
                mad r20.x, |r17.w|, l(-0.200000), l(0.400000)
                lt r21.x, r17.w, l(0.000000)
                and r21.x, r0.w, r21.x
                movc r20.x, r21.x, -r20.x, r20.x
                mad r24.xyz, r11.xyzx, r20.xxxx, r10.xyzx
                mov r38.xyz, cb9[r16.w + 6].yzwy
                mov r38.w, cb9[r16.w + 7].x
                dp4 r20.x, r38.xyzw, r24.xyzw
                mov r38.xyz, cb9[r16.w + 7].yzwy
                mov r38.w, cb9[r16.w + 8].x
                dp4 r21.x, r38.xyzw, r24.xyzw
                lt r21.y, r21.x, r20.x
                if_z r21.y
                  mov r38.xyz, cb9[r16.w + 4].yzwy
                  mov r38.w, cb9[r16.w + 5].x
                  dp4 r22.x, r38.xyzw, r24.xyzw
                  mov r38.xyz, cb9[r16.w + 5].yzwy
                  mov r38.w, cb9[r16.w + 6].x
                  dp4 r22.y, r38.xyzw, r24.xyzw
                  div r22.xy, r22.xyxx, r21.xxxx
                  mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r24.x, r22.x, cb9[r16.w + 9].w
                  add r24.y, r22.y, cb9[r16.w + 10].x
                  mul r22.xy, r24.xyxx, cb9[r16.w + 9].yzyy
                  div r23.yz, cb9[r16.w + 3].yyyy, cb9[r16.w + 8].yywy
                  add r24.xy, -r23.yzyy, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r24.xy, r22.xyxx, r24.xyxx
                  ge r23.yz, r23.yyzy, r22.xxyx
                  or r23.yz, r23.yyzy, r24.xxyx
                  or r22.z, r23.z, r23.y
                  if_z r22.z
                    mov_sat r22.xy, r22.xyxx
                    mad r24.x, r22.x, cb9[r16.w + 8].y, cb9[r16.w + 8].z
                    mad r24.y, r22.y, cb9[r16.w + 8].w, cb9[r16.w + 9].x
                    mul r22.x, r21.x, cb9[r16.w + 10].z
                    mad r20.x, cb9[r16.w + 10].y, r21.x, r20.x
                    div r20.x, r20.x, r22.x
                  endif 
                else 
                  mov r22.z, l(-1)
                endif 
                or r21.x, r21.y, r22.z
                if_z r21.x
                  max r20.x, r20.x, l(0.00006104)
                  and r21.x, l(0x0000ffff), cb9[r16.w + 1].w
                  if_nz r8.w
                    utof r22.z, r21.x
                    mov r21.y, l(0)
                    mov r23.y, l(0)
                    loop 
                      ige r23.z, r23.y, l(8)
                      breakc_nz r23.z
                      dp2 r38.x, icb[r23.y + 0].xyxx, r27.xyxx
                      dp2 r38.y, icb[r23.y + 0].yxyy, r27.xzxx
                      mad r22.xy, r38.xyxx, cb9[r16.w + 3].yyyy, r24.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r20.x
                      mad r21.y, r22.x, l(0.125000), r21.y
                      iadd r23.y, r23.y, l(1)
                    endloop 
                  else 
                    utof r24.z, r21.x
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.y, r24.xyzx, t9.xxxx, s13, r20.x
                  endif 
                  mul r16.w, r21.y, r21.y
                  mul r16.w, r21.y, r16.w
                else 
                  mov r16.w, l(1.000000)
                endif 
                mul r13.z, r13.z, r16.w
              else 
                ubfe r16.w, l(4), l(20), cb9[r12.w + 1].w
                ult r20.x, l(0), r16.w
                and r20.x, r4.z, r20.x
                if_nz r20.x
                  iadd r16.w, r16.w, cb2[0].x
                  imad r16.w, r16.w, l(15), l(-15)
                  mad r20.x, |r17.w|, l(-0.200000), l(0.400000)
                  lt r21.x, r17.w, l(0.000000)
                  and r21.x, r0.w, r21.x
                  movc r20.x, r21.x, -r20.x, r20.x
                  mad r26.xyz, r11.xyzx, r20.xxxx, r10.xyzx
                  mov r38.xyz, cb9[r16.w + 6].yzwy
                  mov r38.w, cb9[r16.w + 7].x
                  dp4 r20.x, r38.xyzw, r26.xyzw
                  mov r38.xyz, cb9[r16.w + 7].yzwy
                  mov r38.w, cb9[r16.w + 8].x
                  dp4 r21.x, r38.xyzw, r26.xyzw
                  lt r22.x, r21.x, r20.x
                  if_z r22.x
                    mov r38.xyz, cb9[r16.w + 4].yzwy
                    mov r38.w, cb9[r16.w + 5].x
                    dp4 r24.x, r38.xyzw, r26.xyzw
                    mov r38.xyz, cb9[r16.w + 5].yzwy
                    mov r38.w, cb9[r16.w + 6].x
                    dp4 r24.y, r38.xyzw, r26.xyzw
                    div r22.yz, r24.xxyx, r21.xxxx
                    mad r22.yz, r22.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                    add r24.x, r22.y, cb9[r16.w + 9].w
                    add r24.y, r22.z, cb9[r16.w + 10].x
                    mul r22.yz, r24.xxyx, cb9[r16.w + 9].yyzy
                    div r23.yz, cb9[r16.w + 3].yyyy, cb9[r16.w + 8].yywy
                    add r24.xy, -r23.yzyy, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r24.xy, r22.yzyy, r24.xyxx
                    ge r23.yz, r23.yyzy, r22.yyzy
                    or r23.yz, r23.yyzy, r24.xxyx
                    or r23.y, r23.z, r23.y
                    if_z r23.y
                      mov_sat r22.yz, r22.yyzy
                      mad r24.x, r22.y, cb9[r16.w + 8].y, cb9[r16.w + 8].z
                      mad r24.y, r22.z, cb9[r16.w + 8].w, cb9[r16.w + 9].x
                      mul r22.y, r21.x, cb9[r16.w + 10].z
                      mad r20.x, cb9[r16.w + 10].y, r21.x, r20.x
                      div r20.x, r20.x, r22.y
                    endif 
                  else 
                    mov r23.y, l(-1)
                  endif 
                  or r21.x, r22.x, r23.y
                  if_z r21.x
                    max r20.x, r20.x, l(0.00006104)
                    and r21.x, l(0x0000ffff), cb9[r16.w + 1].w
                    if_nz r8.w
                      utof r22.z, r21.x
                      mov r23.yz, l(0,0,0,0)
                      loop 
                        ige r25.w, r23.z, l(8)
                        breakc_nz r25.w
                        dp2 r26.x, icb[r23.z + 0].xyxx, r28.xyxx
                        dp2 r26.y, icb[r23.z + 0].yxyy, r28.xzxx
                        mad r22.xy, r26.xyxx, cb9[r16.w + 3].yyyy, r24.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r20.x
                        mad r23.y, r22.x, l(0.125000), r23.y
                        iadd r23.z, r23.z, l(1)
                      endloop 
                    else 
                      utof r24.z, r21.x
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.y, r24.xyzx, t9.xxxx, s13, r20.x
                    endif 
                    mul r16.w, r23.y, r23.y
                    mul r16.w, r23.y, r16.w
                  else 
                    mov r16.w, l(1.000000)
                  endif 
                  mul r13.z, r13.z, r16.w
                endif 
              endif 
              mad r16.w, -r18.w, r2.x, l(1.000000)
              mul r16.w, r16.w, r16.w
              mad r16.w, -r16.w, l(0.620000), l(0.620000)
              add r16.w, -r18.w, r16.w
              mad r16.w, r1.z, r16.w, r18.w
              mul r16.w, r13.z, r16.w
              mov r22.x, cb9[r12.w + 0].w
              mov r22.yz, cb9[r12.w + 1].xxyx
              lt r12.w, l(0.000000), r17.w
              mad r24.xyz, r16.wwww, r22.xyzx, r32.xyzx
              dp3_sat r17.w, r11.xyzx, r37.xyzx
              mad r26.xyz, r36.xyzx, r14.wwww, r12.xyzx
              dp3 r14.w, r26.xyzx, r26.xyzx
              rsq r14.w, r14.w
              mul r26.xyz, r14.wwww, r26.xyzx
              dp3 r14.w, r26.xyzx, r12.xyzx
              dp3 r18.w, r11.xyzx, r26.xyzx
              mad r20.x, |r18.w|, r0.z, -|r18.w|
              mad r18.w, |r18.w|, r20.x, l(1.000000)
              mad r20.x, r17.w, r0.x, r1.w
              mul r18.w, r18.w, r18.w
              mul r18.w, r20.x, r18.w
              rcp r18.w, r18.w
              mul r13.w, r13.w, r17.w
              mul r13.w, r13.w, r18.w
              mul r13.z, r13.z, r13.w
              mad r26.xyz, r13.zzzz, r22.xyzx, r35.xyzx
              add_sat r13.w, -r14.w, l(1.000000)
              mul r14.w, r13.w, r13.w
              mul r14.w, r14.w, r14.w
              mul r13.w, r13.w, r14.w
              mul r13.z, r13.w, r13.z
              mad r36.xyz, r13.zzzz, r22.xyzx, r34.xyzx
              mad r22.xyz, r16.wwww, r22.xyzx, r33.xyzx
              movc r22.xyz, r0.wwww, r22.xyzx, r33.xyzx
              movc r32.xyz, r12.wwww, r24.xyzx, r32.xyzx
              movc r33.xyz, r12.wwww, r33.xyzx, r22.xyzx
              movc r34.xyz, r12.wwww, r36.xyzx, r34.xyzx
              movc r35.xyz, r12.wwww, r26.xyzx, r35.xyzx
            endif 
          endif 
        endif 
      endif 
    endif 
  endloop 
  mov r15.yzw, r32.xxyz
  mov r29.xyz, r33.xyzx
  mov r30.xyz, r34.xyzx
  mov r31.xyz, r35.xyzx
  iadd r6.w, r6.w, l(32)
endloop 
mad r2.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.x, r2.y
mad r4.xyz, r5.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.y, r4.x
ieq r0.y, r0.x, r0.y
movc r0.yz, r0.yyyy, r4.yyzy, l(0,-1.000000,0,0)
mad r4.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r4.x
ieq r1.z, r0.x, r1.z
movc r1.zw, r1.zzzz, r4.yyyz, l(0,0,-1.000000,0)
mad r4.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r3.x, r4.x
ieq r3.x, r0.x, r3.x
movc r4.xy, r3.xxxx, r4.yzyy, l(-1.000000,0,0,0)
mad r5.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r3.x, r5.x
ieq r0.x, r0.x, r3.x
movc r4.zw, r0.xxxx, r5.yyyz, l(0,0,-1.000000,0)
mov r5.x, r0.y
mov r5.y, r1.z
mov r5.zw, r4.xxxz
add r5.xyzw, -r2.xxxx, r5.xyzw
ge r5.xyzw, |r5.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r5.xyzw, r5.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.x, r5.y, r5.x
add r0.x, r5.z, r0.x
add r0.x, r5.w, r0.x
mul r0.y, r1.w, r5.y
mad r0.y, r5.x, r0.z, r0.y
mad r0.y, r5.z, r4.y, r0.y
mad r0.y, r5.w, r4.w, r0.y
div r2.w, r0.y, r0.x
ge r0.x, l(0.000000), r0.x
movc r2.yz, r0.xxxx, l(0,0,0,0), r2.zzwz
and r0.xy, r1.xyxx, l(1, 1, 0, 0)
ieq r0.x, r0.y, r0.x
movc r0.xyz, r0.xxxx, r2.xyzx, r2.xzyx
mad r0.x, -r0.z, l(0.500000), r0.x
add r2.y, r0.x, r0.z
mad r2.z, -r0.y, l(0.500000), r0.x
add r2.x, r0.y, r2.z
mul r0.xyz, r3.yzwy, r15.yzwy
mad r0.xyz, r29.xyzx, r2.xyzx, r0.xyzx
mul r4.xyz, r30.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r4.xyz, r31.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000), r4.xyzx
add r0.xyz, r0.xyzx, r4.xyzx
add r4.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, r30.xyzx
mad r2.xyz, r31.xyzx, r2.xyzx, r4.xyzx
mad r2.xyz, r15.yzwy, r3.yzwy, r2.xyzx
movc r0.xyz, r0.wwww, r0.xyzx, r2.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r10.xyzx, r10.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r10.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r10.z|
    mul r3.xy, r10.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r10.z|
    mul r2.w, r10.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r10.z, cb2[6].x
  mad r1.z, cb2[6].x, r10.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r10.xyzx, r10.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r10.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 1491 instruction slots used
