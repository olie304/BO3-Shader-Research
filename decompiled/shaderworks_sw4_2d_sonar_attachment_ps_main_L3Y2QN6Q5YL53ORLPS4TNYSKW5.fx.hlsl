// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:40:39 2021

cbuffer _Globals : register(b0)
{
  float4 flagParams : packoffset(c0);
  float4 colorObjMin : packoffset(c1);
  float4 colorObjMax : packoffset(c2);
  float colorObjMinBaseBlend : packoffset(c3);
  float colorObjMaxBaseBlend : packoffset(c3.y);
  float2 uvScroll : packoffset(c3.z);
  float4 detailScale : packoffset(c4);
  float4 detailScale1 : packoffset(c5);
  float4 detailScale2 : packoffset(c6);
  float4 detailScale3 : packoffset(c7);
  float4 alphaRevealParms : packoffset(c8);
  float4 colorDetailScale : packoffset(c9);
  float ScatterAmount : packoffset(c10);
  float ScatterFalloff : packoffset(c10.y);
  float2 ScatterSize : packoffset(c10.z);
  float MinDepth : packoffset(c11);
  float MaxDepth : packoffset(c11.y);
  float DepthColorCurve : packoffset(c11.z);
  float PulseMaxDistIntensity : packoffset(c11.w);
  float SceneNoise : packoffset(c12);
  float LineNoise : packoffset(c12.y);
  float GlobalNoise : packoffset(c12.z);
  float Pulse_Interval : packoffset(c12.w);
  float Pulse_Time : packoffset(c13);
  float4 LineColor : packoffset(c14);
  float ScanBias : packoffset(c15);
  float ScrollSpeed : packoffset(c15.y);
  float LineScale : packoffset(c15.z);
  float Static_Size : packoffset(c15.w);
  float Static_amount : packoffset(c16);
  float Scanline_amount : packoffset(c16.y);
  float Player_Scanline_Scroll_Speed : packoffset(c16.z);
  float Tearing_amount : packoffset(c16.w);
}

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}

SamplerState LookupMap_Sampler_s : register(s1);
SamplerState MaskMap_Sampler_s : register(s2);
SamplerState Static_Noise_Map_Sampler_s : register(s3);
SamplerState ScanlineMap_Sampler_s : register(s4);
SamplerState Lookup_Sampler_s : register(s5);
SamplerState sonarColorSampler_C1_P0_sampler_s : register(s6);
SamplerState floatZSampler_C2_P0_sampler_s : register(s7);
Texture2D<float4> LookupMap : register(t0);
Texture2D<float4> MaskMap : register(t6);
Texture2D<float4> Static_Noise_Map : register(t7);
Texture2D<float4> ScanlineMap : register(t9);
Texture2D<float4> Lookup : register(t10);
Texture2D<float4> sonarColorSampler_C1_P0 : register(t11);
Texture2D<float4> floatZSampler_C2_P0 : register(t12);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD2,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy / ScatterSize.xy;
  r0.xy = v2.zw + r0.xy;
  r0.xyz = Static_Noise_Map.Sample(Static_Noise_Map_Sampler_s, r0.xy).xyz;
  r0.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + r0.zyxy;
  r0.xy = GlobalNoise * r0.xy + v1.xy;
  r0.zw = LineNoise * r0.wz + float2(1,1);
  r1.x = floatZSampler_C2_P0.Sample(floatZSampler_C2_P0_sampler_s, r0.xy).x;
  r0.x = sonarColorSampler_C1_P0.Sample(sonarColorSampler_C1_P0_sampler_s, r0.xy).x;
  r0.y = cmp(r1.x >= 0.984375);
  r1.y = 1.01587307 * r1.x;
  r1.x = r1.x * 64 + -63;
  r0.y = r0.y ? r1.x : r1.y;
  r0.y = max(9.99999994e-09, r0.y);
  r0.y = rcp(r0.y);
  r1.x = r0.y * r0.w + -MinDepth;
  r0.yz = r0.yy * r0.zw;
  r0.w = MaxDepth + -MinDepth;
  r1.x = saturate(r1.x / r0.w);
  r1.x = log2(r1.x);
  r1.x = DepthColorCurve * r1.x;
  r1.x = exp2(r1.x);
  r1.x = max(0.00390625, r1.x);
  r1.x = min(0.99609375, r1.x);
  r1.yw = float2(0.875,0.875);
  r1.x = Lookup.Sample(Lookup_Sampler_s, r1.xy).x;
  r1.y = r0.z / MaxDepth;
  r2.x = saturate(r1.y);
  r1.y = 1.25 + -r1.y;
  r1.y = saturate(4 * r1.y);
  r2.x = PulseMaxDistIntensity * r2.x;
  r1.y = r2.x * r1.y;
  r2.x = gameTime.w / Pulse_Interval;
  r2.x = frac(r2.x);
  r2.y = Pulse_Interval / Pulse_Time;
  r2.y = MaxDepth * r2.y;
  r0.yz = r2.yy * r2.xx + -r0.yz;
  r3.xy = r0.yz / r2.yy;
  r3.zw = float2(0.625,0.375);
  r0.y = Lookup.Sample(Lookup_Sampler_s, r3.xz).x;
  r0.z = Lookup.Sample(Lookup_Sampler_s, r3.yw).x;
  r0.y = r0.y * r1.y;
  r0.y = r1.x * r0.z + r0.y;
  r0.x = r0.x + r0.y;
  r0.y = gameTime.w * ScrollSpeed;
  r0.y = frac(r0.y);
  r0.yz = v1.xy + r0.yy;
  r0.yz = LineScale * r0.yz;
  r0.yz = ScanlineMap.Sample(ScanlineMap_Sampler_s, r0.yz).xy;
  r3.xyz = LineColor.xyz * r0.zzz;
  r0.y = saturate(ScanBias + r0.y);
  r3.xyz = r3.xyz * r0.yyy;
  r3.xyz = LineColor.www * r3.xyz;
  r0.x = r3.x * Scanline_amount + r0.x;
  r0.yz = v1.xy / Static_Size;
  r0.y = Static_Noise_Map.Sample(Static_Noise_Map_Sampler_s, r0.yz).x;
  o0.x = Static_amount * r0.y + r0.x;
  r0.x = gameTime.w * 0.0700000003 + v1.y;
  r4.y = 0.565599978 * r0.x;
  r0.x = gameTime.w * -0.0700000003 + r4.y;
  r4.w = 0.565599978 * r0.x;
  r4.xz = float2(0.0799999982,0.419999987);
  r0.x = LookupMap.Sample(LookupMap_Sampler_s, r4.zw).x;
  r0.y = LookupMap.Sample(LookupMap_Sampler_s, r4.xy).x;
  r0.x = r0.x + -r0.y;
  r0.x = r0.x * 0.5 + r0.y;
  r0.y = MaskMap.Sample(MaskMap_Sampler_s, v1.xy).x;
  r0.y = Tearing_amount * r0.y;
  r0.x = r0.x * r0.y;
  r4.z = -r0.x * 0.5 + v1.x;
  r4.x = r0.x * 0.25 + v1.x;
  r4.yw = v1.yy;
  r0.xy = r4.zw / ScatterSize.xy;
  r0.xy = v2.zw + r0.xy;
  r0.xyz = Static_Noise_Map.Sample(Static_Noise_Map_Sampler_s, r0.xy).xyz;
  r5.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + r0.zyxy;
  r0.xy = GlobalNoise * r5.xy + r4.zw;
  r1.xy = r4.zw / Static_Size;
  r0.z = Static_Noise_Map.Sample(Static_Noise_Map_Sampler_s, r1.xy).z;
  r1.xy = LineNoise * r5.wz + float2(1,1);
  r2.z = floatZSampler_C2_P0.Sample(floatZSampler_C2_P0_sampler_s, r0.xy).x;
  r0.x = sonarColorSampler_C1_P0.Sample(sonarColorSampler_C1_P0_sampler_s, r0.xy).z;
  r0.y = cmp(r2.z >= 0.984375);
  r2.w = 1.01587307 * r2.z;
  r2.z = r2.z * 64 + -63;
  r0.y = r0.y ? r2.z : r2.w;
  r0.y = max(9.99999994e-09, r0.y);
  r0.y = rcp(r0.y);
  r2.z = r0.y * r1.y + -MinDepth;
  r1.xy = r0.yy * r1.xy;
  r0.y = saturate(r2.z / r0.w);
  r0.y = log2(r0.y);
  r0.y = DepthColorCurve * r0.y;
  r0.y = exp2(r0.y);
  r0.y = max(0.00390625, r0.y);
  r5.x = min(0.99609375, r0.y);
  r5.yzw = float3(0.875,0.625,0.375);
  r0.y = Lookup.Sample(Lookup_Sampler_s, r5.xy).z;
  r2.z = r1.y / MaxDepth;
  r1.xy = r2.yy * r2.xx + -r1.xy;
  r5.xy = r1.xy / r2.yy;
  r1.x = saturate(r2.z);
  r1.y = 1.25 + -r2.z;
  r1.y = saturate(4 * r1.y);
  r1.x = PulseMaxDistIntensity * r1.x;
  r1.x = r1.x * r1.y;
  r1.y = Lookup.Sample(Lookup_Sampler_s, r5.xz).z;
  r2.z = Lookup.Sample(Lookup_Sampler_s, r5.yw).x;
  r1.x = r1.y * r1.x;
  r0.y = r0.y * r2.z + r1.x;
  r0.x = r0.x + r0.y;
  r0.x = r3.z * Scanline_amount + r0.x;
  o0.z = Static_amount * r0.z + r0.x;
  r0.xy = r4.xy / ScatterSize.xy;
  r0.xy = v2.zw + r0.xy;
  r0.xyz = Static_Noise_Map.Sample(Static_Noise_Map_Sampler_s, r0.xy).xyz;
  r5.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + r0.zyxy;
  r0.xy = GlobalNoise * r5.xy + r4.xy;
  r1.xy = LineNoise * r5.wz + float2(1,1);
  r2.zw = r4.xy / Static_Size;
  r0.z = Static_Noise_Map.Sample(Static_Noise_Map_Sampler_s, r2.zw).y;
  r2.z = floatZSampler_C2_P0.Sample(floatZSampler_C2_P0_sampler_s, r0.xy).x;
  r0.x = sonarColorSampler_C1_P0.Sample(sonarColorSampler_C1_P0_sampler_s, r0.xy).y;
  r0.y = cmp(r2.z >= 0.984375);
  r2.w = 1.01587307 * r2.z;
  r2.z = r2.z * 64 + -63;
  r0.y = r0.y ? r2.z : r2.w;
  r0.y = max(9.99999994e-09, r0.y);
  r0.y = rcp(r0.y);
  r2.z = r0.y * r1.y + -MinDepth;
  r1.xy = r0.yy * r1.xy;
  r0.y = saturate(r2.z / r0.w);
  r0.y = log2(r0.y);
  r0.y = DepthColorCurve * r0.y;
  r0.y = exp2(r0.y);
  r0.y = max(0.00390625, r0.y);
  r1.z = min(0.99609375, r0.y);
  r0.y = Lookup.Sample(Lookup_Sampler_s, r1.zw).y;
  r1.xz = r2.yy * r2.xx + -r1.xy;
  r0.w = r1.y / MaxDepth;
  r1.xy = r1.xz / r2.yy;
  r1.zw = float2(0.625,0.375);
  r1.x = Lookup.Sample(Lookup_Sampler_s, r1.xz).y;
  r1.y = Lookup.Sample(Lookup_Sampler_s, r1.yw).x;
  r1.z = saturate(r0.w);
  r0.w = 1.25 + -r0.w;
  r0.w = saturate(4 * r0.w);
  r1.z = PulseMaxDistIntensity * r1.z;
  r0.w = r1.z * r0.w;
  r0.w = r1.x * r0.w;
  r0.y = r0.y * r1.y + r0.w;
  r0.x = r0.x + r0.y;
  r0.x = r3.y * Scanline_amount + r0.x;
  o0.y = Static_amount * r0.z + r0.x;
  o0.w = 0;
  return;
}