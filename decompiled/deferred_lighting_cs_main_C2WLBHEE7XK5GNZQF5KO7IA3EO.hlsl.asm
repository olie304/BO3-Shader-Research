//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:13 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerPointClamp                 sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gDownsampledScene                 texture  float4          2d            t21      1 
// gMotionVectors                    texture  float4          2d            t22      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 36
dcl_thread_group 8, 8, 1
imad r0.x, cb2[57].x, l(35), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.yz, r0.xxyx, l(0, 4095, 4095, 0)
imad r1.xy, r0.yzyy, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ge r3.x, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r3.y, r1.xyww, t4.yxzw
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyww, t0.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.yyyx
add r3.zw, r1.wwwz, l(0.000000, 0.000000, 0.500000, 0.500000)
ge r10.x, r3.y, l(0.984375)
mul r4.w, r3.y, l(1.01587307)
mad r3.y, r3.y, l(64.000000), l(-63.000000)
movc r3.y, r10.x, r3.y, r4.w
max r3.y, r3.y, l(0.00000001)
rcp r10.y, r3.y
and r10.xy, r0.wwww, r10.xyxx
add r10.zw, r3.zzzw, -cb1[71].xxxy
mul r10.zw, r10.zzzw, cb1[44].zzzw
mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r11.x, r10.z, cb1[12].x
mul r11.y, r10.w, cb1[13].y
mov r11.z, l(1.000000)
mul r11.xyz, r10.yyyy, r11.xyzx
mul r12.xyz, r11.yyyy, cb1[17].xyzx
mad r11.xyw, r11.xxxx, cb1[16].xyxz, r12.xyxz
mad r11.xyz, r11.zzzz, cb1[18].xyzx, r11.xywx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r12.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r12.z
mul r12.xy, r2.wwww, r2.xyxx
and r13.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r13.xyzw, r13.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r13.w, r13.z
movc r13.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r13.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r14.xyz, r13.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r12.xyz, r12.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r12.yyyy
mad r2.xyw, r14.xyxz, r12.xxxx, r2.xyxw
mad r12.xyz, r13.xyzx, r12.zzzz, r2.xywx
movc r0.w, r3.x, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r11.xyzx, -r11.xyzx
rsq r0.w, r0.w
mul r13.xyz, r0.wwww, -r11.xyzx
dp2 r2.z, r1.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r2.z, r2.z
mul r2.z, r2.z, l(52.982918)
frc r2.z, r2.z
mad r2.z, r2.z, l(6.28318548), cb1[70].w
sincos r3.x, r14.x, r2.z
dp2 r1.z, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r15.x, r16.x, r1.z
dp3_sat r2.x, r12.xyzx, r13.xyzx
dp3 r1.z, -r13.xyzx, r12.xyzx
add r1.z, r1.z, r1.z
mad r17.xyz, r12.xyzx, -r1.zzzz, -r13.xyzx
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.w, r1.z
mul r2.zw, r3.zzzw, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r2.z, r2.zwzz, t27.yzxw, s4, l(0.000000)
mul r2.w, r2.z, r5.z
lt r3.z, l(0.83333331), r2.y
lt r3.w, l(60.000000), r10.y
and r3.z, r3.w, r3.z
if_nz r3.z
  mul r15.yzw, r11.yyyy, cb1[9].xxyw
  mad r15.yzw, r11.xxxx, cb1[8].xxyw, r15.yyzw
  mad r15.yzw, r11.zzzz, cb1[10].xxyw, r15.yyzw
  add r15.yzw, r15.yyzw, cb1[11].xxyw
  mad r16.yzw, r17.xxyz, l(0.000000, 2000.000000, 2000.000000, 2000.000000), r11.xxyz
  mul r18.xyz, r16.zzzz, cb1[9].xywx
  mad r18.xyz, r16.yyyy, cb1[8].xywx, r18.xyzx
  mad r16.yzw, r16.wwww, cb1[10].xxyw, r18.xxyz
  add r16.yzw, r16.yyzw, cb1[11].xxyw
  ge r3.z, r16.w, r15.w
  if_nz r3.z
    mul r3.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
    rcp r18.z, r15.w
    mul r18.xy, r15.yzyy, r18.zzzz
    rcp r19.z, r16.w
    mul r19.xy, r16.yzyy, r19.zzzz
    lt r10.zw, l(0.000000, 0.000000, 1.000000, 1.000000), r19.xxxy
    mad r20.xyzw, r16.yyzz, r19.zzzz, l(-1.000000, 1.000000, -1.000000, 1.000000)
    mad r21.xyzw, r16.yyzz, r19.zzzz, -r18.xxyy
    lt r15.yz, r19.xxyx, l(0.000000, -1.000000, -1.000000, 0.000000)
    div r20.xyzw, r20.xyzw, r21.xyzw
    and r15.yz, r15.yyzy, r20.yywy
    movc r10.zw, r10.zzzw, r20.xxxz, r15.yyyz
    max r4.w, r10.w, r10.z
    add r20.xyz, r18.xyzx, -r19.xyzx
    mad r19.xyw, r4.wwww, r20.xyxz, r19.xyxz
    mad r10.zw, r18.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
    mad r15.yz, r19.xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
    add r10.zw, r10.zzzw, -r15.yyyz
    mul r10.zw, r3.zzzw, |r10.zzzw|
    max r4.w, r10.w, r10.z
    max r4.w, r4.w, l(1.000000)
    rcp r4.w, r4.w
    mad r18.xyz, r18.xyzx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r20.xyz, r19.xywx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r21.xyz, -r18.xyzx, r20.xyzx
    mad r18.xyz, r4.wwww, r21.xyzx, r18.xyzx
    add r20.xyz, -r18.xyzx, r20.xyzx
    mul r21.xyz, r20.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000)
    mul r3.zw, r3.zzzw, |r21.xxxy|
    max r3.z, r3.w, r3.z
    log r3.z, r3.z
    round_pi r3.z, r3.z
    max r3.z, r3.z, l(0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r3.w, r18.xyxx, t28.yzwx, s1, r3.z
    mad r22.xyz, r20.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r3.w, |r3.w|, |r4.w|
    mul r3.w, r22.z, r3.w
    lt r3.w, r3.w, l(1.000000)
    and r6.w, r3.w, l(1)
    mad r22.xyz, r20.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r7.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r7.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    bfi r3.w, l(1), l(0), r3.w, l(2)
    movc r3.w, r4.w, r3.w, r6.w
    mad r22.xyz, r20.xyzx, l(0.093750, 0.093750, 0.093750, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r7.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(4)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.125000, 0.125000, 0.125000, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(8)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.156250, 0.156250, 0.156250, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(16)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.187500, 0.187500, 0.187500, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(32)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.218750, 0.218750, 0.218750, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(64)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(128)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.281250, 0.281250, 0.281250, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(256)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.312500, 0.312500, 0.312500, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(512)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.343750, 0.343750, 0.343750, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(1024)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.375000, 0.375000, 0.375000, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(2048)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.406250, 0.406250, 0.406250, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(4096)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.437500, 0.437500, 0.437500, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(8192)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.468750, 0.468750, 0.468750, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(0x00004000)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(0x00008000)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.531250, 0.531250, 0.531250, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(0x00010000)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.562500, 0.562500, 0.562500, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(0x00020000)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.593750, 0.593750, 0.593750, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(0x00040000)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.625000, 0.625000, 0.625000, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(0x00080000)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.656250, 0.656250, 0.656250, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(0x00100000)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.687500, 0.687500, 0.687500, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(0x00200000)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.718750, 0.718750, 0.718750, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(0x00400000)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(0x00800000)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.781250, 0.781250, 0.781250, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(0x01000000)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.812500, 0.812500, 0.812500, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(0x02000000)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.843750, 0.843750, 0.843750, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(0x04000000)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.875000, 0.875000, 0.875000, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(0x08000000)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.906250, 0.906250, 0.906250, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(0x10000000)
    movc r3.w, r6.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.937500, 0.937500, 0.937500, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r22.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r3.w, l(0x20000000)
    movc r3.w, r4.w, r7.w, r3.w
    mad r22.xyz, r20.xyzx, l(0.968750, 0.968750, 0.968750, 0.000000), r18.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r22.xyxx, t28.yzwx, s1, r3.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r22.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r3.w, l(0x40000000)
    movc r3.w, r6.w, r7.w, r3.w
    sample_l_indexable(texture2d)(float,float,float,float) r3.z, r15.yzyy, t28.yzxw, s1, r3.z
    min r3.z, |r4.w|, |r3.z|
    mul r3.z, r19.w, r3.z
    lt r3.z, r3.z, l(1.000000)
    iadd r4.w, r3.w, l(0x80000000)
    movc r3.z, r3.z, r4.w, r3.w
    mov r22.w, l(-1)
    mov r23.z, l(-1)
    mov r10.zw, l(0,0,0,0)
    mov r3.w, l(0)
    mov r4.w, r3.z
    mov r6.w, r19.z
    mov r24.yz, l(0,0,0,0)
    mov r22.z, l(0)
    mov r7.w, l(0)
    loop 
      breakc_z r4.w
      firstbit_lo r22.y, r4.w
      ishl r8.w, l(1), r22.y
      xor r22.x, r4.w, r8.w
      utof r9.w, r22.y
      mul r9.w, r9.w, l(0.031250)
      mad r19.xyw, r20.xyxz, r9.wwww, r18.xyxz
      sample_l_indexable(texture2d)(float,float,float,float) r9.w, r19.xyxx, t28.yzwx, s1, l(0.000000)
      mul r13.w, r19.w, |r9.w|
      lt r13.w, r13.w, l(1.000000)
      if_nz r13.w
        if_nz r22.z
          lt r13.w, r15.w, |r9.w|
          lt r14.w, r6.w, r19.w
          and r13.w, r13.w, r14.w
          movc r15.yz, r13.wwww, r19.xxyx, r10.zzwz
          mov r22.z, r19.w
          mov r24.x, r6.w
          movc r25.xyz, r13.wwww, r22.zxyz, r24.xyzx
          mov r4.w, r22.x
          mov r22.z, l(-1)
          mov r10.zw, r15.yyyz
          mov r6.w, r25.x
          mov r24.yz, r25.yyzy
          continue 
        endif 
        mov r13.w, r24.y
        mov r14.w, l(0)
      else 
        not r8.w, r8.w
        and r13.w, r8.w, r24.y
        mov r14.w, r22.z
      endif 
      if_nz r7.w
        mov r4.w, r22.x
        mov r24.y, r13.w
        mov r22.z, r14.w
        mov r7.w, l(-1)
        continue 
      endif 
      mov r15.yz, r10.zzwz
      mov r8.w, r3.w
      mov r16.y, r6.w
      mov r24.y, r13.w
      mov r24.x, r24.z
      mov r22.z, r14.w
      mov r23.w, r7.w
      mov r16.z, r19.w
      mov r18.w, |r9.w|
      mov r20.w, l(0)
      loop 
        ige r21.w, r20.w, l(4)
        breakc_nz r21.w
        itof r21.w, r20.w
        add r21.w, r21.w, l(1.000000)
        mul r21.w, r21.w, l(0.250000)
        mad r25.xyz, r21.xyzx, r21.wwww, r19.xywx
        sample_l_indexable(texture2d)(float,float,float,float) r21.w, r25.xyxx, t28.yzwx, s1, l(0.000000)
        mul r24.w, r25.z, |r21.w|
        lt r24.w, r24.w, l(1.000000)
        if_nz r24.w
          lt r24.w, r15.w, |r21.w|
          add r25.w, -r16.z, r25.z
          add r26.x, -r18.w, |r21.w|
          mul r26.y, r16.z, r25.z
          mul r26.x, r26.y, |r26.x|
          lt r25.w, r26.x, |r25.w|
          and r26.x, r24.w, r25.w
          lt r26.y, r16.y, r25.z
          and r26.z, r24.w, r26.y
          movc r23.xy, r26.zzzz, r22.xyxx, r24.yxyy
          or r25.w, r25.w, r26.y
          and r24.w, r24.w, r25.w
          movc r25.xy, r24.wwww, r25.xyxx, r15.yzyy
          movc r25.w, r26.x, l(1.000000), r8.w
          movc r24.w, r24.w, r25.z, r16.y
          movc r26.xyzw, r26.xxxx, r22.xyzw, r23.xyzw
          mov r8.w, r25.w
          mov r15.yz, r25.xxyx
          mov r16.y, r24.w
          mov r24.xy, r26.yxyy
          mov r22.z, r26.z
          mov r23.w, r26.w
          break 
        endif 
        mov r16.z, r25.z
        mov r18.w, |r21.w|
        iadd r20.w, r20.w, l(1)
      endloop 
      mov r10.zw, r15.yyyz
      mov r3.w, r8.w
      mov r6.w, r16.y
      mov r24.yz, r24.yyxy
      mov r7.w, r23.w
      mov r4.w, r22.x
    endloop 
    rcp r3.z, r6.w
    add r3.z, -r15.w, r3.z
    add r4.w, -r15.w, r16.w
    div r3.z, |r3.z|, |r4.w|
    min r18.x, r3.z, l(1.000000)
    countbits r3.z, r24.y
    utof r3.z, r3.z
    add r3.z, r3.z, l(1.000000)
    iadd r4.w, -r24.z, l(32)
    utof r4.w, r4.w
    div r3.z, r3.z, r4.w
    min r18.y, r3.z, l(1.000000)
  else 
    mov r18.xy, l(1.000000,0,0,0)
    mov r3.w, l(0)
  endif 
  add r3.z, r2.y, l(-0.83333331)
  mul r3.z, r3.z, l(5.99999952)
  max r3.z, r3.z, l(0.000000)
  mad r4.w, r3.z, l(-2.000000), l(3.000000)
  mul r3.z, r3.z, r3.z
  mul r3.z, r3.z, r4.w
  add r4.w, r10.y, l(-60.000000)
  mul_sat r4.w, r4.w, l(0.01666667)
  mad r6.w, r4.w, l(-2.000000), l(3.000000)
  mul r4.w, r4.w, r4.w
  mul r4.w, r4.w, r6.w
  mul r3.z, r3.z, r4.w
  mul r3.z, r18.y, r3.z
  mad r15.yz, r10.zzwz, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
  add r15.yz, |r15.yyzy|, l(0.000000, -0.500000, -0.500000, 0.000000)
  add_sat r15.yz, r15.yyzy, r15.yyzy
  mad r16.yz, r15.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
  mul r15.yz, r15.yyzy, r15.yyzy
  mad r15.yz, -r16.yyzy, r15.yyzy, l(0.000000, 1.000000, 1.000000, 0.000000)
  mul r4.w, r15.z, r15.y
  mul r3.z, r3.z, r4.w
  mul r4.w, r18.x, l(10.000000)
  min r4.w, r4.w, l(1.000000)
  add r6.w, -r3.w, l(1.000000)
  mul r6.w, r3.z, r6.w
  add r4.w, r4.w, l(-1.000000)
  mad r4.w, r6.w, r4.w, l(1.000000)
  mul r3.z, r3.w, r3.z
  lt r3.w, l(0.000000), r3.z
  if_nz r3.w
    sample_l_indexable(texture2d)(float,float,float,float) r15.yz, r10.zwzz, t22.zxyw, s4, l(0.000000)
    add r16.yz, |r15.yyzy|, l(0.000000, -0.500000, -0.500000, 0.000000)
    add_sat r16.yz, r16.yyzy, r16.yyzy
    add r18.xy, |r15.yzyy|, |r15.yzyy|
    min r18.xy, r18.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    mul r18.xy, r18.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
    mad r16.yz, r16.yyzy, l(0.000000, 30.000000, 30.000000, 0.000000), r18.xxyx
    ge r15.yz, r15.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
    movc r15.yz, r15.yyzy, r16.yyzy, -r16.yyzy
    mad r10.yz, -r15.yyzy, cb1[44].zzwz, r10.zzwz
    sample_l_indexable(texture2d)(float,float,float,float) r10.yzw, r10.yzyy, t21.wxyz, s4, l(0.000000)
    mul r10.yzw, r10.yyzw, cb1[85].xxxx
    mul r10.yzw, r3.zzzz, r10.yyzw
  else 
    mov r10.yzw, l(0,0,0,0)
    mov r3.z, l(0)
  endif 
else 
  mov r10.yzw, l(0,0,0,0)
  mov r4.w, l(1.000000)
  mov r3.z, l(0)
endif 
dp3 r3.w, r12.xyzx, cb2[17].xyzx
mov_sat r6.w, r3.w
ge r7.w, l(0.000000), r6.w
if_nz r7.w
  mov r8.w, l(0)
endif 
if_z r7.w
  mul r15.yzw, r11.yyyy, cb2[29].xxyz
  mad r15.yzw, r11.xxxx, cb2[28].xxyz, r15.yyzw
  mad r15.yzw, r11.zzzz, cb2[30].xxyz, r15.yyzw
  add r15.yzw, r15.yyzw, cb2[31].xxyz
  add r7.w, r15.w, -cb2[17].w
  mad r7.w, -r7.w, l(0.00006104), l(1.000000)
  mov_sat r9.w, r7.w
  eq r9.w, r7.w, r9.w
  if_nz r9.w
    mov r9.w, l(0)
    mov r13.w, l(0)
    loop 
      ge r14.w, r9.w, l(3.000000)
      breakc_nz r14.w
      ftou r14.w, r9.w
      add r16.yz, r15.yyzy, -cb2[r14.w + 20].xxyx
      max r16.y, |r16.z|, |r16.y|
      mul r13.w, r16.y, cb2[r14.w + 20].z
      lt r14.w, r13.w, l(1.000000)
      if_nz r14.w
        break 
      endif 
      add r9.w, r9.w, l(1.000000)
      mov r13.w, l(0)
    endloop 
  else 
    mov r9.w, l(3.000000)
    mov r13.w, l(0)
  endif 
  ge r14.w, r9.w, l(3.000000)
  if_nz r14.w
    mul r16.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r18.xz, r16.yyyy
    mov r18.y, -r18.z
    mad r16.yzw, r15.yyzy, r18.xxyz, r16.zzwz
    add r18.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r16.yzw, r16.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r16.yzw, r18.xxyz, r16.yyzw
    mul r18.xy, r16.wzww, cb2[32].xxxx
    round_ni r18.xy, r18.xyxx
    mul r18.y, r18.y, cb2[27].x
    mad r18.x, r18.y, cb2[32].x, r18.x
    ftou r18.x, r18.x
    iadd r18.x, r18.x, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.y, r18.x, l(0), t23.xxxx
    and r18.z, r18.y, l(0x40000000)
    ishl r18.w, r18.y, l(2)
    if_z r18.z
      and r18.z, r18.y, l(0x01ffffff)
      iadd r19.x, r18.z, r18.x
      ushr r18.x, r18.y, l(25)
      utof r18.x, r18.x
      mul r16.yzw, r16.yyzw, r18.xxxx
      frc r16.yzw, r16.yyzw
      mul r16.yzw, r16.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r16.yzw, r16.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      ushr r18.xy, r16.wzww, l(6, 6, 0, 0)
      and r18.z, r19.z, l(0xc0000000)
      iadd r19.w, r19.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.w, l(0), t23.xxxx
      movc r18.y, r18.y, r19.z, r19.w
      ushr r19.w, r18.y, l(13)
      movc r18.x, r18.x, r19.w, r18.y
      and r18.x, r18.x, l(8191)
      iadd r20.x, r18.x, r19.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
      mov r19.y, l(0)
      mov r20.y, l(1)
      movc r20.xyz, r18.zzzz, r19.xyzx, r20.xyzx
      movc r21.yz, r18.zzzz, l(0,6,1,0), l(0,5,2,0)
      ushr r18.xy, r16.wzww, r21.yyyy
      and r18.xy, r18.xyxx, l(1, 1, 0, 0)
      and r19.w, r20.z, l(0xc0000000)
      iadd r20.w, r20.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.w, r20.w, l(0), t23.xxxx
      movc r18.y, r18.y, r20.z, r20.w
      ushr r20.w, r18.y, l(13)
      movc r18.x, r18.x, r20.w, r18.y
      and r18.x, r18.x, l(8191)
      iadd r21.x, r18.x, r20.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r21.w, r21.x, l(0), t23.xxxx
      movc r20.xyz, r19.wwww, r20.xyzx, r21.xzwx
      movc r18.xyz, r18.zzzz, r19.xyzx, r20.xyzx
      and r19.x, r18.z, l(0xc0000000)
      if_z r19.x
        iadd r19.x, -r18.y, l(6)
        ushr r19.xy, r16.wzww, r19.xxxx
        or r19.z, r18.z, l(0x40000000)
        bfi r19.y, l(1), l(1), r19.y, l(0)
        bfi r19.x, l(1), l(0), r19.x, r19.y
        imul null, r19.x, r19.x, l(10)
        ushr r19.x, r19.z, r19.x
        and r19.x, r19.x, l(1023)
        iadd r19.x, r18.x, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
        iadd r19.yz, r18.yyyy, l(0, 1, 2, 0)
        iadd r18.y, -r19.y, l(6)
        ushr r20.xy, r16.wzww, r18.yyyy
        and r18.y, r19.w, l(0xc0000000)
        or r20.z, r19.w, l(0x40000000)
        bfi r20.y, l(1), l(1), r20.y, l(0)
        bfi r20.x, l(1), l(0), r20.x, r20.y
        imul null, r20.x, r20.x, l(10)
        ushr r20.x, r20.z, r20.x
        and r20.x, r20.x, l(1023)
        iadd r20.x, r19.x, r20.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
        mov r20.y, r19.z
        movc r20.xyz, r18.yyyy, r19.xywx, r20.xyzx
        iadd r19.y, -r20.y, l(6)
        ushr r19.yz, r16.wwzw, r19.yyyy
        and r20.y, r20.z, l(0xc0000000)
        or r20.w, r20.z, l(0x40000000)
        bfi r19.z, l(1), l(1), r19.z, l(0)
        bfi r19.y, l(1), l(0), r19.y, r19.z
        imul null, r19.y, r19.y, l(10)
        ushr r19.y, r20.w, r19.y
        and r19.y, r19.y, l(1023)
        iadd r21.x, r19.y, r20.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r21.y, r21.x, l(0), t23.xxxx
        movc r19.yz, r20.yyyy, r20.xxzx, r21.xxyx
        movc r18.xz, r18.yyyy, r19.xxwx, r19.yyzy
      endif 
      and r18.y, r18.z, l(0xc0000000)
      if_z r18.y
        ubfe r19.x, l(14), l(15), r18.z
        utof r19.x, r19.x
        mul r19.x, r19.x, cb2[27].w
        and r19.yz, r18.zzzz, l(0, 0x00007fff, 0x20000000, 0)
        utof r19.y, r19.y
        mul r19.y, r19.y, cb2[27].w
        mul r19.xy, r19.xyxx, l(0.00006104, 0.00003052, 0.000000, 0.000000)
        and r19.w, r16.z, l(3)
        iadd r19.w, r18.x, r19.w
        iadd r19.w, r19.w, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.w, l(0), t23.xxxx
        bfi r20.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r16.yzwy, l(0, 0, 0, 0)
        ushr r16.y, r19.w, r20.x
        and r16.y, r16.y, l(255)
        utof r16.y, r16.y
        mul r16.y, r19.y, r16.y
        mad r16.y, r16.y, l(0.00392157), r19.x
        iadd r16.z, r20.y, l(1)
        ubfe r16.w, l(1), l(1), r16.w
        iadd r16.z, r16.w, r16.z
        iadd r16.z, r16.z, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.z, r16.z, l(0), t23.xxxx
        ushr r16.z, r16.z, r20.z
        and r16.z, r16.z, l(0x0000ffff)
        utof r16.z, r16.z
        mul r16.z, r19.y, r16.z
        mad r16.z, r16.z, l(0.00001526), r19.x
        movc r18.w, r19.z, r16.y, r16.z
      else 
        and r16.y, r18.z, l(0x80000000)
        iadd r16.z, r18.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.z, r16.z, l(0), t23.xxxx
        movc r16.y, r16.y, r16.z, l(0)
        ishl r16.z, r18.z, l(2)
        ushr r16.w, r16.y, l(16)
        and r16.y, r16.y, l(0x0000ffff)
        f16tof32 r16.yw, r16.yyyw
        mad r16.z, r15.y, r16.w, r16.z
        mad r16.y, r15.z, r16.y, r16.z
        movc r18.w, r18.y, r16.y, r18.w
      endif 
    endif 
    mad r15.w, -cb2[27].z, l(2.000000), r15.w
    lt r15.w, r18.w, r15.w
    movc r8.w, r15.w, l(0), l(1.000000)
  endif 
  if_z r14.w
    if_z cb2[58].y
      ftou r14.w, r9.w
      add r16.yz, r15.yyzy, -cb2[r14.w + 20].xxyx
      mul r16.yz, r16.yyzy, cb2[r14.w + 20].zzzz
      mad r18.xy, r16.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r14.w, cb2[26].y
      add r18.z, r9.w, r14.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r18.xyzx, t13.xxxx, s13, r7.w
      sample_l_indexable(texture2darray)(float,float,float,float) r15.w, r18.xyzx, t31.yzwx, s0, l(0.000000)
      add r14.w, r14.w, r15.w
      add_sat r14.w, r14.w, l(-1.000000)
      mul r15.w, r14.w, r14.w
      mul r8.w, r14.w, r15.w
    endif 
    if_nz cb2[58].y
      mov r18.x, -r3.x
      ftou r14.w, r9.w
      add r9.w, r9.w, l(1.000000)
      min r9.w, r9.w, l(2.000000)
      ftou r9.w, r9.w
      add r13.w, -r13.w, l(1.000000)
      mul r13.w, r13.w, l(28.000000)
      ftou r13.w, r13.w
      add r16.yz, r15.yyzy, -cb2[r14.w + 20].xxyx
      mul r16.yz, r16.yyzy, cb2[r14.w + 20].zzzz
      mad r16.yz, r16.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      add r15.yz, r15.yyzy, -cb2[r9.w + 20].xxyx
      mul r15.yz, r15.yyzy, cb2[r9.w + 20].zzzz
      mad r15.yz, r15.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r18.y, r14.x
      mov r18.z, r3.x
      mov r15.w, l(0)
      mov r16.w, l(0)
      loop 
        uge r18.w, r16.w, l(8)
        breakc_nz r18.w
        ult r18.w, r13.w, r16.w
        movc r19.xy, r18.wwww, r15.yzyy, r16.yzyy
        movc r19.z, r18.w, cb2[r9.w + 20].w, cb2[r14.w + 20].w
        movc r18.w, r18.w, r9.w, r14.w
        dp2 r20.x, icb[r16.w + 0].yxyy, r18.xyxx
        dp2 r20.y, icb[r16.w + 0].yxyy, r18.yzyy
        mad r19.xy, r20.xyxx, r19.zzzz, r19.xyxx
        iadd r18.w, r18.w, cb2[26].y
        utof r19.z, r18.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r19.xyzx, t13.xxxx, s13, r7.w
        sample_l_indexable(texture2darray)(float,float,float,float) r19.x, r19.xyzx, t31.xyzw, s0, l(0.000000)
        add r18.w, r18.w, r19.x
        add_sat r18.w, r18.w, l(-1.000000)
        mad r15.w, r18.w, l(0.125000), r15.w
        iadd r16.w, r16.w, l(1)
      endloop 
      mul r7.w, r15.w, r15.w
      mul r8.w, r15.w, r7.w
    endif 
  endif 
endif 
add r7.w, -r2.y, l(1.000000)
mul r9.w, r7.w, l(5.000000)
mad r13.w, r7.w, l(5.000000), l(-2.500000)
mul r13.w, r13.w, l(0.400000)
max r13.w, r13.w, l(0.000000)
mul r13.w, r13.w, l(100.000000)
mad r15.yz, -r7.wwww, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r14.w, r15.y
mul r14.w, r2.x, r14.w
mul r14.w, r14.w, l(9.136810)
mul r15.y, r7.w, r9.w
mad r15.y, -r15.y, l(2.015905), r15.z
exp r15.y, r15.y
mul r15.y, r2.x, r15.y
mul r15.y, r15.y, l(9.708090)
max r14.w, r14.w, r15.y
max r14.w, r14.w, l(1.268160)
iadd r15.y, cb2[0].y, -cb2[58].x
ftou r15.z, cb1[44].x
iadd r15.z, r15.z, l(7)
ushr r15.z, r15.z, l(3)
imad r0.y, r0.z, r15.z, r0.y
bfi r0.y, l(27), l(5), r0.y, l(16)
and r0.z, r15.y, l(-32)
iadd r15.z, -r0.z, r15.y
and r15.w, cb2[0].y, l(-32)
iadd r16.y, -r15.w, cb2[0].y
mov r18.yz, l(0,0,1.000000,0)
mov r19.xy, l(0,0,0,0)
mov r20.x, l(1.000000)
mov r21.xy, l(0,0,0,0)
mov r22.xy, l(0,0,0,0)
mov r23.xyzw, l(0,0,0,0)
mov r24.yzw, l(0,0,0,0)
mov r16.z, r0.z
loop 
  uge r16.w, r16.z, cb2[0].y
  breakc_nz r16.w
  ushr r16.w, r16.z, l(5)
  iadd r16.w, r0.y, r16.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.w, r16.w, l(0), t26.xxxx
  ieq r18.w, r0.z, r16.z
  bfi r19.w, r15.z, l(0), l(0), r16.w
  movc r16.w, r18.w, r19.w, r16.w
  ieq r18.w, r15.w, r16.z
  ubfe r19.w, r16.y, l(0), r16.w
  movc r16.w, r18.w, r19.w, r16.w
  mov r25.xyzw, r23.xyzw
  mov r26.xyz, r24.yzwy
  mov r18.w, r16.w
  loop 
    breakc_z r18.w
    firstbit_lo r19.w, r18.w
    ishl r20.z, l(1), r19.w
    not r20.z, r20.z
    and r18.w, r18.w, r20.z
    iadd r19.w, r16.z, r19.w
    imul null, r19.w, r19.w, l(14)
    add r27.xyz, r11.xyzx, -cb10[r19.w + 0].xyzx
    and r20.z, l(0x0000ffff), cb10[r19.w + 7].z
    ubfe r20.w, l(6), l(25), cb10[r19.w + 7].z
    imul null, r21.w, r20.z, l(6)
    dp3 r22.w, cb11[r21.w + 0].xyzx, r27.xyzx
    add_sat r22.w, r22.w, cb11[r21.w + 0].w
    dp3 r27.w, cb11[r21.w + 1].xyzx, r27.xyzx
    add_sat r27.w, r27.w, cb11[r21.w + 1].w
    mul r22.w, r22.w, r27.w
    dp3 r27.w, cb11[r21.w + 2].xyzx, r27.xyzx
    add_sat r27.w, r27.w, cb11[r21.w + 2].w
    mul r22.w, r22.w, r27.w
    dp3 r27.w, cb11[r21.w + 3].xyzx, r27.xyzx
    add_sat r27.w, r27.w, cb11[r21.w + 3].w
    mul r22.w, r22.w, r27.w
    dp3 r27.w, cb11[r21.w + 4].xyzx, r27.xyzx
    add_sat r27.w, r27.w, cb11[r21.w + 4].w
    mul r22.w, r22.w, r27.w
    dp3 r27.w, cb11[r21.w + 5].xyzx, r27.xyzx
    add_sat r21.w, r27.w, cb11[r21.w + 5].w
    mul r18.x, r21.w, r22.w
    and r21.w, l(1), cb10[r19.w + 6].x
    movc r28.xy, r21.wwww, r18.xyxx, r18.zxzz
    mov r18.x, cb10[r19.w + 6].x
    mov r29.xy, r28.xyxx
    mov r21.w, l(1)
    loop 
      ige r22.w, r21.w, r20.w
      breakc_nz r22.w
      iadd r22.w, r20.z, r21.w
      imul null, r22.w, r22.w, l(6)
      dp3 r27.w, cb11[r22.w + 0].xyzx, r27.xyzx
      add_sat r27.w, r27.w, cb11[r22.w + 0].w
      mul r27.w, r27.w, r29.x
      dp3 r28.z, cb11[r22.w + 1].xyzx, r27.xyzx
      add_sat r28.z, r28.z, cb11[r22.w + 1].w
      mul r27.w, r27.w, r28.z
      dp3 r28.z, cb11[r22.w + 2].xyzx, r27.xyzx
      add_sat r28.z, r28.z, cb11[r22.w + 2].w
      mul r27.w, r27.w, r28.z
      dp3 r28.z, cb11[r22.w + 3].xyzx, r27.xyzx
      add_sat r28.z, r28.z, cb11[r22.w + 3].w
      mul r27.w, r27.w, r28.z
      dp3 r28.z, cb11[r22.w + 4].xyzx, r27.xyzx
      add_sat r28.z, r28.z, cb11[r22.w + 4].w
      mul r27.w, r27.w, r28.z
      dp3 r28.z, cb11[r22.w + 5].xyzx, r27.xyzx
      add_sat r22.w, r28.z, cb11[r22.w + 5].w
      mul r29.x, r22.w, r27.w
      ushr r28.z, r18.x, l(2)
      ubfe r28.w, l(1), l(2), r18.x
      and r29.z, r28.z, l(2)
      max r29.w, r29.x, r29.y
      mad r22.w, -r27.w, r22.w, l(1.000000)
      mul r22.w, r22.w, r29.y
      movc r20.y, r29.z, r22.w, r29.w
      movc r29.xy, r28.wwww, r29.xyxx, r20.xyxx
      iadd r21.w, r21.w, l(1)
      mov r18.x, r28.z
    endloop 
    mov_sat r29.y, r29.y
    mul r18.x, r29.y, cb10[r19.w + 6].y
    lt r20.y, l(0.000000), r18.x
    if_nz r20.y
      mad r26.z, r29.y, cb10[r19.w + 6].y, r26.z
      mul r18.x, r18.x, cb10[r19.w + 7].y
      mov r28.x, cb10[r19.w + 7].w
      mov r28.yz, cb10[r19.w + 8].xxyx
      dp3 r20.y, r17.xyzx, r28.xyzx
      dp3 r20.z, r27.xyzx, r28.xyzx
      add r20.z, r20.z, -cb10[r19.w + 8].z
      ge r20.w, r20.z, l(0.000000)
      max r20.z, r13.w, |r20.z|
      movc r20.z, r20.w, r20.z, -r20.z
      max r20.y, -r20.y, l(0.00000010)
      div r20.y, r20.z, r20.y
      min r20.y, |r20.y|, l(131072.000000)
      mov r28.x, cb10[r19.w + 8].w
      mov r28.yz, cb10[r19.w + 9].xxyx
      dp3 r20.z, r17.xyzx, r28.xyzx
      dp3 r20.w, r27.xyzx, r28.xyzx
      add r20.w, r20.w, -cb10[r19.w + 9].z
      ge r21.w, r20.w, l(0.000000)
      max r20.w, r13.w, |r20.w|
      movc r20.w, r21.w, r20.w, -r20.w
      max r20.z, -r20.z, l(0.00000010)
      div r20.z, r20.w, r20.z
      min r20.y, |r20.z|, r20.y
      mov r28.x, cb10[r19.w + 9].w
      mov r28.yz, cb10[r19.w + 10].xxyx
      dp3 r20.z, r17.xyzx, r28.xyzx
      dp3 r20.w, r27.xyzx, r28.xyzx
      add r20.w, r20.w, -cb10[r19.w + 10].z
      ge r21.w, r20.w, l(0.000000)
      max r20.w, r13.w, |r20.w|
      movc r20.w, r21.w, r20.w, -r20.w
      max r20.z, -r20.z, l(0.00000010)
      div r20.z, r20.w, r20.z
      min r20.y, |r20.z|, r20.y
      mov r28.x, cb10[r19.w + 10].w
      mov r28.yz, cb10[r19.w + 11].xxyx
      dp3 r20.z, r17.xyzx, r28.xyzx
      dp3 r20.w, r27.xyzx, r28.xyzx
      add r20.w, r20.w, -cb10[r19.w + 11].z
      ge r21.w, r20.w, l(0.000000)
      max r20.w, r13.w, |r20.w|
      movc r20.w, r21.w, r20.w, -r20.w
      max r20.z, -r20.z, l(0.00000010)
      div r20.z, r20.w, r20.z
      min r20.y, |r20.z|, r20.y
      mov r28.x, cb10[r19.w + 11].w
      mov r28.yz, cb10[r19.w + 12].xxyx
      dp3 r20.z, r17.xyzx, r28.xyzx
      dp3 r20.w, r27.xyzx, r28.xyzx
      add r20.w, r20.w, -cb10[r19.w + 12].z
      ge r21.w, r20.w, l(0.000000)
      max r20.w, r13.w, |r20.w|
      movc r20.w, r21.w, r20.w, -r20.w
      max r20.z, -r20.z, l(0.00000010)
      div r20.z, r20.w, r20.z
      min r20.y, |r20.z|, r20.y
      mov r28.x, cb10[r19.w + 12].w
      mov r28.yz, cb10[r19.w + 13].xxyx
      dp3 r20.z, r17.xyzx, r28.xyzx
      dp3 r20.w, r27.xyzx, r28.xyzx
      add r20.w, r20.w, -cb10[r19.w + 13].z
      ge r21.w, r20.w, l(0.000000)
      max r20.w, r13.w, |r20.w|
      movc r20.w, r21.w, r20.w, -r20.w
      max r20.z, -r20.z, l(0.00000010)
      div r20.z, r20.w, r20.z
      min r20.y, |r20.z|, r20.y
      add r28.x, r27.x, cb10[r19.w + 3].w
      add r28.yz, r27.yyzy, cb10[r19.w + 4].xxyx
      mad r28.xyz, r17.xyzx, r20.yyyy, r28.xyzx
      dp3 r20.z, r28.xyzx, r28.xyzx
      sqrt r20.z, r20.z
      div r20.y, r20.y, r20.z
      add r20.y, r20.y, r20.y
      sqrt r20.y, r20.y
      mad r20.y, r7.w, l(5.000000), r20.y
      add r20.y, r20.y, l(-0.844800)
      mov r30.x, cb10[r19.w + 0].w
      mov r30.y, cb10[r19.w + 1].z
      mov r30.z, cb10[r19.w + 2].y
      dp3 r31.x, r28.xyzx, r30.xyzx
      mov r32.xy, cb10[r19.w + 1].xwxx
      mov r32.z, cb10[r19.w + 2].z
      dp3 r31.y, r28.xyzx, r32.xyzx
      mov r33.x, cb10[r19.w + 1].y
      mov r33.yz, cb10[r19.w + 2].xxwx
      dp3 r31.z, r28.xyzx, r33.xyzx
      ubfe r20.z, l(9), l(16), cb10[r19.w + 7].z
      utof r31.w, r20.z
      sample_l_indexable(texturecubearray)(float,float,float,float) r20.yzw, r31.xyzw, t8.wxyz, s2, r20.y
      dp3 r28.x, r27.xyzx, r30.xyzx
      dp3 r28.y, r27.xyzx, r32.xyzx
      dp3 r28.z, r27.xyzx, r33.xyzx
      mad_sat r27.xyz, r28.xyzx, cb10[r19.w + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      mul r28.xy, r27.xyxx, cb10[r19.w + 4].zwzz
      mul r28.z, r27.z, cb10[r19.w + 5].x
      add r27.xyz, r28.xyzx, cb10[r19.w + 5].yzwy
      dp3 r31.x, r12.xyzx, r30.xyzx
      dp3 r31.y, r12.xyzx, r32.xyzx
      dp3 r31.z, r12.xyzx, r33.xyzx
      lt r28.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r31.xyzx
      movc r19.z, r28.x, l(0), l(0.500000)
      add r29.xzw, r19.xxyz, r27.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r29.xzw, r29.xzwx, t17.xwyz, s4, l(0.000000)
      mul r30.xyz, r31.xyzx, r31.xyzx
      mul r30.xyz, r18.xxxx, r30.xyzx
      movc r21.z, r28.y, l(0), l(0.500000)
      add r28.xyw, r21.xyxz, r27.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r28.xyw, r28.xywx, t18.xywz, s4, l(0.000000)
      mul r28.xyw, r30.yyyy, r28.xyxw
      mad r28.xyw, r29.xzxw, r30.xxxx, r28.xyxw
      movc r22.z, r28.z, l(0), l(0.500000)
      add r27.xyz, r22.xyzx, r27.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r27.xyz, r27.xyzx, t19.xyzw, s4, l(0.000000)
      mad r27.xyz, r27.xyzx, r30.zzzz, r28.xywx
      sample_l_indexable(texturecubearray)(float,float,float,float) r28.xyz, r31.xyzw, t8.xyzw, s2, l(6.000000)
      mul r29.xzw, r27.xxyz, r28.xxyz
      dp3 r19.z, r29.xzwx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r25.xyz, r27.xyzx, r28.xyzx, r25.xyzx
      mul r19.w, r14.w, r19.z
      mul r20.yzw, r18.xxxx, r20.yyzw
      dp3 r18.x, r20.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r18.x, r14.w, r19.z, r18.x
      div r18.x, r19.w, r18.x
      mov r27.x, r25.w
      mov r27.yz, r26.xxyx
      mad r26.xyw, r20.zwzy, r18.xxxx, r27.yzyx
      mov r25.w, r26.w
    endif 
  endloop 
  mov r23.xyzw, r25.xyzw
  mov r24.yzw, r26.xxyz
  iadd r16.z, r16.z, l(32)
endloop 
lt r15.w, r24.w, l(1.000000)
if_nz r15.w
  mov r18.yz, l(0,0,1.000000,0)
  mov r19.xy, l(0,0,0,0)
  mov r20.x, l(1.000000)
  mov r21.xy, l(0,0,0,0)
  mov r22.xy, l(0,0,0,0)
  mov r25.x, r23.w
  mov r25.yzw, r24.yyzw
  mov r16.yzw, r23.xxyz
  mov r15.w, r24.w
  mov r18.w, l(0)
  loop 
    uge r19.w, r18.w, r15.y
    breakc_nz r19.w
    ushr r19.w, r18.w, l(5)
    iadd r19.w, r0.y, r19.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.w, l(0), t26.xxxx
    ieq r20.z, r0.z, r18.w
    ubfe r20.w, r15.z, l(0), r19.w
    movc r19.w, r20.z, r20.w, r19.w
    mov r26.xyzw, r25.xyzw
    mov r27.xyz, r16.yzwy
    mov r20.z, r15.w
    mov r20.w, r19.w
    loop 
      breakc_z r20.w
      firstbit_lo r21.w, r20.w
      ishl r22.w, l(1), r21.w
      not r22.w, r22.w
      and r20.w, r20.w, r22.w
      iadd r21.w, r18.w, r21.w
      imul null, r21.w, r21.w, l(14)
      add r28.xyz, r11.xyzx, -cb10[r21.w + 0].xyzx
      and r22.w, l(0x0000ffff), cb10[r21.w + 7].z
      ubfe r27.w, l(6), l(25), cb10[r21.w + 7].z
      imul null, r28.w, r22.w, l(6)
      dp3 r29.x, cb11[r28.w + 0].xyzx, r28.xyzx
      add_sat r29.x, r29.x, cb11[r28.w + 0].w
      dp3 r29.y, cb11[r28.w + 1].xyzx, r28.xyzx
      add_sat r29.y, r29.y, cb11[r28.w + 1].w
      mul r29.x, r29.y, r29.x
      dp3 r29.y, cb11[r28.w + 2].xyzx, r28.xyzx
      add_sat r29.y, r29.y, cb11[r28.w + 2].w
      mul r29.x, r29.y, r29.x
      dp3 r29.y, cb11[r28.w + 3].xyzx, r28.xyzx
      add_sat r29.y, r29.y, cb11[r28.w + 3].w
      mul r29.x, r29.y, r29.x
      dp3 r29.y, cb11[r28.w + 4].xyzx, r28.xyzx
      add_sat r29.y, r29.y, cb11[r28.w + 4].w
      mul r29.x, r29.y, r29.x
      dp3 r29.y, cb11[r28.w + 5].xyzx, r28.xyzx
      add_sat r28.w, r29.y, cb11[r28.w + 5].w
      mul r18.x, r28.w, r29.x
      and r28.w, l(1), cb10[r21.w + 6].x
      movc r29.xy, r28.wwww, r18.xyxx, r18.zxzz
      mov r18.x, cb10[r21.w + 6].x
      mov r30.xy, r29.xyxx
      mov r28.w, l(1)
      loop 
        ige r29.z, r28.w, r27.w
        breakc_nz r29.z
        iadd r29.z, r22.w, r28.w
        imul null, r29.z, r29.z, l(6)
        dp3 r29.w, cb11[r29.z + 0].xyzx, r28.xyzx
        add_sat r29.w, r29.w, cb11[r29.z + 0].w
        mul r29.w, r29.w, r30.x
        dp3 r30.z, cb11[r29.z + 1].xyzx, r28.xyzx
        add_sat r30.z, r30.z, cb11[r29.z + 1].w
        mul r29.w, r29.w, r30.z
        dp3 r30.z, cb11[r29.z + 2].xyzx, r28.xyzx
        add_sat r30.z, r30.z, cb11[r29.z + 2].w
        mul r29.w, r29.w, r30.z
        dp3 r30.z, cb11[r29.z + 3].xyzx, r28.xyzx
        add_sat r30.z, r30.z, cb11[r29.z + 3].w
        mul r29.w, r29.w, r30.z
        dp3 r30.z, cb11[r29.z + 4].xyzx, r28.xyzx
        add_sat r30.z, r30.z, cb11[r29.z + 4].w
        mul r29.w, r29.w, r30.z
        dp3 r30.z, cb11[r29.z + 5].xyzx, r28.xyzx
        add_sat r29.z, r30.z, cb11[r29.z + 5].w
        mul r30.x, r29.z, r29.w
        ushr r30.z, r18.x, l(2)
        ubfe r30.w, l(1), l(2), r18.x
        and r31.x, r30.z, l(2)
        max r31.y, r30.x, r30.y
        mad r29.z, -r29.w, r29.z, l(1.000000)
        mul r29.z, r29.z, r30.y
        movc r20.y, r31.x, r29.z, r31.y
        movc r30.xy, r30.wwww, r30.xyxx, r20.xyxx
        iadd r28.w, r28.w, l(1)
        mov r18.x, r30.z
      endloop 
      add_sat r18.x, -r20.z, r30.y
      mul r20.y, r18.x, cb10[r21.w + 6].y
      lt r22.w, l(0.000000), r20.y
      if_nz r22.w
        mad r26.w, r18.x, cb10[r21.w + 6].y, r26.w
        mul r18.x, r20.y, cb10[r21.w + 7].y
        mov r29.x, cb10[r21.w + 7].w
        mov r29.yz, cb10[r21.w + 8].xxyx
        dp3 r20.y, r17.xyzx, r29.xyzx
        dp3 r22.w, r28.xyzx, r29.xyzx
        add r22.w, r22.w, -cb10[r21.w + 8].z
        ge r27.w, r22.w, l(0.000000)
        max r22.w, r13.w, |r22.w|
        movc r22.w, r27.w, r22.w, -r22.w
        max r20.y, -r20.y, l(0.00000010)
        div r20.y, r22.w, r20.y
        min r20.y, |r20.y|, l(131072.000000)
        mov r29.x, cb10[r21.w + 8].w
        mov r29.yz, cb10[r21.w + 9].xxyx
        dp3 r22.w, r17.xyzx, r29.xyzx
        dp3 r27.w, r28.xyzx, r29.xyzx
        add r27.w, r27.w, -cb10[r21.w + 9].z
        ge r28.w, r27.w, l(0.000000)
        max r27.w, r13.w, |r27.w|
        movc r27.w, r28.w, r27.w, -r27.w
        max r22.w, -r22.w, l(0.00000010)
        div r22.w, r27.w, r22.w
        min r20.y, r20.y, |r22.w|
        mov r29.x, cb10[r21.w + 9].w
        mov r29.yz, cb10[r21.w + 10].xxyx
        dp3 r22.w, r17.xyzx, r29.xyzx
        dp3 r27.w, r28.xyzx, r29.xyzx
        add r27.w, r27.w, -cb10[r21.w + 10].z
        ge r28.w, r27.w, l(0.000000)
        max r27.w, r13.w, |r27.w|
        movc r27.w, r28.w, r27.w, -r27.w
        max r22.w, -r22.w, l(0.00000010)
        div r22.w, r27.w, r22.w
        min r20.y, r20.y, |r22.w|
        mov r29.x, cb10[r21.w + 10].w
        mov r29.yz, cb10[r21.w + 11].xxyx
        dp3 r22.w, r17.xyzx, r29.xyzx
        dp3 r27.w, r28.xyzx, r29.xyzx
        add r27.w, r27.w, -cb10[r21.w + 11].z
        ge r28.w, r27.w, l(0.000000)
        max r27.w, r13.w, |r27.w|
        movc r27.w, r28.w, r27.w, -r27.w
        max r22.w, -r22.w, l(0.00000010)
        div r22.w, r27.w, r22.w
        min r20.y, r20.y, |r22.w|
        mov r29.x, cb10[r21.w + 11].w
        mov r29.yz, cb10[r21.w + 12].xxyx
        dp3 r22.w, r17.xyzx, r29.xyzx
        dp3 r27.w, r28.xyzx, r29.xyzx
        add r27.w, r27.w, -cb10[r21.w + 12].z
        ge r28.w, r27.w, l(0.000000)
        max r27.w, r13.w, |r27.w|
        movc r27.w, r28.w, r27.w, -r27.w
        max r22.w, -r22.w, l(0.00000010)
        div r22.w, r27.w, r22.w
        min r20.y, r20.y, |r22.w|
        mov r29.x, cb10[r21.w + 12].w
        mov r29.yz, cb10[r21.w + 13].xxyx
        dp3 r22.w, r17.xyzx, r29.xyzx
        dp3 r27.w, r28.xyzx, r29.xyzx
        add r27.w, r27.w, -cb10[r21.w + 13].z
        ge r28.w, r27.w, l(0.000000)
        max r27.w, r13.w, |r27.w|
        movc r27.w, r28.w, r27.w, -r27.w
        max r22.w, -r22.w, l(0.00000010)
        div r22.w, r27.w, r22.w
        min r20.y, r20.y, |r22.w|
        add r29.x, r28.x, cb10[r21.w + 3].w
        add r29.yz, r28.yyzy, cb10[r21.w + 4].xxyx
        mad r29.xyz, r17.xyzx, r20.yyyy, r29.xyzx
        dp3 r22.w, r29.xyzx, r29.xyzx
        sqrt r22.w, r22.w
        div r20.y, r20.y, r22.w
        add r20.y, r20.y, r20.y
        sqrt r20.y, r20.y
        mad r20.y, r7.w, l(5.000000), r20.y
        add r20.y, r20.y, l(-0.844800)
        mov r31.x, cb10[r21.w + 0].w
        mov r31.y, cb10[r21.w + 1].z
        mov r31.z, cb10[r21.w + 2].y
        dp3 r32.x, r29.xyzx, r31.xyzx
        mov r33.xy, cb10[r21.w + 1].xwxx
        mov r33.z, cb10[r21.w + 2].z
        dp3 r32.y, r29.xyzx, r33.xyzx
        mov r34.x, cb10[r21.w + 1].y
        mov r34.yz, cb10[r21.w + 2].xxwx
        dp3 r32.z, r29.xyzx, r34.xyzx
        ubfe r22.w, l(9), l(16), cb10[r21.w + 7].z
        utof r32.w, r22.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r29.xyz, r32.xyzw, t8.xyzw, s2, r20.y
        dp3 r35.x, r28.xyzx, r31.xyzx
        dp3 r35.y, r28.xyzx, r33.xyzx
        dp3 r35.z, r28.xyzx, r34.xyzx
        mad_sat r28.xyz, r35.xyzx, cb10[r21.w + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
        mul r35.xy, r28.xyxx, cb10[r21.w + 4].zwzz
        mul r35.z, r28.z, cb10[r21.w + 5].x
        add r28.xyz, r35.xyzx, cb10[r21.w + 5].yzwy
        dp3 r32.x, r12.xyzx, r31.xyzx
        dp3 r32.y, r12.xyzx, r33.xyzx
        dp3 r32.z, r12.xyzx, r34.xyzx
        lt r30.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r32.xxyz
        movc r19.z, r30.x, l(0), l(0.500000)
        add r31.xyz, r19.xyzx, r28.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r31.xyz, r31.xyzx, t17.xyzw, s4, l(0.000000)
        mul r33.xyz, r32.xyzx, r32.xyzx
        mul r33.xyz, r18.xxxx, r33.xyzx
        movc r21.z, r30.z, l(0), l(0.500000)
        add r34.xyz, r21.xyzx, r28.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r34.xyz, r34.xyzx, t18.xyzw, s4, l(0.000000)
        mul r34.xyz, r33.yyyy, r34.xyzx
        mad r31.xyz, r31.xyzx, r33.xxxx, r34.xyzx
        movc r22.z, r30.w, l(0), l(0.500000)
        add r28.xyz, r22.xyzx, r28.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r28.xyz, r28.xyzx, t19.xyzw, s4, l(0.000000)
        mad r28.xyz, r28.xyzx, r33.zzzz, r31.xyzx
        sample_l_indexable(texturecubearray)(float,float,float,float) r30.xzw, r32.xyzw, t8.xwyz, s2, l(6.000000)
        mul r31.xyz, r28.xyzx, r30.xzwx
        dp3 r19.z, r31.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r27.xyz, r28.xyzx, r30.xzwx, r27.xyzx
        mul r20.y, r14.w, r19.z
        mul r28.xyz, r18.xxxx, r29.xyzx
        dp3 r18.x, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r18.x, r14.w, r19.z, r18.x
        div r18.x, r20.y, r18.x
        mad r26.xyz, r28.xyzx, r18.xxxx, r26.xyzx
      endif 
    endloop 
    mov r25.xyzw, r26.xyzw
    mov r16.yzw, r27.xxyz
    iadd r18.w, r18.w, l(32)
  endloop 
  mov r24.xyzw, r25.zxyw
  mov r23.xyz, r16.yzwy
  mov r24.xyzw, r24.yzxw
else 
  mov r24.x, r23.w
endif 
max r0.y, r24.w, l(1.000000)
rcp r0.y, r0.y
mov_sat r24.w, r24.w
mul r15.yzw, r0.yyyy, r23.xxyz
mul r16.yzw, r0.yyyy, r24.xxyz
lt r0.z, r24.w, l(0.990000)
if_nz r0.z
  add r0.z, -r24.w, l(1.000000)
  mul r7.w, r0.z, cb2[19].x
  add r18.xyz, r11.xyzx, -cb2[35].xyzx
  mul r19.x, r18.x, cb2[35].w
  mul r19.yz, r18.yyzy, cb2[36].xxyx
  add_sat r18.xyz, r19.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r19.xy, r18.xyxx, cb2[36].zwzz
  mul r19.z, r18.z, cb2[37].x
  add r18.xyz, r19.xyzx, cb2[37].yzwy
  lt r19.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
  movc r19.xyz, r19.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r19.w, l(0)
  add r20.xyz, r18.xyzx, r19.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
  mul r21.xyz, r12.xyzx, r12.xyzx
  mul r21.xyz, r7.wwww, r21.xyzx
  add r22.xyz, r18.xyzx, r19.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t18.xyzw, s4, l(0.000000)
  mul r22.xyz, r21.yyyy, r22.xyzx
  mad r20.xyz, r20.xyzx, r21.xxxx, r22.xyzx
  add r18.xyz, r18.xyzx, r19.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t19.xyzw, s4, l(0.000000)
  mad r18.xyz, r18.xyzx, r21.zzzz, r20.xyzx
  mov r12.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r12.xyzw, t8.xyzw, s2, l(6.000000)
  mul r18.xyz, r18.xyzx, r19.xyzx
  dp3 r7.w, r18.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r15.yzw, r23.xxyz, r0.yyyy, r18.xxyz
  mov r17.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r17.xyzw, t8.xyzw, s2, r9.w
  mad r0.y, cb2[19].x, r0.z, -r7.w
  mad r0.y, r2.y, r0.y, r7.w
  mad r16.yzw, r18.xxyz, r0.yyyy, r16.yyzw
endif 
add r0.y, -r3.z, l(1.000000)
mad r10.yzw, r16.yyzw, r0.yyyy, r10.yyzw
mad r0.y, r5.z, r2.z, r2.x
log r0.y, |r0.y|
mul r0.y, r0.y, r1.w
exp r0.y, r0.y
mad r0.y, r5.z, r2.z, r0.y
add_sat r0.y, r0.y, l(-1.000000)
mul r0.y, r4.w, r0.y
mul r18.xyz, r2.wwww, r15.yzwy
mad r2.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t5.zxyw, s2, l(0.000000)
mul r10.yzw, r0.yyyy, r10.yyzw
mul r19.xyz, r2.yyyy, r10.zwyz
mul r2.yzw, r2.zzzz, r10.yyzw
sqrt r0.y, r1.w
mad r0.y, r0.y, l(0.500000), l(0.500000)
mul r0.y, r0.y, r0.y
mul r0.z, r0.y, l(0.500000)
mad r0.y, -r0.y, l(0.500000), l(1.000000)
mad r3.z, r2.x, r0.y, r0.z
mul r0.yz, r0.yyzy, r3.zzzz
lt r3.z, l(0.000000), r6.w
if_nz r3.z
  lt r3.z, l(0.000000), r8.w
  if_nz r3.z
    mul r3.z, r1.z, cb2[18].w
    mul r3.z, r6.w, r3.z
    if_nz cb2[23].x
      add r20.xyz, r11.xyzx, cb1[24].xyzx
      mov r20.w, l(1.000000)
      dp4 r4.w, cb2[24].xyzw, r20.xyzw
      dp4 r5.z, cb2[25].xyzw, r20.xyzw
      frc r20.x, r4.w
      frc r20.y, r5.z
      iadd r4.w, l(-1), cb2[23].x
      utof r20.z, r4.w
      sample_l_indexable(texture2darray)(float,float,float,float) r10.yzw, r20.xyzx, t20.wxyz, s2, l(0.000000)
      add r10.yzw, r10.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
      mad r10.yzw, cb2[23].yyyy, r10.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      mul r10.yzw, r10.yyzw, cb2[18].xxyz
    else 
      mov r10.yzw, cb2[18].xxyz
    endif 
    ushr r4.w, cb2[53].x, l(16)
    ult r5.z, l(0), r4.w
    and r5.z, r10.x, r5.z
    if_nz r5.z
      iadd r4.w, r4.w, cb2[0].x
      imad r4.w, r4.w, l(15), l(-15)
      mad r5.z, |r3.w|, l(-0.200000), l(0.400000)
      mad r20.xyz, r12.xyzx, r5.zzzz, r11.xyzx
      mov r21.xyz, cb9[r4.w + 4].yzwy
      mov r21.w, cb9[r4.w + 5].x
      mov r20.w, l(1.000000)
      dp4 r21.x, r21.xyzw, r20.xyzw
      mov r22.xyz, cb9[r4.w + 5].yzwy
      mov r22.w, cb9[r4.w + 6].x
      dp4 r21.y, r22.xyzw, r20.xyzw
      mad r15.yz, r21.xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      add r21.x, r15.y, cb9[r4.w + 9].w
      add r21.y, r15.z, cb9[r4.w + 10].x
      mul r15.yz, r21.xxyx, cb9[r4.w + 9].yyzy
      div r16.yz, cb9[r4.w + 3].yyyy, cb9[r4.w + 8].yywy
      add r21.xy, -r16.yzyy, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r21.xy, r15.yzyy, r21.xyxx
      ge r16.yz, r16.yyzy, r15.yyzy
      or r16.yz, r16.yyzy, r21.xxyx
      or r5.z, r16.z, r16.y
      if_z r5.z
        mov r21.xyz, cb9[r4.w + 6].yzwy
        mov r21.w, cb9[r4.w + 7].x
        dp4 r5.z, r21.xyzw, r20.xyzw
        mov_sat r15.yz, r15.yyzy
        mad r20.x, r15.y, cb9[r4.w + 8].y, cb9[r4.w + 8].z
        mad r20.y, r15.z, cb9[r4.w + 8].w, cb9[r4.w + 9].x
        add r5.z, r5.z, cb9[r4.w + 10].y
        div r5.z, r5.z, cb9[r4.w + 10].z
        max r5.z, r5.z, l(0.00006104)
        and r7.w, l(0x0000ffff), cb9[r4.w + 1].w
        if_nz cb2[58].y
          mov r21.x, -r3.x
          utof r22.z, r7.w
          mov r21.y, r14.x
          mov r21.z, r3.x
          mov r9.w, l(0)
          mov r12.w, l(0)
          loop 
            ige r13.w, r12.w, l(8)
            breakc_nz r13.w
            dp2 r23.x, icb[r12.w + 0].yxyy, r21.xyxx
            dp2 r23.y, icb[r12.w + 0].yxyy, r21.yzyy
            mad r22.xy, r23.xyxx, cb9[r4.w + 3].yyyy, r20.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r22.xyzx, t9.xxxx, s13, r5.z
            mad r9.w, r13.w, l(0.125000), r9.w
            iadd r12.w, r12.w, l(1)
          endloop 
        else 
          utof r20.z, r7.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r20.xyzx, t9.xxxx, s13, r5.z
        endif 
        mul r4.w, r9.w, r9.w
        mul r4.w, r9.w, r4.w
      else 
        mov r4.w, l(1.000000)
      endif 
      mul r8.w, r4.w, r8.w
    else 
      and r4.w, cb2[53].x, l(0x0000ffff)
      ult r5.z, l(0), r4.w
      not r7.w, r10.x
      and r5.z, r5.z, r7.w
      if_nz r5.z
        iadd r4.w, r4.w, cb2[0].x
        imad r4.w, r4.w, l(15), l(-15)
        mad r5.z, |r3.w|, l(-0.200000), l(0.400000)
        mad r20.xyz, r12.xyzx, r5.zzzz, r11.xyzx
        mov r21.xyz, cb9[r4.w + 4].yzwy
        mov r21.w, cb9[r4.w + 5].x
        mov r20.w, l(1.000000)
        dp4 r21.x, r21.xyzw, r20.xyzw
        mov r22.xyz, cb9[r4.w + 5].yzwy
        mov r22.w, cb9[r4.w + 6].x
        dp4 r21.y, r22.xyzw, r20.xyzw
        mad r15.yz, r21.xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
        add r21.x, r15.y, cb9[r4.w + 9].w
        add r21.y, r15.z, cb9[r4.w + 10].x
        mul r15.yz, r21.xxyx, cb9[r4.w + 9].yyzy
        div r16.yz, cb9[r4.w + 3].yyyy, cb9[r4.w + 8].yywy
        add r21.xy, -r16.yzyy, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r21.xy, r15.yzyy, r21.xyxx
        ge r16.yz, r16.yyzy, r15.yyzy
        or r16.yz, r16.yyzy, r21.xxyx
        or r5.z, r16.z, r16.y
        if_z r5.z
          mov r21.xyz, cb9[r4.w + 6].yzwy
          mov r21.w, cb9[r4.w + 7].x
          dp4 r5.z, r21.xyzw, r20.xyzw
          mov_sat r15.yz, r15.yyzy
          mad r20.x, r15.y, cb9[r4.w + 8].y, cb9[r4.w + 8].z
          mad r20.y, r15.z, cb9[r4.w + 8].w, cb9[r4.w + 9].x
          add r5.z, r5.z, cb9[r4.w + 10].y
          div r5.z, r5.z, cb9[r4.w + 10].z
          max r5.z, r5.z, l(0.00006104)
          and r7.w, l(0x0000ffff), cb9[r4.w + 1].w
          if_nz cb2[58].y
            mov r21.x, -r3.x
            utof r22.z, r7.w
            mov r21.y, r14.x
            mov r21.z, r3.x
            mov r9.w, l(0)
            mov r12.w, l(0)
            loop 
              ige r13.w, r12.w, l(8)
              breakc_nz r13.w
              dp2 r23.x, icb[r12.w + 0].yxyy, r21.xyxx
              dp2 r23.y, icb[r12.w + 0].yxyy, r21.yzyy
              mad r22.xy, r23.xyxx, cb9[r4.w + 3].yyyy, r20.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r22.xyzx, t9.xxxx, s13, r5.z
              mad r9.w, r13.w, l(0.125000), r9.w
              iadd r12.w, r12.w, l(1)
            endloop 
          else 
            utof r20.z, r7.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r20.xyzx, t9.xxxx, s13, r5.z
          endif 
          mul r4.w, r9.w, r9.w
          mul r4.w, r9.w, r4.w
        else 
          mov r4.w, l(1.000000)
        endif 
        mul r8.w, r4.w, r8.w
      endif 
    endif 
    mad r4.w, -r2.x, l(0.500000), l(1.000000)
    mad r4.w, -r6.w, r4.w, l(1.000000)
    mul r4.w, r4.w, r4.w
    mad r4.w, -r4.w, l(0.620000), l(0.620000)
    add r4.w, -r6.w, r4.w
    mad r4.w, r1.w, r4.w, r6.w
    mul r4.w, r8.w, r4.w
    lt r3.w, l(0.000000), r3.w
    mad r20.xyz, r4.wwww, r10.yzwy, r18.xyzx
    mad r15.yzw, -r11.xxyz, r0.wwww, cb2[17].xxyz
    dp3 r0.w, r15.yzwy, r15.yzwy
    rsq r0.w, r0.w
    mul r15.yzw, r0.wwww, r15.yyzw
    dp3 r0.w, r15.yzwy, r13.xyzx
    dp3 r4.w, r12.xyzx, r15.yzwy
    mad r5.z, |r4.w|, r1.z, -|r4.w|
    mad r4.w, |r4.w|, r5.z, l(1.000000)
    mad r5.z, r6.w, r0.y, r0.z
    mul r4.w, r4.w, r4.w
    mul r4.w, r5.z, r4.w
    rcp r4.w, r4.w
    mul r3.z, r3.z, r4.w
    mul r3.z, r3.z, r8.w
    mul r3.z, r3.z, l(0.250000)
    mad r15.yzw, r3.zzzz, r10.yyzw, r2.yyzw
    add_sat r0.w, -r0.w, l(1.000000)
    mul r4.w, r0.w, r0.w
    mul r4.w, r4.w, r4.w
    mul r0.w, r0.w, r4.w
    mul r0.w, r0.w, r3.z
    mad r21.xyz, r0.wwww, r10.zwyz, r19.xyzx
    mov r20.w, r21.z
    mov r18.w, r19.z
    movc r18.xyzw, r3.wwww, r20.xyzw, r18.xyzw
    mov r21.zw, r15.yyyz
    mov r19.zw, r2.yyyz
    movc r20.xyzw, r3.wwww, r21.xyzw, r19.xyzw
    movc r2.w, r3.w, r15.w, r2.w
    mov r19.z, r18.w
    mov r19.xy, r20.xyxx
    mov r2.yz, r20.zzwz
  endif 
endif 
ushr r0.w, r0.x, l(24)
ubfe r0.x, l(10), l(12), r0.x
not r3.z, r10.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r20.x, -r3.x
mov r11.w, l(1.000000)
mov r21.w, l(1.000000)
mov r20.z, r3.x
mov r22.z, l(1.000000)
mov r23.w, l(1.000000)
mov r24.w, l(1.000000)
mov r20.yw, r14.xxxx
mov r3.y, r20.w
mov r25.w, l(1.000000)
mov r14.y, r20.x
mov r14.z, r3.x
mov r26.w, l(1.000000)
mov r27.x, r14.x
mov r27.y, r20.x
mov r27.z, r3.x
mov r28.x, r14.x
mov r28.y, r20.x
mov r28.z, r3.x
mov r29.x, r14.x
mov r29.y, r20.x
mov r29.z, r3.x
mov r10.yzw, r18.xxyz
mov r30.xyz, r19.zxyz
mov r31.xyz, r2.yzwy
mov r3.w, l(0)
loop 
  ieq r4.w, r3.w, l(2)
  breakc_nz r4.w
  movc r4.w, r3.w, r0.x, r0.w
  imul null, r4.w, r4.w, l(15)
  ubfe r5.z, l(3), l(24), cb9[r4.w + 1].w
  switch r5.z
    case l(4)
    lt r5.z, l(0.000000), cb9[r4.w + 6].y
    mov r32.xy, cb9[r4.w + 5].zwzz
    mov r32.z, cb9[r4.w + 6].x
    mad r15.yzw, -r32.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r4.w + 0].xxyz
    add r16.yzw, -r11.xxyz, r15.yyzw
    dp3 r6.w, r32.xyzx, r16.yzwy
    div_sat r7.w, -r6.w, cb9[r4.w + 6].y
    mad r33.xyz, r7.wwww, r32.xyzx, r15.yzwy
    movc r33.xyz, r5.zzzz, r33.xyzx, cb9[r4.w + 0].xyzx
    add r33.xyz, -r11.xyzx, r33.xyzx
    dp3 r8.w, r33.xyzx, r33.xyzx
    rsq r9.w, r8.w
    mul r33.xyz, r9.wwww, r33.xyzx
    dp3 r9.w, r12.xyzx, r33.xyzx
    mov_sat r12.w, r9.w
    lt r13.w, l(0.000000), r12.w
    if_nz r13.w
      sqrt r13.w, r8.w
      mul r14.w, cb9[r4.w + 3].x, cb9[r4.w + 3].x
      div r8.w, r14.w, r8.w
      min r8.w, r8.w, l(1.000000)
      mad_sat r33.xy, r13.wwww, cb9[r4.w + 2].xzxx, cb9[r4.w + 2].ywyy
      mul r33.zw, r33.xxxy, r33.xxxy
      mad r33.xy, r33.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r33.xy, r33.xyxx, r33.zwzz
      mul r8.w, r8.w, r33.x
      mul r8.w, r33.y, r8.w
      lt r13.w, l(0.000000), r8.w
      if_nz r13.w
        ubfe r13.w, l(3), l(27), cb9[r4.w + 1].w
        ine r13.w, r13.w, l(1)
        if_nz r13.w
          mad r13.w, |r9.w|, l(-0.200000), l(0.400000)
          mad r33.xyz, r12.xyzx, r13.wwww, r11.xyzx
          add r33.xyz, r33.xyzx, -cb9[r4.w + 4].yzwy
          max r13.w, |r33.z|, |r33.y|
          max r13.w, r13.w, |r33.x|
          div r13.w, cb9[r4.w + 5].x, r13.w
          add r13.w, r13.w, cb9[r4.w + 5].y
          dp3 r14.w, r33.xyzx, r33.xyzx
          rsq r14.w, r14.w
          max r13.w, r13.w, l(0.00006104)
          and r17.w, l(0x0000ffff), cb9[r4.w + 1].w
          utof r34.w, r17.w
          mov r17.w, l(0)
          mov r18.w, l(0)
          loop 
            ige r19.w, r18.w, l(8)
            breakc_nz r19.w
            dp2 r35.y, icb[r18.w + 0].yxyy, r20.xyxx
            dp2 r35.z, icb[r18.w + 0].yxyy, r20.yzyy
            mul r35.yz, r35.yyzy, cb9[r4.w + 3].yyyy
            mul r35.x, r16.x, r35.y
            mul r35.w, r15.x, r35.y
            mad r34.xyz, r33.xyzx, r14.wwww, r35.xzwx
            sample_c_lz_indexable(texturecubearray)(float,float,float,float) r19.w, r34.xyzw, t10.xxxx, s13, r13.w
            mad r17.w, r19.w, l(0.125000), r17.w
            iadd r18.w, r18.w, l(1)
          endloop 
        else 
          mov r17.w, l(1.000000)
        endif 
        mul r8.w, r8.w, r17.w
        lt r13.w, l(0.000000), r8.w
        if_nz r13.w
          mul r13.w, r1.z, cb9[r4.w + 1].z
          mul r13.w, r13.w, l(0.250000)
          dp3 r14.w, r32.xyzx, r17.xyzx
          dp3 r16.y, r17.xyzx, r16.yzwy
          mad r16.z, -r14.w, r14.w, cb9[r4.w + 6].y
          mad r6.w, r14.w, r16.y, -r6.w
          div_sat r6.w, r6.w, r16.z
          div r14.w, r16.z, cb9[r4.w + 6].y
          mul r14.w, r14.w, l(10.000000)
          min r14.w, r14.w, l(1.000000)
          add r6.w, -r7.w, r6.w
          mad r6.w, r14.w, r6.w, r7.w
          mad r15.yzw, r6.wwww, r32.xxyz, r15.yyzw
          movc r15.yzw, r5.zzzz, r15.yyzw, cb9[r4.w + 0].xxyz
          add r15.yzw, -r11.xxyz, r15.yyzw
          dp3 r5.z, r15.yzwy, r15.yzwy
          rsq r5.z, r5.z
          mul r16.yzw, r5.zzzz, r15.yyzw
          ubfe r6.w, l(4), l(16), cb9[r4.w + 1].w
          ult r7.w, l(0), r6.w
          and r7.w, r10.x, r7.w
          if_nz r7.w
            iadd r6.w, r6.w, cb2[0].x
            imad r6.w, r6.w, l(15), l(-15)
            mad r7.w, |r9.w|, l(-0.200000), l(0.400000)
            mad r21.xyz, r12.xyzx, r7.wwww, r11.xyzx
            mov r32.xyz, cb9[r6.w + 6].yzwy
            mov r32.w, cb9[r6.w + 7].x
            dp4 r7.w, r32.xyzw, r21.xyzw
            mov r32.xyz, cb9[r6.w + 7].yzwy
            mov r32.w, cb9[r6.w + 8].x
            dp4 r14.w, r32.xyzw, r21.xyzw
            lt r18.w, r14.w, r7.w
            if_z r18.w
              mov r32.xyz, cb9[r6.w + 4].yzwy
              mov r32.w, cb9[r6.w + 5].x
              dp4 r32.x, r32.xyzw, r21.xyzw
              mov r33.xyz, cb9[r6.w + 5].yzwy
              mov r33.w, cb9[r6.w + 6].x
              dp4 r32.y, r33.xyzw, r21.xyzw
              div r21.xy, r32.xyxx, r14.wwww
              mad r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r32.x, r21.x, cb9[r6.w + 9].w
              add r32.y, r21.y, cb9[r6.w + 10].x
              mul r21.xy, r32.xyxx, cb9[r6.w + 9].yzyy
              div r32.xy, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].ywyy
              add r32.zw, -r32.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              ge r32.zw, r21.xxxy, r32.zzzw
              ge r32.xy, r32.xyxx, r21.xyxx
              or r32.xy, r32.xyxx, r32.zwzz
              or r19.w, r32.y, r32.x
              if_z r19.w
                mov_sat r21.xy, r21.xyxx
                mad r32.x, r21.x, cb9[r6.w + 8].y, cb9[r6.w + 8].z
                mad r32.y, r21.y, cb9[r6.w + 8].w, cb9[r6.w + 9].x
                mul r21.x, r14.w, cb9[r6.w + 10].z
                mad r7.w, cb9[r6.w + 10].y, r14.w, r7.w
                div r7.w, r7.w, r21.x
              endif 
            else 
              mov r19.w, l(-1)
            endif 
            or r14.w, r18.w, r19.w
            if_z r14.w
              max r7.w, r7.w, l(0.00006104)
              and r14.w, l(0x0000ffff), cb9[r6.w + 1].w
              if_nz cb2[58].y
                utof r21.z, r14.w
                mov r18.w, l(0)
                mov r19.w, l(0)
                loop 
                  ige r22.w, r19.w, l(8)
                  breakc_nz r22.w
                  dp2 r33.x, icb[r19.w + 0].yxyy, r20.xwxx
                  dp2 r33.y, icb[r19.w + 0].xyxx, r3.xyxx
                  mad r21.xy, r33.xyxx, cb9[r6.w + 3].yyyy, r32.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r7.w
                  mad r18.w, r21.x, l(0.125000), r18.w
                  iadd r19.w, r19.w, l(1)
                endloop 
              else 
                utof r32.z, r14.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r32.xyzx, t9.xxxx, s13, r7.w
              endif 
              mul r6.w, r18.w, r18.w
              mul r6.w, r18.w, r6.w
            else 
              mov r6.w, l(1.000000)
            endif 
            mul r8.w, r6.w, r8.w
          else 
            ubfe r6.w, l(4), l(20), cb9[r4.w + 1].w
            ult r7.w, l(0), r6.w
            and r7.w, r3.z, r7.w
            if_nz r7.w
              iadd r6.w, r6.w, cb2[0].x
              imad r6.w, r6.w, l(15), l(-15)
              mad r7.w, |r9.w|, l(-0.200000), l(0.400000)
              mad r23.xyz, r12.xyzx, r7.wwww, r11.xyzx
              mov r32.xyz, cb9[r6.w + 6].yzwy
              mov r32.w, cb9[r6.w + 7].x
              dp4 r7.w, r32.xyzw, r23.xyzw
              mov r32.xyz, cb9[r6.w + 7].yzwy
              mov r32.w, cb9[r6.w + 8].x
              dp4 r14.w, r32.xyzw, r23.xyzw
              lt r19.w, r14.w, r7.w
              if_z r19.w
                mov r32.xyz, cb9[r6.w + 4].yzwy
                mov r32.w, cb9[r6.w + 5].x
                dp4 r21.x, r32.xyzw, r23.xyzw
                mov r32.xyz, cb9[r6.w + 5].yzwy
                mov r32.w, cb9[r6.w + 6].x
                dp4 r21.y, r32.xyzw, r23.xyzw
                div r21.xy, r21.xyxx, r14.wwww
                mad r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r23.x, r21.x, cb9[r6.w + 9].w
                add r23.y, r21.y, cb9[r6.w + 10].x
                mul r21.xy, r23.xyxx, cb9[r6.w + 9].yzyy
                div r23.xy, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].ywyy
                add r32.xy, -r23.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r32.xy, r21.xyxx, r32.xyxx
                ge r23.xy, r23.xyxx, r21.xyxx
                or r23.xy, r23.xyxx, r32.xyxx
                or r21.z, r23.y, r23.x
                if_z r21.z
                  mov_sat r21.xy, r21.xyxx
                  mad r23.x, r21.x, cb9[r6.w + 8].y, cb9[r6.w + 8].z
                  mad r23.y, r21.y, cb9[r6.w + 8].w, cb9[r6.w + 9].x
                  mul r21.x, r14.w, cb9[r6.w + 10].z
                  mad r7.w, cb9[r6.w + 10].y, r14.w, r7.w
                  div r7.w, r7.w, r21.x
                endif 
              else 
                mov r21.z, l(-1)
              endif 
              or r14.w, r19.w, r21.z
              if_z r14.w
                max r7.w, r7.w, l(0.00006104)
                and r14.w, l(0x0000ffff), cb9[r6.w + 1].w
                if_nz cb2[58].y
                  utof r21.z, r14.w
                  mov r19.w, l(0)
                  mov r22.w, l(0)
                  loop 
                    ige r27.w, r22.w, l(8)
                    breakc_nz r27.w
                    dp2 r32.x, icb[r22.w + 0].xyxx, r14.xyxx
                    dp2 r32.y, icb[r22.w + 0].yxyy, r14.xzxx
                    mad r21.xy, r32.xyxx, cb9[r6.w + 3].yyyy, r23.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r7.w
                    mad r19.w, r21.x, l(0.125000), r19.w
                    iadd r22.w, r22.w, l(1)
                  endloop 
                else 
                  utof r23.z, r14.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r19.w, r23.xyzx, t9.xxxx, s13, r7.w
                endif 
                mul r6.w, r19.w, r19.w
                mul r6.w, r19.w, r6.w
              else 
                mov r6.w, l(1.000000)
              endif 
              mul r8.w, r6.w, r8.w
            endif 
          endif 
          mad r6.w, -r12.w, r2.x, l(1.000000)
          mul r6.w, r6.w, r6.w
          mad r6.w, -r6.w, l(0.620000), l(0.620000)
          add r6.w, -r12.w, r6.w
          mad r6.w, r1.w, r6.w, r12.w
          mul r6.w, r8.w, r6.w
          mov r21.x, cb9[r4.w + 0].w
          mov r21.yz, cb9[r4.w + 1].xxyx
          lt r7.w, l(0.000000), r9.w
          mad r23.xyz, r6.wwww, r21.xyzx, r10.yzwy
          dp3_sat r6.w, r12.xyzx, r16.yzwy
          mad r15.yzw, r15.yyzw, r5.zzzz, r13.xxyz
          dp3 r5.z, r15.yzwy, r15.yzwy
          rsq r5.z, r5.z
          mul r15.yzw, r5.zzzz, r15.yyzw
          dp3 r5.z, r15.yzwy, r13.xyzx
          dp3 r9.w, r12.xyzx, r15.yzwy
          mad r12.w, |r9.w|, r1.z, -|r9.w|
          mad r9.w, |r9.w|, r12.w, l(1.000000)
          mad r12.w, r6.w, r0.y, r0.z
          mul r9.w, r9.w, r9.w
          mul r9.w, r12.w, r9.w
          rcp r9.w, r9.w
          mul r6.w, r13.w, r6.w
          mul r6.w, r6.w, r9.w
          mul r6.w, r8.w, r6.w
          mad r15.yzw, r6.wwww, r21.xxyz, r31.xxyz
          add_sat r5.z, -r5.z, l(1.000000)
          mul r8.w, r5.z, r5.z
          mul r8.w, r8.w, r8.w
          mul r5.z, r5.z, r8.w
          mul r5.z, r5.z, r6.w
          mad r16.yzw, r5.zzzz, r21.xxyz, r30.xxyz
          movc r10.yzw, r7.wwww, r23.xxyz, r10.yyzw
          movc r30.xyz, r7.wwww, r16.yzwy, r30.xyzx
          movc r31.xyz, r7.wwww, r15.yzwy, r31.xyzx
        endif 
      endif 
    endif 
    break 
    case l(2)
    add r21.xy, -r11.xyxx, cb9[r4.w + 3].zwzz
    add r21.z, -r11.z, cb9[r4.w + 4].x
    dp3 r5.z, r21.xyzx, r21.xyzx
    rsq r5.z, r5.z
    mul r15.yzw, r5.zzzz, r21.xxyz
    dp3 r6.w, r12.xyzx, r15.yzwy
    mov_sat r7.w, r6.w
    lt r8.w, l(0.000000), r7.w
    if_nz r8.w
      mov r32.xyz, cb9[r4.w + 7].yzwy
      mov r32.w, cb9[r4.w + 8].x
      dp4 r8.w, r32.xyzw, r11.xyzw
      lt r9.w, r8.w, l(1.000000)
      if_nz r9.w
        mov r15.yzw, l(0,1.000000,1.000000,1.000000)
        mov r9.w, l(0)
      else 
        add r16.yzw, -r11.xxyz, cb9[r4.w + 0].xxyz
        mul r12.w, cb9[r4.w + 3].x, cb9[r4.w + 3].x
        dp3 r13.w, r16.yzwy, r16.yzwy
        div r12.w, r12.w, r13.w
        min r12.w, r12.w, l(1.000000)
        mad_sat r16.yz, r8.wwww, cb9[r4.w + 2].xxzx, cb9[r4.w + 2].yywy
        mul r23.xy, r16.yzyy, r16.yzyy
        mad r16.yz, r16.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
        mul r16.yz, r16.yyzy, r23.xxyx
        mul r12.w, r12.w, r16.y
        mul r12.w, r16.z, r12.w
        mov r33.xyz, cb9[r4.w + 4].yzwy
        mov r33.w, cb9[r4.w + 5].x
        dp4 r23.x, r33.xyzw, r11.xyzw
        mov r33.xyz, cb9[r4.w + 5].yzwy
        mov r33.w, cb9[r4.w + 6].x
        dp4 r23.y, r33.xyzw, r11.xyzw
        div r22.xy, r23.xyxx, r8.wwww
        lt r8.w, cb9[r4.w + 10].w, l(0.00048828)
        if_nz r8.w
          mad_sat r16.yz, |r22.xxyx|, cb9[r4.w + 12].xxyx, cb9[r4.w + 12].zzwz
          mul r23.xy, r16.yzyy, r16.yzyy
          mad r16.yz, r16.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
          mul r16.yz, r16.yyzy, r23.xxyx
          mul r8.w, r16.z, r16.y
        else 
          mul_sat r33.xyzw, |r22.yyxx|, cb9[r4.w + 11].xyzw
          log r33.xyzw, r33.xyzw
          mul r33.xyzw, r33.xyzw, cb9[r4.w + 12].zzzz
          exp r33.xyzw, r33.xyzw
          add r16.yz, r33.zzwz, r33.xxyx
          log r16.yz, r16.yyzy
          mul r16.yz, r16.yyzy, cb9[r4.w + 12].wwww
          exp r16.yz, r16.yyzy
          mul r13.w, r16.y, cb9[r4.w + 12].x
          mad r14.w, cb9[r4.w + 12].y, r16.z, l(-1.000000)
          mad r13.w, cb9[r4.w + 12].y, r16.z, -r13.w
          div_sat r13.w, r14.w, r13.w
          mul r14.w, r13.w, r13.w
          mad r13.w, r13.w, l(-2.000000), l(3.000000)
          mul r8.w, r13.w, r14.w
        endif 
        mul r9.w, r8.w, r12.w
        and r8.w, l(255), cb9[r4.w + 14].w
        if_nz r8.w
          dp3 r12.w, cb9[r4.w + 13].xyzx, r22.xyzx
          mov r23.x, cb9[r4.w + 13].w
          mov r23.yz, cb9[r4.w + 14].xxyx
          dp3 r13.w, r23.xyzx, r22.xyzx
          frc r23.x, r12.w
          frc r23.y, r13.w
          iadd r8.w, r8.w, l(-1)
          utof r23.z, r8.w
          sample_l_indexable(texture2darray)(float,float,float,float) r15.yzw, r23.xyzx, t20.wxyz, s2, l(0.000000)
        else 
          mov r15.yzw, l(0,1.000000,1.000000,1.000000)
        endif 
      endif 
      mov r23.x, cb9[r4.w + 0].w
      mov r23.yz, cb9[r4.w + 1].xxyx
      mul r15.yzw, r15.yyzw, r23.xxyz
      lt r8.w, l(0.000000), r9.w
      if_nz r8.w
        ubfe r8.w, l(3), l(27), cb9[r4.w + 1].w
        ine r8.w, r8.w, l(1)
        if_nz r8.w
          mad r8.w, |r6.w|, l(-0.200000), l(0.400000)
          mad r24.xyz, r12.xyzx, r8.wwww, r11.xyzx
          mov r33.xyz, cb9[r4.w + 6].yzwy
          mov r33.w, cb9[r4.w + 7].x
          dp4 r8.w, r33.xyzw, r24.xyzw
          dp4 r12.w, r32.xyzw, r24.xyzw
          ge r13.w, r12.w, r8.w
          if_nz r13.w
            mov r32.xyz, cb9[r4.w + 4].yzwy
            mov r32.w, cb9[r4.w + 5].x
            dp4 r22.x, r32.xyzw, r24.xyzw
            mov r32.xyz, cb9[r4.w + 5].yzwy
            mov r32.w, cb9[r4.w + 6].x
            dp4 r22.y, r32.xyzw, r24.xyzw
            div r16.yz, r22.xxyx, r12.wwww
            mad_sat r16.yz, r16.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
            mad r23.x, r16.y, cb9[r4.w + 8].y, cb9[r4.w + 8].z
            mad r23.y, r16.z, cb9[r4.w + 8].w, cb9[r4.w + 9].x
            div r8.w, r8.w, r12.w
            max r8.w, r8.w, l(0.00006104)
            and r12.w, l(0x0000ffff), cb9[r4.w + 1].w
            if_nz cb2[58].y
              utof r24.z, r12.w
              mov r13.w, l(0)
              mov r14.w, l(0)
              loop 
                ige r16.y, r14.w, l(8)
                breakc_nz r16.y
                dp2 r22.x, icb[r14.w + 0].xyxx, r27.xyxx
                dp2 r22.y, icb[r14.w + 0].yxyy, r27.xzxx
                mad r24.xy, r22.xyxx, cb9[r4.w + 3].yyyy, r23.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.y, r24.xyzx, t9.xxxx, s13, r8.w
                mad r13.w, r16.y, l(0.125000), r13.w
                iadd r14.w, r14.w, l(1)
              endloop 
            else 
              utof r23.z, r12.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r23.xyzx, t9.xxxx, s13, r8.w
            endif 
            mul r8.w, r13.w, r13.w
            mul r8.w, r13.w, r8.w
          else 
            mov r8.w, l(1.000000)
          endif 
        else 
          mov r8.w, l(1.000000)
        endif 
        mul r8.w, r8.w, r9.w
        lt r9.w, l(0.000000), r8.w
        if_nz r9.w
          mul r9.w, r1.z, cb9[r4.w + 1].z
          mul r9.w, r7.w, r9.w
          ubfe r12.w, l(4), l(16), cb9[r4.w + 1].w
          ult r14.w, l(0), r12.w
          and r14.w, r10.x, r14.w
          if_nz r14.w
            iadd r12.w, r12.w, cb2[0].x
            imad r12.w, r12.w, l(15), l(-15)
            mad r14.w, |r6.w|, l(-0.200000), l(0.400000)
            mad r25.xyz, r12.xyzx, r14.wwww, r11.xyzx
            mov r32.xyz, cb9[r12.w + 6].yzwy
            mov r32.w, cb9[r12.w + 7].x
            dp4 r14.w, r32.xyzw, r25.xyzw
            mov r32.xyz, cb9[r12.w + 7].yzwy
            mov r32.w, cb9[r12.w + 8].x
            dp4 r16.y, r32.xyzw, r25.xyzw
            lt r16.z, r16.y, r14.w
            if_z r16.z
              mov r32.xyz, cb9[r12.w + 4].yzwy
              mov r32.w, cb9[r12.w + 5].x
              dp4 r22.x, r32.xyzw, r25.xyzw
              mov r32.xyz, cb9[r12.w + 5].yzwy
              mov r32.w, cb9[r12.w + 6].x
              dp4 r22.y, r32.xyzw, r25.xyzw
              div r22.xy, r22.xyxx, r16.yyyy
              mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r23.x, r22.x, cb9[r12.w + 9].w
              add r23.y, r22.y, cb9[r12.w + 10].x
              mul r22.xy, r23.xyxx, cb9[r12.w + 9].yzyy
              div r23.xy, cb9[r12.w + 3].yyyy, cb9[r12.w + 8].ywyy
              add r24.xy, -r23.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r24.xy, r22.xyxx, r24.xyxx
              ge r23.xy, r23.xyxx, r22.xyxx
              or r23.xy, r23.xyxx, r24.xyxx
              or r16.w, r23.y, r23.x
              if_z r16.w
                mov_sat r22.xy, r22.xyxx
                mad r23.x, r22.x, cb9[r12.w + 8].y, cb9[r12.w + 8].z
                mad r23.y, r22.y, cb9[r12.w + 8].w, cb9[r12.w + 9].x
                mul r22.x, r16.y, cb9[r12.w + 10].z
                mad r14.w, cb9[r12.w + 10].y, r16.y, r14.w
                div r14.w, r14.w, r22.x
              endif 
            else 
              mov r16.w, l(-1)
            endif 
            or r16.y, r16.z, r16.w
            if_z r16.y
              max r14.w, r14.w, l(0.00006104)
              and r16.y, l(0x0000ffff), cb9[r12.w + 1].w
              if_nz cb2[58].y
                utof r24.z, r16.y
                mov r16.zw, l(0,0,0,0)
                loop 
                  ige r22.x, r16.w, l(8)
                  breakc_nz r22.x
                  dp2 r22.x, icb[r16.w + 0].xyxx, r28.xyxx
                  dp2 r22.y, icb[r16.w + 0].yxyy, r28.xzxx
                  mad r24.xy, r22.xyxx, cb9[r12.w + 3].yyyy, r23.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r24.xyzx, t9.xxxx, s13, r14.w
                  mad r16.z, r22.x, l(0.125000), r16.z
                  iadd r16.w, r16.w, l(1)
                endloop 
              else 
                utof r23.z, r16.y
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.z, r23.xyzx, t9.xxxx, s13, r14.w
              endif 
              mul r12.w, r16.z, r16.z
              mul r12.w, r16.z, r12.w
            else 
              mov r12.w, l(1.000000)
            endif 
            mul r8.w, r8.w, r12.w
          else 
            ubfe r4.w, l(4), l(20), cb9[r4.w + 1].w
            ult r12.w, l(0), r4.w
            and r12.w, r3.z, r12.w
            if_nz r12.w
              iadd r4.w, r4.w, cb2[0].x
              imad r4.w, r4.w, l(15), l(-15)
              mad r12.w, |r6.w|, l(-0.200000), l(0.400000)
              mad r26.xyz, r12.xyzx, r12.wwww, r11.xyzx
              mov r32.xyz, cb9[r4.w + 6].yzwy
              mov r32.w, cb9[r4.w + 7].x
              dp4 r12.w, r32.xyzw, r26.xyzw
              mov r32.xyz, cb9[r4.w + 7].yzwy
              mov r32.w, cb9[r4.w + 8].x
              dp4 r14.w, r32.xyzw, r26.xyzw
              lt r16.y, r14.w, r12.w
              if_z r16.y
                mov r32.xyz, cb9[r4.w + 4].yzwy
                mov r32.w, cb9[r4.w + 5].x
                dp4 r22.x, r32.xyzw, r26.xyzw
                mov r32.xyz, cb9[r4.w + 5].yzwy
                mov r32.w, cb9[r4.w + 6].x
                dp4 r22.y, r32.xyzw, r26.xyzw
                div r22.xy, r22.xyxx, r14.wwww
                mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r23.x, r22.x, cb9[r4.w + 9].w
                add r23.y, r22.y, cb9[r4.w + 10].x
                mul r22.xy, r23.xyxx, cb9[r4.w + 9].yzyy
                div r23.xy, cb9[r4.w + 3].yyyy, cb9[r4.w + 8].ywyy
                add r24.xy, -r23.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r24.xy, r22.xyxx, r24.xyxx
                ge r23.xy, r23.xyxx, r22.xyxx
                or r23.xy, r23.xyxx, r24.xyxx
                or r16.w, r23.y, r23.x
                if_z r16.w
                  mov_sat r22.xy, r22.xyxx
                  mad r23.x, r22.x, cb9[r4.w + 8].y, cb9[r4.w + 8].z
                  mad r23.y, r22.y, cb9[r4.w + 8].w, cb9[r4.w + 9].x
                  mul r22.x, r14.w, cb9[r4.w + 10].z
                  mad r12.w, cb9[r4.w + 10].y, r14.w, r12.w
                  div r12.w, r12.w, r22.x
                endif 
              else 
                mov r16.w, l(-1)
              endif 
              or r14.w, r16.y, r16.w
              if_z r14.w
                max r12.w, r12.w, l(0.00006104)
                and r14.w, l(0x0000ffff), cb9[r4.w + 1].w
                if_nz cb2[58].y
                  utof r24.z, r14.w
                  mov r16.yw, l(0,0,0,0)
                  loop 
                    ige r22.x, r16.w, l(8)
                    breakc_nz r22.x
                    dp2 r22.x, icb[r16.w + 0].xyxx, r29.xyxx
                    dp2 r22.y, icb[r16.w + 0].yxyy, r29.xzxx
                    mad r24.xy, r22.xyxx, cb9[r4.w + 3].yyyy, r23.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r24.xyzx, t9.xxxx, s13, r12.w
                    mad r16.y, r22.x, l(0.125000), r16.y
                    iadd r16.w, r16.w, l(1)
                  endloop 
                else 
                  utof r23.z, r14.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.y, r23.xyzx, t9.xxxx, s13, r12.w
                endif 
                mul r4.w, r16.y, r16.y
                mul r4.w, r16.y, r4.w
              else 
                mov r4.w, l(1.000000)
              endif 
              mul r8.w, r4.w, r8.w
            endif 
          endif 
          mad r4.w, -r7.w, r2.x, l(1.000000)
          mul r4.w, r4.w, r4.w
          mad r4.w, -r4.w, l(0.620000), l(0.620000)
          add r4.w, -r7.w, r4.w
          mad r4.w, r1.w, r4.w, r7.w
          mul r4.w, r8.w, r4.w
          lt r6.w, l(0.000000), r6.w
          mad r22.xyw, r4.wwww, r15.yzyw, r10.yzyw
          mad r21.xyz, r21.xyzx, r5.zzzz, r13.xyzx
          dp3 r4.w, r21.xyzx, r21.xyzx
          rsq r4.w, r4.w
          mul r21.xyz, r4.wwww, r21.xyzx
          dp3 r4.w, r21.xyzx, r13.xyzx
          dp3 r5.z, r12.xyzx, r21.xyzx
          mad r12.w, |r5.z|, r1.z, -|r5.z|
          mad r5.z, |r5.z|, r12.w, l(1.000000)
          mad r7.w, r7.w, r0.y, r0.z
          mul r5.z, r5.z, r5.z
          mul r5.z, r7.w, r5.z
          rcp r5.z, r5.z
          mul r5.z, r9.w, r5.z
          mul r5.z, r5.z, r8.w
          mul r5.z, r5.z, l(0.250000)
          mad r21.xyz, r5.zzzz, r15.yzwy, r31.xyzx
          add_sat r4.w, -r4.w, l(1.000000)
          mul r7.w, r4.w, r4.w
          mul r7.w, r7.w, r7.w
          mul r4.w, r4.w, r7.w
          mul r4.w, r4.w, r5.z
          mad r15.yzw, r4.wwww, r15.yyzw, r30.xxyz
          movc r10.yzw, r6.wwww, r22.xxyw, r10.yyzw
          movc r30.xyz, r6.wwww, r15.yzwy, r30.xyzx
          movc r31.xyz, r6.wwww, r21.xyzx, r31.xyzx
        endif 
      endif 
    endif 
    break 
    default 
    break 
  endswitch 
  iadd r3.w, r3.w, l(1)
endloop 
mad r0.xyz, r5.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r1.z, r0.y
mad r2.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r2.x
ieq r1.w, r1.z, r1.w
movc r2.xy, r1.wwww, r2.yzyy, l(-1.000000,0,0,0)
mad r3.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r3.x
ieq r1.w, r1.z, r1.w
movc r2.zw, r1.wwww, r3.yyyz, l(0,0,-1.000000,0)
mad r3.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r3.x
ieq r1.w, r1.z, r1.w
movc r3.xy, r1.wwww, r3.yzyy, l(-1.000000,0,0,0)
mad r5.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r1.z, r1.z, r1.w
movc r1.zw, r1.zzzz, r5.yyyz, l(0,0,-1.000000,0)
mov r5.xy, r2.xzxx
mov r5.z, r3.x
mov r5.w, r1.z
add r5.xyzw, -r0.xxxx, r5.xyzw
ge r5.xyzw, |r5.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r5.xyzw, r5.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r1.z, r5.y, r5.x
add r1.z, r5.z, r1.z
add r1.z, r5.w, r1.z
mul r2.x, r2.w, r5.y
mad r2.x, r5.x, r2.y, r2.x
mad r2.x, r5.z, r3.y, r2.x
mad r1.w, r5.w, r1.w, r2.x
div r0.w, r1.w, r1.z
ge r1.z, l(0.000000), r1.z
movc r0.yz, r1.zzzz, l(0,0,0,0), r0.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.w, r1.w, r1.z
movc r0.xyz, r0.wwww, r0.xyzx, r0.xzyx
mad r0.x, -r0.z, l(0.500000), r0.x
add r2.y, r0.x, r0.z
mad r2.z, -r0.y, l(0.500000), r0.x
add r2.x, r0.y, r2.z
add r0.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r30.xyzx
mad r0.xyz, r31.xyzx, r2.xyzx, r0.xyzx
mad r0.xyz, r10.yzwy, r4.xyzx, r0.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r11.xyzx, r11.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r11.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r11.z|
    mul r3.xy, r11.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r11.z|
    mul r2.w, r11.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r11.z, cb2[6].x
  mad r1.z, cb2[6].x, r11.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r11.xyzx, r11.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r11.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 2294 instruction slots used
