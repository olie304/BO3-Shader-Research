//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:24:04 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerPointClamp                 sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gDownsampledScene                 texture  float4          2d            t21      1 
// gMotionVectors                    texture  float4          2d            t22      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 26
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(22), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.yz, r0.xxyx, l(0, 4095, 4095, 0)
imad r1.xy, r0.yzyy, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
utof r4.xy, r1.xyxx
add r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
mul r5.xy, r4.zwzz, cb1[44].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r5.x, r5.xyxx, t27.xyzw, s4, l(0.000000)
mul r3.z, r3.z, r5.x
if_nz cb2[55].x
  mul r5.x, r3.z, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r5.xxxx
  ret 
else 
  movc r5.x, cb2[54].w, r3.z, l(1.000000)
endif 
ge r3.z, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.y, r1.xyww, t4.yxzw
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
ge r11.x, r5.y, l(0.984375)
mul r1.z, r5.y, l(1.01587307)
mad r1.w, r5.y, l(64.000000), l(-63.000000)
movc r1.z, r11.x, r1.w, r1.z
max r1.z, r1.z, l(0.00000001)
rcp r11.y, r1.z
and r1.zw, r0.wwww, r11.xxxy
add r4.zw, r4.zzzw, -cb1[71].xxxy
mul r4.zw, r4.zzzw, cb1[44].zzzw
mad r4.zw, r4.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r11.x, r4.z, cb1[12].x
mul r11.y, r4.w, cb1[13].y
mov r11.z, l(1.000000)
mul r5.yzw, r1.wwww, r11.xxyz
mul r11.xyz, r5.zzzz, cb1[17].xyzx
mad r11.xyz, r5.yyyy, cb1[16].xyzx, r11.xyzx
mad r11.xyz, r5.wwww, cb1[18].xyzx, r11.xyzx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r12.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r12.z
mul r12.xy, r2.wwww, r2.xyxx
and r13.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r13.xyzw, r13.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r13.w, r13.z
movc r13.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r13.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r5.yzw, r13.xxyz, l(0.000000, 1.000000, -2.000000, 1.000000)
mul r12.xyz, r12.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r12.yyyy
mad r2.xyw, r5.yzyw, r12.xxxx, r2.xyxw
mad r12.xyz, r13.xyzx, r12.zzzz, r2.xywx
movc r0.w, r3.z, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r11.xyzx, -r11.xyzx
rsq r0.w, r0.w
mul r5.yzw, r0.wwww, -r11.xxyz
dp2 r0.w, r4.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r4.x, r13.x, r0.w
dp3_sat r2.x, r12.xyzx, r5.yzwy
dp3 r0.w, -r5.yzwy, r12.xyzx
add r0.w, r0.w, r0.w
mad r14.xyz, r12.xyzx, -r0.wwww, -r5.yzwy
mul r0.w, r2.y, l(17.000000)
exp r0.w, r0.w
add r0.w, r0.w, l(2.000000)
div r0.w, l(2.000000), r0.w
sqrt r2.z, r0.w
mul r4.yz, cb1[44].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
ftou r13.yz, r4.yyzy
ieq r13.yz, r1.xxyx, r13.yyzy
and r2.w, r13.z, r13.y
lt r4.w, l(0.83333331), r2.y
lt r6.w, l(60.000000), r1.w
and r4.w, r4.w, r6.w
if_nz r4.w
  mul r13.yzw, r11.yyyy, cb1[9].xxyw
  mad r13.yzw, r11.xxxx, cb1[8].xxyw, r13.yyzw
  mad r13.yzw, r11.zzzz, cb1[10].xxyw, r13.yyzw
  add r13.yzw, r13.yyzw, cb1[11].xxyw
  mad r15.xyz, r14.xyzx, l(2000.000000, 2000.000000, 2000.000000, 0.000000), r11.xyzx
  mul r16.xyz, r15.yyyy, cb1[9].xywx
  mad r15.xyw, r15.xxxx, cb1[8].xyxw, r16.xyxz
  mad r15.xyz, r15.zzzz, cb1[10].xywx, r15.xywx
  add r15.xyz, r15.xyzx, cb1[11].xywx
  ge r4.w, r15.z, r13.w
  if_nz r4.w
    rcp r16.z, r13.w
    mul r16.xy, r13.yzyy, r16.zzzz
    rcp r17.z, r15.z
    mul r17.xy, r15.xyxx, r17.zzzz
    lt r13.yz, l(0.000000, 1.000000, 1.000000, 0.000000), r17.xxyx
    mad r18.xyzw, r15.xxyy, r17.zzzz, l(-1.000000, 1.000000, -1.000000, 1.000000)
    mad r19.xyzw, r15.xxyy, r17.zzzz, -r16.xxyy
    lt r15.xy, r17.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
    div r18.xyzw, r18.xyzw, r19.xyzw
    and r15.xy, r15.xyxx, r18.ywyy
    movc r13.yz, r13.yyzy, r18.xxzx, r15.xxyx
    max r4.w, r13.z, r13.y
    add r15.xyw, r16.xyxz, -r17.xyxz
    mad r15.xyw, r4.wwww, r15.xyxw, r17.xyxz
    mad r13.yz, r16.xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
    mad r17.xy, r15.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r13.yz, r13.yyzy, -r17.xxyx
    mul r13.yz, r4.yyzy, |r13.yyzy|
    max r4.w, r13.z, r13.y
    max r4.w, r4.w, l(1.000000)
    rcp r4.w, r4.w
    mad r16.xyz, r16.xyzx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r18.xyz, r15.xywx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r19.xyz, -r16.xyzx, r18.xyzx
    mad r16.xyz, r4.wwww, r19.xyzx, r16.xyzx
    add r18.xyz, -r16.xyzx, r18.xyzx
    mul r19.xyz, r18.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000)
    mul r4.yz, r4.yyzy, |r19.xxyx|
    max r4.y, r4.z, r4.y
    log r4.y, r4.y
    round_pi r4.y, r4.y
    max r4.y, r4.y, l(0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r4.z, r16.xyxx, t28.yzxw, s1, r4.y
    mad r20.xyz, r18.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.z, |r4.z|, |r4.w|
    mul r4.z, r20.z, r4.z
    lt r4.z, r4.z, l(1.000000)
    and r6.w, r4.z, l(1)
    mad r20.xyz, r18.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r7.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r7.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    bfi r4.z, l(1), l(0), r4.z, l(2)
    movc r4.z, r4.w, r4.z, r6.w
    mad r20.xyz, r18.xyzx, l(0.093750, 0.093750, 0.093750, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r7.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(4)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.125000, 0.125000, 0.125000, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(8)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.156250, 0.156250, 0.156250, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(16)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.187500, 0.187500, 0.187500, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(32)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.218750, 0.218750, 0.218750, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(64)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(128)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.281250, 0.281250, 0.281250, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(256)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.312500, 0.312500, 0.312500, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(512)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.343750, 0.343750, 0.343750, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(1024)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.375000, 0.375000, 0.375000, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(2048)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.406250, 0.406250, 0.406250, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(4096)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.437500, 0.437500, 0.437500, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(8192)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.468750, 0.468750, 0.468750, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(0x00004000)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(0x00008000)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.531250, 0.531250, 0.531250, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(0x00010000)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.562500, 0.562500, 0.562500, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(0x00020000)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.593750, 0.593750, 0.593750, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(0x00040000)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.625000, 0.625000, 0.625000, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(0x00080000)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.656250, 0.656250, 0.656250, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(0x00100000)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.687500, 0.687500, 0.687500, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(0x00200000)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.718750, 0.718750, 0.718750, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(0x00400000)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(0x00800000)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.781250, 0.781250, 0.781250, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(0x01000000)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.812500, 0.812500, 0.812500, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(0x02000000)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.843750, 0.843750, 0.843750, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(0x04000000)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.875000, 0.875000, 0.875000, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(0x08000000)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.906250, 0.906250, 0.906250, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(0x10000000)
    movc r4.z, r6.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.937500, 0.937500, 0.937500, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r20.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r4.z, l(0x20000000)
    movc r4.z, r4.w, r7.w, r4.z
    mad r20.xyz, r18.xyzx, l(0.968750, 0.968750, 0.968750, 0.000000), r16.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r20.xyxx, t28.yzwx, s1, r4.y
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r20.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r4.z, l(0x40000000)
    movc r4.z, r6.w, r7.w, r4.z
    sample_l_indexable(texture2d)(float,float,float,float) r4.y, r17.xyxx, t28.yxzw, s1, r4.y
    min r4.y, |r4.w|, |r4.y|
    mul r4.y, r15.w, r4.y
    lt r4.y, r4.y, l(1.000000)
    iadd r4.w, r4.z, l(0x80000000)
    movc r4.y, r4.y, r4.w, r4.z
    mov r20.w, l(-1)
    mov r21.z, l(-1)
    mov r4.zw, l(0,0,0,0)
    mov r6.w, l(0)
    mov r7.w, r4.y
    mov r8.w, r17.z
    mov r22.yz, l(0,0,0,0)
    mov r20.z, l(0)
    mov r9.w, l(0)
    loop 
      breakc_z r7.w
      firstbit_lo r20.y, r7.w
      ishl r10.w, l(1), r20.y
      xor r20.x, r7.w, r10.w
      utof r13.y, r20.y
      mul r13.y, r13.y, l(0.031250)
      mad r15.xyw, r18.xyxz, r13.yyyy, r16.xyxz
      sample_l_indexable(texture2d)(float,float,float,float) r13.y, r15.xyxx, t28.yxzw, s1, l(0.000000)
      mul r13.z, r15.w, |r13.y|
      lt r13.z, r13.z, l(1.000000)
      if_nz r13.z
        if_nz r20.z
          lt r13.z, r13.w, |r13.y|
          lt r16.w, r8.w, r15.w
          and r13.z, r13.z, r16.w
          movc r17.xy, r13.zzzz, r15.xyxx, r4.zwzz
          mov r20.z, r15.w
          mov r22.x, r8.w
          movc r23.xyz, r13.zzzz, r20.zxyz, r22.xyzx
          mov r7.w, r20.x
          mov r20.z, l(-1)
          mov r4.zw, r17.xxxy
          mov r8.w, r23.x
          mov r22.yz, r23.yyzy
          continue 
        endif 
        mov r13.z, r22.y
        mov r16.w, l(0)
      else 
        not r10.w, r10.w
        and r13.z, r10.w, r22.y
        mov r16.w, r20.z
      endif 
      if_nz r9.w
        mov r7.w, r20.x
        mov r22.y, r13.z
        mov r20.z, r16.w
        mov r9.w, l(-1)
        continue 
      endif 
      mov r17.xy, r4.zwzz
      mov r10.w, r6.w
      mov r17.w, r8.w
      mov r22.y, r13.z
      mov r22.x, r22.z
      mov r20.z, r16.w
      mov r21.w, r9.w
      mov r18.w, r15.w
      mov r19.w, |r13.y|
      mov r22.w, l(0)
      loop 
        ige r23.x, r22.w, l(4)
        breakc_nz r23.x
        itof r23.x, r22.w
        add r23.x, r23.x, l(1.000000)
        mul r23.x, r23.x, l(0.250000)
        mad r23.xyz, r19.xyzx, r23.xxxx, r15.xywx
        sample_l_indexable(texture2d)(float,float,float,float) r23.w, r23.xyxx, t28.yzwx, s1, l(0.000000)
        mul r24.x, r23.z, |r23.w|
        lt r24.x, r24.x, l(1.000000)
        if_nz r24.x
          lt r24.x, r13.w, |r23.w|
          add r24.y, -r18.w, r23.z
          add r24.z, -r19.w, |r23.w|
          mul r24.w, r18.w, r23.z
          mul r24.z, r24.w, |r24.z|
          lt r24.y, r24.z, |r24.y|
          and r24.z, r24.y, r24.x
          lt r24.w, r17.w, r23.z
          and r25.x, r24.w, r24.x
          movc r21.xy, r25.xxxx, r20.xyxx, r22.yxyy
          or r24.y, r24.y, r24.w
          and r24.x, r24.x, r24.y
          movc r23.xy, r24.xxxx, r23.xyxx, r17.xyxx
          movc r24.y, r24.z, l(1.000000), r10.w
          movc r24.x, r24.x, r23.z, r17.w
          movc r25.xyzw, r24.zzzz, r20.xyzw, r21.xyzw
          mov r10.w, r24.y
          mov r17.xy, r23.xyxx
          mov r17.w, r24.x
          mov r22.xy, r25.yxyy
          mov r20.z, r25.z
          mov r21.w, r25.w
          break 
        endif 
        mov r18.w, r23.z
        mov r19.w, |r23.w|
        iadd r22.w, r22.w, l(1)
      endloop 
      mov r4.zw, r17.xxxy
      mov r6.w, r10.w
      mov r8.w, r17.w
      mov r22.yz, r22.yyxy
      mov r9.w, r21.w
      mov r7.w, r20.x
    endloop 
    rcp r4.y, r8.w
    add r4.y, -r13.w, r4.y
    add r7.w, -r13.w, r15.z
    div r4.y, |r4.y|, |r7.w|
    min r15.x, r4.y, l(1.000000)
    countbits r4.y, r22.y
    utof r4.y, r4.y
    add r4.y, r4.y, l(1.000000)
    iadd r7.w, -r22.z, l(32)
    utof r7.w, r7.w
    div r4.y, r4.y, r7.w
    min r15.y, r4.y, l(1.000000)
  else 
    mov r15.xy, l(1.000000,0,0,0)
    mov r6.w, l(0)
  endif 
  add r4.y, r2.y, l(-0.83333331)
  mul r4.y, r4.y, l(5.99999952)
  max r4.y, r4.y, l(0.000000)
  mad r7.w, r4.y, l(-2.000000), l(3.000000)
  mul r4.y, r4.y, r4.y
  mul r4.y, r4.y, r7.w
  add r1.w, r1.w, l(-60.000000)
  mul_sat r1.w, r1.w, l(0.01666667)
  mad r7.w, r1.w, l(-2.000000), l(3.000000)
  mul r1.w, r1.w, r1.w
  mul r1.w, r1.w, r7.w
  mul r1.w, r1.w, r4.y
  mul r1.w, r15.y, r1.w
  mad r13.yz, r4.zzwz, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
  add r13.yz, |r13.yyzy|, l(0.000000, -0.500000, -0.500000, 0.000000)
  add_sat r13.yz, r13.yyzy, r13.yyzy
  mad r15.yz, r13.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
  mul r13.yz, r13.yyzy, r13.yyzy
  mad r13.yz, -r15.yyzy, r13.yyzy, l(0.000000, 1.000000, 1.000000, 0.000000)
  mul r4.y, r13.z, r13.y
  mul r1.w, r1.w, r4.y
  mul r4.y, r15.x, l(10.000000)
  min r4.y, r4.y, l(1.000000)
  add r7.w, -r6.w, l(1.000000)
  mul r7.w, r1.w, r7.w
  add r4.y, r4.y, l(-1.000000)
  mad r4.y, r7.w, r4.y, l(1.000000)
  mul r1.w, r6.w, r1.w
  lt r6.w, l(0.000000), r1.w
  if_nz r6.w
    sample_l_indexable(texture2d)(float,float,float,float) r13.yz, r4.zwzz, t22.zxyw, s4, l(0.000000)
    add r15.xy, |r13.yzyy|, l(-0.500000, -0.500000, 0.000000, 0.000000)
    add_sat r15.xy, r15.xyxx, r15.xyxx
    add r15.zw, |r13.yyyz|, |r13.yyyz|
    min r15.zw, r15.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    mul r15.zw, r15.zzzw, l(0.000000, 0.000000, 10.000000, 10.000000)
    mad r15.xy, r15.xyxx, l(30.000000, 30.000000, 0.000000, 0.000000), r15.zwzz
    ge r13.yz, r13.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
    movc r13.yz, r13.yyzy, r15.xxyx, -r15.xxyx
    mad r4.zw, -r13.yyyz, cb1[44].zzzw, r4.zzzw
    sample_l_indexable(texture2d)(float,float,float,float) r13.yzw, r4.zwzz, t21.wxyz, s4, l(0.000000)
    mul r13.yzw, r13.yyzw, cb1[85].xxxx
    mul r13.yzw, r1.wwww, r13.yyzw
  else 
    mov r13.yzw, l(0,0,0,0)
    mov r1.w, l(0)
  endif 
else 
  mov r13.yzw, l(0,0,0,0)
  mov r4.y, l(1.000000)
  mov r1.w, l(0)
endif 
add r4.z, -r2.y, l(1.000000)
mul r4.z, r4.z, l(5.000000)
add r15.xyz, r11.xyzx, -cb2[35].xyzx
mul r16.x, r15.x, cb2[35].w
mul r16.yz, r15.yyzy, cb2[36].xxyx
add_sat r15.xyz, r16.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mul r16.xy, r15.xyxx, cb2[36].zwzz
mul r16.z, r15.z, cb2[37].x
add r15.xyz, r16.xyzx, cb2[37].yzwy
lt r16.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
movc r16.xyz, r16.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
mov r16.w, l(0)
add r17.xyz, r15.xyzx, r16.wwxw
sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t17.xyzw, s4, l(0.000000)
mul r18.xyz, r12.xyzx, r12.xyzx
mul r18.xyz, r18.xyzx, cb2[19].xxxx
add r19.xyz, r15.xyzx, r16.wwyw
sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t18.xyzw, s4, l(0.000000)
mul r19.xyz, r18.yyyy, r19.xyzx
mad r17.xyz, r17.xyzx, r18.xxxx, r19.xyzx
add r15.xyz, r15.xyzx, r16.wwzw
sample_l_indexable(texture3d)(float,float,float,float) r15.xyz, r15.xyzx, t19.xyzw, s4, l(0.000000)
mad r15.xyz, r15.xyzx, r18.zzzz, r17.xyzx
mov r12.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r16.xyz, r12.xyzw, t8.xyzw, s2, l(6.000000)
mul r15.xyz, r15.xyzx, r16.xyzx
dp3 r4.w, r15.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
mov r14.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r16.xyz, r14.xyzw, t8.xyzw, s2, r4.z
add r4.z, -r4.w, cb2[19].x
mad r4.z, r2.y, r4.z, r4.w
mul r16.xyz, r4.zzzz, r16.xyzx
add r1.w, -r1.w, l(1.000000)
mad r13.yzw, r16.xxyz, r1.wwww, r13.yyzw
add r1.w, r5.x, r2.x
log r1.w, |r1.w|
mul r1.w, r1.w, r2.z
exp r1.w, r1.w
add r1.w, r5.x, r1.w
add_sat r1.w, r1.w, l(-1.000000)
mul r1.w, r4.y, r1.w
mul r4.yzw, r5.xxxx, r15.xxyz
and r16.xyz, r3.zzzz, r4.yzwy
mad r17.xy, r2.xyxx, l(0.984375, 0.984375, 0.000000, 0.000000), l(0.00781250, 0.00781250, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r17.xy, r17.xyxx, t5.xyzw, s2, l(0.000000)
mul r13.yzw, r1.wwww, r13.yyzw
mul r17.xzw, r17.xxxx, r13.yyzw
mul r13.yzw, r17.yyyy, r13.yyzw
sqrt r1.w, r2.z
mad r1.w, r1.w, l(0.500000), l(0.500000)
mul r1.w, r1.w, r1.w
mul r2.y, r1.w, l(0.500000)
mad r1.w, -r1.w, l(0.500000), l(1.000000)
mad r6.w, r2.x, r1.w, r2.y
mul r1.w, r1.w, r6.w
mul r2.y, r2.y, r6.w
ushr r0.x, r0.x, l(24)
imul null, r0.x, r0.x, l(15)
ubfe r6.w, l(3), l(24), cb9[r0.x + 1].w
switch r6.w
  case l(4)
  if_nz r2.w
    add r18.yzw, cb1[24].xxyz, cb9[r0.x + 0].xxyz
    mov r18.x, l(2)
    store_structured u2.xyzw, cb2[52].x, l(112), r18.xyzw
  endif 
  lt r7.w, l(0.000000), cb9[r0.x + 6].y
  mov r18.xy, cb9[r0.x + 5].zwzz
  mov r18.z, cb9[r0.x + 6].x
  mad r19.xyz, -r18.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), cb9[r0.x + 0].xyzx
  add r20.xyz, -r11.xyzx, r19.xyzx
  dp3 r8.w, r18.xyzx, r20.xyzx
  div_sat r9.w, -r8.w, cb9[r0.x + 6].y
  mad r21.xyz, r9.wwww, r18.xyzx, r19.xyzx
  movc r21.xyz, r7.wwww, r21.xyzx, cb9[r0.x + 0].xyzx
  add r21.xyz, -r11.xyzx, r21.xyzx
  dp3 r10.w, r21.xyzx, r21.xyzx
  rsq r12.w, r10.w
  mul r21.xyz, r12.wwww, r21.xyzx
  dp3 r12.w, r12.xyzx, r21.xyzx
  mov_sat r14.w, r12.w
  movc r14.w, r3.z, |r12.w|, r14.w
  lt r15.w, l(0.000000), r14.w
  if_nz r15.w
    sqrt r15.w, r10.w
    mul r16.w, cb9[r0.x + 3].x, cb9[r0.x + 3].x
    div r10.w, r16.w, r10.w
    min r10.w, r10.w, l(1.000000)
    mad_sat r21.xy, r15.wwww, cb9[r0.x + 2].xzxx, cb9[r0.x + 2].ywyy
    mul r21.zw, r21.xxxy, r21.xxxy
    mad r21.xy, r21.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
    mul r21.xy, r21.xyxx, r21.zwzz
    mul r10.w, r10.w, r21.x
    mul r10.w, r21.y, r10.w
    lt r15.w, l(0.000000), r10.w
    if_nz r15.w
      ubfe r15.w, l(3), l(27), cb9[r0.x + 1].w
      if_nz r2.w
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r16.w, cb2[52].x, l(112), u2.xxxx
        or r16.w, r16.w, l(4)
        store_structured u2.x, cb2[52].x, l(112), r16.w
        store_structured u2.x, cb2[52].x, l(128), r10.w
      endif 
      ine r15.w, r15.w, l(1)
      if_nz r15.w
        utof r21.xy, r1.yxyy
        dp2 r15.w, r21.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
        frc r15.w, r15.w
        mul r15.w, r15.w, l(52.982918)
        frc r15.w, r15.w
        mad r15.w, r15.w, l(6.28318548), cb1[70].w
        sincos r21.x, r22.x, r15.w
        mad r15.w, |r12.w|, l(-0.200000), l(0.400000)
        lt r16.w, r12.w, l(0.000000)
        and r16.w, r3.z, r16.w
        movc r15.w, r16.w, -r15.w, r15.w
        mad r21.yzw, r12.xxyz, r15.wwww, r11.xxyz
        add r21.yzw, r21.yyzw, -cb9[r0.x + 4].yyzw
        max r15.w, |r21.w|, |r21.z|
        max r15.w, r15.w, |r21.y|
        div r15.w, cb9[r0.x + 5].x, r15.w
        add r15.w, r15.w, cb9[r0.x + 5].y
        dp3 r16.w, r21.yzwy, r21.yzwy
        rsq r16.w, r16.w
        max r15.w, r15.w, l(0.00006104)
        and r17.y, l(0x0000ffff), cb9[r0.x + 1].w
        mov r23.x, -r4.x
        utof r24.w, r17.y
        mov r23.y, r13.x
        mov r23.z, r4.x
        mov r17.y, l(0)
        mov r18.w, l(0)
        loop 
          ige r19.w, r18.w, l(8)
          breakc_nz r19.w
          dp2 r22.y, icb[r18.w + 0].yxyy, r23.xyxx
          dp2 r22.z, icb[r18.w + 0].yxyy, r23.yzyy
          mul r25.yz, r22.yyzy, cb9[r0.x + 3].yyyy
          mul r25.x, r22.x, r25.y
          mul r25.w, r21.x, r25.y
          mad r24.xyz, r21.yzwy, r16.wwww, r25.xzwx
          sample_c_lz_indexable(texturecubearray)(float,float,float,float) r19.w, r24.xyzw, t10.xxxx, s13, r15.w
          mad r17.y, r19.w, l(0.125000), r17.y
          iadd r18.w, r18.w, l(1)
        endloop 
      else 
        mov r17.y, l(1.000000)
      endif 
      mul r10.w, r10.w, r17.y
      lt r15.w, l(0.000000), r10.w
      if_nz r15.w
        mul r15.w, r0.w, cb9[r0.x + 1].z
        mul r15.w, r15.w, l(0.250000)
        dp3 r16.w, r18.xyzx, r14.xyzx
        dp3 r14.x, r14.xyzx, r20.xyzx
        mad r14.y, -r16.w, r16.w, cb9[r0.x + 6].y
        mad r8.w, r16.w, r14.x, -r8.w
        div_sat r8.w, r8.w, r14.y
        div r14.x, r14.y, cb9[r0.x + 6].y
        mul r14.x, r14.x, l(10.000000)
        min r14.x, r14.x, l(1.000000)
        add r8.w, -r9.w, r8.w
        mad r8.w, r14.x, r8.w, r9.w
        mad r14.xyz, r8.wwww, r18.xyzx, r19.xyzx
        movc r14.xyz, r7.wwww, r14.xyzx, cb9[r0.x + 0].xyzx
        add r14.xyz, -r11.xyzx, r14.xyzx
        dp3 r7.w, r14.xyzx, r14.xyzx
        rsq r7.w, r7.w
        mul r18.xyz, r7.wwww, r14.xyzx
        ubfe r8.w, l(4), l(16), cb9[r0.x + 1].w
        ult r9.w, l(0), r8.w
        and r9.w, r1.z, r9.w
        if_nz r9.w
          iadd r8.w, r8.w, cb2[0].x
          imad r8.w, r8.w, l(15), l(-15)
          mad r9.w, |r12.w|, l(-0.200000), l(0.400000)
          lt r16.w, r12.w, l(0.000000)
          and r16.w, r3.z, r16.w
          movc r9.w, r16.w, -r9.w, r9.w
          mad r19.xyz, r12.xyzx, r9.wwww, r11.xyzx
          mov r20.xyz, cb9[r8.w + 6].yzwy
          mov r20.w, cb9[r8.w + 7].x
          mov r19.w, l(1.000000)
          dp4 r9.w, r20.xyzw, r19.xyzw
          mov r20.xyz, cb9[r8.w + 7].yzwy
          mov r20.w, cb9[r8.w + 8].x
          dp4 r16.w, r20.xyzw, r19.xyzw
          lt r17.y, r16.w, r9.w
          if_z r17.y
            mov r20.xyz, cb9[r8.w + 4].yzwy
            mov r20.w, cb9[r8.w + 5].x
            dp4 r20.x, r20.xyzw, r19.xyzw
            mov r21.xyz, cb9[r8.w + 5].yzwy
            mov r21.w, cb9[r8.w + 6].x
            dp4 r20.y, r21.xyzw, r19.xyzw
            div r19.xy, r20.xyxx, r16.wwww
            mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r20.x, r19.x, cb9[r8.w + 9].w
            add r20.y, r19.y, cb9[r8.w + 10].x
            mul r19.xy, r20.xyxx, cb9[r8.w + 9].yzyy
            div r19.zw, cb9[r8.w + 3].yyyy, cb9[r8.w + 8].yyyw
            add r20.xy, -r19.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r20.xy, r19.xyxx, r20.xyxx
            ge r19.zw, r19.zzzw, r19.xxxy
            or r19.zw, r19.zzzw, r20.xxxy
            or r18.w, r19.w, r19.z
            if_z r18.w
              mov_sat r19.xy, r19.xyxx
              mad r20.x, r19.x, cb9[r8.w + 8].y, cb9[r8.w + 8].z
              mad r20.y, r19.y, cb9[r8.w + 8].w, cb9[r8.w + 9].x
              mul r19.x, r16.w, cb9[r8.w + 10].z
              mad r9.w, cb9[r8.w + 10].y, r16.w, r9.w
              div r9.w, r9.w, r19.x
            endif 
          else 
            mov r18.w, l(-1)
          endif 
          or r16.w, r17.y, r18.w
          if_z r16.w
            max r9.w, r9.w, l(0.00006104)
            and r16.w, l(0x0000ffff), cb9[r8.w + 1].w
            if_nz cb2[58].y
              mov r19.x, -r4.x
              utof r21.z, r16.w
              mov r19.y, r13.x
              mov r19.z, r4.x
              mov r17.y, l(0)
              mov r18.w, l(0)
              loop 
                ige r19.w, r18.w, l(8)
                breakc_nz r19.w
                dp2 r22.x, icb[r18.w + 0].yxyy, r19.xyxx
                dp2 r22.y, icb[r18.w + 0].yxyy, r19.yzyy
                mad r21.xy, r22.xyxx, cb9[r8.w + 3].yyyy, r20.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r19.w, r21.xyzx, t9.xxxx, s13, r9.w
                mad r17.y, r19.w, l(0.125000), r17.y
                iadd r18.w, r18.w, l(1)
              endloop 
            else 
              utof r20.z, r16.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.y, r20.xyzx, t9.xxxx, s13, r9.w
            endif 
            mul r8.w, r17.y, r17.y
            mul r8.w, r17.y, r8.w
          else 
            mov r8.w, l(1.000000)
          endif 
          mul r10.w, r8.w, r10.w
        else 
          ubfe r8.w, l(4), l(20), cb9[r0.x + 1].w
          ult r9.w, l(0), r8.w
          not r16.w, r1.z
          and r9.w, r9.w, r16.w
          if_nz r9.w
            iadd r8.w, r8.w, cb2[0].x
            imad r8.w, r8.w, l(15), l(-15)
            mad r9.w, |r12.w|, l(-0.200000), l(0.400000)
            lt r16.w, r12.w, l(0.000000)
            and r16.w, r3.z, r16.w
            movc r9.w, r16.w, -r9.w, r9.w
            mad r19.xyz, r12.xyzx, r9.wwww, r11.xyzx
            mov r20.xyz, cb9[r8.w + 6].yzwy
            mov r20.w, cb9[r8.w + 7].x
            mov r19.w, l(1.000000)
            dp4 r9.w, r20.xyzw, r19.xyzw
            mov r20.xyz, cb9[r8.w + 7].yzwy
            mov r20.w, cb9[r8.w + 8].x
            dp4 r16.w, r20.xyzw, r19.xyzw
            lt r17.y, r16.w, r9.w
            if_z r17.y
              mov r20.xyz, cb9[r8.w + 4].yzwy
              mov r20.w, cb9[r8.w + 5].x
              dp4 r20.x, r20.xyzw, r19.xyzw
              mov r21.xyz, cb9[r8.w + 5].yzwy
              mov r21.w, cb9[r8.w + 6].x
              dp4 r20.y, r21.xyzw, r19.xyzw
              div r19.xy, r20.xyxx, r16.wwww
              mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r20.x, r19.x, cb9[r8.w + 9].w
              add r20.y, r19.y, cb9[r8.w + 10].x
              mul r19.xy, r20.xyxx, cb9[r8.w + 9].yzyy
              div r19.zw, cb9[r8.w + 3].yyyy, cb9[r8.w + 8].yyyw
              add r20.xy, -r19.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r20.xy, r19.xyxx, r20.xyxx
              ge r19.zw, r19.zzzw, r19.xxxy
              or r19.zw, r19.zzzw, r20.xxxy
              or r18.w, r19.w, r19.z
              if_z r18.w
                mov_sat r19.xy, r19.xyxx
                mad r20.x, r19.x, cb9[r8.w + 8].y, cb9[r8.w + 8].z
                mad r20.y, r19.y, cb9[r8.w + 8].w, cb9[r8.w + 9].x
                mul r19.x, r16.w, cb9[r8.w + 10].z
                mad r9.w, cb9[r8.w + 10].y, r16.w, r9.w
                div r9.w, r9.w, r19.x
              endif 
            else 
              mov r18.w, l(-1)
            endif 
            or r16.w, r17.y, r18.w
            if_z r16.w
              max r9.w, r9.w, l(0.00006104)
              and r16.w, l(0x0000ffff), cb9[r8.w + 1].w
              if_nz cb2[58].y
                mov r19.x, -r4.x
                utof r21.z, r16.w
                mov r19.y, r13.x
                mov r19.z, r4.x
                mov r17.y, l(0)
                mov r18.w, l(0)
                loop 
                  ige r19.w, r18.w, l(8)
                  breakc_nz r19.w
                  dp2 r22.x, icb[r18.w + 0].yxyy, r19.xyxx
                  dp2 r22.y, icb[r18.w + 0].yxyy, r19.yzyy
                  mad r21.xy, r22.xyxx, cb9[r8.w + 3].yyyy, r20.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r19.w, r21.xyzx, t9.xxxx, s13, r9.w
                  mad r17.y, r19.w, l(0.125000), r17.y
                  iadd r18.w, r18.w, l(1)
                endloop 
              else 
                utof r20.z, r16.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.y, r20.xyzx, t9.xxxx, s13, r9.w
              endif 
              mul r8.w, r17.y, r17.y
              mul r8.w, r17.y, r8.w
            else 
              mov r8.w, l(1.000000)
            endif 
            mul r10.w, r8.w, r10.w
          endif 
        endif 
        mad r8.w, -r2.x, l(0.500000), l(1.000000)
        mad r8.w, -r14.w, r8.w, l(1.000000)
        mul r8.w, r8.w, r8.w
        mad r8.w, -r8.w, l(0.620000), l(0.620000)
        add r8.w, -r14.w, r8.w
        mad r8.w, r2.z, r8.w, r14.w
        mul r8.w, r10.w, r8.w
        mov r19.x, cb9[r0.x + 0].w
        mov r19.yz, cb9[r0.x + 1].xxyx
        mul r20.xyz, r8.wwww, r19.xyzx
        lt r9.w, l(0.000000), r12.w
        mad r20.xyz, r15.xyzx, r5.xxxx, r20.xyzx
        dp3_sat r12.w, r12.xyzx, r18.xyzx
        mad r14.xyz, r14.xyzx, r7.wwww, r5.yzwy
        dp3 r7.w, r14.xyzx, r14.xyzx
        rsq r7.w, r7.w
        mul r14.xyz, r7.wwww, r14.xyzx
        dp3 r7.w, r14.xyzx, r5.yzwy
        dp3 r14.x, r12.xyzx, r14.xyzx
        mad r14.y, |r14.x|, r0.w, -|r14.x|
        mad r14.x, |r14.x|, r14.y, l(1.000000)
        mad r14.y, r12.w, r1.w, r2.y
        mul r14.x, r14.x, r14.x
        mul r14.x, r14.y, r14.x
        rcp r14.x, r14.x
        mul r12.w, r15.w, r12.w
        mul r12.w, r12.w, r14.x
        mul r12.w, r10.w, r12.w
        mad r14.xyz, r12.wwww, r19.xyzx, r13.yzwy
        add_sat r7.w, -r7.w, l(1.000000)
        mul r14.w, r7.w, r7.w
        mul r14.w, r14.w, r14.w
        mul r7.w, r7.w, r14.w
        mul r7.w, r7.w, r12.w
        mad r18.xyz, r7.wwww, r19.xyzx, r17.xzwx
        mad r19.xyz, r8.wwww, r19.xyzx, r16.xyzx
        and r19.xyz, r3.zzzz, r19.xyzx
        movc r4.yzw, r9.wwww, r20.xxyz, r4.yyzw
        movc r16.xyz, r9.wwww, r16.xyzx, r19.xyzx
        movc r17.xzw, r9.wwww, r18.xxyz, r17.xxzw
        movc r13.yzw, r9.wwww, r14.xxyz, r13.yyzw
        if_nz r2.w
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r7.w, cb2[52].x, l(112), u2.xxxx
          or r7.w, r7.w, l(8)
          store_structured u2.x, cb2[52].x, l(112), r7.w
          store_structured u2.x, cb2[52].x, l(132), r10.w
        endif 
        mov r6.w, l(0x00010101)
      else 
        mov r6.w, l(257)
      endif 
    else 
      mov r6.w, l(1)
    endif 
  else 
    mov r6.w, l(1)
  endif 
  break 
  case l(2)
  if_nz r2.w
    add r14.yzw, cb1[24].xxyz, cb9[r0.x + 0].xxyz
    mov r14.x, l(2)
    store_structured u2.xyzw, cb2[52].x, l(112), r14.xyzw
  endif 
  add r14.xy, -r11.xyxx, cb9[r0.x + 3].zwzz
  add r14.z, -r11.z, cb9[r0.x + 4].x
  dp3 r7.w, r14.xyzx, r14.xyzx
  rsq r7.w, r7.w
  mul r18.xyz, r7.wwww, r14.xyzx
  dp3 r8.w, r12.xyzx, r18.xyzx
  mov_sat r9.w, r8.w
  movc r10.w, r3.z, |r8.w|, r9.w
  lt r12.w, l(0.000000), r10.w
  if_nz r12.w
    mov r18.xyz, cb9[r0.x + 7].yzwy
    mov r18.w, cb9[r0.x + 8].x
    mov r11.w, l(1.000000)
    dp4 r12.w, r18.xyzw, r11.xyzw
    lt r14.w, r12.w, l(1.000000)
    if_nz r14.w
      mov r19.xyz, l(1.000000,1.000000,1.000000,0)
      mov r14.w, l(0)
    else 
      add r20.xyz, -r11.xyzx, cb9[r0.x + 0].xyzx
      mul r15.w, cb9[r0.x + 3].x, cb9[r0.x + 3].x
      dp3 r16.w, r20.xyzx, r20.xyzx
      div r15.w, r15.w, r16.w
      min r15.w, r15.w, l(1.000000)
      mad_sat r20.xy, r12.wwww, cb9[r0.x + 2].xzxx, cb9[r0.x + 2].ywyy
      mul r20.zw, r20.xxxy, r20.xxxy
      mad r20.xy, r20.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r20.xy, r20.xyxx, r20.zwzz
      mul r15.w, r15.w, r20.x
      mul r15.w, r20.y, r15.w
      mov r20.xyz, cb9[r0.x + 4].yzwy
      mov r20.w, cb9[r0.x + 5].x
      dp4 r20.x, r20.xyzw, r11.xyzw
      mov r21.xyz, cb9[r0.x + 5].yzwy
      mov r21.w, cb9[r0.x + 6].x
      dp4 r20.y, r21.xyzw, r11.xyzw
      div r20.xy, r20.xyxx, r12.wwww
      lt r11.w, cb9[r0.x + 10].w, l(0.00048828)
      if_nz r11.w
        mad_sat r21.xy, |r20.xyxx|, cb9[r0.x + 12].xyxx, cb9[r0.x + 12].zwzz
        mul r21.zw, r21.xxxy, r21.xxxy
        mad r21.xy, r21.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r21.xy, r21.xyxx, r21.zwzz
        mul r11.w, r21.y, r21.x
      else 
        mul_sat r21.xyzw, |r20.yyxx|, cb9[r0.x + 11].xyzw
        log r21.xyzw, r21.xyzw
        mul r21.xyzw, r21.xyzw, cb9[r0.x + 12].zzzz
        exp r21.xyzw, r21.xyzw
        add r21.xy, r21.zwzz, r21.xyxx
        log r21.xy, r21.xyxx
        mul r21.xy, r21.xyxx, cb9[r0.x + 12].wwww
        exp r21.xy, r21.xyxx
        mul r12.w, r21.x, cb9[r0.x + 12].x
        mad r16.w, cb9[r0.x + 12].y, r21.y, l(-1.000000)
        mad r12.w, cb9[r0.x + 12].y, r21.y, -r12.w
        div_sat r12.w, r16.w, r12.w
        mul r16.w, r12.w, r12.w
        mad r12.w, r12.w, l(-2.000000), l(3.000000)
        mul r11.w, r12.w, r16.w
      endif 
      mul r14.w, r11.w, r15.w
      and r11.w, l(255), cb9[r0.x + 14].w
      if_nz r11.w
        mov r20.z, l(1.000000)
        dp3 r12.w, cb9[r0.x + 13].xyzx, r20.xyzx
        mov r21.x, cb9[r0.x + 13].w
        mov r21.yz, cb9[r0.x + 14].xxyx
        dp3 r15.w, r21.xyzx, r20.xyzx
        frc r20.x, r12.w
        frc r20.y, r15.w
        iadd r11.w, r11.w, l(-1)
        utof r20.z, r11.w
        sample_l_indexable(texture2darray)(float,float,float,float) r19.xyz, r20.xyzx, t20.xyzw, s2, l(0.000000)
      else 
        mov r19.xyz, l(1.000000,1.000000,1.000000,0)
      endif 
    endif 
    mov r20.x, cb9[r0.x + 0].w
    mov r20.yz, cb9[r0.x + 1].xxyx
    mul r19.xyz, r19.xyzx, r20.xyzx
    lt r11.w, l(0.000000), r14.w
    if_nz r11.w
      ubfe r11.w, l(3), l(27), cb9[r0.x + 1].w
      if_nz r2.w
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r12.w, cb2[52].x, l(112), u2.xxxx
        or r12.w, r12.w, l(4)
        store_structured u2.x, cb2[52].x, l(112), r12.w
        store_structured u2.x, cb2[52].x, l(128), r14.w
      endif 
      ine r11.w, r11.w, l(1)
      if_nz r11.w
        mad r11.w, |r8.w|, l(-0.200000), l(0.400000)
        lt r12.w, r8.w, l(0.000000)
        and r12.w, r3.z, r12.w
        movc r11.w, r12.w, -r11.w, r11.w
        mad r20.xyz, r12.xyzx, r11.wwww, r11.xyzx
        mov r21.xyz, cb9[r0.x + 6].yzwy
        mov r21.w, cb9[r0.x + 7].x
        mov r20.w, l(1.000000)
        dp4 r11.w, r21.xyzw, r20.xyzw
        dp4 r12.w, r18.xyzw, r20.xyzw
        ge r15.w, r12.w, r11.w
        if_nz r15.w
          mov r18.xyz, cb9[r0.x + 4].yzwy
          mov r18.w, cb9[r0.x + 5].x
          dp4 r18.x, r18.xyzw, r20.xyzw
          mov r21.xyz, cb9[r0.x + 5].yzwy
          mov r21.w, cb9[r0.x + 6].x
          dp4 r18.y, r21.xyzw, r20.xyzw
          div r18.xy, r18.xyxx, r12.wwww
          mad_sat r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
          mad r20.x, r18.x, cb9[r0.x + 8].y, cb9[r0.x + 8].z
          mad r20.y, r18.y, cb9[r0.x + 8].w, cb9[r0.x + 9].x
          div r11.w, r11.w, r12.w
          max r11.w, r11.w, l(0.00006104)
          and r12.w, l(0x0000ffff), cb9[r0.x + 1].w
          if_nz cb2[58].y
            mov r18.x, -r4.x
            utof r21.z, r12.w
            mov r18.y, r13.x
            mov r18.z, r4.x
            mov r15.w, l(0)
            mov r16.w, l(0)
            loop 
              ige r17.y, r16.w, l(8)
              breakc_nz r17.y
              dp2 r22.x, icb[r16.w + 0].yxyy, r18.xyxx
              dp2 r22.y, icb[r16.w + 0].yxyy, r18.yzyy
              mad r21.xy, r22.xyxx, cb9[r0.x + 3].yyyy, r20.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.y, r21.xyzx, t9.xxxx, s13, r11.w
              mad r15.w, r17.y, l(0.125000), r15.w
              iadd r16.w, r16.w, l(1)
            endloop 
          else 
            utof r20.z, r12.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r20.xyzx, t9.xxxx, s13, r11.w
          endif 
          mul r11.w, r15.w, r15.w
          mul r11.w, r15.w, r11.w
        else 
          mov r11.w, l(1.000000)
        endif 
      else 
        mov r11.w, l(1.000000)
      endif 
      mul r11.w, r11.w, r14.w
      lt r12.w, l(0.000000), r11.w
      if_nz r12.w
        mul r12.w, r0.w, cb9[r0.x + 1].z
        mul r12.w, r9.w, r12.w
        ubfe r14.w, l(4), l(16), cb9[r0.x + 1].w
        ult r15.w, l(0), r14.w
        and r15.w, r1.z, r15.w
        if_nz r15.w
          iadd r14.w, r14.w, cb2[0].x
          imad r14.w, r14.w, l(15), l(-15)
          mad r15.w, |r8.w|, l(-0.200000), l(0.400000)
          lt r16.w, r8.w, l(0.000000)
          and r16.w, r3.z, r16.w
          movc r15.w, r16.w, -r15.w, r15.w
          mad r18.xyz, r12.xyzx, r15.wwww, r11.xyzx
          mov r20.xyz, cb9[r14.w + 6].yzwy
          mov r20.w, cb9[r14.w + 7].x
          mov r18.w, l(1.000000)
          dp4 r15.w, r20.xyzw, r18.xyzw
          mov r20.xyz, cb9[r14.w + 7].yzwy
          mov r20.w, cb9[r14.w + 8].x
          dp4 r16.w, r20.xyzw, r18.xyzw
          lt r17.y, r16.w, r15.w
          if_z r17.y
            mov r20.xyz, cb9[r14.w + 4].yzwy
            mov r20.w, cb9[r14.w + 5].x
            dp4 r20.x, r20.xyzw, r18.xyzw
            mov r21.xyz, cb9[r14.w + 5].yzwy
            mov r21.w, cb9[r14.w + 6].x
            dp4 r20.y, r21.xyzw, r18.xyzw
            div r18.xy, r20.xyxx, r16.wwww
            mad r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r20.x, r18.x, cb9[r14.w + 9].w
            add r20.y, r18.y, cb9[r14.w + 10].x
            mul r18.xy, r20.xyxx, cb9[r14.w + 9].yzyy
            div r18.zw, cb9[r14.w + 3].yyyy, cb9[r14.w + 8].yyyw
            add r20.xy, -r18.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r20.xy, r18.xyxx, r20.xyxx
            ge r18.zw, r18.zzzw, r18.xxxy
            or r18.zw, r18.zzzw, r20.xxxy
            or r18.z, r18.w, r18.z
            if_z r18.z
              mov_sat r18.xy, r18.xyxx
              mad r20.x, r18.x, cb9[r14.w + 8].y, cb9[r14.w + 8].z
              mad r20.y, r18.y, cb9[r14.w + 8].w, cb9[r14.w + 9].x
              mul r18.x, r16.w, cb9[r14.w + 10].z
              mad r15.w, cb9[r14.w + 10].y, r16.w, r15.w
              div r15.w, r15.w, r18.x
            endif 
          else 
            mov r18.z, l(-1)
          endif 
          or r16.w, r17.y, r18.z
          if_z r16.w
            max r15.w, r15.w, l(0.00006104)
            and r16.w, l(0x0000ffff), cb9[r14.w + 1].w
            if_nz cb2[58].y
              mov r18.x, -r4.x
              utof r21.z, r16.w
              mov r18.y, r13.x
              mov r18.z, r4.x
              mov r17.y, l(0)
              mov r18.w, l(0)
              loop 
                ige r19.w, r18.w, l(8)
                breakc_nz r19.w
                dp2 r22.x, icb[r18.w + 0].yxyy, r18.xyxx
                dp2 r22.y, icb[r18.w + 0].yxyy, r18.yzyy
                mad r21.xy, r22.xyxx, cb9[r14.w + 3].yyyy, r20.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r19.w, r21.xyzx, t9.xxxx, s13, r15.w
                mad r17.y, r19.w, l(0.125000), r17.y
                iadd r18.w, r18.w, l(1)
              endloop 
            else 
              utof r20.z, r16.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.y, r20.xyzx, t9.xxxx, s13, r15.w
            endif 
            mul r14.w, r17.y, r17.y
            mul r14.w, r17.y, r14.w
          else 
            mov r14.w, l(1.000000)
          endif 
          mul r11.w, r11.w, r14.w
        else 
          ubfe r0.x, l(4), l(20), cb9[r0.x + 1].w
          ult r14.w, l(0), r0.x
          not r1.z, r1.z
          and r1.z, r1.z, r14.w
          if_nz r1.z
            iadd r0.x, r0.x, cb2[0].x
            imad r0.x, r0.x, l(15), l(-15)
            mad r1.z, |r8.w|, l(-0.200000), l(0.400000)
            lt r14.w, r8.w, l(0.000000)
            and r14.w, r3.z, r14.w
            movc r1.z, r14.w, -r1.z, r1.z
            mad r18.xyz, r12.xyzx, r1.zzzz, r11.xyzx
            mov r20.xyz, cb9[r0.x + 6].yzwy
            mov r20.w, cb9[r0.x + 7].x
            mov r18.w, l(1.000000)
            dp4 r1.z, r20.xyzw, r18.xyzw
            mov r20.xyz, cb9[r0.x + 7].yzwy
            mov r20.w, cb9[r0.x + 8].x
            dp4 r14.w, r20.xyzw, r18.xyzw
            lt r15.w, r14.w, r1.z
            if_z r15.w
              mov r20.xyz, cb9[r0.x + 4].yzwy
              mov r20.w, cb9[r0.x + 5].x
              dp4 r20.x, r20.xyzw, r18.xyzw
              mov r21.xyz, cb9[r0.x + 5].yzwy
              mov r21.w, cb9[r0.x + 6].x
              dp4 r20.y, r21.xyzw, r18.xyzw
              div r18.xy, r20.xyxx, r14.wwww
              mad r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r20.x, r18.x, cb9[r0.x + 9].w
              add r20.y, r18.y, cb9[r0.x + 10].x
              mul r18.xy, r20.xyxx, cb9[r0.x + 9].yzyy
              div r18.zw, cb9[r0.x + 3].yyyy, cb9[r0.x + 8].yyyw
              add r20.xy, -r18.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r20.xy, r18.xyxx, r20.xyxx
              ge r18.zw, r18.zzzw, r18.xxxy
              or r18.zw, r18.zzzw, r20.xxxy
              or r16.w, r18.w, r18.z
              if_z r16.w
                mov_sat r18.xy, r18.xyxx
                mad r20.x, r18.x, cb9[r0.x + 8].y, cb9[r0.x + 8].z
                mad r20.y, r18.y, cb9[r0.x + 8].w, cb9[r0.x + 9].x
                mul r17.y, r14.w, cb9[r0.x + 10].z
                mad r1.z, cb9[r0.x + 10].y, r14.w, r1.z
                div r1.z, r1.z, r17.y
              endif 
            else 
              mov r16.w, l(-1)
            endif 
            or r14.w, r15.w, r16.w
            if_z r14.w
              max r1.z, r1.z, l(0.00006104)
              and r14.w, l(0x0000ffff), cb9[r0.x + 1].w
              if_nz cb2[58].y
                mov r18.x, -r4.x
                utof r21.z, r14.w
                mov r18.y, r13.x
                mov r18.z, r4.x
                mov r4.x, l(0)
                mov r13.x, l(0)
                loop 
                  ige r15.w, r13.x, l(8)
                  breakc_nz r15.w
                  dp2 r22.x, icb[r13.x + 0].yxyy, r18.xyxx
                  dp2 r22.y, icb[r13.x + 0].yxyy, r18.yzyy
                  mad r21.xy, r22.xyxx, cb9[r0.x + 3].yyyy, r20.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r21.xyzx, t9.xxxx, s13, r1.z
                  mad r4.x, r15.w, l(0.125000), r4.x
                  iadd r13.x, r13.x, l(1)
                endloop 
              else 
                utof r20.z, r14.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r4.x, r20.xyzx, t9.xxxx, s13, r1.z
              endif 
              mul r0.x, r4.x, r4.x
              mul r0.x, r4.x, r0.x
            else 
              mov r0.x, l(1.000000)
            endif 
            mul r11.w, r0.x, r11.w
          endif 
        endif 
        mad r0.x, -r2.x, l(0.500000), l(1.000000)
        mad r0.x, -r10.w, r0.x, l(1.000000)
        mul r0.x, r0.x, r0.x
        mad r0.x, -r0.x, l(0.620000), l(0.620000)
        add r0.x, -r10.w, r0.x
        mad r0.x, r2.z, r0.x, r10.w
        mul r0.x, r11.w, r0.x
        mul r18.xyz, r19.xyzx, r0.xxxx
        lt r1.z, l(0.000000), r8.w
        mad r15.xyz, r15.xyzx, r5.xxxx, r18.xyzx
        mad r14.xyz, r14.xyzx, r7.wwww, r5.yzwy
        dp3 r2.x, r14.xyzx, r14.xyzx
        rsq r2.x, r2.x
        mul r14.xyz, r2.xxxx, r14.xyzx
        dp3 r2.x, r14.xyzx, r5.yzwy
        dp3 r2.z, r12.xyzx, r14.xyzx
        mad r0.w, |r2.z|, r0.w, -|r2.z|
        mad r0.w, |r2.z|, r0.w, l(1.000000)
        mad r1.w, r9.w, r1.w, r2.y
        mul r0.w, r0.w, r0.w
        mul r0.w, r1.w, r0.w
        rcp r0.w, r0.w
        mul r0.w, r12.w, r0.w
        mul r0.w, r0.w, r11.w
        mul r0.w, r0.w, l(0.250000)
        mad r5.xyz, r0.wwww, r19.xyzx, r13.yzwy
        add_sat r1.w, -r2.x, l(1.000000)
        mul r2.x, r1.w, r1.w
        mul r2.x, r2.x, r2.x
        mul r1.w, r1.w, r2.x
        mul r0.w, r0.w, r1.w
        mad r2.xyz, r0.wwww, r19.xyzx, r17.xzwx
        mad r12.xyz, r0.xxxx, r19.xyzx, r16.xyzx
        and r12.xyz, r3.zzzz, r12.xyzx
        movc r4.yzw, r1.zzzz, r15.xxyz, r4.yyzw
        movc r16.xyz, r1.zzzz, r16.xyzx, r12.xyzx
        movc r17.xzw, r1.zzzz, r2.xxyz, r17.xxzw
        movc r13.yzw, r1.zzzz, r5.xxyz, r13.yyzw
        if_nz r2.w
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r0.x, cb2[52].x, l(112), u2.xxxx
          or r0.x, r0.x, l(8)
          store_structured u2.x, cb2[52].x, l(112), r0.x
          store_structured u2.x, cb2[52].x, l(132), r11.w
        endif 
        mov r6.w, l(0x00010101)
      else 
        mov r6.w, l(257)
      endif 
    else 
      mov r6.w, l(1)
    endif 
  else 
    mov r6.w, l(1)
  endif 
  break 
  default 
  mov r6.w, l(0)
  break 
endswitch 
mad r5.xyz, r3.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.x, r5.y
mad r2.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r2.x
ieq r0.w, r0.x, r0.w
movc r1.zw, r0.wwww, r2.yyyz, l(0,0,-1.000000,0)
mad r2.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r2.x
ieq r0.w, r0.x, r0.w
movc r2.xy, r0.wwww, r2.yzyy, l(-1.000000,0,0,0)
mad r3.xyw, r9.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r0.w, r3.x
ieq r0.w, r0.x, r0.w
movc r3.xy, r0.wwww, r3.ywyy, l(-1.000000,0,0,0)
mad r7.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r7.x
ieq r0.x, r0.x, r0.w
movc r0.xw, r0.xxxx, r7.yyyz, l(-1.000000,0,0,0)
mov r7.x, r1.z
mov r7.y, r2.x
mov r7.z, r3.x
mov r7.w, r0.x
add r7.xyzw, -r5.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.x, r7.y, r7.x
add r0.x, r7.z, r0.x
add r0.x, r7.w, r0.x
mul r1.z, r2.y, r7.y
mad r1.z, r7.x, r1.w, r1.z
mad r1.z, r7.z, r3.y, r1.z
mad r0.w, r7.w, r0.w, r1.z
div r5.w, r0.w, r0.x
ge r0.x, l(0.000000), r0.x
movc r5.yz, r0.xxxx, l(0,0,0,0), r5.zzwz
and r0.xw, r1.xxxy, l(1, 0, 0, 1)
ieq r0.x, r0.w, r0.x
movc r2.xyz, r0.xxxx, r5.xyzx, r5.xzyx
mad r0.x, -r2.z, l(0.500000), r2.x
add r5.y, r0.x, r2.z
mad r5.z, -r2.y, l(0.500000), r0.x
add r5.x, r2.y, r5.z
mul r2.xyz, r6.xyzx, r4.yzwy
mad r2.xyz, r16.xyzx, r5.xyzx, r2.xyzx
mul r3.xyw, r17.xzxw, l(0.960000, 0.960000, 0.000000, 0.960000)
mad r3.xyw, r13.yzyw, l(0.040000, 0.040000, 0.000000, 0.040000), r3.xyxw
add r2.xyz, r2.xyzx, r3.xywx
add r3.xyw, -r5.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
mul r3.xyw, r3.xyxw, r17.xzxw
mad r3.xyw, r13.yzyw, r5.xyxz, r3.xyxw
mad r3.xyw, r4.yzyw, r6.xyxz, r3.xyxw
movc r2.xyz, r3.zzzz, r2.xyzx, r3.xywx
lt r0.x, l(0.000000), cb2[9].z
if_nz r0.x
  dp3 r0.x, r11.xyzx, r11.xyzx
  rsq r0.w, r0.x
  mul r3.xyz, r0.wwww, r11.xyzx
  sqrt r0.x, r0.x
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r1.zw, r0.xxxx, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r0.w, l(0.010000), |r11.z|
    mul r4.xy, r11.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r0.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r5.xyz, r1.wwww, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xyzx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xyzx
  else 
    mad r0.w, r0.x, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r11.z|
    mul r1.w, r11.z, cb2[15].z
    mul r3.w, r1.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r1.w, r3.w, r1.w
    mul r1.w, r0.w, r1.w
    movc r0.w, r1.z, r1.w, r0.w
    mul r5.xyz, r0.wwww, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xyzx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r1.w, cb2[8].w, -r0.w, l(1.000000)
  mul r1.w, r1.w, r1.w
  mul r1.w, r1.w, l(12.566371)
  div r1.z, r1.z, r1.w
  add r0.x, r0.x, -cb2[10].w
  mul_sat r0.x, r0.x, cb2[11].w
  mul r0.x, r0.x, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyz, r0.xxxx, cb2[11].xyzx
  mad r3.xyz, r0.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r5.xyzx
  mad r3.xyz, r2.xyzx, r4.xyzx, r3.xyzx
else 
  mul r0.x, r11.z, cb2[6].x
  mad r0.w, cb2[6].x, r11.z, cb2[5].x
  lt r1.z, |r0.x|, l(0.000100)
  min r1.w, r0.w, l(64.000000)
  mul r1.w, r1.w, l(1.442695)
  exp r1.w, r1.w
  mov_sat r3.w, cb2[6].z
  lt r4.x, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r4.x, r1.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.x, r1.z, l(1.000000), r0.x
  div r0.x, r0.w, r0.x
  movc r0.x, r1.z, r3.w, r0.x
  mul r0.x, r0.x, cb2[5].z
  dp3 r0.w, r11.xyzx, r11.xyzx
  sqrt r1.z, r0.w
  mad r0.x, r0.x, r1.z, cb2[5].w
  exp r0.x, r0.x
  min r0.x, r0.x, l(1.000000)
  add r0.x, -r0.x, l(1.000000)
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r11.xyzx
  dp3 r0.w, cb2[7].yzwy, r4.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r0.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.x, r0.x, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyz, r0.xxxx, r4.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.x, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(2, 4, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(16)
and r0.w, r0.w, r1.z
and r3.z, r0.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.xxxx, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.x, r6.w, l(1)
      break 
      case l(2)
      ubfe r0.x, l(1), l(8), r6.w
      break 
      case l(3)
      ushr r0.x, r6.w, l(16)
      break 
      case l(4)
      mov r0.x, l(0)
      break 
      case l(5)
      mov r0.x, l(1)
      break 
      default 
      mov r0.x, l(0)
      break 
    endswitch 
    utof r0.x, r0.x
    mul r0.x, r0.x, cb2[53].z
    mad r3.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r2.w
  add r1.xyz, r11.xyzx, cb1[24].xyzx
  and r1.w, r6.w, l(1)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  store_structured u2.x, cb2[52].x, l(108), l(0)
endif 
if_nz cb2[52].y
  and r0.x, r6.w, l(1)
  atomic_iadd g1, l(0), r0.x
  ubfe r0.w, l(1), l(8), r6.w
  atomic_iadd g1, l(4), r0.w
  ushr r1.x, r6.w, l(16)
  atomic_iadd g1, l(8), r1.x
  atomic_iadd g1, l(12), l(0)
  atomic_iadd g1, l(16), l(1)
  atomic_umax g2, l(0), r0.x
  atomic_umax g2, l(4), r0.w
  atomic_umax g2, l(8), r1.x
  atomic_umax g2, l(12), l(0)
  atomic_umax g2, l(16), l(1)
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.x, r1.x, l(63)
  if_nz r0.x
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.x, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.x
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.x, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.x
    ieq r0.yz, r0.yyzy, cb2[52].zzwz
    and r0.y, r0.z, r0.y
    if_nz r0.y
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.x
    endif 
  endif 
endif 
ret 
// Approximately 1559 instruction slots used
