//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:26:01 2021
//
//
// Buffer Definitions: 
//
// cbuffer PostFxCBuffer
// {
//
//   float4 postFxControl0;             // Offset:    0 Size:    16
//   float4 postFxControl1;             // Offset:   16 Size:    16
//   float4 postFxControl2;             // Offset:   32 Size:    16 [unused]
//   float4 postFxControl3;             // Offset:   48 Size:    16 [unused]
//   float4 postFxControl4;             // Offset:   64 Size:    16 [unused]
//   float4 postFxControl5;             // Offset:   80 Size:    16 [unused]
//   float4 postFxControl6;             // Offset:   96 Size:    16 [unused]
//   float4 postFxControl7;             // Offset:  112 Size:    16 [unused]
//   float4 postFxControl8;             // Offset:  128 Size:    16 [unused]
//   float4 postFxControl9;             // Offset:  144 Size:    16 [unused]
//   float4 postFxControlA;             // Offset:  160 Size:    16 [unused]
//   float4 postFxControlB;             // Offset:  176 Size:    16 [unused]
//   float4 postFxControlC;             // Offset:  192 Size:    16 [unused]
//   float4 postFxControlD;             // Offset:  208 Size:    16 [unused]
//   float4 postFxControlE;             // Offset:  224 Size:    16 [unused]
//   float4 postFxControlF;             // Offset:  240 Size:    16 [unused]
//   float4 postFxConst00;              // Offset:  256 Size:    16 [unused]
//   float4 postFxConst01;              // Offset:  272 Size:    16 [unused]
//   float4 postFxConst02;              // Offset:  288 Size:    16 [unused]
//   float4 postFxConst03;              // Offset:  304 Size:    16 [unused]
//   float4 postFxConst04;              // Offset:  320 Size:    16 [unused]
//   float4 postFxConst05;              // Offset:  336 Size:    16 [unused]
//   float4 postFxConst06;              // Offset:  352 Size:    16 [unused]
//   float4 postFxConst07;              // Offset:  368 Size:    16 [unused]
//   float4 postFxConst08;              // Offset:  384 Size:    16 [unused]
//   float4 postFxConst09;              // Offset:  400 Size:    16 [unused]
//   float4 postFxConst10;              // Offset:  416 Size:    16 [unused]
//   float4 postFxConst11;              // Offset:  432 Size:    16 [unused]
//   float4 postFxConst12;              // Offset:  448 Size:    16 [unused]
//   float4 postFxConst13;              // Offset:  464 Size:    16 [unused]
//   float4 postFxConst14;              // Offset:  480 Size:    16 [unused]
//   float4 postFxConst15;              // Offset:  496 Size:    16 [unused]
//   float4 postFxConst16;              // Offset:  512 Size:    16 [unused]
//   float4 postFxConst17;              // Offset:  528 Size:    16 [unused]
//   float4 postFxConst18;              // Offset:  544 Size:    16 [unused]
//   float4 postFxConst19;              // Offset:  560 Size:    16 [unused]
//   float4 postFxConst20;              // Offset:  576 Size:    16 [unused]
//   float4 postFxConst21;              // Offset:  592 Size:    16 [unused]
//   float4 postFxConst22;              // Offset:  608 Size:    16 [unused]
//   float4 postFxConst23;              // Offset:  624 Size:    16 [unused]
//   float4 postFxConst24;              // Offset:  640 Size:    16 [unused]
//   float4 postFxConst25;              // Offset:  656 Size:    16 [unused]
//   float4 postFxConst26;              // Offset:  672 Size:    16 [unused]
//   float4 postFxConst27;              // Offset:  688 Size:    16 [unused]
//   float4 postFxConst28;              // Offset:  704 Size:    16 [unused]
//   float4 postFxConst29;              // Offset:  720 Size:    16 [unused]
//   float4 postFxConst30;              // Offset:  736 Size:    16 [unused]
//   float4 postFxConst31;              // Offset:  752 Size:    16 [unused]
//   float4 postFxConst32;              // Offset:  768 Size:    16 [unused]
//   float4 postFxConst33;              // Offset:  784 Size:    16 [unused]
//   float4 postFxConst34;              // Offset:  800 Size:    16 [unused]
//   float4 postFxConst35;              // Offset:  816 Size:    16 [unused]
//   float4 postFxConst36;              // Offset:  832 Size:    16 [unused]
//   float4 postFxConst37;              // Offset:  848 Size:    16 [unused]
//   float4 postFxConst38;              // Offset:  864 Size:    16 [unused]
//   float4 postFxConst39;              // Offset:  880 Size:    16 [unused]
//   float4 postFxConst40;              // Offset:  896 Size:    16 [unused]
//   float4 postFxConst41;              // Offset:  912 Size:    16 [unused]
//   float4 postFxConst42;              // Offset:  928 Size:    16 [unused]
//   float4 postFxConst43;              // Offset:  944 Size:    16 [unused]
//   float4 postFxConst44;              // Offset:  960 Size:    16 [unused]
//   float4 postFxConst45;              // Offset:  976 Size:    16 [unused]
//   float4 postFxConst46;              // Offset:  992 Size:    16 [unused]
//   float4 postFxConst47;              // Offset: 1008 Size:    16 [unused]
//   float4 postFxConst48;              // Offset: 1024 Size:    16 [unused]
//   float4 postFxConst49;              // Offset: 1040 Size:    16 [unused]
//   float4 postFxConst50;              // Offset: 1056 Size:    16 [unused]
//   float4 postFxConst51;              // Offset: 1072 Size:    16 [unused]
//   float4 postFxConst52;              // Offset: 1088 Size:    16 [unused]
//   float4 postFxConst53;              // Offset: 1104 Size:    16 [unused]
//   float4 postFxConst54;              // Offset: 1120 Size:    16 [unused]
//   float4 postFxConst55;              // Offset: 1136 Size:    16 [unused]
//   float4 postFxConst56;              // Offset: 1152 Size:    16 [unused]
//   float4 postFxConst57;              // Offset: 1168 Size:    16 [unused]
//   float4 postFxConst58;              // Offset: 1184 Size:    16 [unused]
//   float4 postFxConst59;              // Offset: 1200 Size:    16 [unused]
//   float4 postFxConst60;              // Offset: 1216 Size:    16 [unused]
//   float4 postFxConst61;              // Offset: 1232 Size:    16 [unused]
//   float4 postFxConst62;              // Offset: 1248 Size:    16 [unused]
//   float4 postFxConst63;              // Offset: 1264 Size:    16 [unused]
//   float4 postFxBloom00;              // Offset: 1280 Size:    16 [unused]
//   float4 postFxBloom01;              // Offset: 1296 Size:    16 [unused]
//   float4 postFxBloom02;              // Offset: 1312 Size:    16 [unused]
//   float4 postFxBloom03;              // Offset: 1328 Size:    16 [unused]
//   float4 postFxBloom04;              // Offset: 1344 Size:    16 [unused]
//   float4 postFxBloom05;              // Offset: 1360 Size:    16 [unused]
//   float4 postFxBloom06;              // Offset: 1376 Size:    16 [unused]
//   float4 postFxBloom07;              // Offset: 1392 Size:    16 [unused]
//   float4 postFxBloom08;              // Offset: 1408 Size:    16 [unused]
//   float4 postFxBloom09;              // Offset: 1424 Size:    16 [unused]
//   float4 postFxBloom10;              // Offset: 1440 Size:    16 [unused]
//   float4 postFxBloom11;              // Offset: 1456 Size:    16 [unused]
//   float4 postFxBloom12;              // Offset: 1472 Size:    16 [unused]
//   float4 postFxBloom13;              // Offset: 1488 Size:    16 [unused]
//   float4 postFxBloom14;              // Offset: 1504 Size:    16 [unused]
//   float4 postFxBloom15;              // Offset: 1520 Size:    16 [unused]
//   float4 postFxBloom16;              // Offset: 1536 Size:    16 [unused]
//   float4 postFxBloom17;              // Offset: 1552 Size:    16 [unused]
//   float4 postFxBloom18;              // Offset: 1568 Size:    16 [unused]
//   float4 postFxBloom19;              // Offset: 1584 Size:    16 [unused]
//   float4 postFxBloom20;              // Offset: 1600 Size:    16 [unused]
//   float4 postFxBloom21;              // Offset: 1616 Size:    16 [unused]
//   float4 postFxBloom22;              // Offset: 1632 Size:    16 [unused]
//   float4 postFxBloom23;              // Offset: 1648 Size:    16 [unused]
//   float4 postFxBloom24;              // Offset: 1664 Size:    16 [unused]
//   float4 postFxBloom25;              // Offset: 1680 Size:    16 [unused]
//   float4 filterTap[8];               // Offset: 1696 Size:   128 [unused]
//   float4 postfxViewMatrix0;          // Offset: 1824 Size:    16 [unused]
//   float4 postfxViewMatrix1;          // Offset: 1840 Size:    16 [unused]
//   float4 postfxViewMatrix2;          // Offset: 1856 Size:    16 [unused]
//   float4 postfxViewMatrix3;          // Offset: 1872 Size:    16 [unused]
//   float4 postfxProjMatrix0;          // Offset: 1888 Size:    16 [unused]
//   float4 postfxProjMatrix1;          // Offset: 1904 Size:    16 [unused]
//   float4 postfxProjMatrix2;          // Offset: 1920 Size:    16 [unused]
//   float4 postfxProjMatrix3;          // Offset: 1936 Size:    16 [unused]
//   float4 postfxViewProjMatrix0;      // Offset: 1952 Size:    16 [unused]
//   float4 postfxViewProjMatrix1;      // Offset: 1968 Size:    16 [unused]
//   float4 postfxViewProjMatrix2;      // Offset: 1984 Size:    16 [unused]
//   float4 postfxViewProjMatrix3;      // Offset: 2000 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gExposureInOut                        UAV   float          2d             u0      1 
// gExposureAdapt                        UAV   float          2d             u1      1 
// PostFxCBuffer                     cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB8[2], immediateIndexed
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_typed_texture2d (float,float,float,float) u1
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadIDInGroup.xy
dcl_temps 3
dcl_tgsm_structured g0, 4, 64
dcl_tgsm_structured g1, 4, 64
dcl_tgsm_structured g2, 4, 8
dcl_thread_group 8, 8, 1
store_structured g1.x, vThreadIDInGroupFlattened.x, l(0), l(0)
store_structured g0.x, vThreadIDInGroupFlattened.x, l(0), l(0)
resinfo_indexable(texture2d)(float,float,float,float)_uint r0.xy, l(0), u0.xyzw
iadd r0.zw, r0.xxxy, l(0, 0, 7, 7)
ushr r0.zw, r0.zzzw, l(0, 0, 3, 3)
imul null, r1.xy, r0.zwzz, vThreadIDInGroup.xyxx
imad r0.zw, vThreadIDInGroup.xxxy, r0.zzzw, r0.zzzw
umin r0.xy, r0.xyxx, r0.zwzz
mov r0.z, r1.y
loop 
  uge r0.w, r0.z, r0.y
  breakc_nz r0.w
  mov r2.yzw, r0.zzzz
  mov r2.x, r1.x
  loop 
    uge r0.w, r2.x, r0.x
    breakc_nz r0.w
    ld_uav_typed_indexable(texture2d)(float,float,float,float) r0.w, r2.xyzw, u0.yzwx
    max r0.w, r0.w, l(0.001000)
    log r0.w, r0.w
    ld_structured r1.z, vThreadIDInGroupFlattened.x, l(0), g0.xxxx
    mad r0.w, r0.w, l(0.69314718), r1.z
    store_structured g0.x, vThreadIDInGroupFlattened.x, l(0), r0.w
    ld_structured r0.w, vThreadIDInGroupFlattened.x, l(0), g1.xxxx
    add r0.w, r0.w, l(1.000000)
    store_structured g1.x, vThreadIDInGroupFlattened.x, l(0), r0.w
    iadd r2.x, r2.x, l(1)
  endloop 
  iadd r0.z, r0.z, l(1)
endloop 
ld_structured r0.x, vThreadIDInGroupFlattened.x, l(0), g1.xxxx
lt r0.y, l(1.000000), r0.x
if_nz r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g0.xxxx
  div r0.x, r0.y, r0.x
  store_structured g0.x, vThreadIDInGroupFlattened.x, l(0), r0.x
  store_structured g1.x, vThreadIDInGroupFlattened.x, l(0), l(1.000000)
endif 
ult r0.xyzw, vThreadIDInGroupFlattened.xxxx, l(8, 32, 16, 4)
if_nz r0.x
  mov r1.x, vThreadIDInGroupFlattened.x
  mov r1.yzw, l(0,0,0,0)
  ld_uav_typed_indexable(texture2d)(float,float,float,float) r1.x, r1.xyzw, u1.xyzw
  store_structured g2.x, vThreadIDInGroupFlattened.x, l(0), r1.x
endif 
sync_g_t
ult r1.x, l(0), vThreadIDInGroupFlattened.x
and r1.x, r0.x, r1.x
if_nz r1.x
  iadd r1.x, vThreadIDInGroupFlattened.x, l(-1)
  ld_structured r1.x, r1.x, l(0), g2.xxxx
  mov r2.x, vThreadIDInGroupFlattened.x
  mov r2.yzw, l(0,0,0,0)
  store_uav_typed u1.xyzw, r2.xyzw, r1.xxxx
endif 
if_nz r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g1.xxxx
  iadd r1.x, vThreadIDInGroupFlattened.x, l(32)
  ld_structured r1.y, r1.x, l(0), g1.xxxx
  add r0.y, r0.y, r1.y
  store_structured g1.x, vThreadIDInGroupFlattened.x, l(0), r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g0.xxxx
  ld_structured r1.x, r1.x, l(0), g0.xxxx
  add r0.y, r0.y, r1.x
  store_structured g0.x, vThreadIDInGroupFlattened.x, l(0), r0.y
endif 
sync_g_t
if_nz r0.z
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g1.xxxx
  iadd r0.z, vThreadIDInGroupFlattened.x, l(16)
  ld_structured r1.x, r0.z, l(0), g1.xxxx
  add r0.y, r0.y, r1.x
  store_structured g1.x, vThreadIDInGroupFlattened.x, l(0), r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g0.xxxx
  ld_structured r0.z, r0.z, l(0), g0.xxxx
  add r0.y, r0.z, r0.y
  store_structured g0.x, vThreadIDInGroupFlattened.x, l(0), r0.y
endif 
sync_g_t
if_nz r0.x
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g1.xxxx
  iadd r0.z, vThreadIDInGroupFlattened.x, l(8)
  ld_structured r1.x, r0.z, l(0), g1.xxxx
  add r0.y, r0.y, r1.x
  store_structured g1.x, vThreadIDInGroupFlattened.x, l(0), r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g0.xxxx
  ld_structured r0.z, r0.z, l(0), g0.xxxx
  add r0.y, r0.z, r0.y
  store_structured g0.x, vThreadIDInGroupFlattened.x, l(0), r0.y
endif 
sync_g_t
if_nz r0.w
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g1.xxxx
  iadd r0.z, vThreadIDInGroupFlattened.x, l(4)
  ld_structured r0.w, r0.z, l(0), g1.xxxx
  add r0.y, r0.w, r0.y
  store_structured g1.x, vThreadIDInGroupFlattened.x, l(0), r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g0.xxxx
  ld_structured r0.w, r0.z, l(0), g0.xxxx
  add r0.y, r0.w, r0.y
  store_structured g0.x, vThreadIDInGroupFlattened.x, l(0), r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g2.xxxx
  ld_structured r0.z, r0.z, l(0), g2.xxxx
  add r0.y, r0.z, r0.y
  store_structured g2.x, vThreadIDInGroupFlattened.x, l(0), r0.y
endif 
sync_g_t
ult r0.yz, vThreadIDInGroupFlattened.xxxx, l(0, 2, 1, 0)
if_nz r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g1.xxxx
  iadd r0.w, vThreadIDInGroupFlattened.x, l(2)
  ld_structured r1.x, r0.w, l(0), g1.xxxx
  add r0.y, r0.y, r1.x
  store_structured g1.x, vThreadIDInGroupFlattened.x, l(0), r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g0.xxxx
  ld_structured r1.x, r0.w, l(0), g0.xxxx
  add r0.y, r0.y, r1.x
  store_structured g0.x, vThreadIDInGroupFlattened.x, l(0), r0.y
  ld_structured r0.y, vThreadIDInGroupFlattened.x, l(0), g2.xxxx
  ld_structured r0.w, r0.w, l(0), g2.xxxx
  add r0.y, r0.w, r0.y
  store_structured g2.x, vThreadIDInGroupFlattened.x, l(0), r0.y
endif 
sync_g_t
if_nz r0.z
  ld_structured r0.y, l(0), l(0), g1.xxxx
  ld_structured r0.z, l(1), l(0), g1.xxxx
  add r0.y, r0.z, r0.y
  store_structured g1.x, l(0), l(0), r0.y
  ld_structured r0.y, l(0), l(0), g0.xxxx
  ld_structured r0.z, l(1), l(0), g0.xxxx
  add r0.y, r0.z, r0.y
  store_structured g0.x, l(0), l(0), r0.y
  ld_structured r0.y, l(0), l(0), g2.xxxx
  ld_structured r0.z, l(1), l(0), g2.xxxx
  add r0.y, r0.z, r0.y
  store_structured g2.x, l(0), l(0), r0.y
endif 
sync_g_t
if_z vThreadIDInGroupFlattened.x
  ld_structured r0.y, l(0), l(0), g0.xxxx
  ld_structured r0.z, l(0), l(0), g1.xxxx
  div r0.y, r0.y, r0.z
  mul r0.y, r0.y, l(1.442695)
  exp r0.y, r0.y
  mul r0.y, r0.y, cb8[1].y
  mul r0.y, r0.y, l(5.55555534)
  log r0.y, r0.y
  add r0.y, r0.y, cb8[0].z
  add r0.y, r0.y, l(3.000000)
  add r0.y, r0.y, -cb8[1].x
  mad r0.y, cb8[0].w, r0.y, cb8[1].x
  max r0.y, r0.y, cb8[0].x
  min r0.y, r0.y, cb8[0].y
  add r0.zw, cb8[1].xxxx, l(0.000000, 0.000000, -1.000000, 1.000000)
  max r0.y, r0.z, r0.y
  min r0.y, r0.w, r0.y
  add r0.y, r0.y, l(-3.000000)
  exp r0.y, r0.y
  lt r0.z, l(0.500000), cb8[1].z
  ld_uav_typed_indexable(texture2d)(float,float,float,float) r0.w, l(8, 0, 0, 0), u1.yzwx
  add r1.x, r0.y, l(0.040000)
  div r1.x, l(0.040000), r1.x
  add r1.y, -r1.x, l(1.000000)
  mul r1.y, r1.y, l(0.100000)
  mad r1.x, r1.x, l(0.400000), r1.y
  add r1.y, -r0.w, r0.y
  mul r1.x, r1.x, l(60.000000)
  rcp r1.x, r1.x
  mul r1.x, r1.x, l(-1.442695)
  exp r1.x, r1.x
  add r1.x, -r1.x, l(1.000000)
  mad r0.w, r1.y, r1.x, r0.w
  movc r0.w, r0.z, r0.w, r0.y
  store_uav_typed u1.xyzw, l(0,0,0,0), r0.wwww
  ld_structured r1.x, l(0), l(0), g2.xxxx
  add r0.w, r0.w, r1.x
  mul r0.w, r0.w, l(0.11111111)
  movc r0.y, r0.z, r0.w, r0.y
  store_uav_typed u1.xyzw, l(8,0,0,0), r0.yyyy
  div r0.y, cb8[1].y, r0.y
  store_uav_typed u0.xyzw, vThreadIDInGroup.xyyy, r0.yyyy
endif 
lt r0.y, cb8[1].z, l(0.500000)
and r0.x, r0.y, r0.x
if_nz r0.x
  ld_uav_typed_indexable(texture2d)(float,float,float,float) r0.x, l(8, 0, 0, 0), u1.xyzw
  mov r1.x, vThreadIDInGroupFlattened.x
  mov r1.yzw, l(0,0,0,0)
  store_uav_typed u1.xyzw, r1.xyzw, r0.xxxx
endif 
ret 
// Approximately 192 instruction slots used
