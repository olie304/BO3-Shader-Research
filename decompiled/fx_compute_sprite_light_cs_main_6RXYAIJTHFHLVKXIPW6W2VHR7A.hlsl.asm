//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:26:03 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224 [unused]
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48 [unused]
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4 [unused]
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for lmapInfo
// {
//
//   struct FxCompute_LMapInfoPack
//   {
//       
//       uint4 data[3];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    48
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// lmapInfo                          texture  struct         r/o             t4      1 
// visibleLights                     texture    uint     2darray             t6      1 
// visibleProbes                     texture    uint     2darray             t7      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// lmapTex                               UAV  float4     2darray             u3      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 4, 4, 0, 0},
                              { 3, 4, 0, 0},
                              { 4, 3, 0, 0},
                              { 4, 5, 0, 0},
                              { 5, 4, 0, 0},
                              { 3, 3, 0, 0},
                              { 3, 5, 0, 0},
                              { 5, 3, 0, 0},
                              { 5, 5, 0, 0},
                              { 2, 4, 0, 0},
                              { 4, 2, 0, 0},
                              { 4, 6, 0, 0},
                              { 6, 4, 0, 0},
                              { 2, 3, 0, 0},
                              { 2, 5, 0, 0},
                              { 3, 2, 0, 0},
                              { 3, 6, 0, 0},
                              { 5, 2, 0, 0},
                              { 5, 6, 0, 0},
                              { 6, 3, 0, 0},
                              { 6, 5, 0, 0},
                              { 2, 2, 0, 0},
                              { 2, 6, 0, 0},
                              { 6, 2, 0, 0},
                              { 6, 6, 0, 0},
                              { 1, 4, 0, 0},
                              { 4, 1, 0, 0},
                              { 4, 7, 0, 0},
                              { 7, 4, 0, 0},
                              { 1, 3, 0, 0},
                              { 1, 5, 0, 0},
                              { 3, 1, 0, 0},
                              { 3, 7, 0, 0},
                              { 5, 1, 0, 0},
                              { 5, 7, 0, 0},
                              { 7, 3, 0, 0},
                              { 7, 5, 0, 0},
                              { 1, 2, 0, 0},
                              { 1, 6, 0, 0},
                              { 2, 1, 0, 0},
                              { 2, 7, 0, 0},
                              { 6, 1, 0, 0},
                              { 6, 7, 0, 0},
                              { 7, 2, 0, 0},
                              { 7, 6, 0, 0},
                              { 0, 4, 0, 0},
                              { 4, 0, 0, 0},
                              { 0, 3, 0, 0},
                              { 0, 5, 0, 0},
                              { 3, 0, 0, 0},
                              { 5, 0, 0, 0},
                              { 1, 1, 0, 0},
                              { 1, 7, 0, 0},
                              { 7, 1, 0, 0},
                              { 7, 7, 0, 0},
                              { 0, 2, 0, 0},
                              { 0, 6, 0, 0},
                              { 2, 0, 0, 0},
                              { 6, 0, 0, 0},
                              { 0, 1, 0, 0},
                              { 0, 7, 0, 0},
                              { 1, 0, 0, 0},
                              { 7, 0, 0, 0},
                              { 0, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_structured t4, 48
dcl_resource_texture2darray (uint,uint,uint,uint) t6
dcl_resource_texture2darray (uint,uint,uint,uint) t7
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2darray (float,float,float,float) u3
dcl_input vThreadGroupID.z
dcl_input vThreadIDInGroup.xy
dcl_temps 14
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 4
dcl_tgsm_raw g2, 4
dcl_tgsm_raw g3, 12
dcl_thread_group 8, 8, 1
uge r0.x, vThreadGroupID.z, cb1[82].z
if_nz r0.x
  ret 
endif 
imad r0.x, vThreadIDInGroup.y, l(8), vThreadIDInGroup.x
ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r1.xyzw, vThreadGroupID.z, l(0), t4.xyzw
ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r2.xyzw, vThreadGroupID.z, l(16), t4.xyzw
ld_structured_indexable(structured_buffer, stride=48)(mixed,mixed,mixed,mixed) r0.y, vThreadGroupID.z, l(32), t4.xxxx
f16tof32 r0.z, r1.w
ushr r0.w, r1.w, l(16)
f16tof32 r0.w, r0.w
f16tof32 r1.w, r2.x
ushr r3.xy, r2.xyxx, l(16, 16, 0, 0)
f16tof32 r2.x, r3.x
ishr r3.xz, r2.zzwz, l(24, 0, 24, 0)
itof r3.xz, r3.xxzx
ibfe r4.xyz, l(8, 8, 8, 0), l(0, 8, 16, 0), r2.wwww
itof r4.xyz, r4.xyzx
mul r4.xyz, r4.xyzx, l(0.00787402, 0.00787402, 0.00787402, 0.000000)
mul r5.xy, r3.xzxx, l(0.00787402, 0.00787402, 0.000000, 0.000000)
ibfe r2.z, l(8), l(0), r0.y
itof r2.z, r2.z
mul r6.z, r2.z, l(0.00787402)
utof r2.zw, icb[r0.x + 0].yyyx
mad r2.z, -r2.z, l(0.14285715), l(1.000000)
mad r2.w, r2.w, l(0.28571430), l(-1.000000)
mad r2.z, r2.z, l(2.000000), l(-1.000000)
and r3.xzw, r2.yyyy, l(4, 0, 1, 2)
add r7.xyz, -r1.yzxy, cb1[24].yzxy
dp3 r2.y, r7.xyzx, r7.xyzx
rsq r2.y, r2.y
mul r7.xyz, r2.yyyy, r7.xyzx
mul r8.xyz, r7.xyzx, cb1[17].zxyz
mad r8.xyz, cb1[17].yzxy, r7.yzxy, -r8.xyzx
dp3 r2.y, r8.xyzx, r8.xyzx
rsq r2.y, r2.y
mul r8.xyz, r2.yyyy, r8.xyzx
movc r8.xyz, r3.zzzz, r8.xyzx, cb1[16].xyzx
movc r7.xy, r3.zzzz, r7.zxzz, -cb1[18].xyxx
mov r7.zw, -r7.yyyy
dp2 r2.y, r7.xzxx, r7.xwxx
rsq r2.y, r2.y
mul r9.x, r2.y, -r7.y
mul r9.y, r2.y, r7.x
mov r9.z, l(0)
movc r7.xyz, r3.wwww, l(0,0,1.000000,0), cb1[17].xyzx
movc r8.xyz, r3.wwww, r9.xyzx, r8.xyzx
mov r5.zw, r4.xxxy
movc r4.xyw, r3.xxxx, r5.xzxw, r7.xyxz
mov r6.x, r4.z
mov r6.y, r5.y
movc r3.xzw, r3.xxxx, r6.xxyz, r8.xxyz
utof r2.y, r3.y
mul r2.y, r2.y, l(0.00009587)
sincos r5.x, r6.x, r2.y
mul r5.yzw, r4.xxyw, r5.xxxx
mad r5.yzw, r3.xxzw, r6.xxxx, r5.yyzw
mul r4.xyz, r4.xywx, r6.xxxx
mad r3.xyz, r3.xzwx, r5.xxxx, -r4.xyzx
mul r4.xyz, r1.wwww, r5.yzwy
mul r3.xyz, r2.xxxx, r3.xyzx
mad r1.xyz, r4.xyzx, r0.zzzz, r1.xyzx
mad r1.xyz, r3.xyzx, r0.wwww, r1.xyzx
mul r2.xyz, r2.zzzz, r3.xyzx
mad r2.xyz, r4.xyzx, r2.wwww, -r2.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mul r2.xyz, cb1[5].xyzx, -cb1[24].yyyy
mad r2.xyz, -cb1[24].xxxx, cb1[4].xyzx, r2.xyzx
mad r2.xyz, -cb1[24].zzzz, cb1[6].xyzx, r2.xyzx
add r2.xyz, r2.xyzx, cb1[7].xyzx
mul r3.xyz, r1.yyyy, cb1[5].xyzx
mad r1.xyw, r1.xxxx, cb1[4].xyxz, r3.xyxz
mad r1.xyz, r1.zzzz, cb1[6].xyzx, r1.xywx
add r1.xyz, r2.xyzx, r1.xyzx
mul r2.xyz, r1.yyyy, cb1[17].xyzx
mad r1.xyw, r1.xxxx, cb1[16].xyxz, r2.xyxz
mad r2.xyz, r1.zzzz, cb1[18].xyzx, r1.xywx
ubfe r0.y, l(1), l(8), r0.y
ieq r0.y, r0.y, l(1)
mul r1.xyw, r2.yyyy, cb1[9].xyxw
mad r1.xyw, r2.xxxx, cb1[8].xyxw, r1.xyxw
mad r1.xyw, r2.zzzz, cb1[10].xyxw, r1.xyxw
add r1.xyw, r1.xyxw, cb1[11].xyxw
rcp r0.z, r1.w
mul r0.zw, r0.zzzz, r1.xxxy
mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
mul r0.zw, r0.zzzw, cb1[44].xxxy
add r1.xy, cb1[44].xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
max r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.zw, r1.xxxy, r0.zzzw
if_nz r0.y
  mul r1.xyw, r2.yyyy, cb2[29].xyxz
  mad r1.xyw, r2.xxxx, cb2[28].xyxz, r1.xyxw
  mad r1.xyw, r2.zzzz, cb2[30].xyxz, r1.xyxw
  add r1.xyw, r1.xyxw, cb2[31].xyxz
  add r3.xy, r1.xyxx, -cb2[22].xyxx
  mul r3.xy, r3.xyxx, cb2[22].zzzz
  max r0.y, |r3.y|, |r3.x|
  lt r0.y, l(1.000000), r0.y
  if_nz r0.y
    mul r4.xyz, cb2[27].zxyz, l(128.000000, 0.500000, 0.500000, 0.000000)
    rcp r5.xz, r4.xxxx
    mov r5.y, -r5.z
    mad r4.xyz, r1.xyxx, r5.xyzx, r4.yzyy
    add r5.xyz, cb2[27].xyxx, l(-0.00781250, -0.00781250, -0.00781250, 0.000000)
    max r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r4.xyz, r5.xyzx, r4.xyzx
    mul r3.zw, r4.zzzy, cb2[32].xxxx
    round_ni r3.zw, r3.zzzw
    mul r0.y, r3.w, cb2[27].x
    mad r0.y, r0.y, cb2[32].x, r3.z
    ftou r0.y, r0.y
    iadd r0.y, r0.y, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.z, r0.y, l(0), t23.xxxx
    and r3.w, r3.z, l(0x40000000)
    ishl r4.w, r3.z, l(2)
    if_z r3.w
      and r3.w, r3.z, l(0x01ffffff)
      iadd r5.x, r0.y, r3.w
      ushr r0.y, r3.z, l(25)
      utof r0.y, r0.y
      mul r4.xyz, r0.yyyy, r4.xyzx
      frc r4.xyz, r4.xyzx
      mul r4.xyz, r4.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
      ftou r4.xyz, r4.xyzx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.z, r5.x, l(0), t23.xxxx
      ushr r3.zw, r4.zzzy, l(0, 0, 6, 6)
      and r0.y, r5.z, l(0xc0000000)
      iadd r5.w, r5.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.w, r5.w, l(0), t23.xxxx
      movc r3.w, r3.w, r5.z, r5.w
      ushr r5.w, r3.w, l(13)
      movc r3.z, r3.z, r5.w, r3.w
      and r3.z, r3.z, l(8191)
      iadd r6.x, r3.z, r5.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.z, r6.x, l(0), t23.xxxx
      mov r5.y, l(0)
      mov r6.y, l(1)
      movc r6.xyz, r0.yyyy, r5.xyzx, r6.xyzx
      movc r7.yz, r0.yyyy, l(0,6,1,0), l(0,5,2,0)
      ushr r3.zw, r4.zzzy, r7.yyyy
      and r3.zw, r3.zzzw, l(0, 0, 1, 1)
      and r5.w, r6.z, l(0xc0000000)
      iadd r6.w, r6.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.w, r6.w, l(0), t23.xxxx
      movc r3.w, r3.w, r6.z, r6.w
      ushr r6.w, r3.w, l(13)
      movc r3.z, r3.z, r6.w, r3.w
      and r3.z, r3.z, l(8191)
      iadd r7.x, r3.z, r6.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r7.w, r7.x, l(0), t23.xxxx
      movc r6.xyz, r5.wwww, r6.xyzx, r7.xzwx
      movc r5.xyz, r0.yyyy, r5.xyzx, r6.xyzx
      and r0.y, r5.z, l(0xc0000000)
      if_z r0.y
        iadd r0.y, -r5.y, l(6)
        ushr r3.zw, r4.zzzy, r0.yyyy
        or r0.y, r5.z, l(0x40000000)
        bfi r3.w, l(1), l(1), r3.w, l(0)
        bfi r3.z, l(1), l(0), r3.z, r3.w
        imul null, r3.z, r3.z, l(10)
        ushr r0.y, r0.y, r3.z
        and r0.y, r0.y, l(1023)
        iadd r6.x, r0.y, r5.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.w, r6.x, l(0), t23.xxxx
        iadd r6.yz, r5.yyyy, l(0, 1, 2, 0)
        iadd r0.y, -r6.y, l(6)
        ushr r3.zw, r4.zzzy, r0.yyyy
        and r0.y, r6.w, l(0xc0000000)
        or r5.y, r6.w, l(0x40000000)
        bfi r3.w, l(1), l(1), r3.w, l(0)
        bfi r3.z, l(1), l(0), r3.z, r3.w
        imul null, r3.z, r3.z, l(10)
        ushr r3.z, r5.y, r3.z
        and r3.z, r3.z, l(1023)
        iadd r7.x, r3.z, r6.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r7.z, r7.x, l(0), t23.xxxx
        mov r7.y, r6.z
        movc r7.xyz, r0.yyyy, r6.xywx, r7.xyzx
        iadd r3.z, -r7.y, l(6)
        ushr r3.zw, r4.zzzy, r3.zzzz
        and r5.y, r7.z, l(0xc0000000)
        or r5.w, r7.z, l(0x40000000)
        bfi r3.w, l(1), l(1), r3.w, l(0)
        bfi r3.z, l(1), l(0), r3.z, r3.w
        imul null, r3.z, r3.z, l(10)
        ushr r3.z, r5.w, r3.z
        and r3.z, r3.z, l(1023)
        iadd r8.x, r3.z, r7.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.y, r8.x, l(0), t23.xxxx
        movc r3.zw, r5.yyyy, r7.xxxz, r8.xxxy
        movc r5.xz, r0.yyyy, r6.xxwx, r3.zzwz
      endif 
      and r0.y, r5.z, l(0xc0000000)
      if_z r0.y
        ubfe r3.z, l(14), l(15), r5.z
        utof r3.z, r3.z
        mul r3.z, r3.z, cb2[27].w
        and r5.yw, r5.zzzz, l(0, 0x00007fff, 0, 0x20000000)
        utof r3.w, r5.y
        mul r3.w, r3.w, cb2[27].w
        mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.00006104, 0.00003052)
        and r5.y, r4.y, l(3)
        iadd r5.y, r5.y, r5.x
        iadd r5.y, r5.y, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.y, r5.y, l(0), t23.xxxx
        bfi r6.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r4.xyzx, l(0, 0, 0, 0)
        ushr r4.x, r5.y, r6.x
        and r4.x, r4.x, l(255)
        utof r4.x, r4.x
        mul r4.x, r3.w, r4.x
        mad r4.x, r4.x, l(0.00392157), r3.z
        iadd r4.y, r6.y, l(1)
        ubfe r4.z, l(1), l(1), r4.z
        iadd r4.y, r4.z, r4.y
        iadd r4.y, r4.y, r5.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.y, r4.y, l(0), t23.xxxx
        ushr r4.y, r4.y, r6.z
        and r4.y, r4.y, l(0x0000ffff)
        utof r4.y, r4.y
        mul r3.w, r3.w, r4.y
        mad r3.z, r3.w, l(0.00001526), r3.z
        movc r4.w, r5.w, r4.x, r3.z
      else 
        and r3.z, r5.z, l(0x80000000)
        iadd r3.w, r5.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r3.w, r3.w, l(0), t23.xxxx
        movc r3.z, r3.z, r3.w, l(0)
        ishl r3.w, r5.z, l(2)
        ushr r4.x, r3.z, l(16)
        f16tof32 r4.x, r4.x
        and r3.z, r3.z, l(0x0000ffff)
        f16tof32 r3.z, r3.z
        mad r1.x, r1.x, r4.x, r3.w
        mad r1.x, r1.y, r3.z, r1.x
        movc r4.w, r0.y, r1.x, r4.w
      endif 
    endif 
    mad r0.y, -cb2[27].z, l(2.000000), r1.w
    lt r0.y, r4.w, r0.y
    movc r0.y, r0.y, l(0), l(1.000000)
  else 
    mad r3.xy, r3.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r1.x, r1.w, -cb2[17].w
    mad r1.x, -r1.x, l(0.00006104), l(1.000000)
    iadd r1.y, cb2[26].y, l(2)
    utof r3.z, r1.y
    sample_c_lz_aoffimmi_indexable(1,1,0)(texture2darray)(float,float,float,float) r1.y, r3.xyzx, t13.xxxx, s13, r1.x
    sample_c_lz_aoffimmi_indexable(1,-1,0)(texture2darray)(float,float,float,float) r1.w, r3.xyzx, t13.xxxx, s13, r1.x
    add r1.y, r1.w, r1.y
    sample_c_lz_aoffimmi_indexable(-1,1,0)(texture2darray)(float,float,float,float) r1.w, r3.xyzx, t13.xxxx, s13, r1.x
    add r1.y, r1.w, r1.y
    sample_c_lz_aoffimmi_indexable(-1,-1,0)(texture2darray)(float,float,float,float) r1.x, r3.xyzx, t13.xxxx, s13, r1.x
    add r1.x, r1.x, r1.y
    sample_l_indexable(texture2darray)(float,float,float,float) r1.y, r3.xyzx, t31.yxzw, s0, l(0.000000)
    mad r1.x, r1.x, l(0.250000), r1.y
    add_sat r0.y, r1.x, l(-1.000000)
  endif 
  if_z r0.x
    store_raw g0.x, l(0), l(0)
  endif 
  sync_g_t
  mul r0.y, r0.y, l(65535.000000)
  round_ne r0.y, r0.y
  ftou r0.y, r0.y
  atomic_iadd g0, l(0), r0.y
  sync_g_t
  ld_raw r0.y, l(0), g0.xxxx
  utof r0.y, r0.y
  mul r0.y, r0.y, l(0.00000024)
  mul r1.xyw, r0.yyyy, cb2[18].xyxz
  mul r1.xyw, r1.xyxw, l(0.250000, 0.250000, 0.000000, 0.250000)
else 
  mov r1.xyw, l(0,0,0,0)
endif 
mul r0.y, r1.z, l(0.00781250)
max r0.y, r0.y, l(0.000000)
min r0.y, r0.y, l(15.000000)
ftou r0.yzw, r0.yyzw
ushr r3.xy, r0.zwzz, l(6, 6, 0, 0)
ishl r3.z, r0.y, l(4)
mov r4.xy, l(0,0,0,0)
mov r5.w, l(0)
mov r2.w, l(1.000000)
mov r6.z, l(1.000000)
mov r0.yzw, r1.xxyw
mov r1.z, l(0)
loop 
  uge r3.w, r1.z, cb2[0].x
  breakc_nz r3.w
  ushr r4.z, r1.z, l(5)
  iadd r5.xyz, r3.xyzx, r4.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r3.w, r5.xyzw, t6.yzwx
  mov r7.xyz, r0.yzwy
  mov r7.w, r3.w
  loop 
    breakc_z r7.w
    firstbit_lo r4.z, r7.w
    ishl r4.w, l(1), r4.z
    and r5.x, r4.w, r7.w
    if_nz r5.x
      xor r7.w, r4.w, r7.w
      iadd r4.z, r1.z, r4.z
      imul null, r4.z, r4.z, l(15)
      ubfe r4.w, l(3), l(24), cb9[r4.z + 1].w
      switch r4.w
        case l(2)
        mov r8.xyz, cb9[r4.z + 7].yzwy
        mov r8.w, cb9[r4.z + 8].x
        dp4 r4.w, r8.xyzw, r2.xyzw
        lt r6.w, r4.w, l(1.000000)
        if_nz r6.w
          mov r5.xyz, r7.xyzx
          break 
        endif 
        add r8.xyz, -r2.xyzx, cb9[r4.z + 0].xyzx
        mul r6.w, cb9[r4.z + 3].x, cb9[r4.z + 3].x
        dp3 r8.x, r8.xyzx, r8.xyzx
        div r6.w, r6.w, r8.x
        min r6.w, r6.w, l(1.000000)
        mad_sat r8.xy, r4.wwww, cb9[r4.z + 2].xzxx, cb9[r4.z + 2].ywyy
        mul r8.zw, r8.xxxy, r8.xxxy
        mad r8.xy, r8.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r8.xy, r8.xyxx, r8.zwzz
        mul r6.w, r6.w, r8.x
        mul r6.w, r8.y, r6.w
        mov r8.xyz, cb9[r4.z + 4].yzwy
        mov r8.w, cb9[r4.z + 5].x
        dp4 r8.x, r8.xyzw, r2.xyzw
        mov r9.xyz, cb9[r4.z + 5].yzwy
        mov r9.w, cb9[r4.z + 6].x
        dp4 r8.y, r9.xyzw, r2.xyzw
        div r6.xy, r8.xyxx, r4.wwww
        lt r4.w, cb9[r4.z + 10].w, l(0.00048828)
        if_nz r4.w
          mad_sat r8.xy, |r6.xyxx|, cb9[r4.z + 12].xyxx, cb9[r4.z + 12].zwzz
          mul r8.zw, r8.xxxy, r8.xxxy
          mad r8.xy, r8.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r8.xy, r8.xyxx, r8.zwzz
          mul r4.w, r8.y, r8.x
          mul r4.w, r4.w, r6.w
        else 
          mul_sat r8.xyzw, |r6.yyxx|, cb9[r4.z + 11].xyzw
          log r8.xyzw, r8.xyzw
          mul r8.xyzw, r8.xyzw, cb9[r4.z + 12].zzzz
          exp r8.xyzw, r8.xyzw
          add r8.xy, r8.zwzz, r8.xyxx
          log r8.xy, r8.xyxx
          mul r8.xy, r8.xyxx, cb9[r4.z + 12].wwww
          exp r8.xy, r8.xyxx
          mul r8.x, r8.x, cb9[r4.z + 12].x
          mad r8.z, cb9[r4.z + 12].y, r8.y, l(-1.000000)
          mad r8.x, cb9[r4.z + 12].y, r8.y, -r8.x
          div_sat r8.x, r8.z, r8.x
          mul r8.y, r8.x, r8.x
          mad r8.x, r8.x, l(-2.000000), l(3.000000)
          mul r8.x, r8.x, r8.y
          mul r4.w, r6.w, r8.x
        endif 
        ge r6.w, l(0.000000), r4.w
        if_nz r6.w
          mov r5.xyz, r7.xyzx
          break 
        endif 
        and r6.w, l(255), cb9[r4.z + 14].w
        if_nz r6.w
          dp3 r8.x, cb9[r4.z + 13].xyzx, r6.xyzx
          mov r9.x, cb9[r4.z + 13].w
          mov r9.yz, cb9[r4.z + 14].xxyx
          dp3 r6.x, r9.xyzx, r6.xyzx
          frc r8.x, r8.x
          frc r8.y, r6.x
          iadd r6.x, r6.w, l(-1)
          utof r8.z, r6.x
          sample_l_indexable(texture2darray)(float,float,float,float) r6.xyw, r8.xyzx, t20.xywz, s2, l(0.000000)
          mov r8.x, cb9[r4.z + 0].w
          mov r8.yz, cb9[r4.z + 1].xxyx
          mul r6.xyw, r6.xyxw, r8.xyxz
        else 
          mov r6.yw, cb9[r4.z + 1].xxxy
          mov r6.x, cb9[r4.z + 0].w
        endif 
        mul r4.w, r4.w, l(0.250000)
        mul r6.xyw, r6.xyxw, r4.wwww
        dp3 r4.w, r6.xywx, l(0.299000, 0.587000, 0.114000, 0.000000)
        max r4.w, r4.w, l(0.000001)
        min r8.x, r4.w, cb1[85].x
        div r4.w, r8.x, r4.w
        mad r5.xyz, r6.xywx, r4.wwww, r7.xyzx
        break 
        case l(4)
        add r6.xyw, -r2.xyxz, cb9[r4.z + 0].xyxz
        dp3 r4.w, r6.xywx, r6.xywx
        sqrt r6.x, r4.w
        mul r6.y, cb9[r4.z + 3].x, cb9[r4.z + 3].x
        div r4.w, r6.y, r4.w
        min r4.w, r4.w, l(1.000000)
        mad_sat r6.xy, r6.xxxx, cb9[r4.z + 2].xzxx, cb9[r4.z + 2].ywyy
        mul r8.xy, r6.xyxx, r6.xyxx
        mad r6.xy, r6.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r6.xy, r6.xyxx, r8.xyxx
        mul r4.w, r4.w, r6.x
        mul r4.w, r6.y, r4.w
        ge r6.x, l(0.000000), r4.w
        if_nz r6.x
          mov r5.xyz, r7.xyzx
          break 
        endif 
        mul r4.w, r4.w, l(0.250000)
        mov r8.x, cb9[r4.z + 0].w
        mov r8.yz, cb9[r4.z + 1].xxyx
        mul r6.xyw, r4.wwww, r8.xyxz
        dp3 r4.z, r6.xywx, l(0.299000, 0.587000, 0.114000, 0.000000)
        max r4.z, r4.z, l(0.000001)
        min r4.w, r4.z, cb1[85].x
        div r4.z, r4.w, r4.z
        mad r5.xyz, r6.xywx, r4.zzzz, r7.xyzx
        break 
        default 
        mov r5.xyz, r7.xyzx
        break 
      endswitch 
      mov r7.xyz, r5.xyzx
    endif 
  endloop 
  mov r0.yzw, r7.xxyz
  iadd r1.z, r1.z, l(32)
endloop 
iadd r1.x, cb2[0].y, -cb2[58].x
and r1.y, r1.x, l(-32)
mov r4.xy, l(0,0,0,0)
mov r5.w, l(0)
mov r6.yz, l(0,0,1.000000,0)
mov r7.x, l(1.000000)
mov r8.xyz, l(0,0,0,0)
mov r9.x, l(0)
mov r1.z, r1.y
loop 
  uge r1.w, r1.z, cb2[0].y
  breakc_nz r1.w
  ushr r4.z, r1.z, l(5)
  iadd r5.xyz, r3.xyzx, r4.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r1.w, r5.xyzw, t7.yzwx
  mov r5.xyz, r8.xyzx
  mov r2.w, r9.x
  mov r3.w, r1.w
  loop 
    breakc_z r3.w
    firstbit_lo r4.z, r3.w
    ishl r4.w, l(1), r4.z
    and r6.w, r3.w, r4.w
    if_nz r6.w
      xor r4.w, r3.w, r4.w
      iadd r4.z, r1.z, r4.z
      uge r6.w, r4.z, cb2[0].y
      if_nz r6.w
        break 
      endif 
      ult r6.w, r4.z, r1.x
      if_nz r6.w
        mov r3.w, r4.w
        continue 
      endif 
      imul null, r4.z, r4.z, l(14)
      add r10.xyz, r2.xyzx, -cb10[r4.z + 0].xyzx
      and r6.w, l(0x0000ffff), cb10[r4.z + 7].z
      ubfe r7.z, l(6), l(25), cb10[r4.z + 7].z
      imul null, r7.w, r6.w, l(6)
      dp3 r8.w, cb11[r7.w + 0].xyzx, r10.xyzx
      add_sat r8.w, r8.w, cb11[r7.w + 0].w
      dp3 r10.w, cb11[r7.w + 1].xyzx, r10.xyzx
      add_sat r10.w, r10.w, cb11[r7.w + 1].w
      mul r8.w, r8.w, r10.w
      dp3 r10.w, cb11[r7.w + 2].xyzx, r10.xyzx
      add_sat r10.w, r10.w, cb11[r7.w + 2].w
      mul r8.w, r8.w, r10.w
      dp3 r10.w, cb11[r7.w + 3].xyzx, r10.xyzx
      add_sat r10.w, r10.w, cb11[r7.w + 3].w
      mul r8.w, r8.w, r10.w
      dp3 r10.w, cb11[r7.w + 4].xyzx, r10.xyzx
      add_sat r10.w, r10.w, cb11[r7.w + 4].w
      mul r8.w, r8.w, r10.w
      dp3 r10.w, cb11[r7.w + 5].xyzx, r10.xyzx
      add_sat r7.w, r10.w, cb11[r7.w + 5].w
      mul r6.x, r7.w, r8.w
      and r7.w, l(1), cb10[r4.z + 6].x
      movc r11.xy, r7.wwww, r6.xyxx, r6.zxzz
      mov r6.x, cb10[r4.z + 6].x
      mov r12.xy, r11.xyxx
      mov r7.w, l(1)
      loop 
        ige r8.w, r7.w, r7.z
        breakc_nz r8.w
        iadd r8.w, r6.w, r7.w
        imul null, r8.w, r8.w, l(6)
        dp3 r10.w, cb11[r8.w + 0].xyzx, r10.xyzx
        add_sat r10.w, r10.w, cb11[r8.w + 0].w
        mul r10.w, r10.w, r12.x
        dp3 r11.z, cb11[r8.w + 1].xyzx, r10.xyzx
        add_sat r11.z, r11.z, cb11[r8.w + 1].w
        mul r10.w, r10.w, r11.z
        dp3 r11.z, cb11[r8.w + 2].xyzx, r10.xyzx
        add_sat r11.z, r11.z, cb11[r8.w + 2].w
        mul r10.w, r10.w, r11.z
        dp3 r11.z, cb11[r8.w + 3].xyzx, r10.xyzx
        add_sat r11.z, r11.z, cb11[r8.w + 3].w
        mul r10.w, r10.w, r11.z
        dp3 r11.z, cb11[r8.w + 4].xyzx, r10.xyzx
        add_sat r11.z, r11.z, cb11[r8.w + 4].w
        mul r10.w, r10.w, r11.z
        dp3 r11.z, cb11[r8.w + 5].xyzx, r10.xyzx
        add_sat r8.w, r11.z, cb11[r8.w + 5].w
        mul r12.x, r8.w, r10.w
        ushr r11.z, r6.x, l(2)
        ubfe r11.w, l(1), l(2), r6.x
        and r12.z, r11.z, l(2)
        max r12.w, r12.x, r12.y
        mad r8.w, -r10.w, r8.w, l(1.000000)
        mul r8.w, r8.w, r12.y
        movc r7.y, r12.z, r8.w, r12.w
        movc r12.xy, r11.wwww, r12.xyxx, r7.xyxx
        iadd r7.w, r7.w, l(1)
        mov r6.x, r11.z
      endloop 
      mov_sat r12.y, r12.y
      mul r6.x, r12.y, cb10[r4.z + 6].y
      lt r6.w, l(0.000000), r6.x
      if_nz r6.w
        mov r11.x, cb10[r4.z + 0].w
        mov r11.y, cb10[r4.z + 1].z
        mov r11.z, cb10[r4.z + 2].y
        dp3 r11.x, r10.xyzx, r11.xyzx
        mov r13.xy, cb10[r4.z + 1].xwxx
        mov r13.z, cb10[r4.z + 2].z
        dp3 r11.y, r10.xyzx, r13.xyzx
        mov r13.x, cb10[r4.z + 1].y
        mov r13.yz, cb10[r4.z + 2].xxwx
        dp3 r11.z, r10.xyzx, r13.xyzx
        mad_sat r7.yzw, r11.xxyz, cb10[r4.z + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r10.xy, r7.yzyy, cb10[r4.z + 4].zwzz
        mul r10.z, r7.w, cb10[r4.z + 5].x
        add r7.yzw, r10.xxyz, cb10[r4.z + 5].yyzw
        add r10.xyz, r7.yzwy, l(0.000000, 0.000000, 0.500000, 0.000000)
        sample_l_indexable(texture3d)(float,float,float,float) r11.xyz, r7.yzwy, t17.xyzw, s4, l(0.000000)
        sample_l_indexable(texture3d)(float,float,float,float) r12.xzw, r7.yzwy, t18.xwyz, s4, l(0.000000)
        add r11.xyz, r11.xyzx, r12.xzwx
        sample_l_indexable(texture3d)(float,float,float,float) r7.yzw, r7.yzwy, t19.wxyz, s4, l(0.000000)
        add r7.yzw, r7.yyzw, r11.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r11.xyz, r10.xyzx, t17.xyzw, s4, l(0.000000)
        add r7.yzw, r7.yyzw, r11.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r11.xyz, r10.xyzx, t18.xyzw, s4, l(0.000000)
        add r7.yzw, r7.yyzw, r11.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r10.xyz, r10.xyzx, t19.xyzw, s4, l(0.000000)
        add r7.yzw, r7.yyzw, r10.xxyz
        mul r6.x, r6.x, cb10[r4.z + 7].y
        mul r6.x, r6.x, l(0.16666667)
        mul r7.yzw, r6.xxxx, r7.yyzw
        mul r10.xy, r7.yzyy, cb10[r4.z + 6].zwzz
        mul r10.z, r7.w, cb10[r4.z + 7].x
        add r5.xyz, r5.xyzx, r10.xyzx
        mad r2.w, r12.y, cb10[r4.z + 6].y, r2.w
      endif 
      mov r3.w, r4.w
    endif 
  endloop 
  mov r8.xyz, r5.xyzx
  mov r9.x, r2.w
  iadd r1.z, r1.z, l(32)
endloop 
lt r1.y, r9.x, l(1.000000)
if_nz r1.y
  mov r4.xy, l(0,0,0,0)
  mov r5.w, l(0)
  mov r6.yz, l(0,0,1.000000,0)
  mov r7.x, l(1.000000)
  mov r1.yzw, r8.xxyz
  mov r2.w, r9.x
  mov r3.w, l(0)
  loop 
    uge r4.w, r3.w, r1.x
    breakc_nz r4.w
    ushr r4.z, r3.w, l(5)
    iadd r5.xyz, r3.xyzx, r4.xyzx
    ld_indexable(texture2darray)(uint,uint,uint,uint) r4.z, r5.xyzw, t7.yzxw
    mov r5.xyz, r1.yzwy
    mov r4.w, r2.w
    mov r6.w, r4.z
    loop 
      breakc_z r6.w
      firstbit_lo r7.z, r6.w
      ishl r7.w, l(1), r7.z
      and r8.w, r6.w, r7.w
      if_nz r8.w
        xor r6.w, r6.w, r7.w
        iadd r7.z, r3.w, r7.z
        uge r7.w, r7.z, r1.x
        if_nz r7.w
          break 
        endif 
        imul null, r7.z, r7.z, l(14)
        add r10.xyz, r2.xyzx, -cb10[r7.z + 0].xyzx
        and r7.w, l(0x0000ffff), cb10[r7.z + 7].z
        ubfe r8.w, l(6), l(25), cb10[r7.z + 7].z
        imul null, r10.w, r7.w, l(6)
        dp3 r11.x, cb11[r10.w + 0].xyzx, r10.xyzx
        add_sat r11.x, r11.x, cb11[r10.w + 0].w
        dp3 r11.y, cb11[r10.w + 1].xyzx, r10.xyzx
        add_sat r11.y, r11.y, cb11[r10.w + 1].w
        mul r11.x, r11.y, r11.x
        dp3 r11.y, cb11[r10.w + 2].xyzx, r10.xyzx
        add_sat r11.y, r11.y, cb11[r10.w + 2].w
        mul r11.x, r11.y, r11.x
        dp3 r11.y, cb11[r10.w + 3].xyzx, r10.xyzx
        add_sat r11.y, r11.y, cb11[r10.w + 3].w
        mul r11.x, r11.y, r11.x
        dp3 r11.y, cb11[r10.w + 4].xyzx, r10.xyzx
        add_sat r11.y, r11.y, cb11[r10.w + 4].w
        mul r11.x, r11.y, r11.x
        dp3 r11.y, cb11[r10.w + 5].xyzx, r10.xyzx
        add_sat r10.w, r11.y, cb11[r10.w + 5].w
        mul r6.x, r10.w, r11.x
        and r10.w, l(1), cb10[r7.z + 6].x
        movc r11.xy, r10.wwww, r6.xyxx, r6.zxzz
        mov r6.x, cb10[r7.z + 6].x
        mov r12.xy, r11.xyxx
        mov r10.w, l(1)
        loop 
          ige r11.z, r10.w, r8.w
          breakc_nz r11.z
          iadd r11.z, r7.w, r10.w
          imul null, r11.z, r11.z, l(6)
          dp3 r11.w, cb11[r11.z + 0].xyzx, r10.xyzx
          add_sat r11.w, r11.w, cb11[r11.z + 0].w
          mul r11.w, r11.w, r12.x
          dp3 r12.z, cb11[r11.z + 1].xyzx, r10.xyzx
          add_sat r12.z, r12.z, cb11[r11.z + 1].w
          mul r11.w, r11.w, r12.z
          dp3 r12.z, cb11[r11.z + 2].xyzx, r10.xyzx
          add_sat r12.z, r12.z, cb11[r11.z + 2].w
          mul r11.w, r11.w, r12.z
          dp3 r12.z, cb11[r11.z + 3].xyzx, r10.xyzx
          add_sat r12.z, r12.z, cb11[r11.z + 3].w
          mul r11.w, r11.w, r12.z
          dp3 r12.z, cb11[r11.z + 4].xyzx, r10.xyzx
          add_sat r12.z, r12.z, cb11[r11.z + 4].w
          mul r11.w, r11.w, r12.z
          dp3 r12.z, cb11[r11.z + 5].xyzx, r10.xyzx
          add_sat r11.z, r12.z, cb11[r11.z + 5].w
          mul r12.x, r11.z, r11.w
          ushr r12.z, r6.x, l(2)
          ubfe r12.w, l(1), l(2), r6.x
          and r13.x, r12.z, l(2)
          max r13.y, r12.x, r12.y
          mad r11.z, -r11.w, r11.z, l(1.000000)
          mul r11.z, r11.z, r12.y
          movc r7.y, r13.x, r11.z, r13.y
          movc r12.xy, r12.wwww, r12.xyxx, r7.xyxx
          iadd r10.w, r10.w, l(1)
          mov r6.x, r12.z
        endloop 
        add_sat r6.x, -r9.x, r12.y
        mul r7.y, r6.x, cb10[r7.z + 6].y
        lt r7.w, l(0.000000), r7.y
        if_nz r7.w
          mov r11.x, cb10[r7.z + 0].w
          mov r11.y, cb10[r7.z + 1].z
          mov r11.z, cb10[r7.z + 2].y
          dp3 r11.x, r10.xyzx, r11.xyzx
          mov r13.xy, cb10[r7.z + 1].xwxx
          mov r13.z, cb10[r7.z + 2].z
          dp3 r11.y, r10.xyzx, r13.xyzx
          mov r13.x, cb10[r7.z + 1].y
          mov r13.yz, cb10[r7.z + 2].xxwx
          dp3 r11.z, r10.xyzx, r13.xyzx
          mad_sat r10.xyz, r11.xyzx, cb10[r7.z + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
          mul r11.xy, r10.xyxx, cb10[r7.z + 4].zwzz
          mul r11.z, r10.z, cb10[r7.z + 5].x
          add r10.xyz, r11.xyzx, cb10[r7.z + 5].yzwy
          add r11.xyz, r10.xyzx, l(0.000000, 0.000000, 0.500000, 0.000000)
          sample_l_indexable(texture3d)(float,float,float,float) r12.xzw, r10.xyzx, t17.xwyz, s4, l(0.000000)
          sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r10.xyzx, t18.xyzw, s4, l(0.000000)
          add r12.xzw, r12.xxzw, r13.xxyz
          sample_l_indexable(texture3d)(float,float,float,float) r10.xyz, r10.xyzx, t19.xyzw, s4, l(0.000000)
          add r10.xyz, r10.xyzx, r12.xzwx
          sample_l_indexable(texture3d)(float,float,float,float) r12.xzw, r11.xyzx, t17.xwyz, s4, l(0.000000)
          add r10.xyz, r10.xyzx, r12.xzwx
          sample_l_indexable(texture3d)(float,float,float,float) r12.xzw, r11.xyzx, t18.xwyz, s4, l(0.000000)
          add r10.xyz, r10.xyzx, r12.xzwx
          sample_l_indexable(texture3d)(float,float,float,float) r11.xyz, r11.xyzx, t19.xyzw, s4, l(0.000000)
          add r10.xyz, r10.xyzx, r11.xyzx
          mul r7.y, r7.y, cb10[r7.z + 7].y
          mul r7.y, r7.y, l(0.16666667)
          mul r10.xyz, r7.yyyy, r10.xyzx
          mul r11.xy, r10.xyxx, cb10[r7.z + 6].zwzz
          mul r11.z, r10.z, cb10[r7.z + 7].x
          add r5.xyz, r5.xyzx, r11.xyzx
          mad r4.w, r6.x, cb10[r7.z + 6].y, r4.w
        endif 
      endif 
    endloop 
    mov r1.yzw, r5.xxyz
    mov r2.w, r4.w
    iadd r3.w, r3.w, l(32)
  endloop 
  mov r8.xyz, r1.yzwy
  mov r9.x, r2.w
endif 
max r1.x, r9.x, l(0.000100)
rcp r1.x, r1.x
mov_sat r9.x, r9.x
mul r9.yzw, r1.xxxx, r8.xxyz
if_z r0.x
  store_raw g1.x, l(0), l(64)
endif 
sync_g_t
ne r1.x, r9.x, l(0.000000)
if_nz r1.x
  atomic_umin g1, l(0), r0.x
endif 
sync_g_t
ld_raw r1.x, l(0), g1.xxxx
ieq r1.y, r0.x, r1.x
if_nz r1.y
  store_raw g2.x, l(0), r9.x
  store_raw g3.xyz, l(0), r9.yzwy
endif 
sync_g_t
ine r1.x, r1.x, l(64)
eq r1.y, r9.x, l(0.000000)
and r1.x, r1.y, r1.x
ld_raw r2.x, l(0), g2.xxxx
ld_raw r2.yzw, l(0), g3.xxyz
movc r1.xyzw, r1.xxxx, r2.xyzw, r9.xyzw
ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), r1.x
add r2.xyz, r0.yzwy, r1.yzwy
mad r1.yzw, cb2[19].yyzw, cb2[19].xxxx, r1.yyzw
add r0.yzw, r0.yyzw, r1.yyzw
movc r1.xyz, r1.xxxx, r2.xyzx, r0.yzwy
mov r0.xy, icb[r0.x + 0].xyxx
mov r0.zw, vThreadGroupID.zzzz
mov r1.w, l(0)
store_uav_typed u3.xyzw, r0.xyzw, r1.xyzw
ret 
// Approximately 743 instruction slots used
