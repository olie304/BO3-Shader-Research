//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:36 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 42
dcl_thread_group 8, 8, 1
ishl r0.x, cb2[57].x, l(2)
iadd r0.x, r0.x, vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.yzw, r1.xyww, t0.wxyz
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.yyyx
add r9.xy, r1.wzww, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r10.x, r3.x, l(0.984375)
mul r5.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r10.x, r3.x, r5.w
max r3.x, r3.x, l(0.00000001)
rcp r10.y, r3.x
and r9.zw, r0.zzzz, r10.xxxy
add r10.xy, r9.xyxx, -cb1[71].xyxx
mul r10.xy, r10.xyxx, cb1[44].zwzz
mad r10.xy, r10.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r11.x, r10.x, cb1[12].x
mul r11.y, r10.y, cb1[13].y
mov r11.z, l(1.000000)
mul r10.xyz, r9.wwww, r11.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.z, r2.w, l(3.000000), l(0.500000)
ftou r0.z, r0.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r11.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r11.z
mul r11.xy, r2.wwww, r2.xyxx
and r12.xyzw, r0.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.z, r12.w, r12.z
movc r12.z, r0.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.z, r0.w, l(-0.500000), l(-0.00146628)
add r0.z, r0.z, r2.z
mul_sat r2.y, r0.z, l(2.00982332)
dp3 r0.z, -r10.xyzx, -r10.xyzx
rsq r0.z, r0.z
mul r12.xyz, r0.zzzz, -r10.xyzx
dp2 r2.z, r1.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r2.z, r2.z
mul r2.z, r2.z, l(52.982918)
frc r2.z, r2.z
mad r2.z, r2.z, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r2.z
dp2 r1.z, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r3.x, r15.x, r1.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.z, -r12.xyzx, r11.xyzx
add r1.z, r1.z, r1.z
mad r16.xyz, r11.xyzx, -r1.zzzz, -r12.xyzx
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.w, r1.z
mul r2.zw, r9.xxxy, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r2.z, r2.zwzz, t27.yzxw, s4, l(0.000000)
mul r2.w, r2.z, r4.z
dp3 r5.w, r11.xyzx, cb2[17].xyzx
mov_sat r6.w, r5.w
movc r7.w, r0.w, |r5.w|, r6.w
ge r8.w, l(0.000000), r7.w
if_nz r8.w
  mov r9.x, l(0)
endif 
if_z r8.w
  mul r15.yzw, r10.yyyy, cb2[29].xxyz
  mad r15.yzw, r10.xxxx, cb2[28].xxyz, r15.yyzw
  mad r15.yzw, r10.zzzz, cb2[30].xxyz, r15.yyzw
  add r15.yzw, r15.yyzw, cb2[31].xxyz
  add r8.w, r15.w, -cb2[17].w
  mad r8.w, -r8.w, l(0.00006104), l(1.000000)
  mov_sat r9.y, r8.w
  eq r9.y, r8.w, r9.y
  if_nz r9.y
    mov r9.yw, l(0,0,0,0)
    loop 
      ge r12.w, r9.y, l(3.000000)
      breakc_nz r12.w
      ftou r12.w, r9.y
      add r13.zw, r15.yyyz, -cb2[r12.w + 20].xxxy
      max r13.z, |r13.w|, |r13.z|
      mul r9.w, r13.z, cb2[r12.w + 20].z
      lt r12.w, r9.w, l(1.000000)
      if_nz r12.w
        break 
      endif 
      add r9.y, r9.y, l(1.000000)
      mov r9.w, l(0)
    endloop 
  else 
    mov r9.yw, l(0,3.000000,0,0)
  endif 
  ge r12.w, r9.y, l(3.000000)
  if_nz r12.w
    mul r17.xyz, l(128.000000, 0.500000, 0.500000, 0.000000), cb2[27].zxyz
    rcp r18.xz, r17.xxxx
    mov r18.y, -r18.z
    mad r17.xyz, r15.yzyy, r18.xyzx, r17.yzyy
    add r18.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r17.xyz, r17.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r17.xyz, r18.xyzx, r17.xyzx
    mul r13.zw, r17.zzzy, cb2[32].xxxx
    round_ni r13.zw, r13.zzzw
    mul r13.w, r13.w, cb2[27].x
    mad r13.z, r13.w, cb2[32].x, r13.z
    ftou r13.z, r13.z
    iadd r13.z, r13.z, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.z, l(0), t23.xxxx
    and r14.w, r13.w, l(0x40000000)
    ishl r17.w, r13.w, l(2)
    if_z r14.w
      and r14.w, r13.w, l(0x01ffffff)
      iadd r18.x, r13.z, r14.w
      ushr r13.z, r13.w, l(25)
      utof r13.z, r13.z
      mul r17.xyz, r13.zzzz, r17.xyzx
      frc r17.xyz, r17.xyzx
      mul r17.xyz, r17.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
      ftou r17.xyz, r17.xyzx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      ushr r13.zw, r17.zzzy, l(0, 0, 6, 6)
      and r14.w, r18.z, l(0xc0000000)
      iadd r18.w, r18.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.w, l(0), t23.xxxx
      movc r13.w, r13.w, r18.z, r18.w
      ushr r18.w, r13.w, l(13)
      movc r13.z, r13.z, r18.w, r13.w
      and r13.z, r13.z, l(8191)
      iadd r19.x, r13.z, r18.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      mov r18.y, l(0)
      mov r19.y, l(1)
      movc r19.xyz, r14.wwww, r18.xyzx, r19.xyzx
      movc r20.yz, r14.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r13.zw, r17.zzzy, r20.yyyy
      and r13.zw, r13.zzzw, l(0, 0, 1, 1)
      and r18.w, r19.z, l(0xc0000000)
      iadd r19.w, r19.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.w, l(0), t23.xxxx
      movc r13.w, r13.w, r19.z, r19.w
      ushr r19.w, r13.w, l(13)
      movc r13.z, r13.z, r19.w, r13.w
      and r13.z, r13.z, l(8191)
      iadd r20.x, r13.z, r19.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.w, r20.x, l(0), t23.xxxx
      movc r19.xyz, r18.wwww, r19.xyzx, r20.xzwx
      movc r18.xyz, r14.wwww, r18.xyzx, r19.xyzx
      and r13.z, r18.z, l(0xc0000000)
      if_z r13.z
        iadd r13.z, -r18.y, l(6)
        ushr r13.zw, r17.zzzy, r13.zzzz
        or r14.w, r18.z, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r14.w, r13.z
        and r13.z, r13.z, l(1023)
        iadd r19.x, r13.z, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
        iadd r19.yz, r18.yyyy, l(0, 1, 2, 0)
        iadd r13.z, -r19.y, l(6)
        ushr r13.zw, r17.zzzy, r13.zzzz
        and r14.w, r19.w, l(0xc0000000)
        or r18.y, r19.w, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r18.y, r13.z
        and r13.z, r13.z, l(1023)
        iadd r20.x, r13.z, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
        mov r20.y, r19.z
        movc r20.xyz, r14.wwww, r19.xywx, r20.xyzx
        iadd r13.z, -r20.y, l(6)
        ushr r13.zw, r17.zzzy, r13.zzzz
        and r18.y, r20.z, l(0xc0000000)
        or r18.w, r20.z, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r18.w, r13.z
        and r13.z, r13.z, l(1023)
        iadd r21.x, r13.z, r20.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r21.y, r21.x, l(0), t23.xxxx
        movc r13.zw, r18.yyyy, r20.xxxz, r21.xxxy
        movc r18.xz, r14.wwww, r19.xxwx, r13.zzwz
      endif 
      and r13.z, r18.z, l(0xc0000000)
      if_z r13.z
        ubfe r13.w, l(14), l(15), r18.z
        utof r13.w, r13.w
        mul r13.w, r13.w, cb2[27].w
        mul r13.w, r13.w, l(0.00006104)
        and r18.yw, r18.zzzz, l(0, 0x00007fff, 0, 0x20000000)
        utof r14.w, r18.y
        mul r14.w, r14.w, cb2[27].w
        mul r14.w, r14.w, l(0.00003052)
        and r18.y, r17.y, l(3)
        iadd r18.y, r18.y, r18.x
        iadd r18.y, r18.y, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.y, r18.y, l(0), t23.xxxx
        bfi r19.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r17.xyzx, l(0, 0, 0, 0)
        ushr r17.x, r18.y, r19.x
        and r17.x, r17.x, l(255)
        utof r17.x, r17.x
        mul r17.x, r14.w, r17.x
        mad r17.x, r17.x, l(0.00392157), r13.w
        iadd r17.y, r19.y, l(1)
        ubfe r17.z, l(1), l(1), r17.z
        iadd r17.y, r17.z, r17.y
        iadd r17.y, r17.y, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.y, r17.y, l(0), t23.xxxx
        ushr r17.y, r17.y, r19.z
        and r17.y, r17.y, l(0x0000ffff)
        utof r17.y, r17.y
        mul r14.w, r14.w, r17.y
        mad r13.w, r14.w, l(0.00001526), r13.w
        movc r17.w, r18.w, r17.x, r13.w
      else 
        and r13.w, r18.z, l(0x80000000)
        iadd r14.w, r18.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t23.xxxx
        movc r13.w, r13.w, r14.w, l(0)
        ishl r14.w, r18.z, l(2)
        ushr r17.x, r13.w, l(16)
        f16tof32 r17.x, r17.x
        and r13.w, r13.w, l(0x0000ffff)
        f16tof32 r13.w, r13.w
        mad r14.w, r15.y, r17.x, r14.w
        mad r13.w, r15.z, r13.w, r14.w
        movc r17.w, r13.z, r13.w, r17.w
      endif 
    endif 
    mad r13.z, -cb2[27].z, l(2.000000), r15.w
    lt r13.z, r17.w, r13.z
    movc r9.x, r13.z, l(0), l(1.000000)
  endif 
  if_z r12.w
    if_z cb2[58].y
      ftou r12.w, r9.y
      add r13.zw, r15.yyyz, -cb2[r12.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r12.w + 20].zzzz
      mad r17.xy, r13.zwzz, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r12.w, cb2[26].y
      add r17.z, r9.y, r12.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r17.xyzx, t13.xxxx, s13, r8.w
      sample_l_indexable(texture2darray)(float,float,float,float) r13.z, r17.xyzx, t31.yzxw, s0, l(0.000000)
      add r12.w, r12.w, r13.z
      add_sat r12.w, r12.w, l(-1.000000)
      mul r13.z, r12.w, r12.w
      mul r9.x, r12.w, r13.z
    endif 
    if_nz cb2[58].y
      mov r17.x, -r13.x
      ftou r12.w, r9.y
      add r9.y, r9.y, l(1.000000)
      min r9.y, r9.y, l(2.000000)
      add r9.w, -r9.w, l(1.000000)
      mul r9.w, r9.w, l(28.000000)
      ftou r9.yw, r9.yyyw
      add r13.zw, r15.yyyz, -cb2[r12.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r12.w + 20].zzzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r15.yz, r15.yyzy, -cb2[r9.y + 20].xxyx
      mul r15.yz, r15.yyzy, cb2[r9.y + 20].zzzz
      mad r15.yz, r15.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r17.y, r14.x
      mov r17.z, r13.x
      mov r14.w, l(0)
      mov r15.w, l(0)
      loop 
        uge r17.w, r15.w, l(8)
        breakc_nz r17.w
        ult r17.w, r9.w, r15.w
        movc r18.xy, r17.wwww, r15.yzyy, r13.zwzz
        movc r18.z, r17.w, cb2[r9.y + 20].w, cb2[r12.w + 20].w
        movc r17.w, r17.w, r9.y, r12.w
        dp2 r19.x, icb[r15.w + 0].yxyy, r17.xyxx
        dp2 r19.y, icb[r15.w + 0].yxyy, r17.yzyy
        mad r18.xy, r19.xyxx, r18.zzzz, r18.xyxx
        iadd r17.w, r17.w, cb2[26].y
        utof r18.z, r17.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r18.xyzx, t13.xxxx, s13, r8.w
        sample_l_indexable(texture2darray)(float,float,float,float) r18.x, r18.xyzx, t31.xyzw, s0, l(0.000000)
        add r17.w, r17.w, r18.x
        add_sat r17.w, r17.w, l(-1.000000)
        mad r14.w, r17.w, l(0.125000), r14.w
        iadd r15.w, r15.w, l(1)
      endloop 
      mul r8.w, r14.w, r14.w
      mul r9.x, r14.w, r8.w
    endif 
  endif 
endif 
add r8.w, -r2.y, l(1.000000)
mul r8.w, r8.w, l(5.000000)
add r15.yzw, r10.xxyz, -cb2[35].xxyz
mul r17.x, r15.y, cb2[35].w
mul r17.yz, r15.zzwz, cb2[36].xxyx
add_sat r15.yzw, r17.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
mul r17.xy, r15.yzyy, cb2[36].zwzz
mul r17.z, r15.w, cb2[37].x
add r15.yzw, r17.xxyz, cb2[37].yyzw
lt r17.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
movc r17.xyz, r17.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
mov r17.w, l(0)
add r18.xyz, r15.yzwy, r17.wwxw
sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t17.xyzw, s4, l(0.000000)
mul r19.xyz, r11.xyzx, r11.xyzx
mul r19.xyz, r19.xyzx, cb2[19].xxxx
add r20.xyz, r15.yzwy, r17.wwyw
sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t18.xyzw, s4, l(0.000000)
mul r20.xyz, r19.yyyy, r20.xyzx
mad r18.xyz, r18.xyzx, r19.xxxx, r20.xyzx
add r15.yzw, r15.yyzw, r17.wwwz
sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t19.wxyz, s4, l(0.000000)
mad r15.yzw, r15.yyzw, r19.zzzz, r18.xxyz
mov r11.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
mul r15.yzw, r15.yyzw, r17.xxyz
dp3 r9.y, r15.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
mov r16.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r16.xyzw, t8.xyzw, s2, r8.w
add r8.w, -r9.y, cb2[19].x
mad r8.w, r2.y, r8.w, r9.y
mul r17.xyz, r8.wwww, r17.xyzx
mad r8.w, r4.z, r2.z, r2.x
log r8.w, |r8.w|
mul r8.w, r1.w, r8.w
exp r8.w, r8.w
mad r2.z, r4.z, r2.z, r8.w
add_sat r2.z, r2.z, l(-1.000000)
mul r18.xyz, r2.wwww, r15.yzwy
and r19.xyz, r0.wwww, r18.yzxy
mad r9.yw, r2.xxxy, l(0.000000, 0.984375, 0.000000, 0.984375), l(0.000000, 0.00781250, 0.000000, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r9.yw, r9.ywyy, t5.zxwy, s2, l(0.000000)
mul r17.xyz, r2.zzzz, r17.xyzx
mul r20.xyz, r9.yyyy, r17.xyzx
mul r17.xyz, r9.wwww, r17.xyzx
sqrt r2.y, r1.w
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r2.z, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r4.z, r2.x, r2.y, r2.z
mul r2.yz, r2.yyzy, r4.zzzz
lt r4.z, l(0.000000), r7.w
if_nz r4.z
  lt r4.z, l(0.000000), r9.x
  if_nz r4.z
    mul r4.z, r1.z, cb2[18].w
    mul r4.z, r6.w, r4.z
    if_nz cb2[23].x
      add r21.xyz, r10.xyzx, cb1[24].xyzx
      mov r21.w, l(1.000000)
      dp4 r8.w, cb2[24].xyzw, r21.xyzw
      dp4 r9.y, cb2[25].xyzw, r21.xyzw
      frc r21.x, r8.w
      frc r21.y, r9.y
      iadd r8.w, l(-1), cb2[23].x
      utof r21.z, r8.w
      sample_l_indexable(texture2darray)(float,float,float,float) r21.xyz, r21.xyzx, t20.xyzw, s2, l(0.000000)
      add r21.xyz, r21.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r21.xyz, cb2[23].yyyy, r21.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r21.xyz, r21.xyzx, cb2[18].xyzx
    else 
      mov r21.xyz, cb2[18].xyzx
    endif 
    ushr r8.w, cb2[53].x, l(16)
    ult r9.y, l(0), r8.w
    and r9.y, r9.z, r9.y
    if_nz r9.y
      iadd r8.w, r8.w, cb2[0].x
      imad r8.w, r8.w, l(15), l(-15)
      mad r9.y, |r5.w|, l(-0.200000), l(0.400000)
      lt r9.w, r5.w, l(0.000000)
      and r9.w, r0.w, r9.w
      movc r9.y, r9.w, -r9.y, r9.y
      mad r22.xyz, r11.xyzx, r9.yyyy, r10.xyzx
      mov r23.xyz, cb9[r8.w + 4].yzwy
      mov r23.w, cb9[r8.w + 5].x
      mov r22.w, l(1.000000)
      dp4 r23.x, r23.xyzw, r22.xyzw
      mov r24.xyz, cb9[r8.w + 5].yzwy
      mov r24.w, cb9[r8.w + 6].x
      dp4 r23.y, r24.xyzw, r22.xyzw
      mad r9.yw, r23.xxxy, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
      add r23.x, r9.y, cb9[r8.w + 9].w
      add r23.y, r9.w, cb9[r8.w + 10].x
      mul r9.yw, r23.xxxy, cb9[r8.w + 9].yyyz
      div r13.zw, cb9[r8.w + 3].yyyy, cb9[r8.w + 8].yyyw
      add r23.xy, -r13.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r23.xy, r9.ywyy, r23.xyxx
      ge r13.zw, r13.zzzw, r9.yyyw
      or r13.zw, r13.zzzw, r23.xxxy
      or r11.w, r13.w, r13.z
      if_z r11.w
        mov r23.xyz, cb9[r8.w + 6].yzwy
        mov r23.w, cb9[r8.w + 7].x
        dp4 r11.w, r23.xyzw, r22.xyzw
        mov_sat r9.yw, r9.yyyw
        mad r22.x, r9.y, cb9[r8.w + 8].y, cb9[r8.w + 8].z
        mad r22.y, r9.w, cb9[r8.w + 8].w, cb9[r8.w + 9].x
        add r9.y, r11.w, cb9[r8.w + 10].y
        div r9.y, r9.y, cb9[r8.w + 10].z
        max r9.y, r9.y, l(0.00006104)
        and r9.w, l(0x0000ffff), cb9[r8.w + 1].w
        if_nz cb2[58].y
          mov r23.x, -r13.x
          utof r24.z, r9.w
          mov r23.y, r14.x
          mov r23.z, r13.x
          mov r11.w, l(0)
          mov r12.w, l(0)
          loop 
            ige r13.z, r12.w, l(8)
            breakc_nz r13.z
            dp2 r25.x, icb[r12.w + 0].yxyy, r23.xyxx
            dp2 r25.y, icb[r12.w + 0].yxyy, r23.yzyy
            mad r24.xy, r25.xyxx, cb9[r8.w + 3].yyyy, r22.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.z, r24.xyzx, t9.xxxx, s13, r9.y
            mad r11.w, r13.z, l(0.125000), r11.w
            iadd r12.w, r12.w, l(1)
          endloop 
        else 
          utof r22.z, r9.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.w, r22.xyzx, t9.xxxx, s13, r9.y
        endif 
        mul r8.w, r11.w, r11.w
        mul r8.w, r11.w, r8.w
      else 
        mov r8.w, l(1.000000)
      endif 
      mul r9.x, r8.w, r9.x
    else 
      and r8.w, cb2[53].x, l(0x0000ffff)
      ult r9.y, l(0), r8.w
      not r9.w, r9.z
      and r9.y, r9.w, r9.y
      if_nz r9.y
        iadd r8.w, r8.w, cb2[0].x
        imad r8.w, r8.w, l(15), l(-15)
        mad r9.y, |r5.w|, l(-0.200000), l(0.400000)
        lt r9.w, r5.w, l(0.000000)
        and r9.w, r0.w, r9.w
        movc r9.y, r9.w, -r9.y, r9.y
        mad r22.xyz, r11.xyzx, r9.yyyy, r10.xyzx
        mov r23.xyz, cb9[r8.w + 4].yzwy
        mov r23.w, cb9[r8.w + 5].x
        mov r22.w, l(1.000000)
        dp4 r23.x, r23.xyzw, r22.xyzw
        mov r24.xyz, cb9[r8.w + 5].yzwy
        mov r24.w, cb9[r8.w + 6].x
        dp4 r23.y, r24.xyzw, r22.xyzw
        mad r9.yw, r23.xxxy, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
        add r23.x, r9.y, cb9[r8.w + 9].w
        add r23.y, r9.w, cb9[r8.w + 10].x
        mul r9.yw, r23.xxxy, cb9[r8.w + 9].yyyz
        div r13.zw, cb9[r8.w + 3].yyyy, cb9[r8.w + 8].yyyw
        add r23.xy, -r13.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r23.xy, r9.ywyy, r23.xyxx
        ge r13.zw, r13.zzzw, r9.yyyw
        or r13.zw, r13.zzzw, r23.xxxy
        or r11.w, r13.w, r13.z
        if_z r11.w
          mov r23.xyz, cb9[r8.w + 6].yzwy
          mov r23.w, cb9[r8.w + 7].x
          dp4 r11.w, r23.xyzw, r22.xyzw
          mov_sat r9.yw, r9.yyyw
          mad r22.x, r9.y, cb9[r8.w + 8].y, cb9[r8.w + 8].z
          mad r22.y, r9.w, cb9[r8.w + 8].w, cb9[r8.w + 9].x
          add r9.y, r11.w, cb9[r8.w + 10].y
          div r9.y, r9.y, cb9[r8.w + 10].z
          max r9.y, r9.y, l(0.00006104)
          and r9.w, l(0x0000ffff), cb9[r8.w + 1].w
          if_nz cb2[58].y
            mov r23.x, -r13.x
            utof r24.z, r9.w
            mov r23.y, r14.x
            mov r23.z, r13.x
            mov r11.w, l(0)
            mov r12.w, l(0)
            loop 
              ige r13.z, r12.w, l(8)
              breakc_nz r13.z
              dp2 r25.x, icb[r12.w + 0].yxyy, r23.xyxx
              dp2 r25.y, icb[r12.w + 0].yxyy, r23.yzyy
              mad r24.xy, r25.xyxx, cb9[r8.w + 3].yyyy, r22.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.z, r24.xyzx, t9.xxxx, s13, r9.y
              mad r11.w, r13.z, l(0.125000), r11.w
              iadd r12.w, r12.w, l(1)
            endloop 
          else 
            utof r22.z, r9.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.w, r22.xyzx, t9.xxxx, s13, r9.y
          endif 
          mul r8.w, r11.w, r11.w
          mul r8.w, r11.w, r8.w
        else 
          mov r8.w, l(1.000000)
        endif 
        mul r9.x, r8.w, r9.x
      endif 
    endif 
    mad r8.w, -r2.x, l(0.500000), l(1.000000)
    mad r8.w, -r7.w, r8.w, l(1.000000)
    mul r8.w, r8.w, r8.w
    mad r8.w, -r8.w, l(0.620000), l(0.620000)
    add r8.w, -r7.w, r8.w
    mad r7.w, r1.w, r8.w, r7.w
    mul r7.w, r9.x, r7.w
    mul r22.xyz, r21.xyzx, r7.wwww
    lt r5.w, l(0.000000), r5.w
    mad r22.xyz, r15.yzwy, r2.wwww, r22.xyzx
    mad r15.yzw, -r10.xxyz, r0.zzzz, cb2[17].xxyz
    dp3 r0.z, r15.yzwy, r15.yzwy
    rsq r0.z, r0.z
    mul r15.yzw, r0.zzzz, r15.yyzw
    dp3 r0.z, r15.yzwy, r12.xyzx
    dp3 r2.w, r11.xyzx, r15.yzwy
    mad r8.w, |r2.w|, r1.z, -|r2.w|
    mad r2.w, |r2.w|, r8.w, l(1.000000)
    mad r6.w, r6.w, r2.y, r2.z
    mul r2.w, r2.w, r2.w
    mul r2.w, r6.w, r2.w
    rcp r2.w, r2.w
    mul r2.w, r4.z, r2.w
    mul r2.w, r2.w, r9.x
    mul r2.w, r2.w, l(0.250000)
    mad r23.yzw, r2.wwww, r21.xxyz, r17.xxyz
    add_sat r0.z, -r0.z, l(1.000000)
    mul r4.z, r0.z, r0.z
    mul r4.z, r4.z, r4.z
    mul r0.z, r0.z, r4.z
    mul r0.z, r0.z, r2.w
    mad r9.xyw, r0.zzzz, r21.xyxz, r20.xyxz
    mad r15.yzw, r7.wwww, r21.xxyz, r19.zzxy
    and r21.xyz, r0.wwww, r15.zwyz
    mov r22.w, r19.z
    mov r18.w, r21.z
    movc r18.xyzw, r5.wwww, r22.xyzw, r18.xyzw
    mov r19.zw, r9.xxxy
    mov r21.zw, r20.xxxy
    movc r21.xyzw, r5.wwww, r19.xyzw, r21.xyzw
    mov r23.x, r9.w
    mov r17.w, r20.z
    movc r17.xyzw, r5.wwww, r23.yzwx, r17.xyzw
    mov r19.z, r18.w
    mov r19.xy, r21.xyxx
    mov r20.xy, r21.zwzz
    mov r20.z, r17.w
  endif 
endif 
ftou r0.z, cb1[44].x
iadd r0.z, r0.z, l(7)
ushr r0.z, r0.z, l(3)
imad r0.x, r0.y, r0.z, r0.x
ishl r0.x, r0.x, l(5)
not r0.y, r9.z
mov r21.x, -r13.x
mad r0.z, -r2.x, l(0.500000), l(1.000000)
mov r10.w, l(1.000000)
mov r22.z, l(1.000000)
mov r23.w, l(1.000000)
mov r24.w, l(1.000000)
mov r25.w, l(1.000000)
mov r21.z, r13.x
mov r26.w, l(1.000000)
mov r21.yw, r14.xxxx
mov r13.y, r21.w
mov r14.y, r21.x
mov r14.z, r13.x
mov r27.x, r14.x
mov r27.y, r21.x
mov r27.z, r13.x
mov r28.w, l(1.000000)
mov r29.x, r14.x
mov r29.y, r21.x
mov r29.z, r13.x
mov r30.x, r14.x
mov r30.y, r21.x
mov r30.z, r13.x
mov r9.xyw, r18.xyxz
mov r31.xyz, r19.zxyz
mov r32.xyz, r20.xyzx
mov r15.yzw, r17.xxyz
mov r2.x, cb2[58].y
mov r2.w, l(0)
loop 
  uge r4.z, r2.w, cb2[0].x
  breakc_nz r4.z
  ushr r4.z, r2.w, l(5)
  iadd r4.z, r0.x, r4.z
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.z, r4.z, l(0), t26.xxxx
  mov r33.xyz, r9.xywx
  mov r34.xyz, r31.xyzx
  mov r35.xyz, r32.xyzx
  mov r36.xyz, r15.yzwy
  mov r5.w, r2.x
  mov r6.w, r4.z
  loop 
    breakc_z r6.w
    firstbit_lo r7.w, r6.w
    ishl r8.w, l(1), r7.w
    not r8.w, r8.w
    and r6.w, r6.w, r8.w
    iadd r7.w, r2.w, r7.w
    imul null, r7.w, r7.w, l(15)
    ubfe r8.w, l(3), l(24), cb9[r7.w + 1].w
    ieq r11.w, r8.w, l(2)
    if_nz r11.w
      ubfe r11.w, l(3), l(27), cb9[r7.w + 1].w
      add r37.xy, -r10.xyxx, cb9[r7.w + 3].zwzz
      add r37.z, -r10.z, cb9[r7.w + 4].x
      dp3 r12.w, r37.xyzx, r37.xyzx
      rsq r12.w, r12.w
      mul r38.xyz, r12.wwww, r37.xyzx
      mul r13.z, r1.z, cb9[r7.w + 1].z
      mul r13.z, r13.z, l(0.250000)
      dp3 r13.w, r11.xyzx, r38.xyzx
      mov_sat r14.w, r13.w
      movc r16.w, r0.w, |r13.w|, r14.w
      lt r17.w, l(0.000000), r16.w
      if_nz r17.w
        mov r38.xyz, cb9[r7.w + 7].yzwy
        mov r38.w, cb9[r7.w + 8].x
        dp4 r17.w, r38.xyzw, r10.xyzw
        lt r18.w, r17.w, l(1.000000)
        if_nz r18.w
          mov r39.xyz, l(1.000000,1.000000,1.000000,0)
          mov r18.w, l(0)
        else 
          add r40.xyz, -r10.xyzx, cb9[r7.w + 0].xyzx
          mul r19.w, cb9[r7.w + 3].x, cb9[r7.w + 3].x
          dp3 r20.w, r40.xyzx, r40.xyzx
          div r19.w, r19.w, r20.w
          min r19.w, r19.w, l(1.000000)
          mad_sat r40.xy, r17.wwww, cb9[r7.w + 2].xzxx, cb9[r7.w + 2].ywyy
          mul r40.zw, r40.xxxy, r40.xxxy
          mad r40.xy, r40.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r40.xy, r40.xyxx, r40.zwzz
          mul r19.w, r19.w, r40.x
          mul r19.w, r40.y, r19.w
          mov r40.xyz, cb9[r7.w + 4].yzwy
          mov r40.w, cb9[r7.w + 5].x
          dp4 r40.x, r40.xyzw, r10.xyzw
          mov r41.xyz, cb9[r7.w + 5].yzwy
          mov r41.w, cb9[r7.w + 6].x
          dp4 r40.y, r41.xyzw, r10.xyzw
          div r22.xy, r40.xyxx, r17.wwww
          lt r17.w, cb9[r7.w + 10].w, l(0.00048828)
          if_nz r17.w
            mad_sat r40.xy, |r22.xyxx|, cb9[r7.w + 12].xyxx, cb9[r7.w + 12].zwzz
            mul r40.zw, r40.xxxy, r40.xxxy
            mad r40.xy, r40.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r40.xy, r40.xyxx, r40.zwzz
            mul r17.w, r40.y, r40.x
          else 
            mul_sat r40.xyzw, |r22.yyxx|, cb9[r7.w + 11].xyzw
            log r40.xyzw, r40.xyzw
            mul r40.xyzw, r40.xyzw, cb9[r7.w + 12].zzzz
            exp r40.xyzw, r40.xyzw
            add r40.xy, r40.zwzz, r40.xyxx
            log r40.xy, r40.xyxx
            mul r40.xy, r40.xyxx, cb9[r7.w + 12].wwww
            exp r40.xy, r40.xyxx
            mul r20.w, r40.x, cb9[r7.w + 12].x
            mad r22.w, cb9[r7.w + 12].y, r40.y, l(-1.000000)
            mad r20.w, cb9[r7.w + 12].y, r40.y, -r20.w
            div_sat r20.w, r22.w, r20.w
            mul r22.w, r20.w, r20.w
            mad r20.w, r20.w, l(-2.000000), l(3.000000)
            mul r17.w, r20.w, r22.w
          endif 
          mul r18.w, r17.w, r19.w
          and r17.w, l(255), cb9[r7.w + 14].w
          if_nz r17.w
            dp3 r19.w, cb9[r7.w + 13].xyzx, r22.xyzx
            mov r40.x, cb9[r7.w + 13].w
            mov r40.yz, cb9[r7.w + 14].xxyx
            dp3 r20.w, r40.xyzx, r22.xyzx
            frc r40.x, r19.w
            frc r40.y, r20.w
            iadd r17.w, r17.w, l(-1)
            utof r40.z, r17.w
            sample_l_indexable(texture2darray)(float,float,float,float) r39.xyz, r40.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r39.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r40.x, cb9[r7.w + 0].w
        mov r40.yz, cb9[r7.w + 1].xxyx
        mul r22.xyw, r39.xyxz, r40.xyxz
        lt r17.w, l(0.000000), r18.w
        if_nz r17.w
          ine r11.w, r11.w, l(1)
          if_nz r11.w
            mad r11.w, |r13.w|, l(-0.200000), l(0.400000)
            lt r17.w, r13.w, l(0.000000)
            and r17.w, r0.w, r17.w
            movc r11.w, r17.w, -r11.w, r11.w
            mad r23.xyz, r11.xyzx, r11.wwww, r10.xyzx
            mov r39.xyz, cb9[r7.w + 6].yzwy
            mov r39.w, cb9[r7.w + 7].x
            dp4 r11.w, r39.xyzw, r23.xyzw
            dp4 r17.w, r38.xyzw, r23.xyzw
            ge r19.w, r17.w, r11.w
            if_nz r19.w
              mov r38.xyz, cb9[r7.w + 4].yzwy
              mov r38.w, cb9[r7.w + 5].x
              dp4 r38.x, r38.xyzw, r23.xyzw
              mov r39.xyz, cb9[r7.w + 5].yzwy
              mov r39.w, cb9[r7.w + 6].x
              dp4 r38.y, r39.xyzw, r23.xyzw
              div r23.xy, r38.xyxx, r17.wwww
              mad_sat r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r38.x, r23.x, cb9[r7.w + 8].y, cb9[r7.w + 8].z
              mad r38.y, r23.y, cb9[r7.w + 8].w, cb9[r7.w + 9].x
              div r11.w, r11.w, r17.w
              max r11.w, r11.w, l(0.00006104)
              and r17.w, l(0x0000ffff), cb9[r7.w + 1].w
              if_nz r5.w
                utof r23.z, r17.w
                mov r19.w, l(0)
                mov r20.w, l(0)
                loop 
                  ige r27.w, r20.w, l(8)
                  breakc_nz r27.w
                  dp2 r39.x, icb[r20.w + 0].yxyy, r21.xyxx
                  dp2 r39.y, icb[r20.w + 0].yxyy, r21.yzyy
                  mad r23.xy, r39.xyxx, cb9[r7.w + 3].yyyy, r38.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r11.w
                  mad r19.w, r23.x, l(0.125000), r19.w
                  iadd r20.w, r20.w, l(1)
                endloop 
              else 
                utof r38.z, r17.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r19.w, r38.xyzx, t9.xxxx, s13, r11.w
              endif 
              mul r11.w, r19.w, r19.w
              mul r11.w, r19.w, r11.w
            else 
              mov r11.w, l(1.000000)
            endif 
          else 
            mov r11.w, l(1.000000)
          endif 
          mul r11.w, r11.w, r18.w
          lt r17.w, l(0.000000), r11.w
          if_nz r17.w
            ubfe r17.w, l(4), l(16), cb9[r7.w + 1].w
            ult r18.w, l(0), r17.w
            and r18.w, r9.z, r18.w
            if_nz r18.w
              iadd r17.w, r17.w, cb2[0].x
              imad r17.w, r17.w, l(15), l(-15)
              mad r18.w, |r13.w|, l(-0.200000), l(0.400000)
              lt r20.w, r13.w, l(0.000000)
              and r20.w, r0.w, r20.w
              movc r18.w, r20.w, -r18.w, r18.w
              mad r24.xyz, r11.xyzx, r18.wwww, r10.xyzx
              mov r38.xyz, cb9[r17.w + 6].yzwy
              mov r38.w, cb9[r17.w + 7].x
              dp4 r18.w, r38.xyzw, r24.xyzw
              mov r38.xyz, cb9[r17.w + 7].yzwy
              mov r38.w, cb9[r17.w + 8].x
              dp4 r20.w, r38.xyzw, r24.xyzw
              lt r23.x, r20.w, r18.w
              if_z r23.x
                mov r38.xyz, cb9[r17.w + 4].yzwy
                mov r38.w, cb9[r17.w + 5].x
                dp4 r38.x, r38.xyzw, r24.xyzw
                mov r39.xyz, cb9[r17.w + 5].yzwy
                mov r39.w, cb9[r17.w + 6].x
                dp4 r38.y, r39.xyzw, r24.xyzw
                div r23.yz, r38.xxyx, r20.wwww
                mad r23.yz, r23.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r24.x, r23.y, cb9[r17.w + 9].w
                add r24.y, r23.z, cb9[r17.w + 10].x
                mul r23.yz, r24.xxyx, cb9[r17.w + 9].yyzy
                div r24.xy, cb9[r17.w + 3].yyyy, cb9[r17.w + 8].ywyy
                add r38.xy, -r24.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r38.xy, r23.yzyy, r38.xyxx
                ge r24.xy, r24.xyxx, r23.yzyy
                or r24.xy, r24.xyxx, r38.xyxx
                or r24.x, r24.y, r24.x
                if_z r24.x
                  mov_sat r23.yz, r23.yyzy
                  mad r38.x, r23.y, cb9[r17.w + 8].y, cb9[r17.w + 8].z
                  mad r38.y, r23.z, cb9[r17.w + 8].w, cb9[r17.w + 9].x
                  mul r23.y, r20.w, cb9[r17.w + 10].z
                  mad r18.w, cb9[r17.w + 10].y, r20.w, r18.w
                  div r18.w, r18.w, r23.y
                endif 
              else 
                mov r24.x, l(-1)
              endif 
              or r20.w, r23.x, r24.x
              if_z r20.w
                max r18.w, r18.w, l(0.00006104)
                and r20.w, l(0x0000ffff), cb9[r17.w + 1].w
                if_nz r5.w
                  utof r23.z, r20.w
                  mov r24.xy, l(0,0,0,0)
                  loop 
                    ige r24.z, r24.y, l(8)
                    breakc_nz r24.z
                    dp2 r39.x, icb[r24.y + 0].yxyy, r21.xwxx
                    dp2 r39.y, icb[r24.y + 0].xyxx, r13.xyxx
                    mad r23.xy, r39.xyxx, cb9[r17.w + 3].yyyy, r38.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r18.w
                    mad r24.x, r23.x, l(0.125000), r24.x
                    iadd r24.y, r24.y, l(1)
                  endloop 
                else 
                  utof r38.z, r20.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r38.xyzx, t9.xxxx, s13, r18.w
                endif 
                mul r17.w, r24.x, r24.x
                mul r17.w, r24.x, r17.w
              else 
                mov r17.w, l(1.000000)
              endif 
              mul r11.w, r11.w, r17.w
            else 
              ubfe r17.w, l(4), l(20), cb9[r7.w + 1].w
              ult r18.w, l(0), r17.w
              and r18.w, r0.y, r18.w
              if_nz r18.w
                iadd r17.w, r17.w, cb2[0].x
                imad r17.w, r17.w, l(15), l(-15)
                mad r18.w, |r13.w|, l(-0.200000), l(0.400000)
                lt r20.w, r13.w, l(0.000000)
                and r20.w, r0.w, r20.w
                movc r18.w, r20.w, -r18.w, r18.w
                mad r25.xyz, r11.xyzx, r18.wwww, r10.xyzx
                mov r38.xyz, cb9[r17.w + 6].yzwy
                mov r38.w, cb9[r17.w + 7].x
                dp4 r18.w, r38.xyzw, r25.xyzw
                mov r38.xyz, cb9[r17.w + 7].yzwy
                mov r38.w, cb9[r17.w + 8].x
                dp4 r20.w, r38.xyzw, r25.xyzw
                lt r23.x, r20.w, r18.w
                if_z r23.x
                  mov r38.xyz, cb9[r17.w + 4].yzwy
                  mov r38.w, cb9[r17.w + 5].x
                  dp4 r38.x, r38.xyzw, r25.xyzw
                  mov r39.xyz, cb9[r17.w + 5].yzwy
                  mov r39.w, cb9[r17.w + 6].x
                  dp4 r38.y, r39.xyzw, r25.xyzw
                  div r23.yz, r38.xxyx, r20.wwww
                  mad r23.yz, r23.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                  add r25.x, r23.y, cb9[r17.w + 9].w
                  add r25.y, r23.z, cb9[r17.w + 10].x
                  mul r23.yz, r25.xxyx, cb9[r17.w + 9].yyzy
                  div r24.yz, cb9[r17.w + 3].yyyy, cb9[r17.w + 8].yywy
                  add r25.xy, -r24.yzyy, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r25.xy, r23.yzyy, r25.xyxx
                  ge r24.yz, r24.yyzy, r23.yyzy
                  or r24.yz, r24.yyzy, r25.xxyx
                  or r24.y, r24.z, r24.y
                  if_z r24.y
                    mov_sat r23.yz, r23.yyzy
                    mad r25.x, r23.y, cb9[r17.w + 8].y, cb9[r17.w + 8].z
                    mad r25.y, r23.z, cb9[r17.w + 8].w, cb9[r17.w + 9].x
                    mul r23.y, r20.w, cb9[r17.w + 10].z
                    mad r18.w, cb9[r17.w + 10].y, r20.w, r18.w
                    div r18.w, r18.w, r23.y
                  endif 
                else 
                  mov r24.y, l(-1)
                endif 
                or r20.w, r23.x, r24.y
                if_z r20.w
                  max r18.w, r18.w, l(0.00006104)
                  and r20.w, l(0x0000ffff), cb9[r17.w + 1].w
                  if_nz r5.w
                    utof r23.z, r20.w
                    mov r24.yz, l(0,0,0,0)
                    loop 
                      ige r27.w, r24.z, l(8)
                      breakc_nz r27.w
                      dp2 r38.x, icb[r24.z + 0].xyxx, r27.xyxx
                      dp2 r38.y, icb[r24.z + 0].yxyy, r27.xzxx
                      mad r23.xy, r38.xyxx, cb9[r17.w + 3].yyyy, r25.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r18.w
                      mad r24.y, r23.x, l(0.125000), r24.y
                      iadd r24.z, r24.z, l(1)
                    endloop 
                  else 
                    utof r25.z, r20.w
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.y, r25.xyzx, t9.xxxx, s13, r18.w
                  endif 
                  mul r17.w, r24.y, r24.y
                  mul r17.w, r24.y, r17.w
                else 
                  mov r17.w, l(1.000000)
                endif 
                mul r11.w, r11.w, r17.w
              endif 
            endif 
            mad r17.w, -r16.w, r0.z, l(1.000000)
            mul r17.w, r17.w, r17.w
            mad r17.w, -r17.w, l(0.620000), l(0.620000)
            add r17.w, -r16.w, r17.w
            mad r16.w, r1.w, r17.w, r16.w
            mul r16.w, r11.w, r16.w
            lt r13.w, l(0.000000), r13.w
            mad r23.xyz, r16.wwww, r22.xywx, r33.xyzx
            mad r25.xyz, r37.xyzx, r12.wwww, r12.xyzx
            dp3 r12.w, r25.xyzx, r25.xyzx
            rsq r12.w, r12.w
            mul r25.xyz, r12.wwww, r25.xyzx
            dp3 r12.w, r25.xyzx, r12.xyzx
            dp3 r17.w, r11.xyzx, r25.xyzx
            mad r18.w, |r17.w|, r1.z, -|r17.w|
            mad r17.w, |r17.w|, r18.w, l(1.000000)
            mad r18.w, r14.w, r2.y, r2.z
            mul r17.w, r17.w, r17.w
            mul r17.w, r18.w, r17.w
            rcp r17.w, r17.w
            mul r13.z, r13.z, r14.w
            mul r13.z, r13.z, r17.w
            mul r11.w, r11.w, r13.z
            mad r25.xyz, r11.wwww, r22.xywx, r36.xyzx
            add_sat r12.w, -r12.w, l(1.000000)
            mul r13.z, r12.w, r12.w
            mul r13.z, r13.z, r13.z
            mul r12.w, r12.w, r13.z
            mul r11.w, r11.w, r12.w
            mad r37.xyz, r11.wwww, r22.xywx, r35.xyzx
            mad r22.xyw, r16.wwww, r22.xyxw, r34.xyxz
            movc r22.xyw, r0.wwww, r22.xyxw, r34.xyxz
            movc r33.xyz, r13.wwww, r23.xyzx, r33.xyzx
            movc r34.xyz, r13.wwww, r34.xyzx, r22.xywx
            movc r35.xyz, r13.wwww, r37.xyzx, r35.xyzx
            movc r36.xyz, r13.wwww, r25.xyzx, r36.xyzx
          endif 
        endif 
      endif 
    else 
      ieq r8.w, r8.w, l(4)
      if_nz r8.w
        ubfe r8.w, l(3), l(27), cb9[r7.w + 1].w
        mul r11.w, r1.z, cb9[r7.w + 1].z
        mul r11.w, r11.w, l(0.250000)
        lt r12.w, l(0.000000), cb9[r7.w + 6].y
        mov r23.xy, cb9[r7.w + 5].zwzz
        mov r23.z, cb9[r7.w + 6].x
        mad r22.xyw, -r23.xyxz, l(0.500000, 0.500000, 0.000000, 0.500000), cb9[r7.w + 0].xyxz
        add r25.xyz, -r10.xyzx, r22.xywx
        dp3 r13.z, r23.xyzx, r16.xyzx
        dp3 r13.w, r23.xyzx, r25.xyzx
        dp3 r14.w, r16.xyzx, r25.xyzx
        mad r16.w, -r13.z, r13.z, cb9[r7.w + 6].y
        mad r13.z, r13.z, r14.w, -r13.w
        div_sat r13.w, -r13.w, cb9[r7.w + 6].y
        div_sat r13.z, r13.z, r16.w
        div r14.w, r16.w, cb9[r7.w + 6].y
        mul r14.w, r14.w, l(10.000000)
        min r14.w, r14.w, l(1.000000)
        add r13.z, -r13.w, r13.z
        mad r13.z, r14.w, r13.z, r13.w
        mad r25.xyz, r13.zzzz, r23.xyzx, r22.xywx
        mad r22.xyw, r13.wwww, r23.xyxz, r22.xyxw
        movc r22.xyw, r12.wwww, r22.xyxw, cb9[r7.w + 0].xyxz
        movc r23.xyz, r12.wwww, r25.xyzx, cb9[r7.w + 0].xyzx
        add r23.xyz, -r10.xyzx, r23.xyzx
        add r22.xyw, -r10.xyxz, r22.xyxw
        dp3 r12.w, r23.xyzx, r23.xyzx
        rsq r12.w, r12.w
        mul r25.xyz, r12.wwww, r23.xyzx
        dp3 r13.z, r22.xywx, r22.xywx
        rsq r13.w, r13.z
        mul r22.xyw, r13.wwww, r22.xyxw
        dp3 r13.w, r11.xyzx, r22.xywx
        mov_sat r14.w, r13.w
        movc r14.w, r0.w, |r13.w|, r14.w
        lt r16.w, l(0.000000), r14.w
        if_nz r16.w
          sqrt r16.w, r13.z
          mul r17.w, cb9[r7.w + 3].x, cb9[r7.w + 3].x
          div r13.z, r17.w, r13.z
          min r13.z, r13.z, l(1.000000)
          mad_sat r22.xy, r16.wwww, cb9[r7.w + 2].xzxx, cb9[r7.w + 2].ywyy
          mul r37.xy, r22.xyxx, r22.xyxx
          mad r22.xy, r22.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r22.xy, r22.xyxx, r37.xyxx
          mul r13.z, r13.z, r22.x
          mul r13.z, r22.y, r13.z
          lt r16.w, l(0.000000), r13.z
          if_nz r16.w
            ine r8.w, r8.w, l(1)
            if_nz r8.w
              mad r8.w, |r13.w|, l(-0.200000), l(0.400000)
              lt r16.w, r13.w, l(0.000000)
              and r16.w, r0.w, r16.w
              movc r8.w, r16.w, -r8.w, r8.w
              mad r22.xyw, r11.xyxz, r8.wwww, r10.xyxz
              add r22.xyw, r22.xyxw, -cb9[r7.w + 4].yzyw
              max r8.w, |r22.w|, |r22.y|
              max r8.w, r8.w, |r22.x|
              div r8.w, cb9[r7.w + 5].x, r8.w
              add r8.w, r8.w, cb9[r7.w + 5].y
              dp3 r16.w, r22.xywx, r22.xywx
              rsq r16.w, r16.w
              max r8.w, r8.w, l(0.00006104)
              and r17.w, l(0x0000ffff), cb9[r7.w + 1].w
              utof r37.w, r17.w
              mov r17.w, l(0)
              mov r18.w, l(0)
              loop 
                ige r20.w, r18.w, l(8)
                breakc_nz r20.w
                dp2 r38.y, icb[r18.w + 0].xyxx, r14.xyxx
                dp2 r38.z, icb[r18.w + 0].yxyy, r14.xzxx
                mul r38.yz, r38.yyzy, cb9[r7.w + 3].yyyy
                mul r38.x, r15.x, r38.y
                mul r38.w, r3.x, r38.y
                mad r37.xyz, r22.xywx, r16.wwww, r38.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r20.w, r37.xyzw, t10.xxxx, s13, r8.w
                mad r17.w, r20.w, l(0.125000), r17.w
                iadd r18.w, r18.w, l(1)
              endloop 
            else 
              mov r17.w, l(1.000000)
            endif 
            mul r8.w, r13.z, r17.w
            lt r13.z, l(0.000000), r8.w
            if_nz r13.z
              ubfe r13.z, l(4), l(16), cb9[r7.w + 1].w
              ult r16.w, l(0), r13.z
              and r16.w, r9.z, r16.w
              if_nz r16.w
                iadd r13.z, r13.z, cb2[0].x
                imad r13.z, r13.z, l(15), l(-15)
                mad r16.w, |r13.w|, l(-0.200000), l(0.400000)
                lt r18.w, r13.w, l(0.000000)
                and r18.w, r0.w, r18.w
                movc r16.w, r18.w, -r16.w, r16.w
                mad r26.xyz, r11.xyzx, r16.wwww, r10.xyzx
                mov r37.xyz, cb9[r13.z + 6].yzwy
                mov r37.w, cb9[r13.z + 7].x
                dp4 r16.w, r37.xyzw, r26.xyzw
                mov r37.xyz, cb9[r13.z + 7].yzwy
                mov r37.w, cb9[r13.z + 8].x
                dp4 r18.w, r37.xyzw, r26.xyzw
                lt r20.w, r18.w, r16.w
                if_z r20.w
                  mov r37.xyz, cb9[r13.z + 4].yzwy
                  mov r37.w, cb9[r13.z + 5].x
                  dp4 r22.x, r37.xyzw, r26.xyzw
                  mov r37.xyz, cb9[r13.z + 5].yzwy
                  mov r37.w, cb9[r13.z + 6].x
                  dp4 r22.y, r37.xyzw, r26.xyzw
                  div r22.xy, r22.xyxx, r18.wwww
                  mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r26.x, r22.x, cb9[r13.z + 9].w
                  add r26.y, r22.y, cb9[r13.z + 10].x
                  mul r22.xy, r26.xyxx, cb9[r13.z + 9].yzyy
                  div r26.xy, cb9[r13.z + 3].yyyy, cb9[r13.z + 8].ywyy
                  add r37.xy, -r26.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r37.xy, r22.xyxx, r37.xyxx
                  ge r26.xy, r26.xyxx, r22.xyxx
                  or r26.xy, r26.xyxx, r37.xyxx
                  or r22.w, r26.y, r26.x
                  if_z r22.w
                    mov_sat r22.xy, r22.xyxx
                    mad r26.x, r22.x, cb9[r13.z + 8].y, cb9[r13.z + 8].z
                    mad r26.y, r22.y, cb9[r13.z + 8].w, cb9[r13.z + 9].x
                    mul r22.x, r18.w, cb9[r13.z + 10].z
                    mad r16.w, cb9[r13.z + 10].y, r18.w, r16.w
                    div r16.w, r16.w, r22.x
                  endif 
                else 
                  mov r22.w, l(-1)
                endif 
                or r18.w, r20.w, r22.w
                if_z r18.w
                  max r16.w, r16.w, l(0.00006104)
                  and r18.w, l(0x0000ffff), cb9[r13.z + 1].w
                  if_nz r5.w
                    utof r37.z, r18.w
                    mov r20.w, l(0)
                    mov r22.x, l(0)
                    loop 
                      ige r22.y, r22.x, l(8)
                      breakc_nz r22.y
                      dp2 r38.x, icb[r22.x + 0].xyxx, r29.xyxx
                      dp2 r38.y, icb[r22.x + 0].yxyy, r29.xzxx
                      mad r37.xy, r38.xyxx, cb9[r13.z + 3].yyyy, r26.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.y, r37.xyzx, t9.xxxx, s13, r16.w
                      mad r20.w, r22.y, l(0.125000), r20.w
                      iadd r22.x, r22.x, l(1)
                    endloop 
                  else 
                    utof r26.z, r18.w
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r26.xyzx, t9.xxxx, s13, r16.w
                  endif 
                  mul r13.z, r20.w, r20.w
                  mul r13.z, r20.w, r13.z
                else 
                  mov r13.z, l(1.000000)
                endif 
                mul r8.w, r8.w, r13.z
              else 
                ubfe r13.z, l(4), l(20), cb9[r7.w + 1].w
                ult r16.w, l(0), r13.z
                and r16.w, r0.y, r16.w
                if_nz r16.w
                  iadd r13.z, r13.z, cb2[0].x
                  imad r13.z, r13.z, l(15), l(-15)
                  mad r16.w, |r13.w|, l(-0.200000), l(0.400000)
                  lt r18.w, r13.w, l(0.000000)
                  and r18.w, r0.w, r18.w
                  movc r16.w, r18.w, -r16.w, r16.w
                  mad r28.xyz, r11.xyzx, r16.wwww, r10.xyzx
                  mov r37.xyz, cb9[r13.z + 6].yzwy
                  mov r37.w, cb9[r13.z + 7].x
                  dp4 r16.w, r37.xyzw, r28.xyzw
                  mov r37.xyz, cb9[r13.z + 7].yzwy
                  mov r37.w, cb9[r13.z + 8].x
                  dp4 r18.w, r37.xyzw, r28.xyzw
                  lt r22.x, r18.w, r16.w
                  if_z r22.x
                    mov r37.xyz, cb9[r13.z + 4].yzwy
                    mov r37.w, cb9[r13.z + 5].x
                    dp4 r26.x, r37.xyzw, r28.xyzw
                    mov r37.xyz, cb9[r13.z + 5].yzwy
                    mov r37.w, cb9[r13.z + 6].x
                    dp4 r26.y, r37.xyzw, r28.xyzw
                    div r22.yw, r26.xxxy, r18.wwww
                    mad r22.yw, r22.yyyw, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
                    add r26.x, r22.y, cb9[r13.z + 9].w
                    add r26.y, r22.w, cb9[r13.z + 10].x
                    mul r22.yw, r26.xxxy, cb9[r13.z + 9].yyyz
                    div r26.xy, cb9[r13.z + 3].yyyy, cb9[r13.z + 8].ywyy
                    add r28.xy, -r26.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r28.xy, r22.ywyy, r28.xyxx
                    ge r26.xy, r26.xyxx, r22.ywyy
                    or r26.xy, r26.xyxx, r28.xyxx
                    or r24.z, r26.y, r26.x
                    if_z r24.z
                      mov_sat r22.yw, r22.yyyw
                      mad r26.x, r22.y, cb9[r13.z + 8].y, cb9[r13.z + 8].z
                      mad r26.y, r22.w, cb9[r13.z + 8].w, cb9[r13.z + 9].x
                      mul r22.y, r18.w, cb9[r13.z + 10].z
                      mad r16.w, cb9[r13.z + 10].y, r18.w, r16.w
                      div r16.w, r16.w, r22.y
                    endif 
                  else 
                    mov r24.z, l(-1)
                  endif 
                  or r18.w, r22.x, r24.z
                  if_z r18.w
                    max r16.w, r16.w, l(0.00006104)
                    and r18.w, l(0x0000ffff), cb9[r13.z + 1].w
                    if_nz r5.w
                      utof r28.z, r18.w
                      mov r22.xy, l(0,0,0,0)
                      loop 
                        ige r22.w, r22.y, l(8)
                        breakc_nz r22.w
                        dp2 r37.x, icb[r22.y + 0].xyxx, r30.xyxx
                        dp2 r37.y, icb[r22.y + 0].yxyy, r30.xzxx
                        mad r28.xy, r37.xyxx, cb9[r13.z + 3].yyyy, r26.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.w, r28.xyzx, t9.xxxx, s13, r16.w
                        mad r22.x, r22.w, l(0.125000), r22.x
                        iadd r22.y, r22.y, l(1)
                      endloop 
                    else 
                      utof r26.z, r18.w
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r26.xyzx, t9.xxxx, s13, r16.w
                    endif 
                    mul r13.z, r22.x, r22.x
                    mul r13.z, r22.x, r13.z
                  else 
                    mov r13.z, l(1.000000)
                  endif 
                  mul r8.w, r8.w, r13.z
                endif 
              endif 
              mad r13.z, -r14.w, r0.z, l(1.000000)
              mul r13.z, r13.z, r13.z
              mad r13.z, -r13.z, l(0.620000), l(0.620000)
              add r13.z, -r14.w, r13.z
              mad r13.z, r1.w, r13.z, r14.w
              mul r13.z, r8.w, r13.z
              mov r26.x, cb9[r7.w + 0].w
              mov r26.yz, cb9[r7.w + 1].xxyx
              lt r7.w, l(0.000000), r13.w
              mad r28.xyz, r13.zzzz, r26.xyzx, r33.xyzx
              dp3_sat r13.w, r11.xyzx, r25.xyzx
              mad r23.xyz, r23.xyzx, r12.wwww, r12.xyzx
              dp3 r12.w, r23.xyzx, r23.xyzx
              rsq r12.w, r12.w
              mul r23.xyz, r12.wwww, r23.xyzx
              dp3 r12.w, r23.xyzx, r12.xyzx
              dp3 r14.w, r11.xyzx, r23.xyzx
              mad r16.w, |r14.w|, r1.z, -|r14.w|
              mad r14.w, |r14.w|, r16.w, l(1.000000)
              mad r16.w, r13.w, r2.y, r2.z
              mul r14.w, r14.w, r14.w
              mul r14.w, r16.w, r14.w
              rcp r14.w, r14.w
              mul r11.w, r11.w, r13.w
              mul r11.w, r11.w, r14.w
              mul r8.w, r8.w, r11.w
              mad r23.xyz, r8.wwww, r26.xyzx, r36.xyzx
              add_sat r11.w, -r12.w, l(1.000000)
              mul r12.w, r11.w, r11.w
              mul r12.w, r12.w, r12.w
              mul r11.w, r11.w, r12.w
              mul r8.w, r8.w, r11.w
              mad r25.xyz, r8.wwww, r26.xyzx, r35.xyzx
              mad r26.xyz, r13.zzzz, r26.xyzx, r34.xyzx
              movc r26.xyz, r0.wwww, r26.xyzx, r34.xyzx
              movc r33.xyz, r7.wwww, r28.xyzx, r33.xyzx
              movc r34.xyz, r7.wwww, r34.xyzx, r26.xyzx
              movc r35.xyz, r7.wwww, r25.xyzx, r35.xyzx
              movc r36.xyz, r7.wwww, r23.xyzx, r36.xyzx
            endif 
          endif 
        endif 
      endif 
    endif 
  endloop 
  mov r9.xyw, r33.xyxz
  mov r31.xyz, r34.xyzx
  mov r32.xyz, r35.xyzx
  mov r15.yzw, r36.xxyz
  iadd r2.w, r2.w, l(32)
endloop 
mad r2.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.x, r2.y
mad r4.xyz, r5.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.y, r4.x
ieq r0.y, r0.x, r0.y
movc r0.yz, r0.yyyy, r4.yyzy, l(0,-1.000000,0,0)
mad r4.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r4.x
ieq r1.z, r0.x, r1.z
movc r1.zw, r1.zzzz, r4.yyyz, l(0,0,-1.000000,0)
mad r4.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r3.x, r4.x
ieq r3.x, r0.x, r3.x
movc r4.xy, r3.xxxx, r4.yzyy, l(-1.000000,0,0,0)
mad r5.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r3.x, r5.x
ieq r0.x, r0.x, r3.x
movc r4.zw, r0.xxxx, r5.yyyz, l(0,0,-1.000000,0)
mov r5.x, r0.y
mov r5.y, r1.z
mov r5.zw, r4.xxxz
add r5.xyzw, -r2.xxxx, r5.xyzw
ge r5.xyzw, |r5.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r5.xyzw, r5.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.x, r5.y, r5.x
add r0.x, r5.z, r0.x
add r0.x, r5.w, r0.x
mul r0.y, r1.w, r5.y
mad r0.y, r5.x, r0.z, r0.y
mad r0.y, r5.z, r4.y, r0.y
mad r0.y, r5.w, r4.w, r0.y
div r2.w, r0.y, r0.x
ge r0.x, l(0.000000), r0.x
movc r2.yz, r0.xxxx, l(0,0,0,0), r2.zzwz
and r0.xy, r1.xyxx, l(1, 1, 0, 0)
ieq r0.x, r0.y, r0.x
movc r0.xyz, r0.xxxx, r2.xyzx, r2.xzyx
mad r0.x, -r0.z, l(0.500000), r0.x
add r2.y, r0.x, r0.z
mad r2.z, -r0.y, l(0.500000), r0.x
add r2.x, r0.y, r2.z
mul r0.xyz, r3.yzwy, r9.xywx
mad r0.xyz, r31.xyzx, r2.xyzx, r0.xyzx
mul r4.xyz, r32.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r4.xyz, r15.yzwy, l(0.040000, 0.040000, 0.040000, 0.000000), r4.xyzx
add r0.xyz, r0.xyzx, r4.xyzx
add r4.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, r32.xyzx
mad r2.xyz, r15.yzwy, r2.xyzx, r4.xyzx
mad r2.xyz, r9.xywx, r3.yzwy, r2.xyzx
movc r0.xyz, r0.wwww, r0.xyzx, r2.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r10.xyzx, r10.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r10.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r10.z|
    mul r3.xy, r10.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r10.z|
    mul r2.w, r10.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r10.z, cb2[6].x
  mad r1.z, cb2[6].x, r10.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r10.xyzx, r10.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r10.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 1414 instruction slots used
