//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:39:46 2021
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float3 specColorTint;              // Offset:  160 Size:    12 [unused]
//   float baseNormalHeight;            // Offset:  172 Size:     4 [unused]
//   float2 glossRange;                 // Offset:  176 Size:     8 [unused]
//   float2 normalMapScale;             // Offset:  184 Size:     8
//   float4 flowParams;                 // Offset:  192 Size:    16
//   float4 noiseParams;                // Offset:  208 Size:    16
//   bool useOrientedNormalMap;         // Offset:  224 Size:     4
//   float4 specularLobeRoughnessControl;// Offset:  240 Size:    16
//   float4 lobeWeightingThicknessRefraction;// Offset:  256 Size:    16
//   float3 normalAdjustAndGloss;       // Offset:  272 Size:    12
//   float4 decalTint;                  // Offset:  288 Size:    16 [unused]
//   float2 opacityScale;               // Offset:  304 Size:     8
//   float invZFeatherDepth;            // Offset:  312 Size:     4 [unused]
//   float2 normalsFlowScaleMin;        // Offset:  320 Size:     8
//   float4 ssrParams;                  // Offset:  336 Size:    16
//   float translucentShadowOpacity;    // Offset:  352 Size:     4 [unused]
//   float3 foamColor;                  // Offset:  356 Size:    12
//   float4 foamMaskScroll01;           // Offset:  368 Size:    16 [unused]
//   float4 foamMaskScroll23;           // Offset:  384 Size:    16 [unused]
//   float4 foamMaskScale01;            // Offset:  400 Size:    16 [unused]
//   float4 foamMaskScale23;            // Offset:  416 Size:    16 [unused]
//   float foamScale;                   // Offset:  432 Size:     4 [unused]
//   float2 foamSpacing;                // Offset:  436 Size:     8
//   float foamColorScale;              // Offset:  444 Size:     4
//   float foamZFeather;                // Offset:  448 Size:     4
//   bool useFoam;                      // Offset:  452 Size:     4
//   bool useSSR;                       // Offset:  456 Size:     4
//   bool useLoopedSSR;                 // Offset:  460 Size:     4
//   bool useSpecularZFeather;          // Offset:  464 Size:     4 [unused]
//   bool scaleNormalsWithFlow;         // Offset:  468 Size:     4
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for gCullConstants
// {
//
//   struct CoreCullConstantsPack
//   {
//       
//       uint4 data[5];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    80
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for forwardDecalConstants
// {
//
//   struct CoreDecalConstantsPack
//   {
//       
//       uint4 data[8];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// colorSampler                      sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// normalSampler                     sampler      NA          NA             s3      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// flowSampler                       sampler      NA          NA             s5      1 
// noiseSampler                      sampler      NA          NA             s6      1 
// foamSampler                       sampler      NA          NA             s7      1 
// bilinearClamp                     sampler      NA          NA             s8      1 
// pointClamp                        sampler      NA          NA             s9      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// colorMap                          texture  float4          2d             t0      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gCullConstants                    texture  struct         r/o            t11      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// normalMap                         texture  float4          2d            t21      1 
// flowMap                           texture  float4          2d            t22      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// noiseMap                          texture  float4          2d            t24      1 
// foamBase                          texture  float4          2d            t25      1 
// ifloatZSceneDownsampled           texture  float4          2d            t26      1 
// ifloatZScene                      texture  float4          2d            t29      1 
// iResolveScene                     texture  float4          2d            t30      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// visibleDecals                     texture    uint     2darray            t35      1 
// forwardDecalConstants             texture  struct         r/o            t36      1 
// rColorRamp                        texture  float4          2d            t37      1 
// materialTexBC7                    texture  float4     2darray            t42      1 
// materialTexBC3                    texture  float4     2darray            t43      1 
// materialTexMask                   texture  float4     2darray            t45      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyz         1     NONE   float       
// COLOR                    1      w        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 4   x           3     NONE    uint       
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
// TEXCOORD                 2   xyz         5     NONE   float   xyz 
// TEXCOORD                 3   xyz         6     NONE   float   xyz 
// OFFPOSITION              0   xyz         7     NONE   float   xyz 
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// SV_IsFrontFace           0   x          10    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB0[30], immediateIndexed
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_structured t11, 80
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t23, 4
dcl_resource_texture2d (float,float,float,float) t24
dcl_resource_texture2d (float,float,float,float) t25
dcl_resource_texture2d (float,float,float,float) t26
dcl_resource_texture2d (float,float,float,float) t29
dcl_resource_texture2d (float,float,float,float) t30
dcl_resource_texture2darray (float,float,float,float) t31
dcl_resource_texture2darray (uint,uint,uint,uint) t35
dcl_resource_structured t36, 128
dcl_resource_texture2d (float,float,float,float) t37
dcl_resource_texture2darray (float,float,float,float) t42
dcl_resource_texture2darray (float,float,float,float) t43
dcl_resource_texture2darray (float,float,float,float) t45
dcl_input_ps_siv linear noperspective v0.xyzw, position
dcl_input_ps linear v2.xy
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyzw
dcl_input_ps_sgv constant v10.x, is_front_face
dcl_output o0.xyzw
dcl_temps 20
ge r0.x, v0.z, l(0.984375)
mul r0.y, v0.z, l(1.01587307)
mad r0.z, v0.z, l(64.000000), l(-63.000000)
movc r0.x, r0.x, r0.z, r0.y
max r0.x, r0.x, l(0.00000001)
rcp r0.x, r0.x
ftou r0.yz, v0.xxyx
deriv_rtx_coarse r1.xyz, v7.xyzx
deriv_rty_coarse r2.xyz, v7.xyzx
iadd r0.w, cb2[0].y, cb2[0].x
add r3.xyz, v7.xyzx, cb1[24].xyzx
mul r1.w, r0.x, l(0.00781250)
min r1.w, r1.w, l(15.000000)
ftou r1.w, r1.w
ushr r4.xy, r0.yzyy, l(6, 6, 0, 0)
ishl r4.z, r1.w, l(4)
and r1.w, cb2[57].z, l(-32)
iadd r2.w, -r1.w, cb2[57].z
mov r5.xy, l(0,0,0,0)
mov r6.w, l(0)
mov r3.w, l(1.000000)
mov r7.xyzw, l(0,0,0,0)
mov r8.xyz, l(0,0,0,0)
mov r4.w, l(0)
loop 
  uge r5.w, r4.w, cb2[57].z
  breakc_nz r5.w
  ushr r5.z, r4.w, l(5)
  iadd r6.xyz, r4.xyzx, r5.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r5.z, r6.xyzw, t35.yzxw
  ieq r5.w, r1.w, r4.w
  ubfe r6.x, r2.w, l(0), r5.z
  movc r5.z, r5.w, r6.x, r5.z
  iadd r5.w, r0.w, r4.w
  mov r9.xyzw, r7.yzwx
  mov r6.xyz, r8.xyzx
  mov r8.w, r5.z
  loop 
    breakc_z r8.w
    firstbit_lo r10.x, r8.w
    ishl r10.y, l(1), r10.x
    and r10.z, r8.w, r10.y
    if_nz r10.z
      xor r8.w, r8.w, r10.y
      iadd r10.y, r5.w, r10.x
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r11.xyzw, r10.y, l(0), t11.xyzw
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r12.xy, r10.y, l(16), t11.xyxx
      add r10.yzw, r11.xxyz, -v7.xxyz
      mov r12.z, r11.w
      lt r10.yzw, |r10.yyzw|, r12.zzxy
      and r10.y, r10.z, r10.y
      and r10.y, r10.w, r10.y
      if_nz r10.y
        iadd r10.x, r4.w, r10.x
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r10.yzw, r10.x, l(0), t36.xxyz
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r11.xyz, r10.x, l(16), t36.xyzx
        ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r12.xyz, r10.x, l(32), t36.xyzx
        mov r13.x, r10.y
        mov r13.y, r11.x
        mov r13.z, r12.x
        dp3 r10.y, r13.xyzx, r13.xyzx
        rsq r10.y, r10.y
        mul r14.xyz, r10.yyyy, r13.xyzx
        dp3 r10.y, r14.xyzx, v4.xyzx
        ge r10.y, r10.y, l(0.500000)
        if_nz r10.y
          ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r14.xyw, r10.x, l(48), t36.xyxz
          mov r13.w, r14.x
          dp4 r13.x, r3.xyzw, r13.xyzw
          mov r15.x, r10.z
          mov r15.y, r11.y
          mov r15.z, r12.y
          mov r15.w, r14.y
          dp4 r13.y, r3.xyzw, r15.xyzw
          mov r14.x, r10.w
          mov r14.y, r11.z
          mov r14.z, r12.z
          dp4 r13.z, r3.xyzw, r14.xyzw
          lt r10.yzw, |r13.xxyz|, l(0.000000, 1.000000, 1.000000, 1.000000)
          and r10.y, r10.z, r10.y
          and r10.y, r10.w, r10.y
          if_nz r10.y
            ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r11.xyzw, r10.x, l(64), t36.xyzw
            ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r12.xyzw, r10.x, l(80), t36.xyzw
            ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r10.y, r10.x, l(108), t36.xxxx
            dp3 r16.x, r1.xyzx, r15.xyzx
            dp3 r16.y, r1.xyzx, r14.xyzx
            dp3 r15.x, r2.xyzx, r15.xyzx
            dp3 r15.y, r2.xyzx, r14.xyzx
            mad r10.zw, r13.yyyz, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
            mul r13.xyz, r16.xyxx, l(0.500000, -0.500000, 0.500000, 0.000000)
            mul r14.xyz, r15.xyxx, l(0.500000, -0.500000, 0.500000, 0.000000)
            and r12.yz, r12.yyzy, l(0, 0x0000ffff, 0x0000ffff, 0)
            if_nz r12.y
              ubfe r13.w, l(4), l(24), r12.w
              ishl r13.w, l(1), r13.w
              ushr r14.w, r12.w, l(28)
              ishl r14.w, l(1), r14.w
              ieq r15.x, r12.y, l(4)
              if_nz r15.x
                and r15.x, r12.w, l(4095)
                ubfe r15.y, l(12), l(12), r12.w
                and r15.z, r10.y, l(1023)
                utof r16.xz, r13.wwww
                utof r16.y, r14.w
                mad r17.xy, r10.zwzz, r16.zyzz, l(0.500000, 0.500000, 0.000000, 0.000000)
                add r17.zw, r16.zzzy, l(0.000000, 0.000000, -0.500000, -0.500000)
                min r17.xy, r17.zwzz, r17.xyxx
                utof r18.xy, r15.xyxx
                add r15.xy, r17.xyxx, r18.xyxx
                mul r17.xy, r15.xyxx, cb1[83].xyxx
                utof r17.z, r15.z
                mul r15.xyz, r13.zyzz, cb1[83].xyxx
                mul r15.xyz, r16.xyzx, r15.xyzx
                mul r18.xyz, r14.zyzz, cb1[83].xyxx
                mul r16.xyz, r16.xyzx, r18.xyzx
                sample_d_indexable(texture2darray)(float,float,float,float) r15.xyzw, r17.xyzx, t42.xyzw, s4, r15.xyzx, r16.xyzx
              else 
                ieq r12.y, r12.y, l(1)
                if_nz r12.y
                  and r12.y, r12.w, l(4095)
                  ubfe r12.w, l(12), l(12), r12.w
                  and r16.x, r10.y, l(1023)
                  utof r17.xz, r13.wwww
                  utof r17.y, r14.w
                  mad r16.yz, r10.zzwz, r17.zzyz, l(0.000000, 0.500000, 0.500000, 0.000000)
                  add r18.xy, r17.zyzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
                  min r16.yz, r16.yyzy, r18.xxyx
                  utof r18.xy, r12.ywyy
                  add r12.yw, r16.yyyz, r18.xxxy
                  mul r18.xy, r12.ywyy, cb1[83].zwzz
                  utof r18.z, r16.x
                  mul r16.xyz, r13.zyzz, cb1[83].zwzz
                  mul r16.xyz, r17.xyzx, r16.xyzx
                  mul r19.xyz, r14.zyzz, cb1[83].zwzz
                  mul r17.xyz, r17.xyzx, r19.xyzx
                  sample_d_indexable(texture2darray)(float,float,float,float) r15.xyzw, r18.xyzx, t43.xyzw, s4, r16.xyzx, r17.xyzx
                else 
                  mov r15.xyzw, l(1.000000,1.000000,1.000000,1.000000)
                endif 
              endif 
              mul r11.xyz, r11.xyzx, r15.xyzx
              mul r12.y, r11.w, r15.w
            else 
              mov r11.xyz, l(0,0,0,0)
              mov r12.y, l(0)
            endif 
            ne r12.w, r12.x, l(1.000000)
            add r11.w, r11.w, r12.y
            mad_sat r11.w, r11.w, r12.x, -r12.x
            movc r11.w, r12.w, r11.w, r12.y
            if_nz r12.z
              ld_structured_indexable(structured_buffer, stride=128)(mixed,mixed,mixed,mixed) r10.x, r10.x, l(100), t36.xxxx
              ubfe r12.x, l(4), l(24), r10.x
              ushr r12.y, r10.x, l(28)
              ishl r12.xy, l(1, 1, 0, 0), r12.xyxx
              ieq r12.w, r12.z, l(2)
              if_nz r12.w
                and r12.w, r10.x, l(4095)
                ubfe r13.w, l(12), l(12), r10.x
                ubfe r14.w, l(10), l(20), r10.y
                utof r15.xyz, r12.xyxx
                mad r16.xy, r10.zwzz, r15.zyzz, l(0.500000, 0.500000, 0.000000, 0.000000)
                add r16.zw, r15.zzzy, l(0.000000, 0.000000, -0.500000, -0.500000)
                min r16.xy, r16.zwzz, r16.xyxx
                utof r17.x, r12.w
                utof r17.y, r13.w
                add r16.xy, r16.xyxx, r17.xyxx
                mul r16.xy, r16.xyxx, cb1[84].xyxx
                utof r16.z, r14.w
                mul r17.xyz, r13.zyzz, cb1[84].xyxx
                mul r17.xyz, r15.xyzx, r17.xyzx
                mul r18.xyz, r14.zyzz, cb1[84].xyxx
                mul r15.xyz, r15.xyzx, r18.xyzx
                sample_d_indexable(texture2darray)(float,float,float,float) r12.w, r16.xyzx, t45.yzwx, s4, r17.xyzx, r15.xyzx
              else 
                ieq r12.z, r12.z, l(4)
                if_nz r12.z
                  and r12.z, r10.x, l(4095)
                  ubfe r13.w, l(12), l(12), r10.x
                  ubfe r14.w, l(10), l(20), r10.y
                  utof r15.xyz, r12.xyxx
                  mad r16.xy, r10.zwzz, r15.zyzz, l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r16.zw, r15.zzzy, l(0.000000, 0.000000, -0.500000, -0.500000)
                  min r16.xy, r16.zwzz, r16.xyxx
                  utof r17.x, r12.z
                  utof r17.y, r13.w
                  add r16.xy, r16.xyxx, r17.xyxx
                  mul r16.xy, r16.xyxx, cb1[83].xyxx
                  utof r16.z, r14.w
                  mul r17.xyz, r13.zyzz, cb1[83].xyxx
                  mul r17.xyz, r15.xyzx, r17.xyzx
                  mul r18.xyz, r14.zyzz, cb1[83].xyxx
                  mul r15.xyz, r15.xyzx, r18.xyzx
                  sample_d_indexable(texture2darray)(float,float,float,float) r12.w, r16.xyzx, t42.yzwx, s4, r17.xyzx, r15.xyzx
                else 
                  and r12.z, r10.x, l(4095)
                  ubfe r10.x, l(12), l(12), r10.x
                  ubfe r10.y, l(10), l(20), r10.y
                  utof r15.xyz, r12.xyxx
                  mad r10.zw, r10.zzzw, r15.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
                  add r12.xy, r15.zyzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
                  min r10.zw, r10.zzzw, r12.xxxy
                  utof r12.x, r12.z
                  utof r12.yz, r10.xxyx
                  add r10.xz, r10.zzwz, r12.xxyx
                  mul r12.xy, r10.xzxx, cb1[83].zwzz
                  mul r10.xyz, r13.xyzx, cb1[83].zwzz
                  mul r10.xyz, r15.xyzx, r10.xyzx
                  mul r13.xyz, r14.xyzx, cb1[83].zwzz
                  mul r13.xyz, r15.xyzx, r13.xyzx
                  sample_d_indexable(texture2darray)(float,float,float,float) r12.w, r12.xyzx, t43.yzwx, s4, r10.xyzx, r13.xyzx
                endif 
              endif 
              mad r10.xyz, r12.wwww, l(0.960000, 0.960000, 0.960000, 0.000000), l(0.040000, 0.040000, 0.040000, 0.000000)
              add_sat r10.w, -r12.w, l(1.000000)
              mul r11.xyz, r10.wwww, r11.xyzx
            else 
              mov r10.xyz, l(0.040000,0.040000,0.040000,0)
            endif 
            add r10.w, -r11.w, l(1.000000)
            mul r12.xyz, r6.xyzx, r10.wwww
            mad r6.xyz, r11.xyzx, r11.wwww, r12.xyzx
            mul r11.xyz, r9.xyzx, r10.wwww
            mad r9.xyz, r10.xyzx, r11.wwww, r11.xyzx
            mad r9.w, r9.w, r10.w, r11.w
          endif 
        endif 
      endif 
    endif 
  endloop 
  mov r7.xyzw, r9.wxyz
  mov r8.xyz, r6.xyzx
  iadd r4.w, r4.w, l(32)
endloop 
mov_sat r7.x, r7.x
add r0.w, -r7.x, l(1.000000)
mul r1.xy, v2.xyxx, cb0[11].zwzz
mul r1.zw, cb0[13].xxxy, cb1[69].wwww
mad r1.zw, v2.xxxy, cb0[13].zzzz, r1.zzzw
sample_indexable(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t24.zwxy, s6
mul r1.zw, r1.zzzw, cb0[13].wwww
mad r1.zw, v2.xxxy, cb0[12].xxxx, r1.zzzw
frc r2.xy, r1.zwzz
mad r2.zw, r2.xxxy, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
mul r2.xy, r2.xyxx, r2.xyxx
mul r4.xy, r2.xyxx, r2.zwzz
resinfo_indexable(texture2d)(float,float,float,float) r4.zw, l(0), t21.zwxy
mul r4.zw, r1.xxxy, r4.zzzw
deriv_rtx_coarse r5.xy, r4.zwzz
deriv_rty_coarse r4.zw, r4.zzzw
dp2 r5.x, r5.xyxx, r5.xyxx
dp2 r4.z, r4.zwzz, r4.zwzz
max r4.z, r4.z, r5.x
log r4.z, r4.z
mul r4.z, r4.z, l(0.500000)
round_ni r5.xy, r1.zwzz
div r5.xy, r5.xyxx, cb0[12].xxxx
sample_indexable(texture2d)(float,float,float,float) r5.xy, r5.xyxx, t22.xyzw, s5
add r5.xy, r5.xyxx, r5.xyxx
add r6.xyzw, r1.zwzw, l(1.000000, 0.000000, 0.000000, 1.000000)
round_ni r6.xyzw, r6.xyzw
div r6.xyzw, r6.xyzw, cb0[12].xxxx
sample_indexable(texture2d)(float,float,float,float) r5.zw, r6.xyxx, t22.zwxy, s5
add r5.zw, r5.zzzw, r5.zzzw
sample_indexable(texture2d)(float,float,float,float) r6.xy, r6.zwzz, t22.xyzw, s5
add r6.xy, r6.xyxx, r6.xyxx
add r1.zw, r1.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
round_ni r1.zw, r1.zzzw
div r1.zw, r1.zzzw, cb0[12].xxxx
sample_indexable(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t22.zwxy, s5
add r1.zw, r1.zzzw, r1.zzzw
if_nz cb0[29].y
  sample_indexable(texture2d)(float,float,float,float) r6.zw, v2.xyxx, t22.zwxy, s5
  add r9.xy, r6.zwzz, r6.zwzz
  mad r9.zw, r9.xxxy, l(0.000000, 0.000000, -1.000000, 1.000000), l(0.000000, 0.000000, 1.000000, -1.000000)
  mad r6.zw, r9.xxxw, l(0.000000, 0.000000, -1.000000, 1.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
  dp2 r4.w, r9.zwzz, r6.zwzz
  sqrt r4.w, r4.w
  mad r4.w, r4.w, cb0[20].y, cb0[20].x
  mul r6.zw, r4.wwww, cb0[17].xxxy
else 
  mov r6.zw, cb0[17].xxxy
endif 
mad r2.xy, -r2.zwzz, r2.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, r2.xyxx
mad r2.xy, r4.xyxx, r4.xyxx, r2.xyxx
rsq r2.xy, r2.xyxx
if_z cb0[14].x
  mul r2.z, cb0[12].y, cb1[69].w
  mad r9.xy, r5.xyxx, l(-1.000000, 1.000000, 0.000000, 0.000000), l(1.000000, -1.000000, 0.000000, 0.000000)
  mad r9.xy, r9.xyxx, r2.zzzz, r1.xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r9.xy, r9.xyxx, t21.xyzw, s3, r4.z
  mad r9.zw, r5.zzzw, l(0.000000, 0.000000, -1.000000, 1.000000), l(0.000000, 0.000000, 1.000000, -1.000000)
  mad r9.zw, r9.zzzw, r2.zzzz, r1.xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r9.zw, r9.zwzz, t21.zwxy, s3, r4.z
  add r9.zw, -r9.xxxy, r9.zzzw
  mad r9.xy, r4.xxxx, r9.zwzz, r9.xyxx
  mad r9.zw, r6.xxxy, l(0.000000, 0.000000, -1.000000, 1.000000), l(0.000000, 0.000000, 1.000000, -1.000000)
  mad r9.zw, r9.zzzw, r2.zzzz, r1.xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r9.zw, r9.zwzz, t21.zwxy, s3, r4.z
  mad r10.xy, r1.zwzz, l(-1.000000, 1.000000, 0.000000, 0.000000), l(1.000000, -1.000000, 0.000000, 0.000000)
  mad r1.xy, r10.xyxx, r2.zzzz, r1.xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r1.xy, r1.xyxx, t21.xyzw, s3, r4.z
  add r1.xy, -r9.zwzz, r1.xyxx
  mad r1.xy, r4.xxxx, r1.xyxx, r9.zwzz
  add r1.xy, -r9.xyxx, r1.xyxx
  mad r1.xy, r4.yyyy, r1.xyxx, r9.xyxx
  mad r1.xy, r1.xyxx, r6.zzzz, r6.wwww
else 
  mad r2.zw, r5.xxxy, l(0.000000, 0.000000, -1.000000, 1.000000), l(0.000000, 0.000000, 1.000000, -1.000000)
  dp2 r4.w, r2.zwzz, r2.zwzz
  sqrt r4.w, r4.w
  max r4.w, r4.w, l(0.000010)
  div r9.xy, r2.zwzz, r4.wwww
  mov r9.z, -r9.x
  dp2 r5.x, v2.xyxx, r9.yzyy
  dp2 r5.y, v2.xyxx, -r9.xyxx
  mul r10.xy, r5.xyxx, cb0[11].zwzz
  mul r2.z, r4.w, cb1[69].w
  mad r10.z, -r2.z, cb0[12].y, r10.y
  sample_l_indexable(texture2d)(float,float,float,float) r2.zw, r10.xzxx, t21.zwxy, s3, r4.z
  mad r2.zw, r2.zzzw, r6.zzzz, r6.wwww
  dp2 r5.x, r2.zwzz, r9.yzyy
  dp2 r5.y, r2.zwzz, -r9.xyxx
  mad r2.zw, r5.zzzw, l(0.000000, 0.000000, -1.000000, 1.000000), l(0.000000, 0.000000, 1.000000, -1.000000)
  dp2 r4.w, r2.zwzz, r2.zwzz
  sqrt r4.w, r4.w
  max r4.w, r4.w, l(0.000010)
  div r9.xy, r2.zwzz, r4.wwww
  mov r9.z, -r9.x
  dp2 r10.x, v2.xyxx, r9.yzyy
  dp2 r10.y, v2.xyxx, -r9.xyxx
  mul r10.xy, r10.xyxx, cb0[11].zwzz
  mul r2.z, r4.w, cb1[69].w
  mad r10.z, -r2.z, cb0[12].y, r10.y
  sample_l_indexable(texture2d)(float,float,float,float) r2.zw, r10.xzxx, t21.zwxy, s3, r4.z
  mad r2.zw, r2.zzzw, r6.zzzz, r6.wwww
  dp2 r10.x, r2.zwzz, r9.yzyy
  dp2 r10.y, r2.zwzz, -r9.xyxx
  add r2.zw, -r5.xxxy, r10.xxxy
  mad r2.zw, r4.xxxx, r2.zzzw, r5.xxxy
  mad r5.xy, r6.xyxx, l(-1.000000, 1.000000, 0.000000, 0.000000), l(1.000000, -1.000000, 0.000000, 0.000000)
  dp2 r4.w, r5.xyxx, r5.xyxx
  sqrt r4.w, r4.w
  max r4.w, r4.w, l(0.000010)
  div r5.xy, r5.xyxx, r4.wwww
  mov r5.z, -r5.x
  dp2 r6.x, v2.xyxx, r5.yzyy
  dp2 r6.y, v2.xyxx, -r5.xyxx
  mul r9.xy, r6.xyxx, cb0[11].zwzz
  mul r4.w, r4.w, cb1[69].w
  mad r9.z, -r4.w, cb0[12].y, r9.y
  sample_l_indexable(texture2d)(float,float,float,float) r6.xy, r9.xzxx, t21.xyzw, s3, r4.z
  mad r6.xy, r6.xyxx, r6.zzzz, r6.wwww
  dp2 r9.x, r6.xyxx, r5.yzyy
  dp2 r9.y, r6.xyxx, -r5.xyxx
  mad r1.zw, r1.zzzw, l(0.000000, 0.000000, -1.000000, 1.000000), l(0.000000, 0.000000, 1.000000, -1.000000)
  dp2 r4.w, r1.zwzz, r1.zwzz
  sqrt r4.w, r4.w
  max r4.w, r4.w, l(0.000010)
  div r5.xy, r1.zwzz, r4.wwww
  mov r5.z, -r5.x
  dp2 r6.x, v2.xyxx, r5.yzyy
  dp2 r6.y, v2.xyxx, -r5.xyxx
  mul r10.xy, r6.xyxx, cb0[11].zwzz
  mul r1.z, r4.w, cb1[69].w
  mad r10.z, -r1.z, cb0[12].y, r10.y
  sample_l_indexable(texture2d)(float,float,float,float) r1.zw, r10.xzxx, t21.zwxy, s3, r4.z
  mad r1.zw, r1.zzzw, r6.zzzz, r6.wwww
  dp2 r6.x, r1.zwzz, r5.yzyy
  dp2 r6.y, r1.zwzz, -r5.xyxx
  add r1.zw, -r9.xxxy, r6.xxxy
  mad r1.zw, r4.xxxx, r1.zzzw, r9.xxxy
  add r1.zw, -r2.zzzw, r1.zzzw
  mad r1.xy, r4.yyyy, r1.zwzz, r2.zwzz
endif 
mul r1.z, r2.y, r2.x
mul r1.xy, r1.zzzz, r1.xyxx
mul r1.yzw, r1.yyyy, v6.xxyz
mad r1.xyz, v5.xyzx, r1.xxxx, r1.yzwy
add r1.xyz, r1.xyzx, v4.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
movc r1.xyz, v10.xxxx, r1.xyzx, -r1.xyzx
dp3 r2.x, v7.xyzx, v7.xyzx
rsq r2.y, r2.x
mul r2.yzw, r2.yyyy, v7.xxyz
dp3_sat r4.x, r1.xyzx, -r2.yzwy
if_nz v10.x
  ftoi r5.xy, v0.xyxx
  mov r5.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r5.x, r5.xyzw, t29.xyzw
  ge r5.y, r5.x, l(0.984375)
  mul r5.z, r5.x, l(1.01587307)
  mad r5.x, r5.x, l(64.000000), l(-63.000000)
  movc r5.x, r5.y, r5.x, r5.z
  max r5.x, r5.x, l(0.00000001)
  rcp r5.x, r5.x
  add r5.x, r5.x, -v0.w
  max r5.x, r5.x, l(0.000000)
  min r5.x, r5.x, cb0[21].x
  mov r5.y, cb0[19].y
else 
  sqrt r5.x, r2.x
  mov r5.y, cb0[19].x
endif 
if_nz cb0[28].y
  sample_indexable(texture2d)(float,float,float,float) r5.z, v8.xyxx, t25.yzxw, s7
  sample_indexable(texture2d)(float,float,float,float) r5.w, v8.zwzz, t25.yzwx, s7
  sample_indexable(texture2d)(float,float,float,float) r6.x, v9.xyxx, t25.xyzw, s7
  sample_indexable(texture2d)(float,float,float,float) r6.y, v9.zwzz, t25.yxzw, s7
  add r5.z, r5.w, r5.z
  add r5.z, r6.x, r5.z
  add r5.z, r6.y, r5.z
  mul r5.z, r5.z, cb0[27].w
  sample_indexable(texture2d)(float,float,float,float) r5.w, v2.xyxx, t22.xywz, s5
  mad r5.w, cb0[27].z, r5.w, cb0[27].y
  max r5.z, r5.z, l(0.000000)
  log r5.z, r5.z
  mul r5.z, r5.z, r5.w
  exp r5.z, r5.z
  mul r5.w, r5.x, cb0[28].x
  min r5.w, r5.w, l(1.000000)
  mul r6.x, r5.w, r5.z
  mad r5.z, -r5.z, r5.w, l(1.000000)
  mul r5.z, r5.z, cb0[17].z
else 
  mov r6.x, l(0)
  mov r5.z, cb0[17].z
endif 
dp3 r5.w, -v7.xyzx, -v7.xyzx
rsq r5.w, r5.w
mul r6.yzw, r5.wwww, -v7.xxyz
utof r0.yz, r0.yyzy
dp2 r0.y, r0.yzyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.y, r0.y
mul r0.y, r0.y, l(52.982918)
frc r0.y, r0.y
mad r0.y, r0.y, l(6.28318548), cb1[70].w
sincos r9.x, r10.x, r0.y
dp3 r0.y, -r6.yzwy, r1.xyzx
add r0.y, r0.y, r0.y
mad r11.xyz, r1.xyzx, -r0.yyyy, -r6.yzwy
add r0.y, -r5.z, l(1.000000)
mul r0.y, r0.y, l(5.000000)
add r9.yzw, v7.xxyz, -cb2[35].xxyz
mul r12.x, r9.y, cb2[35].w
mul r12.yz, r9.zzwz, cb2[36].xxyx
add_sat r9.yzw, r12.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
mul r12.xy, r9.yzyy, cb2[36].zwzz
mul r12.z, r9.w, cb2[37].x
add r9.yzw, r12.xxyz, cb2[37].yyzw
lt r10.yzw, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xxyz
movc r12.xyz, r10.yzwy, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
mov r12.w, l(0)
add r10.yzw, r9.yyzw, r12.wwwx
sample_l_indexable(texture3d)(float,float,float,float) r10.yzw, r10.yzwy, t17.wxyz, s4, l(0.000000)
mul r13.xyz, r1.xyzx, r1.xyzx
mul r13.xyz, r13.xyzx, cb2[19].xxxx
add r14.xyz, r9.yzwy, r12.wwyw
sample_l_indexable(texture3d)(float,float,float,float) r14.xyz, r14.xyzx, t18.xyzw, s4, l(0.000000)
mul r14.xyz, r13.yyyy, r14.xyzx
mad r10.yzw, r10.yyzw, r13.xxxx, r14.xxyz
add r9.yzw, r9.yyzw, r12.wwwz
sample_l_indexable(texture3d)(float,float,float,float) r9.yzw, r9.yzwy, t19.wxyz, s4, l(0.000000)
mad r9.yzw, r9.yyzw, r13.zzzz, r10.yyzw
mov r1.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r10.yzw, r1.xyzw, t8.wxyz, s2, l(6.000000)
mul r9.yzw, r9.yyzw, r10.yyzw
dp3 r0.z, r9.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
mov r11.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r10.yzw, r11.xyzw, t8.wxyz, s2, r0.y
add r0.y, -r0.z, cb2[19].x
mad r0.y, r5.z, r0.y, r0.z
mul r10.yzw, r0.yyyy, r10.yyzw
if_nz cb0[28].z
  dp3 r0.y, r2.yzwy, r1.xyzx
  add r0.y, r0.y, r0.y
  mad r11.xyz, r1.xyzx, -r0.yyyy, r2.yzwy
  dp3 r0.y, r2.yzwy, -r1.xyzx
  add r0.y, r0.y, r0.y
  mad r12.xyz, r1.xyzx, r0.yyyy, r2.yzwy
  movc r11.xyz, v10.xxxx, r11.xyzx, r12.xyzx
  if_nz cb0[28].w
    mul r12.xyz, v7.yyyy, cb1[5].xyzx
    mad r12.xyz, v7.xxxx, cb1[4].xyzx, r12.xyzx
    mad r12.xyz, v7.zzzz, cb1[6].xyzx, r12.xyzx
    mul r13.xyz, r11.xyzx, cb0[21].zzzz
    mul r14.xyz, r13.yyyy, cb1[5].xyzx
    mad r13.xyw, r13.xxxx, cb1[4].xyxz, r14.xyxz
    mad r13.xyz, r13.zzzz, cb1[6].xyzx, r13.xywx
    min r0.y, cb0[21].x, l(1000.000000)
    mad r12.xyz, r13.xyzx, l(10.000000, 10.000000, 10.000000, 0.000000), r12.xyzx
    div r0.y, r0.y, cb0[21].z
    mov r14.xyz, r10.yzwy
    mov r15.xyz, r12.xyzx
    mov r0.z, l(0)
    loop 
      itof r1.w, r0.z
      ge r1.w, r1.w, r0.y
      breakc_nz r1.w
      add r15.xyz, r13.xyzx, r15.xyzx
      mul r16.xyz, r15.yyyy, cb1[1].xywx
      mad r16.xyz, r15.xxxx, cb1[0].xywx, r16.xyzx
      mad r16.xyz, r15.zzzz, cb1[2].xywx, r16.xyzx
      add r16.xyz, r16.xyzx, cb1[3].xywx
      max r1.w, |r16.y|, |r16.x|
      lt r1.w, r16.z, r1.w
      if_nz r1.w
        break 
      endif 
      div r16.xy, r16.xyxx, r16.zzzz
      mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      sample_l_indexable(texture2d)(float,float,float,float) r1.w, r16.xyxx, t26.yzwx, s8, l(1.000000)
      lt r5.z, |r1.w|, r15.z
      ge r8.w, |r1.w|, v0.w
      and r5.z, r5.z, r8.w
      if_nz r5.z
        add r1.w, -|r1.w|, r15.z
        mul r1.w, r1.w, cb0[21].w
        mad r16.xyz, -r1.wwww, r13.xyzx, r15.xyzx
        mul r17.xyz, r16.yyyy, cb1[1].xywx
        mad r16.xyw, r16.xxxx, cb1[0].xyxw, r17.xyxz
        mad r16.xyz, r16.zzzz, cb1[2].xywx, r16.xywx
        add r16.xyz, r16.xyzx, cb1[3].xywx
        div r16.xy, r16.xyxx, r16.zzzz
        mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        sample_l_indexable(texture2d)(float,float,float,float) r16.xyz, r16.xyxx, t30.xyzw, s8, l(0.000000)
        mul r16.xyz, r16.xyzx, cb1[85].xxxx
        mov r14.xyz, r16.xyzx
        break 
      endif 
      iadd r0.z, r0.z, l(1)
    endloop 
    mov r10.yzw, r14.xxyz
  else 
    mul r0.y, r5.x, cb0[21].y
    mad r11.xyz, r11.xyzx, r0.yyyy, v7.xyzx
    mul r12.xyz, r11.yyyy, cb1[9].xywx
    mad r11.xyw, r11.xxxx, cb1[8].xyxw, r12.xyxz
    mad r11.xyz, r11.zzzz, cb1[10].xywx, r11.xywx
    add r11.xyz, r11.xyzx, cb1[11].xywx
    div r0.yz, r11.xxyx, r11.zzzz
    max r1.w, |r0.z|, |r0.y|
    mad r0.yz, r0.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r5.z, r0.yzyy, t26.yzxw, s8, l(0.000000)
    ge r5.z, |r5.z|, v0.w
    lt r1.w, r1.w, l(1.000000)
    and r1.w, r1.w, r5.z
    sample_indexable(texture2d)(float,float,float,float) r11.xyz, r0.yzyy, t30.xyzw, s8
    if_nz r1.w
      mul r10.yzw, r11.xxyz, cb1[85].xxxx
    endif 
  endif 
endif 
dp3 r0.y, r1.xyzx, cb2[17].xyzx
mov_sat r0.z, r0.y
ge r1.w, l(0.000000), r0.z
if_nz r1.w
  mov r5.z, l(0)
endif 
if_z r1.w
  mul r11.xyz, v7.yyyy, cb2[29].xyzx
  mad r11.xyz, v7.xxxx, cb2[28].xyzx, r11.xyzx
  mad r11.xyz, v7.zzzz, cb2[30].xyzx, r11.xyzx
  add r11.xyz, r11.xyzx, cb2[31].xyzx
  add r1.w, r11.z, -cb2[17].w
  mad r1.w, -r1.w, l(0.00006104), l(1.000000)
  mov_sat r8.w, r1.w
  eq r8.w, r1.w, r8.w
  if_nz r8.w
    mov r8.w, l(0)
    mov r11.w, l(0)
    loop 
      ge r12.x, r8.w, l(3.000000)
      breakc_nz r12.x
      ftou r12.x, r8.w
      add r12.yz, r11.xxyx, -cb2[r12.x + 20].xxyx
      max r12.y, |r12.z|, |r12.y|
      mul r11.w, r12.y, cb2[r12.x + 20].z
      lt r12.x, r11.w, l(1.000000)
      if_nz r12.x
        break 
      endif 
      add r8.w, r8.w, l(1.000000)
      mov r11.w, l(0)
    endloop 
  else 
    mov r8.w, l(3.000000)
    mov r11.w, l(0)
  endif 
  ge r12.x, r8.w, l(3.000000)
  if_nz r12.x
    mul r12.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r13.xz, r12.yyyy
    mov r13.y, -r13.z
    mad r12.yzw, r11.xxyx, r13.xxyz, r12.zzwz
    add r13.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r12.yzw, r12.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r12.yzw, r13.xxyz, r12.yyzw
    mul r13.xy, r12.wzww, cb2[32].xxxx
    round_ni r13.xy, r13.xyxx
    mul r13.y, r13.y, cb2[27].x
    mad r13.x, r13.y, cb2[32].x, r13.x
    ftou r13.x, r13.x
    iadd r13.x, r13.x, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.y, r13.x, l(0), t23.xxxx
    and r13.z, r13.y, l(0x40000000)
    ishl r13.w, r13.y, l(2)
    if_z r13.z
      and r13.z, r13.y, l(0x01ffffff)
      iadd r14.x, r13.z, r13.x
      ushr r13.x, r13.y, l(25)
      utof r13.x, r13.x
      mul r12.yzw, r12.yyzw, r13.xxxx
      frc r12.yzw, r12.yyzw
      mul r12.yzw, r12.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r12.yzw, r12.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.z, r14.x, l(0), t23.xxxx
      ushr r13.xy, r12.wzww, l(6, 6, 0, 0)
      and r13.z, r14.z, l(0xc0000000)
      iadd r14.w, r14.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t23.xxxx
      movc r13.y, r13.y, r14.z, r14.w
      ushr r14.w, r13.y, l(13)
      movc r13.x, r13.x, r14.w, r13.y
      and r13.x, r13.x, l(8191)
      iadd r15.x, r13.x, r14.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.z, r15.x, l(0), t23.xxxx
      mov r14.y, l(0)
      mov r15.y, l(1)
      movc r15.xyz, r13.zzzz, r14.xyzx, r15.xyzx
      movc r16.yz, r13.zzzz, l(0,6,1,0), l(0,5,2,0)
      ushr r13.xy, r12.wzww, r16.yyyy
      and r13.xy, r13.xyxx, l(1, 1, 0, 0)
      and r14.w, r15.z, l(0xc0000000)
      iadd r15.w, r15.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.w, r15.w, l(0), t23.xxxx
      movc r13.y, r13.y, r15.z, r15.w
      ushr r15.w, r13.y, l(13)
      movc r13.x, r13.x, r15.w, r13.y
      and r13.x, r13.x, l(8191)
      iadd r16.x, r13.x, r15.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.w, r16.x, l(0), t23.xxxx
      movc r15.xyz, r14.wwww, r15.xyzx, r16.xzwx
      movc r13.xyz, r13.zzzz, r14.xyzx, r15.xyzx
      and r14.x, r13.z, l(0xc0000000)
      if_z r14.x
        iadd r14.x, -r13.y, l(6)
        ushr r14.xy, r12.wzww, r14.xxxx
        or r14.z, r13.z, l(0x40000000)
        bfi r14.y, l(1), l(1), r14.y, l(0)
        bfi r14.x, l(1), l(0), r14.x, r14.y
        imul null, r14.x, r14.x, l(10)
        ushr r14.x, r14.z, r14.x
        and r14.x, r14.x, l(1023)
        iadd r14.x, r13.x, r14.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.x, l(0), t23.xxxx
        iadd r14.yz, r13.yyyy, l(0, 1, 2, 0)
        iadd r13.y, -r14.y, l(6)
        ushr r15.xy, r12.wzww, r13.yyyy
        and r13.y, r14.w, l(0xc0000000)
        or r15.z, r14.w, l(0x40000000)
        bfi r15.y, l(1), l(1), r15.y, l(0)
        bfi r15.x, l(1), l(0), r15.x, r15.y
        imul null, r15.x, r15.x, l(10)
        ushr r15.x, r15.z, r15.x
        and r15.x, r15.x, l(1023)
        iadd r15.x, r14.x, r15.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.z, r15.x, l(0), t23.xxxx
        mov r15.y, r14.z
        movc r15.xyz, r13.yyyy, r14.xywx, r15.xyzx
        iadd r14.y, -r15.y, l(6)
        ushr r14.yz, r12.wwzw, r14.yyyy
        and r15.y, r15.z, l(0xc0000000)
        or r15.w, r15.z, l(0x40000000)
        bfi r14.z, l(1), l(1), r14.z, l(0)
        bfi r14.y, l(1), l(0), r14.y, r14.z
        imul null, r14.y, r14.y, l(10)
        ushr r14.y, r15.w, r14.y
        and r14.y, r14.y, l(1023)
        iadd r16.x, r14.y, r15.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.y, r16.x, l(0), t23.xxxx
        movc r14.yz, r15.yyyy, r15.xxzx, r16.xxyx
        movc r13.xz, r13.yyyy, r14.xxwx, r14.yyzy
      endif 
      and r13.y, r13.z, l(0xc0000000)
      if_z r13.y
        ubfe r14.x, l(14), l(15), r13.z
        utof r14.x, r14.x
        mul r14.x, r14.x, cb2[27].w
        and r14.yz, r13.zzzz, l(0, 0x00007fff, 0x20000000, 0)
        utof r14.y, r14.y
        mul r14.y, r14.y, cb2[27].w
        mul r14.xy, r14.xyxx, l(0.00006104, 0.00003052, 0.000000, 0.000000)
        and r14.w, r12.z, l(3)
        iadd r14.w, r13.x, r14.w
        iadd r14.w, r14.w, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t23.xxxx
        bfi r15.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r12.yzwy, l(0, 0, 0, 0)
        ushr r12.y, r14.w, r15.x
        and r12.y, r12.y, l(255)
        utof r12.y, r12.y
        mul r12.y, r14.y, r12.y
        mad r12.y, r12.y, l(0.00392157), r14.x
        iadd r12.z, r15.y, l(1)
        ubfe r12.w, l(1), l(1), r12.w
        iadd r12.z, r12.w, r12.z
        iadd r12.z, r12.z, r13.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.z, r12.z, l(0), t23.xxxx
        ushr r12.z, r12.z, r15.z
        and r12.z, r12.z, l(0x0000ffff)
        utof r12.z, r12.z
        mul r12.z, r14.y, r12.z
        mad r12.z, r12.z, l(0.00001526), r14.x
        movc r13.w, r14.z, r12.y, r12.z
      else 
        and r12.y, r13.z, l(0x80000000)
        iadd r12.z, r13.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.z, r12.z, l(0), t23.xxxx
        movc r12.y, r12.y, r12.z, l(0)
        ishl r12.z, r13.z, l(2)
        ushr r12.w, r12.y, l(16)
        and r12.y, r12.y, l(0x0000ffff)
        f16tof32 r12.yw, r12.yyyw
        mad r12.z, r11.x, r12.w, r12.z
        mad r12.y, r11.y, r12.y, r12.z
        movc r13.w, r13.y, r12.y, r13.w
      endif 
    endif 
    mad r11.z, -cb2[27].z, l(2.000000), r11.z
    lt r11.z, r13.w, r11.z
    movc r5.z, r11.z, l(0), l(1.000000)
  endif 
  if_z r12.x
    if_z cb2[58].y
      ftou r11.z, r8.w
      add r12.xy, r11.xyxx, -cb2[r11.z + 20].xyxx
      mul r12.xy, r12.xyxx, cb2[r11.z + 20].zzzz
      mad r12.xy, r12.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r11.z, cb2[26].y
      add r12.z, r8.w, r11.z
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.z, r12.xyzx, t13.xxxx, s13, r1.w
      sample_l_indexable(texture2darray)(float,float,float,float) r12.x, r12.xyzx, t31.xyzw, s0, l(0.000000)
      add r11.z, r11.z, r12.x
      add_sat r11.z, r11.z, l(-1.000000)
      mul r12.x, r11.z, r11.z
      mul r5.z, r11.z, r12.x
    endif 
    if_nz cb2[58].y
      mov r12.x, -r9.x
      ftou r11.z, r8.w
      add r8.w, r8.w, l(1.000000)
      min r8.w, r8.w, l(2.000000)
      ftou r8.w, r8.w
      add r11.w, -r11.w, l(1.000000)
      mul r11.w, r11.w, l(28.000000)
      ftou r11.w, r11.w
      add r13.xy, r11.xyxx, -cb2[r11.z + 20].xyxx
      mul r13.xy, r13.xyxx, cb2[r11.z + 20].zzzz
      mad r13.xy, r13.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r11.xy, r11.xyxx, -cb2[r8.w + 20].xyxx
      mul r11.xy, r11.xyxx, cb2[r8.w + 20].zzzz
      mad r11.xy, r11.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mov r12.y, r10.x
      mov r12.z, r9.x
      mov r12.w, l(0)
      mov r13.z, l(0)
      loop 
        uge r13.w, r13.z, l(8)
        breakc_nz r13.w
        ult r13.w, r11.w, r13.z
        movc r14.xy, r13.wwww, r11.xyxx, r13.xyxx
        movc r14.z, r13.w, cb2[r8.w + 20].w, cb2[r11.z + 20].w
        movc r13.w, r13.w, r8.w, r11.z
        dp2 r15.x, icb[r13.z + 0].yxyy, r12.xyxx
        dp2 r15.y, icb[r13.z + 0].yxyy, r12.yzyy
        mad r14.xy, r15.xyxx, r14.zzzz, r14.xyxx
        iadd r13.w, r13.w, cb2[26].y
        utof r14.z, r13.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r14.xyzx, t13.xxxx, s13, r1.w
        sample_l_indexable(texture2darray)(float,float,float,float) r14.x, r14.xyzx, t31.xyzw, s0, l(0.000000)
        add r13.w, r13.w, r14.x
        add_sat r13.w, r13.w, l(-1.000000)
        mad r12.w, r13.w, l(0.125000), r12.w
        iadd r13.z, r13.z, l(1)
      endloop 
      mul r1.w, r12.w, r12.w
      mul r5.z, r12.w, r1.w
    endif 
  endif 
endif 
and r1.w, cb2[53].x, l(0x0000ffff)
ult r8.w, l(0), r1.w
lt r11.x, l(0.000000), r5.z
and r8.w, r8.w, r11.x
if_nz r8.w
  iadd r1.w, r1.w, cb2[0].x
  iadd r1.w, r1.w, l(-1)
  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r8.w, r1.w, l(52), t12.xxxx
  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.xyzw, r1.w, l(68), t12.xyzw
  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r1.w, l(84), t12.xyzw
  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.xyzw, r1.w, l(100), t12.xyzw
  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r1.w, l(116), t12.xyzw
  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r1.w, l(132), t12.xyzw
  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r16.xyzw, r1.w, l(148), t12.xyzw
  mad r0.y, |r0.y|, l(-0.200000), l(0.400000)
  mad r17.xyz, r1.xyzx, r0.yyyy, v7.xyzx
  mov r17.w, l(1.000000)
  dp4 r11.x, r11.xyzw, r17.xyzw
  dp4 r11.y, r12.xyzw, r17.xyzw
  dp4 r0.y, r13.xyzw, r17.xyzw
  dp4 r11.z, r14.xyzw, r17.xyzw
  lt r11.w, r11.z, r0.y
  div r11.xy, r11.xyxx, r11.zzzz
  mad r11.xy, r11.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  add r11.xy, r16.zwzz, r11.xyxx
  mul r11.xy, r16.xyxx, r11.xyxx
  div r12.xy, r8.wwww, r15.xzxx
  add r12.zw, -r12.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  ge r12.zw, r11.xxxy, r12.zzzw
  ge r12.xy, r12.xyxx, r11.xyxx
  or r12.xy, r12.xyxx, r12.zwzz
  or r12.x, r12.y, r12.x
  or r11.w, r11.w, r12.x
  if_z r11.w
    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.w, r1.w, l(28), t12.xxxx
    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xy, r1.w, l(164), t12.xyxx
    mov_sat r11.xy, r11.xyxx
    mad r13.xy, r11.xyxx, r15.xzxx, r15.ywyy
    mul r1.w, r11.z, r12.y
    mad r0.y, r12.x, r11.z, r0.y
    div r0.y, r0.y, r1.w
    max r0.y, r0.y, l(0.00006104)
    and r1.w, r11.w, l(0x0000ffff)
    if_nz cb2[58].y
      mov r11.x, -r9.x
      utof r12.z, r1.w
      mov r11.y, r10.x
      mov r11.z, r9.x
      mov r9.x, l(0)
      mov r10.x, l(0)
      loop 
        ige r11.w, r10.x, l(8)
        breakc_nz r11.w
        dp2 r14.x, icb[r10.x + 0].yxyy, r11.xyxx
        dp2 r14.y, icb[r10.x + 0].yxyy, r11.yzyy
        mad r12.xy, r14.xyxx, r8.wwww, r13.xyxx
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.w, r12.xyzx, t9.xxxx, s13, r0.y
        mad r9.x, r11.w, l(0.125000), r9.x
        iadd r10.x, r10.x, l(1)
      endloop 
    else 
      utof r13.z, r1.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.x, r13.xyzx, t9.xxxx, s13, r0.y
    endif 
    mul r0.y, r9.x, r9.x
    mul r0.y, r9.x, r0.y
  else 
    mov r0.y, l(1.000000)
  endif 
  mul r5.z, r0.y, r5.z
endif 
lt r0.y, l(0.000000), r0.z
lt r1.w, l(0.000000), r5.z
if_nz r1.w
  if_nz cb2[23].x
    mov r3.w, l(1.000000)
    dp4 r1.w, cb2[24].xyzw, r3.xyzw
    dp4 r3.x, cb2[25].xyzw, r3.xyzw
    frc r11.x, r1.w
    frc r11.y, r3.x
    iadd r1.w, l(-1), cb2[23].x
    utof r11.z, r1.w
    sample_l_indexable(texture2darray)(float,float,float,float) r3.xyz, r11.xyzx, t20.xyzw, s2, l(0.000000)
    add r3.xyz, r3.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mad r3.xyz, cb2[23].yyyy, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r3.xyz, r3.xyzx, cb2[18].xyzx
  else 
    mov r3.xyz, cb2[18].xyzx
  endif 
  mul r3.xyz, r3.xyzx, r5.zzzz
  dp3_sat r1.w, r1.xyzx, r6.yzwy
  add r1.w, r0.z, r1.w
  div r1.w, r0.z, r1.w
  mad r11.xyz, r3.xyzx, r1.wwww, r9.yzwy
  mad r12.xyz, -v7.xyzx, r5.wwww, cb2[17].xyzx
  dp3 r1.w, r12.xyzx, r12.xyzx
  rsq r1.w, r1.w
  mul r12.xyz, r1.wwww, r12.xyzx
  dp3_sat r1.z, r1.xyzx, r12.xyzx
  dp3_sat r1.w, r12.xyzx, r6.yzwy
  mul r3.w, r1.z, r1.z
  mad r5.zw, r3.wwww, cb0[15].xxxz, l(0.000000, 0.000000, 1.000000, 1.000000)
  mul r5.zw, r5.zzzw, r5.zzzw
  div r5.zw, cb0[15].yyyw, r5.zzzw
  mul r5.zw, r1.zzzz, r5.zzzw
  mul r1.z, r1.w, l(4.000000)
  div r1.zw, r5.zzzw, r1.zzzz
  mul r1.zw, r1.zzzw, cb0[16].xxxy
  mul r6.yzw, r1.zzzz, r3.xxyz
  mad r6.yzw, r6.yyzw, r0.zzzz, r10.yyzw
  mul r3.xyz, r1.wwww, r3.xyzx
  mad r3.xyz, r3.xyzx, r0.zzzz, r6.yzwy
else 
  mov r11.xyz, r9.yzwy
  mov r3.xyz, r10.yzwy
endif 
movc r6.yzw, r0.yyyy, r11.xxyz, r9.yyzw
movc r3.xyz, r0.yyyy, r3.xyzx, r10.yzwy
mov r4.yw, l(0,0,0,0)
sample_indexable(texture2d)(float,float,float,float) r9.xyzw, r4.xyxx, t0.xyzw, s1
add r0.y, r5.x, l(1.000000)
log r0.y, r0.y
mul r0.y, r0.y, cb0[16].w
min r0.y, r0.y, l(500.000000)
mad r0.yz, r0.yyyy, r1.xxyx, v0.xxyx
add r1.xy, cb1[44].xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
max r0.yz, r0.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.yz, r1.xxyx, r0.yyzy
ftoi r1.xy, r0.yzyy
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r1.xyzw, t29.xyzw
ge r1.y, r1.x, l(0.984375)
mul r1.z, r1.x, l(1.01587307)
mad r1.x, r1.x, l(64.000000), l(-63.000000)
movc r1.x, r1.y, r1.x, r1.z
max r1.x, r1.x, l(0.00000001)
rcp r1.x, r1.x
lt r0.x, r0.x, r1.x
mul r0.yz, r0.yyzy, cb1[44].zzwz
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.yzyy, t30.xyzw, s9
if_z r0.x
  ftoi r10.xy, v0.xyxx
  mov r10.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r1.xyz, r10.xyzw, t30.xyzw
endif 
mul r0.xyz, r1.xyzx, cb1[85].xxxx
mad r1.w, r5.x, l(2.000000), l(1.000000)
log r1.w, r1.w
mul r4.z, r1.w, l(0.08333334)
sample_indexable(texture2d)(float,float,float,float) r10.xyzw, r4.zwzz, t37.xyzw, s8
mul r4.yzw, r0.xxyz, r10.xxyz
mul r1.w, r9.w, r10.w
mad r5.xzw, r9.xxyz, r6.yyzw, -r4.yyzw
mad r4.yzw, r1.wwww, r5.xxzw, r4.yyzw
mad r1.xyz, -r1.xyzx, cb1[85].xxxx, r4.yzwy
mad r0.xyz, r5.yyyy, r1.xyzx, r0.xyzx
mad r1.xyz, r8.xyzx, r6.yzwy, -r0.xyzx
mad r0.xyz, r7.xxxx, r1.xyzx, r0.xyzx
mad r1.xyz, r3.xyzx, r0.wwww, r7.yzwy
add r0.w, -r4.x, l(1.000000)
mul r1.w, r0.w, r0.w
mul r1.w, r1.w, r1.w
mul r0.w, r0.w, r1.w
mad r0.w, r0.w, l(0.980000), l(0.020000)
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
mad r1.xyz, cb0[22].yzwy, r6.yzwy, -r0.xyzx
mad r1.xyz, r6.xxxx, r1.xyzx, r0.xyzx
movc r0.xyz, cb0[28].yyyy, r1.xyzx, r0.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  sqrt r0.w, r2.x
  lt r1.x, l(0.000000), cb2[13].w
  if_nz r1.x
    mad r1.xy, r0.wwww, cb2[15].xyxx, cb2[14].zwzz
    mul r1.xy, r1.xyxx, cb2[16].xyxx
    lt r1.z, l(0.010000), |v7.z|
    mul r3.xy, v7.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.xyxx, r3.xyxx
    movc r1.xy, r1.zzzz, r3.xyxx, r1.xyxx
    mul r1.xzw, r1.xxxx, cb2[12].xxyz
    exp r1.xzw, r1.xxzw
    mul r3.xyz, r1.yyyy, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    add r3.xyz, -r1.xzwx, r3.xyzx
    mad r1.xyz, cb2[13].wwww, r3.xyzx, r1.xzwx
  else 
    mad r1.w, r0.w, cb2[15].x, cb2[14].z
    mul r1.w, r1.w, cb2[16].x
    lt r3.x, l(0.010000), |v7.z|
    mul r3.y, v7.z, cb2[15].z
    mul r3.z, r3.y, l(-1.442695)
    exp r3.z, r3.z
    add r3.z, -r3.z, l(1.000000)
    div r3.y, r3.z, r3.y
    mul r3.y, r1.w, r3.y
    movc r1.w, r3.x, r3.y, r1.w
    mul r3.xyz, r1.wwww, cb2[12].xyzx
    exp r1.xyz, r3.xyzx
  endif 
  mad r1.xyz, r1.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r1.xyz, r1.xyzx, -cb2[9].zzzz
  dp3 r1.w, cb2[7].yzwy, -r2.yzwy
  mad r3.x, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r3.y, cb2[8].w, -r1.w, l(1.000000)
  mul r3.y, r3.y, r3.y
  mul r3.y, r3.y, l(12.566371)
  div r3.x, r3.x, r3.y
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r3.x
  mov_sat r1.w, r1.w
  mad r1.w, r1.w, r1.w, l(1.000000)
  mad r1.w, r1.w, l(0.05968310), l(-1.000000)
  mad r1.w, cb2[8].z, r1.w, l(1.000000)
  mul r3.xyz, r0.wwww, cb2[11].xyzx
  mad r3.xyz, r1.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r4.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r4.xyzx
  mad r1.xyz, r0.xyzx, r1.xyzx, r3.xyzx
else 
  mul r0.w, v7.z, cb2[6].x
  mad r1.w, cb2[6].x, v7.z, cb2[5].x
  lt r3.x, |r0.w|, l(0.000100)
  min r3.y, r1.w, l(64.000000)
  mul r3.y, r3.y, l(1.442695)
  exp r3.y, r3.y
  mov_sat r3.z, cb2[6].z
  lt r3.w, r1.w, l(0.000000)
  add r1.w, r1.w, l(1.000000)
  movc r1.w, r3.w, r3.y, r1.w
  add r1.w, r1.w, -cb2[6].z
  movc r0.w, r3.x, l(1.000000), r0.w
  div r0.w, r1.w, r0.w
  movc r0.w, r3.x, r3.z, r0.w
  mul r0.w, r0.w, cb2[5].z
  sqrt r1.w, r2.x
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  dp3 r1.w, cb2[7].yzwy, r2.yzwy
  mad_sat r1.w, cb2[8].y, r1.w, cb2[8].x
  add r2.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r2.xyzw, r1.wwww, r2.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r2.w
  add r2.xyz, -r0.xyzx, r2.xyzx
  mad r1.xyz, r0.wwww, r2.xyzx, r0.xyzx
endif 
mul r0.xyz, r1.xyzx, cb1[85].yyyy
ge r1.xyz, r0.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r0.xyz, r0.xyzx, r1.xyzx
min o0.xyz, r0.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
mov o0.w, l(1.000000)
ret 
// Approximately 1054 instruction slots used
