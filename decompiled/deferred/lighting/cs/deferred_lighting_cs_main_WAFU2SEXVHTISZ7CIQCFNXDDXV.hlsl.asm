//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:24:06 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 39
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(47), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.zw, r0.xxxy, l(0, 0, 4095, 4095)
imad r1.xy, r0.zwzz, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r3.x, r3.y, r3.x
lt r3.y, l(0.000000), r2.z
and r3.x, r3.y, r3.x
if_z r3.x
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.yz, r1.xxyx
add r5.xy, r3.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r5.zw, r5.xxxy, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r3.w, r5.zwzz, t27.yzwx, s4, l(0.000000)
mul r3.w, r3.w, r4.z
if_nz cb2[55].x
  mul r4.z, r3.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r4.zzzz
  ret 
else 
  movc r4.z, cb2[54].w, r3.w, l(1.000000)
endif 
ge r3.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.z, r1.xyww, t4.yzxw
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
ge r11.x, r5.z, l(0.984375)
mul r1.z, r5.z, l(1.01587307)
mad r1.w, r5.z, l(64.000000), l(-63.000000)
movc r1.z, r11.x, r1.w, r1.z
max r1.z, r1.z, l(0.00000001)
rcp r11.y, r1.z
and r1.zw, r3.xxxx, r11.xxxy
add r5.xy, r5.xyxx, -cb1[71].xyxx
mul r5.xy, r5.xyxx, cb1[44].zwzz
mad r5.xy, r5.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r11.x, r5.x, cb1[12].x
mul r11.y, r5.y, cb1[13].y
mov r11.z, l(1.000000)
mul r5.xyz, r1.wwww, r11.xyzx
mul r11.xyz, r5.yyyy, cb1[17].xyzx
mad r5.xyw, r5.xxxx, cb1[16].xyxz, r11.xyxz
mad r5.xyz, r5.zzzz, cb1[18].xyzx, r5.xywx
mad r1.w, r2.w, l(3.000000), l(0.500000)
ftou r1.w, r1.w
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r11.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r11.z
mul r11.xy, r2.wwww, r2.xyxx
and r12.xyzw, r1.wwww, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.w, r12.w, r12.z
movc r12.z, r1.w, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r1.w, r3.w, l(-0.500000), l(-0.00146628)
add r1.w, r1.w, r2.z
mul_sat r2.y, r1.w, l(2.00982332)
dp3 r1.w, -r5.xyzx, -r5.xyzx
rsq r1.w, r1.w
mul r12.xyz, r1.wwww, -r5.xyzx
dp2 r2.z, r3.yzyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r2.z, r2.z
mul r2.z, r2.z, l(52.982918)
frc r2.z, r2.z
mad r2.z, r2.z, l(6.28318548), cb1[70].w
sincos r3.x, r13.x, r2.z
utof r2.zw, r1.yyyx
dp2 r2.z, r2.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r2.z, r2.z
mul r2.z, r2.z, l(52.982918)
frc r2.z, r2.z
mad r2.z, r2.z, l(6.28318548), cb1[70].w
sincos r14.x, r15.x, r2.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r2.z, -r12.xyzx, r11.xyzx
add r2.z, r2.z, r2.z
mad r16.xyz, r11.xyzx, -r2.zzzz, -r12.xyzx
mul r2.z, r2.y, l(17.000000)
exp r2.z, r2.z
add r2.z, r2.z, l(2.000000)
div r2.z, l(2.000000), r2.z
sqrt r2.w, r2.z
mul r3.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r3.zw, r3.zzzw
ieq r3.zw, r1.xxxy, r3.zzzw
and r3.z, r3.w, r3.z
dp3 r3.w, r11.xyzx, cb2[17].xyzx
mov_sat r6.w, r3.w
ge r7.w, l(0.000000), r6.w
if_nz r7.w
  mov r8.w, l(0)
endif 
if_z r7.w
  mul r14.yzw, r5.yyyy, cb2[29].xxyz
  mad r14.yzw, r5.xxxx, cb2[28].xxyz, r14.yyzw
  mad r14.yzw, r5.zzzz, cb2[30].xxyz, r14.yyzw
  add r14.yzw, r14.yyzw, cb2[31].xxyz
  add r7.w, r14.w, -cb2[17].w
  mad r7.w, -r7.w, l(0.00006104), l(1.000000)
  mov_sat r9.w, r7.w
  eq r9.w, r7.w, r9.w
  if_nz r9.w
    mov r9.w, l(0)
    mov r10.w, l(0)
    loop 
      ge r12.w, r9.w, l(3.000000)
      breakc_nz r12.w
      ftou r12.w, r9.w
      add r15.yz, r14.yyzy, -cb2[r12.w + 20].xxyx
      max r13.w, |r15.z|, |r15.y|
      mul r10.w, r13.w, cb2[r12.w + 20].z
      lt r12.w, r10.w, l(1.000000)
      if_nz r12.w
        break 
      endif 
      add r9.w, r9.w, l(1.000000)
      mov r10.w, l(0)
    endloop 
  else 
    mov r9.w, l(3.000000)
    mov r10.w, l(0)
  endif 
  ge r12.w, r9.w, l(3.000000)
  if_nz r12.w
    mul r15.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r17.xz, r15.yyyy
    mov r17.y, -r17.z
    mad r15.yzw, r14.yyzy, r17.xxyz, r15.zzwz
    add r17.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r15.yzw, r15.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r15.yzw, r17.xxyz, r15.yyzw
    mul r17.xy, r15.wzww, cb2[32].xxxx
    round_ni r17.xy, r17.xyxx
    mul r13.w, r17.y, cb2[27].x
    mad r13.w, r13.w, cb2[32].x, r17.x
    ftou r13.w, r13.w
    iadd r13.w, r13.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.x, r13.w, l(0), t23.xxxx
    and r17.y, r17.x, l(0x40000000)
    ishl r17.z, r17.x, l(2)
    if_z r17.y
      and r17.y, r17.x, l(0x01ffffff)
      iadd r18.x, r13.w, r17.y
      ushr r13.w, r17.x, l(25)
      utof r13.w, r13.w
      mul r15.yzw, r13.wwww, r15.yyzw
      frc r15.yzw, r15.yyzw
      mul r15.yzw, r15.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r15.yzw, r15.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      ushr r17.xy, r15.wzww, l(6, 6, 0, 0)
      and r13.w, r18.z, l(0xc0000000)
      iadd r17.w, r18.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.w, l(0), t23.xxxx
      movc r17.y, r17.y, r18.z, r17.w
      ushr r17.w, r17.y, l(13)
      movc r17.x, r17.x, r17.w, r17.y
      and r17.x, r17.x, l(8191)
      iadd r19.x, r17.x, r18.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      mov r18.y, l(0)
      mov r19.y, l(1)
      movc r17.xyw, r13.wwww, r18.xyxz, r19.xyxz
      movc r19.yz, r13.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r20.xy, r15.wzww, r19.yyyy
      and r20.xy, r20.xyxx, l(1, 1, 0, 0)
      and r18.w, r17.w, l(0xc0000000)
      iadd r19.y, r17.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.y, r19.y, l(0), t23.xxxx
      movc r19.y, r20.y, r17.w, r19.y
      ushr r20.y, r19.y, l(13)
      movc r19.y, r20.x, r20.y, r19.y
      and r19.y, r19.y, l(8191)
      iadd r19.x, r17.x, r19.y
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
      movc r17.xyw, r18.wwww, r17.xyxw, r19.xzxw
      movc r17.xyw, r13.wwww, r18.xyxz, r17.xyxw
      and r13.w, r17.w, l(0xc0000000)
      if_z r13.w
        iadd r13.w, -r17.y, l(6)
        ushr r18.xy, r15.wzww, r13.wwww
        or r13.w, r17.w, l(0x40000000)
        bfi r18.y, l(1), l(1), r18.y, l(0)
        bfi r18.x, l(1), l(0), r18.x, r18.y
        imul null, r18.x, r18.x, l(10)
        ushr r13.w, r13.w, r18.x
        and r13.w, r13.w, l(1023)
        iadd r18.x, r13.w, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.x, l(0), t23.xxxx
        iadd r18.yz, r17.yyyy, l(0, 1, 2, 0)
        iadd r13.w, -r18.y, l(6)
        ushr r19.xy, r15.wzww, r13.wwww
        and r13.w, r18.w, l(0xc0000000)
        or r17.y, r18.w, l(0x40000000)
        bfi r19.y, l(1), l(1), r19.y, l(0)
        bfi r19.x, l(1), l(0), r19.x, r19.y
        imul null, r19.x, r19.x, l(10)
        ushr r17.y, r17.y, r19.x
        and r17.y, r17.y, l(1023)
        iadd r19.x, r17.y, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
        mov r19.y, r18.z
        movc r19.xyz, r13.wwww, r18.xywx, r19.xyzx
        iadd r17.y, -r19.y, l(6)
        ushr r18.yz, r15.wwzw, r17.yyyy
        and r17.y, r19.z, l(0xc0000000)
        or r19.y, r19.z, l(0x40000000)
        bfi r18.z, l(1), l(1), r18.z, l(0)
        bfi r18.y, l(1), l(0), r18.y, r18.z
        imul null, r18.y, r18.y, l(10)
        ushr r18.y, r19.y, r18.y
        and r18.y, r18.y, l(1023)
        iadd r20.x, r18.y, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.y, r20.x, l(0), t23.xxxx
        movc r18.yz, r17.yyyy, r19.xxzx, r20.xxyx
        movc r17.xw, r13.wwww, r18.xxxw, r18.yyyz
      endif 
      and r13.w, r17.w, l(0xc0000000)
      if_z r13.w
        ubfe r17.y, l(14), l(15), r17.w
        utof r17.y, r17.y
        mul r17.y, r17.y, cb2[27].w
        mul r17.y, r17.y, l(0.00006104)
        and r18.xy, r17.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r18.x, r18.x
        mul r18.x, r18.x, cb2[27].w
        mul r18.x, r18.x, l(0.00003052)
        and r18.z, r15.z, l(3)
        iadd r18.z, r17.x, r18.z
        iadd r18.z, r18.z, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.z, l(0), t23.xxxx
        bfi r19.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r15.yzwy, l(0, 0, 0, 0)
        ushr r15.y, r18.z, r19.x
        and r15.y, r15.y, l(255)
        utof r15.y, r15.y
        mul r15.y, r18.x, r15.y
        mad r15.y, r15.y, l(0.00392157), r17.y
        iadd r15.z, r19.y, l(1)
        ubfe r15.w, l(1), l(1), r15.w
        iadd r15.z, r15.w, r15.z
        iadd r15.z, r15.z, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.z, r15.z, l(0), t23.xxxx
        ushr r15.z, r15.z, r19.z
        and r15.z, r15.z, l(0x0000ffff)
        utof r15.z, r15.z
        mul r15.z, r18.x, r15.z
        mad r15.z, r15.z, l(0.00001526), r17.y
        movc r17.z, r18.y, r15.y, r15.z
      else 
        and r15.y, r17.w, l(0x80000000)
        iadd r15.z, r17.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.z, r15.z, l(0), t23.xxxx
        movc r15.y, r15.y, r15.z, l(0)
        ishl r15.z, r17.w, l(2)
        ushr r15.w, r15.y, l(16)
        and r15.y, r15.y, l(0x0000ffff)
        f16tof32 r15.yw, r15.yyyw
        mad r15.z, r14.y, r15.w, r15.z
        mad r15.y, r14.z, r15.y, r15.z
        movc r17.z, r13.w, r15.y, r17.z
      endif 
    endif 
    mad r13.w, -cb2[27].z, l(2.000000), r14.w
    lt r13.w, r17.z, r13.w
    movc r8.w, r13.w, l(0), l(1.000000)
  endif 
  if_z r12.w
    if_z cb2[58].y
      ftou r12.w, r9.w
      add r15.yz, r14.yyzy, -cb2[r12.w + 20].xxyx
      mul r15.yz, r15.yyzy, cb2[r12.w + 20].zzzz
      mad r17.xy, r15.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r12.w, cb2[26].y
      add r17.z, r9.w, r12.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r17.xyzx, t13.xxxx, s13, r7.w
      sample_l_indexable(texture2darray)(float,float,float,float) r13.w, r17.xyzx, t31.yzwx, s0, l(0.000000)
      add r12.w, r12.w, r13.w
      add_sat r12.w, r12.w, l(-1.000000)
      mul r13.w, r12.w, r12.w
      mul r8.w, r12.w, r13.w
    endif 
    if_nz cb2[58].y
      mov r17.x, -r3.x
      ftou r12.w, r9.w
      add r9.w, r9.w, l(1.000000)
      min r9.w, r9.w, l(2.000000)
      ftou r9.w, r9.w
      add r10.w, -r10.w, l(1.000000)
      mul r10.w, r10.w, l(28.000000)
      ftou r10.w, r10.w
      add r15.yz, r14.yyzy, -cb2[r12.w + 20].xxyx
      mul r15.yz, r15.yyzy, cb2[r12.w + 20].zzzz
      mad r15.yz, r15.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      add r14.yz, r14.yyzy, -cb2[r9.w + 20].xxyx
      mul r14.yz, r14.yyzy, cb2[r9.w + 20].zzzz
      mad r14.yz, r14.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r17.y, r13.x
      mov r17.z, r3.x
      mov r13.w, l(0)
      mov r14.w, l(0)
      loop 
        uge r15.w, r14.w, l(8)
        breakc_nz r15.w
        ult r15.w, r10.w, r14.w
        movc r18.xy, r15.wwww, r14.yzyy, r15.yzyy
        movc r17.w, r15.w, cb2[r9.w + 20].w, cb2[r12.w + 20].w
        movc r15.w, r15.w, r9.w, r12.w
        dp2 r19.x, icb[r14.w + 0].yxyy, r17.xyxx
        dp2 r19.y, icb[r14.w + 0].yxyy, r17.yzyy
        mad r18.xy, r19.xyxx, r17.wwww, r18.xyxx
        iadd r15.w, r15.w, cb2[26].y
        utof r18.z, r15.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r18.xyzx, t13.xxxx, s13, r7.w
        sample_l_indexable(texture2darray)(float,float,float,float) r17.w, r18.xyzx, t31.yzwx, s0, l(0.000000)
        add r15.w, r15.w, r17.w
        add_sat r15.w, r15.w, l(-1.000000)
        mad r13.w, r15.w, l(0.125000), r13.w
        iadd r14.w, r14.w, l(1)
      endloop 
      mul r7.w, r13.w, r13.w
      mul r8.w, r13.w, r7.w
    endif 
  endif 
endif 
add r7.w, -r2.y, l(1.000000)
mul r9.w, r7.w, l(5.000000)
mad r10.w, r7.w, l(5.000000), l(-2.500000)
mul r10.w, r10.w, l(0.400000)
max r10.w, r10.w, l(0.000000)
mul r10.w, r10.w, l(100.000000)
mad r14.yz, -r7.wwww, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r12.w, r14.y
mul r12.w, r2.x, r12.w
mul r12.w, r12.w, l(9.136810)
mul r13.w, r7.w, r9.w
mad r13.w, -r13.w, l(2.015905), r14.z
exp r13.w, r13.w
mul r13.w, r2.x, r13.w
mul r13.w, r13.w, l(9.708090)
max r12.w, r12.w, r13.w
max r12.w, r12.w, l(1.268160)
iadd r13.w, cb2[0].y, -cb2[58].x
ushr r14.yz, r0.yyxy, l(0, 24, 24, 0)
ubfe r0.xy, l(10, 10, 0, 0), l(12, 12, 0, 0), r0.yxyy
mov r17.x, l(16)
mov r18.yz, l(0,0,1.000000,0)
mov r19.xy, l(0,0,0,0)
mov r20.xz, l(1.000000,0,1.000000,0)
mov r21.xy, l(0,0,0,0)
mov r22.xy, l(0,0,0,0)
mov r23.xyzw, l(0,0,0,0)
mov r24.xyzw, l(0,0,0,0)
mov r14.w, l(0)
loop 
  ieq r15.y, r14.w, l(2)
  breakc_nz r15.y
  movc r15.y, r14.w, r0.x, r14.y
  uge r15.z, r15.y, r13.w
  ult r15.w, r15.y, cb2[0].y
  and r15.z, r15.w, r15.z
  if_nz r15.z
    imul null, r15.y, r15.y, l(14)
    if_nz r3.z
      and r15.z, r24.w, l(3)
      imad r15.z, r15.z, l(20), l(880)
      add r17.yzw, cb1[24].xxyz, cb10[r15.y + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r15.z, r17.xyzw
    endif 
    iadd r25.w, r24.w, l(1)
    add r17.yzw, r5.xxyz, -cb10[r15.y + 0].xxyz
    and r15.z, l(0x0000ffff), cb10[r15.y + 7].z
    ubfe r15.w, l(6), l(25), cb10[r15.y + 7].z
    imul null, r18.w, r15.z, l(6)
    dp3 r19.w, cb11[r18.w + 0].xyzx, r17.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 0].w
    dp3 r21.w, cb11[r18.w + 1].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 1].w
    mul r19.w, r19.w, r21.w
    dp3 r21.w, cb11[r18.w + 2].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 2].w
    mul r19.w, r19.w, r21.w
    dp3 r21.w, cb11[r18.w + 3].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 3].w
    mul r19.w, r19.w, r21.w
    dp3 r21.w, cb11[r18.w + 4].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 4].w
    mul r19.w, r19.w, r21.w
    dp3 r21.w, cb11[r18.w + 5].xyzx, r17.yzwy
    add_sat r18.w, r21.w, cb11[r18.w + 5].w
    mul r18.x, r18.w, r19.w
    and r18.w, l(1), cb10[r15.y + 6].x
    movc r18.xw, r18.wwww, r18.xxxy, r18.zzzx
    mov r19.w, cb10[r15.y + 6].x
    mov r26.xy, r18.xwxx
    mov r21.w, l(1)
    loop 
      ige r22.w, r21.w, r15.w
      breakc_nz r22.w
      iadd r22.w, r15.z, r21.w
      imul null, r22.w, r22.w, l(6)
      dp3 r26.z, cb11[r22.w + 0].xyzx, r17.yzwy
      add_sat r26.z, r26.z, cb11[r22.w + 0].w
      mul r26.z, r26.z, r26.x
      dp3 r26.w, cb11[r22.w + 1].xyzx, r17.yzwy
      add_sat r26.w, r26.w, cb11[r22.w + 1].w
      mul r26.z, r26.w, r26.z
      dp3 r26.w, cb11[r22.w + 2].xyzx, r17.yzwy
      add_sat r26.w, r26.w, cb11[r22.w + 2].w
      mul r26.z, r26.w, r26.z
      dp3 r26.w, cb11[r22.w + 3].xyzx, r17.yzwy
      add_sat r26.w, r26.w, cb11[r22.w + 3].w
      mul r26.z, r26.w, r26.z
      dp3 r26.w, cb11[r22.w + 4].xyzx, r17.yzwy
      add_sat r26.w, r26.w, cb11[r22.w + 4].w
      mul r26.z, r26.w, r26.z
      dp3 r26.w, cb11[r22.w + 5].xyzx, r17.yzwy
      add_sat r22.w, r26.w, cb11[r22.w + 5].w
      mul r26.x, r22.w, r26.z
      ushr r26.w, r19.w, l(2)
      ubfe r27.x, l(1), l(2), r19.w
      and r27.y, r26.w, l(2)
      max r27.z, r26.x, r26.y
      mad r22.w, -r26.z, r22.w, l(1.000000)
      mul r22.w, r22.w, r26.y
      movc r20.y, r27.y, r22.w, r27.z
      movc r26.xy, r27.xxxx, r26.xyxx, r20.xyxx
      iadd r21.w, r21.w, l(1)
      mov r19.w, r26.w
    endloop 
    mov_sat r26.y, r26.y
    mul r15.z, r26.y, cb10[r15.y + 6].y
    lt r15.w, l(0.000000), r15.z
    if_nz r15.w
      and r15.w, r25.w, l(7)
      iadd r18.x, r15.w, l(-1)
      ult r18.x, r18.x, l(32)
      and r18.x, r3.z, r18.x
      if_nz r18.x
        imad r18.xw, r15.wwww, l(20, 0, 0, 20), l(860, 0, 0, 876)
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r15.w, cb2[52].x, r18.x, u2.xxxx
        or r15.w, r15.w, l(32)
        store_structured u2.x, cb2[52].x, r18.x, r15.w
        store_structured u2.x, cb2[52].x, r18.w, r15.z
      endif 
      iadd r24.w, r24.w, l(257)
      mad r24.z, r26.y, cb10[r15.y + 6].y, r24.z
      mul r15.z, r15.z, cb10[r15.y + 7].y
      mov r27.x, cb10[r15.y + 7].w
      mov r27.yz, cb10[r15.y + 8].xxyx
      dp3 r15.w, r16.xyzx, r27.xyzx
      dp3 r18.x, r17.yzwy, r27.xyzx
      add r18.x, r18.x, -cb10[r15.y + 8].z
      ge r18.w, r18.x, l(0.000000)
      max r18.x, r10.w, |r18.x|
      movc r18.x, r18.w, r18.x, -r18.x
      max r15.w, -r15.w, l(0.00000010)
      div r15.w, r18.x, r15.w
      min r15.w, |r15.w|, l(131072.000000)
      mov r27.x, cb10[r15.y + 8].w
      mov r27.yz, cb10[r15.y + 9].xxyx
      dp3 r18.x, r16.xyzx, r27.xyzx
      dp3 r18.w, r17.yzwy, r27.xyzx
      add r18.w, r18.w, -cb10[r15.y + 9].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r10.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r15.w, r15.w, |r18.x|
      mov r27.x, cb10[r15.y + 9].w
      mov r27.yz, cb10[r15.y + 10].xxyx
      dp3 r18.x, r16.xyzx, r27.xyzx
      dp3 r18.w, r17.yzwy, r27.xyzx
      add r18.w, r18.w, -cb10[r15.y + 10].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r10.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r15.w, r15.w, |r18.x|
      mov r27.x, cb10[r15.y + 10].w
      mov r27.yz, cb10[r15.y + 11].xxyx
      dp3 r18.x, r16.xyzx, r27.xyzx
      dp3 r18.w, r17.yzwy, r27.xyzx
      add r18.w, r18.w, -cb10[r15.y + 11].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r10.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r15.w, r15.w, |r18.x|
      mov r27.x, cb10[r15.y + 11].w
      mov r27.yz, cb10[r15.y + 12].xxyx
      dp3 r18.x, r16.xyzx, r27.xyzx
      dp3 r18.w, r17.yzwy, r27.xyzx
      add r18.w, r18.w, -cb10[r15.y + 12].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r10.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r15.w, r15.w, |r18.x|
      mov r27.x, cb10[r15.y + 12].w
      mov r27.yz, cb10[r15.y + 13].xxyx
      dp3 r18.x, r16.xyzx, r27.xyzx
      dp3 r18.w, r17.yzwy, r27.xyzx
      add r18.w, r18.w, -cb10[r15.y + 13].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r10.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r15.w, r15.w, |r18.x|
      add r27.x, r17.y, cb10[r15.y + 3].w
      add r27.yz, r17.zzwz, cb10[r15.y + 4].xxyx
      mad r26.xzw, r16.xxyz, r15.wwww, r27.xxyz
      dp3 r18.x, r26.xzwx, r26.xzwx
      sqrt r18.x, r18.x
      div r15.w, r15.w, r18.x
      add r15.w, r15.w, r15.w
      sqrt r15.w, r15.w
      mad r15.w, r7.w, l(5.000000), r15.w
      add r15.w, r15.w, l(-0.844800)
      mov r27.x, cb10[r15.y + 0].w
      mov r27.y, cb10[r15.y + 1].z
      mov r27.z, cb10[r15.y + 2].y
      dp3 r28.x, r26.xzwx, r27.xyzx
      mov r29.xy, cb10[r15.y + 1].xwxx
      mov r29.z, cb10[r15.y + 2].z
      dp3 r28.y, r26.xzwx, r29.xyzx
      mov r30.x, cb10[r15.y + 1].y
      mov r30.yz, cb10[r15.y + 2].xxwx
      dp3 r28.z, r26.xzwx, r30.xyzx
      ubfe r18.x, l(9), l(16), cb10[r15.y + 7].z
      utof r28.w, r18.x
      sample_l_indexable(texturecubearray)(float,float,float,float) r26.xzw, r28.xyzw, t8.xwyz, s2, r15.w
      and r31.xyz, r26.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r31.xyz, r31.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r15.w, r31.y, r31.x
      or r15.w, r31.z, r15.w
      movc r26.xzw, r15.wwww, l(1.000000,0,1.000000,0), r26.xxzw
      dp3 r31.x, r17.yzwy, r27.xyzx
      dp3 r31.y, r17.yzwy, r29.xyzx
      dp3 r31.z, r17.yzwy, r30.xyzx
      mad_sat r17.yzw, r31.xxyz, cb10[r15.y + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r31.xy, r17.yzyy, cb10[r15.y + 4].zwzz
      mul r31.z, r17.w, cb10[r15.y + 5].x
      add r17.yzw, r31.xxyz, cb10[r15.y + 5].yyzw
      dp3 r28.x, r11.xyzx, r27.xyzx
      dp3 r28.y, r11.xyzx, r29.xyzx
      dp3 r28.z, r11.xyzx, r30.xyzx
      lt r27.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r28.xyzx
      movc r19.z, r27.x, l(0), l(0.500000)
      add r29.xyz, r17.yzwy, r19.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t17.xyzw, s4, l(0.000000)
      mul r30.xyz, r28.xyzx, r28.xyzx
      mul r30.xyz, r15.zzzz, r30.xyzx
      movc r21.z, r27.y, l(0), l(0.500000)
      add r27.xyw, r17.yzyw, r21.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r27.xyw, r27.xywx, t18.xywz, s4, l(0.000000)
      mul r27.xyw, r30.yyyy, r27.xyxw
      mad r27.xyw, r29.xyxz, r30.xxxx, r27.xyxw
      movc r22.z, r27.z, l(0), l(0.500000)
      add r17.yzw, r17.yyzw, r22.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r17.yzw, r17.yzwy, t19.wxyz, s4, l(0.000000)
      mad r17.yzw, r17.yyzw, r30.zzzz, r27.xxyw
      sample_l_indexable(texturecubearray)(float,float,float,float) r27.xyz, r28.xyzw, t8.xyzw, s2, l(6.000000)
      and r28.xyz, r27.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r28.xyz, r28.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r15.y, r28.y, r28.x
      or r15.y, r28.z, r15.y
      movc r27.xyz, r15.yyyy, l(1.000000,1.000000,0,0), r27.xyzx
      mul r28.xyz, r17.yzwy, r27.xyzx
      dp3 r15.y, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r23.xyz, r17.yzwy, r27.xyzx, r23.xyzx
      mul r15.w, r12.w, r15.y
      mul r17.yzw, r15.zzzz, r26.xxzw
      dp3 r15.z, r17.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r15.y, r12.w, r15.y, r15.z
      div r15.y, r15.w, r15.y
      mov r27.x, r23.w
      mov r27.yz, r24.xxyx
      mad r15.yzw, r17.yyzw, r15.yyyy, r27.xxyz
      mov r23.w, r15.y
      mov r24.xy, r15.zwzz
    else 
      mov r25.xyz, r24.xyzx
      mov r24.xyzw, r25.xyzw
    endif 
  endif 
  iadd r14.w, r14.w, l(1)
endloop 
mov r17.x, l(16)
mov r18.yz, l(0,0,1.000000,0)
mov r19.xy, l(0,0,0,0)
mov r21.xy, l(0,0,0,0)
mov r22.xy, l(0,0,0,0)
mov r15.yzw, r23.xxyz
mov r25.x, r23.w
mov r25.yz, r24.xxyx
mov r20.xy, r24.zwzz
mov r14.w, l(0)
loop 
  ieq r18.w, r14.w, l(2)
  breakc_nz r18.w
  movc r18.w, r14.w, r0.x, r14.y
  ult r19.w, r18.w, r13.w
  if_nz r19.w
    imul null, r18.w, r18.w, l(14)
    if_nz r3.z
      and r19.w, r20.y, l(15)
      imad r19.w, r19.w, l(20), l(880)
      add r17.yzw, cb1[24].xxyz, cb10[r18.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r19.w, r17.xyzw
    endif 
    iadd r26.y, r20.y, l(1)
    add r17.yzw, r5.xxyz, -cb10[r18.w + 0].xxyz
    and r19.w, l(0x0000ffff), cb10[r18.w + 7].z
    ubfe r21.w, l(6), l(25), cb10[r18.w + 7].z
    imul null, r22.w, r19.w, l(6)
    dp3 r25.w, cb11[r22.w + 0].xyzx, r17.yzwy
    add_sat r25.w, r25.w, cb11[r22.w + 0].w
    dp3 r26.z, cb11[r22.w + 1].xyzx, r17.yzwy
    add_sat r26.z, r26.z, cb11[r22.w + 1].w
    mul r25.w, r25.w, r26.z
    dp3 r26.z, cb11[r22.w + 2].xyzx, r17.yzwy
    add_sat r26.z, r26.z, cb11[r22.w + 2].w
    mul r25.w, r25.w, r26.z
    dp3 r26.z, cb11[r22.w + 3].xyzx, r17.yzwy
    add_sat r26.z, r26.z, cb11[r22.w + 3].w
    mul r25.w, r25.w, r26.z
    dp3 r26.z, cb11[r22.w + 4].xyzx, r17.yzwy
    add_sat r26.z, r26.z, cb11[r22.w + 4].w
    mul r25.w, r25.w, r26.z
    dp3 r26.z, cb11[r22.w + 5].xyzx, r17.yzwy
    add_sat r22.w, r26.z, cb11[r22.w + 5].w
    mul r18.x, r22.w, r25.w
    and r22.w, l(1), cb10[r18.w + 6].x
    movc r26.zw, r22.wwww, r18.xxxy, r18.zzzx
    mov r18.x, cb10[r18.w + 6].x
    mov r27.xy, r26.zwzz
    mov r22.w, l(1)
    loop 
      ige r25.w, r22.w, r21.w
      breakc_nz r25.w
      iadd r25.w, r19.w, r22.w
      imul null, r25.w, r25.w, l(6)
      dp3 r27.z, cb11[r25.w + 0].xyzx, r17.yzwy
      add_sat r27.z, r27.z, cb11[r25.w + 0].w
      mul r27.z, r27.z, r27.x
      dp3 r27.w, cb11[r25.w + 1].xyzx, r17.yzwy
      add_sat r27.w, r27.w, cb11[r25.w + 1].w
      mul r27.z, r27.w, r27.z
      dp3 r27.w, cb11[r25.w + 2].xyzx, r17.yzwy
      add_sat r27.w, r27.w, cb11[r25.w + 2].w
      mul r27.z, r27.w, r27.z
      dp3 r27.w, cb11[r25.w + 3].xyzx, r17.yzwy
      add_sat r27.w, r27.w, cb11[r25.w + 3].w
      mul r27.z, r27.w, r27.z
      dp3 r27.w, cb11[r25.w + 4].xyzx, r17.yzwy
      add_sat r27.w, r27.w, cb11[r25.w + 4].w
      mul r27.z, r27.w, r27.z
      dp3 r27.w, cb11[r25.w + 5].xyzx, r17.yzwy
      add_sat r25.w, r27.w, cb11[r25.w + 5].w
      mul r27.x, r25.w, r27.z
      ushr r27.w, r18.x, l(2)
      ubfe r28.x, l(1), l(2), r18.x
      and r28.y, r27.w, l(2)
      max r28.z, r27.x, r27.y
      mad r25.w, -r27.z, r25.w, l(1.000000)
      mul r25.w, r25.w, r27.y
      movc r20.w, r28.y, r25.w, r28.z
      movc r27.xy, r28.xxxx, r27.xyxx, r20.zwzz
      iadd r22.w, r22.w, l(1)
      mov r18.x, r27.w
    endloop 
    add_sat r18.x, -r24.z, r27.y
    mul r19.w, r18.x, cb10[r18.w + 6].y
    lt r20.w, l(0.000000), r19.w
    if_nz r20.w
      and r20.w, r26.y, l(31)
      iadd r21.w, r20.w, l(-1)
      ult r21.w, r21.w, l(32)
      and r21.w, r3.z, r21.w
      if_nz r21.w
        imad r26.zw, r20.wwww, l(0, 0, 20, 20), l(0, 0, 860, 876)
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r20.w, cb2[52].x, r26.z, u2.xxxx
        or r20.w, r20.w, l(32)
        store_structured u2.x, cb2[52].x, r26.z, r20.w
        store_structured u2.x, cb2[52].x, r26.w, r19.w
      endif 
      iadd r20.y, r20.y, l(257)
      mad r20.x, r18.x, cb10[r18.w + 6].y, r20.x
      mul r18.x, r19.w, cb10[r18.w + 7].y
      mov r28.x, cb10[r18.w + 7].w
      mov r28.yz, cb10[r18.w + 8].xxyx
      dp3 r19.w, r16.xyzx, r28.xyzx
      dp3 r20.w, r17.yzwy, r28.xyzx
      add r20.w, r20.w, -cb10[r18.w + 8].z
      ge r21.w, r20.w, l(0.000000)
      max r20.w, r10.w, |r20.w|
      movc r20.w, r21.w, r20.w, -r20.w
      max r19.w, -r19.w, l(0.00000010)
      div r19.w, r20.w, r19.w
      min r19.w, |r19.w|, l(131072.000000)
      mov r28.x, cb10[r18.w + 8].w
      mov r28.yz, cb10[r18.w + 9].xxyx
      dp3 r20.w, r16.xyzx, r28.xyzx
      dp3 r21.w, r17.yzwy, r28.xyzx
      add r21.w, r21.w, -cb10[r18.w + 9].z
      ge r22.w, r21.w, l(0.000000)
      max r21.w, r10.w, |r21.w|
      movc r21.w, r22.w, r21.w, -r21.w
      max r20.w, -r20.w, l(0.00000010)
      div r20.w, r21.w, r20.w
      min r19.w, r19.w, |r20.w|
      mov r28.x, cb10[r18.w + 9].w
      mov r28.yz, cb10[r18.w + 10].xxyx
      dp3 r20.w, r16.xyzx, r28.xyzx
      dp3 r21.w, r17.yzwy, r28.xyzx
      add r21.w, r21.w, -cb10[r18.w + 10].z
      ge r22.w, r21.w, l(0.000000)
      max r21.w, r10.w, |r21.w|
      movc r21.w, r22.w, r21.w, -r21.w
      max r20.w, -r20.w, l(0.00000010)
      div r20.w, r21.w, r20.w
      min r19.w, r19.w, |r20.w|
      mov r28.x, cb10[r18.w + 10].w
      mov r28.yz, cb10[r18.w + 11].xxyx
      dp3 r20.w, r16.xyzx, r28.xyzx
      dp3 r21.w, r17.yzwy, r28.xyzx
      add r21.w, r21.w, -cb10[r18.w + 11].z
      ge r22.w, r21.w, l(0.000000)
      max r21.w, r10.w, |r21.w|
      movc r21.w, r22.w, r21.w, -r21.w
      max r20.w, -r20.w, l(0.00000010)
      div r20.w, r21.w, r20.w
      min r19.w, r19.w, |r20.w|
      mov r28.x, cb10[r18.w + 11].w
      mov r28.yz, cb10[r18.w + 12].xxyx
      dp3 r20.w, r16.xyzx, r28.xyzx
      dp3 r21.w, r17.yzwy, r28.xyzx
      add r21.w, r21.w, -cb10[r18.w + 12].z
      ge r22.w, r21.w, l(0.000000)
      max r21.w, r10.w, |r21.w|
      movc r21.w, r22.w, r21.w, -r21.w
      max r20.w, -r20.w, l(0.00000010)
      div r20.w, r21.w, r20.w
      min r19.w, r19.w, |r20.w|
      mov r28.x, cb10[r18.w + 12].w
      mov r28.yz, cb10[r18.w + 13].xxyx
      dp3 r20.w, r16.xyzx, r28.xyzx
      dp3 r21.w, r17.yzwy, r28.xyzx
      add r21.w, r21.w, -cb10[r18.w + 13].z
      ge r22.w, r21.w, l(0.000000)
      max r21.w, r10.w, |r21.w|
      movc r21.w, r22.w, r21.w, -r21.w
      max r20.w, -r20.w, l(0.00000010)
      div r20.w, r21.w, r20.w
      min r19.w, r19.w, |r20.w|
      add r28.x, r17.y, cb10[r18.w + 3].w
      add r28.yz, r17.zzwz, cb10[r18.w + 4].xxyx
      mad r27.xzw, r16.xxyz, r19.wwww, r28.xxyz
      dp3 r20.w, r27.xzwx, r27.xzwx
      sqrt r20.w, r20.w
      div r19.w, r19.w, r20.w
      add r19.w, r19.w, r19.w
      sqrt r19.w, r19.w
      mad r19.w, r7.w, l(5.000000), r19.w
      add r19.w, r19.w, l(-0.844800)
      mov r28.x, cb10[r18.w + 0].w
      mov r28.y, cb10[r18.w + 1].z
      mov r28.z, cb10[r18.w + 2].y
      dp3 r29.x, r27.xzwx, r28.xyzx
      mov r30.xy, cb10[r18.w + 1].xwxx
      mov r30.z, cb10[r18.w + 2].z
      dp3 r29.y, r27.xzwx, r30.xyzx
      mov r31.x, cb10[r18.w + 1].y
      mov r31.yz, cb10[r18.w + 2].xxwx
      dp3 r29.z, r27.xzwx, r31.xyzx
      ubfe r20.w, l(9), l(16), cb10[r18.w + 7].z
      utof r29.w, r20.w
      sample_l_indexable(texturecubearray)(float,float,float,float) r27.xzw, r29.xyzw, t8.xwyz, s2, r19.w
      and r32.xyz, r27.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r32.xyz, r32.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r19.w, r32.y, r32.x
      or r19.w, r32.z, r19.w
      movc r27.xzw, r19.wwww, l(1.000000,0,1.000000,0), r27.xxzw
      dp3 r32.x, r17.yzwy, r28.xyzx
      dp3 r32.y, r17.yzwy, r30.xyzx
      dp3 r32.z, r17.yzwy, r31.xyzx
      mad_sat r17.yzw, r32.xxyz, cb10[r18.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r32.xy, r17.yzyy, cb10[r18.w + 4].zwzz
      mul r32.z, r17.w, cb10[r18.w + 5].x
      add r17.yzw, r32.xxyz, cb10[r18.w + 5].yyzw
      dp3 r29.x, r11.xyzx, r28.xyzx
      dp3 r29.y, r11.xyzx, r30.xyzx
      dp3 r29.z, r11.xyzx, r31.xyzx
      lt r28.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r29.xyzx
      movc r19.z, r28.x, l(0), l(0.500000)
      add r30.xyz, r17.yzwy, r19.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r30.xyz, r30.xyzx, t17.xyzw, s4, l(0.000000)
      mul r31.xyz, r29.xyzx, r29.xyzx
      mul r31.xyz, r18.xxxx, r31.xyzx
      movc r21.z, r28.y, l(0), l(0.500000)
      add r28.xyw, r17.yzyw, r21.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r28.xyw, r28.xywx, t18.xywz, s4, l(0.000000)
      mul r28.xyw, r31.yyyy, r28.xyxw
      mad r28.xyw, r30.xyxz, r31.xxxx, r28.xyxw
      movc r22.z, r28.z, l(0), l(0.500000)
      add r17.yzw, r17.yyzw, r22.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r17.yzw, r17.yzwy, t19.wxyz, s4, l(0.000000)
      mad r17.yzw, r17.yyzw, r31.zzzz, r28.xxyw
      sample_l_indexable(texturecubearray)(float,float,float,float) r28.xyz, r29.xyzw, t8.xyzw, s2, l(6.000000)
      and r29.xyz, r28.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r29.xyz, r29.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r18.w, r29.y, r29.x
      or r18.w, r29.z, r18.w
      movc r28.xyz, r18.wwww, l(1.000000,1.000000,0,0), r28.xyzx
      mul r29.xyz, r17.yzwy, r28.xyzx
      dp3 r18.w, r29.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r15.yzw, r17.yyzw, r28.xxyz, r15.yyzw
      mul r17.y, r12.w, r18.w
      mul r27.xzw, r18.xxxx, r27.xxzw
      dp3 r17.z, r27.xzwx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r17.z, r12.w, r18.w, r17.z
      div r17.y, r17.y, r17.z
      mad r25.xyz, r27.xzwx, r17.yyyy, r25.xyzx
    else 
      mov r26.x, r20.x
      mov r20.xy, r26.xyxx
    endif 
  endif 
  iadd r14.w, r14.w, l(1)
endloop 
ge r0.x, r24.z, l(1.000000)
bfi r7.w, l(8), l(0), r20.y, r24.w
movc r0.x, r0.x, r7.w, r20.y
max r7.w, r20.x, l(1.000000)
rcp r7.w, r7.w
mov_sat r20.x, r20.x
mul r17.xyz, r7.wwww, r15.yzwy
mul r18.xyz, r7.wwww, r25.xyzx
lt r10.w, r20.x, l(0.990000)
if_nz r10.w
  iadd r0.x, r0.x, l(256)
  add r10.w, -r20.x, l(1.000000)
  mul r12.w, r10.w, cb2[19].x
  add r19.xyz, r5.xyzx, -cb2[35].xyzx
  mul r20.x, r19.x, cb2[35].w
  mul r20.yz, r19.yyzy, cb2[36].xxyx
  add_sat r19.xyz, r20.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r20.xy, r19.xyxx, cb2[36].zwzz
  mul r20.z, r19.z, cb2[37].x
  add r19.xyz, r20.xyzx, cb2[37].yzwy
  lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r20.xyz, r20.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r20.w, l(0)
  add r21.xyz, r19.xyzx, r20.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t17.xyzw, s4, l(0.000000)
  mul r22.xyz, r11.xyzx, r11.xyzx
  mul r22.xyz, r12.wwww, r22.xyzx
  add r23.xyz, r19.xyzx, r20.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r23.xyz, r23.xyzx, t18.xyzw, s4, l(0.000000)
  mul r23.xyz, r22.yyyy, r23.xyzx
  mad r21.xyz, r21.xyzx, r22.xxxx, r23.xyzx
  add r19.xyz, r19.xyzx, r20.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t19.xyzw, s4, l(0.000000)
  mad r19.xyz, r19.xyzx, r22.zzzz, r21.xyzx
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r19.xyz, r19.xyzx, r20.xyzx
  dp3 r11.w, r19.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r17.xyz, r15.yzwy, r7.wwww, r19.xyzx
  mov r16.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r16.xyzw, t8.wxyz, s2, r9.w
  mad r7.w, cb2[19].x, r10.w, -r11.w
  mad r7.w, r2.y, r7.w, r11.w
  mad r18.xyz, r15.yzwy, r7.wwww, r18.xyzx
endif 
add r7.w, r4.z, r2.x
log r7.w, |r7.w|
mul r7.w, r2.w, r7.w
exp r7.w, r7.w
add r7.w, r4.z, r7.w
add_sat r7.w, r7.w, l(-1.000000)
mul r17.xyz, r4.zzzz, r17.xyzx
mad r14.yw, r2.xxxy, l(0.000000, 0.984375, 0.000000, 0.984375), l(0.000000, 0.00781250, 0.000000, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r14.yw, r14.ywyy, t5.zxwy, s2, l(0.000000)
mul r15.yzw, r7.wwww, r18.xxyz
mul r18.xyz, r14.yyyy, r15.zwyz
mul r15.yzw, r14.wwww, r15.yyzw
sqrt r2.y, r2.w
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r4.z, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r7.w, r2.x, r2.y, r4.z
mul r2.y, r2.y, r7.w
mul r4.z, r4.z, r7.w
if_nz r3.z
  mov r19.x, l(3)
  mov r19.yzw, cb1[24].xxyz
  store_structured u2.xyzw, cb2[52].x, l(112), r19.xyzw
endif 
lt r7.w, l(0.000000), r6.w
if_nz r7.w
  if_nz r3.z
    ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r7.w, cb2[52].x, l(112), u2.xxxx
    or r7.w, r7.w, l(4)
    store_structured u2.x, cb2[52].x, l(112), r7.w
    store_structured u2.x, cb2[52].x, l(128), r8.w
  endif 
  lt r7.w, l(0.000000), r8.w
  if_nz r7.w
    mul r7.w, r2.z, cb2[18].w
    mul r7.w, r6.w, r7.w
    if_nz cb2[23].x
      add r19.xyz, r5.xyzx, cb1[24].xyzx
      mov r19.w, l(1.000000)
      dp4 r9.w, cb2[24].xyzw, r19.xyzw
      dp4 r10.w, cb2[25].xyzw, r19.xyzw
      frc r19.x, r9.w
      frc r19.y, r10.w
      iadd r9.w, l(-1), cb2[23].x
      utof r19.z, r9.w
      sample_l_indexable(texture2darray)(float,float,float,float) r19.xyz, r19.xyzx, t20.xyzw, s2, l(0.000000)
      add r19.xyz, r19.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r19.xyz, cb2[23].yyyy, r19.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r19.xyz, r19.xyzx, cb2[18].xyzx
    else 
      mov r19.xyz, cb2[18].xyzx
    endif 
    ushr r9.w, cb2[53].x, l(16)
    ult r10.w, l(0), r9.w
    and r10.w, r1.z, r10.w
    if_nz r10.w
      iadd r9.w, r9.w, cb2[0].x
      imad r9.w, r9.w, l(15), l(-15)
      mad r10.w, |r3.w|, l(-0.200000), l(0.400000)
      mad r20.xyz, r11.xyzx, r10.wwww, r5.xyzx
      mov r21.xyz, cb9[r9.w + 4].yzwy
      mov r21.w, cb9[r9.w + 5].x
      mov r20.w, l(1.000000)
      dp4 r21.x, r21.xyzw, r20.xyzw
      mov r22.xyz, cb9[r9.w + 5].yzwy
      mov r22.w, cb9[r9.w + 6].x
      dp4 r21.y, r22.xyzw, r20.xyzw
      mad r14.yw, r21.xxxy, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
      add r21.x, r14.y, cb9[r9.w + 9].w
      add r21.y, r14.w, cb9[r9.w + 10].x
      mul r14.yw, r21.xxxy, cb9[r9.w + 9].yyyz
      div r21.xy, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].ywyy
      add r21.zw, -r21.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      ge r21.zw, r14.yyyw, r21.zzzw
      ge r21.xy, r21.xyxx, r14.ywyy
      or r21.xy, r21.xyxx, r21.zwzz
      or r10.w, r21.y, r21.x
      if_z r10.w
        mov r21.xyz, cb9[r9.w + 6].yzwy
        mov r21.w, cb9[r9.w + 7].x
        dp4 r10.w, r21.xyzw, r20.xyzw
        mov_sat r14.yw, r14.yyyw
        mad r20.x, r14.y, cb9[r9.w + 8].y, cb9[r9.w + 8].z
        mad r20.y, r14.w, cb9[r9.w + 8].w, cb9[r9.w + 9].x
        add r10.w, r10.w, cb9[r9.w + 10].y
        div r10.w, r10.w, cb9[r9.w + 10].z
        max r10.w, r10.w, l(0.00006104)
        and r11.w, l(0x0000ffff), cb9[r9.w + 1].w
        if_nz cb2[58].y
          mov r21.x, -r3.x
          utof r22.z, r11.w
          mov r21.y, r13.x
          mov r21.z, r3.x
          mov r12.w, l(0)
          mov r13.w, l(0)
          loop 
            ige r14.y, r13.w, l(8)
            breakc_nz r14.y
            dp2 r23.x, icb[r13.w + 0].yxyy, r21.xyxx
            dp2 r23.y, icb[r13.w + 0].yxyy, r21.yzyy
            mad r22.xy, r23.xyxx, cb9[r9.w + 3].yyyy, r20.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.y, r22.xyzx, t9.xxxx, s13, r10.w
            mad r12.w, r14.y, l(0.125000), r12.w
            iadd r13.w, r13.w, l(1)
          endloop 
        else 
          utof r20.z, r11.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r20.xyzx, t9.xxxx, s13, r10.w
        endif 
        mul r9.w, r12.w, r12.w
        mul r9.w, r12.w, r9.w
      else 
        mov r9.w, l(1.000000)
      endif 
      mul r8.w, r8.w, r9.w
    else 
      and r9.w, cb2[53].x, l(0x0000ffff)
      ult r10.w, l(0), r9.w
      not r11.w, r1.z
      and r10.w, r10.w, r11.w
      if_nz r10.w
        iadd r9.w, r9.w, cb2[0].x
        imad r9.w, r9.w, l(15), l(-15)
        mad r10.w, |r3.w|, l(-0.200000), l(0.400000)
        mad r20.xyz, r11.xyzx, r10.wwww, r5.xyzx
        mov r21.xyz, cb9[r9.w + 4].yzwy
        mov r21.w, cb9[r9.w + 5].x
        mov r20.w, l(1.000000)
        dp4 r21.x, r21.xyzw, r20.xyzw
        mov r22.xyz, cb9[r9.w + 5].yzwy
        mov r22.w, cb9[r9.w + 6].x
        dp4 r21.y, r22.xyzw, r20.xyzw
        mad r14.yw, r21.xxxy, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
        add r21.x, r14.y, cb9[r9.w + 9].w
        add r21.y, r14.w, cb9[r9.w + 10].x
        mul r14.yw, r21.xxxy, cb9[r9.w + 9].yyyz
        div r21.xy, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].ywyy
        add r21.zw, -r21.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
        ge r21.zw, r14.yyyw, r21.zzzw
        ge r21.xy, r21.xyxx, r14.ywyy
        or r21.xy, r21.xyxx, r21.zwzz
        or r10.w, r21.y, r21.x
        if_z r10.w
          mov r21.xyz, cb9[r9.w + 6].yzwy
          mov r21.w, cb9[r9.w + 7].x
          dp4 r10.w, r21.xyzw, r20.xyzw
          mov_sat r14.yw, r14.yyyw
          mad r20.x, r14.y, cb9[r9.w + 8].y, cb9[r9.w + 8].z
          mad r20.y, r14.w, cb9[r9.w + 8].w, cb9[r9.w + 9].x
          add r10.w, r10.w, cb9[r9.w + 10].y
          div r10.w, r10.w, cb9[r9.w + 10].z
          max r10.w, r10.w, l(0.00006104)
          and r11.w, l(0x0000ffff), cb9[r9.w + 1].w
          if_nz cb2[58].y
            mov r21.x, -r3.x
            utof r22.z, r11.w
            mov r21.y, r13.x
            mov r21.z, r3.x
            mov r12.w, l(0)
            mov r13.w, l(0)
            loop 
              ige r14.y, r13.w, l(8)
              breakc_nz r14.y
              dp2 r23.x, icb[r13.w + 0].yxyy, r21.xyxx
              dp2 r23.y, icb[r13.w + 0].yxyy, r21.yzyy
              mad r22.xy, r23.xyxx, cb9[r9.w + 3].yyyy, r20.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.y, r22.xyzx, t9.xxxx, s13, r10.w
              mad r12.w, r14.y, l(0.125000), r12.w
              iadd r13.w, r13.w, l(1)
            endloop 
          else 
            utof r20.z, r11.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r20.xyzx, t9.xxxx, s13, r10.w
          endif 
          mul r9.w, r12.w, r12.w
          mul r9.w, r12.w, r9.w
        else 
          mov r9.w, l(1.000000)
        endif 
        mul r8.w, r8.w, r9.w
      endif 
    endif 
    mad r9.w, -r2.x, l(0.500000), l(1.000000)
    mad r9.w, -r6.w, r9.w, l(1.000000)
    mul r9.w, r9.w, r9.w
    mad r9.w, -r9.w, l(0.620000), l(0.620000)
    add r9.w, -r6.w, r9.w
    mad r9.w, r2.w, r9.w, r6.w
    mul r9.w, r8.w, r9.w
    lt r3.w, l(0.000000), r3.w
    mad r20.xyz, r9.wwww, r19.xyzx, r17.xyzx
    mad r21.xyz, -r5.xyzx, r1.wwww, cb2[17].xyzx
    dp3 r1.w, r21.xyzx, r21.xyzx
    rsq r1.w, r1.w
    mul r21.xyz, r1.wwww, r21.xyzx
    dp3 r1.w, r21.xyzx, r12.xyzx
    dp3 r9.w, r11.xyzx, r21.xyzx
    mad r10.w, |r9.w|, r2.z, -|r9.w|
    mad r9.w, |r9.w|, r10.w, l(1.000000)
    mad r6.w, r6.w, r2.y, r4.z
    mul r9.w, r9.w, r9.w
    mul r6.w, r6.w, r9.w
    rcp r6.w, r6.w
    mul r6.w, r7.w, r6.w
    mul r6.w, r6.w, r8.w
    mul r6.w, r6.w, l(0.250000)
    mad r21.xyz, r6.wwww, r19.xyzx, r15.yzwy
    add_sat r1.w, -r1.w, l(1.000000)
    mul r7.w, r1.w, r1.w
    mul r7.w, r7.w, r7.w
    mul r1.w, r1.w, r7.w
    mul r1.w, r1.w, r6.w
    mad r19.xyz, r1.wwww, r19.yzxy, r18.xyzx
    mov r20.w, r19.z
    mov r17.w, r18.z
    movc r17.xyzw, r3.wwww, r20.xyzw, r17.xyzw
    mov r19.zw, r21.xxxy
    mov r18.zw, r15.yyyz
    movc r19.xyzw, r3.wwww, r19.xyzw, r18.xyzw
    movc r15.w, r3.w, r21.z, r15.w
    if_nz r3.z
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r1.w, cb2[52].x, l(112), u2.xxxx
      or r1.w, r1.w, l(8)
      store_structured u2.x, cb2[52].x, l(112), r1.w
      store_structured u2.x, cb2[52].x, l(132), r8.w
    endif 
    mov r18.z, r17.w
    mov r18.xy, r19.xyxx
    mov r15.yz, r19.zzwz
    mov r1.w, l(0x00010101)
  else 
    mov r1.w, l(257)
  endif 
else 
  mov r1.w, l(1)
endif 
mov r19.x, -r3.x
not r3.w, r1.z
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r20.x, l(2)
mov r21.x, l(2)
mov r5.w, l(1.000000)
mov r22.w, l(1.000000)
mov r19.z, r3.x
mov r23.w, l(1.000000)
mov r24.z, l(1.000000)
mov r25.w, l(1.000000)
mov r19.yw, r13.xxxx
mov r3.y, r19.w
mov r26.w, l(1.000000)
mov r13.y, r19.x
mov r13.z, r3.x
mov r27.w, l(1.000000)
mov r28.x, r13.x
mov r28.y, r19.x
mov r28.z, r3.x
mov r29.x, r13.x
mov r29.y, r19.x
mov r29.z, r3.x
mov r30.x, r13.x
mov r30.y, r19.x
mov r30.z, r3.x
mov r31.xyz, r17.xyzx
mov r32.xyz, r18.zxyz
mov r33.xyz, r15.yzwy
mov r6.w, r1.w
mov r7.w, l(0)
loop 
  ieq r8.w, r7.w, l(2)
  breakc_nz r8.w
  movc r8.w, r7.w, r0.y, r14.z
  imul null, r8.w, r8.w, l(15)
  ubfe r9.w, l(3), l(24), cb9[r8.w + 1].w
  switch r9.w
    case l(4)
    if_nz r3.z
      and r9.w, r6.w, l(7)
      imad r9.w, r9.w, l(24), l(112)
      add r20.yzw, cb1[24].xxyz, cb9[r8.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r9.w, r20.xyzw
    endif 
    iadd r9.w, r6.w, l(1)
    lt r10.w, l(0.000000), cb9[r8.w + 6].y
    mov r34.xy, cb9[r8.w + 5].zwzz
    mov r34.z, cb9[r8.w + 6].x
    mad r20.yzw, -r34.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r8.w + 0].xxyz
    add r35.xyz, -r5.xyzx, r20.yzwy
    dp3 r11.w, r34.xyzx, r35.xyzx
    div_sat r12.w, -r11.w, cb9[r8.w + 6].y
    mad r36.xyz, r12.wwww, r34.xyzx, r20.yzwy
    movc r36.xyz, r10.wwww, r36.xyzx, cb9[r8.w + 0].xyzx
    add r36.xyz, -r5.xyzx, r36.xyzx
    dp3 r13.w, r36.xyzx, r36.xyzx
    rsq r14.y, r13.w
    mul r36.xyz, r14.yyyy, r36.xyzx
    dp3 r14.y, r11.xyzx, r36.xyzx
    mov_sat r14.w, r14.y
    lt r16.w, l(0.000000), r14.w
    if_nz r16.w
      sqrt r16.w, r13.w
      mul r17.w, cb9[r8.w + 3].x, cb9[r8.w + 3].x
      div r13.w, r17.w, r13.w
      min r13.w, r13.w, l(1.000000)
      mad_sat r36.xy, r16.wwww, cb9[r8.w + 2].xzxx, cb9[r8.w + 2].ywyy
      mul r36.zw, r36.xxxy, r36.xxxy
      mad r36.xy, r36.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r36.xy, r36.xyxx, r36.zwzz
      mul r13.w, r13.w, r36.x
      mul r13.w, r36.y, r13.w
      lt r16.w, l(0.000000), r13.w
      if_nz r16.w
        ubfe r16.w, l(3), l(27), cb9[r8.w + 1].w
        and r17.w, r9.w, l(15)
        iadd r18.w, r17.w, l(-1)
        ult r18.w, r18.w, l(32)
        and r18.w, r3.z, r18.w
        if_nz r18.w
          imad r36.xy, r17.wwww, l(24, 24, 0, 0), l(88, 104, 0, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.w, cb2[52].x, r36.x, u2.xxxx
          or r17.w, r17.w, l(4)
          store_structured u2.x, cb2[52].x, r36.x, r17.w
          store_structured u2.x, cb2[52].x, r36.y, r13.w
        endif 
        iadd r17.w, r6.w, l(257)
        ine r16.w, r16.w, l(1)
        if_nz r16.w
          mad r16.w, |r14.y|, l(-0.200000), l(0.400000)
          mad r36.xyz, r11.xyzx, r16.wwww, r5.xyzx
          add r36.xyz, r36.xyzx, -cb9[r8.w + 4].yzwy
          max r16.w, |r36.z|, |r36.y|
          max r16.w, r16.w, |r36.x|
          div r16.w, cb9[r8.w + 5].x, r16.w
          add r16.w, r16.w, cb9[r8.w + 5].y
          dp3 r18.w, r36.xyzx, r36.xyzx
          rsq r18.w, r18.w
          max r16.w, r16.w, l(0.00006104)
          and r24.w, l(0x0000ffff), cb9[r8.w + 1].w
          utof r37.w, r24.w
          mov r24.w, l(0)
          mov r28.w, l(0)
          loop 
            ige r29.w, r28.w, l(8)
            breakc_nz r29.w
            dp2 r38.y, icb[r28.w + 0].yxyy, r19.xyxx
            dp2 r38.z, icb[r28.w + 0].yxyy, r19.yzyy
            mul r38.yz, r38.yyzy, cb9[r8.w + 3].yyyy
            mul r38.x, r15.x, r38.y
            mul r38.w, r14.x, r38.y
            mad r37.xyz, r36.xyzx, r18.wwww, r38.xzwx
            sample_c_lz_indexable(texturecubearray)(float,float,float,float) r29.w, r37.xyzw, t10.xxxx, s13, r16.w
            mad r24.w, r29.w, l(0.125000), r24.w
            iadd r28.w, r28.w, l(1)
          endloop 
        else 
          mov r24.w, l(1.000000)
        endif 
        mul r13.w, r13.w, r24.w
        lt r16.w, l(0.000000), r13.w
        if_nz r16.w
          mul r16.w, r2.z, cb9[r8.w + 1].z
          mul r16.w, r16.w, l(0.250000)
          dp3 r18.w, r34.xyzx, r16.xyzx
          dp3 r28.w, r16.xyzx, r35.xyzx
          mad r29.w, -r18.w, r18.w, cb9[r8.w + 6].y
          mad r11.w, r18.w, r28.w, -r11.w
          div_sat r11.w, r11.w, r29.w
          div r18.w, r29.w, cb9[r8.w + 6].y
          mul r18.w, r18.w, l(10.000000)
          min r18.w, r18.w, l(1.000000)
          add r11.w, -r12.w, r11.w
          mad r11.w, r18.w, r11.w, r12.w
          mad r20.yzw, r11.wwww, r34.xxyz, r20.yyzw
          movc r20.yzw, r10.wwww, r20.yyzw, cb9[r8.w + 0].xxyz
          add r20.yzw, -r5.xxyz, r20.yyzw
          dp3 r10.w, r20.yzwy, r20.yzwy
          rsq r10.w, r10.w
          mul r34.xyz, r10.wwww, r20.yzwy
          ubfe r11.w, l(4), l(16), cb9[r8.w + 1].w
          ult r12.w, l(0), r11.w
          and r12.w, r1.z, r12.w
          if_nz r12.w
            iadd r11.w, r11.w, cb2[0].x
            imad r11.w, r11.w, l(15), l(-15)
            mad r12.w, |r14.y|, l(-0.200000), l(0.400000)
            mad r22.xyz, r11.xyzx, r12.wwww, r5.xyzx
            mov r35.xyz, cb9[r11.w + 6].yzwy
            mov r35.w, cb9[r11.w + 7].x
            dp4 r12.w, r35.xyzw, r22.xyzw
            mov r35.xyz, cb9[r11.w + 7].yzwy
            mov r35.w, cb9[r11.w + 8].x
            dp4 r18.w, r35.xyzw, r22.xyzw
            lt r28.w, r18.w, r12.w
            if_z r28.w
              mov r35.xyz, cb9[r11.w + 4].yzwy
              mov r35.w, cb9[r11.w + 5].x
              dp4 r35.x, r35.xyzw, r22.xyzw
              mov r36.xyz, cb9[r11.w + 5].yzwy
              mov r36.w, cb9[r11.w + 6].x
              dp4 r35.y, r36.xyzw, r22.xyzw
              div r22.xy, r35.xyxx, r18.wwww
              mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r35.x, r22.x, cb9[r11.w + 9].w
              add r35.y, r22.y, cb9[r11.w + 10].x
              mul r22.xy, r35.xyxx, cb9[r11.w + 9].yzyy
              div r35.xy, cb9[r11.w + 3].yyyy, cb9[r11.w + 8].ywyy
              add r35.zw, -r35.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              ge r35.zw, r22.xxxy, r35.zzzw
              ge r35.xy, r35.xyxx, r22.xyxx
              or r35.xy, r35.xyxx, r35.zwzz
              or r22.z, r35.y, r35.x
              if_z r22.z
                mov_sat r22.xy, r22.xyxx
                mad r35.x, r22.x, cb9[r11.w + 8].y, cb9[r11.w + 8].z
                mad r35.y, r22.y, cb9[r11.w + 8].w, cb9[r11.w + 9].x
                mul r22.x, r18.w, cb9[r11.w + 10].z
                mad r12.w, cb9[r11.w + 10].y, r18.w, r12.w
                div r12.w, r12.w, r22.x
              endif 
            else 
              mov r22.z, l(-1)
            endif 
            or r18.w, r28.w, r22.z
            if_z r18.w
              max r12.w, r12.w, l(0.00006104)
              and r18.w, l(0x0000ffff), cb9[r11.w + 1].w
              if_nz cb2[58].y
                utof r22.z, r18.w
                mov r28.w, l(0)
                mov r29.w, l(0)
                loop 
                  ige r30.w, r29.w, l(8)
                  breakc_nz r30.w
                  dp2 r36.x, icb[r29.w + 0].yxyy, r19.xwxx
                  dp2 r36.y, icb[r29.w + 0].xyxx, r3.xyxx
                  mad r22.xy, r36.xyxx, cb9[r11.w + 3].yyyy, r35.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r12.w
                  mad r28.w, r22.x, l(0.125000), r28.w
                  iadd r29.w, r29.w, l(1)
                endloop 
              else 
                utof r35.z, r18.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r28.w, r35.xyzx, t9.xxxx, s13, r12.w
              endif 
              mul r11.w, r28.w, r28.w
              mul r11.w, r28.w, r11.w
            else 
              mov r11.w, l(1.000000)
            endif 
            mul r13.w, r11.w, r13.w
          else 
            ubfe r11.w, l(4), l(20), cb9[r8.w + 1].w
            ult r12.w, l(0), r11.w
            and r12.w, r3.w, r12.w
            if_nz r12.w
              iadd r11.w, r11.w, cb2[0].x
              imad r11.w, r11.w, l(15), l(-15)
              mad r12.w, |r14.y|, l(-0.200000), l(0.400000)
              mad r23.xyz, r11.xyzx, r12.wwww, r5.xyzx
              mov r35.xyz, cb9[r11.w + 6].yzwy
              mov r35.w, cb9[r11.w + 7].x
              dp4 r12.w, r35.xyzw, r23.xyzw
              mov r35.xyz, cb9[r11.w + 7].yzwy
              mov r35.w, cb9[r11.w + 8].x
              dp4 r18.w, r35.xyzw, r23.xyzw
              lt r22.x, r18.w, r12.w
              if_z r22.x
                mov r35.xyz, cb9[r11.w + 4].yzwy
                mov r35.w, cb9[r11.w + 5].x
                dp4 r35.x, r35.xyzw, r23.xyzw
                mov r36.xyz, cb9[r11.w + 5].yzwy
                mov r36.w, cb9[r11.w + 6].x
                dp4 r35.y, r36.xyzw, r23.xyzw
                div r22.yz, r35.xxyx, r18.wwww
                mad r22.yz, r22.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r23.x, r22.y, cb9[r11.w + 9].w
                add r23.y, r22.z, cb9[r11.w + 10].x
                mul r22.yz, r23.xxyx, cb9[r11.w + 9].yyzy
                div r23.xy, cb9[r11.w + 3].yyyy, cb9[r11.w + 8].ywyy
                add r35.xy, -r23.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r35.xy, r22.yzyy, r35.xyxx
                ge r23.xy, r23.xyxx, r22.yzyy
                or r23.xy, r23.xyxx, r35.xyxx
                or r23.x, r23.y, r23.x
                if_z r23.x
                  mov_sat r22.yz, r22.yyzy
                  mad r35.x, r22.y, cb9[r11.w + 8].y, cb9[r11.w + 8].z
                  mad r35.y, r22.z, cb9[r11.w + 8].w, cb9[r11.w + 9].x
                  mul r22.y, r18.w, cb9[r11.w + 10].z
                  mad r12.w, cb9[r11.w + 10].y, r18.w, r12.w
                  div r12.w, r12.w, r22.y
                endif 
              else 
                mov r23.x, l(-1)
              endif 
              or r18.w, r22.x, r23.x
              if_z r18.w
                max r12.w, r12.w, l(0.00006104)
                and r18.w, l(0x0000ffff), cb9[r11.w + 1].w
                if_nz cb2[58].y
                  utof r22.z, r18.w
                  mov r23.xy, l(0,0,0,0)
                  loop 
                    ige r23.z, r23.y, l(8)
                    breakc_nz r23.z
                    dp2 r36.x, icb[r23.y + 0].xyxx, r13.xyxx
                    dp2 r36.y, icb[r23.y + 0].yxyy, r13.xzxx
                    mad r22.xy, r36.xyxx, cb9[r11.w + 3].yyyy, r35.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r12.w
                    mad r23.x, r22.x, l(0.125000), r23.x
                    iadd r23.y, r23.y, l(1)
                  endloop 
                else 
                  utof r35.z, r18.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r35.xyzx, t9.xxxx, s13, r12.w
                endif 
                mul r11.w, r23.x, r23.x
                mul r11.w, r23.x, r11.w
              else 
                mov r11.w, l(1.000000)
              endif 
              mul r13.w, r11.w, r13.w
            endif 
          endif 
          mad r11.w, -r14.w, r2.x, l(1.000000)
          mul r11.w, r11.w, r11.w
          mad r11.w, -r11.w, l(0.620000), l(0.620000)
          add r11.w, -r14.w, r11.w
          mad r11.w, r2.w, r11.w, r14.w
          mul r11.w, r13.w, r11.w
          mov r22.x, cb9[r8.w + 0].w
          mov r22.yz, cb9[r8.w + 1].xxyx
          lt r12.w, l(0.000000), r14.y
          mad r35.xyz, r11.wwww, r22.xyzx, r31.xyzx
          dp3_sat r11.w, r11.xyzx, r34.xyzx
          mad r20.yzw, r20.yyzw, r10.wwww, r12.xxyz
          dp3 r10.w, r20.yzwy, r20.yzwy
          rsq r10.w, r10.w
          mul r20.yzw, r10.wwww, r20.yyzw
          dp3 r10.w, r20.yzwy, r12.xyzx
          dp3 r14.y, r11.xyzx, r20.yzwy
          mad r14.w, |r14.y|, r2.z, -|r14.y|
          mad r14.y, |r14.y|, r14.w, l(1.000000)
          mad r14.w, r11.w, r2.y, r4.z
          mul r14.y, r14.y, r14.y
          mul r14.y, r14.w, r14.y
          rcp r14.y, r14.y
          mul r11.w, r16.w, r11.w
          mul r11.w, r11.w, r14.y
          mul r11.w, r13.w, r11.w
          mad r20.yzw, r11.wwww, r22.xxyz, r33.xxyz
          add_sat r10.w, -r10.w, l(1.000000)
          mul r14.y, r10.w, r10.w
          mul r14.y, r14.y, r14.y
          mul r10.w, r10.w, r14.y
          mul r10.w, r10.w, r11.w
          mad r22.xyz, r10.wwww, r22.xyzx, r32.xyzx
          movc r31.xyz, r12.wwww, r35.xyzx, r31.xyzx
          movc r32.xyz, r12.wwww, r22.xyzx, r32.xyzx
          movc r33.xyz, r12.wwww, r20.yzwy, r33.xyzx
          and r10.w, r17.w, l(15)
          iadd r11.w, r10.w, l(-1)
          ult r11.w, r11.w, l(32)
          and r11.w, r3.z, r11.w
          if_nz r11.w
            imad r14.yw, r10.wwww, l(0, 24, 0, 24), l(0, 88, 0, 108)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r10.w, cb2[52].x, r14.y, u2.xxxx
            or r10.w, r10.w, l(8)
            store_structured u2.x, cb2[52].x, r14.y, r10.w
            store_structured u2.x, cb2[52].x, r14.w, r13.w
          endif 
          iadd r6.w, r6.w, l(0x00010101)
        else 
          mov r6.w, r17.w
        endif 
      else 
        mov r6.w, r9.w
      endif 
    else 
      mov r6.w, r9.w
    endif 
    break 
    case l(2)
    if_nz r3.z
      and r9.w, r6.w, l(7)
      imad r9.w, r9.w, l(24), l(112)
      add r21.yzw, cb1[24].xxyz, cb9[r8.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r9.w, r21.xyzw
    endif 
    iadd r9.w, r6.w, l(1)
    add r22.xy, -r5.xyxx, cb9[r8.w + 3].zwzz
    add r22.z, -r5.z, cb9[r8.w + 4].x
    dp3 r10.w, r22.xyzx, r22.xyzx
    rsq r10.w, r10.w
    mul r20.yzw, r10.wwww, r22.xxyz
    dp3 r11.w, r11.xyzx, r20.yzwy
    mov_sat r12.w, r11.w
    lt r13.w, l(0.000000), r12.w
    if_nz r13.w
      mov r34.xyz, cb9[r8.w + 7].yzwy
      mov r34.w, cb9[r8.w + 8].x
      dp4 r13.w, r34.xyzw, r5.xyzw
      lt r14.y, r13.w, l(1.000000)
      if_nz r14.y
        mov r20.yzw, l(0,1.000000,1.000000,1.000000)
        mov r14.y, l(0)
      else 
        add r21.yzw, -r5.xxyz, cb9[r8.w + 0].xxyz
        mul r14.w, cb9[r8.w + 3].x, cb9[r8.w + 3].x
        dp3 r16.w, r21.yzwy, r21.yzwy
        div r14.w, r14.w, r16.w
        min r14.w, r14.w, l(1.000000)
        mad_sat r21.yz, r13.wwww, cb9[r8.w + 2].xxzx, cb9[r8.w + 2].yywy
        mul r23.yz, r21.yyzy, r21.yyzy
        mad r21.yz, r21.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
        mul r21.yz, r21.yyzy, r23.yyzy
        mul r14.w, r14.w, r21.y
        mul r14.w, r21.z, r14.w
        mov r35.xyz, cb9[r8.w + 4].yzwy
        mov r35.w, cb9[r8.w + 5].x
        dp4 r35.x, r35.xyzw, r5.xyzw
        mov r36.xyz, cb9[r8.w + 5].yzwy
        mov r36.w, cb9[r8.w + 6].x
        dp4 r35.y, r36.xyzw, r5.xyzw
        div r24.xy, r35.xyxx, r13.wwww
        lt r13.w, cb9[r8.w + 10].w, l(0.00048828)
        if_nz r13.w
          mad_sat r21.yz, |r24.xxyx|, cb9[r8.w + 12].xxyx, cb9[r8.w + 12].zzwz
          mul r23.yz, r21.yyzy, r21.yyzy
          mad r21.yz, r21.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
          mul r21.yz, r21.yyzy, r23.yyzy
          mul r13.w, r21.z, r21.y
        else 
          mul_sat r35.xyzw, |r24.yyxx|, cb9[r8.w + 11].xyzw
          log r35.xyzw, r35.xyzw
          mul r35.xyzw, r35.xyzw, cb9[r8.w + 12].zzzz
          exp r35.xyzw, r35.xyzw
          add r21.yz, r35.zzwz, r35.xxyx
          log r21.yz, r21.yyzy
          mul r21.yz, r21.yyzy, cb9[r8.w + 12].wwww
          exp r21.yz, r21.yyzy
          mul r16.w, r21.y, cb9[r8.w + 12].x
          mad r17.w, cb9[r8.w + 12].y, r21.z, l(-1.000000)
          mad r16.w, cb9[r8.w + 12].y, r21.z, -r16.w
          div_sat r16.w, r17.w, r16.w
          mul r17.w, r16.w, r16.w
          mad r16.w, r16.w, l(-2.000000), l(3.000000)
          mul r13.w, r16.w, r17.w
        endif 
        mul r14.y, r13.w, r14.w
        and r13.w, l(255), cb9[r8.w + 14].w
        if_nz r13.w
          dp3 r14.w, cb9[r8.w + 13].xyzx, r24.xyzx
          mov r35.x, cb9[r8.w + 13].w
          mov r35.yz, cb9[r8.w + 14].xxyx
          dp3 r16.w, r35.xyzx, r24.xyzx
          frc r35.x, r14.w
          frc r35.y, r16.w
          iadd r13.w, r13.w, l(-1)
          utof r35.z, r13.w
          sample_l_indexable(texture2darray)(float,float,float,float) r20.yzw, r35.xyzx, t20.wxyz, s2, l(0.000000)
        else 
          mov r20.yzw, l(0,1.000000,1.000000,1.000000)
        endif 
      endif 
      mov r35.x, cb9[r8.w + 0].w
      mov r35.yz, cb9[r8.w + 1].xxyx
      mul r20.yzw, r20.yyzw, r35.xxyz
      lt r13.w, l(0.000000), r14.y
      if_nz r13.w
        ubfe r13.w, l(3), l(27), cb9[r8.w + 1].w
        and r14.w, r9.w, l(15)
        iadd r16.w, r14.w, l(-1)
        ult r16.w, r16.w, l(32)
        and r16.w, r3.z, r16.w
        if_nz r16.w
          imad r21.yz, r14.wwww, l(0, 24, 24, 0), l(0, 88, 104, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r14.w, cb2[52].x, r21.y, u2.xxxx
          or r14.w, r14.w, l(4)
          store_structured u2.x, cb2[52].x, r21.y, r14.w
          store_structured u2.x, cb2[52].x, r21.z, r14.y
        endif 
        iadd r14.w, r6.w, l(257)
        ine r13.w, r13.w, l(1)
        if_nz r13.w
          mad r13.w, |r11.w|, l(-0.200000), l(0.400000)
          mad r25.xyz, r11.xyzx, r13.wwww, r5.xyzx
          mov r35.xyz, cb9[r8.w + 6].yzwy
          mov r35.w, cb9[r8.w + 7].x
          dp4 r13.w, r35.xyzw, r25.xyzw
          dp4 r16.w, r34.xyzw, r25.xyzw
          ge r17.w, r16.w, r13.w
          if_nz r17.w
            mov r34.xyz, cb9[r8.w + 4].yzwy
            mov r34.w, cb9[r8.w + 5].x
            dp4 r24.x, r34.xyzw, r25.xyzw
            mov r34.xyz, cb9[r8.w + 5].yzwy
            mov r34.w, cb9[r8.w + 6].x
            dp4 r24.y, r34.xyzw, r25.xyzw
            div r21.yz, r24.xxyx, r16.wwww
            mad_sat r21.yz, r21.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
            mad r25.x, r21.y, cb9[r8.w + 8].y, cb9[r8.w + 8].z
            mad r25.y, r21.z, cb9[r8.w + 8].w, cb9[r8.w + 9].x
            div r13.w, r13.w, r16.w
            max r13.w, r13.w, l(0.00006104)
            and r16.w, l(0x0000ffff), cb9[r8.w + 1].w
            if_nz cb2[58].y
              utof r34.z, r16.w
              mov r17.w, l(0)
              mov r18.w, l(0)
              loop 
                ige r21.y, r18.w, l(8)
                breakc_nz r21.y
                dp2 r24.x, icb[r18.w + 0].xyxx, r28.xyxx
                dp2 r24.y, icb[r18.w + 0].yxyy, r28.xzxx
                mad r34.xy, r24.xyxx, cb9[r8.w + 3].yyyy, r25.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.y, r34.xyzx, t9.xxxx, s13, r13.w
                mad r17.w, r21.y, l(0.125000), r17.w
                iadd r18.w, r18.w, l(1)
              endloop 
            else 
              utof r25.z, r16.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r25.xyzx, t9.xxxx, s13, r13.w
            endif 
            mul r13.w, r17.w, r17.w
            mul r13.w, r17.w, r13.w
          else 
            mov r13.w, l(1.000000)
          endif 
        else 
          mov r13.w, l(1.000000)
        endif 
        mul r13.w, r13.w, r14.y
        lt r14.y, l(0.000000), r13.w
        if_nz r14.y
          mul r14.y, r2.z, cb9[r8.w + 1].z
          mul r14.y, r12.w, r14.y
          ubfe r16.w, l(4), l(16), cb9[r8.w + 1].w
          ult r18.w, l(0), r16.w
          and r18.w, r1.z, r18.w
          if_nz r18.w
            iadd r16.w, r16.w, cb2[0].x
            imad r16.w, r16.w, l(15), l(-15)
            mad r18.w, |r11.w|, l(-0.200000), l(0.400000)
            mad r26.xyz, r11.xyzx, r18.wwww, r5.xyzx
            mov r34.xyz, cb9[r16.w + 6].yzwy
            mov r34.w, cb9[r16.w + 7].x
            dp4 r18.w, r34.xyzw, r26.xyzw
            mov r34.xyz, cb9[r16.w + 7].yzwy
            mov r34.w, cb9[r16.w + 8].x
            dp4 r21.y, r34.xyzw, r26.xyzw
            lt r21.z, r21.y, r18.w
            if_z r21.z
              mov r34.xyz, cb9[r16.w + 4].yzwy
              mov r34.w, cb9[r16.w + 5].x
              dp4 r24.x, r34.xyzw, r26.xyzw
              mov r34.xyz, cb9[r16.w + 5].yzwy
              mov r34.w, cb9[r16.w + 6].x
              dp4 r24.y, r34.xyzw, r26.xyzw
              div r23.yz, r24.xxyx, r21.yyyy
              mad r23.yz, r23.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
              add r24.x, r23.y, cb9[r16.w + 9].w
              add r24.y, r23.z, cb9[r16.w + 10].x
              mul r23.yz, r24.xxyx, cb9[r16.w + 9].yyzy
              div r24.xy, cb9[r16.w + 3].yyyy, cb9[r16.w + 8].ywyy
              add r25.xy, -r24.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r25.xy, r23.yzyy, r25.xyxx
              ge r24.xy, r24.xyxx, r23.yzyy
              or r24.xy, r24.xyxx, r25.xyxx
              or r21.w, r24.y, r24.x
              if_z r21.w
                mov_sat r23.yz, r23.yyzy
                mad r25.x, r23.y, cb9[r16.w + 8].y, cb9[r16.w + 8].z
                mad r25.y, r23.z, cb9[r16.w + 8].w, cb9[r16.w + 9].x
                mul r23.y, r21.y, cb9[r16.w + 10].z
                mad r18.w, cb9[r16.w + 10].y, r21.y, r18.w
                div r18.w, r18.w, r23.y
              endif 
            else 
              mov r21.w, l(-1)
            endif 
            or r21.y, r21.z, r21.w
            if_z r21.y
              max r18.w, r18.w, l(0.00006104)
              and r21.y, l(0x0000ffff), cb9[r16.w + 1].w
              if_nz cb2[58].y
                utof r26.z, r21.y
                mov r21.zw, l(0,0,0,0)
                loop 
                  ige r23.y, r21.w, l(8)
                  breakc_nz r23.y
                  dp2 r24.x, icb[r21.w + 0].xyxx, r29.xyxx
                  dp2 r24.y, icb[r21.w + 0].yxyy, r29.xzxx
                  mad r26.xy, r24.xyxx, cb9[r16.w + 3].yyyy, r25.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.y, r26.xyzx, t9.xxxx, s13, r18.w
                  mad r21.z, r23.y, l(0.125000), r21.z
                  iadd r21.w, r21.w, l(1)
                endloop 
              else 
                utof r25.z, r21.y
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.z, r25.xyzx, t9.xxxx, s13, r18.w
              endif 
              mul r16.w, r21.z, r21.z
              mul r16.w, r21.z, r16.w
            else 
              mov r16.w, l(1.000000)
            endif 
            mul r13.w, r13.w, r16.w
          else 
            ubfe r8.w, l(4), l(20), cb9[r8.w + 1].w
            ult r16.w, l(0), r8.w
            and r16.w, r3.w, r16.w
            if_nz r16.w
              iadd r8.w, r8.w, cb2[0].x
              imad r8.w, r8.w, l(15), l(-15)
              mad r16.w, |r11.w|, l(-0.200000), l(0.400000)
              mad r27.xyz, r11.xyzx, r16.wwww, r5.xyzx
              mov r34.xyz, cb9[r8.w + 6].yzwy
              mov r34.w, cb9[r8.w + 7].x
              dp4 r16.w, r34.xyzw, r27.xyzw
              mov r34.xyz, cb9[r8.w + 7].yzwy
              mov r34.w, cb9[r8.w + 8].x
              dp4 r18.w, r34.xyzw, r27.xyzw
              lt r21.y, r18.w, r16.w
              if_z r21.y
                mov r34.xyz, cb9[r8.w + 4].yzwy
                mov r34.w, cb9[r8.w + 5].x
                dp4 r24.x, r34.xyzw, r27.xyzw
                mov r34.xyz, cb9[r8.w + 5].yzwy
                mov r34.w, cb9[r8.w + 6].x
                dp4 r24.y, r34.xyzw, r27.xyzw
                div r23.yz, r24.xxyx, r18.wwww
                mad r23.yz, r23.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r24.x, r23.y, cb9[r8.w + 9].w
                add r24.y, r23.z, cb9[r8.w + 10].x
                mul r23.yz, r24.xxyx, cb9[r8.w + 9].yyzy
                div r24.xy, cb9[r8.w + 3].yyyy, cb9[r8.w + 8].ywyy
                add r25.xy, -r24.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r25.xy, r23.yzyy, r25.xyxx
                ge r24.xy, r24.xyxx, r23.yzyy
                or r24.xy, r24.xyxx, r25.xyxx
                or r21.w, r24.y, r24.x
                if_z r21.w
                  mov_sat r23.yz, r23.yyzy
                  mad r25.x, r23.y, cb9[r8.w + 8].y, cb9[r8.w + 8].z
                  mad r25.y, r23.z, cb9[r8.w + 8].w, cb9[r8.w + 9].x
                  mul r23.y, r18.w, cb9[r8.w + 10].z
                  mad r16.w, cb9[r8.w + 10].y, r18.w, r16.w
                  div r16.w, r16.w, r23.y
                endif 
              else 
                mov r21.w, l(-1)
              endif 
              or r18.w, r21.y, r21.w
              if_z r18.w
                max r16.w, r16.w, l(0.00006104)
                and r18.w, l(0x0000ffff), cb9[r8.w + 1].w
                if_nz cb2[58].y
                  utof r26.z, r18.w
                  mov r21.yw, l(0,0,0,0)
                  loop 
                    ige r23.y, r21.w, l(8)
                    breakc_nz r23.y
                    dp2 r24.x, icb[r21.w + 0].xyxx, r30.xyxx
                    dp2 r24.y, icb[r21.w + 0].yxyy, r30.xzxx
                    mad r26.xy, r24.xyxx, cb9[r8.w + 3].yyyy, r25.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.y, r26.xyzx, t9.xxxx, s13, r16.w
                    mad r21.y, r23.y, l(0.125000), r21.y
                    iadd r21.w, r21.w, l(1)
                  endloop 
                else 
                  utof r25.z, r18.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.y, r25.xyzx, t9.xxxx, s13, r16.w
                endif 
                mul r8.w, r21.y, r21.y
                mul r8.w, r21.y, r8.w
              else 
                mov r8.w, l(1.000000)
              endif 
              mul r13.w, r8.w, r13.w
            endif 
          endif 
          mad r8.w, -r12.w, r2.x, l(1.000000)
          mul r8.w, r8.w, r8.w
          mad r8.w, -r8.w, l(0.620000), l(0.620000)
          add r8.w, -r12.w, r8.w
          mad r8.w, r2.w, r8.w, r12.w
          mul r8.w, r13.w, r8.w
          lt r11.w, l(0.000000), r11.w
          mad r25.xyz, r8.wwww, r20.yzwy, r31.xyzx
          mad r22.xyz, r22.xyzx, r10.wwww, r12.xyzx
          dp3 r8.w, r22.xyzx, r22.xyzx
          rsq r8.w, r8.w
          mul r22.xyz, r8.wwww, r22.xyzx
          dp3 r8.w, r22.xyzx, r12.xyzx
          dp3 r10.w, r11.xyzx, r22.xyzx
          mad r16.w, |r10.w|, r2.z, -|r10.w|
          mad r10.w, |r10.w|, r16.w, l(1.000000)
          mad r12.w, r12.w, r2.y, r4.z
          mul r10.w, r10.w, r10.w
          mul r10.w, r12.w, r10.w
          rcp r10.w, r10.w
          mul r10.w, r14.y, r10.w
          mul r10.w, r10.w, r13.w
          mul r10.w, r10.w, l(0.250000)
          mad r22.xyz, r10.wwww, r20.yzwy, r33.xyzx
          add_sat r8.w, -r8.w, l(1.000000)
          mul r12.w, r8.w, r8.w
          mul r12.w, r12.w, r12.w
          mul r8.w, r8.w, r12.w
          mul r8.w, r8.w, r10.w
          mad r20.yzw, r8.wwww, r20.yyzw, r32.xxyz
          movc r31.xyz, r11.wwww, r25.xyzx, r31.xyzx
          movc r32.xyz, r11.wwww, r20.yzwy, r32.xyzx
          movc r33.xyz, r11.wwww, r22.xyzx, r33.xyzx
          and r8.w, r14.w, l(15)
          iadd r10.w, r8.w, l(-1)
          ult r10.w, r10.w, l(32)
          and r10.w, r3.z, r10.w
          if_nz r10.w
            imad r20.yz, r8.wwww, l(0, 24, 24, 0), l(0, 88, 108, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r8.w, cb2[52].x, r20.y, u2.xxxx
            or r8.w, r8.w, l(8)
            store_structured u2.x, cb2[52].x, r20.y, r8.w
            store_structured u2.x, cb2[52].x, r20.z, r13.w
          endif 
          iadd r6.w, r6.w, l(0x00010101)
        else 
          mov r6.w, r14.w
        endif 
      else 
        mov r6.w, r9.w
      endif 
    else 
      mov r6.w, r9.w
    endif 
    break 
    default 
    break 
  endswitch 
  iadd r7.w, r7.w, l(1)
endloop 
mad r2.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.y, r2.y
mad r3.xyw, r7.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r1.z, r3.x
ieq r1.z, r0.y, r1.z
movc r1.zw, r1.zzzz, r3.yyyw, l(0,0,-1.000000,0)
mad r3.xyw, r8.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r3.x, r3.x
ieq r3.x, r0.y, r3.x
movc r3.xy, r3.xxxx, r3.ywyy, l(-1.000000,0,0,0)
mad r4.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r3.w, r4.x
ieq r3.w, r0.y, r3.w
movc r4.xy, r3.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r7.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r3.w, r7.x
ieq r0.y, r0.y, r3.w
movc r4.zw, r0.yyyy, r7.yyyz, l(0,0,-1.000000,0)
mov r7.x, r1.z
mov r7.y, r3.x
mov r7.zw, r4.xxxz
add r7.xyzw, -r2.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.y, r7.y, r7.x
add r0.y, r7.z, r0.y
add r0.y, r7.w, r0.y
mul r1.z, r3.y, r7.y
mad r1.z, r7.x, r1.w, r1.z
mad r1.z, r7.z, r4.y, r1.z
mad r1.z, r7.w, r4.w, r1.z
div r2.w, r1.z, r0.y
ge r0.y, l(0.000000), r0.y
movc r2.yz, r0.yyyy, l(0,0,0,0), r2.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.y, r1.w, r1.z
movc r2.xyz, r0.yyyy, r2.xyzx, r2.xzyx
mad r0.y, -r2.z, l(0.500000), r2.x
add r4.y, r0.y, r2.z
mad r4.z, -r2.y, l(0.500000), r0.y
add r4.x, r2.y, r4.z
add r2.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, r32.xyzx
mad r2.xyz, r33.xyzx, r4.xyzx, r2.xyzx
mad r2.xyz, r31.xyzx, r6.xyzx, r2.xyzx
lt r0.y, l(0.000000), cb2[9].z
if_nz r0.y
  dp3 r0.y, r5.xyzx, r5.xyzx
  rsq r1.z, r0.y
  mul r3.xyw, r1.zzzz, r5.xyxz
  sqrt r0.y, r0.y
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.yyyy, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r5.z|
    mul r4.xy, r5.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r2.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r6.xyz, r1.wwww, cb2[12].xyzx
    exp r6.xyz, r6.xyzx
    add r6.xyz, -r4.xyzx, r6.xyzx
    mad r4.xyz, cb2[13].wwww, r6.xyzx, r4.xyzx
  else 
    mad r1.z, r0.y, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r5.z|
    mul r2.w, r5.z, cb2[15].z
    mul r4.w, r2.w, l(-1.442695)
    exp r4.w, r4.w
    add r4.w, -r4.w, l(1.000000)
    div r2.w, r4.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r6.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r6.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r3.xywx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.w, cb2[8].w, -r1.z, l(1.000000)
  mul r2.w, r2.w, r2.w
  mul r2.w, r2.w, l(12.566371)
  div r1.w, r1.w, r2.w
  add r0.y, r0.y, -cb2[10].w
  mul_sat r0.y, r0.y, cb2[11].w
  mul r0.y, r0.y, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r3.xyw, r0.yyyy, cb2[11].xyxz
  mad r3.xyw, r1.zzzz, cb2[10].xyxz, r3.xyxw
  mul r3.xyw, r3.xyxw, cb2[9].wwww
  add r6.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyw, r3.xyxw, r6.xyxz
  mad r3.xyw, r2.xyxz, r4.xyxz, r3.xyxw
else 
  mul r0.y, r5.z, cb2[6].x
  mad r1.z, cb2[6].x, r5.z, cb2[5].x
  lt r1.w, |r0.y|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r4.x, cb2[6].z
  lt r4.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r4.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.y, r1.w, l(1.000000), r0.y
  div r0.y, r1.z, r0.y
  movc r0.y, r1.w, r4.x, r0.y
  mul r0.y, r0.y, cb2[5].z
  dp3 r1.z, r5.xyzx, r5.xyzx
  sqrt r1.w, r1.z
  mad r0.y, r0.y, r1.w, cb2[5].w
  exp r0.y, r0.y
  min r0.y, r0.y, l(1.000000)
  add r0.y, -r0.y, l(1.000000)
  rsq r1.z, r1.z
  mul r4.xyz, r1.zzzz, r5.xyzx
  dp3 r1.z, cb2[7].yzwy, r4.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r1.zzzz, r4.xyzw, cb2[4].xyzw
  mul r0.y, r0.y, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyw, r0.yyyy, r4.xyxz, r2.xyxz
endif 
mul r2.xyz, r3.xywx, cb1[85].yyyy
ge r3.xyw, r2.xyxz, l(0.00006104, 0.00006104, 0.000000, 0.00006104)
and r2.xyz, r2.xyzx, r3.xywx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.y, l(0), cb2[55].w
and r4.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r4.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r4.ywyy, l(3, 12, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r4.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r1.z, cb2[55].w, l(16)
ine r1.w, r1.z, l(0)
ieq r1.z, r1.z, l(0)
and r1.z, r1.z, r1.w
and r4.z, r1.z, l(0x3e4ccccd)
mad r3.xyw, r4.xyxz, cb1[85].xxxx, -r2.xyxz
mad r3.xyw, r3.xyxw, l(0.500000, 0.500000, 0.000000, 0.500000), r2.xyxz
movc r2.xyz, r0.yyyy, r3.xywx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.y, r6.w, l(7)
      break 
      case l(2)
      ubfe r0.y, l(3), l(8), r6.w
      break 
      case l(3)
      ushr r0.y, r6.w, l(16)
      break 
      case l(4)
      and r0.y, r0.x, l(15)
      break 
      case l(5)
      ushr r0.y, r0.x, l(8)
      break 
      default 
      mov r0.y, l(0)
      break 
    endswitch 
    utof r0.y, r0.y
    mul r0.y, r0.y, cb2[53].z
    mad r3.xyw, r0.yyyy, l(0.500000, 0.500000, 0.000000, 0.500000), -r2.xyxz
    mad r2.xyz, cb2[53].wwww, r3.xywx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r3.z
  add r1.xyz, r5.xyzx, cb1[24].xyzx
  and r1.w, r6.w, l(7)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.y, r0.x, l(15)
  store_structured u2.x, cb2[52].x, l(108), r0.y
endif 
if_nz cb2[52].y
  and r0.y, r6.w, l(7)
  atomic_iadd g1, l(0), r0.y
  ubfe r1.x, l(3), l(8), r6.w
  atomic_iadd g1, l(4), r1.x
  ushr r1.y, r6.w, l(16)
  atomic_iadd g1, l(8), r1.y
  and r1.z, r0.x, l(15)
  atomic_iadd g1, l(12), r1.z
  ushr r0.x, r0.x, l(8)
  atomic_iadd g1, l(16), r0.x
  atomic_umax g2, l(0), r0.y
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), r1.z
  atomic_umax g2, l(16), r0.x
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.x, r1.x, l(63)
  if_nz r0.x
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.x, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.x
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.x, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.x
    ieq r0.yz, r0.zzwz, cb2[52].zzwz
    and r0.y, r0.z, r0.y
    if_nz r0.y
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.x
    endif 
  endif 
endif 
ret 
// Approximately 2087 instruction slots used
