//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:16 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4 [unused]
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4
//   float probeDebugRadius;            // Offset:  868 Size:     4
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4 [unused]
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 40
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(49), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r0.w, r1.xyww, t4.yzwx
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
utof r4.xy, r1.xyxx
add r4.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r4.z, r0.w, l(0.984375)
mul r4.w, r0.w, l(1.01587307)
mad r0.w, r0.w, l(64.000000), l(-63.000000)
movc r0.w, r4.z, r0.w, r4.w
max r0.w, r0.w, l(0.00000001)
rcp r0.w, r0.w
and r0.z, r0.w, r0.z
mul r4.zw, r4.xxxy, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r5.xyzw, r4.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r4.zwzz, t28.xyzw, s4.x
mul r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r4.zw, r4.zzzw
add r7.xy, -r4.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r8.y, r7.x, r7.y
mul r8.xz, r4.zzwz, r7.xxyx
mul r8.w, r4.w, r4.z
dp4 r0.w, r5.xyzw, r8.xyzw
add r6.xyzw, -r0.zzzz, r6.xyzw
min r4.z, |r6.w|, |r6.z|
min r4.z, r4.z, |r6.y|
min r4.z, r4.z, |r6.x|
max r4.w, |r6.w|, |r6.z|
max r4.w, r4.w, |r6.y|
max r4.w, r4.w, |r6.x|
eq r6.xyz, r4.zzzz, |r6.yzwy|
movc r4.z, r6.x, r5.y, r5.x
movc r4.z, r6.y, r5.z, r4.z
movc r4.z, r6.z, r5.w, r4.z
mul r5.x, r0.z, l(0.010000)
lt r4.w, r5.x, r4.w
movc r0.w, r4.w, r4.z, r0.w
mul r0.w, r0.w, r3.z
if_nz cb2[55].x
  mul r3.z, r0.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r3.zzzz
  ret 
else 
  movc r3.z, cb2[54].w, r0.w, l(1.000000)
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
add r1.zw, r4.xxxy, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r4.x, r1.z, cb1[12].x
mul r4.y, r1.w, cb1[13].y
mov r4.z, l(1.000000)
mul r4.xyz, r0.zzzz, r4.xyzx
mul r10.xyz, r4.yyyy, cb1[17].xyzx
mad r4.xyw, r4.xxxx, cb1[16].xyxz, r10.xyxz
mad r4.xyz, r4.zzzz, cb1[18].xyzx, r4.xywx
mad r0.z, r2.w, l(3.000000), l(0.500000)
ftou r0.z, r0.z
mad r1.zw, r2.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.850000, 0.850000)
dp2 r2.x, r1.zwzz, r1.zwzz
add r10.zw, -r2.xxxx, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.x, r10.z
mul r10.xy, r1.zwzz, r2.xxxx
and r11.xyzw, r0.zzzz, l(2, 1, 2, 1)
movc r11.xyzw, r11.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.z, r11.w, r11.z
movc r11.z, r0.z, l(-1.000000), l(1.000000)
mul r2.xyw, r11.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r12.xyz, r11.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r10.xyz, r10.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r10.yyyy
mad r2.xyw, r12.xyxz, r10.xxxx, r2.xyxw
mad r10.xyz, r11.xyzx, r10.zzzz, r2.xywx
movc r0.z, r0.w, l(-0.500000), l(-0.00146628)
add r0.z, r0.z, r2.z
mul_sat r2.y, r0.z, l(2.00982332)
dp3 r0.z, -r4.xyzx, -r4.xyzx
rsq r0.z, r0.z
mul r11.xyz, r0.zzzz, -r4.xyzx
dp3_sat r2.x, r10.xyzx, r11.xyzx
dp3 r0.z, -r11.xyzx, r10.xyzx
add r0.z, r0.z, r0.z
mad r11.xyz, r10.xyzx, -r0.zzzz, -r11.xyzx
mul r0.z, r2.y, l(17.000000)
exp r0.z, r0.z
add r0.z, r0.z, l(2.000000)
div r0.z, l(2.000000), r0.z
sqrt r0.z, r0.z
mul r1.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r1.zw, r1.zzzw
ieq r1.zw, r1.zzzw, r1.xxxy
and r0.w, r1.w, r1.z
add r1.z, -r2.y, l(1.000000)
mul r1.w, r1.z, l(5.000000)
mad r2.z, r1.z, l(5.000000), l(-2.500000)
mul r2.z, r2.z, l(0.400000)
max r2.z, r2.z, l(0.000000)
mad r12.xy, -r1.zzzz, l(10.000000, 5.000000, 0.000000, 0.000000), l(6.857410, 7.085000, 0.000000, 0.000000)
exp r2.w, r12.x
mul r2.w, r2.w, r2.x
mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 100.000000, 9.136810)
mul r4.w, r1.z, r1.w
mad r4.w, -r4.w, l(2.015905), r12.y
exp r4.w, r4.w
mul r4.w, r2.x, r4.w
mul r4.w, r4.w, l(9.708090)
max r2.w, r2.w, r4.w
max r2.w, r2.w, l(1.268160)
if_nz cb2[54].x
  ftou r4.w, cb1[44].x
  iadd r4.w, r4.w, l(7)
  ushr r4.w, r4.w, l(3)
  imad r4.w, r0.y, r4.w, r0.x
  bfi r4.w, l(27), l(5), r4.w, l(16)
  mov r12.xyzw, l(0,0,0,0)
  mov r13.xyzw, l(0,0,0,0)
  mov r14.xyzw, l(0,0,0,0)
  mov r15.xyzw, l(0,0,0,0)
  mov r16.xyzw, l(0,0,0,0)
  mov r17.xyzw, l(0,0,0,0)
  mov r18.xyzw, l(0,0,0,0)
  mov r19.xyzw, l(0,0,0,0)
  mov r20.xyzw, l(0,0,0,0)
  mov r21.xyzw, l(0,0,0,0)
  mov r22.xyzw, l(0,0,0,0)
  mov r23.xyz, l(0,0,0,0)
  mov r24.xy, l(0,0,0,0)
  mov r5.w, l(0)
  mov r25.z, l(0)
  mov r26.z, l(0)
  mov r6.w, l(0)
  mov r7.w, l(0)
  loop 
    uge r8.w, r7.w, cb2[0].y
    breakc_nz r8.w
    ushr r8.w, r7.w, l(5)
    iadd r8.w, r4.w, r8.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.w, r8.w, l(0), t26.xxxx
    mov r27.xyzw, r12.yxzw
    mov r28.xyzw, r13.xyzw
    mov r29.xyzw, r14.yzwx
    mov r30.xyzw, r15.xyzw
    mov r31.xyzw, r16.xyzw
    mov r32.xyzw, r17.zwxy
    mov r33.xyzw, r18.zwxy
    mov r34.xyzw, r20.zwxy
    mov r35.xyzw, r21.zwxy
    mov r36.xyz, r23.xyzx
    mov r24.zw, r24.yyyx
    mov r9.w, r5.w
    mov r23.w, r25.z
    mov r25.w, r26.z
    mov r26.w, r6.w
    mov r37.xyzw, r19.zwxy
    mov r38.xyzw, r22.zwxy
    mov r36.w, r8.w
    loop 
      breakc_z r36.w
      firstbit_lo r39.x, r36.w
      ishl r39.y, l(1), r39.x
      not r39.y, r39.y
      and r36.w, r36.w, r39.y
      iadd r39.x, r7.w, r39.x
      imul null, r39.x, r39.x, l(14)
      add r39.yzw, r4.xxyz, -cb10[r39.x + 0].xxyz
      dp3 r39.y, r39.yzwy, r39.yzwy
      sqrt r39.y, r39.y
      ge r39.y, cb2[54].y, r39.y
      if_nz r39.y
        mov r27.yzw, cb10[r39.x + 1].xxyz
        mov r27.x, cb10[r39.x + 0].w
        mov r28.yzw, cb10[r39.x + 2].xxyz
        mov r28.x, cb10[r39.x + 1].w
        mov r29.xyz, cb10[r39.x + 3].xyzx
        mov r29.w, cb10[r39.x + 4].z
        mov r30.yz, cb10[r39.x + 4].xxyx
        mov r30.x, cb10[r39.x + 3].w
        mov r30.w, cb10[r39.x + 6].x
        mov r31.yzw, cb10[r39.x + 5].xxyz
        mov r31.x, cb10[r39.x + 4].w
        mov r32.yz, cb10[r39.x + 7].yywy
        mov r32.x, cb10[r39.x + 6].y
        mov r32.w, cb10[r39.x + 8].x
        mov r33.xyz, cb10[r39.x + 8].yzwy
        mov r33.w, cb10[r39.x + 9].x
        mov r34.xyz, cb10[r39.x + 10].yzwy
        mov r34.w, cb10[r39.x + 11].x
        mov r35.xyz, cb10[r39.x + 11].yzwy
        mov r35.w, cb10[r39.x + 12].x
        mov r36.xyz, cb10[r39.x + 0].xyzx
        mov r39.yz, cb10[r39.x + 13].yyzy
        mov r9.w, l(-1)
        mov r23.w, cb10[r39.x + 2].w
        mov r25.w, cb10[r39.x + 5].w
        mov r26.w, cb10[r39.x + 7].z
        mov r37.xyz, cb10[r39.x + 9].yzwy
        mov r37.w, cb10[r39.x + 10].x
        mov r38.xyz, cb10[r39.x + 12].yzwy
        mov r38.w, cb10[r39.x + 13].x
        mov r24.zw, r39.yyyz
        break 
      endif 
    endloop 
    if_nz r9.w
      mov r12.xyzw, r27.yxzw
      mov r13.xyzw, r28.xyzw
      mov r14.xyzw, r29.wxyz
      mov r15.xyzw, r30.xyzw
      mov r16.xyzw, r31.xyzw
      mov r17.xyzw, r32.zwxy
      mov r18.xyzw, r33.zwxy
      mov r19.xyzw, r37.zwxy
      mov r20.xyzw, r34.zwxy
      mov r21.xyzw, r35.zwxy
      mov r22.xyzw, r38.zwxy
      mov r23.xyz, r36.xyzx
      mov r24.xy, r24.wzww
      mov r5.w, l(-1)
      mov r25.z, r23.w
      mov r26.z, r25.w
      mov r6.w, r26.w
      break 
    endif 
    iadd r7.w, r7.w, l(32)
    mov r12.xyzw, r27.yxzw
    mov r13.xyzw, r28.xyzw
    mov r14.xyzw, r29.wxyz
    mov r15.xyzw, r30.xyzw
    mov r16.xyzw, r31.xyzw
    mov r17.xyzw, r32.zwxy
    mov r18.xyzw, r33.zwxy
    mov r20.xyzw, r34.zwxy
    mov r21.xyzw, r35.zwxy
    mov r23.xyz, r36.xyzx
    mov r24.xy, r24.wzww
    mov r5.w, r9.w
    mov r25.z, r23.w
    mov r26.z, r25.w
    mov r6.w, r26.w
    mov r19.xyzw, r37.zwxy
    mov r22.xyzw, r38.zwxy
  endloop 
  mov r27.xy, r12.ywyy
  mov r25.x, r12.z
  mov r12.yz, r13.xxwx
  mov r25.y, r13.y
  mov r27.z, r13.z
  mov r13.xyz, r14.yzwy
  mov r14.yz, r16.xxyx
  mov r26.xy, r16.zwzz
  mov r16.xy, r17.zwzz
  mov r17.z, r18.z
  mov r18.z, r19.z
  mov r19.z, r20.z
  mov r20.z, r21.z
  mov r21.z, r22.z
  mov r22.z, r24.y
else 
  mov r5.w, l(0)
endif 
if_nz r5.w
  if_nz r0.w
    add r28.yzw, r23.xxyz, cb1[24].xxyz
    mov r28.x, l(16)
    store_structured u2.xyzw, cb2[52].x, l(880), r28.xyzw
  endif 
  add r23.xyz, r4.xyzx, -r23.xyzx
  and r4.w, r6.w, l(0x0000ffff)
  ubfe r7.w, l(6), l(25), r6.w
  imul null, r8.w, r4.w, l(6)
  dp3 r9.w, cb11[r8.w + 0].xyzx, r23.xyzx
  add_sat r9.w, r9.w, cb11[r8.w + 0].w
  dp3 r12.w, cb11[r8.w + 1].xyzx, r23.xyzx
  add_sat r12.w, r12.w, cb11[r8.w + 1].w
  mul r9.w, r9.w, r12.w
  dp3 r12.w, cb11[r8.w + 2].xyzx, r23.xyzx
  add_sat r12.w, r12.w, cb11[r8.w + 2].w
  mul r9.w, r9.w, r12.w
  dp3 r12.w, cb11[r8.w + 3].xyzx, r23.xyzx
  add_sat r12.w, r12.w, cb11[r8.w + 3].w
  mul r9.w, r9.w, r12.w
  dp3 r12.w, cb11[r8.w + 4].xyzx, r23.xyzx
  add_sat r12.w, r12.w, cb11[r8.w + 4].w
  mul r9.w, r9.w, r12.w
  dp3 r12.w, cb11[r8.w + 5].xyzx, r23.xyzx
  add_sat r8.w, r12.w, cb11[r8.w + 5].w
  mul r28.x, r8.w, r9.w
  and r8.w, r15.w, l(1)
  mov r28.yz, l(0,0,1.000000,0)
  movc r16.zw, r8.wwww, r28.xxxy, r28.zzzx
  mov r28.x, l(1.000000)
  mov r8.w, r15.w
  mov r29.xy, r16.zwzz
  mov r9.w, l(1)
  loop 
    ige r12.w, r9.w, r7.w
    breakc_nz r12.w
    iadd r12.w, r4.w, r9.w
    imul null, r12.w, r12.w, l(6)
    dp3 r13.w, cb11[r12.w + 0].xyzx, r23.xyzx
    add_sat r13.w, r13.w, cb11[r12.w + 0].w
    mul r13.w, r13.w, r29.x
    dp3 r14.w, cb11[r12.w + 1].xyzx, r23.xyzx
    add_sat r14.w, r14.w, cb11[r12.w + 1].w
    mul r13.w, r13.w, r14.w
    dp3 r14.w, cb11[r12.w + 2].xyzx, r23.xyzx
    add_sat r14.w, r14.w, cb11[r12.w + 2].w
    mul r13.w, r13.w, r14.w
    dp3 r14.w, cb11[r12.w + 3].xyzx, r23.xyzx
    add_sat r14.w, r14.w, cb11[r12.w + 3].w
    mul r13.w, r13.w, r14.w
    dp3 r14.w, cb11[r12.w + 4].xyzx, r23.xyzx
    add_sat r14.w, r14.w, cb11[r12.w + 4].w
    mul r13.w, r13.w, r14.w
    dp3 r14.w, cb11[r12.w + 5].xyzx, r23.xyzx
    add_sat r12.w, r14.w, cb11[r12.w + 5].w
    mul r29.x, r12.w, r13.w
    ushr r14.w, r8.w, l(2)
    ubfe r17.w, l(1), l(2), r8.w
    and r23.w, r14.w, l(2)
    max r24.y, r29.x, r29.y
    mad r12.w, -r13.w, r12.w, l(1.000000)
    mul r12.w, r12.w, r29.y
    movc r28.y, r23.w, r12.w, r24.y
    movc r29.xy, r17.wwww, r29.xyxx, r28.xyxx
    iadd r9.w, r9.w, l(1)
    mov r8.w, r14.w
  endloop 
  mov_sat r29.y, r29.y
  mul r28.w, r16.x, r29.y
  lt r4.w, l(0.000000), r28.w
  if_nz r4.w
    if_nz r0.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r4.w, cb2[52].x, l(880), u2.xxxx
      or r4.w, r4.w, l(32)
      store_structured u2.x, cb2[52].x, l(880), r4.w
      store_structured u2.x, cb2[52].x, l(896), r28.w
    endif 
    mul r4.w, r16.y, r28.w
    dp3 r7.w, r11.xyzx, r17.xyzx
    dp3 r8.w, r23.xyzx, r17.xyzx
    add r8.w, -r18.w, r8.w
    ge r9.w, r8.w, l(0.000000)
    max r8.w, r2.z, |r8.w|
    movc r8.w, r9.w, r8.w, -r8.w
    max r7.w, -r7.w, l(0.00000010)
    div r7.w, r8.w, r7.w
    min r7.w, |r7.w|, l(131072.000000)
    dp3 r8.w, r11.xyzx, r18.xyzx
    dp3 r9.w, r23.xyzx, r18.xyzx
    add r9.w, -r19.w, r9.w
    ge r12.w, r9.w, l(0.000000)
    max r9.w, r2.z, |r9.w|
    movc r9.w, r12.w, r9.w, -r9.w
    max r8.w, -r8.w, l(0.00000010)
    div r8.w, r9.w, r8.w
    min r7.w, r7.w, |r8.w|
    dp3 r8.w, r11.xyzx, r19.xyzx
    dp3 r9.w, r23.xyzx, r19.xyzx
    add r9.w, -r20.w, r9.w
    ge r12.w, r9.w, l(0.000000)
    max r9.w, r2.z, |r9.w|
    movc r9.w, r12.w, r9.w, -r9.w
    max r8.w, -r8.w, l(0.00000010)
    div r8.w, r9.w, r8.w
    min r7.w, r7.w, |r8.w|
    dp3 r8.w, r11.xyzx, r20.xyzx
    dp3 r9.w, r23.xyzx, r20.xyzx
    add r9.w, -r21.w, r9.w
    ge r12.w, r9.w, l(0.000000)
    max r9.w, r2.z, |r9.w|
    movc r9.w, r12.w, r9.w, -r9.w
    max r8.w, -r8.w, l(0.00000010)
    div r8.w, r9.w, r8.w
    min r7.w, r7.w, |r8.w|
    dp3 r8.w, r11.xyzx, r21.xyzx
    dp3 r9.w, r23.xyzx, r21.xyzx
    add r9.w, -r22.w, r9.w
    ge r12.w, r9.w, l(0.000000)
    max r9.w, r2.z, |r9.w|
    movc r9.w, r12.w, r9.w, -r9.w
    max r8.w, -r8.w, l(0.00000010)
    div r8.w, r9.w, r8.w
    min r7.w, r7.w, |r8.w|
    dp3 r8.w, r11.xyzx, r22.xyzx
    dp3 r9.w, r23.xyzx, r22.xyzx
    add r9.w, -r24.x, r9.w
    ge r12.w, r9.w, l(0.000000)
    max r9.w, r2.z, |r9.w|
    movc r9.w, r12.w, r9.w, -r9.w
    max r8.w, -r8.w, l(0.00000010)
    div r8.w, r9.w, r8.w
    min r7.w, r7.w, |r8.w|
    add r15.xyz, r15.xyzx, r23.xyzx
    mad r15.xyz, r11.xyzx, r7.wwww, r15.xyzx
    dp3 r8.w, r15.xyzx, r15.xyzx
    sqrt r8.w, r8.w
    div r7.w, r7.w, r8.w
    add r7.w, r7.w, r7.w
    sqrt r7.w, r7.w
    mad r7.w, r1.z, l(5.000000), r7.w
    add r7.w, r7.w, l(-0.844800)
    dp3 r16.x, r15.xyzx, r27.xyzx
    dp3 r16.y, r15.xyzx, r12.xyzx
    dp3 r16.z, r15.xyzx, r25.xyzx
    ubfe r6.w, l(9), l(16), r6.w
    utof r16.w, r6.w
    sample_l_indexable(texturecubearray)(float,float,float,float) r15.xyz, r16.xyzw, t8.xyzw, s2, r7.w
    and r17.xyz, r15.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r17.xyz, r17.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r6.w, r17.y, r17.x
    or r6.w, r17.z, r6.w
    movc r15.xyz, r6.wwww, l(1.000000,1.000000,0,0), r15.xyzx
    dp3 r17.x, r23.xyzx, r27.xyzx
    dp3 r17.y, r23.xyzx, r12.xyzx
    dp3 r17.z, r23.xyzx, r25.xyzx
    mad_sat r13.xyz, r17.xyzx, r13.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mad r13.xyz, r13.xyzx, r14.xyzx, r26.xyzx
    dp3 r16.x, r10.xyzx, r27.xyzx
    dp3 r16.y, r10.xyzx, r12.xyzx
    dp3 r16.z, r10.xyzx, r25.xyzx
    lt r12.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r16.xyzx
    movc r14.z, r12.x, l(0), l(0.500000)
    mov r14.xy, l(0,0,0,0)
    add r14.xyz, r13.xyzx, r14.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r14.xyz, r14.xyzx, t17.xyzw, s4, l(0.000000)
    mul r17.xyz, r16.xyzx, r16.xyzx
    mul r17.xyz, r4.wwww, r17.xyzx
    movc r18.z, r12.y, l(0), l(0.500000)
    mov r18.xy, l(0,0,0,0)
    add r12.xyw, r13.xyxz, r18.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r12.xyw, r12.xywx, t18.xywz, s4, l(0.000000)
    mul r12.xyw, r17.yyyy, r12.xyxw
    mad r12.xyw, r14.xyxz, r17.xxxx, r12.xyxw
    movc r14.z, r12.z, l(0), l(0.500000)
    mov r14.xy, l(0,0,0,0)
    add r13.xyz, r13.xyzx, r14.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r13.xyzx, t19.xyzw, s4, l(0.000000)
    mad r12.xyz, r13.xyzx, r17.zzzz, r12.xywx
    sample_l_indexable(texturecubearray)(float,float,float,float) r13.xyz, r16.xyzw, t8.xyzw, s2, l(6.000000)
    and r14.xyz, r13.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r14.xyz, r14.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r6.w, r14.y, r14.x
    or r6.w, r14.z, r6.w
    movc r13.xyz, r6.wwww, l(1.000000,1.000000,0,0), r13.xyzx
    mul r12.xyz, r12.xyzx, r13.xyzx
    dp3 r6.w, r12.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r7.w, r2.w, r6.w
    mul r12.xyz, r4.wwww, r15.xyzx
    dp3 r4.w, r12.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r4.w, r2.w, r6.w, r4.w
    div r4.w, r7.w, r4.w
    mul r28.xyz, r4.wwww, r12.xyzx
    mov r4.w, l(257)
  else 
    mov r28.xyzw, l(0,0,0,0)
    mov r4.w, l(1)
  endif 
  mov r6.w, l(-1)
else 
  mov r28.xyzw, l(0,0,0,0)
  mov r4.w, l(0)
endif 
and r5.w, r5.w, r6.w
if_z r5.w
  iadd r5.w, cb2[0].y, -cb2[58].x
  ftou r6.w, cb1[44].x
  iadd r6.w, r6.w, l(7)
  ushr r6.w, r6.w, l(3)
  imad r6.w, r0.y, r6.w, r0.x
  bfi r6.w, l(27), l(5), r6.w, l(16)
  and r7.w, r5.w, l(-32)
  iadd r8.w, r5.w, -r7.w
  and r9.w, cb2[0].y, l(-32)
  iadd r12.x, -r9.w, cb2[0].y
  mov r13.x, l(16)
  mov r14.yz, l(0,0,1.000000,0)
  mov r15.xy, l(0,0,0,0)
  mov r16.xz, l(1.000000,0,1.000000,0)
  mov r17.xy, l(0,0,0,0)
  mov r18.xy, l(0,0,0,0)
  mov r19.xyz, l(0,0,0,0)
  mov r19.w, r28.x
  mov r20.xyz, r28.yzwy
  mov r20.w, r4.w
  mov r12.y, r7.w
  loop 
    uge r12.z, r12.y, cb2[0].y
    breakc_nz r12.z
    ushr r12.z, r12.y, l(5)
    iadd r12.z, r6.w, r12.z
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.z, r12.z, l(0), t26.xxxx
    ieq r12.w, r7.w, r12.y
    bfi r14.w, r8.w, l(0), l(0), r12.z
    movc r12.z, r12.w, r14.w, r12.z
    ieq r12.w, r9.w, r12.y
    ubfe r14.w, r12.x, l(0), r12.z
    movc r12.z, r12.w, r14.w, r12.z
    mov r21.xyzw, r19.xyzw
    mov r22.xyzw, r20.xyzw
    mov r12.w, r12.z
    loop 
      breakc_z r12.w
      firstbit_lo r14.w, r12.w
      ishl r15.w, l(1), r14.w
      not r15.w, r15.w
      and r12.w, r12.w, r15.w
      iadd r14.w, r12.y, r14.w
      imul null, r14.w, r14.w, l(14)
      and r15.w, r22.w, l(255)
      ult r17.w, r15.w, l(32)
      and r17.w, r0.w, r17.w
      if_nz r17.w
        imad r15.w, r15.w, l(20), l(880)
        add r13.yzw, cb1[24].xxyz, cb10[r14.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r15.w, r13.xyzw
      endif 
      iadd r23.w, r22.w, l(1)
      add r13.yzw, r4.xxyz, -cb10[r14.w + 0].xxyz
      and r15.w, l(0x0000ffff), cb10[r14.w + 7].z
      ubfe r17.w, l(6), l(25), cb10[r14.w + 7].z
      imul null, r18.w, r15.w, l(6)
      dp3 r24.x, cb11[r18.w + 0].xyzx, r13.yzwy
      add_sat r24.x, r24.x, cb11[r18.w + 0].w
      dp3 r24.y, cb11[r18.w + 1].xyzx, r13.yzwy
      add_sat r24.y, r24.y, cb11[r18.w + 1].w
      mul r24.x, r24.y, r24.x
      dp3 r24.y, cb11[r18.w + 2].xyzx, r13.yzwy
      add_sat r24.y, r24.y, cb11[r18.w + 2].w
      mul r24.x, r24.y, r24.x
      dp3 r24.y, cb11[r18.w + 3].xyzx, r13.yzwy
      add_sat r24.y, r24.y, cb11[r18.w + 3].w
      mul r24.x, r24.y, r24.x
      dp3 r24.y, cb11[r18.w + 4].xyzx, r13.yzwy
      add_sat r24.y, r24.y, cb11[r18.w + 4].w
      mul r24.x, r24.y, r24.x
      dp3 r24.y, cb11[r18.w + 5].xyzx, r13.yzwy
      add_sat r18.w, r24.y, cb11[r18.w + 5].w
      mul r14.x, r18.w, r24.x
      and r18.w, l(1), cb10[r14.w + 6].x
      movc r24.xy, r18.wwww, r14.xyxx, r14.zxzz
      mov r14.x, cb10[r14.w + 6].x
      mov r25.xy, r24.xyxx
      mov r18.w, l(1)
      loop 
        ige r24.z, r18.w, r17.w
        breakc_nz r24.z
        iadd r24.z, r15.w, r18.w
        imul null, r24.z, r24.z, l(6)
        dp3 r24.w, cb11[r24.z + 0].xyzx, r13.yzwy
        add_sat r24.w, r24.w, cb11[r24.z + 0].w
        mul r24.w, r24.w, r25.x
        dp3 r25.z, cb11[r24.z + 1].xyzx, r13.yzwy
        add_sat r25.z, r25.z, cb11[r24.z + 1].w
        mul r24.w, r24.w, r25.z
        dp3 r25.z, cb11[r24.z + 2].xyzx, r13.yzwy
        add_sat r25.z, r25.z, cb11[r24.z + 2].w
        mul r24.w, r24.w, r25.z
        dp3 r25.z, cb11[r24.z + 3].xyzx, r13.yzwy
        add_sat r25.z, r25.z, cb11[r24.z + 3].w
        mul r24.w, r24.w, r25.z
        dp3 r25.z, cb11[r24.z + 4].xyzx, r13.yzwy
        add_sat r25.z, r25.z, cb11[r24.z + 4].w
        mul r24.w, r24.w, r25.z
        dp3 r25.z, cb11[r24.z + 5].xyzx, r13.yzwy
        add_sat r24.z, r25.z, cb11[r24.z + 5].w
        mul r25.x, r24.z, r24.w
        ushr r25.z, r14.x, l(2)
        ubfe r25.w, l(1), l(2), r14.x
        and r26.x, r25.z, l(2)
        max r26.y, r25.x, r25.y
        mad r24.z, -r24.w, r24.z, l(1.000000)
        mul r24.z, r24.z, r25.y
        movc r16.y, r26.x, r24.z, r26.y
        movc r25.xy, r25.wwww, r25.xyxx, r16.xyxx
        iadd r18.w, r18.w, l(1)
        mov r14.x, r25.z
      endloop 
      mov_sat r25.y, r25.y
      mul r14.x, r25.y, cb10[r14.w + 6].y
      lt r15.w, l(0.000000), r14.x
      if_nz r15.w
        and r15.w, r23.w, l(255)
        iadd r16.y, r15.w, l(-1)
        ult r16.y, r16.y, l(32)
        and r16.y, r0.w, r16.y
        if_nz r16.y
          imad r24.xy, r15.wwww, l(20, 20, 0, 0), l(860, 876, 0, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r15.w, cb2[52].x, r24.x, u2.xxxx
          or r15.w, r15.w, l(32)
          store_structured u2.x, cb2[52].x, r24.x, r15.w
          store_structured u2.x, cb2[52].x, r24.y, r14.x
        endif 
        iadd r22.w, r22.w, l(257)
        mad r22.z, r25.y, cb10[r14.w + 6].y, r22.z
        mul r14.x, r14.x, cb10[r14.w + 7].y
        mov r24.x, cb10[r14.w + 7].w
        mov r24.yz, cb10[r14.w + 8].xxyx
        dp3 r15.w, r11.xyzx, r24.xyzx
        dp3 r16.y, r13.yzwy, r24.xyzx
        add r16.y, r16.y, -cb10[r14.w + 8].z
        ge r17.w, r16.y, l(0.000000)
        max r16.y, r2.z, |r16.y|
        movc r16.y, r17.w, r16.y, -r16.y
        max r15.w, -r15.w, l(0.00000010)
        div r15.w, r16.y, r15.w
        min r15.w, |r15.w|, l(131072.000000)
        mov r24.x, cb10[r14.w + 8].w
        mov r24.yz, cb10[r14.w + 9].xxyx
        dp3 r16.y, r11.xyzx, r24.xyzx
        dp3 r17.w, r13.yzwy, r24.xyzx
        add r17.w, r17.w, -cb10[r14.w + 9].z
        ge r18.w, r17.w, l(0.000000)
        max r17.w, r2.z, |r17.w|
        movc r17.w, r18.w, r17.w, -r17.w
        max r16.y, -r16.y, l(0.00000010)
        div r16.y, r17.w, r16.y
        min r15.w, r15.w, |r16.y|
        mov r24.x, cb10[r14.w + 9].w
        mov r24.yz, cb10[r14.w + 10].xxyx
        dp3 r16.y, r11.xyzx, r24.xyzx
        dp3 r17.w, r13.yzwy, r24.xyzx
        add r17.w, r17.w, -cb10[r14.w + 10].z
        ge r18.w, r17.w, l(0.000000)
        max r17.w, r2.z, |r17.w|
        movc r17.w, r18.w, r17.w, -r17.w
        max r16.y, -r16.y, l(0.00000010)
        div r16.y, r17.w, r16.y
        min r15.w, r15.w, |r16.y|
        mov r24.x, cb10[r14.w + 10].w
        mov r24.yz, cb10[r14.w + 11].xxyx
        dp3 r16.y, r11.xyzx, r24.xyzx
        dp3 r17.w, r13.yzwy, r24.xyzx
        add r17.w, r17.w, -cb10[r14.w + 11].z
        ge r18.w, r17.w, l(0.000000)
        max r17.w, r2.z, |r17.w|
        movc r17.w, r18.w, r17.w, -r17.w
        max r16.y, -r16.y, l(0.00000010)
        div r16.y, r17.w, r16.y
        min r15.w, r15.w, |r16.y|
        mov r24.x, cb10[r14.w + 11].w
        mov r24.yz, cb10[r14.w + 12].xxyx
        dp3 r16.y, r11.xyzx, r24.xyzx
        dp3 r17.w, r13.yzwy, r24.xyzx
        add r17.w, r17.w, -cb10[r14.w + 12].z
        ge r18.w, r17.w, l(0.000000)
        max r17.w, r2.z, |r17.w|
        movc r17.w, r18.w, r17.w, -r17.w
        max r16.y, -r16.y, l(0.00000010)
        div r16.y, r17.w, r16.y
        min r15.w, r15.w, |r16.y|
        mov r24.x, cb10[r14.w + 12].w
        mov r24.yz, cb10[r14.w + 13].xxyx
        dp3 r16.y, r11.xyzx, r24.xyzx
        dp3 r17.w, r13.yzwy, r24.xyzx
        add r17.w, r17.w, -cb10[r14.w + 13].z
        ge r18.w, r17.w, l(0.000000)
        max r17.w, r2.z, |r17.w|
        movc r17.w, r18.w, r17.w, -r17.w
        max r16.y, -r16.y, l(0.00000010)
        div r16.y, r17.w, r16.y
        min r15.w, r15.w, |r16.y|
        add r24.x, r13.y, cb10[r14.w + 3].w
        add r24.yz, r13.zzwz, cb10[r14.w + 4].xxyx
        mad r24.xyz, r11.xyzx, r15.wwww, r24.xyzx
        dp3 r16.y, r24.xyzx, r24.xyzx
        sqrt r16.y, r16.y
        div r15.w, r15.w, r16.y
        add r15.w, r15.w, r15.w
        sqrt r15.w, r15.w
        mad r15.w, r1.z, l(5.000000), r15.w
        add r15.w, r15.w, l(-0.844800)
        mov r26.x, cb10[r14.w + 0].w
        mov r26.y, cb10[r14.w + 1].z
        mov r26.z, cb10[r14.w + 2].y
        dp3 r27.x, r24.xyzx, r26.xyzx
        mov r29.xy, cb10[r14.w + 1].xwxx
        mov r29.z, cb10[r14.w + 2].z
        dp3 r27.y, r24.xyzx, r29.xyzx
        mov r30.x, cb10[r14.w + 1].y
        mov r30.yz, cb10[r14.w + 2].xxwx
        dp3 r27.z, r24.xyzx, r30.xyzx
        ubfe r16.y, l(9), l(16), cb10[r14.w + 7].z
        utof r27.w, r16.y
        sample_l_indexable(texturecubearray)(float,float,float,float) r24.xyz, r27.xyzw, t8.xyzw, s2, r15.w
        and r25.xzw, r24.xxyz, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
        ieq r25.xzw, r25.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
        or r15.w, r25.z, r25.x
        or r15.w, r25.w, r15.w
        movc r24.xyz, r15.wwww, l(1.000000,1.000000,0,0), r24.xyzx
        dp3 r31.x, r13.yzwy, r26.xyzx
        dp3 r31.y, r13.yzwy, r29.xyzx
        dp3 r31.z, r13.yzwy, r30.xyzx
        mad_sat r13.yzw, r31.xxyz, cb10[r14.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r31.xy, r13.yzyy, cb10[r14.w + 4].zwzz
        mul r31.z, r13.w, cb10[r14.w + 5].x
        add r13.yzw, r31.xxyz, cb10[r14.w + 5].yyzw
        dp3 r27.x, r10.xyzx, r26.xyzx
        dp3 r27.y, r10.xyzx, r29.xyzx
        dp3 r27.z, r10.xyzx, r30.xyzx
        lt r25.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r27.xxyz
        movc r15.z, r25.x, l(0), l(0.500000)
        add r26.xyz, r13.yzwy, r15.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t17.xyzw, s4, l(0.000000)
        mul r29.xyz, r27.xyzx, r27.xyzx
        mul r29.xyz, r14.xxxx, r29.xyzx
        movc r17.z, r25.z, l(0), l(0.500000)
        add r30.xyz, r13.yzwy, r17.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r30.xyz, r30.xyzx, t18.xyzw, s4, l(0.000000)
        mul r30.xyz, r29.yyyy, r30.xyzx
        mad r26.xyz, r26.xyzx, r29.xxxx, r30.xyzx
        movc r18.z, r25.w, l(0), l(0.500000)
        add r13.yzw, r13.yyzw, r18.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r13.yzw, r13.yzwy, t19.wxyz, s4, l(0.000000)
        mad r13.yzw, r13.yyzw, r29.zzzz, r26.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r25.xzw, r27.xyzw, t8.xwyz, s2, l(6.000000)
        and r26.xyz, r25.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r26.xyz, r26.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r14.w, r26.y, r26.x
        or r14.w, r26.z, r14.w
        movc r25.xzw, r14.wwww, l(1.000000,0,1.000000,0), r25.xxzw
        mul r26.xyz, r13.yzwy, r25.xzwx
        dp3 r14.w, r26.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r21.xyz, r13.yzwy, r25.xzwx, r21.xyzx
        mul r13.y, r2.w, r14.w
        mul r24.xyz, r14.xxxx, r24.xyzx
        dp3 r13.z, r24.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r13.z, r2.w, r14.w, r13.z
        div r13.y, r13.y, r13.z
        mov r26.x, r21.w
        mov r26.yz, r22.xxyx
        mad r13.yzw, r24.xxyz, r13.yyyy, r26.xxyz
        mov r21.w, r13.y
        mov r22.xy, r13.zwzz
      else 
        mov r23.xyz, r22.xyzx
        mov r22.xyzw, r23.xyzw
      endif 
    endloop 
    mov r19.xyzw, r21.xyzw
    mov r20.xyzw, r22.xyzw
    iadd r12.y, r12.y, l(32)
  endloop 
  mov r12.x, l(16)
  mov r13.yz, l(0,0,1.000000,0)
  mov r14.xy, l(0,0,0,0)
  mov r15.xy, l(0,0,0,0)
  mov r17.xy, l(0,0,0,0)
  mov r18.xyz, r19.xyzx
  mov r21.x, r19.w
  mov r21.yz, r20.xxyx
  mov r22.xyz, r20.zwzz
  mov r9.w, l(0)
  loop 
    uge r13.w, r9.w, r5.w
    breakc_nz r13.w
    ushr r13.w, r9.w, l(5)
    iadd r13.w, r6.w, r13.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.w, l(0), t26.xxxx
    ieq r14.w, r7.w, r9.w
    ubfe r15.w, r8.w, l(0), r13.w
    movc r13.w, r14.w, r15.w, r13.w
    mov r23.xyz, r18.xyzx
    mov r24.xyz, r21.xyzx
    mov r25.xyz, r22.xzyx
    mov r14.w, r13.w
    loop 
      breakc_z r14.w
      firstbit_lo r15.w, r14.w
      ishl r16.x, l(1), r15.w
      not r16.x, r16.x
      and r14.w, r14.w, r16.x
      iadd r15.w, r9.w, r15.w
      imul null, r15.w, r15.w, l(14)
      and r16.x, r25.z, l(255)
      ult r16.y, r16.x, l(32)
      and r16.y, r0.w, r16.y
      if_nz r16.y
        imad r16.x, r16.x, l(20), l(880)
        add r12.yzw, cb1[24].xxyz, cb10[r15.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r16.x, r12.xyzw
      endif 
      iadd r16.y, r25.z, l(1)
      add r12.yzw, r4.xxyz, -cb10[r15.w + 0].xxyz
      and r17.w, l(0x0000ffff), cb10[r15.w + 7].z
      ubfe r18.w, l(6), l(25), cb10[r15.w + 7].z
      imul null, r21.w, r17.w, l(6)
      dp3 r22.w, cb11[r21.w + 0].xyzx, r12.yzwy
      add_sat r22.w, r22.w, cb11[r21.w + 0].w
      dp3 r23.w, cb11[r21.w + 1].xyzx, r12.yzwy
      add_sat r23.w, r23.w, cb11[r21.w + 1].w
      mul r22.w, r22.w, r23.w
      dp3 r23.w, cb11[r21.w + 2].xyzx, r12.yzwy
      add_sat r23.w, r23.w, cb11[r21.w + 2].w
      mul r22.w, r22.w, r23.w
      dp3 r23.w, cb11[r21.w + 3].xyzx, r12.yzwy
      add_sat r23.w, r23.w, cb11[r21.w + 3].w
      mul r22.w, r22.w, r23.w
      dp3 r23.w, cb11[r21.w + 4].xyzx, r12.yzwy
      add_sat r23.w, r23.w, cb11[r21.w + 4].w
      mul r22.w, r22.w, r23.w
      dp3 r23.w, cb11[r21.w + 5].xyzx, r12.yzwy
      add_sat r21.w, r23.w, cb11[r21.w + 5].w
      mul r13.x, r21.w, r22.w
      and r21.w, l(1), cb10[r15.w + 6].x
      movc r26.xy, r21.wwww, r13.xyxx, r13.zxzz
      mov r13.x, cb10[r15.w + 6].x
      mov r27.xy, r26.xyxx
      mov r21.w, l(1)
      loop 
        ige r22.w, r21.w, r18.w
        breakc_nz r22.w
        iadd r22.w, r17.w, r21.w
        imul null, r22.w, r22.w, l(6)
        dp3 r23.w, cb11[r22.w + 0].xyzx, r12.yzwy
        add_sat r23.w, r23.w, cb11[r22.w + 0].w
        mul r23.w, r23.w, r27.x
        dp3 r24.w, cb11[r22.w + 1].xyzx, r12.yzwy
        add_sat r24.w, r24.w, cb11[r22.w + 1].w
        mul r23.w, r23.w, r24.w
        dp3 r24.w, cb11[r22.w + 2].xyzx, r12.yzwy
        add_sat r24.w, r24.w, cb11[r22.w + 2].w
        mul r23.w, r23.w, r24.w
        dp3 r24.w, cb11[r22.w + 3].xyzx, r12.yzwy
        add_sat r24.w, r24.w, cb11[r22.w + 3].w
        mul r23.w, r23.w, r24.w
        dp3 r24.w, cb11[r22.w + 4].xyzx, r12.yzwy
        add_sat r24.w, r24.w, cb11[r22.w + 4].w
        mul r23.w, r23.w, r24.w
        dp3 r24.w, cb11[r22.w + 5].xyzx, r12.yzwy
        add_sat r22.w, r24.w, cb11[r22.w + 5].w
        mul r27.x, r22.w, r23.w
        ushr r24.w, r13.x, l(2)
        ubfe r25.w, l(1), l(2), r13.x
        and r26.z, r24.w, l(2)
        max r26.w, r27.x, r27.y
        mad r22.w, -r23.w, r22.w, l(1.000000)
        mul r22.w, r22.w, r27.y
        movc r16.w, r26.z, r22.w, r26.w
        movc r27.xy, r25.wwww, r27.xyxx, r16.zwzz
        iadd r21.w, r21.w, l(1)
        mov r13.x, r24.w
      endloop 
      add_sat r13.x, -r25.y, r27.y
      mul r16.w, r13.x, cb10[r15.w + 6].y
      lt r17.w, l(0.000000), r16.w
      if_nz r17.w
        and r17.w, r16.y, l(255)
        iadd r18.w, r17.w, l(-1)
        ult r18.w, r18.w, l(32)
        and r18.w, r0.w, r18.w
        if_nz r18.w
          imad r26.xy, r17.wwww, l(20, 20, 0, 0), l(860, 876, 0, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.w, cb2[52].x, r26.x, u2.xxxx
          or r17.w, r17.w, l(32)
          store_structured u2.x, cb2[52].x, r26.x, r17.w
          store_structured u2.x, cb2[52].x, r26.y, r16.w
        endif 
        iadd r25.z, r25.z, l(257)
        mad r25.x, r13.x, cb10[r15.w + 6].y, r25.x
        mul r13.x, r16.w, cb10[r15.w + 7].y
        mov r26.x, cb10[r15.w + 7].w
        mov r26.yz, cb10[r15.w + 8].xxyx
        dp3 r16.w, r11.xyzx, r26.xyzx
        dp3 r17.w, r12.yzwy, r26.xyzx
        add r17.w, r17.w, -cb10[r15.w + 8].z
        ge r18.w, r17.w, l(0.000000)
        max r17.w, r2.z, |r17.w|
        movc r17.w, r18.w, r17.w, -r17.w
        max r16.w, -r16.w, l(0.00000010)
        div r16.w, r17.w, r16.w
        min r16.w, |r16.w|, l(131072.000000)
        mov r26.x, cb10[r15.w + 8].w
        mov r26.yz, cb10[r15.w + 9].xxyx
        dp3 r17.w, r11.xyzx, r26.xyzx
        dp3 r18.w, r12.yzwy, r26.xyzx
        add r18.w, r18.w, -cb10[r15.w + 9].z
        ge r21.w, r18.w, l(0.000000)
        max r18.w, r2.z, |r18.w|
        movc r18.w, r21.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r16.w, r16.w, |r17.w|
        mov r26.x, cb10[r15.w + 9].w
        mov r26.yz, cb10[r15.w + 10].xxyx
        dp3 r17.w, r11.xyzx, r26.xyzx
        dp3 r18.w, r12.yzwy, r26.xyzx
        add r18.w, r18.w, -cb10[r15.w + 10].z
        ge r21.w, r18.w, l(0.000000)
        max r18.w, r2.z, |r18.w|
        movc r18.w, r21.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r16.w, r16.w, |r17.w|
        mov r26.x, cb10[r15.w + 10].w
        mov r26.yz, cb10[r15.w + 11].xxyx
        dp3 r17.w, r11.xyzx, r26.xyzx
        dp3 r18.w, r12.yzwy, r26.xyzx
        add r18.w, r18.w, -cb10[r15.w + 11].z
        ge r21.w, r18.w, l(0.000000)
        max r18.w, r2.z, |r18.w|
        movc r18.w, r21.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r16.w, r16.w, |r17.w|
        mov r26.x, cb10[r15.w + 11].w
        mov r26.yz, cb10[r15.w + 12].xxyx
        dp3 r17.w, r11.xyzx, r26.xyzx
        dp3 r18.w, r12.yzwy, r26.xyzx
        add r18.w, r18.w, -cb10[r15.w + 12].z
        ge r21.w, r18.w, l(0.000000)
        max r18.w, r2.z, |r18.w|
        movc r18.w, r21.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r16.w, r16.w, |r17.w|
        mov r26.x, cb10[r15.w + 12].w
        mov r26.yz, cb10[r15.w + 13].xxyx
        dp3 r17.w, r11.xyzx, r26.xyzx
        dp3 r18.w, r12.yzwy, r26.xyzx
        add r18.w, r18.w, -cb10[r15.w + 13].z
        ge r21.w, r18.w, l(0.000000)
        max r18.w, r2.z, |r18.w|
        movc r18.w, r21.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r16.w, r16.w, |r17.w|
        add r26.x, r12.y, cb10[r15.w + 3].w
        add r26.yz, r12.zzwz, cb10[r15.w + 4].xxyx
        mad r26.xyz, r11.xyzx, r16.wwww, r26.xyzx
        dp3 r17.w, r26.xyzx, r26.xyzx
        sqrt r17.w, r17.w
        div r16.w, r16.w, r17.w
        add r16.w, r16.w, r16.w
        sqrt r16.w, r16.w
        mad r16.w, r1.z, l(5.000000), r16.w
        add r16.w, r16.w, l(-0.844800)
        mov r29.x, cb10[r15.w + 0].w
        mov r29.y, cb10[r15.w + 1].z
        mov r29.z, cb10[r15.w + 2].y
        dp3 r30.x, r26.xyzx, r29.xyzx
        mov r31.xy, cb10[r15.w + 1].xwxx
        mov r31.z, cb10[r15.w + 2].z
        dp3 r30.y, r26.xyzx, r31.xyzx
        mov r32.x, cb10[r15.w + 1].y
        mov r32.yz, cb10[r15.w + 2].xxwx
        dp3 r30.z, r26.xyzx, r32.xyzx
        ubfe r17.w, l(9), l(16), cb10[r15.w + 7].z
        utof r30.w, r17.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r26.xyz, r30.xyzw, t8.xyzw, s2, r16.w
        and r27.xzw, r26.xxyz, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
        ieq r27.xzw, r27.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
        or r16.w, r27.z, r27.x
        or r16.w, r27.w, r16.w
        movc r26.xyz, r16.wwww, l(1.000000,1.000000,0,0), r26.xyzx
        dp3 r33.x, r12.yzwy, r29.xyzx
        dp3 r33.y, r12.yzwy, r31.xyzx
        dp3 r33.z, r12.yzwy, r32.xyzx
        mad_sat r12.yzw, r33.xxyz, cb10[r15.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r33.xy, r12.yzyy, cb10[r15.w + 4].zwzz
        mul r33.z, r12.w, cb10[r15.w + 5].x
        add r12.yzw, r33.xxyz, cb10[r15.w + 5].yyzw
        dp3 r30.x, r10.xyzx, r29.xyzx
        dp3 r30.y, r10.xyzx, r31.xyzx
        dp3 r30.z, r10.xyzx, r32.xyzx
        lt r27.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r30.xxyz
        movc r14.z, r27.x, l(0), l(0.500000)
        add r29.xyz, r12.yzwy, r14.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t17.xyzw, s4, l(0.000000)
        mul r31.xyz, r30.xyzx, r30.xyzx
        mul r31.xyz, r13.xxxx, r31.xyzx
        movc r15.z, r27.z, l(0), l(0.500000)
        add r32.xyz, r12.yzwy, r15.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r32.xyz, r32.xyzx, t18.xyzw, s4, l(0.000000)
        mul r32.xyz, r31.yyyy, r32.xyzx
        mad r29.xyz, r29.xyzx, r31.xxxx, r32.xyzx
        movc r17.z, r27.w, l(0), l(0.500000)
        add r12.yzw, r12.yyzw, r17.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r12.yzw, r12.yzwy, t19.wxyz, s4, l(0.000000)
        mad r12.yzw, r12.yyzw, r31.zzzz, r29.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r27.xzw, r30.xyzw, t8.xwyz, s2, l(6.000000)
        and r29.xyz, r27.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r29.xyz, r29.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r14.z, r29.y, r29.x
        or r14.z, r29.z, r14.z
        movc r27.xzw, r14.zzzz, l(1.000000,0,1.000000,0), r27.xxzw
        mul r29.xyz, r12.yzwy, r27.xzwx
        dp3 r14.z, r29.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r23.xyz, r12.yzwy, r27.xzwx, r23.xyzx
        mul r12.y, r2.w, r14.z
        mul r26.xyz, r13.xxxx, r26.xyzx
        dp3 r12.z, r26.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r12.z, r2.w, r14.z, r12.z
        div r12.y, r12.y, r12.z
        mad r24.xyz, r26.xyzx, r12.yyyy, r24.xyzx
      else 
        mov r16.x, r25.x
        mov r25.xz, r16.xxyx
      endif 
    endloop 
    mov r18.xyz, r23.xyzx
    mov r21.xyz, r24.xyzx
    mov r22.xy, r25.xzxx
    iadd r9.w, r9.w, l(32)
  endloop 
  ge r1.z, r20.z, l(1.000000)
  and r2.z, r20.w, l(0x0000ff00)
  bfi r2.z, l(8), l(0), r22.y, r2.z
  movc r4.w, r1.z, r2.z, r22.y
  max r1.z, r22.x, l(1.000000)
  rcp r1.z, r1.z
  mov_sat r22.x, r22.x
  mul r12.xyz, r1.zzzz, r18.xyzx
  mul r28.xyz, r1.zzzz, r21.xyzx
  lt r2.z, r22.x, l(0.990000)
  if_nz r2.z
    iadd r4.w, r4.w, l(256)
    add r2.z, -r22.x, l(1.000000)
    mul r2.w, r2.z, cb2[19].x
    add r13.xyz, r4.xyzx, -cb2[35].xyzx
    mul r14.x, r13.x, cb2[35].w
    mul r14.yz, r13.yyzy, cb2[36].xxyx
    add_sat r13.xyz, r14.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r14.xy, r13.xyxx, cb2[36].zwzz
    mul r14.z, r13.z, cb2[37].x
    add r13.xyz, r14.xyzx, cb2[37].yzwy
    lt r14.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
    movc r14.xyz, r14.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
    mov r14.w, l(0)
    add r15.xyz, r13.xyzx, r14.wwxw
    sample_l_indexable(texture3d)(float,float,float,float) r15.xyz, r15.xyzx, t17.xyzw, s4, l(0.000000)
    mul r16.xyz, r10.xyzx, r10.xyzx
    mul r16.xyz, r2.wwww, r16.xyzx
    add r17.xyz, r13.xyzx, r14.wwyw
    sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t18.xyzw, s4, l(0.000000)
    mul r17.xyz, r16.yyyy, r17.xyzx
    mad r15.xyz, r15.xyzx, r16.xxxx, r17.xyzx
    add r13.xyz, r13.xyzx, r14.wwzw
    sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r13.xyzx, t19.xyzw, s4, l(0.000000)
    mad r13.xyz, r13.xyzx, r16.zzzz, r15.xyzx
    mov r10.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r10.xyz, r10.xyzw, t8.xyzw, s2, l(6.000000)
    mul r10.xyz, r10.xyzx, r13.xyzx
    dp3 r2.w, r10.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r12.xyz, r18.xyzx, r1.zzzz, r10.xyzx
    mov r11.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r10.xyz, r11.xyzw, t8.xyzw, s2, r1.w
    mad r1.z, cb2[19].x, r2.z, -r2.w
    mad r1.z, r2.y, r1.z, r2.w
    mad r28.xyz, r10.xyzx, r1.zzzz, r28.xyzx
  endif 
else 
  mov r12.xyz, l(0,0,0,0)
endif 
add r1.z, r3.z, r2.x
log r1.z, |r1.z|
mul r0.z, r0.z, r1.z
exp r0.z, r0.z
add r0.z, r3.z, r0.z
add_sat r0.z, r0.z, l(-1.000000)
mul r10.xyz, r3.zzzz, r12.xyzx
mad r1.zw, r2.xxxy, l(0.000000, 0.000000, 0.984375, 0.984375), l(0.000000, 0.000000, 0.00781250, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t5.zwxy, s2, l(0.000000)
mul r2.xyz, r0.zzzz, r28.xyzx
mul r11.xyz, r1.zzzz, r2.xyzx
mul r2.xyz, r1.wwww, r2.xyzx
mad r3.xyz, r3.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.z, r3.y
mad r6.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r6.x
ieq r1.z, r0.z, r1.z
movc r1.zw, r1.zzzz, r6.yyyz, l(0,0,-1.000000,0)
mad r6.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.w, r6.x
ieq r2.w, r0.z, r2.w
movc r6.xy, r2.wwww, r6.yzyy, l(-1.000000,0,0,0)
mad r7.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.w, r7.x
ieq r2.w, r0.z, r2.w
movc r6.zw, r2.wwww, r7.yyyz, l(0,0,-1.000000,0)
mad r7.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.w, r7.x
ieq r0.z, r0.z, r2.w
movc r7.xy, r0.zzzz, r7.yzyy, l(-1.000000,0,0,0)
mov r8.x, r1.z
mov r8.yz, r6.xxzx
mov r8.w, r7.x
add r8.xyzw, -r3.xxxx, r8.xyzw
ge r8.xyzw, |r8.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r8.xyzw, r8.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.z, r8.y, r8.x
add r0.z, r8.z, r0.z
add r0.z, r8.w, r0.z
mul r1.z, r6.y, r8.y
mad r1.z, r8.x, r1.w, r1.z
mad r1.z, r8.z, r6.w, r1.z
mad r1.z, r8.w, r7.y, r1.z
div r3.w, r1.z, r0.z
ge r0.z, l(0.000000), r0.z
movc r3.yz, r0.zzzz, l(0,0,0,0), r3.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.z, r1.w, r1.z
movc r3.xyz, r0.zzzz, r3.xyzx, r3.xzyx
mad r0.z, -r3.z, l(0.500000), r3.x
add r6.y, r0.z, r3.z
mad r6.z, -r3.y, l(0.500000), r0.z
add r6.x, r3.y, r6.z
add r3.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r3.xyz, r3.xyzx, r11.xyzx
mad r2.xyz, r2.xyzx, r6.xyzx, r3.xyzx
mad r2.xyz, r10.xyzx, r5.xyzx, r2.xyzx
lt r0.z, l(0.000000), cb2[9].z
if_nz r0.z
  dp3 r0.z, r4.xyzx, r4.xyzx
  rsq r1.z, r0.z
  mul r3.xyz, r1.zzzz, r4.xyzx
  sqrt r0.z, r0.z
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.zzzz, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r4.z|
    mul r5.xy, r4.zzzz, cb2[15].zwzz
    mul r5.zw, r5.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r5.zw, r5.zzzw
    add r5.zw, -r5.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r5.xy, r5.zwzz, r5.xyxx
    mul r5.xy, r1.zwzz, r5.xyxx
    movc r1.zw, r2.wwww, r5.xxxy, r1.zzzw
    mul r5.xyz, r1.zzzz, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    mul r6.xyz, r1.wwww, cb2[12].xyzx
    exp r6.xyz, r6.xyzx
    add r6.xyz, -r5.xyzx, r6.xyzx
    mad r5.xyz, cb2[13].wwww, r6.xyzx, r5.xyzx
  else 
    mad r1.z, r0.z, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r4.z|
    mul r2.w, r4.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r6.xyz, r1.zzzz, cb2[12].xyzx
    exp r5.xyz, r6.xyzx
  endif 
  mad r5.xyz, r5.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r5.xyz, r5.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r3.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.w, cb2[8].w, -r1.z, l(1.000000)
  mul r2.w, r2.w, r2.w
  mul r2.w, r2.w, l(12.566371)
  div r1.w, r1.w, r2.w
  add r0.z, r0.z, -cb2[10].w
  mul_sat r0.z, r0.z, cb2[11].w
  mul r0.z, r0.z, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r3.xyz, r0.zzzz, cb2[11].xyzx
  mad r3.xyz, r1.zzzz, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r6.xyz, -r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r6.xyzx
  mad r3.xyz, r2.xyzx, r5.xyzx, r3.xyzx
else 
  mul r0.z, r4.z, cb2[6].x
  mad r1.z, cb2[6].x, r4.z, cb2[5].x
  lt r1.w, |r0.z|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.w, cb2[6].z
  lt r5.x, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r5.x, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.z, r1.w, l(1.000000), r0.z
  div r0.z, r1.z, r0.z
  movc r0.z, r1.w, r3.w, r0.z
  mul r0.z, r0.z, cb2[5].z
  dp3 r1.z, r4.xyzx, r4.xyzx
  sqrt r1.w, r1.z
  mad r0.z, r0.z, r1.w, cb2[5].w
  exp r0.z, r0.z
  min r0.z, r0.z, l(1.000000)
  add r0.z, -r0.z, l(1.000000)
  rsq r1.z, r1.z
  mul r5.xyz, r1.zzzz, r4.xyzx
  dp3 r1.z, cb2[7].yzwy, r5.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r5.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r5.xyzw, r1.zzzz, r5.xyzw, cb2[4].xyzw
  mul r0.z, r0.z, r5.w
  add r5.xyz, -r2.xyzx, r5.xyzx
  mad r3.xyz, r0.zzzz, r5.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.z, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(1, 0, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r1.z, cb2[55].w, l(16)
ine r1.w, r1.z, l(0)
ieq r1.z, r1.z, l(16)
and r1.z, r1.z, r1.w
and r3.z, r1.z, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.zzzz, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      mov r0.z, l(0)
      break 
      case l(2)
      mov r0.z, l(0)
      break 
      case l(3)
      mov r0.z, l(0)
      break 
      case l(4)
      and r0.z, r4.w, l(255)
      break 
      case l(5)
      ubfe r0.z, l(8), l(8), r4.w
      break 
      default 
      mov r0.z, l(0)
      break 
    endswitch 
    utof r0.z, r0.z
    mul r0.z, r0.z, cb2[53].z
    mad r3.xyz, r0.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r0.w
  add r1.xyz, r4.xyzx, cb1[24].xyzx
  mov r1.w, l(0)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.z, r4.w, l(255)
  store_structured u2.x, cb2[52].x, l(108), r0.z
endif 
if_nz cb2[52].y
  atomic_iadd g1, l(0), l(0)
  atomic_iadd g1, l(4), l(0)
  atomic_iadd g1, l(8), l(0)
  and r0.z, r4.w, l(255)
  atomic_iadd g1, l(12), r0.z
  ubfe r0.w, l(8), l(8), r4.w
  atomic_iadd g1, l(16), r0.w
  atomic_umax g2, l(0), l(0)
  atomic_umax g2, l(4), l(0)
  atomic_umax g2, l(8), l(0)
  atomic_umax g2, l(12), r0.z
  atomic_umax g2, l(16), r0.w
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.z, r1.x, l(63)
  if_nz r0.z
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.z, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.z
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.z, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.z
    ieq r0.xy, r0.xyxx, cb2[52].zwzz
    and r0.x, r0.y, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.z
    endif 
  endif 
endif 
ret 
// Approximately 1331 instruction slots used
