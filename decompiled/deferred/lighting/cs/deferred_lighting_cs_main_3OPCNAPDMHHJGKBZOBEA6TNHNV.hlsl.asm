//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:22:57 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 31
dcl_thread_group 8, 8, 1
imad r0.x, cb2[57].x, l(13), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xz, r0.xxyx, l(4095, 0, 4095, 0)
imad r1.xy, r0.xzxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.xz, cb1[44].xxyx
ult r0.xz, r1.xxyx, r0.xxzx
and r0.x, r0.z, r0.x
lt r0.z, l(0.000000), r2.z
and r0.x, r0.z, r0.x
if_z r0.x
  ret 
endif 
ge r0.z, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r0.w, r1.xyww, t4.yzwx
ld_indexable(texture2d)(float,float,float,float) r3.xyz, r1.xyww, t0.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.xxxy
add r9.xy, r1.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r10.x, r0.w, l(0.984375)
mul r3.w, r0.w, l(1.01587307)
mad r0.w, r0.w, l(64.000000), l(-63.000000)
movc r0.w, r10.x, r0.w, r3.w
max r0.w, r0.w, l(0.00000001)
rcp r10.y, r0.w
and r0.xw, r0.xxxx, r10.xxxy
add r9.zw, r9.xxxy, -cb1[71].xxxy
mul r9.zw, r9.zzzw, cb1[44].zzzw
mad r9.zw, r9.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r10.x, r9.z, cb1[12].x
mul r10.y, r9.w, cb1[13].y
mov r10.z, l(1.000000)
mul r10.xyz, r0.wwww, r10.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r11.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r11.z
mul r11.xy, r2.wwww, r2.xyxx
and r12.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r12.w, r12.z
movc r12.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.w, r0.z, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r10.xyzx, -r10.xyzx
rsq r0.w, r0.w
mul r12.xyz, r0.wwww, -r10.xyzx
dp2 r1.z, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r1.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.z, -r12.xyzx, r11.xyzx
add r1.z, r1.z, r1.z
mad r15.xyz, r11.xyzx, -r1.zzzz, -r12.xyzx
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.w, r1.z
mul r2.zw, r9.xxxy, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r2.z, r2.zwzz, t27.yzxw, s4, l(0.000000)
mul r2.w, r2.z, r4.z
dp3 r3.w, r11.xyzx, cb2[17].xyzx
mov_sat r5.w, r3.w
movc r6.w, r0.z, |r3.w|, r5.w
ge r7.w, l(0.000000), r6.w
if_nz r7.w
  mov r8.w, l(0)
endif 
if_z r7.w
  mul r9.xyz, r10.yyyy, cb2[29].xyzx
  mad r9.xyz, r10.xxxx, cb2[28].xyzx, r9.xyzx
  mad r9.xyz, r10.zzzz, cb2[30].xyzx, r9.xyzx
  add r9.xyz, r9.xyzx, cb2[31].xyzx
  add r7.w, r9.z, -cb2[17].w
  mad r7.w, -r7.w, l(0.00006104), l(1.000000)
  mov_sat r9.w, r7.w
  eq r9.w, r7.w, r9.w
  if_nz r9.w
    mov r9.w, l(0)
    mov r10.w, l(0)
    loop 
      ge r12.w, r9.w, l(3.000000)
      breakc_nz r12.w
      ftou r12.w, r9.w
      add r13.yz, r9.xxyx, -cb2[r12.w + 20].xxyx
      max r13.y, |r13.z|, |r13.y|
      mul r10.w, r13.y, cb2[r12.w + 20].z
      lt r12.w, r10.w, l(1.000000)
      if_nz r12.w
        break 
      endif 
      add r9.w, r9.w, l(1.000000)
      mov r10.w, l(0)
    endloop 
  else 
    mov r9.w, l(3.000000)
    mov r10.w, l(0)
  endif 
  ge r12.w, r9.w, l(3.000000)
  if_nz r12.w
    mul r13.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r16.xz, r13.yyyy
    mov r16.y, -r16.z
    mad r13.yzw, r9.xxyx, r16.xxyz, r13.zzwz
    add r14.yzw, l(0.000000, -0.00781250, -0.00781250, -0.00781250), cb2[27].xxyx
    max r13.yzw, r13.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r13.yzw, r14.yyzw, r13.yyzw
    mul r14.yz, r13.wwzw, cb2[32].xxxx
    round_ni r14.yz, r14.yyzy
    mul r14.z, r14.z, cb2[27].x
    mad r14.y, r14.z, cb2[32].x, r14.y
    ftou r14.y, r14.y
    iadd r14.y, r14.y, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.z, r14.y, l(0), t23.xxxx
    and r14.w, r14.z, l(0x40000000)
    ishl r16.x, r14.z, l(2)
    if_z r14.w
      and r14.w, r14.z, l(0x01ffffff)
      iadd r17.x, r14.w, r14.y
      ushr r14.y, r14.z, l(25)
      utof r14.y, r14.y
      mul r13.yzw, r13.yyzw, r14.yyyy
      frc r13.yzw, r13.yyzw
      mul r13.yzw, r13.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r13.yzw, r13.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.z, r17.x, l(0), t23.xxxx
      ushr r14.yz, r13.wwzw, l(0, 6, 6, 0)
      and r14.w, r17.z, l(0xc0000000)
      iadd r16.y, r17.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.y, r16.y, l(0), t23.xxxx
      movc r14.z, r14.z, r17.z, r16.y
      ushr r16.y, r14.z, l(13)
      movc r14.y, r14.y, r16.y, r14.z
      and r14.y, r14.y, l(8191)
      iadd r18.x, r14.y, r17.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      mov r17.y, l(0)
      mov r18.y, l(1)
      movc r16.yzw, r14.wwww, r17.xxyz, r18.xxyz
      movc r18.yz, r14.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r14.yz, r13.wwzw, r18.yyyy
      and r14.yz, r14.yyzy, l(0, 1, 1, 0)
      and r17.w, r16.w, l(0xc0000000)
      iadd r18.y, r16.y, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.y, r18.y, l(0), t23.xxxx
      movc r14.z, r14.z, r16.w, r18.y
      ushr r18.y, r14.z, l(13)
      movc r14.y, r14.y, r18.y, r14.z
      and r14.y, r14.y, l(8191)
      iadd r18.x, r14.y, r16.y
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.x, l(0), t23.xxxx
      movc r16.yzw, r17.wwww, r16.yyzw, r18.xxzw
      movc r14.yzw, r14.wwww, r17.xxyz, r16.yyzw
      and r16.y, r14.w, l(0xc0000000)
      if_z r16.y
        iadd r16.y, -r14.z, l(6)
        ushr r16.yz, r13.wwzw, r16.yyyy
        or r16.w, r14.w, l(0x40000000)
        bfi r16.z, l(1), l(1), r16.z, l(0)
        bfi r16.y, l(1), l(0), r16.y, r16.z
        imul null, r16.y, r16.y, l(10)
        ushr r16.y, r16.w, r16.y
        and r16.y, r16.y, l(1023)
        iadd r17.x, r14.y, r16.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.x, l(0), t23.xxxx
        iadd r17.yz, r14.zzzz, l(0, 1, 2, 0)
        iadd r14.z, -r17.y, l(6)
        ushr r16.yz, r13.wwzw, r14.zzzz
        and r14.z, r17.w, l(0xc0000000)
        or r16.w, r17.w, l(0x40000000)
        bfi r16.z, l(1), l(1), r16.z, l(0)
        bfi r16.y, l(1), l(0), r16.y, r16.z
        imul null, r16.y, r16.y, l(10)
        ushr r16.y, r16.w, r16.y
        and r16.y, r16.y, l(1023)
        iadd r18.x, r16.y, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
        mov r18.y, r17.z
        movc r16.yzw, r14.zzzz, r17.xxyw, r18.xxyz
        iadd r16.z, -r16.z, l(6)
        ushr r17.yz, r13.wwzw, r16.zzzz
        and r16.z, r16.w, l(0xc0000000)
        or r18.x, r16.w, l(0x40000000)
        bfi r17.z, l(1), l(1), r17.z, l(0)
        bfi r17.y, l(1), l(0), r17.y, r17.z
        imul null, r17.y, r17.y, l(10)
        ushr r17.y, r18.x, r17.y
        and r17.y, r17.y, l(1023)
        iadd r18.x, r16.y, r17.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.y, r18.x, l(0), t23.xxxx
        movc r16.yz, r16.zzzz, r16.yywy, r18.xxyx
        movc r14.yw, r14.zzzz, r17.xxxw, r16.yyyz
      endif 
      and r14.z, r14.w, l(0xc0000000)
      if_z r14.z
        ubfe r16.y, l(14), l(15), r14.w
        utof r16.y, r16.y
        mul r16.y, r16.y, cb2[27].w
        and r16.zw, r14.wwww, l(0, 0, 0x00007fff, 0x20000000)
        utof r16.z, r16.z
        mul r16.z, r16.z, cb2[27].w
        mul r16.yz, r16.yyzy, l(0.000000, 0.00006104, 0.00003052, 0.000000)
        and r17.x, r13.z, l(3)
        iadd r17.x, r14.y, r17.x
        iadd r17.x, r17.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.x, r17.x, l(0), t23.xxxx
        bfi r17.yzw, l(0, 2, 2, 1), l(0, 3, 1, 4), r13.yyzw, l(0, 0, 0, 0)
        ushr r13.y, r17.x, r17.y
        and r13.y, r13.y, l(255)
        utof r13.y, r13.y
        mul r13.y, r16.z, r13.y
        mad r13.y, r13.y, l(0.00392157), r16.y
        iadd r13.z, r17.z, l(1)
        ubfe r13.w, l(1), l(1), r13.w
        iadd r13.z, r13.w, r13.z
        iadd r13.z, r13.z, r14.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.z, r13.z, l(0), t23.xxxx
        ushr r13.z, r13.z, r17.w
        and r13.z, r13.z, l(0x0000ffff)
        utof r13.z, r13.z
        mul r13.z, r16.z, r13.z
        mad r13.z, r13.z, l(0.00001526), r16.y
        movc r16.x, r16.w, r13.y, r13.z
      else 
        and r13.y, r14.w, l(0x80000000)
        iadd r13.z, r14.y, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.z, r13.z, l(0), t23.xxxx
        movc r13.y, r13.y, r13.z, l(0)
        ishl r13.z, r14.w, l(2)
        ushr r13.w, r13.y, l(16)
        and r13.y, r13.y, l(0x0000ffff)
        f16tof32 r13.yw, r13.yyyw
        mad r13.z, r9.x, r13.w, r13.z
        mad r13.y, r9.y, r13.y, r13.z
        movc r16.x, r14.z, r13.y, r16.x
      endif 
    endif 
    mad r9.z, -cb2[27].z, l(2.000000), r9.z
    lt r9.z, r16.x, r9.z
    movc r8.w, r9.z, l(0), l(1.000000)
  endif 
  if_z r12.w
    if_z cb2[58].y
      ftou r9.z, r9.w
      add r13.yz, r9.xxyx, -cb2[r9.z + 20].xxyx
      mul r13.yz, r13.yyzy, cb2[r9.z + 20].zzzz
      mad r16.xy, r13.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r9.z, cb2[26].y
      add r16.z, r9.z, r9.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.z, r16.xyzx, t13.xxxx, s13, r7.w
      sample_l_indexable(texture2darray)(float,float,float,float) r12.w, r16.xyzx, t31.yzwx, s0, l(0.000000)
      add r9.z, r9.z, r12.w
      add_sat r9.z, r9.z, l(-1.000000)
      mul r12.w, r9.z, r9.z
      mul r8.w, r9.z, r12.w
    endif 
    if_nz cb2[58].y
      mov r16.x, -r13.x
      ftou r9.z, r9.w
      add r9.w, r9.w, l(1.000000)
      min r9.w, r9.w, l(2.000000)
      ftou r9.w, r9.w
      add r10.w, -r10.w, l(1.000000)
      mul r10.w, r10.w, l(28.000000)
      ftou r10.w, r10.w
      add r13.yz, r9.xxyx, -cb2[r9.z + 20].xxyx
      mul r13.yz, r13.yyzy, cb2[r9.z + 20].zzzz
      mad r13.yz, r13.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      add r9.xy, r9.xyxx, -cb2[r9.w + 20].xyxx
      mul r9.xy, r9.xyxx, cb2[r9.w + 20].zzzz
      mad r9.xy, r9.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mov r16.y, r14.x
      mov r16.z, r13.x
      mov r12.w, l(0)
      mov r13.w, l(0)
      loop 
        uge r14.y, r13.w, l(8)
        breakc_nz r14.y
        ult r14.y, r10.w, r13.w
        movc r14.zw, r14.yyyy, r9.xxxy, r13.yyyz
        movc r16.w, r14.y, cb2[r9.w + 20].w, cb2[r9.z + 20].w
        movc r14.y, r14.y, r9.w, r9.z
        dp2 r17.x, icb[r13.w + 0].yxyy, r16.xyxx
        dp2 r17.y, icb[r13.w + 0].yxyy, r16.yzyy
        mad r17.xy, r17.xyxx, r16.wwww, r14.zwzz
        iadd r14.y, r14.y, cb2[26].y
        utof r17.z, r14.y
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.y, r17.xyzx, t13.xxxx, s13, r7.w
        sample_l_indexable(texture2darray)(float,float,float,float) r14.z, r17.xyzx, t31.yzxw, s0, l(0.000000)
        add r14.y, r14.z, r14.y
        add_sat r14.y, r14.y, l(-1.000000)
        mad r12.w, r14.y, l(0.125000), r12.w
        iadd r13.w, r13.w, l(1)
      endloop 
      mul r7.w, r12.w, r12.w
      mul r8.w, r12.w, r7.w
    endif 
  endif 
endif 
add r7.w, -r2.y, l(1.000000)
mul r9.x, r7.w, l(5.000000)
mad r9.y, r7.w, l(5.000000), l(-2.500000)
mul r9.y, r9.y, l(0.400000)
max r9.y, r9.y, l(0.000000)
mad r9.zw, -r7.wwww, l(0.000000, 0.000000, 10.000000, 5.000000), l(0.000000, 0.000000, 6.857410, 7.085000)
exp r9.z, r9.z
mul r9.z, r2.x, r9.z
mul r10.w, r7.w, r9.x
mad r9.w, -r10.w, l(2.015905), r9.w
exp r9.w, r9.w
mul r9.w, r2.x, r9.w
mul r9.yzw, r9.yyzw, l(0.000000, 100.000000, 9.136810, 9.708090)
max r9.z, r9.w, r9.z
max r9.z, r9.z, l(1.268160)
iadd r9.w, cb2[0].y, -cb2[58].x
ushr r10.w, r0.y, l(24)
ubfe r0.y, l(10), l(12), r0.y
mov r16.yz, l(0,0,1.000000,0)
mov r17.xy, l(0,0,0,0)
mov r18.x, l(1.000000)
mov r19.xy, l(0,0,0,0)
mov r20.xy, l(0,0,0,0)
mov r21.xyzw, l(0,0,0,0)
mov r22.yzw, l(0,0,0,0)
mov r12.w, l(0)
loop 
  ieq r13.y, r12.w, l(2)
  breakc_nz r13.y
  movc r13.y, r12.w, r0.y, r10.w
  uge r13.z, r13.y, r9.w
  ult r13.w, r13.y, cb2[0].y
  and r13.z, r13.w, r13.z
  if_nz r13.z
    imul null, r13.y, r13.y, l(14)
    add r14.yzw, r10.xxyz, -cb10[r13.y + 0].xxyz
    and r13.z, l(0x0000ffff), cb10[r13.y + 7].z
    ubfe r13.w, l(6), l(25), cb10[r13.y + 7].z
    imul null, r16.w, r13.z, l(6)
    dp3 r17.w, cb11[r16.w + 0].xyzx, r14.yzwy
    add_sat r17.w, r17.w, cb11[r16.w + 0].w
    dp3 r18.z, cb11[r16.w + 1].xyzx, r14.yzwy
    add_sat r18.z, r18.z, cb11[r16.w + 1].w
    mul r17.w, r17.w, r18.z
    dp3 r18.z, cb11[r16.w + 2].xyzx, r14.yzwy
    add_sat r18.z, r18.z, cb11[r16.w + 2].w
    mul r17.w, r17.w, r18.z
    dp3 r18.z, cb11[r16.w + 3].xyzx, r14.yzwy
    add_sat r18.z, r18.z, cb11[r16.w + 3].w
    mul r17.w, r17.w, r18.z
    dp3 r18.z, cb11[r16.w + 4].xyzx, r14.yzwy
    add_sat r18.z, r18.z, cb11[r16.w + 4].w
    mul r17.w, r17.w, r18.z
    dp3 r18.z, cb11[r16.w + 5].xyzx, r14.yzwy
    add_sat r16.w, r18.z, cb11[r16.w + 5].w
    mul r16.x, r16.w, r17.w
    and r16.w, l(1), cb10[r13.y + 6].x
    movc r16.xw, r16.wwww, r16.xxxy, r16.zzzx
    mov r17.w, cb10[r13.y + 6].x
    mov r23.xy, r16.xwxx
    mov r18.z, l(1)
    loop 
      ige r18.w, r18.z, r13.w
      breakc_nz r18.w
      iadd r18.w, r13.z, r18.z
      imul null, r18.w, r18.w, l(6)
      dp3 r19.w, cb11[r18.w + 0].xyzx, r14.yzwy
      add_sat r19.w, r19.w, cb11[r18.w + 0].w
      mul r19.w, r19.w, r23.x
      dp3 r20.w, cb11[r18.w + 1].xyzx, r14.yzwy
      add_sat r20.w, r20.w, cb11[r18.w + 1].w
      mul r19.w, r19.w, r20.w
      dp3 r20.w, cb11[r18.w + 2].xyzx, r14.yzwy
      add_sat r20.w, r20.w, cb11[r18.w + 2].w
      mul r19.w, r19.w, r20.w
      dp3 r20.w, cb11[r18.w + 3].xyzx, r14.yzwy
      add_sat r20.w, r20.w, cb11[r18.w + 3].w
      mul r19.w, r19.w, r20.w
      dp3 r20.w, cb11[r18.w + 4].xyzx, r14.yzwy
      add_sat r20.w, r20.w, cb11[r18.w + 4].w
      mul r19.w, r19.w, r20.w
      dp3 r20.w, cb11[r18.w + 5].xyzx, r14.yzwy
      add_sat r18.w, r20.w, cb11[r18.w + 5].w
      mul r23.x, r18.w, r19.w
      ushr r20.w, r17.w, l(2)
      ubfe r23.z, l(1), l(2), r17.w
      and r23.w, r20.w, l(2)
      max r24.x, r23.x, r23.y
      mad r18.w, -r19.w, r18.w, l(1.000000)
      mul r18.w, r18.w, r23.y
      movc r18.y, r23.w, r18.w, r24.x
      movc r23.xy, r23.zzzz, r23.xyxx, r18.xyxx
      iadd r18.z, r18.z, l(1)
      mov r17.w, r20.w
    endloop 
    mov_sat r23.y, r23.y
    mul r13.z, r23.y, cb10[r13.y + 6].y
    lt r13.w, l(0.000000), r13.z
    if_nz r13.w
      mad r22.w, r23.y, cb10[r13.y + 6].y, r22.w
      mul r13.z, r13.z, cb10[r13.y + 7].y
      mov r24.x, cb10[r13.y + 7].w
      mov r24.yz, cb10[r13.y + 8].xxyx
      dp3 r13.w, r15.xyzx, r24.xyzx
      dp3 r16.x, r14.yzwy, r24.xyzx
      add r16.x, r16.x, -cb10[r13.y + 8].z
      ge r16.w, r16.x, l(0.000000)
      max r16.x, r9.y, |r16.x|
      movc r16.x, r16.w, r16.x, -r16.x
      max r13.w, -r13.w, l(0.00000010)
      div r13.w, r16.x, r13.w
      min r13.w, |r13.w|, l(131072.000000)
      mov r24.x, cb10[r13.y + 8].w
      mov r24.yz, cb10[r13.y + 9].xxyx
      dp3 r16.x, r15.xyzx, r24.xyzx
      dp3 r16.w, r14.yzwy, r24.xyzx
      add r16.w, r16.w, -cb10[r13.y + 9].z
      ge r17.w, r16.w, l(0.000000)
      max r16.w, r9.y, |r16.w|
      movc r16.w, r17.w, r16.w, -r16.w
      max r16.x, -r16.x, l(0.00000010)
      div r16.x, r16.w, r16.x
      min r13.w, r13.w, |r16.x|
      mov r24.x, cb10[r13.y + 9].w
      mov r24.yz, cb10[r13.y + 10].xxyx
      dp3 r16.x, r15.xyzx, r24.xyzx
      dp3 r16.w, r14.yzwy, r24.xyzx
      add r16.w, r16.w, -cb10[r13.y + 10].z
      ge r17.w, r16.w, l(0.000000)
      max r16.w, r9.y, |r16.w|
      movc r16.w, r17.w, r16.w, -r16.w
      max r16.x, -r16.x, l(0.00000010)
      div r16.x, r16.w, r16.x
      min r13.w, r13.w, |r16.x|
      mov r24.x, cb10[r13.y + 10].w
      mov r24.yz, cb10[r13.y + 11].xxyx
      dp3 r16.x, r15.xyzx, r24.xyzx
      dp3 r16.w, r14.yzwy, r24.xyzx
      add r16.w, r16.w, -cb10[r13.y + 11].z
      ge r17.w, r16.w, l(0.000000)
      max r16.w, r9.y, |r16.w|
      movc r16.w, r17.w, r16.w, -r16.w
      max r16.x, -r16.x, l(0.00000010)
      div r16.x, r16.w, r16.x
      min r13.w, r13.w, |r16.x|
      mov r24.x, cb10[r13.y + 11].w
      mov r24.yz, cb10[r13.y + 12].xxyx
      dp3 r16.x, r15.xyzx, r24.xyzx
      dp3 r16.w, r14.yzwy, r24.xyzx
      add r16.w, r16.w, -cb10[r13.y + 12].z
      ge r17.w, r16.w, l(0.000000)
      max r16.w, r9.y, |r16.w|
      movc r16.w, r17.w, r16.w, -r16.w
      max r16.x, -r16.x, l(0.00000010)
      div r16.x, r16.w, r16.x
      min r13.w, r13.w, |r16.x|
      mov r24.x, cb10[r13.y + 12].w
      mov r24.yz, cb10[r13.y + 13].xxyx
      dp3 r16.x, r15.xyzx, r24.xyzx
      dp3 r16.w, r14.yzwy, r24.xyzx
      add r16.w, r16.w, -cb10[r13.y + 13].z
      ge r17.w, r16.w, l(0.000000)
      max r16.w, r9.y, |r16.w|
      movc r16.w, r17.w, r16.w, -r16.w
      max r16.x, -r16.x, l(0.00000010)
      div r16.x, r16.w, r16.x
      min r13.w, r13.w, |r16.x|
      add r24.x, r14.y, cb10[r13.y + 3].w
      add r24.yz, r14.zzwz, cb10[r13.y + 4].xxyx
      mad r18.yzw, r15.xxyz, r13.wwww, r24.xxyz
      dp3 r16.x, r18.yzwy, r18.yzwy
      sqrt r16.x, r16.x
      div r13.w, r13.w, r16.x
      add r13.w, r13.w, r13.w
      sqrt r13.w, r13.w
      mad r13.w, r7.w, l(5.000000), r13.w
      add r13.w, r13.w, l(-0.844800)
      mov r24.x, cb10[r13.y + 0].w
      mov r24.y, cb10[r13.y + 1].z
      mov r24.z, cb10[r13.y + 2].y
      dp3 r25.x, r18.yzwy, r24.xyzx
      mov r26.xy, cb10[r13.y + 1].xwxx
      mov r26.z, cb10[r13.y + 2].z
      dp3 r25.y, r18.yzwy, r26.xyzx
      mov r27.x, cb10[r13.y + 1].y
      mov r27.yz, cb10[r13.y + 2].xxwx
      dp3 r25.z, r18.yzwy, r27.xyzx
      ubfe r16.x, l(9), l(16), cb10[r13.y + 7].z
      utof r25.w, r16.x
      sample_l_indexable(texturecubearray)(float,float,float,float) r18.yzw, r25.xyzw, t8.wxyz, s2, r13.w
      dp3 r28.x, r14.yzwy, r24.xyzx
      dp3 r28.y, r14.yzwy, r26.xyzx
      dp3 r28.z, r14.yzwy, r27.xyzx
      mad_sat r14.yzw, r28.xxyz, cb10[r13.y + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r28.xy, r14.yzyy, cb10[r13.y + 4].zwzz
      mul r28.z, r14.w, cb10[r13.y + 5].x
      add r14.yzw, r28.xxyz, cb10[r13.y + 5].yyzw
      dp3 r25.x, r11.xyzx, r24.xyzx
      dp3 r25.y, r11.xyzx, r26.xyzx
      dp3 r25.z, r11.xyzx, r27.xyzx
      lt r23.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r25.xxyz
      movc r17.z, r23.x, l(0), l(0.500000)
      add r24.xyz, r14.yzwy, r17.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r24.xyz, r24.xyzx, t17.xyzw, s4, l(0.000000)
      mul r26.xyz, r25.xyzx, r25.xyzx
      mul r26.xyz, r13.zzzz, r26.xyzx
      movc r19.z, r23.z, l(0), l(0.500000)
      add r27.xyz, r14.yzwy, r19.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r27.xyz, r27.xyzx, t18.xyzw, s4, l(0.000000)
      mul r27.xyz, r26.yyyy, r27.xyzx
      mad r24.xyz, r24.xyzx, r26.xxxx, r27.xyzx
      movc r20.z, r23.w, l(0), l(0.500000)
      add r14.yzw, r14.yyzw, r20.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r14.yzw, r14.yzwy, t19.wxyz, s4, l(0.000000)
      mad r14.yzw, r14.yyzw, r26.zzzz, r24.xxyz
      sample_l_indexable(texturecubearray)(float,float,float,float) r23.xzw, r25.xyzw, t8.xwyz, s2, l(6.000000)
      mul r24.xyz, r14.yzwy, r23.xzwx
      dp3 r13.y, r24.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r21.xyz, r14.yzwy, r23.xzwx, r21.xyzx
      mul r13.w, r9.z, r13.y
      mul r14.yzw, r13.zzzz, r18.yyzw
      dp3 r13.z, r14.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r13.y, r9.z, r13.y, r13.z
      div r13.y, r13.w, r13.y
      mov r24.x, r21.w
      mov r24.yz, r22.yyzy
      mad r22.xyz, r14.yzwy, r13.yyyy, r24.xyzx
      mov r21.w, r22.x
    endif 
  endif 
  iadd r12.w, r12.w, l(1)
endloop 
lt r12.w, r22.w, l(1.000000)
if_nz r12.w
  mov r16.yz, l(0,0,1.000000,0)
  mov r17.xy, l(0,0,0,0)
  mov r18.x, l(1.000000)
  mov r19.xy, l(0,0,0,0)
  mov r20.xy, l(0,0,0,0)
  mov r23.x, r21.w
  mov r23.yzw, r22.yyzw
  mov r13.yzw, r21.xxyz
  mov r12.w, l(0)
  loop 
    ieq r14.y, r12.w, l(2)
    breakc_nz r14.y
    movc r14.y, r12.w, r0.y, r10.w
    ult r14.z, r14.y, r9.w
    if_nz r14.z
      imul null, r14.y, r14.y, l(14)
      add r24.xyz, r10.xyzx, -cb10[r14.y + 0].xyzx
      and r14.z, l(0x0000ffff), cb10[r14.y + 7].z
      ubfe r14.w, l(6), l(25), cb10[r14.y + 7].z
      imul null, r16.w, r14.z, l(6)
      dp3 r17.w, cb11[r16.w + 0].xyzx, r24.xyzx
      add_sat r17.w, r17.w, cb11[r16.w + 0].w
      dp3 r18.z, cb11[r16.w + 1].xyzx, r24.xyzx
      add_sat r18.z, r18.z, cb11[r16.w + 1].w
      mul r17.w, r17.w, r18.z
      dp3 r18.z, cb11[r16.w + 2].xyzx, r24.xyzx
      add_sat r18.z, r18.z, cb11[r16.w + 2].w
      mul r17.w, r17.w, r18.z
      dp3 r18.z, cb11[r16.w + 3].xyzx, r24.xyzx
      add_sat r18.z, r18.z, cb11[r16.w + 3].w
      mul r17.w, r17.w, r18.z
      dp3 r18.z, cb11[r16.w + 4].xyzx, r24.xyzx
      add_sat r18.z, r18.z, cb11[r16.w + 4].w
      mul r17.w, r17.w, r18.z
      dp3 r18.z, cb11[r16.w + 5].xyzx, r24.xyzx
      add_sat r16.w, r18.z, cb11[r16.w + 5].w
      mul r16.x, r16.w, r17.w
      and r16.w, l(1), cb10[r14.y + 6].x
      movc r16.xw, r16.wwww, r16.xxxy, r16.zzzx
      mov r17.w, cb10[r14.y + 6].x
      mov r25.xy, r16.xwxx
      mov r18.z, l(1)
      loop 
        ige r18.w, r18.z, r14.w
        breakc_nz r18.w
        iadd r18.w, r14.z, r18.z
        imul null, r18.w, r18.w, l(6)
        dp3 r19.w, cb11[r18.w + 0].xyzx, r24.xyzx
        add_sat r19.w, r19.w, cb11[r18.w + 0].w
        mul r19.w, r19.w, r25.x
        dp3 r20.w, cb11[r18.w + 1].xyzx, r24.xyzx
        add_sat r20.w, r20.w, cb11[r18.w + 1].w
        mul r19.w, r19.w, r20.w
        dp3 r20.w, cb11[r18.w + 2].xyzx, r24.xyzx
        add_sat r20.w, r20.w, cb11[r18.w + 2].w
        mul r19.w, r19.w, r20.w
        dp3 r20.w, cb11[r18.w + 3].xyzx, r24.xyzx
        add_sat r20.w, r20.w, cb11[r18.w + 3].w
        mul r19.w, r19.w, r20.w
        dp3 r20.w, cb11[r18.w + 4].xyzx, r24.xyzx
        add_sat r20.w, r20.w, cb11[r18.w + 4].w
        mul r19.w, r19.w, r20.w
        dp3 r20.w, cb11[r18.w + 5].xyzx, r24.xyzx
        add_sat r18.w, r20.w, cb11[r18.w + 5].w
        mul r25.x, r18.w, r19.w
        ushr r20.w, r17.w, l(2)
        ubfe r24.w, l(1), l(2), r17.w
        and r25.z, r20.w, l(2)
        max r25.w, r25.x, r25.y
        mad r18.w, -r19.w, r18.w, l(1.000000)
        mul r18.w, r18.w, r25.y
        movc r18.y, r25.z, r18.w, r25.w
        movc r25.xy, r24.wwww, r25.xyxx, r18.xyxx
        iadd r18.z, r18.z, l(1)
        mov r17.w, r20.w
      endloop 
      add_sat r14.z, -r22.w, r25.y
      mul r14.w, r14.z, cb10[r14.y + 6].y
      lt r16.x, l(0.000000), r14.w
      if_nz r16.x
        mad r23.w, r14.z, cb10[r14.y + 6].y, r23.w
        mul r14.z, r14.w, cb10[r14.y + 7].y
        mov r26.x, cb10[r14.y + 7].w
        mov r26.yz, cb10[r14.y + 8].xxyx
        dp3 r14.w, r15.xyzx, r26.xyzx
        dp3 r16.x, r24.xyzx, r26.xyzx
        add r16.x, r16.x, -cb10[r14.y + 8].z
        ge r16.w, r16.x, l(0.000000)
        max r16.x, r9.y, |r16.x|
        movc r16.x, r16.w, r16.x, -r16.x
        max r14.w, -r14.w, l(0.00000010)
        div r14.w, r16.x, r14.w
        min r14.w, |r14.w|, l(131072.000000)
        mov r26.x, cb10[r14.y + 8].w
        mov r26.yz, cb10[r14.y + 9].xxyx
        dp3 r16.x, r15.xyzx, r26.xyzx
        dp3 r16.w, r24.xyzx, r26.xyzx
        add r16.w, r16.w, -cb10[r14.y + 9].z
        ge r17.w, r16.w, l(0.000000)
        max r16.w, r9.y, |r16.w|
        movc r16.w, r17.w, r16.w, -r16.w
        max r16.x, -r16.x, l(0.00000010)
        div r16.x, r16.w, r16.x
        min r14.w, r14.w, |r16.x|
        mov r26.x, cb10[r14.y + 9].w
        mov r26.yz, cb10[r14.y + 10].xxyx
        dp3 r16.x, r15.xyzx, r26.xyzx
        dp3 r16.w, r24.xyzx, r26.xyzx
        add r16.w, r16.w, -cb10[r14.y + 10].z
        ge r17.w, r16.w, l(0.000000)
        max r16.w, r9.y, |r16.w|
        movc r16.w, r17.w, r16.w, -r16.w
        max r16.x, -r16.x, l(0.00000010)
        div r16.x, r16.w, r16.x
        min r14.w, r14.w, |r16.x|
        mov r26.x, cb10[r14.y + 10].w
        mov r26.yz, cb10[r14.y + 11].xxyx
        dp3 r16.x, r15.xyzx, r26.xyzx
        dp3 r16.w, r24.xyzx, r26.xyzx
        add r16.w, r16.w, -cb10[r14.y + 11].z
        ge r17.w, r16.w, l(0.000000)
        max r16.w, r9.y, |r16.w|
        movc r16.w, r17.w, r16.w, -r16.w
        max r16.x, -r16.x, l(0.00000010)
        div r16.x, r16.w, r16.x
        min r14.w, r14.w, |r16.x|
        mov r26.x, cb10[r14.y + 11].w
        mov r26.yz, cb10[r14.y + 12].xxyx
        dp3 r16.x, r15.xyzx, r26.xyzx
        dp3 r16.w, r24.xyzx, r26.xyzx
        add r16.w, r16.w, -cb10[r14.y + 12].z
        ge r17.w, r16.w, l(0.000000)
        max r16.w, r9.y, |r16.w|
        movc r16.w, r17.w, r16.w, -r16.w
        max r16.x, -r16.x, l(0.00000010)
        div r16.x, r16.w, r16.x
        min r14.w, r14.w, |r16.x|
        mov r26.x, cb10[r14.y + 12].w
        mov r26.yz, cb10[r14.y + 13].xxyx
        dp3 r16.x, r15.xyzx, r26.xyzx
        dp3 r16.w, r24.xyzx, r26.xyzx
        add r16.w, r16.w, -cb10[r14.y + 13].z
        ge r17.w, r16.w, l(0.000000)
        max r16.w, r9.y, |r16.w|
        movc r16.w, r17.w, r16.w, -r16.w
        max r16.x, -r16.x, l(0.00000010)
        div r16.x, r16.w, r16.x
        min r14.w, r14.w, |r16.x|
        add r26.x, r24.x, cb10[r14.y + 3].w
        add r26.yz, r24.yyzy, cb10[r14.y + 4].xxyx
        mad r18.yzw, r15.xxyz, r14.wwww, r26.xxyz
        dp3 r16.x, r18.yzwy, r18.yzwy
        sqrt r16.x, r16.x
        div r14.w, r14.w, r16.x
        add r14.w, r14.w, r14.w
        sqrt r14.w, r14.w
        mad r14.w, r7.w, l(5.000000), r14.w
        add r14.w, r14.w, l(-0.844800)
        mov r26.x, cb10[r14.y + 0].w
        mov r26.y, cb10[r14.y + 1].z
        mov r26.z, cb10[r14.y + 2].y
        dp3 r27.x, r18.yzwy, r26.xyzx
        mov r28.xy, cb10[r14.y + 1].xwxx
        mov r28.z, cb10[r14.y + 2].z
        dp3 r27.y, r18.yzwy, r28.xyzx
        mov r29.x, cb10[r14.y + 1].y
        mov r29.yz, cb10[r14.y + 2].xxwx
        dp3 r27.z, r18.yzwy, r29.xyzx
        ubfe r16.x, l(9), l(16), cb10[r14.y + 7].z
        utof r27.w, r16.x
        sample_l_indexable(texturecubearray)(float,float,float,float) r18.yzw, r27.xyzw, t8.wxyz, s2, r14.w
        dp3 r30.x, r24.xyzx, r26.xyzx
        dp3 r30.y, r24.xyzx, r28.xyzx
        dp3 r30.z, r24.xyzx, r29.xyzx
        mad_sat r24.xyz, r30.xyzx, cb10[r14.y + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
        mul r30.xy, r24.xyxx, cb10[r14.y + 4].zwzz
        mul r30.z, r24.z, cb10[r14.y + 5].x
        add r24.xyz, r30.xyzx, cb10[r14.y + 5].yzwy
        dp3 r27.x, r11.xyzx, r26.xyzx
        dp3 r27.y, r11.xyzx, r28.xyzx
        dp3 r27.z, r11.xyzx, r29.xyzx
        lt r25.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r27.xxyz
        movc r17.z, r25.x, l(0), l(0.500000)
        add r26.xyz, r17.xyzx, r24.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t17.xyzw, s4, l(0.000000)
        mul r28.xyz, r27.xyzx, r27.xyzx
        mul r28.xyz, r14.zzzz, r28.xyzx
        movc r19.z, r25.z, l(0), l(0.500000)
        add r29.xyz, r19.xyzx, r24.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t18.xyzw, s4, l(0.000000)
        mul r29.xyz, r28.yyyy, r29.xyzx
        mad r26.xyz, r26.xyzx, r28.xxxx, r29.xyzx
        movc r20.z, r25.w, l(0), l(0.500000)
        add r24.xyz, r20.xyzx, r24.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r24.xyz, r24.xyzx, t19.xyzw, s4, l(0.000000)
        mad r24.xyz, r24.xyzx, r28.zzzz, r26.xyzx
        sample_l_indexable(texturecubearray)(float,float,float,float) r25.xzw, r27.xyzw, t8.xwyz, s2, l(6.000000)
        mul r26.xyz, r24.xyzx, r25.xzwx
        dp3 r14.y, r26.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r13.yzw, r24.xxyz, r25.xxzw, r13.yyzw
        mul r14.w, r9.z, r14.y
        mul r18.yzw, r14.zzzz, r18.yyzw
        dp3 r14.z, r18.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r14.y, r9.z, r14.y, r14.z
        div r14.y, r14.w, r14.y
        mad r23.xyz, r18.yzwy, r14.yyyy, r23.xyzx
      endif 
    endif 
    iadd r12.w, r12.w, l(1)
  endloop 
  mov r22.xyzw, r23.zxyw
  mov r21.xyz, r13.yzwy
  mov r22.xyzw, r22.yzxw
else 
  mov r22.x, r21.w
endif 
max r0.y, r22.w, l(1.000000)
rcp r0.y, r0.y
mov_sat r22.w, r22.w
mul r9.yzw, r0.yyyy, r21.xxyz
mul r13.yzw, r0.yyyy, r22.xxyz
lt r7.w, r22.w, l(0.990000)
if_nz r7.w
  add r7.w, -r22.w, l(1.000000)
  mul r10.w, r7.w, cb2[19].x
  add r14.yzw, r10.xxyz, -cb2[35].xxyz
  mul r16.x, r14.y, cb2[35].w
  mul r16.yz, r14.zzwz, cb2[36].xxyx
  add_sat r14.yzw, r16.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
  mul r16.xy, r14.yzyy, cb2[36].zwzz
  mul r16.z, r14.w, cb2[37].x
  add r14.yzw, r16.xxyz, cb2[37].yyzw
  lt r16.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r16.xyz, r16.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r16.w, l(0)
  add r17.xyz, r14.yzwy, r16.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t17.xyzw, s4, l(0.000000)
  mul r18.xyz, r11.xyzx, r11.xyzx
  mul r18.xyz, r10.wwww, r18.xyzx
  add r19.xyz, r14.yzwy, r16.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t18.xyzw, s4, l(0.000000)
  mul r19.xyz, r18.yyyy, r19.xyzx
  mad r17.xyz, r17.xyzx, r18.xxxx, r19.xyzx
  add r14.yzw, r14.yyzw, r16.wwwz
  sample_l_indexable(texture3d)(float,float,float,float) r14.yzw, r14.yzwy, t19.wxyz, s4, l(0.000000)
  mad r14.yzw, r14.yyzw, r18.zzzz, r17.xxyz
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r16.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r14.yzw, r14.yyzw, r16.xxyz
  dp3 r10.w, r14.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r9.yzw, r21.xxyz, r0.yyyy, r14.yyzw
  mov r15.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r14.yzw, r15.xyzw, t8.wxyz, s2, r9.x
  mad r0.y, cb2[19].x, r7.w, -r10.w
  mad r0.y, r2.y, r0.y, r10.w
  mad r13.yzw, r14.yyzw, r0.yyyy, r13.yyzw
endif 
mad r0.y, r4.z, r2.z, r2.x
log r0.y, |r0.y|
mul r0.y, r0.y, r1.w
exp r0.y, r0.y
mad r0.y, r4.z, r2.z, r0.y
add_sat r0.y, r0.y, l(-1.000000)
mul r14.yzw, r2.wwww, r9.yyzw
and r15.xyz, r0.zzzz, r14.yzwy
mad r2.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t5.zxyw, s2, l(0.000000)
mul r13.yzw, r0.yyyy, r13.yyzw
mul r16.xyz, r2.yyyy, r13.yzwy
mul r13.yzw, r2.zzzz, r13.yyzw
lt r0.y, l(0.000000), r6.w
if_nz r0.y
  lt r0.y, l(0.000000), r8.w
  if_nz r0.y
    sqrt r0.y, r1.w
    mad r0.y, r0.y, l(0.500000), l(0.500000)
    mul r0.y, r0.y, r0.y
    mul r2.y, r0.y, l(0.500000)
    mad r0.y, -r0.y, l(0.500000), l(1.000000)
    mad r2.z, r2.x, r0.y, r2.y
    mul r0.y, r0.y, r2.z
    mul r2.y, r2.z, r2.y
    mul r2.z, r1.z, cb2[18].w
    mul r2.z, r5.w, r2.z
    if_nz cb2[23].x
      add r17.xyz, r10.xyzx, cb1[24].xyzx
      mov r17.w, l(1.000000)
      dp4 r4.z, cb2[24].xyzw, r17.xyzw
      dp4 r7.w, cb2[25].xyzw, r17.xyzw
      frc r17.x, r4.z
      frc r17.y, r7.w
      iadd r4.z, l(-1), cb2[23].x
      utof r17.z, r4.z
      sample_l_indexable(texture2darray)(float,float,float,float) r17.xyz, r17.xyzx, t20.xyzw, s2, l(0.000000)
      add r17.xyz, r17.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r17.xyz, cb2[23].yyyy, r17.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r17.xyz, r17.xyzx, cb2[18].xyzx
    else 
      mov r17.xyz, cb2[18].xyzx
    endif 
    ushr r4.z, cb2[53].x, l(16)
    ult r7.w, l(0), r4.z
    and r7.w, r0.x, r7.w
    if_nz r7.w
      iadd r4.z, r4.z, cb2[0].x
      imad r4.z, r4.z, l(15), l(-15)
      mad r7.w, |r3.w|, l(-0.200000), l(0.400000)
      lt r9.x, r3.w, l(0.000000)
      and r9.x, r0.z, r9.x
      movc r7.w, r9.x, -r7.w, r7.w
      mad r18.xyz, r11.xyzx, r7.wwww, r10.xyzx
      mov r19.xyz, cb9[r4.z + 4].yzwy
      mov r19.w, cb9[r4.z + 5].x
      mov r18.w, l(1.000000)
      dp4 r19.x, r19.xyzw, r18.xyzw
      mov r20.xyz, cb9[r4.z + 5].yzwy
      mov r20.w, cb9[r4.z + 6].x
      dp4 r19.y, r20.xyzw, r18.xyzw
      mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r20.x, r19.x, cb9[r4.z + 9].w
      add r20.y, r19.y, cb9[r4.z + 10].x
      mul r19.xy, r20.xyxx, cb9[r4.z + 9].yzyy
      div r19.zw, cb9[r4.z + 3].yyyy, cb9[r4.z + 8].yyyw
      add r20.xy, -r19.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r20.xy, r19.xyxx, r20.xyxx
      ge r19.zw, r19.zzzw, r19.xxxy
      or r19.zw, r19.zzzw, r20.xxxy
      or r7.w, r19.w, r19.z
      if_z r7.w
        mov r20.xyz, cb9[r4.z + 6].yzwy
        mov r20.w, cb9[r4.z + 7].x
        dp4 r7.w, r20.xyzw, r18.xyzw
        mov_sat r19.xy, r19.xyxx
        mad r18.x, r19.x, cb9[r4.z + 8].y, cb9[r4.z + 8].z
        mad r18.y, r19.y, cb9[r4.z + 8].w, cb9[r4.z + 9].x
        add r7.w, r7.w, cb9[r4.z + 10].y
        div r7.w, r7.w, cb9[r4.z + 10].z
        max r7.w, r7.w, l(0.00006104)
        and r9.x, l(0x0000ffff), cb9[r4.z + 1].w
        if_nz cb2[58].y
          mov r19.x, -r13.x
          utof r20.z, r9.x
          mov r19.y, r14.x
          mov r19.z, r13.x
          mov r10.w, l(0)
          mov r11.w, l(0)
          loop 
            ige r12.w, r11.w, l(8)
            breakc_nz r12.w
            dp2 r21.x, icb[r11.w + 0].yxyy, r19.xyxx
            dp2 r21.y, icb[r11.w + 0].yxyy, r19.yzyy
            mad r20.xy, r21.xyxx, cb9[r4.z + 3].yyyy, r18.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r20.xyzx, t9.xxxx, s13, r7.w
            mad r10.w, r12.w, l(0.125000), r10.w
            iadd r11.w, r11.w, l(1)
          endloop 
        else 
          utof r18.z, r9.x
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r18.xyzx, t9.xxxx, s13, r7.w
        endif 
        mul r4.z, r10.w, r10.w
        mul r4.z, r10.w, r4.z
      else 
        mov r4.z, l(1.000000)
      endif 
      mul r8.w, r4.z, r8.w
    else 
      and r4.z, cb2[53].x, l(0x0000ffff)
      ult r7.w, l(0), r4.z
      not r0.x, r0.x
      and r0.x, r0.x, r7.w
      if_nz r0.x
        iadd r0.x, r4.z, cb2[0].x
        imad r0.x, r0.x, l(15), l(-15)
        mad r4.z, |r3.w|, l(-0.200000), l(0.400000)
        lt r7.w, r3.w, l(0.000000)
        and r7.w, r0.z, r7.w
        movc r4.z, r7.w, -r4.z, r4.z
        mad r18.xyz, r11.xyzx, r4.zzzz, r10.xyzx
        mov r19.xyz, cb9[r0.x + 4].yzwy
        mov r19.w, cb9[r0.x + 5].x
        mov r18.w, l(1.000000)
        dp4 r19.x, r19.xyzw, r18.xyzw
        mov r20.xyz, cb9[r0.x + 5].yzwy
        mov r20.w, cb9[r0.x + 6].x
        dp4 r19.y, r20.xyzw, r18.xyzw
        mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r20.x, r19.x, cb9[r0.x + 9].w
        add r20.y, r19.y, cb9[r0.x + 10].x
        mul r19.xy, r20.xyxx, cb9[r0.x + 9].yzyy
        div r19.zw, cb9[r0.x + 3].yyyy, cb9[r0.x + 8].yyyw
        add r20.xy, -r19.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r20.xy, r19.xyxx, r20.xyxx
        ge r19.zw, r19.zzzw, r19.xxxy
        or r19.zw, r19.zzzw, r20.xxxy
        or r4.z, r19.w, r19.z
        if_z r4.z
          mov r20.xyz, cb9[r0.x + 6].yzwy
          mov r20.w, cb9[r0.x + 7].x
          dp4 r4.z, r20.xyzw, r18.xyzw
          mov_sat r19.xy, r19.xyxx
          mad r18.x, r19.x, cb9[r0.x + 8].y, cb9[r0.x + 8].z
          mad r18.y, r19.y, cb9[r0.x + 8].w, cb9[r0.x + 9].x
          add r4.z, r4.z, cb9[r0.x + 10].y
          div r4.z, r4.z, cb9[r0.x + 10].z
          max r4.z, r4.z, l(0.00006104)
          and r7.w, l(0x0000ffff), cb9[r0.x + 1].w
          if_nz cb2[58].y
            mov r19.x, -r13.x
            utof r20.z, r7.w
            mov r19.y, r14.x
            mov r19.z, r13.x
            mov r9.x, l(0)
            mov r10.w, l(0)
            loop 
              ige r11.w, r10.w, l(8)
              breakc_nz r11.w
              dp2 r21.x, icb[r10.w + 0].yxyy, r19.xyxx
              dp2 r21.y, icb[r10.w + 0].yxyy, r19.yzyy
              mad r20.xy, r21.xyxx, cb9[r0.x + 3].yyyy, r18.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.w, r20.xyzx, t9.xxxx, s13, r4.z
              mad r9.x, r11.w, l(0.125000), r9.x
              iadd r10.w, r10.w, l(1)
            endloop 
          else 
            utof r18.z, r7.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.x, r18.xyzx, t9.xxxx, s13, r4.z
          endif 
          mul r0.x, r9.x, r9.x
          mul r0.x, r9.x, r0.x
        else 
          mov r0.x, l(1.000000)
        endif 
        mul r8.w, r0.x, r8.w
      endif 
    endif 
    mad r0.x, -r2.x, l(0.500000), l(1.000000)
    mad r0.x, -r6.w, r0.x, l(1.000000)
    mul r0.x, r0.x, r0.x
    mad r0.x, -r0.x, l(0.620000), l(0.620000)
    add r0.x, -r6.w, r0.x
    mad r0.x, r1.w, r0.x, r6.w
    mul r0.x, r8.w, r0.x
    mul r18.xyz, r17.xyzx, r0.xxxx
    lt r1.w, l(0.000000), r3.w
    mad r9.xyz, r9.yzwy, r2.wwww, r18.xyzx
    mad r18.xyz, -r10.xyzx, r0.wwww, cb2[17].xyzx
    dp3 r0.w, r18.xyzx, r18.xyzx
    rsq r0.w, r0.w
    mul r18.xyz, r0.wwww, r18.xyzx
    dp3 r0.w, r18.xyzx, r12.xyzx
    dp3 r2.x, r11.xyzx, r18.xyzx
    mad r1.z, |r2.x|, r1.z, -|r2.x|
    mad r1.z, |r2.x|, r1.z, l(1.000000)
    mad r0.y, r5.w, r0.y, r2.y
    mul r1.z, r1.z, r1.z
    mul r0.y, r0.y, r1.z
    rcp r0.y, r0.y
    mul r0.y, r2.z, r0.y
    mul r0.y, r0.y, r8.w
    mul r0.y, r0.y, l(0.250000)
    mad r2.xyz, r0.yyyy, r17.xyzx, r13.yzwy
    add_sat r0.w, -r0.w, l(1.000000)
    mul r1.z, r0.w, r0.w
    mul r1.z, r1.z, r1.z
    mul r0.w, r0.w, r1.z
    mul r0.y, r0.w, r0.y
    mad r11.xyz, r0.yyyy, r17.xyzx, r16.xyzx
    mad r0.xyw, r0.xxxx, r17.xyxz, r15.xyxz
    and r0.xyw, r0.xyxw, r0.zzzz
    movc r14.yzw, r1.wwww, r9.xxyz, r14.yyzw
    movc r15.xyz, r1.wwww, r15.xyzx, r0.xywx
    movc r16.xyz, r1.wwww, r11.xyzx, r16.xyzx
    movc r13.yzw, r1.wwww, r2.xxyz, r13.yyzw
  endif 
endif 
mad r2.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.x, r2.y
mad r4.xyz, r5.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.y, r4.x
ieq r0.y, r0.x, r0.y
movc r0.yw, r0.yyyy, r4.yyyz, l(0,-1.000000,0,0)
mad r4.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r4.x
ieq r1.z, r0.x, r1.z
movc r1.zw, r1.zzzz, r4.yyyz, l(0,0,-1.000000,0)
mad r4.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r3.w, r4.x
ieq r3.w, r0.x, r3.w
movc r4.xy, r3.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r5.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r3.w, r5.x
ieq r0.x, r0.x, r3.w
movc r4.zw, r0.xxxx, r5.yyyz, l(0,0,-1.000000,0)
mov r5.x, r0.y
mov r5.y, r1.z
mov r5.zw, r4.xxxz
add r5.xyzw, -r2.xxxx, r5.xyzw
ge r5.xyzw, |r5.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r5.xyzw, r5.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.x, r5.y, r5.x
add r0.x, r5.z, r0.x
add r0.x, r5.w, r0.x
mul r0.y, r1.w, r5.y
mad r0.y, r5.x, r0.w, r0.y
mad r0.y, r5.z, r4.y, r0.y
mad r0.y, r5.w, r4.w, r0.y
div r2.w, r0.y, r0.x
ge r0.x, l(0.000000), r0.x
movc r2.yz, r0.xxxx, l(0,0,0,0), r2.zzwz
and r0.xy, r1.xyxx, l(1, 1, 0, 0)
ieq r0.x, r0.y, r0.x
movc r0.xyw, r0.xxxx, r2.xyxz, r2.xzxy
mad r0.x, -r0.w, l(0.500000), r0.x
add r2.y, r0.x, r0.w
mad r2.z, -r0.y, l(0.500000), r0.x
add r2.x, r0.y, r2.z
mul r0.xyw, r3.xyxz, r14.yzyw
mad r0.xyw, r15.xyxz, r2.xyxz, r0.xyxw
mul r4.xyz, r16.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r4.xyz, r13.yzwy, l(0.040000, 0.040000, 0.040000, 0.000000), r4.xyzx
add r0.xyw, r0.xyxw, r4.xyxz
add r4.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, r16.xyzx
mad r2.xyz, r13.yzwy, r2.xyzx, r4.xyzx
mad r2.xyz, r14.yzwy, r3.xyzx, r2.xyzx
movc r0.xyz, r0.zzzz, r0.xywx, r2.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r10.xyzx, r10.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r10.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r10.z|
    mul r3.xy, r10.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r10.z|
    mul r2.w, r10.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r10.z, cb2[6].x
  mad r1.z, cb2[6].x, r10.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r10.xyzx, r10.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r10.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 1179 instruction slots used
