//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:20 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4
//   float probeDebugRadius;            // Offset:  868 Size:     4
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 45
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, vThreadGroupID.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
utof r4.xy, r1.xyxx
add r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
mul r5.xy, r4.zwzz, cb1[44].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r5.xyxx, t27.yzwx, s4, l(0.000000)
mul r0.w, r0.w, r3.z
if_nz cb2[55].x
  mul r3.z, r0.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r3.zzzz
  ret 
else 
  movc r3.z, cb2[54].w, r0.w, l(1.000000)
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.yzw, r1.xyww, t0.wxyz
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
ge r10.x, r5.x, l(0.984375)
mul r1.z, r5.x, l(1.01587307)
mad r1.w, r5.x, l(64.000000), l(-63.000000)
movc r1.z, r10.x, r1.w, r1.z
max r1.z, r1.z, l(0.00000001)
rcp r10.y, r1.z
and r1.zw, r0.zzzz, r10.xxxy
add r4.zw, r4.zzzw, -cb1[71].xxxy
mul r4.zw, r4.zzzw, cb1[44].zzzw
mad r4.zw, r4.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r10.x, r4.z, cb1[12].x
mul r10.y, r4.w, cb1[13].y
mov r10.z, l(1.000000)
mul r10.xyz, r1.wwww, r10.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.z, r2.w, l(3.000000), l(0.500000)
ftou r0.z, r0.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r11.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r11.z
mul r11.xy, r1.wwww, r2.xyxx
and r12.xyzw, r0.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.z, r12.w, r12.z
movc r12.z, r0.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.z, r0.w, l(-0.500000), l(-0.00146628)
add r0.z, r0.z, r2.z
mul_sat r2.y, r0.z, l(2.00982332)
dp3 r0.z, -r10.xyzx, -r10.xyzx
rsq r0.z, r0.z
mul r12.xyz, r0.zzzz, -r10.xyzx
dp2 r1.w, r4.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r4.x, r13.x, r1.w
utof r2.zw, r1.yyyx
dp2 r1.w, r2.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r5.x, r14.x, r1.w
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.w, -r12.xyzx, r11.xyzx
add r1.w, r1.w, r1.w
mad r15.xyz, r11.xyzx, -r1.wwww, -r12.xyzx
mul r1.w, r2.y, l(17.000000)
exp r1.w, r1.w
add r1.w, r1.w, l(2.000000)
div r1.w, l(2.000000), r1.w
sqrt r2.z, r1.w
mul r4.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r4.zw, r4.zzzw
ieq r4.zw, r1.xxxy, r4.zzzw
and r2.w, r4.w, r4.z
dp3 r4.z, r11.xyzx, cb2[17].xyzx
mov_sat r4.w, r4.z
movc r6.w, r0.w, |r4.z|, r4.w
ge r7.w, l(0.000000), r6.w
if_nz r7.w
  mov r8.w, l(0)
endif 
if_z r7.w
  mul r14.yzw, r10.yyyy, cb2[29].xxyz
  mad r14.yzw, r10.xxxx, cb2[28].xxyz, r14.yyzw
  mad r14.yzw, r10.zzzz, cb2[30].xxyz, r14.yyzw
  add r14.yzw, r14.yyzw, cb2[31].xxyz
  add r7.w, r14.w, -cb2[17].w
  mad r7.w, -r7.w, l(0.00006104), l(1.000000)
  mov_sat r9.w, r7.w
  eq r9.w, r7.w, r9.w
  if_nz r9.w
    mov r9.w, l(0)
    mov r12.w, l(0)
    loop 
      ge r13.w, r9.w, l(3.000000)
      breakc_nz r13.w
      ftou r13.w, r9.w
      add r16.xy, r14.yzyy, -cb2[r13.w + 20].xyxx
      max r16.x, |r16.y|, |r16.x|
      mul r12.w, r16.x, cb2[r13.w + 20].z
      lt r13.w, r12.w, l(1.000000)
      if_nz r13.w
        break 
      endif 
      add r9.w, r9.w, l(1.000000)
      mov r12.w, l(0)
    endloop 
  else 
    mov r9.w, l(3.000000)
    mov r12.w, l(0)
  endif 
  ge r13.w, r9.w, l(3.000000)
  if_nz r13.w
    mul r16.xyz, l(128.000000, 0.500000, 0.500000, 0.000000), cb2[27].zxyz
    rcp r17.xz, r16.xxxx
    mov r17.y, -r17.z
    mad r16.xyz, r14.yzyy, r17.xyzx, r16.yzyy
    add r17.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r16.xyz, r16.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r16.xyz, r17.xyzx, r16.xyzx
    mul r17.xy, r16.zyzz, cb2[32].xxxx
    round_ni r17.xy, r17.xyxx
    mul r16.w, r17.y, cb2[27].x
    mad r16.w, r16.w, cb2[32].x, r17.x
    ftou r16.w, r16.w
    iadd r16.w, r16.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.x, r16.w, l(0), t23.xxxx
    and r17.y, r17.x, l(0x40000000)
    ishl r17.z, r17.x, l(2)
    if_z r17.y
      and r17.y, r17.x, l(0x01ffffff)
      iadd r18.x, r16.w, r17.y
      ushr r16.w, r17.x, l(25)
      utof r16.w, r16.w
      mul r16.xyz, r16.wwww, r16.xyzx
      frc r16.xyz, r16.xyzx
      mul r16.xyz, r16.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
      ftou r16.xyz, r16.xyzx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      ushr r17.xy, r16.zyzz, l(6, 6, 0, 0)
      and r16.w, r18.z, l(0xc0000000)
      iadd r17.w, r18.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.w, l(0), t23.xxxx
      movc r17.y, r17.y, r18.z, r17.w
      ushr r17.w, r17.y, l(13)
      movc r17.x, r17.x, r17.w, r17.y
      and r17.x, r17.x, l(8191)
      iadd r19.x, r17.x, r18.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      mov r18.y, l(0)
      mov r19.y, l(1)
      movc r17.xyw, r16.wwww, r18.xyxz, r19.xyxz
      movc r19.yz, r16.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r20.xy, r16.zyzz, r19.yyyy
      and r20.xy, r20.xyxx, l(1, 1, 0, 0)
      and r18.w, r17.w, l(0xc0000000)
      iadd r19.y, r17.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.y, r19.y, l(0), t23.xxxx
      movc r19.y, r20.y, r17.w, r19.y
      ushr r20.y, r19.y, l(13)
      movc r19.y, r20.x, r20.y, r19.y
      and r19.y, r19.y, l(8191)
      iadd r19.x, r17.x, r19.y
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
      movc r17.xyw, r18.wwww, r17.xyxw, r19.xzxw
      movc r17.xyw, r16.wwww, r18.xyxz, r17.xyxw
      and r16.w, r17.w, l(0xc0000000)
      if_z r16.w
        iadd r16.w, -r17.y, l(6)
        ushr r18.xy, r16.zyzz, r16.wwww
        or r16.w, r17.w, l(0x40000000)
        bfi r18.y, l(1), l(1), r18.y, l(0)
        bfi r18.x, l(1), l(0), r18.x, r18.y
        imul null, r18.x, r18.x, l(10)
        ushr r16.w, r16.w, r18.x
        and r16.w, r16.w, l(1023)
        iadd r18.x, r16.w, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.x, l(0), t23.xxxx
        iadd r18.yz, r17.yyyy, l(0, 1, 2, 0)
        iadd r16.w, -r18.y, l(6)
        ushr r19.xy, r16.zyzz, r16.wwww
        and r16.w, r18.w, l(0xc0000000)
        or r17.y, r18.w, l(0x40000000)
        bfi r19.y, l(1), l(1), r19.y, l(0)
        bfi r19.x, l(1), l(0), r19.x, r19.y
        imul null, r19.x, r19.x, l(10)
        ushr r17.y, r17.y, r19.x
        and r17.y, r17.y, l(1023)
        iadd r19.x, r17.y, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
        mov r19.y, r18.z
        movc r19.xyz, r16.wwww, r18.xywx, r19.xyzx
        iadd r17.y, -r19.y, l(6)
        ushr r18.yz, r16.zzyz, r17.yyyy
        and r17.y, r19.z, l(0xc0000000)
        or r19.y, r19.z, l(0x40000000)
        bfi r18.z, l(1), l(1), r18.z, l(0)
        bfi r18.y, l(1), l(0), r18.y, r18.z
        imul null, r18.y, r18.y, l(10)
        ushr r18.y, r19.y, r18.y
        and r18.y, r18.y, l(1023)
        iadd r20.x, r18.y, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.y, r20.x, l(0), t23.xxxx
        movc r18.yz, r17.yyyy, r19.xxzx, r20.xxyx
        movc r17.xw, r16.wwww, r18.xxxw, r18.yyyz
      endif 
      and r16.w, r17.w, l(0xc0000000)
      if_z r16.w
        ubfe r17.y, l(14), l(15), r17.w
        utof r17.y, r17.y
        mul r17.y, r17.y, cb2[27].w
        mul r17.y, r17.y, l(0.00006104)
        and r18.xy, r17.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r18.x, r18.x
        mul r18.x, r18.x, cb2[27].w
        mul r18.x, r18.x, l(0.00003052)
        and r18.z, r16.y, l(3)
        iadd r18.z, r17.x, r18.z
        iadd r18.z, r18.z, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.z, l(0), t23.xxxx
        bfi r19.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r16.xyzx, l(0, 0, 0, 0)
        ushr r16.x, r18.z, r19.x
        and r16.x, r16.x, l(255)
        utof r16.x, r16.x
        mul r16.x, r18.x, r16.x
        mad r16.x, r16.x, l(0.00392157), r17.y
        iadd r16.y, r19.y, l(1)
        ubfe r16.z, l(1), l(1), r16.z
        iadd r16.y, r16.z, r16.y
        iadd r16.y, r16.y, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.y, r16.y, l(0), t23.xxxx
        ushr r16.y, r16.y, r19.z
        and r16.y, r16.y, l(0x0000ffff)
        utof r16.y, r16.y
        mul r16.y, r18.x, r16.y
        mad r16.y, r16.y, l(0.00001526), r17.y
        movc r17.z, r18.y, r16.x, r16.y
      else 
        and r16.x, r17.w, l(0x80000000)
        iadd r16.y, r17.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.y, r16.y, l(0), t23.xxxx
        movc r16.x, r16.x, r16.y, l(0)
        ishl r16.y, r17.w, l(2)
        ushr r16.z, r16.x, l(16)
        and r16.x, r16.x, l(0x0000ffff)
        f16tof32 r16.xz, r16.xxzx
        mad r16.y, r14.y, r16.z, r16.y
        mad r16.x, r14.z, r16.x, r16.y
        movc r17.z, r16.w, r16.x, r17.z
      endif 
    endif 
    mad r14.w, -cb2[27].z, l(2.000000), r14.w
    lt r14.w, r17.z, r14.w
    movc r8.w, r14.w, l(0), l(1.000000)
  endif 
  if_z r13.w
    if_z cb2[58].y
      ftou r13.w, r9.w
      add r16.xy, r14.yzyy, -cb2[r13.w + 20].xyxx
      mul r16.xy, r16.xyxx, cb2[r13.w + 20].zzzz
      mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r13.w, cb2[26].y
      add r16.z, r9.w, r13.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r16.xyzx, t13.xxxx, s13, r7.w
      sample_l_indexable(texture2darray)(float,float,float,float) r14.w, r16.xyzx, t31.yzwx, s0, l(0.000000)
      add r13.w, r13.w, r14.w
      add_sat r13.w, r13.w, l(-1.000000)
      mul r14.w, r13.w, r13.w
      mul r8.w, r13.w, r14.w
    endif 
    if_nz cb2[58].y
      mov r16.x, -r4.x
      ftou r13.w, r9.w
      add r9.w, r9.w, l(1.000000)
      min r9.w, r9.w, l(2.000000)
      ftou r9.w, r9.w
      add r12.w, -r12.w, l(1.000000)
      mul r12.w, r12.w, l(28.000000)
      ftou r12.w, r12.w
      add r17.xy, r14.yzyy, -cb2[r13.w + 20].xyxx
      mul r17.xy, r17.xyxx, cb2[r13.w + 20].zzzz
      mad r17.xy, r17.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r14.yz, r14.yyzy, -cb2[r9.w + 20].xxyx
      mul r14.yz, r14.yyzy, cb2[r9.w + 20].zzzz
      mad r14.yz, r14.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r16.y, r13.x
      mov r16.z, r4.x
      mov r14.w, l(0)
      mov r16.w, l(0)
      loop 
        uge r17.z, r16.w, l(8)
        breakc_nz r17.z
        ult r17.z, r12.w, r16.w
        movc r18.xy, r17.zzzz, r14.yzyy, r17.xyxx
        movc r17.w, r17.z, cb2[r9.w + 20].w, cb2[r13.w + 20].w
        movc r17.z, r17.z, r9.w, r13.w
        dp2 r19.x, icb[r16.w + 0].yxyy, r16.xyxx
        dp2 r19.y, icb[r16.w + 0].yxyy, r16.yzyy
        mad r18.xy, r19.xyxx, r17.wwww, r18.xyxx
        iadd r17.z, r17.z, cb2[26].y
        utof r18.z, r17.z
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.z, r18.xyzx, t13.xxxx, s13, r7.w
        sample_l_indexable(texture2darray)(float,float,float,float) r17.w, r18.xyzx, t31.yzwx, s0, l(0.000000)
        add r17.z, r17.w, r17.z
        add_sat r17.z, r17.z, l(-1.000000)
        mad r14.w, r17.z, l(0.125000), r14.w
        iadd r16.w, r16.w, l(1)
      endloop 
      mul r7.w, r14.w, r14.w
      mul r8.w, r14.w, r7.w
    endif 
  endif 
endif 
add r7.w, -r2.y, l(1.000000)
mul r9.w, r7.w, l(5.000000)
mad r12.w, r7.w, l(5.000000), l(-2.500000)
mul r12.w, r12.w, l(0.400000)
max r12.w, r12.w, l(0.000000)
mul r12.w, r12.w, l(100.000000)
mad r14.yz, -r7.wwww, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r13.w, r14.y
mul r13.w, r2.x, r13.w
mul r13.w, r13.w, l(9.136810)
mul r14.y, r7.w, r9.w
mad r14.y, -r14.y, l(2.015905), r14.z
exp r14.y, r14.y
mul r14.y, r2.x, r14.y
mul r14.y, r14.y, l(9.708090)
max r13.w, r13.w, r14.y
max r13.w, r13.w, l(1.268160)
if_nz cb2[54].x
  ftou r14.y, cb1[44].x
  iadd r14.y, r14.y, l(7)
  ushr r14.y, r14.y, l(3)
  imad r14.y, r0.y, r14.y, r0.x
  bfi r14.y, l(27), l(5), r14.y, l(16)
  mov r16.xyzw, l(0,0,0,0)
  mov r17.xyzw, l(0,0,0,0)
  mov r18.xyzw, l(0,0,0,0)
  mov r19.xyzw, l(0,0,0,0)
  mov r20.xyzw, l(0,0,0,0)
  mov r21.xyzw, l(0,0,0,0)
  mov r22.xyzw, l(0,0,0,0)
  mov r23.xyzw, l(0,0,0,0)
  mov r24.xyzw, l(0,0,0,0)
  mov r25.xyzw, l(0,0,0,0)
  mov r26.xyzw, l(0,0,0,0)
  mov r14.zw, l(0,0,0,0)
  mov r27.xyzw, l(0,0,0,0)
  mov r28.zw, l(0,0,0,0)
  mov r29.zw, l(0,0,0,0)
  loop 
    uge r30.x, r29.w, cb2[0].y
    breakc_nz r30.x
    ushr r30.x, r29.w, l(5)
    iadd r30.x, r14.y, r30.x
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r30.x, r30.x, l(0), t26.xxxx
    mov r31.xyzw, r16.yxzw
    mov r32.xyzw, r17.xyzw
    mov r33.xyzw, r18.yzwx
    mov r34.xyzw, r19.xyzw
    mov r35.xyzw, r20.xyzw
    mov r36.xyzw, r21.zwxy
    mov r37.xyzw, r22.zwxy
    mov r38.xyzw, r24.zwxy
    mov r39.xyzw, r25.zwxy
    mov r30.yzw, r27.xxyz
    mov r40.xy, r14.wzww
    mov r40.z, r27.w
    mov r40.w, r28.z
    mov r41.x, r29.z
    mov r41.y, r28.w
    mov r42.xyzw, r23.zwxy
    mov r43.xyzw, r26.zwxy
    mov r41.z, r30.x
    loop 
      breakc_z r41.z
      firstbit_lo r41.w, r41.z
      ishl r44.x, l(1), r41.w
      not r44.x, r44.x
      and r41.z, r41.z, r44.x
      iadd r41.w, r29.w, r41.w
      imul null, r41.w, r41.w, l(14)
      add r44.xyz, r10.xyzx, -cb10[r41.w + 0].xyzx
      dp3 r44.x, r44.xyzx, r44.xyzx
      sqrt r44.x, r44.x
      ge r44.x, cb2[54].y, r44.x
      if_nz r44.x
        mov r31.yzw, cb10[r41.w + 1].xxyz
        mov r31.x, cb10[r41.w + 0].w
        mov r32.yzw, cb10[r41.w + 2].xxyz
        mov r32.x, cb10[r41.w + 1].w
        mov r33.xyz, cb10[r41.w + 3].xyzx
        mov r33.w, cb10[r41.w + 4].z
        mov r34.yz, cb10[r41.w + 4].xxyx
        mov r34.x, cb10[r41.w + 3].w
        mov r34.w, cb10[r41.w + 6].x
        mov r35.yzw, cb10[r41.w + 5].xxyz
        mov r35.x, cb10[r41.w + 4].w
        mov r36.yz, cb10[r41.w + 7].yywy
        mov r36.x, cb10[r41.w + 6].y
        mov r36.w, cb10[r41.w + 8].x
        mov r37.xyz, cb10[r41.w + 8].yzwy
        mov r37.w, cb10[r41.w + 9].x
        mov r38.xyz, cb10[r41.w + 10].yzwy
        mov r38.w, cb10[r41.w + 11].x
        mov r39.xyz, cb10[r41.w + 11].yzwy
        mov r39.w, cb10[r41.w + 12].x
        mov r30.yzw, cb10[r41.w + 0].xxyz
        mov r44.xy, cb10[r41.w + 13].yzyy
        mov r40.z, l(-1)
        mov r40.w, cb10[r41.w + 2].w
        mov r41.x, cb10[r41.w + 5].w
        mov r41.y, cb10[r41.w + 7].z
        mov r42.xyz, cb10[r41.w + 9].yzwy
        mov r42.w, cb10[r41.w + 10].x
        mov r43.xyz, cb10[r41.w + 12].yzwy
        mov r43.w, cb10[r41.w + 13].x
        mov r40.xy, r44.xyxx
        break 
      endif 
    endloop 
    if_nz r40.z
      mov r16.xyzw, r31.yxzw
      mov r17.xyzw, r32.xyzw
      mov r18.xyzw, r33.wxyz
      mov r19.xyzw, r34.xyzw
      mov r20.xyzw, r35.xyzw
      mov r21.xyzw, r36.zwxy
      mov r22.xyzw, r37.zwxy
      mov r23.xyzw, r42.zwxy
      mov r24.xyzw, r38.zwxy
      mov r25.xyzw, r39.zwxy
      mov r26.xyzw, r43.zwxy
      mov r27.xyz, r30.yzwy
      mov r14.zw, r40.yyyx
      mov r27.w, l(-1)
      mov r28.z, r40.w
      mov r29.z, r41.x
      mov r28.w, r41.y
      break 
    endif 
    iadd r29.w, r29.w, l(32)
    mov r16.xyzw, r31.yxzw
    mov r17.xyzw, r32.xyzw
    mov r18.xyzw, r33.wxyz
    mov r19.xyzw, r34.xyzw
    mov r20.xyzw, r35.xyzw
    mov r21.xyzw, r36.zwxy
    mov r22.xyzw, r37.zwxy
    mov r24.xyzw, r38.zwxy
    mov r25.xyzw, r39.zwxy
    mov r27.xyz, r30.yzwy
    mov r14.zw, r40.yyyx
    mov r27.w, r40.z
    mov r28.z, r40.w
    mov r29.z, r41.x
    mov r28.w, r41.y
    mov r23.xyzw, r42.zwxy
    mov r26.xyzw, r43.zwxy
  endloop 
  mov r30.xy, r16.ywyy
  mov r28.x, r16.z
  mov r16.yz, r17.xxwx
  mov r28.y, r17.y
  mov r30.z, r17.z
  mov r17.xyz, r18.yzwy
  mov r18.yz, r20.xxyx
  mov r29.xy, r20.zwzz
  mov r20.xy, r21.zwzz
  mov r21.z, r22.z
  mov r22.z, r23.z
  mov r23.z, r24.z
  mov r24.z, r25.z
  mov r25.z, r26.z
  mov r26.z, r14.w
else 
  mov r27.w, l(0)
endif 
if_nz r27.w
  if_nz r2.w
    add r31.yzw, r27.xxyz, cb1[24].xxyz
    mov r31.x, l(16)
    store_structured u2.xyzw, cb2[52].x, l(880), r31.xyzw
  endif 
  add r27.xyz, r10.xyzx, -r27.xyzx
  and r14.y, r28.w, l(0x0000ffff)
  ubfe r14.w, l(6), l(25), r28.w
  imul null, r16.w, r14.y, l(6)
  dp3 r17.w, cb11[r16.w + 0].xyzx, r27.xyzx
  add_sat r17.w, r17.w, cb11[r16.w + 0].w
  dp3 r18.w, cb11[r16.w + 1].xyzx, r27.xyzx
  add_sat r18.w, r18.w, cb11[r16.w + 1].w
  mul r17.w, r17.w, r18.w
  dp3 r18.w, cb11[r16.w + 2].xyzx, r27.xyzx
  add_sat r18.w, r18.w, cb11[r16.w + 2].w
  mul r17.w, r17.w, r18.w
  dp3 r18.w, cb11[r16.w + 3].xyzx, r27.xyzx
  add_sat r18.w, r18.w, cb11[r16.w + 3].w
  mul r17.w, r17.w, r18.w
  dp3 r18.w, cb11[r16.w + 4].xyzx, r27.xyzx
  add_sat r18.w, r18.w, cb11[r16.w + 4].w
  mul r17.w, r17.w, r18.w
  dp3 r18.w, cb11[r16.w + 5].xyzx, r27.xyzx
  add_sat r16.w, r18.w, cb11[r16.w + 5].w
  mul r31.x, r16.w, r17.w
  and r16.w, r19.w, l(1)
  mov r31.yz, l(0,0,1.000000,0)
  movc r20.zw, r16.wwww, r31.xxxy, r31.zzzx
  mov r31.x, l(1.000000)
  mov r16.w, r19.w
  mov r32.xy, r20.zwzz
  mov r17.w, l(1)
  loop 
    ige r18.w, r17.w, r14.w
    breakc_nz r18.w
    iadd r18.w, r14.y, r17.w
    imul null, r18.w, r18.w, l(6)
    dp3 r21.w, cb11[r18.w + 0].xyzx, r27.xyzx
    add_sat r21.w, r21.w, cb11[r18.w + 0].w
    mul r21.w, r21.w, r32.x
    dp3 r29.w, cb11[r18.w + 1].xyzx, r27.xyzx
    add_sat r29.w, r29.w, cb11[r18.w + 1].w
    mul r21.w, r21.w, r29.w
    dp3 r29.w, cb11[r18.w + 2].xyzx, r27.xyzx
    add_sat r29.w, r29.w, cb11[r18.w + 2].w
    mul r21.w, r21.w, r29.w
    dp3 r29.w, cb11[r18.w + 3].xyzx, r27.xyzx
    add_sat r29.w, r29.w, cb11[r18.w + 3].w
    mul r21.w, r21.w, r29.w
    dp3 r29.w, cb11[r18.w + 4].xyzx, r27.xyzx
    add_sat r29.w, r29.w, cb11[r18.w + 4].w
    mul r21.w, r21.w, r29.w
    dp3 r29.w, cb11[r18.w + 5].xyzx, r27.xyzx
    add_sat r18.w, r29.w, cb11[r18.w + 5].w
    mul r32.x, r18.w, r21.w
    ushr r29.w, r16.w, l(2)
    ubfe r30.w, l(1), l(2), r16.w
    and r31.z, r29.w, l(2)
    max r31.w, r32.x, r32.y
    mad r18.w, -r21.w, r18.w, l(1.000000)
    mul r18.w, r18.w, r32.y
    movc r31.y, r31.z, r18.w, r31.w
    movc r32.xy, r30.wwww, r32.xyxx, r31.xyxx
    iadd r17.w, r17.w, l(1)
    mov r16.w, r29.w
  endloop 
  mov_sat r32.y, r32.y
  mul r31.w, r20.x, r32.y
  lt r14.y, l(0.000000), r31.w
  if_nz r14.y
    if_nz r2.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r14.y, cb2[52].x, l(880), u2.xxxx
      or r14.y, r14.y, l(32)
      store_structured u2.x, cb2[52].x, l(880), r14.y
      store_structured u2.x, cb2[52].x, l(896), r31.w
    endif 
    mul r14.y, r20.y, r31.w
    dp3 r14.w, r15.xyzx, r21.xyzx
    dp3 r16.w, r27.xyzx, r21.xyzx
    add r16.w, -r22.w, r16.w
    ge r17.w, r16.w, l(0.000000)
    max r16.w, r12.w, |r16.w|
    movc r16.w, r17.w, r16.w, -r16.w
    max r14.w, -r14.w, l(0.00000010)
    div r14.w, r16.w, r14.w
    min r14.w, |r14.w|, l(131072.000000)
    dp3 r16.w, r15.xyzx, r22.xyzx
    dp3 r17.w, r27.xyzx, r22.xyzx
    add r17.w, -r23.w, r17.w
    ge r18.w, r17.w, l(0.000000)
    max r17.w, r12.w, |r17.w|
    movc r17.w, r18.w, r17.w, -r17.w
    max r16.w, -r16.w, l(0.00000010)
    div r16.w, r17.w, r16.w
    min r14.w, r14.w, |r16.w|
    dp3 r16.w, r15.xyzx, r23.xyzx
    dp3 r17.w, r27.xyzx, r23.xyzx
    add r17.w, -r24.w, r17.w
    ge r18.w, r17.w, l(0.000000)
    max r17.w, r12.w, |r17.w|
    movc r17.w, r18.w, r17.w, -r17.w
    max r16.w, -r16.w, l(0.00000010)
    div r16.w, r17.w, r16.w
    min r14.w, r14.w, |r16.w|
    dp3 r16.w, r15.xyzx, r24.xyzx
    dp3 r17.w, r27.xyzx, r24.xyzx
    add r17.w, -r25.w, r17.w
    ge r18.w, r17.w, l(0.000000)
    max r17.w, r12.w, |r17.w|
    movc r17.w, r18.w, r17.w, -r17.w
    max r16.w, -r16.w, l(0.00000010)
    div r16.w, r17.w, r16.w
    min r14.w, r14.w, |r16.w|
    dp3 r16.w, r15.xyzx, r25.xyzx
    dp3 r17.w, r27.xyzx, r25.xyzx
    add r17.w, -r26.w, r17.w
    ge r18.w, r17.w, l(0.000000)
    max r17.w, r12.w, |r17.w|
    movc r17.w, r18.w, r17.w, -r17.w
    max r16.w, -r16.w, l(0.00000010)
    div r16.w, r17.w, r16.w
    min r14.w, r14.w, |r16.w|
    dp3 r16.w, r15.xyzx, r26.xyzx
    dp3 r17.w, r27.xyzx, r26.xyzx
    add r14.z, -r14.z, r17.w
    ge r17.w, r14.z, l(0.000000)
    max r14.z, r12.w, |r14.z|
    movc r14.z, r17.w, r14.z, -r14.z
    max r16.w, -r16.w, l(0.00000010)
    div r14.z, r14.z, r16.w
    min r14.z, |r14.z|, r14.w
    add r19.xyz, r19.xyzx, r27.xyzx
    mad r19.xyz, r15.xyzx, r14.zzzz, r19.xyzx
    dp3 r14.w, r19.xyzx, r19.xyzx
    sqrt r14.w, r14.w
    div r14.z, r14.z, r14.w
    add r14.z, r14.z, r14.z
    sqrt r14.z, r14.z
    mad r14.z, r7.w, l(5.000000), r14.z
    add r14.z, r14.z, l(-0.844800)
    dp3 r20.x, r19.xyzx, r30.xyzx
    dp3 r20.y, r19.xyzx, r16.xyzx
    dp3 r20.z, r19.xyzx, r28.xyzx
    ubfe r14.w, l(9), l(16), r28.w
    utof r20.w, r14.w
    sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r20.xyzw, t8.xyzw, s2, r14.z
    and r21.xyz, r19.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r21.xyz, r21.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r14.z, r21.y, r21.x
    or r14.z, r21.z, r14.z
    movc r19.xyz, r14.zzzz, l(1.000000,1.000000,0,0), r19.xyzx
    dp3 r21.x, r27.xyzx, r30.xyzx
    dp3 r21.y, r27.xyzx, r16.xyzx
    dp3 r21.z, r27.xyzx, r28.xyzx
    mad_sat r17.xyz, r21.xyzx, r17.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mad r17.xyz, r17.xyzx, r18.xyzx, r29.xyzx
    dp3 r20.x, r11.xyzx, r30.xyzx
    dp3 r20.y, r11.xyzx, r16.xyzx
    dp3 r20.z, r11.xyzx, r28.xyzx
    lt r16.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r20.xyzx
    movc r18.z, r16.x, l(0), l(0.500000)
    mov r18.xy, l(0,0,0,0)
    add r18.xyz, r17.xyzx, r18.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t17.xyzw, s4, l(0.000000)
    mul r21.xyz, r20.xyzx, r20.xyzx
    mul r21.xyz, r14.yyyy, r21.xyzx
    movc r22.z, r16.y, l(0), l(0.500000)
    mov r22.xy, l(0,0,0,0)
    add r16.xyw, r17.xyxz, r22.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r16.xyw, r16.xywx, t18.xywz, s4, l(0.000000)
    mul r16.xyw, r21.yyyy, r16.xyxw
    mad r16.xyw, r18.xyxz, r21.xxxx, r16.xyxw
    movc r18.z, r16.z, l(0), l(0.500000)
    mov r18.xy, l(0,0,0,0)
    add r17.xyz, r17.xyzx, r18.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t19.xyzw, s4, l(0.000000)
    mad r16.xyz, r17.xyzx, r21.zzzz, r16.xywx
    sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r20.xyzw, t8.xyzw, s2, l(6.000000)
    and r18.xyz, r17.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r18.xyz, r18.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r14.z, r18.y, r18.x
    or r14.z, r18.z, r14.z
    movc r17.xyz, r14.zzzz, l(1.000000,1.000000,0,0), r17.xyzx
    mul r16.xyz, r16.xyzx, r17.xyzx
    dp3 r14.z, r16.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r14.w, r13.w, r14.z
    mul r16.xyz, r14.yyyy, r19.xyzx
    dp3 r14.y, r16.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r14.y, r13.w, r14.z, r14.y
    div r14.y, r14.w, r14.y
    mul r31.xyz, r14.yyyy, r16.xyzx
    mov r14.y, l(257)
  else 
    mov r31.xyzw, l(0,0,0,0)
    mov r14.y, l(1)
  endif 
  mov r14.z, l(-1)
else 
  mov r31.xyzw, l(0,0,0,0)
  mov r14.y, l(0)
endif 
and r14.z, r14.z, r27.w
if_z r14.z
  iadd r14.z, cb2[0].y, -cb2[58].x
  ftou r14.w, cb1[44].x
  iadd r14.w, r14.w, l(7)
  ushr r14.w, r14.w, l(3)
  imad r14.w, r0.y, r14.w, r0.x
  bfi r14.w, l(27), l(5), r14.w, l(16)
  and r16.x, r14.z, l(-32)
  iadd r16.y, r14.z, -r16.x
  and r16.z, cb2[0].y, l(-32)
  iadd r16.w, -r16.z, cb2[0].y
  mov r17.x, l(16)
  mov r18.yz, l(0,0,1.000000,0)
  mov r19.xy, l(0,0,0,0)
  mov r20.xz, l(1.000000,0,1.000000,0)
  mov r21.xy, l(0,0,0,0)
  mov r22.xy, l(0,0,0,0)
  mov r23.xyz, l(0,0,0,0)
  mov r23.w, r31.x
  mov r24.xyz, r31.yzwy
  mov r24.w, r14.y
  mov r18.w, r16.x
  loop 
    uge r19.w, r18.w, cb2[0].y
    breakc_nz r19.w
    ushr r19.w, r18.w, l(5)
    iadd r19.w, r14.w, r19.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.w, l(0), t26.xxxx
    ieq r21.w, r16.x, r18.w
    bfi r22.w, r16.y, l(0), l(0), r19.w
    movc r19.w, r21.w, r22.w, r19.w
    ieq r21.w, r16.z, r18.w
    ubfe r22.w, r16.w, l(0), r19.w
    movc r19.w, r21.w, r22.w, r19.w
    mov r25.xyzw, r23.xyzw
    mov r26.xyzw, r24.xyzw
    mov r21.w, r19.w
    loop 
      breakc_z r21.w
      firstbit_lo r22.w, r21.w
      ishl r27.x, l(1), r22.w
      not r27.x, r27.x
      and r21.w, r21.w, r27.x
      iadd r22.w, r18.w, r22.w
      imul null, r22.w, r22.w, l(14)
      and r27.x, r26.w, l(255)
      ult r27.y, r27.x, l(32)
      and r27.y, r2.w, r27.y
      if_nz r27.y
        imad r27.x, r27.x, l(20), l(880)
        add r17.yzw, cb1[24].xxyz, cb10[r22.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r27.x, r17.xyzw
      endif 
      iadd r27.w, r26.w, l(1)
      add r17.yzw, r10.xxyz, -cb10[r22.w + 0].xxyz
      and r28.x, l(0x0000ffff), cb10[r22.w + 7].z
      ubfe r28.y, l(6), l(25), cb10[r22.w + 7].z
      imul null, r28.z, r28.x, l(6)
      dp3 r28.w, cb11[r28.z + 0].xyzx, r17.yzwy
      add_sat r28.w, r28.w, cb11[r28.z + 0].w
      dp3 r29.x, cb11[r28.z + 1].xyzx, r17.yzwy
      add_sat r29.x, r29.x, cb11[r28.z + 1].w
      mul r28.w, r28.w, r29.x
      dp3 r29.x, cb11[r28.z + 2].xyzx, r17.yzwy
      add_sat r29.x, r29.x, cb11[r28.z + 2].w
      mul r28.w, r28.w, r29.x
      dp3 r29.x, cb11[r28.z + 3].xyzx, r17.yzwy
      add_sat r29.x, r29.x, cb11[r28.z + 3].w
      mul r28.w, r28.w, r29.x
      dp3 r29.x, cb11[r28.z + 4].xyzx, r17.yzwy
      add_sat r29.x, r29.x, cb11[r28.z + 4].w
      mul r28.w, r28.w, r29.x
      dp3 r29.x, cb11[r28.z + 5].xyzx, r17.yzwy
      add_sat r28.z, r29.x, cb11[r28.z + 5].w
      mul r18.x, r28.z, r28.w
      and r28.z, l(1), cb10[r22.w + 6].x
      movc r28.zw, r28.zzzz, r18.xxxy, r18.zzzx
      mov r18.x, cb10[r22.w + 6].x
      mov r29.xy, r28.zwzz
      mov r29.z, l(1)
      loop 
        ige r29.w, r29.z, r28.y
        breakc_nz r29.w
        iadd r29.w, r28.x, r29.z
        imul null, r29.w, r29.w, l(6)
        dp3 r30.x, cb11[r29.w + 0].xyzx, r17.yzwy
        add_sat r30.x, r30.x, cb11[r29.w + 0].w
        mul r30.x, r29.x, r30.x
        dp3 r30.y, cb11[r29.w + 1].xyzx, r17.yzwy
        add_sat r30.y, r30.y, cb11[r29.w + 1].w
        mul r30.x, r30.y, r30.x
        dp3 r30.y, cb11[r29.w + 2].xyzx, r17.yzwy
        add_sat r30.y, r30.y, cb11[r29.w + 2].w
        mul r30.x, r30.y, r30.x
        dp3 r30.y, cb11[r29.w + 3].xyzx, r17.yzwy
        add_sat r30.y, r30.y, cb11[r29.w + 3].w
        mul r30.x, r30.y, r30.x
        dp3 r30.y, cb11[r29.w + 4].xyzx, r17.yzwy
        add_sat r30.y, r30.y, cb11[r29.w + 4].w
        mul r30.x, r30.y, r30.x
        dp3 r30.y, cb11[r29.w + 5].xyzx, r17.yzwy
        add_sat r29.w, r30.y, cb11[r29.w + 5].w
        mul r29.x, r29.w, r30.x
        ushr r30.y, r18.x, l(2)
        ubfe r30.z, l(1), l(2), r18.x
        and r30.w, r30.y, l(2)
        max r32.x, r29.x, r29.y
        mad r29.w, -r30.x, r29.w, l(1.000000)
        mul r29.w, r29.w, r29.y
        movc r20.y, r30.w, r29.w, r32.x
        movc r29.xy, r30.zzzz, r29.xyxx, r20.xyxx
        iadd r29.z, r29.z, l(1)
        mov r18.x, r30.y
      endloop 
      mov_sat r29.y, r29.y
      mul r18.x, r29.y, cb10[r22.w + 6].y
      lt r20.y, l(0.000000), r18.x
      if_nz r20.y
        and r20.y, r27.w, l(255)
        iadd r28.x, r20.y, l(-1)
        ult r28.x, r28.x, l(32)
        and r28.x, r2.w, r28.x
        if_nz r28.x
          imad r28.xy, r20.yyyy, l(20, 20, 0, 0), l(860, 876, 0, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r20.y, cb2[52].x, r28.x, u2.xxxx
          or r20.y, r20.y, l(32)
          store_structured u2.x, cb2[52].x, r28.x, r20.y
          store_structured u2.x, cb2[52].x, r28.y, r18.x
        endif 
        iadd r26.w, r26.w, l(257)
        mad r26.z, r29.y, cb10[r22.w + 6].y, r26.z
        mul r18.x, r18.x, cb10[r22.w + 7].y
        mov r28.x, cb10[r22.w + 7].w
        mov r28.yz, cb10[r22.w + 8].xxyx
        dp3 r20.y, r15.xyzx, r28.xyzx
        dp3 r28.x, r17.yzwy, r28.xyzx
        add r28.x, r28.x, -cb10[r22.w + 8].z
        ge r28.y, r28.x, l(0.000000)
        max r28.x, r12.w, |r28.x|
        movc r28.x, r28.y, r28.x, -r28.x
        max r20.y, -r20.y, l(0.00000010)
        div r20.y, r28.x, r20.y
        min r20.y, |r20.y|, l(131072.000000)
        mov r28.x, cb10[r22.w + 8].w
        mov r28.yz, cb10[r22.w + 9].xxyx
        dp3 r28.w, r15.xyzx, r28.xyzx
        dp3 r28.x, r17.yzwy, r28.xyzx
        add r28.x, r28.x, -cb10[r22.w + 9].z
        ge r28.y, r28.x, l(0.000000)
        max r28.x, r12.w, |r28.x|
        movc r28.x, r28.y, r28.x, -r28.x
        max r28.y, -r28.w, l(0.00000010)
        div r28.x, r28.x, r28.y
        min r20.y, r20.y, |r28.x|
        mov r28.x, cb10[r22.w + 9].w
        mov r28.yz, cb10[r22.w + 10].xxyx
        dp3 r28.w, r15.xyzx, r28.xyzx
        dp3 r28.x, r17.yzwy, r28.xyzx
        add r28.x, r28.x, -cb10[r22.w + 10].z
        ge r28.y, r28.x, l(0.000000)
        max r28.x, r12.w, |r28.x|
        movc r28.x, r28.y, r28.x, -r28.x
        max r28.y, -r28.w, l(0.00000010)
        div r28.x, r28.x, r28.y
        min r20.y, r20.y, |r28.x|
        mov r28.x, cb10[r22.w + 10].w
        mov r28.yz, cb10[r22.w + 11].xxyx
        dp3 r28.w, r15.xyzx, r28.xyzx
        dp3 r28.x, r17.yzwy, r28.xyzx
        add r28.x, r28.x, -cb10[r22.w + 11].z
        ge r28.y, r28.x, l(0.000000)
        max r28.x, r12.w, |r28.x|
        movc r28.x, r28.y, r28.x, -r28.x
        max r28.y, -r28.w, l(0.00000010)
        div r28.x, r28.x, r28.y
        min r20.y, r20.y, |r28.x|
        mov r28.x, cb10[r22.w + 11].w
        mov r28.yz, cb10[r22.w + 12].xxyx
        dp3 r28.w, r15.xyzx, r28.xyzx
        dp3 r28.x, r17.yzwy, r28.xyzx
        add r28.x, r28.x, -cb10[r22.w + 12].z
        ge r28.y, r28.x, l(0.000000)
        max r28.x, r12.w, |r28.x|
        movc r28.x, r28.y, r28.x, -r28.x
        max r28.y, -r28.w, l(0.00000010)
        div r28.x, r28.x, r28.y
        min r20.y, r20.y, |r28.x|
        mov r28.x, cb10[r22.w + 12].w
        mov r28.yz, cb10[r22.w + 13].xxyx
        dp3 r28.w, r15.xyzx, r28.xyzx
        dp3 r28.x, r17.yzwy, r28.xyzx
        add r28.x, r28.x, -cb10[r22.w + 13].z
        ge r28.y, r28.x, l(0.000000)
        max r28.x, r12.w, |r28.x|
        movc r28.x, r28.y, r28.x, -r28.x
        max r28.y, -r28.w, l(0.00000010)
        div r28.x, r28.x, r28.y
        min r20.y, r20.y, |r28.x|
        add r28.x, r17.y, cb10[r22.w + 3].w
        add r28.yz, r17.zzwz, cb10[r22.w + 4].xxyx
        mad r28.xyz, r15.xyzx, r20.yyyy, r28.xyzx
        dp3 r28.w, r28.xyzx, r28.xyzx
        sqrt r28.w, r28.w
        div r20.y, r20.y, r28.w
        add r20.y, r20.y, r20.y
        sqrt r20.y, r20.y
        mad r20.y, r7.w, l(5.000000), r20.y
        add r20.y, r20.y, l(-0.844800)
        mov r30.x, cb10[r22.w + 0].w
        mov r30.y, cb10[r22.w + 1].z
        mov r30.z, cb10[r22.w + 2].y
        dp3 r32.x, r28.xyzx, r30.xyzx
        mov r33.xy, cb10[r22.w + 1].xwxx
        mov r33.z, cb10[r22.w + 2].z
        dp3 r32.y, r28.xyzx, r33.xyzx
        mov r34.x, cb10[r22.w + 1].y
        mov r34.yz, cb10[r22.w + 2].xxwx
        dp3 r32.z, r28.xyzx, r34.xyzx
        ubfe r28.x, l(9), l(16), cb10[r22.w + 7].z
        utof r32.w, r28.x
        sample_l_indexable(texturecubearray)(float,float,float,float) r28.xyz, r32.xyzw, t8.xyzw, s2, r20.y
        and r29.xzw, r28.xxyz, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
        ieq r29.xzw, r29.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
        or r20.y, r29.z, r29.x
        or r20.y, r29.w, r20.y
        movc r28.xyz, r20.yyyy, l(1.000000,1.000000,0,0), r28.xyzx
        dp3 r35.x, r17.yzwy, r30.xyzx
        dp3 r35.y, r17.yzwy, r33.xyzx
        dp3 r35.z, r17.yzwy, r34.xyzx
        mad_sat r17.yzw, r35.xxyz, cb10[r22.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r35.xy, r17.yzyy, cb10[r22.w + 4].zwzz
        mul r35.z, r17.w, cb10[r22.w + 5].x
        add r17.yzw, r35.xxyz, cb10[r22.w + 5].yyzw
        dp3 r32.x, r11.xyzx, r30.xyzx
        dp3 r32.y, r11.xyzx, r33.xyzx
        dp3 r32.z, r11.xyzx, r34.xyzx
        lt r29.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r32.xxyz
        movc r19.z, r29.x, l(0), l(0.500000)
        add r30.xyz, r17.yzwy, r19.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r30.xyz, r30.xyzx, t17.xyzw, s4, l(0.000000)
        mul r33.xyz, r32.xyzx, r32.xyzx
        mul r33.xyz, r18.xxxx, r33.xyzx
        movc r21.z, r29.z, l(0), l(0.500000)
        add r34.xyz, r17.yzwy, r21.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r34.xyz, r34.xyzx, t18.xyzw, s4, l(0.000000)
        mul r34.xyz, r33.yyyy, r34.xyzx
        mad r30.xyz, r30.xyzx, r33.xxxx, r34.xyzx
        movc r22.z, r29.w, l(0), l(0.500000)
        add r17.yzw, r17.yyzw, r22.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r17.yzw, r17.yzwy, t19.wxyz, s4, l(0.000000)
        mad r17.yzw, r17.yyzw, r33.zzzz, r30.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r29.xzw, r32.xyzw, t8.xwyz, s2, l(6.000000)
        and r30.xyz, r29.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r30.xyz, r30.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r19.z, r30.y, r30.x
        or r19.z, r30.z, r19.z
        movc r29.xzw, r19.zzzz, l(1.000000,0,1.000000,0), r29.xxzw
        mul r30.xyz, r17.yzwy, r29.xzwx
        dp3 r19.z, r30.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r25.xyz, r17.yzwy, r29.xzwx, r25.xyzx
        mul r17.y, r13.w, r19.z
        mul r28.xyz, r18.xxxx, r28.xyzx
        dp3 r17.z, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r17.z, r13.w, r19.z, r17.z
        div r17.y, r17.y, r17.z
        mov r30.x, r25.w
        mov r30.yz, r26.xxyx
        mad r17.yzw, r28.xxyz, r17.yyyy, r30.xxyz
        mov r25.w, r17.y
        mov r26.xy, r17.zwzz
      else 
        mov r27.xyz, r26.xyzx
        mov r26.xyzw, r27.xyzw
      endif 
    endloop 
    mov r23.xyzw, r25.xyzw
    mov r24.xyzw, r26.xyzw
    iadd r18.w, r18.w, l(32)
  endloop 
  mov r17.x, l(16)
  mov r18.yz, l(0,0,1.000000,0)
  mov r19.xy, l(0,0,0,0)
  mov r21.xy, l(0,0,0,0)
  mov r22.xy, l(0,0,0,0)
  mov r25.xyz, r23.xyzx
  mov r26.x, r23.w
  mov r26.yz, r24.xxyx
  mov r27.xyz, r24.zwzz
  mov r16.z, l(0)
  loop 
    uge r16.w, r16.z, r14.z
    breakc_nz r16.w
    ushr r16.w, r16.z, l(5)
    iadd r16.w, r14.w, r16.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.w, r16.w, l(0), t26.xxxx
    ieq r18.w, r16.x, r16.z
    ubfe r19.w, r16.y, l(0), r16.w
    movc r16.w, r18.w, r19.w, r16.w
    mov r28.xyz, r25.xyzx
    mov r29.xyz, r26.xyzx
    mov r30.xyz, r27.xzyx
    mov r18.w, r16.w
    loop 
      breakc_z r18.w
      firstbit_lo r19.w, r18.w
      ishl r20.x, l(1), r19.w
      not r20.x, r20.x
      and r18.w, r18.w, r20.x
      iadd r19.w, r16.z, r19.w
      imul null, r19.w, r19.w, l(14)
      and r20.x, r30.z, l(255)
      ult r20.y, r20.x, l(32)
      and r20.y, r2.w, r20.y
      if_nz r20.y
        imad r20.x, r20.x, l(20), l(880)
        add r17.yzw, cb1[24].xxyz, cb10[r19.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r20.x, r17.xyzw
      endif 
      iadd r20.y, r30.z, l(1)
      add r17.yzw, r10.xxyz, -cb10[r19.w + 0].xxyz
      and r21.w, l(0x0000ffff), cb10[r19.w + 7].z
      ubfe r22.w, l(6), l(25), cb10[r19.w + 7].z
      imul null, r25.w, r21.w, l(6)
      dp3 r26.w, cb11[r25.w + 0].xyzx, r17.yzwy
      add_sat r26.w, r26.w, cb11[r25.w + 0].w
      dp3 r27.w, cb11[r25.w + 1].xyzx, r17.yzwy
      add_sat r27.w, r27.w, cb11[r25.w + 1].w
      mul r26.w, r26.w, r27.w
      dp3 r27.w, cb11[r25.w + 2].xyzx, r17.yzwy
      add_sat r27.w, r27.w, cb11[r25.w + 2].w
      mul r26.w, r26.w, r27.w
      dp3 r27.w, cb11[r25.w + 3].xyzx, r17.yzwy
      add_sat r27.w, r27.w, cb11[r25.w + 3].w
      mul r26.w, r26.w, r27.w
      dp3 r27.w, cb11[r25.w + 4].xyzx, r17.yzwy
      add_sat r27.w, r27.w, cb11[r25.w + 4].w
      mul r26.w, r26.w, r27.w
      dp3 r27.w, cb11[r25.w + 5].xyzx, r17.yzwy
      add_sat r25.w, r27.w, cb11[r25.w + 5].w
      mul r18.x, r25.w, r26.w
      and r25.w, l(1), cb10[r19.w + 6].x
      movc r32.xy, r25.wwww, r18.xyxx, r18.zxzz
      mov r18.x, cb10[r19.w + 6].x
      mov r33.xy, r32.xyxx
      mov r25.w, l(1)
      loop 
        ige r26.w, r25.w, r22.w
        breakc_nz r26.w
        iadd r26.w, r21.w, r25.w
        imul null, r26.w, r26.w, l(6)
        dp3 r27.w, cb11[r26.w + 0].xyzx, r17.yzwy
        add_sat r27.w, r27.w, cb11[r26.w + 0].w
        mul r27.w, r27.w, r33.x
        dp3 r28.w, cb11[r26.w + 1].xyzx, r17.yzwy
        add_sat r28.w, r28.w, cb11[r26.w + 1].w
        mul r27.w, r27.w, r28.w
        dp3 r28.w, cb11[r26.w + 2].xyzx, r17.yzwy
        add_sat r28.w, r28.w, cb11[r26.w + 2].w
        mul r27.w, r27.w, r28.w
        dp3 r28.w, cb11[r26.w + 3].xyzx, r17.yzwy
        add_sat r28.w, r28.w, cb11[r26.w + 3].w
        mul r27.w, r27.w, r28.w
        dp3 r28.w, cb11[r26.w + 4].xyzx, r17.yzwy
        add_sat r28.w, r28.w, cb11[r26.w + 4].w
        mul r27.w, r27.w, r28.w
        dp3 r28.w, cb11[r26.w + 5].xyzx, r17.yzwy
        add_sat r26.w, r28.w, cb11[r26.w + 5].w
        mul r33.x, r26.w, r27.w
        ushr r28.w, r18.x, l(2)
        ubfe r29.w, l(1), l(2), r18.x
        and r30.w, r28.w, l(2)
        max r31.w, r33.x, r33.y
        mad r26.w, -r27.w, r26.w, l(1.000000)
        mul r26.w, r26.w, r33.y
        movc r20.w, r30.w, r26.w, r31.w
        movc r33.xy, r29.wwww, r33.xyxx, r20.zwzz
        iadd r25.w, r25.w, l(1)
        mov r18.x, r28.w
      endloop 
      add_sat r18.x, -r30.y, r33.y
      mul r20.w, r18.x, cb10[r19.w + 6].y
      lt r21.w, l(0.000000), r20.w
      if_nz r21.w
        and r21.w, r20.y, l(255)
        iadd r22.w, r21.w, l(-1)
        ult r22.w, r22.w, l(32)
        and r22.w, r2.w, r22.w
        if_nz r22.w
          imad r32.xy, r21.wwww, l(20, 20, 0, 0), l(860, 876, 0, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r21.w, cb2[52].x, r32.x, u2.xxxx
          or r21.w, r21.w, l(32)
          store_structured u2.x, cb2[52].x, r32.x, r21.w
          store_structured u2.x, cb2[52].x, r32.y, r20.w
        endif 
        iadd r30.z, r30.z, l(257)
        mad r30.x, r18.x, cb10[r19.w + 6].y, r30.x
        mul r18.x, r20.w, cb10[r19.w + 7].y
        mov r32.x, cb10[r19.w + 7].w
        mov r32.yz, cb10[r19.w + 8].xxyx
        dp3 r20.w, r15.xyzx, r32.xyzx
        dp3 r21.w, r17.yzwy, r32.xyzx
        add r21.w, r21.w, -cb10[r19.w + 8].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r12.w, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r20.w, |r20.w|, l(131072.000000)
        mov r32.x, cb10[r19.w + 8].w
        mov r32.yz, cb10[r19.w + 9].xxyx
        dp3 r21.w, r15.xyzx, r32.xyzx
        dp3 r22.w, r17.yzwy, r32.xyzx
        add r22.w, r22.w, -cb10[r19.w + 9].z
        ge r25.w, r22.w, l(0.000000)
        max r22.w, r12.w, |r22.w|
        movc r22.w, r25.w, r22.w, -r22.w
        max r21.w, -r21.w, l(0.00000010)
        div r21.w, r22.w, r21.w
        min r20.w, r20.w, |r21.w|
        mov r32.x, cb10[r19.w + 9].w
        mov r32.yz, cb10[r19.w + 10].xxyx
        dp3 r21.w, r15.xyzx, r32.xyzx
        dp3 r22.w, r17.yzwy, r32.xyzx
        add r22.w, r22.w, -cb10[r19.w + 10].z
        ge r25.w, r22.w, l(0.000000)
        max r22.w, r12.w, |r22.w|
        movc r22.w, r25.w, r22.w, -r22.w
        max r21.w, -r21.w, l(0.00000010)
        div r21.w, r22.w, r21.w
        min r20.w, r20.w, |r21.w|
        mov r32.x, cb10[r19.w + 10].w
        mov r32.yz, cb10[r19.w + 11].xxyx
        dp3 r21.w, r15.xyzx, r32.xyzx
        dp3 r22.w, r17.yzwy, r32.xyzx
        add r22.w, r22.w, -cb10[r19.w + 11].z
        ge r25.w, r22.w, l(0.000000)
        max r22.w, r12.w, |r22.w|
        movc r22.w, r25.w, r22.w, -r22.w
        max r21.w, -r21.w, l(0.00000010)
        div r21.w, r22.w, r21.w
        min r20.w, r20.w, |r21.w|
        mov r32.x, cb10[r19.w + 11].w
        mov r32.yz, cb10[r19.w + 12].xxyx
        dp3 r21.w, r15.xyzx, r32.xyzx
        dp3 r22.w, r17.yzwy, r32.xyzx
        add r22.w, r22.w, -cb10[r19.w + 12].z
        ge r25.w, r22.w, l(0.000000)
        max r22.w, r12.w, |r22.w|
        movc r22.w, r25.w, r22.w, -r22.w
        max r21.w, -r21.w, l(0.00000010)
        div r21.w, r22.w, r21.w
        min r20.w, r20.w, |r21.w|
        mov r32.x, cb10[r19.w + 12].w
        mov r32.yz, cb10[r19.w + 13].xxyx
        dp3 r21.w, r15.xyzx, r32.xyzx
        dp3 r22.w, r17.yzwy, r32.xyzx
        add r22.w, r22.w, -cb10[r19.w + 13].z
        ge r25.w, r22.w, l(0.000000)
        max r22.w, r12.w, |r22.w|
        movc r22.w, r25.w, r22.w, -r22.w
        max r21.w, -r21.w, l(0.00000010)
        div r21.w, r22.w, r21.w
        min r20.w, r20.w, |r21.w|
        add r32.x, r17.y, cb10[r19.w + 3].w
        add r32.yz, r17.zzwz, cb10[r19.w + 4].xxyx
        mad r32.xyz, r15.xyzx, r20.wwww, r32.xyzx
        dp3 r21.w, r32.xyzx, r32.xyzx
        sqrt r21.w, r21.w
        div r20.w, r20.w, r21.w
        add r20.w, r20.w, r20.w
        sqrt r20.w, r20.w
        mad r20.w, r7.w, l(5.000000), r20.w
        add r20.w, r20.w, l(-0.844800)
        mov r34.x, cb10[r19.w + 0].w
        mov r34.y, cb10[r19.w + 1].z
        mov r34.z, cb10[r19.w + 2].y
        dp3 r35.x, r32.xyzx, r34.xyzx
        mov r36.xy, cb10[r19.w + 1].xwxx
        mov r36.z, cb10[r19.w + 2].z
        dp3 r35.y, r32.xyzx, r36.xyzx
        mov r37.x, cb10[r19.w + 1].y
        mov r37.yz, cb10[r19.w + 2].xxwx
        dp3 r35.z, r32.xyzx, r37.xyzx
        ubfe r21.w, l(9), l(16), cb10[r19.w + 7].z
        utof r35.w, r21.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r32.xyz, r35.xyzw, t8.xyzw, s2, r20.w
        and r33.xzw, r32.xxyz, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
        ieq r33.xzw, r33.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
        or r20.w, r33.z, r33.x
        or r20.w, r33.w, r20.w
        movc r32.xyz, r20.wwww, l(1.000000,1.000000,0,0), r32.xyzx
        dp3 r38.x, r17.yzwy, r34.xyzx
        dp3 r38.y, r17.yzwy, r36.xyzx
        dp3 r38.z, r17.yzwy, r37.xyzx
        mad_sat r17.yzw, r38.xxyz, cb10[r19.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r38.xy, r17.yzyy, cb10[r19.w + 4].zwzz
        mul r38.z, r17.w, cb10[r19.w + 5].x
        add r17.yzw, r38.xxyz, cb10[r19.w + 5].yyzw
        dp3 r35.x, r11.xyzx, r34.xyzx
        dp3 r35.y, r11.xyzx, r36.xyzx
        dp3 r35.z, r11.xyzx, r37.xyzx
        lt r33.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r35.xxyz
        movc r19.z, r33.x, l(0), l(0.500000)
        add r34.xyz, r17.yzwy, r19.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r34.xyz, r34.xyzx, t17.xyzw, s4, l(0.000000)
        mul r36.xyz, r35.xyzx, r35.xyzx
        mul r36.xyz, r18.xxxx, r36.xyzx
        movc r21.z, r33.z, l(0), l(0.500000)
        add r37.xyz, r17.yzwy, r21.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r37.xyz, r37.xyzx, t18.xyzw, s4, l(0.000000)
        mul r37.xyz, r36.yyyy, r37.xyzx
        mad r34.xyz, r34.xyzx, r36.xxxx, r37.xyzx
        movc r22.z, r33.w, l(0), l(0.500000)
        add r17.yzw, r17.yyzw, r22.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r17.yzw, r17.yzwy, t19.wxyz, s4, l(0.000000)
        mad r17.yzw, r17.yyzw, r36.zzzz, r34.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r33.xzw, r35.xyzw, t8.xwyz, s2, l(6.000000)
        and r34.xyz, r33.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r34.xyz, r34.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r19.z, r34.y, r34.x
        or r19.z, r34.z, r19.z
        movc r33.xzw, r19.zzzz, l(1.000000,0,1.000000,0), r33.xxzw
        mul r34.xyz, r17.yzwy, r33.xzwx
        dp3 r19.z, r34.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r28.xyz, r17.yzwy, r33.xzwx, r28.xyzx
        mul r17.y, r13.w, r19.z
        mul r32.xyz, r18.xxxx, r32.xyzx
        dp3 r17.z, r32.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r17.z, r13.w, r19.z, r17.z
        div r17.y, r17.y, r17.z
        mad r29.xyz, r32.xyzx, r17.yyyy, r29.xyzx
      else 
        mov r20.x, r30.x
        mov r30.xz, r20.xxyx
      endif 
    endloop 
    mov r25.xyz, r28.xyzx
    mov r26.xyz, r29.xyzx
    mov r27.xy, r30.xzxx
    iadd r16.z, r16.z, l(32)
  endloop 
  ge r7.w, r24.z, l(1.000000)
  and r12.w, r24.w, l(0x0000ff00)
  bfi r12.w, l(8), l(0), r27.y, r12.w
  movc r14.y, r7.w, r12.w, r27.y
  max r7.w, r27.x, l(1.000000)
  rcp r7.w, r7.w
  mov_sat r27.x, r27.x
  mul r16.xyz, r7.wwww, r25.xyzx
  mul r31.xyz, r7.wwww, r26.xyzx
  lt r12.w, r27.x, l(0.990000)
  if_nz r12.w
    iadd r14.y, r14.y, l(256)
    add r12.w, -r27.x, l(1.000000)
    mul r13.w, r12.w, cb2[19].x
    add r17.xyz, r10.xyzx, -cb2[35].xyzx
    mul r18.x, r17.x, cb2[35].w
    mul r18.yz, r17.yyzy, cb2[36].xxyx
    add_sat r17.xyz, r18.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r18.xy, r17.xyxx, cb2[36].zwzz
    mul r18.z, r17.z, cb2[37].x
    add r17.xyz, r18.xyzx, cb2[37].yzwy
    lt r18.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
    movc r18.xyz, r18.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
    mov r18.w, l(0)
    add r19.xyz, r17.xyzx, r18.wwxw
    sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t17.xyzw, s4, l(0.000000)
    mul r20.xyz, r11.xyzx, r11.xyzx
    mul r20.xyz, r13.wwww, r20.xyzx
    add r21.xyz, r17.xyzx, r18.wwyw
    sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t18.xyzw, s4, l(0.000000)
    mul r21.xyz, r20.yyyy, r21.xyzx
    mad r19.xyz, r19.xyzx, r20.xxxx, r21.xyzx
    add r17.xyz, r17.xyzx, r18.wwzw
    sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t19.xyzw, s4, l(0.000000)
    mad r17.xyz, r17.xyzx, r20.zzzz, r19.xyzx
    mov r11.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
    mul r17.xyz, r17.xyzx, r18.xyzx
    dp3 r11.w, r17.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r16.xyz, r25.xyzx, r7.wwww, r17.xyzx
    mov r15.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r15.xyzw, t8.xyzw, s2, r9.w
    mad r7.w, cb2[19].x, r12.w, -r11.w
    mad r7.w, r2.y, r7.w, r11.w
    mad r31.xyz, r17.xyzx, r7.wwww, r31.xyzx
  endif 
else 
  mov r16.xyz, l(0,0,0,0)
endif 
add r7.w, r3.z, r2.x
log r7.w, |r7.w|
mul r7.w, r2.z, r7.w
exp r7.w, r7.w
add r7.w, r3.z, r7.w
add_sat r7.w, r7.w, l(-1.000000)
mul r17.xyz, r3.zzzz, r16.xyzx
and r18.xyz, r0.wwww, r17.yzxy
mad r14.zw, r2.xxxy, l(0.000000, 0.000000, 0.984375, 0.984375), l(0.000000, 0.000000, 0.00781250, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r14.zw, r14.zwzz, t5.zwxy, s2, l(0.000000)
mul r19.xyz, r7.wwww, r31.xyzx
mul r20.xyz, r14.zzzz, r19.xyzx
mul r19.xyz, r14.wwww, r19.xyzx
sqrt r2.y, r2.z
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r7.w, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r9.w, r2.x, r2.y, r7.w
mul r2.y, r2.y, r9.w
mul r7.w, r7.w, r9.w
if_nz r2.w
  mov r21.x, l(3)
  mov r21.yzw, cb1[24].xxyz
  store_structured u2.xyzw, cb2[52].x, l(112), r21.xyzw
endif 
lt r9.w, l(0.000000), r6.w
if_nz r9.w
  if_nz r2.w
    ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r9.w, cb2[52].x, l(112), u2.xxxx
    or r9.w, r9.w, l(4)
    store_structured u2.x, cb2[52].x, l(112), r9.w
    store_structured u2.x, cb2[52].x, l(128), r8.w
  endif 
  lt r9.w, l(0.000000), r8.w
  if_nz r9.w
    mul r9.w, r1.w, cb2[18].w
    mul r9.w, r4.w, r9.w
    if_nz cb2[23].x
      add r21.xyz, r10.xyzx, cb1[24].xyzx
      mov r21.w, l(1.000000)
      dp4 r11.w, cb2[24].xyzw, r21.xyzw
      dp4 r12.w, cb2[25].xyzw, r21.xyzw
      frc r21.x, r11.w
      frc r21.y, r12.w
      iadd r11.w, l(-1), cb2[23].x
      utof r21.z, r11.w
      sample_l_indexable(texture2darray)(float,float,float,float) r21.xyz, r21.xyzx, t20.xyzw, s2, l(0.000000)
      add r21.xyz, r21.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r21.xyz, cb2[23].yyyy, r21.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r21.xyz, r21.xyzx, cb2[18].xyzx
    else 
      mov r21.xyz, cb2[18].xyzx
    endif 
    ushr r11.w, cb2[53].x, l(16)
    ult r12.w, l(0), r11.w
    and r12.w, r1.z, r12.w
    if_nz r12.w
      iadd r11.w, r11.w, cb2[0].x
      imad r11.w, r11.w, l(15), l(-15)
      mad r12.w, |r4.z|, l(-0.200000), l(0.400000)
      lt r13.w, r4.z, l(0.000000)
      and r13.w, r0.w, r13.w
      movc r12.w, r13.w, -r12.w, r12.w
      mad r22.xyz, r11.xyzx, r12.wwww, r10.xyzx
      mov r23.xyz, cb9[r11.w + 4].yzwy
      mov r23.w, cb9[r11.w + 5].x
      mov r22.w, l(1.000000)
      dp4 r23.x, r23.xyzw, r22.xyzw
      mov r24.xyz, cb9[r11.w + 5].yzwy
      mov r24.w, cb9[r11.w + 6].x
      dp4 r23.y, r24.xyzw, r22.xyzw
      mad r14.zw, r23.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r23.x, r14.z, cb9[r11.w + 9].w
      add r23.y, r14.w, cb9[r11.w + 10].x
      mul r14.zw, r23.xxxy, cb9[r11.w + 9].yyyz
      div r23.xy, cb9[r11.w + 3].yyyy, cb9[r11.w + 8].ywyy
      add r23.zw, -r23.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      ge r23.zw, r14.zzzw, r23.zzzw
      ge r23.xy, r23.xyxx, r14.zwzz
      or r23.xy, r23.xyxx, r23.zwzz
      or r12.w, r23.y, r23.x
      if_z r12.w
        mov r23.xyz, cb9[r11.w + 6].yzwy
        mov r23.w, cb9[r11.w + 7].x
        dp4 r12.w, r23.xyzw, r22.xyzw
        mov_sat r14.zw, r14.zzzw
        mad r22.x, r14.z, cb9[r11.w + 8].y, cb9[r11.w + 8].z
        mad r22.y, r14.w, cb9[r11.w + 8].w, cb9[r11.w + 9].x
        add r12.w, r12.w, cb9[r11.w + 10].y
        div r12.w, r12.w, cb9[r11.w + 10].z
        max r12.w, r12.w, l(0.00006104)
        and r13.w, l(0x0000ffff), cb9[r11.w + 1].w
        if_nz cb2[58].y
          mov r23.x, -r4.x
          utof r24.z, r13.w
          mov r23.y, r13.x
          mov r23.z, r4.x
          mov r14.zw, l(0,0,0,0)
          loop 
            ige r15.w, r14.w, l(8)
            breakc_nz r15.w
            dp2 r25.x, icb[r14.w + 0].yxyy, r23.xyxx
            dp2 r25.y, icb[r14.w + 0].yxyy, r23.yzyy
            mad r24.xy, r25.xyxx, cb9[r11.w + 3].yyyy, r22.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r24.xyzx, t9.xxxx, s13, r12.w
            mad r14.z, r15.w, l(0.125000), r14.z
            iadd r14.w, r14.w, l(1)
          endloop 
        else 
          utof r22.z, r13.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.z, r22.xyzx, t9.xxxx, s13, r12.w
        endif 
        mul r11.w, r14.z, r14.z
        mul r11.w, r14.z, r11.w
      else 
        mov r11.w, l(1.000000)
      endif 
      mul r8.w, r8.w, r11.w
    else 
      and r11.w, cb2[53].x, l(0x0000ffff)
      ult r12.w, l(0), r11.w
      not r13.w, r1.z
      and r12.w, r12.w, r13.w
      if_nz r12.w
        iadd r11.w, r11.w, cb2[0].x
        imad r11.w, r11.w, l(15), l(-15)
        mad r12.w, |r4.z|, l(-0.200000), l(0.400000)
        lt r13.w, r4.z, l(0.000000)
        and r13.w, r0.w, r13.w
        movc r12.w, r13.w, -r12.w, r12.w
        mad r22.xyz, r11.xyzx, r12.wwww, r10.xyzx
        mov r23.xyz, cb9[r11.w + 4].yzwy
        mov r23.w, cb9[r11.w + 5].x
        mov r22.w, l(1.000000)
        dp4 r23.x, r23.xyzw, r22.xyzw
        mov r24.xyz, cb9[r11.w + 5].yzwy
        mov r24.w, cb9[r11.w + 6].x
        dp4 r23.y, r24.xyzw, r22.xyzw
        mad r14.zw, r23.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r23.x, r14.z, cb9[r11.w + 9].w
        add r23.y, r14.w, cb9[r11.w + 10].x
        mul r14.zw, r23.xxxy, cb9[r11.w + 9].yyyz
        div r23.xy, cb9[r11.w + 3].yyyy, cb9[r11.w + 8].ywyy
        add r23.zw, -r23.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
        ge r23.zw, r14.zzzw, r23.zzzw
        ge r23.xy, r23.xyxx, r14.zwzz
        or r23.xy, r23.xyxx, r23.zwzz
        or r12.w, r23.y, r23.x
        if_z r12.w
          mov r23.xyz, cb9[r11.w + 6].yzwy
          mov r23.w, cb9[r11.w + 7].x
          dp4 r12.w, r23.xyzw, r22.xyzw
          mov_sat r14.zw, r14.zzzw
          mad r22.x, r14.z, cb9[r11.w + 8].y, cb9[r11.w + 8].z
          mad r22.y, r14.w, cb9[r11.w + 8].w, cb9[r11.w + 9].x
          add r12.w, r12.w, cb9[r11.w + 10].y
          div r12.w, r12.w, cb9[r11.w + 10].z
          max r12.w, r12.w, l(0.00006104)
          and r13.w, l(0x0000ffff), cb9[r11.w + 1].w
          if_nz cb2[58].y
            mov r23.x, -r4.x
            utof r24.z, r13.w
            mov r23.y, r13.x
            mov r23.z, r4.x
            mov r14.zw, l(0,0,0,0)
            loop 
              ige r15.w, r14.w, l(8)
              breakc_nz r15.w
              dp2 r25.x, icb[r14.w + 0].yxyy, r23.xyxx
              dp2 r25.y, icb[r14.w + 0].yxyy, r23.yzyy
              mad r24.xy, r25.xyxx, cb9[r11.w + 3].yyyy, r22.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r24.xyzx, t9.xxxx, s13, r12.w
              mad r14.z, r15.w, l(0.125000), r14.z
              iadd r14.w, r14.w, l(1)
            endloop 
          else 
            utof r22.z, r13.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.z, r22.xyzx, t9.xxxx, s13, r12.w
          endif 
          mul r11.w, r14.z, r14.z
          mul r11.w, r14.z, r11.w
        else 
          mov r11.w, l(1.000000)
        endif 
        mul r8.w, r8.w, r11.w
      endif 
    endif 
    mad r11.w, -r2.x, l(0.500000), l(1.000000)
    mad r11.w, -r6.w, r11.w, l(1.000000)
    mul r11.w, r11.w, r11.w
    mad r11.w, -r11.w, l(0.620000), l(0.620000)
    add r11.w, -r6.w, r11.w
    mad r6.w, r2.z, r11.w, r6.w
    mul r6.w, r8.w, r6.w
    mul r22.xyz, r21.xyzx, r6.wwww
    lt r4.z, l(0.000000), r4.z
    mad r16.xyz, r16.xyzx, r3.zzzz, r22.xyzx
    mad r22.xyz, -r10.xyzx, r0.zzzz, cb2[17].xyzx
    dp3 r0.z, r22.xyzx, r22.xyzx
    rsq r0.z, r0.z
    mul r22.xyz, r0.zzzz, r22.xyzx
    dp3 r0.z, r22.xyzx, r12.xyzx
    dp3 r3.z, r11.xyzx, r22.xyzx
    mad r11.w, |r3.z|, r1.w, -|r3.z|
    mad r3.z, |r3.z|, r11.w, l(1.000000)
    mad r4.w, r4.w, r2.y, r7.w
    mul r3.z, r3.z, r3.z
    mul r3.z, r4.w, r3.z
    rcp r3.z, r3.z
    mul r3.z, r9.w, r3.z
    mul r3.z, r3.z, r8.w
    mul r3.z, r3.z, l(0.250000)
    mad r22.yzw, r3.zzzz, r21.xxyz, r19.xxyz
    add_sat r0.z, -r0.z, l(1.000000)
    mul r4.w, r0.z, r0.z
    mul r4.w, r4.w, r4.w
    mul r0.z, r0.z, r4.w
    mul r0.z, r0.z, r3.z
    mad r23.xyz, r0.zzzz, r21.xyzx, r20.xyzx
    mad r21.xyz, r6.wwww, r21.xyzx, r18.zxyz
    and r21.xyz, r0.wwww, r21.yzxy
    mov r16.w, r18.z
    mov r17.w, r21.z
    movc r17.xyzw, r4.zzzz, r16.xyzw, r17.xyzw
    mov r18.zw, r23.xxxy
    mov r21.zw, r20.xxxy
    movc r16.xyzw, r4.zzzz, r18.xyzw, r21.xyzw
    mov r22.x, r23.z
    mov r19.w, r20.z
    movc r19.xyzw, r4.zzzz, r22.yzwx, r19.xyzw
    if_nz r2.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r0.z, cb2[52].x, l(112), u2.xxxx
      or r0.z, r0.z, l(8)
      store_structured u2.x, cb2[52].x, l(112), r0.z
      store_structured u2.x, cb2[52].x, l(132), r8.w
    endif 
    mov r18.z, r17.w
    mov r18.xy, r16.xyxx
    mov r20.xy, r16.zwzz
    mov r20.z, r19.w
    mov r0.z, l(0x00010101)
  else 
    mov r0.z, l(257)
  endif 
else 
  mov r0.z, l(1)
endif 
ftou r3.z, cb1[44].x
iadd r3.z, r3.z, l(7)
ushr r3.z, r3.z, l(3)
imad r3.z, r0.y, r3.z, r0.x
ishl r3.z, r3.z, l(5)
not r4.z, r1.z
mov r16.x, -r4.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r21.x, l(2)
mov r10.w, l(1.000000)
mov r22.x, l(2)
mov r23.z, l(1.000000)
mov r24.w, l(1.000000)
mov r25.w, l(1.000000)
mov r26.w, l(1.000000)
mov r16.z, r4.x
mov r27.w, l(1.000000)
mov r16.yw, r13.xxxx
mov r4.y, r16.w
mov r13.y, r16.x
mov r28.x, r13.x
mov r28.y, r16.x
mov r28.z, r4.x
mov r13.z, r4.x
mov r29.w, l(1.000000)
mov r30.x, r13.x
mov r30.y, r16.x
mov r30.z, r4.x
mov r31.x, r13.x
mov r31.y, r16.x
mov r31.z, r4.x
mov r32.xyz, r17.xyzx
mov r33.xyz, r18.zxyz
mov r34.xyz, r20.xyzx
mov r35.xyz, r19.xyzx
mov r4.w, cb2[58].y
mov r6.w, r0.z
mov r8.w, l(0)
loop 
  uge r9.w, r8.w, cb2[0].x
  breakc_nz r9.w
  ushr r9.w, r8.w, l(5)
  iadd r9.w, r3.z, r9.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.w, r9.w, l(0), t26.xxxx
  mov r36.xyz, r32.xyzx
  mov r37.xyz, r33.xyzx
  mov r38.xyz, r34.xyzx
  mov r39.xyz, r35.xyzx
  mov r11.w, r4.w
  mov r12.w, r6.w
  mov r13.w, r9.w
  loop 
    breakc_z r13.w
    firstbit_lo r14.z, r13.w
    ishl r14.w, l(1), r14.z
    not r14.w, r14.w
    and r13.w, r13.w, r14.w
    iadd r14.z, r8.w, r14.z
    imul null, r14.z, r14.z, l(15)
    ubfe r14.w, l(3), l(24), cb9[r14.z + 1].w
    ieq r15.w, r14.w, l(2)
    if_nz r15.w
      ubfe r15.w, l(3), l(27), cb9[r14.z + 1].w
      and r17.w, r12.w, l(255)
      ult r18.w, r17.w, l(32)
      and r18.w, r2.w, r18.w
      if_nz r18.w
        imad r17.w, r17.w, l(24), l(112)
        add r21.yzw, cb1[24].xxyz, cb9[r14.z + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r17.w, r21.xyzw
      endif 
      iadd r17.w, r12.w, l(1)
      add r40.xy, -r10.xyxx, cb9[r14.z + 3].zwzz
      add r40.z, -r10.z, cb9[r14.z + 4].x
      dp3 r18.w, r40.xyzx, r40.xyzx
      rsq r18.w, r18.w
      mul r21.yzw, r18.wwww, r40.xxyz
      mul r19.w, r1.w, cb9[r14.z + 1].z
      mul r19.w, r19.w, l(0.250000)
      dp3 r20.w, r11.xyzx, r21.yzwy
      mov_sat r21.y, r20.w
      movc r21.z, r0.w, |r20.w|, r21.y
      lt r21.w, l(0.000000), r21.z
      if_nz r21.w
        mov r41.xyz, cb9[r14.z + 7].yzwy
        mov r41.w, cb9[r14.z + 8].x
        dp4 r21.w, r41.xyzw, r10.xyzw
        lt r23.w, r21.w, l(1.000000)
        if_nz r23.w
          mov r42.xyz, l(1.000000,1.000000,1.000000,0)
          mov r23.w, l(0)
        else 
          add r43.xyz, -r10.xyzx, cb9[r14.z + 0].xyzx
          mul r28.w, cb9[r14.z + 3].x, cb9[r14.z + 3].x
          dp3 r30.w, r43.xyzx, r43.xyzx
          div r28.w, r28.w, r30.w
          min r28.w, r28.w, l(1.000000)
          mad_sat r43.xy, r21.wwww, cb9[r14.z + 2].xzxx, cb9[r14.z + 2].ywyy
          mul r43.zw, r43.xxxy, r43.xxxy
          mad r43.xy, r43.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r43.xy, r43.xyxx, r43.zwzz
          mul r28.w, r28.w, r43.x
          mul r28.w, r43.y, r28.w
          mov r43.xyz, cb9[r14.z + 4].yzwy
          mov r43.w, cb9[r14.z + 5].x
          dp4 r43.x, r43.xyzw, r10.xyzw
          mov r44.xyz, cb9[r14.z + 5].yzwy
          mov r44.w, cb9[r14.z + 6].x
          dp4 r43.y, r44.xyzw, r10.xyzw
          div r23.xy, r43.xyxx, r21.wwww
          lt r21.w, cb9[r14.z + 10].w, l(0.00048828)
          if_nz r21.w
            mad_sat r43.xy, |r23.xyxx|, cb9[r14.z + 12].xyxx, cb9[r14.z + 12].zwzz
            mul r43.zw, r43.xxxy, r43.xxxy
            mad r43.xy, r43.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r43.xy, r43.xyxx, r43.zwzz
            mul r21.w, r43.y, r43.x
          else 
            mul_sat r43.xyzw, |r23.yyxx|, cb9[r14.z + 11].xyzw
            log r43.xyzw, r43.xyzw
            mul r43.xyzw, r43.xyzw, cb9[r14.z + 12].zzzz
            exp r43.xyzw, r43.xyzw
            add r43.xy, r43.zwzz, r43.xyxx
            log r43.xy, r43.xyxx
            mul r43.xy, r43.xyxx, cb9[r14.z + 12].wwww
            exp r43.xy, r43.xyxx
            mul r30.w, r43.x, cb9[r14.z + 12].x
            mad r31.w, cb9[r14.z + 12].y, r43.y, l(-1.000000)
            mad r30.w, cb9[r14.z + 12].y, r43.y, -r30.w
            div_sat r30.w, r31.w, r30.w
            mul r31.w, r30.w, r30.w
            mad r30.w, r30.w, l(-2.000000), l(3.000000)
            mul r21.w, r30.w, r31.w
          endif 
          mul r23.w, r21.w, r28.w
          and r21.w, l(255), cb9[r14.z + 14].w
          if_nz r21.w
            dp3 r28.w, cb9[r14.z + 13].xyzx, r23.xyzx
            mov r43.x, cb9[r14.z + 13].w
            mov r43.yz, cb9[r14.z + 14].xxyx
            dp3 r23.x, r43.xyzx, r23.xyzx
            frc r43.x, r28.w
            frc r43.y, r23.x
            iadd r21.w, r21.w, l(-1)
            utof r43.z, r21.w
            sample_l_indexable(texture2darray)(float,float,float,float) r42.xyz, r43.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r42.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r43.x, cb9[r14.z + 0].w
        mov r43.yz, cb9[r14.z + 1].xxyx
        mul r42.xyz, r42.xyzx, r43.xyzx
        lt r21.w, l(0.000000), r23.w
        if_nz r21.w
          and r21.w, r17.w, l(255)
          iadd r23.x, r21.w, l(-1)
          ult r23.x, r23.x, l(32)
          and r23.x, r2.w, r23.x
          if_nz r23.x
            imad r23.xy, r21.wwww, l(24, 24, 0, 0), l(88, 104, 0, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r21.w, cb2[52].x, r23.x, u2.xxxx
            or r21.w, r21.w, l(4)
            store_structured u2.x, cb2[52].x, r23.x, r21.w
            store_structured u2.x, cb2[52].x, r23.y, r23.w
          endif 
          iadd r21.w, r12.w, l(257)
          ine r15.w, r15.w, l(1)
          if_nz r15.w
            mad r15.w, |r20.w|, l(-0.200000), l(0.400000)
            lt r23.x, r20.w, l(0.000000)
            and r23.x, r0.w, r23.x
            movc r15.w, r23.x, -r15.w, r15.w
            mad r24.xyz, r11.xyzx, r15.wwww, r10.xyzx
            mov r43.xyz, cb9[r14.z + 6].yzwy
            mov r43.w, cb9[r14.z + 7].x
            dp4 r15.w, r43.xyzw, r24.xyzw
            dp4 r23.x, r41.xyzw, r24.xyzw
            ge r23.y, r23.x, r15.w
            if_nz r23.y
              mov r41.xyz, cb9[r14.z + 4].yzwy
              mov r41.w, cb9[r14.z + 5].x
              dp4 r41.x, r41.xyzw, r24.xyzw
              mov r43.xyz, cb9[r14.z + 5].yzwy
              mov r43.w, cb9[r14.z + 6].x
              dp4 r41.y, r43.xyzw, r24.xyzw
              div r24.xy, r41.xyxx, r23.xxxx
              mad_sat r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r41.x, r24.x, cb9[r14.z + 8].y, cb9[r14.z + 8].z
              mad r41.y, r24.y, cb9[r14.z + 8].w, cb9[r14.z + 9].x
              div r15.w, r15.w, r23.x
              max r15.w, r15.w, l(0.00006104)
              and r23.x, l(0x0000ffff), cb9[r14.z + 1].w
              if_nz r11.w
                utof r24.z, r23.x
                mov r23.y, l(0)
                mov r28.w, l(0)
                loop 
                  ige r30.w, r28.w, l(8)
                  breakc_nz r30.w
                  dp2 r43.x, icb[r28.w + 0].yxyy, r16.xyxx
                  dp2 r43.y, icb[r28.w + 0].yxyy, r16.yzyy
                  mad r24.xy, r43.xyxx, cb9[r14.z + 3].yyyy, r41.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r15.w
                  mad r23.y, r24.x, l(0.125000), r23.y
                  iadd r28.w, r28.w, l(1)
                endloop 
              else 
                utof r41.z, r23.x
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.y, r41.xyzx, t9.xxxx, s13, r15.w
              endif 
              mul r15.w, r23.y, r23.y
              mul r15.w, r23.y, r15.w
            else 
              mov r15.w, l(1.000000)
            endif 
          else 
            mov r15.w, l(1.000000)
          endif 
          mul r15.w, r15.w, r23.w
          lt r23.x, l(0.000000), r15.w
          if_nz r23.x
            ubfe r23.x, l(4), l(16), cb9[r14.z + 1].w
            ult r23.w, l(0), r23.x
            and r23.w, r1.z, r23.w
            if_nz r23.w
              iadd r23.x, r23.x, cb2[0].x
              imad r23.x, r23.x, l(15), l(-15)
              mad r23.w, |r20.w|, l(-0.200000), l(0.400000)
              lt r24.x, r20.w, l(0.000000)
              and r24.x, r0.w, r24.x
              movc r23.w, r24.x, -r23.w, r23.w
              mad r25.xyz, r11.xyzx, r23.wwww, r10.xyzx
              mov r41.xyz, cb9[r23.x + 6].yzwy
              mov r41.w, cb9[r23.x + 7].x
              dp4 r23.w, r41.xyzw, r25.xyzw
              mov r41.xyz, cb9[r23.x + 7].yzwy
              mov r41.w, cb9[r23.x + 8].x
              dp4 r24.x, r41.xyzw, r25.xyzw
              lt r24.y, r24.x, r23.w
              if_z r24.y
                mov r41.xyz, cb9[r23.x + 4].yzwy
                mov r41.w, cb9[r23.x + 5].x
                dp4 r41.x, r41.xyzw, r25.xyzw
                mov r43.xyz, cb9[r23.x + 5].yzwy
                mov r43.w, cb9[r23.x + 6].x
                dp4 r41.y, r43.xyzw, r25.xyzw
                div r25.xy, r41.xyxx, r24.xxxx
                mad r25.xy, r25.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r41.x, r25.x, cb9[r23.x + 9].w
                add r41.y, r25.y, cb9[r23.x + 10].x
                mul r25.xy, r41.xyxx, cb9[r23.x + 9].yzyy
                div r41.xy, cb9[r23.x + 3].yyyy, cb9[r23.x + 8].ywyy
                add r41.zw, -r41.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r41.zw, r25.xxxy, r41.zzzw
                ge r41.xy, r41.xyxx, r25.xyxx
                or r41.xy, r41.xyxx, r41.zwzz
                or r24.z, r41.y, r41.x
                if_z r24.z
                  mov_sat r25.xy, r25.xyxx
                  mad r41.x, r25.x, cb9[r23.x + 8].y, cb9[r23.x + 8].z
                  mad r41.y, r25.y, cb9[r23.x + 8].w, cb9[r23.x + 9].x
                  mul r25.x, r24.x, cb9[r23.x + 10].z
                  mad r23.w, cb9[r23.x + 10].y, r24.x, r23.w
                  div r23.w, r23.w, r25.x
                endif 
              else 
                mov r24.z, l(-1)
              endif 
              or r24.x, r24.y, r24.z
              if_z r24.x
                max r23.w, r23.w, l(0.00006104)
                and r24.x, l(0x0000ffff), cb9[r23.x + 1].w
                if_nz r11.w
                  utof r25.z, r24.x
                  mov r24.yz, l(0,0,0,0)
                  loop 
                    ige r28.w, r24.z, l(8)
                    breakc_nz r28.w
                    dp2 r43.x, icb[r24.z + 0].yxyy, r16.xwxx
                    dp2 r43.y, icb[r24.z + 0].xyxx, r4.xyxx
                    mad r25.xy, r43.xyxx, cb9[r23.x + 3].yyyy, r41.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r25.xyzx, t9.xxxx, s13, r23.w
                    mad r24.y, r25.x, l(0.125000), r24.y
                    iadd r24.z, r24.z, l(1)
                  endloop 
                else 
                  utof r41.z, r24.x
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.y, r41.xyzx, t9.xxxx, s13, r23.w
                endif 
                mul r23.x, r24.y, r24.y
                mul r23.x, r24.y, r23.x
              else 
                mov r23.x, l(1.000000)
              endif 
              mul r15.w, r15.w, r23.x
            else 
              ubfe r23.x, l(4), l(20), cb9[r14.z + 1].w
              ult r23.w, l(0), r23.x
              and r23.w, r4.z, r23.w
              if_nz r23.w
                iadd r23.x, r23.x, cb2[0].x
                imad r23.x, r23.x, l(15), l(-15)
                mad r23.w, |r20.w|, l(-0.200000), l(0.400000)
                lt r24.x, r20.w, l(0.000000)
                and r24.x, r0.w, r24.x
                movc r23.w, r24.x, -r23.w, r23.w
                mad r26.xyz, r11.xyzx, r23.wwww, r10.xyzx
                mov r41.xyz, cb9[r23.x + 6].yzwy
                mov r41.w, cb9[r23.x + 7].x
                dp4 r23.w, r41.xyzw, r26.xyzw
                mov r41.xyz, cb9[r23.x + 7].yzwy
                mov r41.w, cb9[r23.x + 8].x
                dp4 r24.x, r41.xyzw, r26.xyzw
                lt r24.z, r24.x, r23.w
                if_z r24.z
                  mov r41.xyz, cb9[r23.x + 4].yzwy
                  mov r41.w, cb9[r23.x + 5].x
                  dp4 r25.x, r41.xyzw, r26.xyzw
                  mov r41.xyz, cb9[r23.x + 5].yzwy
                  mov r41.w, cb9[r23.x + 6].x
                  dp4 r25.y, r41.xyzw, r26.xyzw
                  div r25.xy, r25.xyxx, r24.xxxx
                  mad r25.xy, r25.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r26.x, r25.x, cb9[r23.x + 9].w
                  add r26.y, r25.y, cb9[r23.x + 10].x
                  mul r25.xy, r26.xyxx, cb9[r23.x + 9].yzyy
                  div r26.xy, cb9[r23.x + 3].yyyy, cb9[r23.x + 8].ywyy
                  add r41.xy, -r26.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r41.xy, r25.xyxx, r41.xyxx
                  ge r26.xy, r26.xyxx, r25.xyxx
                  or r26.xy, r26.xyxx, r41.xyxx
                  or r25.z, r26.y, r26.x
                  if_z r25.z
                    mov_sat r25.xy, r25.xyxx
                    mad r26.x, r25.x, cb9[r23.x + 8].y, cb9[r23.x + 8].z
                    mad r26.y, r25.y, cb9[r23.x + 8].w, cb9[r23.x + 9].x
                    mul r25.x, r24.x, cb9[r23.x + 10].z
                    mad r23.w, cb9[r23.x + 10].y, r24.x, r23.w
                    div r23.w, r23.w, r25.x
                  endif 
                else 
                  mov r25.z, l(-1)
                endif 
                or r24.x, r24.z, r25.z
                if_z r24.x
                  max r23.w, r23.w, l(0.00006104)
                  and r24.x, l(0x0000ffff), cb9[r23.x + 1].w
                  if_nz r11.w
                    utof r25.z, r24.x
                    mov r24.z, l(0)
                    mov r28.w, l(0)
                    loop 
                      ige r30.w, r28.w, l(8)
                      breakc_nz r30.w
                      dp2 r41.x, icb[r28.w + 0].xyxx, r28.xyxx
                      dp2 r41.y, icb[r28.w + 0].yxyy, r28.xzxx
                      mad r25.xy, r41.xyxx, cb9[r23.x + 3].yyyy, r26.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r25.xyzx, t9.xxxx, s13, r23.w
                      mad r24.z, r25.x, l(0.125000), r24.z
                      iadd r28.w, r28.w, l(1)
                    endloop 
                  else 
                    utof r26.z, r24.x
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.z, r26.xyzx, t9.xxxx, s13, r23.w
                  endif 
                  mul r23.x, r24.z, r24.z
                  mul r23.x, r24.z, r23.x
                else 
                  mov r23.x, l(1.000000)
                endif 
                mul r15.w, r15.w, r23.x
              endif 
            endif 
            mad r23.x, -r21.z, r2.x, l(1.000000)
            mul r23.x, r23.x, r23.x
            mad r23.x, -r23.x, l(0.620000), l(0.620000)
            add r23.x, -r21.z, r23.x
            mad r21.z, r2.z, r23.x, r21.z
            mul r21.z, r15.w, r21.z
            lt r20.w, l(0.000000), r20.w
            mad r25.xyz, r21.zzzz, r42.xyzx, r36.xyzx
            mad r26.xyz, r40.xyzx, r18.wwww, r12.xyzx
            dp3 r18.w, r26.xyzx, r26.xyzx
            rsq r18.w, r18.w
            mul r26.xyz, r18.wwww, r26.xyzx
            dp3 r18.w, r26.xyzx, r12.xyzx
            dp3 r23.x, r11.xyzx, r26.xyzx
            mad r23.w, |r23.x|, r1.w, -|r23.x|
            mad r23.x, |r23.x|, r23.w, l(1.000000)
            mad r23.w, r21.y, r2.y, r7.w
            mul r23.x, r23.x, r23.x
            mul r23.x, r23.w, r23.x
            rcp r23.x, r23.x
            mul r19.w, r19.w, r21.y
            mul r19.w, r19.w, r23.x
            mul r19.w, r15.w, r19.w
            mad r26.xyz, r19.wwww, r42.xyzx, r39.xyzx
            add_sat r18.w, -r18.w, l(1.000000)
            mul r21.y, r18.w, r18.w
            mul r21.y, r21.y, r21.y
            mul r18.w, r18.w, r21.y
            mul r18.w, r18.w, r19.w
            mad r40.xyz, r18.wwww, r42.xyzx, r38.xyzx
            mad r41.xyz, r21.zzzz, r42.xyzx, r37.xyzx
            movc r41.xyz, r0.wwww, r41.xyzx, r37.xyzx
            movc r36.xyz, r20.wwww, r25.xyzx, r36.xyzx
            movc r37.xyz, r20.wwww, r37.xyzx, r41.xyzx
            movc r38.xyz, r20.wwww, r40.xyzx, r38.xyzx
            movc r39.xyz, r20.wwww, r26.xyzx, r39.xyzx
            and r18.w, r21.w, l(255)
            iadd r19.w, r18.w, l(-1)
            ult r19.w, r19.w, l(32)
            and r19.w, r2.w, r19.w
            if_nz r19.w
              imad r21.yz, r18.wwww, l(0, 24, 24, 0), l(0, 88, 108, 0)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r18.w, cb2[52].x, r21.y, u2.xxxx
              or r18.w, r18.w, l(8)
              store_structured u2.x, cb2[52].x, r21.y, r18.w
              store_structured u2.x, cb2[52].x, r21.z, r15.w
            endif 
            iadd r12.w, r12.w, l(0x00010101)
          else 
            mov r12.w, r21.w
          endif 
        else 
          mov r12.w, r17.w
        endif 
      else 
        mov r12.w, r17.w
      endif 
    else 
      ieq r14.w, r14.w, l(4)
      if_nz r14.w
        ubfe r14.w, l(3), l(27), cb9[r14.z + 1].w
        and r15.w, r12.w, l(255)
        ult r17.w, r15.w, l(32)
        and r17.w, r2.w, r17.w
        if_nz r17.w
          imad r15.w, r15.w, l(24), l(112)
          add r22.yzw, cb1[24].xxyz, cb9[r14.z + 0].xxyz
          store_structured u2.xyzw, cb2[52].x, r15.w, r22.xyzw
        endif 
        iadd r15.w, r12.w, l(1)
        mul r17.w, r1.w, cb9[r14.z + 1].z
        mul r17.w, r17.w, l(0.250000)
        lt r18.w, l(0.000000), cb9[r14.z + 6].y
        mov r25.xy, cb9[r14.z + 5].zwzz
        mov r25.z, cb9[r14.z + 6].x
        mad r21.yzw, -r25.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r14.z + 0].xxyz
        add r22.yzw, -r10.xxyz, r21.yyzw
        dp3 r19.w, r25.xyzx, r15.xyzx
        dp3 r20.w, r25.xyzx, r22.yzwy
        dp3 r22.y, r15.xyzx, r22.yzwy
        mad r22.z, -r19.w, r19.w, cb9[r14.z + 6].y
        mad r19.w, r19.w, r22.y, -r20.w
        div_sat r20.w, -r20.w, cb9[r14.z + 6].y
        div_sat r19.w, r19.w, r22.z
        div r22.y, r22.z, cb9[r14.z + 6].y
        mul r22.y, r22.y, l(10.000000)
        min r22.y, r22.y, l(1.000000)
        add r19.w, -r20.w, r19.w
        mad r19.w, r22.y, r19.w, r20.w
        mad r22.yzw, r19.wwww, r25.xxyz, r21.yyzw
        mad r21.yzw, r20.wwww, r25.xxyz, r21.yyzw
        movc r21.yzw, r18.wwww, r21.yyzw, cb9[r14.z + 0].xxyz
        movc r22.yzw, r18.wwww, r22.yyzw, cb9[r14.z + 0].xxyz
        add r22.yzw, -r10.xxyz, r22.yyzw
        add r21.yzw, -r10.xxyz, r21.yyzw
        dp3 r18.w, r22.yzwy, r22.yzwy
        rsq r18.w, r18.w
        mul r25.xyz, r18.wwww, r22.yzwy
        dp3 r19.w, r21.yzwy, r21.yzwy
        rsq r20.w, r19.w
        mul r21.yzw, r20.wwww, r21.yyzw
        dp3 r20.w, r11.xyzx, r21.yzwy
        mov_sat r21.y, r20.w
        movc r21.y, r0.w, |r20.w|, r21.y
        lt r21.z, l(0.000000), r21.y
        if_nz r21.z
          sqrt r21.z, r19.w
          mul r21.w, cb9[r14.z + 3].x, cb9[r14.z + 3].x
          div r19.w, r21.w, r19.w
          min r19.w, r19.w, l(1.000000)
          mad_sat r21.zw, r21.zzzz, cb9[r14.z + 2].xxxz, cb9[r14.z + 2].yyyw
          mul r23.xw, r21.zzzw, r21.zzzw
          mad r21.zw, r21.zzzw, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
          mul r21.zw, r21.zzzw, r23.xxxw
          mul r19.w, r19.w, r21.z
          mul r19.w, r21.w, r19.w
          lt r21.z, l(0.000000), r19.w
          if_nz r21.z
            and r21.z, r15.w, l(255)
            iadd r21.w, r21.z, l(-1)
            ult r21.w, r21.w, l(32)
            and r21.w, r2.w, r21.w
            if_nz r21.w
              imad r21.zw, r21.zzzz, l(0, 0, 24, 24), l(0, 0, 88, 104)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r23.x, cb2[52].x, r21.z, u2.xxxx
              or r23.x, r23.x, l(4)
              store_structured u2.x, cb2[52].x, r21.z, r23.x
              store_structured u2.x, cb2[52].x, r21.w, r19.w
            endif 
            iadd r21.z, r12.w, l(257)
            ine r14.w, r14.w, l(1)
            if_nz r14.w
              mad r14.w, |r20.w|, l(-0.200000), l(0.400000)
              lt r21.w, r20.w, l(0.000000)
              and r21.w, r0.w, r21.w
              movc r14.w, r21.w, -r14.w, r14.w
              mad r26.xyz, r11.xyzx, r14.wwww, r10.xyzx
              add r26.xyz, r26.xyzx, -cb9[r14.z + 4].yzwy
              max r14.w, |r26.z|, |r26.y|
              max r14.w, r14.w, |r26.x|
              div r14.w, cb9[r14.z + 5].x, r14.w
              add r14.w, r14.w, cb9[r14.z + 5].y
              dp3 r21.w, r26.xyzx, r26.xyzx
              rsq r21.w, r21.w
              max r14.w, r14.w, l(0.00006104)
              and r23.x, l(0x0000ffff), cb9[r14.z + 1].w
              utof r40.w, r23.x
              mov r23.xw, l(0,0,0,0)
              loop 
                ige r24.x, r23.w, l(8)
                breakc_nz r24.x
                dp2 r41.y, icb[r23.w + 0].xyxx, r13.xyxx
                dp2 r41.z, icb[r23.w + 0].yxyy, r13.xzxx
                mul r41.yz, r41.yyzy, cb9[r14.z + 3].yyyy
                mul r41.x, r14.x, r41.y
                mul r41.w, r5.x, r41.y
                mad r40.xyz, r26.xyzx, r21.wwww, r41.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r24.x, r40.xyzw, t10.xxxx, s13, r14.w
                mad r23.x, r24.x, l(0.125000), r23.x
                iadd r23.w, r23.w, l(1)
              endloop 
            else 
              mov r23.x, l(1.000000)
            endif 
            mul r14.w, r19.w, r23.x
            lt r19.w, l(0.000000), r14.w
            if_nz r19.w
              ubfe r19.w, l(4), l(16), cb9[r14.z + 1].w
              ult r21.w, l(0), r19.w
              and r21.w, r1.z, r21.w
              if_nz r21.w
                iadd r19.w, r19.w, cb2[0].x
                imad r19.w, r19.w, l(15), l(-15)
                mad r21.w, |r20.w|, l(-0.200000), l(0.400000)
                lt r23.w, r20.w, l(0.000000)
                and r23.w, r0.w, r23.w
                movc r21.w, r23.w, -r21.w, r21.w
                mad r27.xyz, r11.xyzx, r21.wwww, r10.xyzx
                mov r40.xyz, cb9[r19.w + 6].yzwy
                mov r40.w, cb9[r19.w + 7].x
                dp4 r21.w, r40.xyzw, r27.xyzw
                mov r40.xyz, cb9[r19.w + 7].yzwy
                mov r40.w, cb9[r19.w + 8].x
                dp4 r23.w, r40.xyzw, r27.xyzw
                lt r24.x, r23.w, r21.w
                if_z r24.x
                  mov r40.xyz, cb9[r19.w + 4].yzwy
                  mov r40.w, cb9[r19.w + 5].x
                  dp4 r26.x, r40.xyzw, r27.xyzw
                  mov r40.xyz, cb9[r19.w + 5].yzwy
                  mov r40.w, cb9[r19.w + 6].x
                  dp4 r26.y, r40.xyzw, r27.xyzw
                  div r26.xy, r26.xyxx, r23.wwww
                  mad r26.xy, r26.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r27.x, r26.x, cb9[r19.w + 9].w
                  add r27.y, r26.y, cb9[r19.w + 10].x
                  mul r26.xy, r27.xyxx, cb9[r19.w + 9].yzyy
                  div r27.xy, cb9[r19.w + 3].yyyy, cb9[r19.w + 8].ywyy
                  add r40.xy, -r27.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r40.xy, r26.xyxx, r40.xyxx
                  ge r27.xy, r27.xyxx, r26.xyxx
                  or r27.xy, r27.xyxx, r40.xyxx
                  or r26.z, r27.y, r27.x
                  if_z r26.z
                    mov_sat r26.xy, r26.xyxx
                    mad r27.x, r26.x, cb9[r19.w + 8].y, cb9[r19.w + 8].z
                    mad r27.y, r26.y, cb9[r19.w + 8].w, cb9[r19.w + 9].x
                    mul r26.x, r23.w, cb9[r19.w + 10].z
                    mad r21.w, cb9[r19.w + 10].y, r23.w, r21.w
                    div r21.w, r21.w, r26.x
                  endif 
                else 
                  mov r26.z, l(-1)
                endif 
                or r23.w, r24.x, r26.z
                if_z r23.w
                  max r21.w, r21.w, l(0.00006104)
                  and r23.w, l(0x0000ffff), cb9[r19.w + 1].w
                  if_nz r11.w
                    utof r26.z, r23.w
                    mov r24.x, l(0)
                    mov r28.w, l(0)
                    loop 
                      ige r30.w, r28.w, l(8)
                      breakc_nz r30.w
                      dp2 r40.x, icb[r28.w + 0].xyxx, r30.xyxx
                      dp2 r40.y, icb[r28.w + 0].yxyy, r30.xzxx
                      mad r26.xy, r40.xyxx, cb9[r19.w + 3].yyyy, r27.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r26.xyzx, t9.xxxx, s13, r21.w
                      mad r24.x, r26.x, l(0.125000), r24.x
                      iadd r28.w, r28.w, l(1)
                    endloop 
                  else 
                    utof r27.z, r23.w
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r27.xyzx, t9.xxxx, s13, r21.w
                  endif 
                  mul r19.w, r24.x, r24.x
                  mul r19.w, r24.x, r19.w
                else 
                  mov r19.w, l(1.000000)
                endif 
                mul r14.w, r14.w, r19.w
              else 
                ubfe r19.w, l(4), l(20), cb9[r14.z + 1].w
                ult r21.w, l(0), r19.w
                and r21.w, r4.z, r21.w
                if_nz r21.w
                  iadd r19.w, r19.w, cb2[0].x
                  imad r19.w, r19.w, l(15), l(-15)
                  mad r21.w, |r20.w|, l(-0.200000), l(0.400000)
                  lt r23.w, r20.w, l(0.000000)
                  and r23.w, r0.w, r23.w
                  movc r21.w, r23.w, -r21.w, r21.w
                  mad r29.xyz, r11.xyzx, r21.wwww, r10.xyzx
                  mov r40.xyz, cb9[r19.w + 6].yzwy
                  mov r40.w, cb9[r19.w + 7].x
                  dp4 r21.w, r40.xyzw, r29.xyzw
                  mov r40.xyz, cb9[r19.w + 7].yzwy
                  mov r40.w, cb9[r19.w + 8].x
                  dp4 r23.w, r40.xyzw, r29.xyzw
                  lt r26.x, r23.w, r21.w
                  if_z r26.x
                    mov r40.xyz, cb9[r19.w + 4].yzwy
                    mov r40.w, cb9[r19.w + 5].x
                    dp4 r27.x, r40.xyzw, r29.xyzw
                    mov r40.xyz, cb9[r19.w + 5].yzwy
                    mov r40.w, cb9[r19.w + 6].x
                    dp4 r27.y, r40.xyzw, r29.xyzw
                    div r26.yz, r27.xxyx, r23.wwww
                    mad r26.yz, r26.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                    add r27.x, r26.y, cb9[r19.w + 9].w
                    add r27.y, r26.z, cb9[r19.w + 10].x
                    mul r26.yz, r27.xxyx, cb9[r19.w + 9].yyzy
                    div r27.xy, cb9[r19.w + 3].yyyy, cb9[r19.w + 8].ywyy
                    add r29.xy, -r27.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r29.xy, r26.yzyy, r29.xyxx
                    ge r27.xy, r27.xyxx, r26.yzyy
                    or r27.xy, r27.xyxx, r29.xyxx
                    or r27.x, r27.y, r27.x
                    if_z r27.x
                      mov_sat r26.yz, r26.yyzy
                      mad r29.x, r26.y, cb9[r19.w + 8].y, cb9[r19.w + 8].z
                      mad r29.y, r26.z, cb9[r19.w + 8].w, cb9[r19.w + 9].x
                      mul r26.y, r23.w, cb9[r19.w + 10].z
                      mad r21.w, cb9[r19.w + 10].y, r23.w, r21.w
                      div r21.w, r21.w, r26.y
                    endif 
                  else 
                    mov r27.x, l(-1)
                  endif 
                  or r23.w, r26.x, r27.x
                  if_z r23.w
                    max r21.w, r21.w, l(0.00006104)
                    and r23.w, l(0x0000ffff), cb9[r19.w + 1].w
                    if_nz r11.w
                      utof r26.z, r23.w
                      mov r27.xy, l(0,0,0,0)
                      loop 
                        ige r27.z, r27.y, l(8)
                        breakc_nz r27.z
                        dp2 r40.x, icb[r27.y + 0].xyxx, r31.xyxx
                        dp2 r40.y, icb[r27.y + 0].yxyy, r31.xzxx
                        mad r26.xy, r40.xyxx, cb9[r19.w + 3].yyyy, r29.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r26.xyzx, t9.xxxx, s13, r21.w
                        mad r27.x, r26.x, l(0.125000), r27.x
                        iadd r27.y, r27.y, l(1)
                      endloop 
                    else 
                      utof r29.z, r23.w
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r27.x, r29.xyzx, t9.xxxx, s13, r21.w
                    endif 
                    mul r19.w, r27.x, r27.x
                    mul r19.w, r27.x, r19.w
                  else 
                    mov r19.w, l(1.000000)
                  endif 
                  mul r14.w, r14.w, r19.w
                endif 
              endif 
              mad r19.w, -r21.y, r2.x, l(1.000000)
              mul r19.w, r19.w, r19.w
              mad r19.w, -r19.w, l(0.620000), l(0.620000)
              add r19.w, -r21.y, r19.w
              mad r19.w, r2.z, r19.w, r21.y
              mul r19.w, r14.w, r19.w
              mov r26.x, cb9[r14.z + 0].w
              mov r26.yz, cb9[r14.z + 1].xxyx
              lt r14.z, l(0.000000), r20.w
              mad r29.xyz, r19.wwww, r26.xyzx, r36.xyzx
              dp3_sat r20.w, r11.xyzx, r25.xyzx
              mad r22.yzw, r22.yyzw, r18.wwww, r12.xxyz
              dp3 r18.w, r22.yzwy, r22.yzwy
              rsq r18.w, r18.w
              mul r22.yzw, r18.wwww, r22.yyzw
              dp3 r18.w, r22.yzwy, r12.xyzx
              dp3 r21.y, r11.xyzx, r22.yzwy
              mad r21.w, |r21.y|, r1.w, -|r21.y|
              mad r21.y, |r21.y|, r21.w, l(1.000000)
              mad r21.w, r20.w, r2.y, r7.w
              mul r21.y, r21.y, r21.y
              mul r21.y, r21.w, r21.y
              rcp r21.y, r21.y
              mul r17.w, r17.w, r20.w
              mul r17.w, r17.w, r21.y
              mul r17.w, r14.w, r17.w
              mad r22.yzw, r17.wwww, r26.xxyz, r39.xxyz
              add_sat r18.w, -r18.w, l(1.000000)
              mul r20.w, r18.w, r18.w
              mul r20.w, r20.w, r20.w
              mul r18.w, r18.w, r20.w
              mul r17.w, r17.w, r18.w
              mad r25.xyz, r17.wwww, r26.xyzx, r38.xyzx
              mad r26.xyz, r19.wwww, r26.xyzx, r37.xyzx
              movc r26.xyz, r0.wwww, r26.xyzx, r37.xyzx
              movc r36.xyz, r14.zzzz, r29.xyzx, r36.xyzx
              movc r37.xyz, r14.zzzz, r37.xyzx, r26.xyzx
              movc r38.xyz, r14.zzzz, r25.xyzx, r38.xyzx
              movc r39.xyz, r14.zzzz, r22.yzwy, r39.xyzx
              and r14.z, r21.z, l(255)
              iadd r17.w, r14.z, l(-1)
              ult r17.w, r17.w, l(32)
              and r17.w, r2.w, r17.w
              if_nz r17.w
                imad r21.yw, r14.zzzz, l(0, 24, 0, 24), l(0, 88, 0, 108)
                ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r14.z, cb2[52].x, r21.y, u2.xxxx
                or r14.z, r14.z, l(8)
                store_structured u2.x, cb2[52].x, r21.y, r14.z
                store_structured u2.x, cb2[52].x, r21.w, r14.w
              endif 
              iadd r12.w, r12.w, l(0x00010101)
            else 
              mov r12.w, r21.z
            endif 
          else 
            mov r12.w, r15.w
          endif 
        else 
          mov r12.w, r15.w
        endif 
      endif 
    endif 
  endloop 
  mov r32.xyz, r36.xyzx
  mov r33.xyz, r37.xyzx
  mov r34.xyz, r38.xyzx
  mov r35.xyz, r39.xyzx
  mov r6.w, r12.w
  iadd r8.w, r8.w, l(32)
endloop 
mad r3.xyz, r3.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.z, r3.y
mad r2.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r2.x
ieq r1.z, r0.z, r1.z
movc r1.zw, r1.zzzz, r2.yyyz, l(0,0,-1.000000,0)
mad r2.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.x, r2.x
ieq r2.x, r0.z, r2.x
movc r2.xy, r2.xxxx, r2.yzyy, l(-1.000000,0,0,0)
mad r4.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.z, r4.x
ieq r2.z, r0.z, r2.z
movc r4.xy, r2.zzzz, r4.yzyy, l(-1.000000,0,0,0)
mad r6.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.z, r6.x
ieq r0.z, r0.z, r2.z
movc r4.zw, r0.zzzz, r6.yyyz, l(0,0,-1.000000,0)
mov r7.x, r1.z
mov r7.y, r2.x
mov r7.zw, r4.xxxz
add r7.xyzw, -r3.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.z, r7.y, r7.x
add r0.z, r7.z, r0.z
add r0.z, r7.w, r0.z
mul r1.z, r2.y, r7.y
mad r1.z, r7.x, r1.w, r1.z
mad r1.z, r7.z, r4.y, r1.z
mad r1.z, r7.w, r4.w, r1.z
div r3.w, r1.z, r0.z
ge r0.z, l(0.000000), r0.z
movc r3.yz, r0.zzzz, l(0,0,0,0), r3.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.z, r1.w, r1.z
movc r2.xyz, r0.zzzz, r3.xyzx, r3.xzyx
mad r0.z, -r2.z, l(0.500000), r2.x
add r3.y, r0.z, r2.z
mad r3.z, -r2.y, l(0.500000), r0.z
add r3.x, r2.y, r3.z
mul r2.xyz, r5.yzwy, r32.xyzx
mad r2.xyz, r33.xyzx, r3.xyzx, r2.xyzx
mul r4.xyz, r34.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r4.xyz, r35.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000), r4.xyzx
add r2.xyz, r2.xyzx, r4.xyzx
add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, r34.xyzx
mad r3.xyz, r35.xyzx, r3.xyzx, r4.xyzx
mad r3.xyz, r32.xyzx, r5.yzwy, r3.xyzx
movc r2.xyz, r0.wwww, r2.xyzx, r3.xyzx
lt r0.z, l(0.000000), cb2[9].z
if_nz r0.z
  dp3 r0.z, r10.xyzx, r10.xyzx
  rsq r0.w, r0.z
  mul r3.xyz, r0.wwww, r10.xyzx
  sqrt r0.z, r0.z
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r1.zw, r0.zzzz, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r0.w, l(0.010000), |r10.z|
    mul r4.xy, r10.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r0.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r5.xyz, r1.wwww, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xyzx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xyzx
  else 
    mad r0.w, r0.z, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r10.z|
    mul r1.w, r10.z, cb2[15].z
    mul r3.w, r1.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r1.w, r3.w, r1.w
    mul r1.w, r0.w, r1.w
    movc r0.w, r1.z, r1.w, r0.w
    mul r5.xyz, r0.wwww, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xyzx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r1.w, cb2[8].w, -r0.w, l(1.000000)
  mul r1.w, r1.w, r1.w
  mul r1.w, r1.w, l(12.566371)
  div r1.z, r1.z, r1.w
  add r0.z, r0.z, -cb2[10].w
  mul_sat r0.z, r0.z, cb2[11].w
  mul r0.z, r0.z, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyz, r0.zzzz, cb2[11].xyzx
  mad r3.xyz, r0.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r5.xyzx
  mad r3.xyz, r2.xyzx, r4.xyzx, r3.xyzx
else 
  mul r0.z, r10.z, cb2[6].x
  mad r0.w, cb2[6].x, r10.z, cb2[5].x
  lt r1.z, |r0.z|, l(0.000100)
  min r1.w, r0.w, l(64.000000)
  mul r1.w, r1.w, l(1.442695)
  exp r1.w, r1.w
  mov_sat r3.w, cb2[6].z
  lt r4.x, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r4.x, r1.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.z, r1.z, l(1.000000), r0.z
  div r0.z, r0.w, r0.z
  movc r0.z, r1.z, r3.w, r0.z
  mul r0.z, r0.z, cb2[5].z
  dp3 r0.w, r10.xyzx, r10.xyzx
  sqrt r1.z, r0.w
  mad r0.z, r0.z, r1.z, cb2[5].w
  exp r0.z, r0.z
  min r0.z, r0.z, l(1.000000)
  add r0.z, -r0.z, l(1.000000)
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r10.xyzx
  dp3 r0.w, cb2[7].yzwy, r4.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r0.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.z, r0.z, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyz, r0.zzzz, r4.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.z, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(0, 0, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(0)
and r0.w, r0.w, r1.z
and r3.z, r0.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.zzzz, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.z, r6.w, l(255)
      break 
      case l(2)
      ubfe r0.z, l(8), l(8), r6.w
      break 
      case l(3)
      ubfe r0.z, l(8), l(16), r6.w
      break 
      case l(4)
      and r0.z, r14.y, l(255)
      break 
      case l(5)
      ubfe r0.z, l(8), l(8), r14.y
      break 
      default 
      mov r0.z, l(0)
      break 
    endswitch 
    utof r0.z, r0.z
    mul r0.z, r0.z, cb2[53].z
    mad r3.xyz, r0.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r2.w
  add r1.xyz, r10.xyzx, cb1[24].xyzx
  and r1.w, r6.w, l(255)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.z, r14.y, l(255)
  store_structured u2.x, cb2[52].x, l(108), r0.z
endif 
if_nz cb2[52].y
  and r0.z, r6.w, l(255)
  atomic_iadd g1, l(0), r0.z
  ubfe r1.xy, l(8, 8, 0, 0), l(8, 16, 0, 0), r6.wwww
  atomic_iadd g1, l(4), r1.x
  atomic_iadd g1, l(8), r1.y
  and r0.w, r14.y, l(255)
  atomic_iadd g1, l(12), r0.w
  ubfe r1.z, l(8), l(8), r14.y
  atomic_iadd g1, l(16), r1.z
  atomic_umax g2, l(0), r0.z
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), r0.w
  atomic_umax g2, l(16), r1.z
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.z, r1.x, l(63)
  if_nz r0.z
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.z, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.z
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.z, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.z
    ieq r0.xy, r0.xyxx, cb2[52].zwzz
    and r0.x, r0.y, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.z
    endif 
  endif 
endif 
ret 
// Approximately 2565 instruction slots used
