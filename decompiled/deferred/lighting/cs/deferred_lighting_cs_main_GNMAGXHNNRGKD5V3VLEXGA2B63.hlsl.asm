//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:24 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 41
dcl_thread_group 8, 8, 1
imad r0.x, cb2[57].x, l(12), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xz, r0.xxyx, l(4095, 0, 4095, 0)
imad r1.xy, r0.xzxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ge r3.x, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r3.y, r1.xyww, t4.yxzw
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyww, t0.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.yyyx
add r3.zw, r1.wwwz, l(0.000000, 0.000000, 0.500000, 0.500000)
ge r10.x, r3.y, l(0.984375)
mul r4.w, r3.y, l(1.01587307)
mad r3.y, r3.y, l(64.000000), l(-63.000000)
movc r3.y, r10.x, r3.y, r4.w
max r3.y, r3.y, l(0.00000001)
rcp r10.y, r3.y
and r10.xy, r0.wwww, r10.xyxx
add r10.zw, r3.zzzw, -cb1[71].xxxy
mul r10.zw, r10.zzzw, cb1[44].zzzw
mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r11.x, r10.z, cb1[12].x
mul r11.y, r10.w, cb1[13].y
mov r11.zw, l(0,0,1.000000,1.000000)
mul r10.yzw, r10.yyyy, r11.xxyz
mul r11.xyz, r10.zzzz, cb1[17].xyzx
mad r11.xyz, r10.yyyy, cb1[16].xyzx, r11.xyzx
mad r11.xyz, r10.wwww, cb1[18].xyzx, r11.xyzx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r12.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r12.z
mul r12.xy, r2.wwww, r2.xyxx
and r13.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r13.xyzw, r13.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r13.w, r13.z
movc r13.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r13.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r10.yzw, r13.xxyz, l(0.000000, 1.000000, -2.000000, 1.000000)
mul r12.xyz, r12.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r12.yyyy
mad r2.xyw, r10.yzyw, r12.xxxx, r2.xyxw
mad r12.xyz, r13.xyzx, r12.zzzz, r2.xywx
movc r0.w, r3.x, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r11.xyzx, -r11.xyzx
rsq r0.w, r0.w
mul r10.yzw, r0.wwww, -r11.xxyz
dp2 r2.z, r1.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r2.z, r2.z
mul r2.z, r2.z, l(52.982918)
frc r2.z, r2.z
mad r2.z, r2.z, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r2.z
dp2 r1.z, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r15.x, r16.x, r1.z
dp3_sat r2.x, r12.xyzx, r10.yzwy
dp3 r1.z, -r10.yzwy, r12.xyzx
add r1.z, r1.z, r1.z
mad r17.xyz, r12.xyzx, -r1.zzzz, -r10.yzwy
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.w, r1.z
mul r2.zw, r3.zzzw, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r2.z, r2.zwzz, t27.yzxw, s4, l(0.000000)
mul r2.w, r2.z, r5.z
dp3 r3.y, r12.xyzx, cb2[17].xyzx
mov_sat r3.z, r3.y
movc r3.w, r3.x, |r3.y|, r3.z
ge r4.w, l(0.000000), r3.w
if_nz r4.w
  mov r6.w, l(0)
endif 
if_z r4.w
  mul r15.yzw, r11.yyyy, cb2[29].xxyz
  mad r15.yzw, r11.xxxx, cb2[28].xxyz, r15.yyzw
  mad r15.yzw, r11.zzzz, cb2[30].xxyz, r15.yyzw
  add r15.yzw, r15.yyzw, cb2[31].xxyz
  add r4.w, r15.w, -cb2[17].w
  mad r4.w, -r4.w, l(0.00006104), l(1.000000)
  mov_sat r7.w, r4.w
  eq r7.w, r4.w, r7.w
  if_nz r7.w
    mov r7.w, l(0)
    mov r8.w, l(0)
    loop 
      ge r9.w, r7.w, l(3.000000)
      breakc_nz r9.w
      ftou r9.w, r7.w
      add r13.zw, r15.yyyz, -cb2[r9.w + 20].xxxy
      max r13.z, |r13.w|, |r13.z|
      mul r8.w, r13.z, cb2[r9.w + 20].z
      lt r9.w, r8.w, l(1.000000)
      if_nz r9.w
        break 
      endif 
      add r7.w, r7.w, l(1.000000)
      mov r8.w, l(0)
    endloop 
  else 
    mov r7.w, l(3.000000)
    mov r8.w, l(0)
  endif 
  ge r9.w, r7.w, l(3.000000)
  if_nz r9.w
    mul r16.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r18.xz, r16.yyyy
    mov r18.y, -r18.z
    mad r16.yzw, r15.yyzy, r18.xxyz, r16.zzwz
    add r18.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r16.yzw, r16.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r16.yzw, r18.xxyz, r16.yyzw
    mul r13.zw, r16.wwwz, cb2[32].xxxx
    round_ni r13.zw, r13.zzzw
    mul r13.w, r13.w, cb2[27].x
    mad r13.z, r13.w, cb2[32].x, r13.z
    ftou r13.z, r13.z
    iadd r13.z, r13.z, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.z, l(0), t23.xxxx
    and r14.w, r13.w, l(0x40000000)
    ishl r18.x, r13.w, l(2)
    if_z r14.w
      and r14.w, r13.w, l(0x01ffffff)
      iadd r19.x, r13.z, r14.w
      ushr r13.z, r13.w, l(25)
      utof r13.z, r13.z
      mul r16.yzw, r13.zzzz, r16.yyzw
      frc r16.yzw, r16.yyzw
      mul r16.yzw, r16.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r16.yzw, r16.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      ushr r13.zw, r16.wwwz, l(0, 0, 6, 6)
      and r14.w, r19.z, l(0xc0000000)
      iadd r18.y, r19.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.y, r18.y, l(0), t23.xxxx
      movc r13.w, r13.w, r19.z, r18.y
      ushr r18.y, r13.w, l(13)
      movc r13.z, r13.z, r18.y, r13.w
      and r13.z, r13.z, l(8191)
      iadd r20.x, r13.z, r19.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
      mov r19.y, l(0)
      mov r20.y, l(1)
      movc r18.yzw, r14.wwww, r19.xxyz, r20.xxyz
      movc r20.yz, r14.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r13.zw, r16.wwwz, r20.yyyy
      and r13.zw, r13.zzzw, l(0, 0, 1, 1)
      and r19.w, r18.w, l(0xc0000000)
      iadd r20.y, r18.y, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.y, r20.y, l(0), t23.xxxx
      movc r13.w, r13.w, r18.w, r20.y
      ushr r20.y, r13.w, l(13)
      movc r13.z, r13.z, r20.y, r13.w
      and r13.z, r13.z, l(8191)
      iadd r20.x, r13.z, r18.y
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.w, r20.x, l(0), t23.xxxx
      movc r18.yzw, r19.wwww, r18.yyzw, r20.xxzw
      movc r18.yzw, r14.wwww, r19.xxyz, r18.yyzw
      and r13.z, r18.w, l(0xc0000000)
      if_z r13.z
        iadd r13.z, -r18.z, l(6)
        ushr r13.zw, r16.wwwz, r13.zzzz
        or r14.w, r18.w, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r14.w, r13.z
        and r13.z, r13.z, l(1023)
        iadd r19.x, r13.z, r18.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
        iadd r19.yz, r18.zzzz, l(0, 1, 2, 0)
        iadd r13.z, -r19.y, l(6)
        ushr r13.zw, r16.wwwz, r13.zzzz
        and r14.w, r19.w, l(0xc0000000)
        or r18.z, r19.w, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r18.z, r13.z
        and r13.z, r13.z, l(1023)
        iadd r20.x, r13.z, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
        mov r20.y, r19.z
        movc r20.xyz, r14.wwww, r19.xywx, r20.xyzx
        iadd r13.z, -r20.y, l(6)
        ushr r13.zw, r16.wwwz, r13.zzzz
        and r18.z, r20.z, l(0xc0000000)
        or r19.y, r20.z, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r19.y, r13.z
        and r13.z, r13.z, l(1023)
        iadd r21.x, r13.z, r20.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r21.y, r21.x, l(0), t23.xxxx
        movc r13.zw, r18.zzzz, r20.xxxz, r21.xxxy
        movc r18.yw, r14.wwww, r19.xxxw, r13.zzzw
      endif 
      and r13.z, r18.w, l(0xc0000000)
      if_z r13.z
        ubfe r13.w, l(14), l(15), r18.w
        utof r13.w, r13.w
        mul r13.w, r13.w, cb2[27].w
        mul r13.w, r13.w, l(0.00006104)
        and r19.xy, r18.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r14.w, r19.x
        mul r14.w, r14.w, cb2[27].w
        mul r14.w, r14.w, l(0.00003052)
        and r18.z, r16.z, l(3)
        iadd r18.z, r18.z, r18.y
        iadd r18.z, r18.z, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.z, l(0), t23.xxxx
        bfi r19.xzw, l(2, 0, 2, 1), l(3, 0, 1, 4), r16.yyzw, l(0, 0, 0, 0)
        ushr r16.y, r18.z, r19.x
        and r16.y, r16.y, l(255)
        utof r16.y, r16.y
        mul r16.y, r14.w, r16.y
        mad r16.y, r16.y, l(0.00392157), r13.w
        iadd r16.z, r19.z, l(1)
        ubfe r16.w, l(1), l(1), r16.w
        iadd r16.z, r16.w, r16.z
        iadd r16.z, r16.z, r18.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.z, r16.z, l(0), t23.xxxx
        ushr r16.z, r16.z, r19.w
        and r16.z, r16.z, l(0x0000ffff)
        utof r16.z, r16.z
        mul r14.w, r14.w, r16.z
        mad r13.w, r14.w, l(0.00001526), r13.w
        movc r18.x, r19.y, r16.y, r13.w
      else 
        and r13.w, r18.w, l(0x80000000)
        iadd r14.w, r18.y, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t23.xxxx
        movc r13.w, r13.w, r14.w, l(0)
        ishl r14.w, r18.w, l(2)
        ushr r16.y, r13.w, l(16)
        f16tof32 r16.y, r16.y
        and r13.w, r13.w, l(0x0000ffff)
        f16tof32 r13.w, r13.w
        mad r14.w, r15.y, r16.y, r14.w
        mad r13.w, r15.z, r13.w, r14.w
        movc r18.x, r13.z, r13.w, r18.x
      endif 
    endif 
    mad r13.z, -cb2[27].z, l(2.000000), r15.w
    lt r13.z, r18.x, r13.z
    movc r6.w, r13.z, l(0), l(1.000000)
  endif 
  if_z r9.w
    if_z cb2[58].y
      ftou r9.w, r7.w
      add r13.zw, r15.yyyz, -cb2[r9.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r9.w + 20].zzzz
      mad r18.xy, r13.zwzz, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r9.w, cb2[26].y
      add r18.z, r7.w, r9.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r18.xyzx, t13.xxxx, s13, r4.w
      sample_l_indexable(texture2darray)(float,float,float,float) r13.z, r18.xyzx, t31.yzxw, s0, l(0.000000)
      add r9.w, r9.w, r13.z
      add_sat r9.w, r9.w, l(-1.000000)
      mul r13.z, r9.w, r9.w
      mul r6.w, r9.w, r13.z
    endif 
    if_nz cb2[58].y
      mov r18.x, -r13.x
      ftou r9.w, r7.w
      add r7.w, r7.w, l(1.000000)
      min r7.w, r7.w, l(2.000000)
      ftou r7.w, r7.w
      add r8.w, -r8.w, l(1.000000)
      mul r8.w, r8.w, l(28.000000)
      ftou r8.w, r8.w
      add r13.zw, r15.yyyz, -cb2[r9.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r9.w + 20].zzzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r15.yz, r15.yyzy, -cb2[r7.w + 20].xxyx
      mul r15.yz, r15.yyzy, cb2[r7.w + 20].zzzz
      mad r15.yz, r15.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r18.y, r14.x
      mov r18.z, r13.x
      mov r14.w, l(0)
      mov r15.w, l(0)
      loop 
        uge r16.y, r15.w, l(8)
        breakc_nz r16.y
        ult r16.y, r8.w, r15.w
        movc r16.zw, r16.yyyy, r15.yyyz, r13.zzzw
        movc r18.w, r16.y, cb2[r7.w + 20].w, cb2[r9.w + 20].w
        movc r16.y, r16.y, r7.w, r9.w
        dp2 r19.x, icb[r15.w + 0].yxyy, r18.xyxx
        dp2 r19.y, icb[r15.w + 0].yxyy, r18.yzyy
        mad r19.xy, r19.xyxx, r18.wwww, r16.zwzz
        iadd r16.y, r16.y, cb2[26].y
        utof r19.z, r16.y
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.y, r19.xyzx, t13.xxxx, s13, r4.w
        sample_l_indexable(texture2darray)(float,float,float,float) r16.z, r19.xyzx, t31.yzxw, s0, l(0.000000)
        add r16.y, r16.z, r16.y
        add_sat r16.y, r16.y, l(-1.000000)
        mad r14.w, r16.y, l(0.125000), r14.w
        iadd r15.w, r15.w, l(1)
      endloop 
      mul r4.w, r14.w, r14.w
      mul r6.w, r14.w, r4.w
    endif 
  endif 
endif 
add r4.w, -r2.y, l(1.000000)
mul r7.w, r4.w, l(5.000000)
mad r8.w, r4.w, l(5.000000), l(-2.500000)
mul r8.w, r8.w, l(0.400000)
max r8.w, r8.w, l(0.000000)
mul r8.w, r8.w, l(100.000000)
mad r13.zw, -r4.wwww, l(0.000000, 0.000000, 10.000000, 5.000000), l(0.000000, 0.000000, 6.857410, 7.085000)
exp r9.w, r13.z
mul r9.w, r2.x, r9.w
mul r9.w, r9.w, l(9.136810)
mul r13.z, r4.w, r7.w
mad r13.z, -r13.z, l(2.015905), r13.w
exp r13.z, r13.z
mul r13.z, r2.x, r13.z
mul r13.z, r13.z, l(9.708090)
max r9.w, r9.w, r13.z
max r9.w, r9.w, l(1.268160)
iadd r13.z, cb2[0].y, -cb2[58].x
ushr r13.w, r0.y, l(24)
ubfe r0.y, l(10), l(12), r0.y
mov r18.yz, l(0,0,1.000000,0)
mov r19.xy, l(0,0,0,0)
mov r20.x, l(1.000000)
mov r21.xy, l(0,0,0,0)
mov r22.xy, l(0,0,0,0)
mov r23.xyzw, l(0,0,0,0)
mov r24.yzw, l(0,0,0,0)
mov r14.w, l(0)
loop 
  ieq r15.y, r14.w, l(2)
  breakc_nz r15.y
  movc r15.y, r14.w, r0.y, r13.w
  uge r15.z, r15.y, r13.z
  ult r15.w, r15.y, cb2[0].y
  and r15.z, r15.w, r15.z
  if_nz r15.z
    imul null, r15.y, r15.y, l(14)
    add r16.yzw, r11.xxyz, -cb10[r15.y + 0].xxyz
    and r15.z, l(0x0000ffff), cb10[r15.y + 7].z
    ubfe r15.w, l(6), l(25), cb10[r15.y + 7].z
    imul null, r18.w, r15.z, l(6)
    dp3 r19.w, cb11[r18.w + 0].xyzx, r16.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 0].w
    dp3 r20.z, cb11[r18.w + 1].xyzx, r16.yzwy
    add_sat r20.z, r20.z, cb11[r18.w + 1].w
    mul r19.w, r19.w, r20.z
    dp3 r20.z, cb11[r18.w + 2].xyzx, r16.yzwy
    add_sat r20.z, r20.z, cb11[r18.w + 2].w
    mul r19.w, r19.w, r20.z
    dp3 r20.z, cb11[r18.w + 3].xyzx, r16.yzwy
    add_sat r20.z, r20.z, cb11[r18.w + 3].w
    mul r19.w, r19.w, r20.z
    dp3 r20.z, cb11[r18.w + 4].xyzx, r16.yzwy
    add_sat r20.z, r20.z, cb11[r18.w + 4].w
    mul r19.w, r19.w, r20.z
    dp3 r20.z, cb11[r18.w + 5].xyzx, r16.yzwy
    add_sat r18.w, r20.z, cb11[r18.w + 5].w
    mul r18.x, r18.w, r19.w
    and r18.w, l(1), cb10[r15.y + 6].x
    movc r18.xw, r18.wwww, r18.xxxy, r18.zzzx
    mov r19.w, cb10[r15.y + 6].x
    mov r25.xy, r18.xwxx
    mov r20.z, l(1)
    loop 
      ige r20.w, r20.z, r15.w
      breakc_nz r20.w
      iadd r20.w, r15.z, r20.z
      imul null, r20.w, r20.w, l(6)
      dp3 r21.w, cb11[r20.w + 0].xyzx, r16.yzwy
      add_sat r21.w, r21.w, cb11[r20.w + 0].w
      mul r21.w, r21.w, r25.x
      dp3 r22.w, cb11[r20.w + 1].xyzx, r16.yzwy
      add_sat r22.w, r22.w, cb11[r20.w + 1].w
      mul r21.w, r21.w, r22.w
      dp3 r22.w, cb11[r20.w + 2].xyzx, r16.yzwy
      add_sat r22.w, r22.w, cb11[r20.w + 2].w
      mul r21.w, r21.w, r22.w
      dp3 r22.w, cb11[r20.w + 3].xyzx, r16.yzwy
      add_sat r22.w, r22.w, cb11[r20.w + 3].w
      mul r21.w, r21.w, r22.w
      dp3 r22.w, cb11[r20.w + 4].xyzx, r16.yzwy
      add_sat r22.w, r22.w, cb11[r20.w + 4].w
      mul r21.w, r21.w, r22.w
      dp3 r22.w, cb11[r20.w + 5].xyzx, r16.yzwy
      add_sat r20.w, r22.w, cb11[r20.w + 5].w
      mul r25.x, r20.w, r21.w
      ushr r22.w, r19.w, l(2)
      ubfe r25.z, l(1), l(2), r19.w
      and r25.w, r22.w, l(2)
      max r26.x, r25.x, r25.y
      mad r20.w, -r21.w, r20.w, l(1.000000)
      mul r20.w, r20.w, r25.y
      movc r20.y, r25.w, r20.w, r26.x
      movc r25.xy, r25.zzzz, r25.xyxx, r20.xyxx
      iadd r20.z, r20.z, l(1)
      mov r19.w, r22.w
    endloop 
    mov_sat r25.y, r25.y
    mul r15.z, r25.y, cb10[r15.y + 6].y
    lt r15.w, l(0.000000), r15.z
    if_nz r15.w
      mad r24.w, r25.y, cb10[r15.y + 6].y, r24.w
      mul r15.z, r15.z, cb10[r15.y + 7].y
      mov r26.x, cb10[r15.y + 7].w
      mov r26.yz, cb10[r15.y + 8].xxyx
      dp3 r15.w, r17.xyzx, r26.xyzx
      dp3 r18.x, r16.yzwy, r26.xyzx
      add r18.x, r18.x, -cb10[r15.y + 8].z
      ge r18.w, r18.x, l(0.000000)
      max r18.x, r8.w, |r18.x|
      movc r18.x, r18.w, r18.x, -r18.x
      max r15.w, -r15.w, l(0.00000010)
      div r15.w, r18.x, r15.w
      min r15.w, |r15.w|, l(131072.000000)
      mov r26.x, cb10[r15.y + 8].w
      mov r26.yz, cb10[r15.y + 9].xxyx
      dp3 r18.x, r17.xyzx, r26.xyzx
      dp3 r18.w, r16.yzwy, r26.xyzx
      add r18.w, r18.w, -cb10[r15.y + 9].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r8.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r15.w, r15.w, |r18.x|
      mov r26.x, cb10[r15.y + 9].w
      mov r26.yz, cb10[r15.y + 10].xxyx
      dp3 r18.x, r17.xyzx, r26.xyzx
      dp3 r18.w, r16.yzwy, r26.xyzx
      add r18.w, r18.w, -cb10[r15.y + 10].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r8.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r15.w, r15.w, |r18.x|
      mov r26.x, cb10[r15.y + 10].w
      mov r26.yz, cb10[r15.y + 11].xxyx
      dp3 r18.x, r17.xyzx, r26.xyzx
      dp3 r18.w, r16.yzwy, r26.xyzx
      add r18.w, r18.w, -cb10[r15.y + 11].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r8.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r15.w, r15.w, |r18.x|
      mov r26.x, cb10[r15.y + 11].w
      mov r26.yz, cb10[r15.y + 12].xxyx
      dp3 r18.x, r17.xyzx, r26.xyzx
      dp3 r18.w, r16.yzwy, r26.xyzx
      add r18.w, r18.w, -cb10[r15.y + 12].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r8.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r15.w, r15.w, |r18.x|
      mov r26.x, cb10[r15.y + 12].w
      mov r26.yz, cb10[r15.y + 13].xxyx
      dp3 r18.x, r17.xyzx, r26.xyzx
      dp3 r18.w, r16.yzwy, r26.xyzx
      add r18.w, r18.w, -cb10[r15.y + 13].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r8.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r18.x, -r18.x, l(0.00000010)
      div r18.x, r18.w, r18.x
      min r15.w, r15.w, |r18.x|
      add r26.x, r16.y, cb10[r15.y + 3].w
      add r26.yz, r16.zzwz, cb10[r15.y + 4].xxyx
      mad r20.yzw, r17.xxyz, r15.wwww, r26.xxyz
      dp3 r18.x, r20.yzwy, r20.yzwy
      sqrt r18.x, r18.x
      div r15.w, r15.w, r18.x
      add r15.w, r15.w, r15.w
      sqrt r15.w, r15.w
      mad r15.w, r4.w, l(5.000000), r15.w
      add r15.w, r15.w, l(-0.844800)
      mov r26.x, cb10[r15.y + 0].w
      mov r26.y, cb10[r15.y + 1].z
      mov r26.z, cb10[r15.y + 2].y
      dp3 r27.x, r20.yzwy, r26.xyzx
      mov r28.xy, cb10[r15.y + 1].xwxx
      mov r28.z, cb10[r15.y + 2].z
      dp3 r27.y, r20.yzwy, r28.xyzx
      mov r29.x, cb10[r15.y + 1].y
      mov r29.yz, cb10[r15.y + 2].xxwx
      dp3 r27.z, r20.yzwy, r29.xyzx
      ubfe r18.x, l(9), l(16), cb10[r15.y + 7].z
      utof r27.w, r18.x
      sample_l_indexable(texturecubearray)(float,float,float,float) r20.yzw, r27.xyzw, t8.wxyz, s2, r15.w
      dp3 r30.x, r16.yzwy, r26.xyzx
      dp3 r30.y, r16.yzwy, r28.xyzx
      dp3 r30.z, r16.yzwy, r29.xyzx
      mad_sat r16.yzw, r30.xxyz, cb10[r15.y + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r30.xy, r16.yzyy, cb10[r15.y + 4].zwzz
      mul r30.z, r16.w, cb10[r15.y + 5].x
      add r16.yzw, r30.xxyz, cb10[r15.y + 5].yyzw
      dp3 r27.x, r12.xyzx, r26.xyzx
      dp3 r27.y, r12.xyzx, r28.xyzx
      dp3 r27.z, r12.xyzx, r29.xyzx
      lt r25.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r27.xxyz
      movc r19.z, r25.x, l(0), l(0.500000)
      add r26.xyz, r16.yzwy, r19.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t17.xyzw, s4, l(0.000000)
      mul r28.xyz, r27.xyzx, r27.xyzx
      mul r28.xyz, r15.zzzz, r28.xyzx
      movc r21.z, r25.z, l(0), l(0.500000)
      add r29.xyz, r16.yzwy, r21.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t18.xyzw, s4, l(0.000000)
      mul r29.xyz, r28.yyyy, r29.xyzx
      mad r26.xyz, r26.xyzx, r28.xxxx, r29.xyzx
      movc r22.z, r25.w, l(0), l(0.500000)
      add r16.yzw, r16.yyzw, r22.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r16.yzw, r16.yzwy, t19.wxyz, s4, l(0.000000)
      mad r16.yzw, r16.yyzw, r28.zzzz, r26.xxyz
      sample_l_indexable(texturecubearray)(float,float,float,float) r25.xzw, r27.xyzw, t8.xwyz, s2, l(6.000000)
      mul r26.xyz, r16.yzwy, r25.xzwx
      dp3 r15.y, r26.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r23.xyz, r16.yzwy, r25.xzwx, r23.xyzx
      mul r15.w, r9.w, r15.y
      mul r16.yzw, r15.zzzz, r20.yyzw
      dp3 r15.z, r16.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r15.y, r9.w, r15.y, r15.z
      div r15.y, r15.w, r15.y
      mov r26.x, r23.w
      mov r26.yz, r24.yyzy
      mad r24.xyz, r16.yzwy, r15.yyyy, r26.xyzx
      mov r23.w, r24.x
    endif 
  endif 
  iadd r14.w, r14.w, l(1)
endloop 
lt r14.w, r24.w, l(1.000000)
if_nz r14.w
  mov r18.yz, l(0,0,1.000000,0)
  mov r19.xy, l(0,0,0,0)
  mov r20.x, l(1.000000)
  mov r21.xy, l(0,0,0,0)
  mov r22.xy, l(0,0,0,0)
  mov r25.x, r23.w
  mov r25.yzw, r24.yyzw
  mov r15.yzw, r23.xxyz
  mov r14.w, l(0)
  loop 
    ieq r16.y, r14.w, l(2)
    breakc_nz r16.y
    movc r16.y, r14.w, r0.y, r13.w
    ult r16.z, r16.y, r13.z
    if_nz r16.z
      imul null, r16.y, r16.y, l(14)
      add r26.xyz, r11.xyzx, -cb10[r16.y + 0].xyzx
      and r16.z, l(0x0000ffff), cb10[r16.y + 7].z
      ubfe r16.w, l(6), l(25), cb10[r16.y + 7].z
      imul null, r18.w, r16.z, l(6)
      dp3 r19.w, cb11[r18.w + 0].xyzx, r26.xyzx
      add_sat r19.w, r19.w, cb11[r18.w + 0].w
      dp3 r20.z, cb11[r18.w + 1].xyzx, r26.xyzx
      add_sat r20.z, r20.z, cb11[r18.w + 1].w
      mul r19.w, r19.w, r20.z
      dp3 r20.z, cb11[r18.w + 2].xyzx, r26.xyzx
      add_sat r20.z, r20.z, cb11[r18.w + 2].w
      mul r19.w, r19.w, r20.z
      dp3 r20.z, cb11[r18.w + 3].xyzx, r26.xyzx
      add_sat r20.z, r20.z, cb11[r18.w + 3].w
      mul r19.w, r19.w, r20.z
      dp3 r20.z, cb11[r18.w + 4].xyzx, r26.xyzx
      add_sat r20.z, r20.z, cb11[r18.w + 4].w
      mul r19.w, r19.w, r20.z
      dp3 r20.z, cb11[r18.w + 5].xyzx, r26.xyzx
      add_sat r18.w, r20.z, cb11[r18.w + 5].w
      mul r18.x, r18.w, r19.w
      and r18.w, l(1), cb10[r16.y + 6].x
      movc r18.xw, r18.wwww, r18.xxxy, r18.zzzx
      mov r19.w, cb10[r16.y + 6].x
      mov r27.xy, r18.xwxx
      mov r20.z, l(1)
      loop 
        ige r20.w, r20.z, r16.w
        breakc_nz r20.w
        iadd r20.w, r16.z, r20.z
        imul null, r20.w, r20.w, l(6)
        dp3 r21.w, cb11[r20.w + 0].xyzx, r26.xyzx
        add_sat r21.w, r21.w, cb11[r20.w + 0].w
        mul r21.w, r21.w, r27.x
        dp3 r22.w, cb11[r20.w + 1].xyzx, r26.xyzx
        add_sat r22.w, r22.w, cb11[r20.w + 1].w
        mul r21.w, r21.w, r22.w
        dp3 r22.w, cb11[r20.w + 2].xyzx, r26.xyzx
        add_sat r22.w, r22.w, cb11[r20.w + 2].w
        mul r21.w, r21.w, r22.w
        dp3 r22.w, cb11[r20.w + 3].xyzx, r26.xyzx
        add_sat r22.w, r22.w, cb11[r20.w + 3].w
        mul r21.w, r21.w, r22.w
        dp3 r22.w, cb11[r20.w + 4].xyzx, r26.xyzx
        add_sat r22.w, r22.w, cb11[r20.w + 4].w
        mul r21.w, r21.w, r22.w
        dp3 r22.w, cb11[r20.w + 5].xyzx, r26.xyzx
        add_sat r20.w, r22.w, cb11[r20.w + 5].w
        mul r27.x, r20.w, r21.w
        ushr r22.w, r19.w, l(2)
        ubfe r26.w, l(1), l(2), r19.w
        and r27.z, r22.w, l(2)
        max r27.w, r27.x, r27.y
        mad r20.w, -r21.w, r20.w, l(1.000000)
        mul r20.w, r20.w, r27.y
        movc r20.y, r27.z, r20.w, r27.w
        movc r27.xy, r26.wwww, r27.xyxx, r20.xyxx
        iadd r20.z, r20.z, l(1)
        mov r19.w, r22.w
      endloop 
      add_sat r16.z, -r24.w, r27.y
      mul r16.w, r16.z, cb10[r16.y + 6].y
      lt r18.x, l(0.000000), r16.w
      if_nz r18.x
        mad r25.w, r16.z, cb10[r16.y + 6].y, r25.w
        mul r16.z, r16.w, cb10[r16.y + 7].y
        mov r28.x, cb10[r16.y + 7].w
        mov r28.yz, cb10[r16.y + 8].xxyx
        dp3 r16.w, r17.xyzx, r28.xyzx
        dp3 r18.x, r26.xyzx, r28.xyzx
        add r18.x, r18.x, -cb10[r16.y + 8].z
        ge r18.w, r18.x, l(0.000000)
        max r18.x, r8.w, |r18.x|
        movc r18.x, r18.w, r18.x, -r18.x
        max r16.w, -r16.w, l(0.00000010)
        div r16.w, r18.x, r16.w
        min r16.w, |r16.w|, l(131072.000000)
        mov r28.x, cb10[r16.y + 8].w
        mov r28.yz, cb10[r16.y + 9].xxyx
        dp3 r18.x, r17.xyzx, r28.xyzx
        dp3 r18.w, r26.xyzx, r28.xyzx
        add r18.w, r18.w, -cb10[r16.y + 9].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r8.w, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r18.x, -r18.x, l(0.00000010)
        div r18.x, r18.w, r18.x
        min r16.w, r16.w, |r18.x|
        mov r28.x, cb10[r16.y + 9].w
        mov r28.yz, cb10[r16.y + 10].xxyx
        dp3 r18.x, r17.xyzx, r28.xyzx
        dp3 r18.w, r26.xyzx, r28.xyzx
        add r18.w, r18.w, -cb10[r16.y + 10].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r8.w, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r18.x, -r18.x, l(0.00000010)
        div r18.x, r18.w, r18.x
        min r16.w, r16.w, |r18.x|
        mov r28.x, cb10[r16.y + 10].w
        mov r28.yz, cb10[r16.y + 11].xxyx
        dp3 r18.x, r17.xyzx, r28.xyzx
        dp3 r18.w, r26.xyzx, r28.xyzx
        add r18.w, r18.w, -cb10[r16.y + 11].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r8.w, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r18.x, -r18.x, l(0.00000010)
        div r18.x, r18.w, r18.x
        min r16.w, r16.w, |r18.x|
        mov r28.x, cb10[r16.y + 11].w
        mov r28.yz, cb10[r16.y + 12].xxyx
        dp3 r18.x, r17.xyzx, r28.xyzx
        dp3 r18.w, r26.xyzx, r28.xyzx
        add r18.w, r18.w, -cb10[r16.y + 12].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r8.w, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r18.x, -r18.x, l(0.00000010)
        div r18.x, r18.w, r18.x
        min r16.w, r16.w, |r18.x|
        mov r28.x, cb10[r16.y + 12].w
        mov r28.yz, cb10[r16.y + 13].xxyx
        dp3 r18.x, r17.xyzx, r28.xyzx
        dp3 r18.w, r26.xyzx, r28.xyzx
        add r18.w, r18.w, -cb10[r16.y + 13].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r8.w, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r18.x, -r18.x, l(0.00000010)
        div r18.x, r18.w, r18.x
        min r16.w, r16.w, |r18.x|
        add r28.x, r26.x, cb10[r16.y + 3].w
        add r28.yz, r26.yyzy, cb10[r16.y + 4].xxyx
        mad r20.yzw, r17.xxyz, r16.wwww, r28.xxyz
        dp3 r18.x, r20.yzwy, r20.yzwy
        sqrt r18.x, r18.x
        div r16.w, r16.w, r18.x
        add r16.w, r16.w, r16.w
        sqrt r16.w, r16.w
        mad r16.w, r4.w, l(5.000000), r16.w
        add r16.w, r16.w, l(-0.844800)
        mov r28.x, cb10[r16.y + 0].w
        mov r28.y, cb10[r16.y + 1].z
        mov r28.z, cb10[r16.y + 2].y
        dp3 r29.x, r20.yzwy, r28.xyzx
        mov r30.xy, cb10[r16.y + 1].xwxx
        mov r30.z, cb10[r16.y + 2].z
        dp3 r29.y, r20.yzwy, r30.xyzx
        mov r31.x, cb10[r16.y + 1].y
        mov r31.yz, cb10[r16.y + 2].xxwx
        dp3 r29.z, r20.yzwy, r31.xyzx
        ubfe r18.x, l(9), l(16), cb10[r16.y + 7].z
        utof r29.w, r18.x
        sample_l_indexable(texturecubearray)(float,float,float,float) r20.yzw, r29.xyzw, t8.wxyz, s2, r16.w
        dp3 r32.x, r26.xyzx, r28.xyzx
        dp3 r32.y, r26.xyzx, r30.xyzx
        dp3 r32.z, r26.xyzx, r31.xyzx
        mad_sat r26.xyz, r32.xyzx, cb10[r16.y + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
        mul r32.xy, r26.xyxx, cb10[r16.y + 4].zwzz
        mul r32.z, r26.z, cb10[r16.y + 5].x
        add r26.xyz, r32.xyzx, cb10[r16.y + 5].yzwy
        dp3 r29.x, r12.xyzx, r28.xyzx
        dp3 r29.y, r12.xyzx, r30.xyzx
        dp3 r29.z, r12.xyzx, r31.xyzx
        lt r27.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r29.xxyz
        movc r19.z, r27.x, l(0), l(0.500000)
        add r28.xyz, r19.xyzx, r26.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r28.xyz, r28.xyzx, t17.xyzw, s4, l(0.000000)
        mul r30.xyz, r29.xyzx, r29.xyzx
        mul r30.xyz, r16.zzzz, r30.xyzx
        movc r21.z, r27.z, l(0), l(0.500000)
        add r31.xyz, r21.xyzx, r26.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r31.xyz, r31.xyzx, t18.xyzw, s4, l(0.000000)
        mul r31.xyz, r30.yyyy, r31.xyzx
        mad r28.xyz, r28.xyzx, r30.xxxx, r31.xyzx
        movc r22.z, r27.w, l(0), l(0.500000)
        add r26.xyz, r22.xyzx, r26.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t19.xyzw, s4, l(0.000000)
        mad r26.xyz, r26.xyzx, r30.zzzz, r28.xyzx
        sample_l_indexable(texturecubearray)(float,float,float,float) r27.xzw, r29.xyzw, t8.xwyz, s2, l(6.000000)
        mul r28.xyz, r26.xyzx, r27.xzwx
        dp3 r16.y, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r15.yzw, r26.xxyz, r27.xxzw, r15.yyzw
        mul r16.w, r9.w, r16.y
        mul r20.yzw, r16.zzzz, r20.yyzw
        dp3 r16.z, r20.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r16.y, r9.w, r16.y, r16.z
        div r16.y, r16.w, r16.y
        mad r25.xyz, r20.yzwy, r16.yyyy, r25.xyzx
      endif 
    endif 
    iadd r14.w, r14.w, l(1)
  endloop 
  mov r24.xyzw, r25.zxyw
  mov r23.xyz, r15.yzwy
  mov r24.xyzw, r24.yzxw
else 
  mov r24.x, r23.w
endif 
max r0.y, r24.w, l(1.000000)
rcp r0.y, r0.y
mov_sat r24.w, r24.w
mul r15.yzw, r0.yyyy, r23.xxyz
mul r16.yzw, r0.yyyy, r24.xxyz
lt r4.w, r24.w, l(0.990000)
if_nz r4.w
  add r4.w, -r24.w, l(1.000000)
  mul r8.w, r4.w, cb2[19].x
  add r18.xyz, r11.xyzx, -cb2[35].xyzx
  mul r19.x, r18.x, cb2[35].w
  mul r19.yz, r18.yyzy, cb2[36].xxyx
  add_sat r18.xyz, r19.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r19.xy, r18.xyxx, cb2[36].zwzz
  mul r19.z, r18.z, cb2[37].x
  add r18.xyz, r19.xyzx, cb2[37].yzwy
  lt r19.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
  movc r19.xyz, r19.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r19.w, l(0)
  add r20.xyz, r18.xyzx, r19.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
  mul r21.xyz, r12.xyzx, r12.xyzx
  mul r21.xyz, r8.wwww, r21.xyzx
  add r22.xyz, r18.xyzx, r19.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t18.xyzw, s4, l(0.000000)
  mul r22.xyz, r21.yyyy, r22.xyzx
  mad r20.xyz, r20.xyzx, r21.xxxx, r22.xyzx
  add r18.xyz, r18.xyzx, r19.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t19.xyzw, s4, l(0.000000)
  mad r18.xyz, r18.xyzx, r21.zzzz, r20.xyzx
  mov r12.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r12.xyzw, t8.xyzw, s2, l(6.000000)
  mul r18.xyz, r18.xyzx, r19.xyzx
  dp3 r8.w, r18.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r15.yzw, r23.xxyz, r0.yyyy, r18.xxyz
  mov r17.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r17.xyzw, t8.xyzw, s2, r7.w
  mad r0.y, cb2[19].x, r4.w, -r8.w
  mad r0.y, r2.y, r0.y, r8.w
  mad r16.yzw, r18.xxyz, r0.yyyy, r16.yyzw
endif 
mad r0.y, r5.z, r2.z, r2.x
log r0.y, |r0.y|
mul r0.y, r0.y, r1.w
exp r0.y, r0.y
mad r0.y, r5.z, r2.z, r0.y
add_sat r0.y, r0.y, l(-1.000000)
mul r18.xyz, r2.wwww, r15.yzwy
and r19.xyz, r3.xxxx, r18.yzxy
mad r2.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t5.zxyw, s2, l(0.000000)
mul r16.yzw, r0.yyyy, r16.yyzw
mul r20.xyz, r2.yyyy, r16.yzwy
mul r21.xyz, r2.zzzz, r16.yzwy
sqrt r0.y, r1.w
mad r0.y, r0.y, l(0.500000), l(0.500000)
mul r0.y, r0.y, r0.y
mul r2.y, r0.y, l(0.500000)
mad r0.y, -r0.y, l(0.500000), l(1.000000)
mad r2.z, r2.x, r0.y, r2.y
mul r0.y, r0.y, r2.z
mul r2.y, r2.z, r2.y
lt r2.z, l(0.000000), r3.w
if_nz r2.z
  lt r2.z, l(0.000000), r6.w
  if_nz r2.z
    mul r2.z, r1.z, cb2[18].w
    mul r2.z, r3.z, r2.z
    if_nz cb2[23].x
      add r22.xyz, r11.xyzx, cb1[24].xyzx
      mov r22.w, l(1.000000)
      dp4 r4.w, cb2[24].xyzw, r22.xyzw
      dp4 r5.z, cb2[25].xyzw, r22.xyzw
      frc r22.x, r4.w
      frc r22.y, r5.z
      iadd r4.w, l(-1), cb2[23].x
      utof r22.z, r4.w
      sample_l_indexable(texture2darray)(float,float,float,float) r16.yzw, r22.xyzx, t20.wxyz, s2, l(0.000000)
      add r16.yzw, r16.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
      mad r16.yzw, cb2[23].yyyy, r16.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      mul r16.yzw, r16.yyzw, cb2[18].xxyz
    else 
      mov r16.yzw, cb2[18].xxyz
    endif 
    ushr r4.w, cb2[53].x, l(16)
    ult r5.z, l(0), r4.w
    and r5.z, r10.x, r5.z
    if_nz r5.z
      iadd r4.w, r4.w, cb2[0].x
      imad r4.w, r4.w, l(15), l(-15)
      mad r5.z, |r3.y|, l(-0.200000), l(0.400000)
      lt r7.w, r3.y, l(0.000000)
      and r7.w, r3.x, r7.w
      movc r5.z, r7.w, -r5.z, r5.z
      mad r22.xyz, r12.xyzx, r5.zzzz, r11.xyzx
      mov r23.xyz, cb9[r4.w + 4].yzwy
      mov r23.w, cb9[r4.w + 5].x
      mov r22.w, l(1.000000)
      dp4 r23.x, r23.xyzw, r22.xyzw
      mov r24.xyz, cb9[r4.w + 5].yzwy
      mov r24.w, cb9[r4.w + 6].x
      dp4 r23.y, r24.xyzw, r22.xyzw
      mad r13.zw, r23.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r23.x, r13.z, cb9[r4.w + 9].w
      add r23.y, r13.w, cb9[r4.w + 10].x
      mul r13.zw, r23.xxxy, cb9[r4.w + 9].yyyz
      div r23.xy, cb9[r4.w + 3].yyyy, cb9[r4.w + 8].ywyy
      add r23.zw, -r23.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      ge r23.zw, r13.zzzw, r23.zzzw
      ge r23.xy, r23.xyxx, r13.zwzz
      or r23.xy, r23.xyxx, r23.zwzz
      or r5.z, r23.y, r23.x
      if_z r5.z
        mov r23.xyz, cb9[r4.w + 6].yzwy
        mov r23.w, cb9[r4.w + 7].x
        dp4 r5.z, r23.xyzw, r22.xyzw
        mov_sat r13.zw, r13.zzzw
        mad r22.x, r13.z, cb9[r4.w + 8].y, cb9[r4.w + 8].z
        mad r22.y, r13.w, cb9[r4.w + 8].w, cb9[r4.w + 9].x
        add r5.z, r5.z, cb9[r4.w + 10].y
        div r5.z, r5.z, cb9[r4.w + 10].z
        max r5.z, r5.z, l(0.00006104)
        and r7.w, l(0x0000ffff), cb9[r4.w + 1].w
        if_nz cb2[58].y
          mov r23.x, -r13.x
          utof r24.z, r7.w
          mov r23.y, r14.x
          mov r23.z, r13.x
          mov r8.w, l(0)
          mov r9.w, l(0)
          loop 
            ige r12.w, r9.w, l(8)
            breakc_nz r12.w
            dp2 r25.x, icb[r9.w + 0].yxyy, r23.xyxx
            dp2 r25.y, icb[r9.w + 0].yxyy, r23.yzyy
            mad r24.xy, r25.xyxx, cb9[r4.w + 3].yyyy, r22.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r24.xyzx, t9.xxxx, s13, r5.z
            mad r8.w, r12.w, l(0.125000), r8.w
            iadd r9.w, r9.w, l(1)
          endloop 
        else 
          utof r22.z, r7.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r22.xyzx, t9.xxxx, s13, r5.z
        endif 
        mul r4.w, r8.w, r8.w
        mul r4.w, r8.w, r4.w
      else 
        mov r4.w, l(1.000000)
      endif 
      mul r6.w, r4.w, r6.w
    else 
      and r4.w, cb2[53].x, l(0x0000ffff)
      ult r5.z, l(0), r4.w
      not r7.w, r10.x
      and r5.z, r5.z, r7.w
      if_nz r5.z
        iadd r4.w, r4.w, cb2[0].x
        imad r4.w, r4.w, l(15), l(-15)
        mad r5.z, |r3.y|, l(-0.200000), l(0.400000)
        lt r7.w, r3.y, l(0.000000)
        and r7.w, r3.x, r7.w
        movc r5.z, r7.w, -r5.z, r5.z
        mad r22.xyz, r12.xyzx, r5.zzzz, r11.xyzx
        mov r23.xyz, cb9[r4.w + 4].yzwy
        mov r23.w, cb9[r4.w + 5].x
        mov r22.w, l(1.000000)
        dp4 r23.x, r23.xyzw, r22.xyzw
        mov r24.xyz, cb9[r4.w + 5].yzwy
        mov r24.w, cb9[r4.w + 6].x
        dp4 r23.y, r24.xyzw, r22.xyzw
        mad r13.zw, r23.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r23.x, r13.z, cb9[r4.w + 9].w
        add r23.y, r13.w, cb9[r4.w + 10].x
        mul r13.zw, r23.xxxy, cb9[r4.w + 9].yyyz
        div r23.xy, cb9[r4.w + 3].yyyy, cb9[r4.w + 8].ywyy
        add r23.zw, -r23.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
        ge r23.zw, r13.zzzw, r23.zzzw
        ge r23.xy, r23.xyxx, r13.zwzz
        or r23.xy, r23.xyxx, r23.zwzz
        or r5.z, r23.y, r23.x
        if_z r5.z
          mov r23.xyz, cb9[r4.w + 6].yzwy
          mov r23.w, cb9[r4.w + 7].x
          dp4 r5.z, r23.xyzw, r22.xyzw
          mov_sat r13.zw, r13.zzzw
          mad r22.x, r13.z, cb9[r4.w + 8].y, cb9[r4.w + 8].z
          mad r22.y, r13.w, cb9[r4.w + 8].w, cb9[r4.w + 9].x
          add r5.z, r5.z, cb9[r4.w + 10].y
          div r5.z, r5.z, cb9[r4.w + 10].z
          max r5.z, r5.z, l(0.00006104)
          and r7.w, l(0x0000ffff), cb9[r4.w + 1].w
          if_nz cb2[58].y
            mov r23.x, -r13.x
            utof r24.z, r7.w
            mov r23.y, r14.x
            mov r23.z, r13.x
            mov r8.w, l(0)
            mov r9.w, l(0)
            loop 
              ige r12.w, r9.w, l(8)
              breakc_nz r12.w
              dp2 r25.x, icb[r9.w + 0].yxyy, r23.xyxx
              dp2 r25.y, icb[r9.w + 0].yxyy, r23.yzyy
              mad r24.xy, r25.xyxx, cb9[r4.w + 3].yyyy, r22.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r24.xyzx, t9.xxxx, s13, r5.z
              mad r8.w, r12.w, l(0.125000), r8.w
              iadd r9.w, r9.w, l(1)
            endloop 
          else 
            utof r22.z, r7.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r22.xyzx, t9.xxxx, s13, r5.z
          endif 
          mul r4.w, r8.w, r8.w
          mul r4.w, r8.w, r4.w
        else 
          mov r4.w, l(1.000000)
        endif 
        mul r6.w, r4.w, r6.w
      endif 
    endif 
    mad r4.w, -r2.x, l(0.500000), l(1.000000)
    mad r4.w, -r3.w, r4.w, l(1.000000)
    mul r4.w, r4.w, r4.w
    mad r4.w, -r4.w, l(0.620000), l(0.620000)
    add r4.w, -r3.w, r4.w
    mad r3.w, r1.w, r4.w, r3.w
    mul r3.w, r6.w, r3.w
    mul r22.xyz, r16.yzwy, r3.wwww
    lt r3.y, l(0.000000), r3.y
    mad r22.xyz, r15.yzwy, r2.wwww, r22.xyzx
    mad r15.yzw, -r11.xxyz, r0.wwww, cb2[17].xxyz
    dp3 r0.w, r15.yzwy, r15.yzwy
    rsq r0.w, r0.w
    mul r15.yzw, r0.wwww, r15.yyzw
    dp3 r0.w, r15.yzwy, r10.yzwy
    dp3 r2.w, r12.xyzx, r15.yzwy
    mad r4.w, |r2.w|, r1.z, -|r2.w|
    mad r2.w, |r2.w|, r4.w, l(1.000000)
    mad r3.z, r3.z, r0.y, r2.y
    mul r2.w, r2.w, r2.w
    mul r2.w, r3.z, r2.w
    rcp r2.w, r2.w
    mul r2.z, r2.z, r2.w
    mul r2.z, r2.z, r6.w
    mul r2.z, r2.z, l(0.250000)
    mad r23.yzw, r2.zzzz, r16.yyzw, r21.xxyz
    add_sat r0.w, -r0.w, l(1.000000)
    mul r2.w, r0.w, r0.w
    mul r2.w, r2.w, r2.w
    mul r0.w, r0.w, r2.w
    mul r0.w, r0.w, r2.z
    mad r15.yzw, r0.wwww, r16.yyzw, r20.xxyz
    mad r16.yzw, r3.wwww, r16.yyzw, r19.zzxy
    and r24.xyz, r3.xxxx, r16.zwyz
    mov r22.w, r19.z
    mov r18.w, r24.z
    movc r18.xyzw, r3.yyyy, r22.xyzw, r18.xyzw
    mov r19.zw, r15.yyyz
    mov r24.zw, r20.xxxy
    movc r22.xyzw, r3.yyyy, r19.xyzw, r24.xyzw
    mov r23.x, r15.w
    mov r21.w, r20.z
    movc r21.xyzw, r3.yyyy, r23.yzwx, r21.xyzw
    mov r19.z, r18.w
    mov r19.xy, r22.xyxx
    mov r20.xy, r22.zwzz
    mov r20.z, r21.w
  endif 
endif 
ftou r0.w, cb1[44].x
iadd r0.w, r0.w, l(7)
ushr r0.w, r0.w, l(3)
imad r0.x, r0.z, r0.w, r0.x
ishl r0.x, r0.x, l(5)
not r0.z, r10.x
mov r22.x, -r13.x
mad r0.w, -r2.x, l(0.500000), l(1.000000)
mov r23.z, l(1.000000)
mov r24.w, l(1.000000)
mov r25.w, l(1.000000)
mov r26.w, l(1.000000)
mov r22.z, r13.x
mov r27.w, l(1.000000)
mov r22.yw, r14.xxxx
mov r13.y, r22.w
mov r14.y, r22.x
mov r14.z, r13.x
mov r28.x, r14.x
mov r28.y, r22.x
mov r28.z, r13.x
mov r29.w, l(1.000000)
mov r30.x, r14.x
mov r30.y, r22.x
mov r30.z, r13.x
mov r31.x, r14.x
mov r31.y, r22.x
mov r31.z, r13.x
mov r2.xzw, r18.xxyz
mov r32.xyz, r19.zxyz
mov r33.xyz, r20.xyzx
mov r3.yzw, r21.xxyz
mov r4.w, cb2[58].y
mov r5.z, l(0)
loop 
  uge r6.w, r5.z, cb2[0].x
  breakc_nz r6.w
  ushr r6.w, r5.z, l(5)
  iadd r6.w, r0.x, r6.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.w, r6.w, l(0), t26.xxxx
  mov r15.yzw, r2.xxzw
  mov r16.yzw, r32.xxyz
  mov r34.xyz, r33.xyzx
  mov r35.xyz, r3.yzwy
  mov r7.w, r4.w
  mov r8.w, r6.w
  loop 
    breakc_z r8.w
    firstbit_lo r9.w, r8.w
    ishl r12.w, l(1), r9.w
    not r12.w, r12.w
    and r8.w, r8.w, r12.w
    iadd r9.w, r5.z, r9.w
    imul null, r9.w, r9.w, l(15)
    ubfe r12.w, l(3), l(24), cb9[r9.w + 1].w
    ieq r13.z, r12.w, l(2)
    if_nz r13.z
      ubfe r13.z, l(3), l(27), cb9[r9.w + 1].w
      add r36.xy, -r11.xyxx, cb9[r9.w + 3].zwzz
      add r36.z, -r11.z, cb9[r9.w + 4].x
      dp3 r13.w, r36.xyzx, r36.xyzx
      rsq r13.w, r13.w
      mul r37.xyz, r13.wwww, r36.xyzx
      mul r14.w, r1.z, cb9[r9.w + 1].z
      mul r14.w, r14.w, l(0.250000)
      dp3 r17.w, r12.xyzx, r37.xyzx
      mov_sat r18.w, r17.w
      movc r19.w, r3.x, |r17.w|, r18.w
      lt r20.w, l(0.000000), r19.w
      if_nz r20.w
        mov r37.xyz, cb9[r9.w + 7].yzwy
        mov r37.w, cb9[r9.w + 8].x
        dp4 r20.w, r37.xyzw, r11.xyzw
        lt r21.w, r20.w, l(1.000000)
        if_nz r21.w
          mov r38.xyz, l(1.000000,1.000000,1.000000,0)
          mov r21.w, l(0)
        else 
          add r39.xyz, -r11.xyzx, cb9[r9.w + 0].xyzx
          mul r23.w, cb9[r9.w + 3].x, cb9[r9.w + 3].x
          dp3 r28.w, r39.xyzx, r39.xyzx
          div r23.w, r23.w, r28.w
          min r23.w, r23.w, l(1.000000)
          mad_sat r39.xy, r20.wwww, cb9[r9.w + 2].xzxx, cb9[r9.w + 2].ywyy
          mul r39.zw, r39.xxxy, r39.xxxy
          mad r39.xy, r39.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r39.xy, r39.xyxx, r39.zwzz
          mul r23.w, r23.w, r39.x
          mul r23.w, r39.y, r23.w
          mov r39.xyz, cb9[r9.w + 4].yzwy
          mov r39.w, cb9[r9.w + 5].x
          dp4 r39.x, r39.xyzw, r11.xyzw
          mov r40.xyz, cb9[r9.w + 5].yzwy
          mov r40.w, cb9[r9.w + 6].x
          dp4 r39.y, r40.xyzw, r11.xyzw
          div r23.xy, r39.xyxx, r20.wwww
          lt r20.w, cb9[r9.w + 10].w, l(0.00048828)
          if_nz r20.w
            mad_sat r39.xy, |r23.xyxx|, cb9[r9.w + 12].xyxx, cb9[r9.w + 12].zwzz
            mul r39.zw, r39.xxxy, r39.xxxy
            mad r39.xy, r39.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r39.xy, r39.xyxx, r39.zwzz
            mul r20.w, r39.y, r39.x
          else 
            mul_sat r39.xyzw, |r23.yyxx|, cb9[r9.w + 11].xyzw
            log r39.xyzw, r39.xyzw
            mul r39.xyzw, r39.xyzw, cb9[r9.w + 12].zzzz
            exp r39.xyzw, r39.xyzw
            add r39.xy, r39.zwzz, r39.xyxx
            log r39.xy, r39.xyxx
            mul r39.xy, r39.xyxx, cb9[r9.w + 12].wwww
            exp r39.xy, r39.xyxx
            mul r28.w, r39.x, cb9[r9.w + 12].x
            mad r30.w, cb9[r9.w + 12].y, r39.y, l(-1.000000)
            mad r28.w, cb9[r9.w + 12].y, r39.y, -r28.w
            div_sat r28.w, r30.w, r28.w
            mul r30.w, r28.w, r28.w
            mad r28.w, r28.w, l(-2.000000), l(3.000000)
            mul r20.w, r28.w, r30.w
          endif 
          mul r21.w, r20.w, r23.w
          and r20.w, l(255), cb9[r9.w + 14].w
          if_nz r20.w
            dp3 r23.w, cb9[r9.w + 13].xyzx, r23.xyzx
            mov r39.x, cb9[r9.w + 13].w
            mov r39.yz, cb9[r9.w + 14].xxyx
            dp3 r23.x, r39.xyzx, r23.xyzx
            frc r39.xy, r23.wxww
            iadd r20.w, r20.w, l(-1)
            utof r39.z, r20.w
            sample_l_indexable(texture2darray)(float,float,float,float) r38.xyz, r39.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r38.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r39.x, cb9[r9.w + 0].w
        mov r39.yz, cb9[r9.w + 1].xxyx
        mul r23.xyw, r38.xyxz, r39.xyxz
        lt r20.w, l(0.000000), r21.w
        if_nz r20.w
          ine r13.z, r13.z, l(1)
          if_nz r13.z
            mad r13.z, |r17.w|, l(-0.200000), l(0.400000)
            lt r20.w, r17.w, l(0.000000)
            and r20.w, r3.x, r20.w
            movc r13.z, r20.w, -r13.z, r13.z
            mad r24.xyz, r12.xyzx, r13.zzzz, r11.xyzx
            mov r38.xyz, cb9[r9.w + 6].yzwy
            mov r38.w, cb9[r9.w + 7].x
            dp4 r13.z, r38.xyzw, r24.xyzw
            dp4 r20.w, r37.xyzw, r24.xyzw
            ge r28.w, r20.w, r13.z
            if_nz r28.w
              mov r37.xyz, cb9[r9.w + 4].yzwy
              mov r37.w, cb9[r9.w + 5].x
              dp4 r37.x, r37.xyzw, r24.xyzw
              mov r38.xyz, cb9[r9.w + 5].yzwy
              mov r38.w, cb9[r9.w + 6].x
              dp4 r37.y, r38.xyzw, r24.xyzw
              div r24.xy, r37.xyxx, r20.wwww
              mad_sat r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r37.x, r24.x, cb9[r9.w + 8].y, cb9[r9.w + 8].z
              mad r37.y, r24.y, cb9[r9.w + 8].w, cb9[r9.w + 9].x
              div r13.z, r13.z, r20.w
              max r13.z, r13.z, l(0.00006104)
              and r20.w, l(0x0000ffff), cb9[r9.w + 1].w
              if_nz r7.w
                utof r24.z, r20.w
                mov r28.w, l(0)
                mov r30.w, l(0)
                loop 
                  ige r31.w, r30.w, l(8)
                  breakc_nz r31.w
                  dp2 r38.x, icb[r30.w + 0].yxyy, r22.xyxx
                  dp2 r38.y, icb[r30.w + 0].yxyy, r22.yzyy
                  mad r24.xy, r38.xyxx, cb9[r9.w + 3].yyyy, r37.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r13.z
                  mad r28.w, r24.x, l(0.125000), r28.w
                  iadd r30.w, r30.w, l(1)
                endloop 
              else 
                utof r37.z, r20.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r28.w, r37.xyzx, t9.xxxx, s13, r13.z
              endif 
              mul r13.z, r28.w, r28.w
              mul r13.z, r28.w, r13.z
            else 
              mov r13.z, l(1.000000)
            endif 
          else 
            mov r13.z, l(1.000000)
          endif 
          mul r13.z, r13.z, r21.w
          lt r20.w, l(0.000000), r13.z
          if_nz r20.w
            ubfe r20.w, l(4), l(16), cb9[r9.w + 1].w
            ult r21.w, l(0), r20.w
            and r21.w, r10.x, r21.w
            if_nz r21.w
              iadd r20.w, r20.w, cb2[0].x
              imad r20.w, r20.w, l(15), l(-15)
              mad r21.w, |r17.w|, l(-0.200000), l(0.400000)
              lt r24.x, r17.w, l(0.000000)
              and r24.x, r3.x, r24.x
              movc r21.w, r24.x, -r21.w, r21.w
              mad r25.xyz, r12.xyzx, r21.wwww, r11.xyzx
              mov r37.xyz, cb9[r20.w + 6].yzwy
              mov r37.w, cb9[r20.w + 7].x
              dp4 r21.w, r37.xyzw, r25.xyzw
              mov r37.xyz, cb9[r20.w + 7].yzwy
              mov r37.w, cb9[r20.w + 8].x
              dp4 r24.x, r37.xyzw, r25.xyzw
              lt r24.y, r24.x, r21.w
              if_z r24.y
                mov r37.xyz, cb9[r20.w + 4].yzwy
                mov r37.w, cb9[r20.w + 5].x
                dp4 r37.x, r37.xyzw, r25.xyzw
                mov r38.xyz, cb9[r20.w + 5].yzwy
                mov r38.w, cb9[r20.w + 6].x
                dp4 r37.y, r38.xyzw, r25.xyzw
                div r25.xy, r37.xyxx, r24.xxxx
                mad r25.xy, r25.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r37.x, r25.x, cb9[r20.w + 9].w
                add r37.y, r25.y, cb9[r20.w + 10].x
                mul r25.xy, r37.xyxx, cb9[r20.w + 9].yzyy
                div r37.xy, cb9[r20.w + 3].yyyy, cb9[r20.w + 8].ywyy
                add r37.zw, -r37.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r37.zw, r25.xxxy, r37.zzzw
                ge r37.xy, r37.xyxx, r25.xyxx
                or r37.xy, r37.xyxx, r37.zwzz
                or r24.z, r37.y, r37.x
                if_z r24.z
                  mov_sat r25.xy, r25.xyxx
                  mad r37.x, r25.x, cb9[r20.w + 8].y, cb9[r20.w + 8].z
                  mad r37.y, r25.y, cb9[r20.w + 8].w, cb9[r20.w + 9].x
                  mul r25.x, r24.x, cb9[r20.w + 10].z
                  mad r21.w, cb9[r20.w + 10].y, r24.x, r21.w
                  div r21.w, r21.w, r25.x
                endif 
              else 
                mov r24.z, l(-1)
              endif 
              or r24.x, r24.y, r24.z
              if_z r24.x
                max r21.w, r21.w, l(0.00006104)
                and r24.x, l(0x0000ffff), cb9[r20.w + 1].w
                if_nz r7.w
                  utof r25.z, r24.x
                  mov r24.yz, l(0,0,0,0)
                  loop 
                    ige r30.w, r24.z, l(8)
                    breakc_nz r30.w
                    dp2 r38.x, icb[r24.z + 0].yxyy, r22.xwxx
                    dp2 r38.y, icb[r24.z + 0].xyxx, r13.xyxx
                    mad r25.xy, r38.xyxx, cb9[r20.w + 3].yyyy, r37.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r25.xyzx, t9.xxxx, s13, r21.w
                    mad r24.y, r25.x, l(0.125000), r24.y
                    iadd r24.z, r24.z, l(1)
                  endloop 
                else 
                  utof r37.z, r24.x
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.y, r37.xyzx, t9.xxxx, s13, r21.w
                endif 
                mul r20.w, r24.y, r24.y
                mul r20.w, r24.y, r20.w
              else 
                mov r20.w, l(1.000000)
              endif 
              mul r13.z, r13.z, r20.w
            else 
              ubfe r20.w, l(4), l(20), cb9[r9.w + 1].w
              ult r21.w, l(0), r20.w
              and r21.w, r0.z, r21.w
              if_nz r21.w
                iadd r20.w, r20.w, cb2[0].x
                imad r20.w, r20.w, l(15), l(-15)
                mad r21.w, |r17.w|, l(-0.200000), l(0.400000)
                lt r24.x, r17.w, l(0.000000)
                and r24.x, r3.x, r24.x
                movc r21.w, r24.x, -r21.w, r21.w
                mad r26.xyz, r12.xyzx, r21.wwww, r11.xyzx
                mov r37.xyz, cb9[r20.w + 6].yzwy
                mov r37.w, cb9[r20.w + 7].x
                dp4 r21.w, r37.xyzw, r26.xyzw
                mov r37.xyz, cb9[r20.w + 7].yzwy
                mov r37.w, cb9[r20.w + 8].x
                dp4 r24.x, r37.xyzw, r26.xyzw
                lt r24.z, r24.x, r21.w
                if_z r24.z
                  mov r37.xyz, cb9[r20.w + 4].yzwy
                  mov r37.w, cb9[r20.w + 5].x
                  dp4 r25.x, r37.xyzw, r26.xyzw
                  mov r37.xyz, cb9[r20.w + 5].yzwy
                  mov r37.w, cb9[r20.w + 6].x
                  dp4 r25.y, r37.xyzw, r26.xyzw
                  div r25.xy, r25.xyxx, r24.xxxx
                  mad r25.xy, r25.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r26.x, r25.x, cb9[r20.w + 9].w
                  add r26.y, r25.y, cb9[r20.w + 10].x
                  mul r25.xy, r26.xyxx, cb9[r20.w + 9].yzyy
                  div r26.xy, cb9[r20.w + 3].yyyy, cb9[r20.w + 8].ywyy
                  add r37.xy, -r26.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r37.xy, r25.xyxx, r37.xyxx
                  ge r26.xy, r26.xyxx, r25.xyxx
                  or r26.xy, r26.xyxx, r37.xyxx
                  or r25.z, r26.y, r26.x
                  if_z r25.z
                    mov_sat r25.xy, r25.xyxx
                    mad r26.x, r25.x, cb9[r20.w + 8].y, cb9[r20.w + 8].z
                    mad r26.y, r25.y, cb9[r20.w + 8].w, cb9[r20.w + 9].x
                    mul r25.x, r24.x, cb9[r20.w + 10].z
                    mad r21.w, cb9[r20.w + 10].y, r24.x, r21.w
                    div r21.w, r21.w, r25.x
                  endif 
                else 
                  mov r25.z, l(-1)
                endif 
                or r24.x, r24.z, r25.z
                if_z r24.x
                  max r21.w, r21.w, l(0.00006104)
                  and r24.x, l(0x0000ffff), cb9[r20.w + 1].w
                  if_nz r7.w
                    utof r25.z, r24.x
                    mov r24.z, l(0)
                    mov r30.w, l(0)
                    loop 
                      ige r31.w, r30.w, l(8)
                      breakc_nz r31.w
                      dp2 r37.x, icb[r30.w + 0].xyxx, r28.xyxx
                      dp2 r37.y, icb[r30.w + 0].yxyy, r28.xzxx
                      mad r25.xy, r37.xyxx, cb9[r20.w + 3].yyyy, r26.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r25.xyzx, t9.xxxx, s13, r21.w
                      mad r24.z, r25.x, l(0.125000), r24.z
                      iadd r30.w, r30.w, l(1)
                    endloop 
                  else 
                    utof r26.z, r24.x
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.z, r26.xyzx, t9.xxxx, s13, r21.w
                  endif 
                  mul r20.w, r24.z, r24.z
                  mul r20.w, r24.z, r20.w
                else 
                  mov r20.w, l(1.000000)
                endif 
                mul r13.z, r13.z, r20.w
              endif 
            endif 
            mad r20.w, -r19.w, r0.w, l(1.000000)
            mul r20.w, r20.w, r20.w
            mad r20.w, -r20.w, l(0.620000), l(0.620000)
            add r20.w, -r19.w, r20.w
            mad r19.w, r1.w, r20.w, r19.w
            mul r19.w, r13.z, r19.w
            lt r17.w, l(0.000000), r17.w
            mad r25.xyz, r19.wwww, r23.xywx, r15.yzwy
            mad r26.xyz, r36.xyzx, r13.wwww, r10.yzwy
            dp3 r13.w, r26.xyzx, r26.xyzx
            rsq r13.w, r13.w
            mul r26.xyz, r13.wwww, r26.xyzx
            dp3 r13.w, r26.xyzx, r10.yzwy
            dp3 r20.w, r12.xyzx, r26.xyzx
            mad r21.w, |r20.w|, r1.z, -|r20.w|
            mad r20.w, |r20.w|, r21.w, l(1.000000)
            mad r21.w, r18.w, r0.y, r2.y
            mul r20.w, r20.w, r20.w
            mul r20.w, r21.w, r20.w
            rcp r20.w, r20.w
            mul r14.w, r14.w, r18.w
            mul r14.w, r14.w, r20.w
            mul r13.z, r13.z, r14.w
            mad r26.xyz, r13.zzzz, r23.xywx, r35.xyzx
            add_sat r13.w, -r13.w, l(1.000000)
            mul r14.w, r13.w, r13.w
            mul r14.w, r14.w, r14.w
            mul r13.w, r13.w, r14.w
            mul r13.z, r13.w, r13.z
            mad r36.xyz, r13.zzzz, r23.xywx, r34.xyzx
            mad r23.xyw, r19.wwww, r23.xyxw, r16.yzyw
            movc r23.xyw, r3.xxxx, r23.xyxw, r16.yzyw
            movc r15.yzw, r17.wwww, r25.xxyz, r15.yyzw
            movc r16.yzw, r17.wwww, r16.yyzw, r23.xxyw
            movc r34.xyz, r17.wwww, r36.xyzx, r34.xyzx
            movc r35.xyz, r17.wwww, r26.xyzx, r35.xyzx
          endif 
        endif 
      endif 
    else 
      ieq r12.w, r12.w, l(4)
      if_nz r12.w
        ubfe r12.w, l(3), l(27), cb9[r9.w + 1].w
        mul r13.z, r1.z, cb9[r9.w + 1].z
        mul r13.z, r13.z, l(0.250000)
        lt r13.w, l(0.000000), cb9[r9.w + 6].y
        mov r25.xy, cb9[r9.w + 5].zwzz
        mov r25.z, cb9[r9.w + 6].x
        mad r23.xyw, -r25.xyxz, l(0.500000, 0.500000, 0.000000, 0.500000), cb9[r9.w + 0].xyxz
        add r26.xyz, -r11.xyzx, r23.xywx
        dp3 r14.w, r25.xyzx, r17.xyzx
        dp3 r17.w, r25.xyzx, r26.xyzx
        dp3 r18.w, r17.xyzx, r26.xyzx
        mad r19.w, -r14.w, r14.w, cb9[r9.w + 6].y
        mad r14.w, r14.w, r18.w, -r17.w
        div_sat r17.w, -r17.w, cb9[r9.w + 6].y
        div_sat r14.w, r14.w, r19.w
        div r18.w, r19.w, cb9[r9.w + 6].y
        mul r18.w, r18.w, l(10.000000)
        min r18.w, r18.w, l(1.000000)
        add r14.w, -r17.w, r14.w
        mad r14.w, r18.w, r14.w, r17.w
        mad r26.xyz, r14.wwww, r25.xyzx, r23.xywx
        mad r23.xyw, r17.wwww, r25.xyxz, r23.xyxw
        movc r23.xyw, r13.wwww, r23.xyxw, cb9[r9.w + 0].xyxz
        movc r25.xyz, r13.wwww, r26.xyzx, cb9[r9.w + 0].xyzx
        add r25.xyz, -r11.xyzx, r25.xyzx
        add r23.xyw, -r11.xyxz, r23.xyxw
        dp3 r13.w, r25.xyzx, r25.xyzx
        rsq r13.w, r13.w
        mul r26.xyz, r13.wwww, r25.xyzx
        dp3 r14.w, r23.xywx, r23.xywx
        rsq r17.w, r14.w
        mul r23.xyw, r17.wwww, r23.xyxw
        dp3 r17.w, r12.xyzx, r23.xywx
        mov_sat r18.w, r17.w
        movc r18.w, r3.x, |r17.w|, r18.w
        lt r19.w, l(0.000000), r18.w
        if_nz r19.w
          sqrt r19.w, r14.w
          mul r20.w, cb9[r9.w + 3].x, cb9[r9.w + 3].x
          div r14.w, r20.w, r14.w
          min r14.w, r14.w, l(1.000000)
          mad_sat r23.xy, r19.wwww, cb9[r9.w + 2].xzxx, cb9[r9.w + 2].ywyy
          mul r36.xy, r23.xyxx, r23.xyxx
          mad r23.xy, r23.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r23.xy, r23.xyxx, r36.xyxx
          mul r14.w, r14.w, r23.x
          mul r14.w, r23.y, r14.w
          lt r19.w, l(0.000000), r14.w
          if_nz r19.w
            ine r12.w, r12.w, l(1)
            if_nz r12.w
              mad r12.w, |r17.w|, l(-0.200000), l(0.400000)
              lt r19.w, r17.w, l(0.000000)
              and r19.w, r3.x, r19.w
              movc r12.w, r19.w, -r12.w, r12.w
              mad r23.xyw, r12.xyxz, r12.wwww, r11.xyxz
              add r23.xyw, r23.xyxw, -cb9[r9.w + 4].yzyw
              max r12.w, |r23.w|, |r23.y|
              max r12.w, r12.w, |r23.x|
              div r12.w, cb9[r9.w + 5].x, r12.w
              add r12.w, r12.w, cb9[r9.w + 5].y
              dp3 r19.w, r23.xywx, r23.xywx
              rsq r19.w, r19.w
              max r12.w, r12.w, l(0.00006104)
              and r20.w, l(0x0000ffff), cb9[r9.w + 1].w
              utof r36.w, r20.w
              mov r20.w, l(0)
              mov r21.w, l(0)
              loop 
                ige r24.x, r21.w, l(8)
                breakc_nz r24.x
                dp2 r37.y, icb[r21.w + 0].xyxx, r14.xyxx
                dp2 r37.z, icb[r21.w + 0].yxyy, r14.xzxx
                mul r37.yz, r37.yyzy, cb9[r9.w + 3].yyyy
                mul r37.x, r16.x, r37.y
                mul r37.w, r15.x, r37.y
                mad r36.xyz, r23.xywx, r19.wwww, r37.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r24.x, r36.xyzw, t10.xxxx, s13, r12.w
                mad r20.w, r24.x, l(0.125000), r20.w
                iadd r21.w, r21.w, l(1)
              endloop 
            else 
              mov r20.w, l(1.000000)
            endif 
            mul r12.w, r14.w, r20.w
            lt r14.w, l(0.000000), r12.w
            if_nz r14.w
              ubfe r14.w, l(4), l(16), cb9[r9.w + 1].w
              ult r19.w, l(0), r14.w
              and r19.w, r10.x, r19.w
              if_nz r19.w
                iadd r14.w, r14.w, cb2[0].x
                imad r14.w, r14.w, l(15), l(-15)
                mad r19.w, |r17.w|, l(-0.200000), l(0.400000)
                lt r21.w, r17.w, l(0.000000)
                and r21.w, r3.x, r21.w
                movc r19.w, r21.w, -r19.w, r19.w
                mad r27.xyz, r12.xyzx, r19.wwww, r11.xyzx
                mov r36.xyz, cb9[r14.w + 6].yzwy
                mov r36.w, cb9[r14.w + 7].x
                dp4 r19.w, r36.xyzw, r27.xyzw
                mov r36.xyz, cb9[r14.w + 7].yzwy
                mov r36.w, cb9[r14.w + 8].x
                dp4 r21.w, r36.xyzw, r27.xyzw
                lt r23.x, r21.w, r19.w
                if_z r23.x
                  mov r36.xyz, cb9[r14.w + 4].yzwy
                  mov r36.w, cb9[r14.w + 5].x
                  dp4 r36.x, r36.xyzw, r27.xyzw
                  mov r37.xyz, cb9[r14.w + 5].yzwy
                  mov r37.w, cb9[r14.w + 6].x
                  dp4 r36.y, r37.xyzw, r27.xyzw
                  div r23.yw, r36.xxxy, r21.wwww
                  mad r23.yw, r23.yyyw, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
                  add r27.x, r23.y, cb9[r14.w + 9].w
                  add r27.y, r23.w, cb9[r14.w + 10].x
                  mul r23.yw, r27.xxxy, cb9[r14.w + 9].yyyz
                  div r27.xy, cb9[r14.w + 3].yyyy, cb9[r14.w + 8].ywyy
                  add r36.xy, -r27.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r36.xy, r23.ywyy, r36.xyxx
                  ge r27.xy, r27.xyxx, r23.ywyy
                  or r27.xy, r27.xyxx, r36.xyxx
                  or r24.x, r27.y, r27.x
                  if_z r24.x
                    mov_sat r23.yw, r23.yyyw
                    mad r27.x, r23.y, cb9[r14.w + 8].y, cb9[r14.w + 8].z
                    mad r27.y, r23.w, cb9[r14.w + 8].w, cb9[r14.w + 9].x
                    mul r23.y, r21.w, cb9[r14.w + 10].z
                    mad r19.w, cb9[r14.w + 10].y, r21.w, r19.w
                    div r19.w, r19.w, r23.y
                  endif 
                else 
                  mov r24.x, l(-1)
                endif 
                or r21.w, r23.x, r24.x
                if_z r21.w
                  max r19.w, r19.w, l(0.00006104)
                  and r21.w, l(0x0000ffff), cb9[r14.w + 1].w
                  if_nz r7.w
                    utof r36.z, r21.w
                    mov r23.xy, l(0,0,0,0)
                    loop 
                      ige r23.w, r23.y, l(8)
                      breakc_nz r23.w
                      dp2 r37.x, icb[r23.y + 0].xyxx, r30.xyxx
                      dp2 r37.y, icb[r23.y + 0].yxyy, r30.xzxx
                      mad r36.xy, r37.xyxx, cb9[r14.w + 3].yyyy, r27.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.w, r36.xyzx, t9.xxxx, s13, r19.w
                      mad r23.x, r23.w, l(0.125000), r23.x
                      iadd r23.y, r23.y, l(1)
                    endloop 
                  else 
                    utof r27.z, r21.w
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r27.xyzx, t9.xxxx, s13, r19.w
                  endif 
                  mul r14.w, r23.x, r23.x
                  mul r14.w, r23.x, r14.w
                else 
                  mov r14.w, l(1.000000)
                endif 
                mul r12.w, r12.w, r14.w
              else 
                ubfe r14.w, l(4), l(20), cb9[r9.w + 1].w
                ult r19.w, l(0), r14.w
                and r19.w, r0.z, r19.w
                if_nz r19.w
                  iadd r14.w, r14.w, cb2[0].x
                  imad r14.w, r14.w, l(15), l(-15)
                  mad r19.w, |r17.w|, l(-0.200000), l(0.400000)
                  lt r21.w, r17.w, l(0.000000)
                  and r21.w, r3.x, r21.w
                  movc r19.w, r21.w, -r19.w, r19.w
                  mad r29.xyz, r12.xyzx, r19.wwww, r11.xyzx
                  mov r36.xyz, cb9[r14.w + 6].yzwy
                  mov r36.w, cb9[r14.w + 7].x
                  dp4 r19.w, r36.xyzw, r29.xyzw
                  mov r36.xyz, cb9[r14.w + 7].yzwy
                  mov r36.w, cb9[r14.w + 8].x
                  dp4 r21.w, r36.xyzw, r29.xyzw
                  lt r23.y, r21.w, r19.w
                  if_z r23.y
                    mov r36.xyz, cb9[r14.w + 4].yzwy
                    mov r36.w, cb9[r14.w + 5].x
                    dp4 r27.x, r36.xyzw, r29.xyzw
                    mov r36.xyz, cb9[r14.w + 5].yzwy
                    mov r36.w, cb9[r14.w + 6].x
                    dp4 r27.y, r36.xyzw, r29.xyzw
                    div r27.xy, r27.xyxx, r21.wwww
                    mad r27.xy, r27.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                    add r29.x, r27.x, cb9[r14.w + 9].w
                    add r29.y, r27.y, cb9[r14.w + 10].x
                    mul r27.xy, r29.xyxx, cb9[r14.w + 9].yzyy
                    div r29.xy, cb9[r14.w + 3].yyyy, cb9[r14.w + 8].ywyy
                    add r36.xy, -r29.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r36.xy, r27.xyxx, r36.xyxx
                    ge r29.xy, r29.xyxx, r27.xyxx
                    or r29.xy, r29.xyxx, r36.xyxx
                    or r23.w, r29.y, r29.x
                    if_z r23.w
                      mov_sat r27.xy, r27.xyxx
                      mad r29.x, r27.x, cb9[r14.w + 8].y, cb9[r14.w + 8].z
                      mad r29.y, r27.y, cb9[r14.w + 8].w, cb9[r14.w + 9].x
                      mul r24.x, r21.w, cb9[r14.w + 10].z
                      mad r19.w, cb9[r14.w + 10].y, r21.w, r19.w
                      div r19.w, r19.w, r24.x
                    endif 
                  else 
                    mov r23.w, l(-1)
                  endif 
                  or r21.w, r23.y, r23.w
                  if_z r21.w
                    max r19.w, r19.w, l(0.00006104)
                    and r21.w, l(0x0000ffff), cb9[r14.w + 1].w
                    if_nz r7.w
                      utof r27.z, r21.w
                      mov r23.yw, l(0,0,0,0)
                      loop 
                        ige r24.x, r23.w, l(8)
                        breakc_nz r24.x
                        dp2 r36.x, icb[r23.w + 0].xyxx, r31.xyxx
                        dp2 r36.y, icb[r23.w + 0].yxyy, r31.xzxx
                        mad r27.xy, r36.xyxx, cb9[r14.w + 3].yyyy, r29.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r27.xyzx, t9.xxxx, s13, r19.w
                        mad r23.y, r24.x, l(0.125000), r23.y
                        iadd r23.w, r23.w, l(1)
                      endloop 
                    else 
                      utof r29.z, r21.w
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.y, r29.xyzx, t9.xxxx, s13, r19.w
                    endif 
                    mul r14.w, r23.y, r23.y
                    mul r14.w, r23.y, r14.w
                  else 
                    mov r14.w, l(1.000000)
                  endif 
                  mul r12.w, r12.w, r14.w
                endif 
              endif 
              mad r14.w, -r18.w, r0.w, l(1.000000)
              mul r14.w, r14.w, r14.w
              mad r14.w, -r14.w, l(0.620000), l(0.620000)
              add r14.w, -r18.w, r14.w
              mad r14.w, r1.w, r14.w, r18.w
              mul r14.w, r12.w, r14.w
              mov r27.x, cb9[r9.w + 0].w
              mov r27.yz, cb9[r9.w + 1].xxyx
              lt r9.w, l(0.000000), r17.w
              mad r29.xyz, r14.wwww, r27.xyzx, r15.yzwy
              dp3_sat r17.w, r12.xyzx, r26.xyzx
              mad r25.xyz, r25.xyzx, r13.wwww, r10.yzwy
              dp3 r13.w, r25.xyzx, r25.xyzx
              rsq r13.w, r13.w
              mul r25.xyz, r13.wwww, r25.xyzx
              dp3 r13.w, r25.xyzx, r10.yzwy
              dp3 r18.w, r12.xyzx, r25.xyzx
              mad r19.w, |r18.w|, r1.z, -|r18.w|
              mad r18.w, |r18.w|, r19.w, l(1.000000)
              mad r19.w, r17.w, r0.y, r2.y
              mul r18.w, r18.w, r18.w
              mul r18.w, r19.w, r18.w
              rcp r18.w, r18.w
              mul r13.z, r13.z, r17.w
              mul r13.z, r13.z, r18.w
              mul r12.w, r12.w, r13.z
              mad r25.xyz, r12.wwww, r27.xyzx, r35.xyzx
              add_sat r13.z, -r13.w, l(1.000000)
              mul r13.w, r13.z, r13.z
              mul r13.w, r13.w, r13.w
              mul r13.z, r13.w, r13.z
              mul r12.w, r12.w, r13.z
              mad r26.xyz, r12.wwww, r27.xyzx, r34.xyzx
              mad r27.xyz, r14.wwww, r27.xyzx, r16.yzwy
              movc r27.xyz, r3.xxxx, r27.xyzx, r16.yzwy
              movc r15.yzw, r9.wwww, r29.xxyz, r15.yyzw
              movc r16.yzw, r9.wwww, r16.yyzw, r27.xxyz
              movc r34.xyz, r9.wwww, r26.xyzx, r34.xyzx
              movc r35.xyz, r9.wwww, r25.xyzx, r35.xyzx
            endif 
          endif 
        endif 
      endif 
    endif 
  endloop 
  mov r2.xzw, r15.yyzw
  mov r32.xyz, r16.yzwy
  mov r33.xyz, r34.xyzx
  mov r3.yzw, r35.xxyz
  iadd r5.z, r5.z, l(32)
endloop 
mad r0.xyz, r5.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r1.z, r0.y
mad r5.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r1.w, r1.z, r1.w
movc r5.xy, r1.wwww, r5.yzyy, l(-1.000000,0,0,0)
mad r6.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r6.x
ieq r1.w, r1.z, r1.w
movc r5.zw, r1.wwww, r6.yyyz, l(0,0,-1.000000,0)
mad r6.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r6.x
ieq r1.w, r1.z, r1.w
movc r6.xy, r1.wwww, r6.yzyy, l(-1.000000,0,0,0)
mad r7.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r7.x
ieq r1.z, r1.z, r1.w
movc r1.zw, r1.zzzz, r7.yyyz, l(0,0,-1.000000,0)
mov r7.xy, r5.xzxx
mov r7.z, r6.x
mov r7.w, r1.z
add r7.xyzw, -r0.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r1.z, r7.y, r7.x
add r1.z, r7.z, r1.z
add r1.z, r7.w, r1.z
mul r2.y, r5.w, r7.y
mad r2.y, r7.x, r5.y, r2.y
mad r2.y, r7.z, r6.y, r2.y
mad r1.w, r7.w, r1.w, r2.y
div r0.w, r1.w, r1.z
ge r1.z, l(0.000000), r1.z
movc r0.yz, r1.zzzz, l(0,0,0,0), r0.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.w, r1.w, r1.z
movc r0.xyz, r0.wwww, r0.xyzx, r0.xzyx
mad r0.x, -r0.z, l(0.500000), r0.x
add r5.y, r0.x, r0.z
mad r5.z, -r0.y, l(0.500000), r0.x
add r5.x, r0.y, r5.z
mul r0.xyz, r4.xyzx, r2.xzwx
mad r0.xyz, r32.xyzx, r5.xyzx, r0.xyzx
mul r6.xyz, r33.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r6.xyz, r3.yzwy, l(0.040000, 0.040000, 0.040000, 0.000000), r6.xyzx
add r0.xyz, r0.xyzx, r6.xyzx
add r6.xyz, -r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r6.xyz, r6.xyzx, r33.xyzx
mad r3.yzw, r3.yyzw, r5.xxyz, r6.xxyz
mad r2.xyz, r2.xzwx, r4.xyzx, r3.yzwy
movc r0.xyz, r3.xxxx, r0.xyzx, r2.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r11.xyzx, r11.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r11.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r11.z|
    mul r3.xy, r11.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r11.z|
    mul r2.w, r11.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r11.z, cb2[6].x
  mad r1.z, cb2[6].x, r11.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r11.xyzx, r11.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r11.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 1876 instruction slots used
