//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:05 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3584], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 44
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(24), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xz, r0.xxyx, l(4095, 0, 4095, 0)
imad r1.xy, r0.xzxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.yz, r1.xxyx
add r5.xy, r3.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r6.x, r3.x, l(0.984375)
mul r3.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r6.x, r3.x, r3.w
max r3.x, r3.x, l(0.00000001)
rcp r6.y, r3.x
and r3.xw, r0.wwww, r6.xxxy
mul r5.zw, r5.xxxy, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r7.xyzw, r5.zwzz, t28.xyzw, s4.x
mul r5.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r5.zw, r5.zzzw
add r8.xy, -r5.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r9.y, r8.x, r8.y
mul r9.xz, r5.zzwz, r8.xxyx
mul r9.w, r5.w, r5.z
dp4 r0.w, r6.xyzw, r9.xyzw
add r7.xyzw, -r3.wwww, r7.xyzw
min r5.z, |r7.w|, |r7.z|
min r5.z, r5.z, |r7.y|
min r5.z, r5.z, |r7.x|
max r5.w, |r7.w|, |r7.z|
max r5.w, r5.w, |r7.y|
max r5.w, r5.w, |r7.x|
eq r7.xyz, r5.zzzz, |r7.yzwy|
movc r5.z, r7.x, r6.y, r6.x
movc r5.z, r7.y, r6.z, r5.z
movc r5.z, r7.z, r6.w, r5.z
mul r6.x, r3.w, l(0.010000)
lt r5.w, r6.x, r5.w
movc r0.w, r5.w, r5.z, r0.w
mul r0.w, r0.w, r4.z
if_nz cb2[55].x
  mul r4.z, r0.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r4.zzzz
  ret 
else 
  movc r4.z, cb2[54].w, r0.w, l(1.000000)
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
add r1.zw, r5.xxxy, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r5.x, r1.z, cb1[12].x
mul r5.y, r1.w, cb1[13].y
mov r5.z, l(1.000000)
mul r5.xyz, r3.wwww, r5.xyzx
mul r11.xyz, r5.yyyy, cb1[17].xyzx
mad r5.xyw, r5.xxxx, cb1[16].xyxz, r11.xyxz
mad r5.xyz, r5.zzzz, cb1[18].xyzx, r5.xywx
mad r1.z, r2.w, l(3.000000), l(0.500000)
ftou r1.z, r1.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r11.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r11.z
mul r11.xy, r1.wwww, r2.xyxx
and r12.xyzw, r1.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.z, r12.w, r12.z
movc r12.z, r1.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r1.z, r0.w, l(-0.500000), l(-0.00146628)
add r1.z, r1.z, r2.z
mul_sat r2.y, r1.z, l(2.00982332)
dp3 r1.z, -r5.xyzx, -r5.xyzx
rsq r1.z, r1.z
mul r12.xyz, r1.zzzz, -r5.xyzx
dp2 r1.z, r3.yzyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r1.z
utof r1.zw, r1.yyyx
dp2 r1.z, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r15.x, r16.x, r1.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.z, -r12.xyzx, r11.xyzx
add r1.z, r1.z, r1.z
mad r17.xyz, r11.xyzx, -r1.zzzz, -r12.xyzx
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.w, r1.z
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r2.zw, r2.zzzw
ieq r2.zw, r1.xxxy, r2.zzzw
and r2.z, r2.w, r2.z
add r2.w, -r2.y, l(1.000000)
mul r3.y, r2.w, l(5.000000)
mad r3.z, r2.w, l(5.000000), l(-2.500000)
mul r3.z, r3.z, l(0.400000)
max r3.z, r3.z, l(0.000000)
mad r13.zw, -r2.wwww, l(0.000000, 0.000000, 10.000000, 5.000000), l(0.000000, 0.000000, 6.857410, 7.085000)
exp r3.w, r13.z
mul r3.w, r2.x, r3.w
mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 100.000000, 9.136810)
mul r6.w, r2.w, r3.y
mad r6.w, -r6.w, l(2.015905), r13.w
exp r6.w, r6.w
mul r6.w, r2.x, r6.w
mul r6.w, r6.w, l(9.708090)
max r3.w, r3.w, r6.w
max r3.w, r3.w, l(1.268160)
iadd r6.w, cb2[0].y, -cb2[58].x
ushr r0.y, r0.y, l(24)
uge r7.w, r0.y, r6.w
ult r8.w, r0.y, cb2[0].y
and r7.w, r7.w, r8.w
if_nz r7.w
  imul null, r7.w, r0.y, l(14)
  if_nz r2.z
    add r18.yzw, cb1[24].xxyz, cb10[r7.w + 0].xxyz
    mov r18.x, l(16)
    store_structured u2.xyzw, cb2[52].x, l(880), r18.xyzw
  endif 
  add r15.yzw, r5.xxyz, -cb10[r7.w + 0].xxyz
  and r8.w, l(0x0000ffff), cb10[r7.w + 7].z
  ubfe r9.w, l(6), l(25), cb10[r7.w + 7].z
  imul null, r10.w, r8.w, l(6)
  dp3 r12.w, cb11[r10.w + 0].xyzx, r15.yzwy
  add_sat r12.w, r12.w, cb11[r10.w + 0].w
  dp3 r13.z, cb11[r10.w + 1].xyzx, r15.yzwy
  add_sat r13.z, r13.z, cb11[r10.w + 1].w
  mul r12.w, r12.w, r13.z
  dp3 r13.z, cb11[r10.w + 2].xyzx, r15.yzwy
  add_sat r13.z, r13.z, cb11[r10.w + 2].w
  mul r12.w, r12.w, r13.z
  dp3 r13.z, cb11[r10.w + 3].xyzx, r15.yzwy
  add_sat r13.z, r13.z, cb11[r10.w + 3].w
  mul r12.w, r12.w, r13.z
  dp3 r13.z, cb11[r10.w + 4].xyzx, r15.yzwy
  add_sat r13.z, r13.z, cb11[r10.w + 4].w
  mul r12.w, r12.w, r13.z
  dp3 r13.z, cb11[r10.w + 5].xyzx, r15.yzwy
  add_sat r10.w, r13.z, cb11[r10.w + 5].w
  mul r18.x, r10.w, r12.w
  and r10.w, l(1), cb10[r7.w + 6].x
  mov r18.yz, l(0,0,1.000000,0)
  movc r13.zw, r10.wwww, r18.xxxy, r18.zzzx
  mov r18.x, l(1.000000)
  mov r10.w, cb10[r7.w + 6].x
  mov r19.xy, r13.zwzz
  mov r12.w, l(1)
  loop 
    ige r14.w, r12.w, r9.w
    breakc_nz r14.w
    iadd r14.w, r8.w, r12.w
    imul null, r14.w, r14.w, l(6)
    dp3 r16.y, cb11[r14.w + 0].xyzx, r15.yzwy
    add_sat r16.y, r16.y, cb11[r14.w + 0].w
    mul r16.y, r16.y, r19.x
    dp3 r16.z, cb11[r14.w + 1].xyzx, r15.yzwy
    add_sat r16.z, r16.z, cb11[r14.w + 1].w
    mul r16.y, r16.z, r16.y
    dp3 r16.z, cb11[r14.w + 2].xyzx, r15.yzwy
    add_sat r16.z, r16.z, cb11[r14.w + 2].w
    mul r16.y, r16.z, r16.y
    dp3 r16.z, cb11[r14.w + 3].xyzx, r15.yzwy
    add_sat r16.z, r16.z, cb11[r14.w + 3].w
    mul r16.y, r16.z, r16.y
    dp3 r16.z, cb11[r14.w + 4].xyzx, r15.yzwy
    add_sat r16.z, r16.z, cb11[r14.w + 4].w
    mul r16.y, r16.z, r16.y
    dp3 r16.z, cb11[r14.w + 5].xyzx, r15.yzwy
    add_sat r14.w, r16.z, cb11[r14.w + 5].w
    mul r19.x, r14.w, r16.y
    ushr r16.z, r10.w, l(2)
    ubfe r16.w, l(1), l(2), r10.w
    and r18.z, r16.z, l(2)
    max r18.w, r19.x, r19.y
    mad r14.w, -r16.y, r14.w, l(1.000000)
    mul r14.w, r14.w, r19.y
    movc r18.y, r18.z, r14.w, r18.w
    movc r19.xy, r16.wwww, r19.xyxx, r18.xyxx
    iadd r12.w, r12.w, l(1)
    mov r10.w, r16.z
  endloop 
  mov_sat r19.y, r19.y
  mul r8.w, r19.y, cb10[r7.w + 6].y
  lt r9.w, l(0.000000), r8.w
  if_nz r9.w
    if_nz r2.z
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r9.w, cb2[52].x, l(880), u2.xxxx
      or r9.w, r9.w, l(32)
      store_structured u2.x, cb2[52].x, l(880), r9.w
      store_structured u2.x, cb2[52].x, l(896), r8.w
    endif 
    mul r9.w, r8.w, cb10[r7.w + 7].y
    mov r18.x, cb10[r7.w + 7].w
    mov r18.yz, cb10[r7.w + 8].xxyx
    dp3 r10.w, r17.xyzx, r18.xyzx
    dp3 r12.w, r15.yzwy, r18.xyzx
    add r12.w, r12.w, -cb10[r7.w + 8].z
    ge r13.z, r12.w, l(0.000000)
    max r12.w, r3.z, |r12.w|
    movc r12.w, r13.z, r12.w, -r12.w
    max r10.w, -r10.w, l(0.00000010)
    div r10.w, r12.w, r10.w
    min r10.w, |r10.w|, l(131072.000000)
    mov r18.x, cb10[r7.w + 8].w
    mov r18.yz, cb10[r7.w + 9].xxyx
    dp3 r12.w, r17.xyzx, r18.xyzx
    dp3 r13.z, r15.yzwy, r18.xyzx
    add r13.z, r13.z, -cb10[r7.w + 9].z
    ge r13.w, r13.z, l(0.000000)
    max r13.z, r3.z, |r13.z|
    movc r13.z, r13.w, r13.z, -r13.z
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.z, r12.w
    min r10.w, r10.w, |r12.w|
    mov r18.x, cb10[r7.w + 9].w
    mov r18.yz, cb10[r7.w + 10].xxyx
    dp3 r12.w, r17.xyzx, r18.xyzx
    dp3 r13.z, r15.yzwy, r18.xyzx
    add r13.z, r13.z, -cb10[r7.w + 10].z
    ge r13.w, r13.z, l(0.000000)
    max r13.z, r3.z, |r13.z|
    movc r13.z, r13.w, r13.z, -r13.z
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.z, r12.w
    min r10.w, r10.w, |r12.w|
    mov r18.x, cb10[r7.w + 10].w
    mov r18.yz, cb10[r7.w + 11].xxyx
    dp3 r12.w, r17.xyzx, r18.xyzx
    dp3 r13.z, r15.yzwy, r18.xyzx
    add r13.z, r13.z, -cb10[r7.w + 11].z
    ge r13.w, r13.z, l(0.000000)
    max r13.z, r3.z, |r13.z|
    movc r13.z, r13.w, r13.z, -r13.z
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.z, r12.w
    min r10.w, r10.w, |r12.w|
    mov r18.x, cb10[r7.w + 11].w
    mov r18.yz, cb10[r7.w + 12].xxyx
    dp3 r12.w, r17.xyzx, r18.xyzx
    dp3 r13.z, r15.yzwy, r18.xyzx
    add r13.z, r13.z, -cb10[r7.w + 12].z
    ge r13.w, r13.z, l(0.000000)
    max r13.z, r3.z, |r13.z|
    movc r13.z, r13.w, r13.z, -r13.z
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.z, r12.w
    min r10.w, r10.w, |r12.w|
    mov r18.x, cb10[r7.w + 12].w
    mov r18.yz, cb10[r7.w + 13].xxyx
    dp3 r12.w, r17.xyzx, r18.xyzx
    dp3 r13.z, r15.yzwy, r18.xyzx
    add r13.z, r13.z, -cb10[r7.w + 13].z
    ge r13.w, r13.z, l(0.000000)
    max r13.z, r3.z, |r13.z|
    movc r13.z, r13.w, r13.z, -r13.z
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.z, r12.w
    min r10.w, r10.w, |r12.w|
    add r18.x, r15.y, cb10[r7.w + 3].w
    add r18.yz, r15.zzwz, cb10[r7.w + 4].xxyx
    mad r16.yzw, r17.xxyz, r10.wwww, r18.xxyz
    dp3 r12.w, r16.yzwy, r16.yzwy
    sqrt r12.w, r12.w
    div r10.w, r10.w, r12.w
    add r10.w, r10.w, r10.w
    sqrt r10.w, r10.w
    mad r10.w, r2.w, l(5.000000), r10.w
    add r10.w, r10.w, l(-0.844800)
    mov r18.x, cb10[r7.w + 0].w
    mov r18.y, cb10[r7.w + 1].z
    mov r18.z, cb10[r7.w + 2].y
    dp3 r19.x, r16.yzwy, r18.xyzx
    mov r20.xy, cb10[r7.w + 1].xwxx
    mov r20.z, cb10[r7.w + 2].z
    dp3 r19.y, r16.yzwy, r20.xyzx
    mov r21.x, cb10[r7.w + 1].y
    mov r21.yz, cb10[r7.w + 2].xxwx
    dp3 r19.z, r16.yzwy, r21.xyzx
    ubfe r12.w, l(9), l(16), cb10[r7.w + 7].z
    utof r19.w, r12.w
    sample_l_indexable(texturecubearray)(float,float,float,float) r16.yzw, r19.xyzw, t8.wxyz, s2, r10.w
    and r22.xyz, r16.yzwy, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r22.xyz, r22.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r10.w, r22.y, r22.x
    or r10.w, r22.z, r10.w
    movc r16.yzw, r10.wwww, l(0,1.000000,1.000000,0), r16.yyzw
    dp3 r22.x, r15.yzwy, r18.xyzx
    dp3 r22.y, r15.yzwy, r20.xyzx
    dp3 r22.z, r15.yzwy, r21.xyzx
    mad_sat r15.yzw, r22.xxyz, cb10[r7.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    mul r22.xy, r15.yzyy, cb10[r7.w + 4].zwzz
    mul r22.z, r15.w, cb10[r7.w + 5].x
    add r15.yzw, r22.xxyz, cb10[r7.w + 5].yyzw
    dp3 r19.x, r11.xyzx, r18.xyzx
    dp3 r19.y, r11.xyzx, r20.xyzx
    dp3 r19.z, r11.xyzx, r21.xyzx
    lt r18.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r19.xyzx
    movc r20.z, r18.x, l(0), l(0.500000)
    mov r20.xy, l(0,0,0,0)
    add r20.xyz, r15.yzwy, r20.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
    mul r21.xyz, r19.xyzx, r19.xyzx
    mul r21.xyz, r9.wwww, r21.xyzx
    movc r22.z, r18.y, l(0), l(0.500000)
    mov r22.xy, l(0,0,0,0)
    add r18.xyw, r15.yzyw, r22.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyw, r18.xywx, t18.xywz, s4, l(0.000000)
    mul r18.xyw, r21.yyyy, r18.xyxw
    mad r18.xyw, r20.xyxz, r21.xxxx, r18.xyxw
    movc r20.z, r18.z, l(0), l(0.500000)
    mov r20.xy, l(0,0,0,0)
    add r15.yzw, r15.yyzw, r20.xxyz
    sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t19.wxyz, s4, l(0.000000)
    mad r15.yzw, r15.yyzw, r21.zzzz, r18.xxyw
    sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r19.xyzw, t8.xyzw, s2, l(6.000000)
    and r19.xyz, r18.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r19.xyz, r19.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r7.w, r19.y, r19.x
    or r7.w, r19.z, r7.w
    movc r18.xyz, r7.wwww, l(1.000000,1.000000,0,0), r18.xyzx
    mul r15.yzw, r15.yyzw, r18.xxyz
    dp3 r7.w, r15.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r10.w, r3.w, r7.w
    mul r16.yzw, r9.wwww, r16.yyzw
    dp3 r9.w, r16.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r7.w, r3.w, r7.w, r9.w
    div r7.w, r10.w, r7.w
    mul r16.yzw, r7.wwww, r16.yyzw
    mov r7.w, l(257)
  else 
    mov r15.yzw, l(0,0,0,0)
    mov r16.yzw, l(0,0,0,0)
    mov r8.w, l(0)
    mov r7.w, l(1)
  endif 
else 
  mov r15.yzw, l(0,0,0,0)
  mov r16.yzw, l(0,0,0,0)
  mov r8.w, l(0)
  mov r7.w, l(0)
endif 
ult r6.w, r0.y, r6.w
if_nz r6.w
  imul null, r0.y, r0.y, l(14)
  if_nz r2.z
    and r6.w, r7.w, l(1)
    imad r6.w, r6.w, l(20), l(880)
    add r18.yzw, cb1[24].xxyz, cb10[r0.y + 0].xxyz
    mov r18.x, l(16)
    store_structured u2.xyzw, cb2[52].x, r6.w, r18.xyzw
  endif 
  iadd r6.w, r7.w, l(1)
  add r18.xyz, r5.xyzx, -cb10[r0.y + 0].xyzx
  and r9.w, l(0x0000ffff), cb10[r0.y + 7].z
  ubfe r10.w, l(6), l(25), cb10[r0.y + 7].z
  imul null, r12.w, r9.w, l(6)
  dp3 r13.z, cb11[r12.w + 0].xyzx, r18.xyzx
  add_sat r13.z, r13.z, cb11[r12.w + 0].w
  dp3 r13.w, cb11[r12.w + 1].xyzx, r18.xyzx
  add_sat r13.w, r13.w, cb11[r12.w + 1].w
  mul r13.z, r13.w, r13.z
  dp3 r13.w, cb11[r12.w + 2].xyzx, r18.xyzx
  add_sat r13.w, r13.w, cb11[r12.w + 2].w
  mul r13.z, r13.w, r13.z
  dp3 r13.w, cb11[r12.w + 3].xyzx, r18.xyzx
  add_sat r13.w, r13.w, cb11[r12.w + 3].w
  mul r13.z, r13.w, r13.z
  dp3 r13.w, cb11[r12.w + 4].xyzx, r18.xyzx
  add_sat r13.w, r13.w, cb11[r12.w + 4].w
  mul r13.z, r13.w, r13.z
  dp3 r13.w, cb11[r12.w + 5].xyzx, r18.xyzx
  add_sat r12.w, r13.w, cb11[r12.w + 5].w
  mul r19.x, r12.w, r13.z
  and r12.w, l(1), cb10[r0.y + 6].x
  mov r19.yz, l(0,0,1.000000,0)
  movc r13.zw, r12.wwww, r19.xxxy, r19.zzzx
  mov r19.x, l(1.000000)
  mov r12.w, cb10[r0.y + 6].x
  mov r20.xy, r13.zwzz
  mov r14.w, l(1)
  loop 
    ige r18.w, r14.w, r10.w
    breakc_nz r18.w
    iadd r18.w, r9.w, r14.w
    imul null, r18.w, r18.w, l(6)
    dp3 r19.z, cb11[r18.w + 0].xyzx, r18.xyzx
    add_sat r19.z, r19.z, cb11[r18.w + 0].w
    mul r19.z, r19.z, r20.x
    dp3 r19.w, cb11[r18.w + 1].xyzx, r18.xyzx
    add_sat r19.w, r19.w, cb11[r18.w + 1].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 2].xyzx, r18.xyzx
    add_sat r19.w, r19.w, cb11[r18.w + 2].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 3].xyzx, r18.xyzx
    add_sat r19.w, r19.w, cb11[r18.w + 3].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 4].xyzx, r18.xyzx
    add_sat r19.w, r19.w, cb11[r18.w + 4].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 5].xyzx, r18.xyzx
    add_sat r18.w, r19.w, cb11[r18.w + 5].w
    mul r20.x, r18.w, r19.z
    ushr r19.w, r12.w, l(2)
    ubfe r20.z, l(1), l(2), r12.w
    and r20.w, r19.w, l(2)
    max r21.x, r20.x, r20.y
    mad r18.w, -r19.z, r18.w, l(1.000000)
    mul r18.w, r18.w, r20.y
    movc r19.y, r20.w, r18.w, r21.x
    movc r20.xy, r20.zzzz, r20.xyxx, r19.xyxx
    iadd r14.w, r14.w, l(1)
    mov r12.w, r19.w
  endloop 
  add_sat r9.w, -r8.w, r20.y
  mul r10.w, r9.w, cb10[r0.y + 6].y
  lt r12.w, l(0.000000), r10.w
  if_nz r12.w
    and r12.w, r6.w, l(3)
    iadd r13.z, r12.w, l(-1)
    ult r13.z, r13.z, l(32)
    and r13.z, r2.z, r13.z
    if_nz r13.z
      imad r13.zw, r12.wwww, l(0, 0, 20, 20), l(0, 0, 860, 876)
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r12.w, cb2[52].x, r13.z, u2.xxxx
      or r12.w, r12.w, l(32)
      store_structured u2.x, cb2[52].x, r13.z, r12.w
      store_structured u2.x, cb2[52].x, r13.w, r10.w
    endif 
    iadd r6.w, r7.w, l(257)
    mad r9.w, r9.w, cb10[r0.y + 6].y, r8.w
    mul r10.w, r10.w, cb10[r0.y + 7].y
    mov r19.x, cb10[r0.y + 7].w
    mov r19.yz, cb10[r0.y + 8].xxyx
    dp3 r12.w, r17.xyzx, r19.xyzx
    dp3 r13.z, r18.xyzx, r19.xyzx
    add r13.z, r13.z, -cb10[r0.y + 8].z
    ge r13.w, r13.z, l(0.000000)
    max r13.z, r3.z, |r13.z|
    movc r13.z, r13.w, r13.z, -r13.z
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.z, r12.w
    min r12.w, |r12.w|, l(131072.000000)
    mov r19.x, cb10[r0.y + 8].w
    mov r19.yz, cb10[r0.y + 9].xxyx
    dp3 r13.z, r17.xyzx, r19.xyzx
    dp3 r13.w, r18.xyzx, r19.xyzx
    add r13.w, r13.w, -cb10[r0.y + 9].z
    ge r14.w, r13.w, l(0.000000)
    max r13.w, r3.z, |r13.w|
    movc r13.w, r14.w, r13.w, -r13.w
    max r13.z, -r13.z, l(0.00000010)
    div r13.z, r13.w, r13.z
    min r12.w, r12.w, |r13.z|
    mov r19.x, cb10[r0.y + 9].w
    mov r19.yz, cb10[r0.y + 10].xxyx
    dp3 r13.z, r17.xyzx, r19.xyzx
    dp3 r13.w, r18.xyzx, r19.xyzx
    add r13.w, r13.w, -cb10[r0.y + 10].z
    ge r14.w, r13.w, l(0.000000)
    max r13.w, r3.z, |r13.w|
    movc r13.w, r14.w, r13.w, -r13.w
    max r13.z, -r13.z, l(0.00000010)
    div r13.z, r13.w, r13.z
    min r12.w, r12.w, |r13.z|
    mov r19.x, cb10[r0.y + 10].w
    mov r19.yz, cb10[r0.y + 11].xxyx
    dp3 r13.z, r17.xyzx, r19.xyzx
    dp3 r13.w, r18.xyzx, r19.xyzx
    add r13.w, r13.w, -cb10[r0.y + 11].z
    ge r14.w, r13.w, l(0.000000)
    max r13.w, r3.z, |r13.w|
    movc r13.w, r14.w, r13.w, -r13.w
    max r13.z, -r13.z, l(0.00000010)
    div r13.z, r13.w, r13.z
    min r12.w, r12.w, |r13.z|
    mov r19.x, cb10[r0.y + 11].w
    mov r19.yz, cb10[r0.y + 12].xxyx
    dp3 r13.z, r17.xyzx, r19.xyzx
    dp3 r13.w, r18.xyzx, r19.xyzx
    add r13.w, r13.w, -cb10[r0.y + 12].z
    ge r14.w, r13.w, l(0.000000)
    max r13.w, r3.z, |r13.w|
    movc r13.w, r14.w, r13.w, -r13.w
    max r13.z, -r13.z, l(0.00000010)
    div r13.z, r13.w, r13.z
    min r12.w, r12.w, |r13.z|
    mov r19.x, cb10[r0.y + 12].w
    mov r19.yz, cb10[r0.y + 13].xxyx
    dp3 r13.z, r17.xyzx, r19.xyzx
    dp3 r13.w, r18.xyzx, r19.xyzx
    add r13.w, r13.w, -cb10[r0.y + 13].z
    ge r14.w, r13.w, l(0.000000)
    max r3.z, r3.z, |r13.w|
    movc r3.z, r14.w, r3.z, -r3.z
    max r13.z, -r13.z, l(0.00000010)
    div r3.z, r3.z, r13.z
    min r3.z, |r3.z|, r12.w
    add r19.x, r18.x, cb10[r0.y + 3].w
    add r19.yz, r18.yyzy, cb10[r0.y + 4].xxyx
    mad r19.xyz, r17.xyzx, r3.zzzz, r19.xyzx
    dp3 r12.w, r19.xyzx, r19.xyzx
    sqrt r12.w, r12.w
    div r3.z, r3.z, r12.w
    add r3.z, r3.z, r3.z
    sqrt r3.z, r3.z
    mad r2.w, r2.w, l(5.000000), r3.z
    add r2.w, r2.w, l(-0.844800)
    mov r20.x, cb10[r0.y + 0].w
    mov r20.y, cb10[r0.y + 1].z
    mov r20.z, cb10[r0.y + 2].y
    dp3 r21.x, r19.xyzx, r20.xyzx
    mov r22.xy, cb10[r0.y + 1].xwxx
    mov r22.z, cb10[r0.y + 2].z
    dp3 r21.y, r19.xyzx, r22.xyzx
    mov r23.x, cb10[r0.y + 1].y
    mov r23.yz, cb10[r0.y + 2].xxwx
    dp3 r21.z, r19.xyzx, r23.xyzx
    ubfe r3.z, l(9), l(16), cb10[r0.y + 7].z
    utof r21.w, r3.z
    sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r21.xyzw, t8.xyzw, s2, r2.w
    and r24.xyz, r19.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r24.xyz, r24.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r2.w, r24.y, r24.x
    or r2.w, r24.z, r2.w
    movc r19.xyz, r2.wwww, l(1.000000,1.000000,0,0), r19.xyzx
    dp3 r24.x, r18.xyzx, r20.xyzx
    dp3 r24.y, r18.xyzx, r22.xyzx
    dp3 r24.z, r18.xyzx, r23.xyzx
    mad_sat r18.xyz, r24.xyzx, cb10[r0.y + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r24.xy, r18.xyxx, cb10[r0.y + 4].zwzz
    mul r24.z, r18.z, cb10[r0.y + 5].x
    add r18.xyz, r24.xyzx, cb10[r0.y + 5].yzwy
    dp3 r21.x, r11.xyzx, r20.xyzx
    dp3 r21.y, r11.xyzx, r22.xyzx
    dp3 r21.z, r11.xyzx, r23.xyzx
    lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r21.xyzx
    movc r22.z, r20.x, l(0), l(0.500000)
    mov r22.xy, l(0,0,0,0)
    add r22.xyz, r18.xyzx, r22.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t17.xyzw, s4, l(0.000000)
    mul r23.xyz, r21.xyzx, r21.xyzx
    mul r23.xyz, r10.wwww, r23.xyzx
    movc r24.z, r20.y, l(0), l(0.500000)
    mov r24.xy, l(0,0,0,0)
    add r20.xyw, r18.xyxz, r24.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r20.xyw, r20.xywx, t18.xywz, s4, l(0.000000)
    mul r20.xyw, r23.yyyy, r20.xyxw
    mad r20.xyw, r22.xyxz, r23.xxxx, r20.xyxw
    movc r22.z, r20.z, l(0), l(0.500000)
    mov r22.xy, l(0,0,0,0)
    add r18.xyz, r18.xyzx, r22.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t19.xyzw, s4, l(0.000000)
    mad r18.xyz, r18.xyzx, r23.zzzz, r20.xywx
    sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r21.xyzw, t8.xyzw, s2, l(6.000000)
    and r21.xyz, r20.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r21.xyz, r21.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r0.y, r21.y, r21.x
    or r0.y, r21.z, r0.y
    movc r20.xyz, r0.yyyy, l(1.000000,1.000000,0,0), r20.xyzx
    mul r21.xyz, r18.xyzx, r20.xyzx
    dp3 r0.y, r21.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r15.yzw, r18.xxyz, r20.xxyz, r15.yyzw
    mul r2.w, r0.y, r3.w
    mul r18.xyz, r10.wwww, r19.xyzx
    dp3 r3.z, r18.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r0.y, r3.w, r0.y, r3.z
    div r0.y, r2.w, r0.y
    mad r16.yzw, r18.xxyz, r0.yyyy, r16.yyzw
  else 
    mov r9.w, r8.w
  endif 
else 
  mov r9.w, r8.w
  mov r6.w, r7.w
endif 
ge r0.y, r8.w, l(1.000000)
bfi r2.w, l(8), l(0), r6.w, r7.w
movc r0.y, r0.y, r2.w, r6.w
max r2.w, r9.w, l(1.000000)
rcp r2.w, r2.w
mov_sat r9.w, r9.w
mul r18.xyz, r2.wwww, r15.yzwy
mul r16.yzw, r2.wwww, r16.yyzw
lt r3.z, r9.w, l(0.990000)
if_nz r3.z
  iadd r0.y, r0.y, l(256)
  add r3.z, -r9.w, l(1.000000)
  mul r3.w, r3.z, cb2[19].x
  add r19.xyz, r5.xyzx, -cb2[35].xyzx
  mul r20.x, r19.x, cb2[35].w
  mul r20.yz, r19.yyzy, cb2[36].xxyx
  add_sat r19.xyz, r20.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r20.xy, r19.xyxx, cb2[36].zwzz
  mul r20.z, r19.z, cb2[37].x
  add r19.xyz, r20.xyzx, cb2[37].yzwy
  lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r20.xyz, r20.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r20.w, l(0)
  add r21.xyz, r19.xyzx, r20.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t17.xyzw, s4, l(0.000000)
  mul r22.xyz, r11.xyzx, r11.xyzx
  mul r22.xyz, r3.wwww, r22.xyzx
  add r23.xyz, r19.xyzx, r20.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r23.xyz, r23.xyzx, t18.xyzw, s4, l(0.000000)
  mul r23.xyz, r22.yyyy, r23.xyzx
  mad r21.xyz, r21.xyzx, r22.xxxx, r23.xyzx
  add r19.xyz, r19.xyzx, r20.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t19.xyzw, s4, l(0.000000)
  mad r19.xyz, r19.xyzx, r22.zzzz, r21.xyzx
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r19.xyz, r19.xyzx, r20.xyzx
  dp3 r3.w, r19.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r18.xyz, r15.yzwy, r2.wwww, r19.xyzx
  mov r17.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r17.xyzw, t8.wxyz, s2, r3.y
  mad r2.w, cb2[19].x, r3.z, -r3.w
  mad r2.w, r2.y, r2.w, r3.w
  mad r16.yzw, r15.yyzw, r2.wwww, r16.yyzw
endif 
add r2.w, r4.z, r2.x
log r2.w, |r2.w|
mul r2.w, r1.w, r2.w
exp r2.w, r2.w
add r2.w, r4.z, r2.w
add_sat r2.w, r2.w, l(-1.000000)
mul r3.yzw, r4.zzzz, r18.xxyz
and r15.yzw, r0.wwww, r3.yyzw
mad r13.zw, r2.xxxy, l(0.000000, 0.000000, 0.984375, 0.984375), l(0.000000, 0.000000, 0.00781250, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r13.zw, r13.zwzz, t5.zwxy, s2, l(0.000000)
mul r16.yzw, r2.wwww, r16.yyzw
mul r18.xyz, r13.zzzz, r16.yzwy
mul r16.yzw, r13.wwww, r16.yyzw
sqrt r2.y, r1.w
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r2.w, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r4.z, r2.x, r2.y, r2.w
mul r2.yw, r2.yyyw, r4.zzzz
ftou r4.z, cb1[44].x
iadd r4.z, r4.z, l(7)
ushr r4.z, r4.z, l(3)
imad r4.z, r0.z, r4.z, r0.x
ishl r4.z, r4.z, l(5)
not r6.w, r3.x
mov r19.x, -r13.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r20.x, l(2)
mov r5.w, l(1.000000)
mov r21.x, l(2)
mov r22.z, l(1.000000)
mov r23.w, l(1.000000)
mov r24.w, l(1.000000)
mov r25.w, l(1.000000)
mov r19.z, r13.x
mov r26.w, l(1.000000)
mov r19.yw, r14.xxxx
mov r13.y, r19.w
mov r14.y, r19.x
mov r27.x, r14.x
mov r27.y, r19.x
mov r27.z, r13.x
mov r14.z, r13.x
mov r28.w, l(1.000000)
mov r29.x, r14.x
mov r29.y, r19.x
mov r29.z, r13.x
mov r30.x, r14.x
mov r30.y, r19.x
mov r30.z, r13.x
mov r31.xyz, r3.yzwy
mov r32.xyz, r15.yzwy
mov r33.xyz, r18.xyzx
mov r34.xyz, r16.yzwy
mov r7.w, cb2[58].y
mov r8.w, l(0)
mov r9.w, l(0)
loop 
  uge r10.w, r9.w, cb2[0].x
  breakc_nz r10.w
  ushr r10.w, r9.w, l(5)
  iadd r10.w, r4.z, r10.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r10.w, l(0), t26.xxxx
  mov r35.xyz, r31.xyzx
  mov r36.xyz, r32.xyzx
  mov r37.xyz, r33.xyzx
  mov r38.xyz, r34.xyzx
  mov r11.w, r7.w
  mov r12.w, r8.w
  mov r13.z, r10.w
  loop 
    breakc_z r13.z
    firstbit_lo r13.w, r13.z
    ishl r14.w, l(1), r13.w
    not r14.w, r14.w
    and r13.z, r13.z, r14.w
    iadd r13.w, r9.w, r13.w
    imul null, r13.w, r13.w, l(15)
    ubfe r14.w, l(3), l(24), cb9[r13.w + 1].w
    ieq r17.w, r14.w, l(2)
    if_nz r17.w
      ubfe r17.w, l(3), l(27), cb9[r13.w + 1].w
      and r18.w, r12.w, l(255)
      ult r22.w, r18.w, l(32)
      and r22.w, r2.z, r22.w
      if_nz r22.w
        imad r18.w, r18.w, l(24), l(112)
        add r20.yzw, cb1[24].xxyz, cb9[r13.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r18.w, r20.xyzw
      endif 
      iadd r18.w, r12.w, l(1)
      add r39.xy, -r5.xyxx, cb9[r13.w + 3].zwzz
      add r39.z, -r5.z, cb9[r13.w + 4].x
      dp3 r20.y, r39.xyzx, r39.xyzx
      rsq r20.y, r20.y
      mul r40.xyz, r20.yyyy, r39.xyzx
      mul r20.z, r1.z, cb9[r13.w + 1].z
      mul r20.z, r20.z, l(0.250000)
      dp3 r20.w, r11.xyzx, r40.xyzx
      mov_sat r22.w, r20.w
      movc r27.w, r0.w, |r20.w|, r22.w
      lt r29.w, l(0.000000), r27.w
      if_nz r29.w
        mov r40.xyz, cb9[r13.w + 7].yzwy
        mov r40.w, cb9[r13.w + 8].x
        dp4 r29.w, r40.xyzw, r5.xyzw
        lt r30.w, r29.w, l(1.000000)
        if_nz r30.w
          mov r41.xyz, l(1.000000,1.000000,1.000000,0)
          mov r30.w, l(0)
        else 
          add r42.xyz, -r5.xyzx, cb9[r13.w + 0].xyzx
          mul r31.w, cb9[r13.w + 3].x, cb9[r13.w + 3].x
          dp3 r32.w, r42.xyzx, r42.xyzx
          div r31.w, r31.w, r32.w
          min r31.w, r31.w, l(1.000000)
          mad_sat r42.xy, r29.wwww, cb9[r13.w + 2].xzxx, cb9[r13.w + 2].ywyy
          mul r42.zw, r42.xxxy, r42.xxxy
          mad r42.xy, r42.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r42.xy, r42.xyxx, r42.zwzz
          mul r31.w, r31.w, r42.x
          mul r31.w, r42.y, r31.w
          mov r42.xyz, cb9[r13.w + 4].yzwy
          mov r42.w, cb9[r13.w + 5].x
          dp4 r42.x, r42.xyzw, r5.xyzw
          mov r43.xyz, cb9[r13.w + 5].yzwy
          mov r43.w, cb9[r13.w + 6].x
          dp4 r42.y, r43.xyzw, r5.xyzw
          div r22.xy, r42.xyxx, r29.wwww
          lt r29.w, cb9[r13.w + 10].w, l(0.00048828)
          if_nz r29.w
            mad_sat r42.xy, |r22.xyxx|, cb9[r13.w + 12].xyxx, cb9[r13.w + 12].zwzz
            mul r42.zw, r42.xxxy, r42.xxxy
            mad r42.xy, r42.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r42.xy, r42.xyxx, r42.zwzz
            mul r29.w, r42.y, r42.x
          else 
            mul_sat r42.xyzw, |r22.yyxx|, cb9[r13.w + 11].xyzw
            log r42.xyzw, r42.xyzw
            mul r42.xyzw, r42.xyzw, cb9[r13.w + 12].zzzz
            exp r42.xyzw, r42.xyzw
            add r42.xy, r42.zwzz, r42.xyxx
            log r42.xy, r42.xyxx
            mul r42.xy, r42.xyxx, cb9[r13.w + 12].wwww
            exp r42.xy, r42.xyxx
            mul r32.w, r42.x, cb9[r13.w + 12].x
            mad r33.w, cb9[r13.w + 12].y, r42.y, l(-1.000000)
            mad r32.w, cb9[r13.w + 12].y, r42.y, -r32.w
            div_sat r32.w, r33.w, r32.w
            mul r33.w, r32.w, r32.w
            mad r32.w, r32.w, l(-2.000000), l(3.000000)
            mul r29.w, r32.w, r33.w
          endif 
          mul r30.w, r29.w, r31.w
          and r29.w, l(255), cb9[r13.w + 14].w
          if_nz r29.w
            dp3 r31.w, cb9[r13.w + 13].xyzx, r22.xyzx
            mov r42.x, cb9[r13.w + 13].w
            mov r42.yz, cb9[r13.w + 14].xxyx
            dp3 r22.x, r42.xyzx, r22.xyzx
            frc r42.x, r31.w
            frc r42.y, r22.x
            iadd r22.x, r29.w, l(-1)
            utof r42.z, r22.x
            sample_l_indexable(texture2darray)(float,float,float,float) r41.xyz, r42.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r41.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r42.x, cb9[r13.w + 0].w
        mov r42.yz, cb9[r13.w + 1].xxyx
        mul r41.xyz, r41.xyzx, r42.xyzx
        lt r22.x, l(0.000000), r30.w
        if_nz r22.x
          and r22.x, r18.w, l(255)
          iadd r22.y, r22.x, l(-1)
          ult r22.y, r22.y, l(32)
          and r22.y, r2.z, r22.y
          if_nz r22.y
            imad r22.xy, r22.xxxx, l(24, 24, 0, 0), l(88, 104, 0, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r29.w, cb2[52].x, r22.x, u2.xxxx
            or r29.w, r29.w, l(4)
            store_structured u2.x, cb2[52].x, r22.x, r29.w
            store_structured u2.x, cb2[52].x, r22.y, r30.w
          endif 
          iadd r22.x, r12.w, l(257)
          ine r17.w, r17.w, l(1)
          if_nz r17.w
            mad r17.w, |r20.w|, l(-0.200000), l(0.400000)
            lt r22.y, r20.w, l(0.000000)
            and r22.y, r0.w, r22.y
            movc r17.w, r22.y, -r17.w, r17.w
            mad r23.xyz, r11.xyzx, r17.wwww, r5.xyzx
            mov r42.xyz, cb9[r13.w + 6].yzwy
            mov r42.w, cb9[r13.w + 7].x
            dp4 r17.w, r42.xyzw, r23.xyzw
            dp4 r22.y, r40.xyzw, r23.xyzw
            ge r29.w, r22.y, r17.w
            if_nz r29.w
              mov r40.xyz, cb9[r13.w + 4].yzwy
              mov r40.w, cb9[r13.w + 5].x
              dp4 r40.x, r40.xyzw, r23.xyzw
              mov r42.xyz, cb9[r13.w + 5].yzwy
              mov r42.w, cb9[r13.w + 6].x
              dp4 r40.y, r42.xyzw, r23.xyzw
              div r23.xy, r40.xyxx, r22.yyyy
              mad_sat r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r40.x, r23.x, cb9[r13.w + 8].y, cb9[r13.w + 8].z
              mad r40.y, r23.y, cb9[r13.w + 8].w, cb9[r13.w + 9].x
              div r17.w, r17.w, r22.y
              max r17.w, r17.w, l(0.00006104)
              and r22.y, l(0x0000ffff), cb9[r13.w + 1].w
              if_nz r11.w
                utof r23.z, r22.y
                mov r29.w, l(0)
                mov r31.w, l(0)
                loop 
                  ige r32.w, r31.w, l(8)
                  breakc_nz r32.w
                  dp2 r42.x, icb[r31.w + 0].yxyy, r19.xyxx
                  dp2 r42.y, icb[r31.w + 0].yxyy, r19.yzyy
                  mad r23.xy, r42.xyxx, cb9[r13.w + 3].yyyy, r40.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r17.w
                  mad r29.w, r23.x, l(0.125000), r29.w
                  iadd r31.w, r31.w, l(1)
                endloop 
              else 
                utof r40.z, r22.y
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r29.w, r40.xyzx, t9.xxxx, s13, r17.w
              endif 
              mul r17.w, r29.w, r29.w
              mul r17.w, r29.w, r17.w
            else 
              mov r17.w, l(1.000000)
            endif 
          else 
            mov r17.w, l(1.000000)
          endif 
          mul r17.w, r17.w, r30.w
          lt r22.y, l(0.000000), r17.w
          if_nz r22.y
            ubfe r22.y, l(4), l(16), cb9[r13.w + 1].w
            ult r23.x, l(0), r22.y
            and r23.x, r3.x, r23.x
            if_nz r23.x
              iadd r22.y, r22.y, cb2[0].x
              imad r22.y, r22.y, l(15), l(-15)
              mad r23.x, |r20.w|, l(-0.200000), l(0.400000)
              lt r23.y, r20.w, l(0.000000)
              and r23.y, r0.w, r23.y
              movc r23.x, r23.y, -r23.x, r23.x
              mad r24.xyz, r11.xyzx, r23.xxxx, r5.xyzx
              mov r40.xyz, cb9[r22.y + 6].yzwy
              mov r40.w, cb9[r22.y + 7].x
              dp4 r23.x, r40.xyzw, r24.xyzw
              mov r40.xyz, cb9[r22.y + 7].yzwy
              mov r40.w, cb9[r22.y + 8].x
              dp4 r23.y, r40.xyzw, r24.xyzw
              lt r23.z, r23.y, r23.x
              if_z r23.z
                mov r40.xyz, cb9[r22.y + 4].yzwy
                mov r40.w, cb9[r22.y + 5].x
                dp4 r40.x, r40.xyzw, r24.xyzw
                mov r42.xyz, cb9[r22.y + 5].yzwy
                mov r42.w, cb9[r22.y + 6].x
                dp4 r40.y, r42.xyzw, r24.xyzw
                div r24.xy, r40.xyxx, r23.yyyy
                mad r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r40.x, r24.x, cb9[r22.y + 9].w
                add r40.y, r24.y, cb9[r22.y + 10].x
                mul r24.xy, r40.xyxx, cb9[r22.y + 9].yzyy
                div r40.xy, cb9[r22.y + 3].yyyy, cb9[r22.y + 8].ywyy
                add r40.zw, -r40.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r40.zw, r24.xxxy, r40.zzzw
                ge r40.xy, r40.xyxx, r24.xyxx
                or r40.xy, r40.xyxx, r40.zwzz
                or r24.z, r40.y, r40.x
                if_z r24.z
                  mov_sat r24.xy, r24.xyxx
                  mad r40.x, r24.x, cb9[r22.y + 8].y, cb9[r22.y + 8].z
                  mad r40.y, r24.y, cb9[r22.y + 8].w, cb9[r22.y + 9].x
                  mul r24.x, r23.y, cb9[r22.y + 10].z
                  mad r23.x, cb9[r22.y + 10].y, r23.y, r23.x
                  div r23.x, r23.x, r24.x
                endif 
              else 
                mov r24.z, l(-1)
              endif 
              or r23.y, r23.z, r24.z
              if_z r23.y
                max r23.x, r23.x, l(0.00006104)
                and r23.y, l(0x0000ffff), cb9[r22.y + 1].w
                if_nz r11.w
                  utof r24.z, r23.y
                  mov r23.z, l(0)
                  mov r30.w, l(0)
                  loop 
                    ige r31.w, r30.w, l(8)
                    breakc_nz r31.w
                    dp2 r42.x, icb[r30.w + 0].yxyy, r19.xwxx
                    dp2 r42.y, icb[r30.w + 0].xyxx, r13.xyxx
                    mad r24.xy, r42.xyxx, cb9[r22.y + 3].yyyy, r40.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r23.x
                    mad r23.z, r24.x, l(0.125000), r23.z
                    iadd r30.w, r30.w, l(1)
                  endloop 
                else 
                  utof r40.z, r23.y
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.z, r40.xyzx, t9.xxxx, s13, r23.x
                endif 
                mul r22.y, r23.z, r23.z
                mul r22.y, r23.z, r22.y
              else 
                mov r22.y, l(1.000000)
              endif 
              mul r17.w, r17.w, r22.y
            else 
              ubfe r22.y, l(4), l(20), cb9[r13.w + 1].w
              ult r23.x, l(0), r22.y
              and r23.x, r6.w, r23.x
              if_nz r23.x
                iadd r22.y, r22.y, cb2[0].x
                imad r22.y, r22.y, l(15), l(-15)
                mad r23.x, |r20.w|, l(-0.200000), l(0.400000)
                lt r23.y, r20.w, l(0.000000)
                and r23.y, r0.w, r23.y
                movc r23.x, r23.y, -r23.x, r23.x
                mad r25.xyz, r11.xyzx, r23.xxxx, r5.xyzx
                mov r40.xyz, cb9[r22.y + 6].yzwy
                mov r40.w, cb9[r22.y + 7].x
                dp4 r23.x, r40.xyzw, r25.xyzw
                mov r40.xyz, cb9[r22.y + 7].yzwy
                mov r40.w, cb9[r22.y + 8].x
                dp4 r23.y, r40.xyzw, r25.xyzw
                lt r24.x, r23.y, r23.x
                if_z r24.x
                  mov r40.xyz, cb9[r22.y + 4].yzwy
                  mov r40.w, cb9[r22.y + 5].x
                  dp4 r40.x, r40.xyzw, r25.xyzw
                  mov r42.xyz, cb9[r22.y + 5].yzwy
                  mov r42.w, cb9[r22.y + 6].x
                  dp4 r40.y, r42.xyzw, r25.xyzw
                  div r24.yz, r40.xxyx, r23.yyyy
                  mad r24.yz, r24.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                  add r25.x, r24.y, cb9[r22.y + 9].w
                  add r25.y, r24.z, cb9[r22.y + 10].x
                  mul r24.yz, r25.xxyx, cb9[r22.y + 9].yyzy
                  div r25.xy, cb9[r22.y + 3].yyyy, cb9[r22.y + 8].ywyy
                  add r40.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r40.xy, r24.yzyy, r40.xyxx
                  ge r25.xy, r25.xyxx, r24.yzyy
                  or r25.xy, r25.xyxx, r40.xyxx
                  or r25.x, r25.y, r25.x
                  if_z r25.x
                    mov_sat r24.yz, r24.yyzy
                    mad r40.x, r24.y, cb9[r22.y + 8].y, cb9[r22.y + 8].z
                    mad r40.y, r24.z, cb9[r22.y + 8].w, cb9[r22.y + 9].x
                    mul r24.y, r23.y, cb9[r22.y + 10].z
                    mad r23.x, cb9[r22.y + 10].y, r23.y, r23.x
                    div r23.x, r23.x, r24.y
                  endif 
                else 
                  mov r25.x, l(-1)
                endif 
                or r23.y, r24.x, r25.x
                if_z r23.y
                  max r23.x, r23.x, l(0.00006104)
                  and r23.y, l(0x0000ffff), cb9[r22.y + 1].w
                  if_nz r11.w
                    utof r24.z, r23.y
                    mov r25.xy, l(0,0,0,0)
                    loop 
                      ige r25.z, r25.y, l(8)
                      breakc_nz r25.z
                      dp2 r42.x, icb[r25.y + 0].xyxx, r27.xyxx
                      dp2 r42.y, icb[r25.y + 0].yxyy, r27.xzxx
                      mad r24.xy, r42.xyxx, cb9[r22.y + 3].yyyy, r40.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r23.x
                      mad r25.x, r24.x, l(0.125000), r25.x
                      iadd r25.y, r25.y, l(1)
                    endloop 
                  else 
                    utof r40.z, r23.y
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r40.xyzx, t9.xxxx, s13, r23.x
                  endif 
                  mul r22.y, r25.x, r25.x
                  mul r22.y, r25.x, r22.y
                else 
                  mov r22.y, l(1.000000)
                endif 
                mul r17.w, r17.w, r22.y
              endif 
            endif 
            mad r22.y, -r27.w, r2.x, l(1.000000)
            mul r22.y, r22.y, r22.y
            mad r22.y, -r22.y, l(0.620000), l(0.620000)
            add r22.y, -r27.w, r22.y
            mad r22.y, r1.w, r22.y, r27.w
            mul r22.y, r17.w, r22.y
            lt r20.w, l(0.000000), r20.w
            mad r24.xyz, r22.yyyy, r41.xyzx, r35.xyzx
            mad r39.xyz, r39.xyzx, r20.yyyy, r12.xyzx
            dp3 r20.y, r39.xyzx, r39.xyzx
            rsq r20.y, r20.y
            mul r39.xyz, r20.yyyy, r39.xyzx
            dp3 r20.y, r39.xyzx, r12.xyzx
            dp3 r23.x, r11.xyzx, r39.xyzx
            mad r23.y, |r23.x|, r1.z, -|r23.x|
            mad r23.x, |r23.x|, r23.y, l(1.000000)
            mad r23.y, r22.w, r2.y, r2.w
            mul r23.x, r23.x, r23.x
            mul r23.x, r23.y, r23.x
            rcp r23.x, r23.x
            mul r20.z, r20.z, r22.w
            mul r20.z, r20.z, r23.x
            mul r20.z, r17.w, r20.z
            mad r39.xyz, r20.zzzz, r41.xyzx, r38.xyzx
            add_sat r20.y, -r20.y, l(1.000000)
            mul r22.w, r20.y, r20.y
            mul r22.w, r22.w, r22.w
            mul r20.y, r20.y, r22.w
            mul r20.y, r20.y, r20.z
            mad r40.xyz, r20.yyyy, r41.xyzx, r37.xyzx
            mad r41.xyz, r22.yyyy, r41.xyzx, r36.xyzx
            movc r41.xyz, r0.wwww, r41.xyzx, r36.xyzx
            movc r35.xyz, r20.wwww, r24.xyzx, r35.xyzx
            movc r36.xyz, r20.wwww, r36.xyzx, r41.xyzx
            movc r37.xyz, r20.wwww, r40.xyzx, r37.xyzx
            movc r38.xyz, r20.wwww, r39.xyzx, r38.xyzx
            and r20.y, r22.x, l(255)
            iadd r20.z, r20.y, l(-1)
            ult r20.z, r20.z, l(32)
            and r20.z, r2.z, r20.z
            if_nz r20.z
              imad r20.yz, r20.yyyy, l(0, 24, 24, 0), l(0, 88, 108, 0)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r20.w, cb2[52].x, r20.y, u2.xxxx
              or r20.w, r20.w, l(8)
              store_structured u2.x, cb2[52].x, r20.y, r20.w
              store_structured u2.x, cb2[52].x, r20.z, r17.w
            endif 
            iadd r12.w, r12.w, l(0x00010101)
          else 
            mov r12.w, r22.x
          endif 
        else 
          mov r12.w, r18.w
        endif 
      else 
        mov r12.w, r18.w
      endif 
    else 
      ieq r14.w, r14.w, l(4)
      if_nz r14.w
        ubfe r14.w, l(3), l(27), cb9[r13.w + 1].w
        and r17.w, r12.w, l(255)
        ult r18.w, r17.w, l(32)
        and r18.w, r2.z, r18.w
        if_nz r18.w
          imad r17.w, r17.w, l(24), l(112)
          add r21.yzw, cb1[24].xxyz, cb9[r13.w + 0].xxyz
          store_structured u2.xyzw, cb2[52].x, r17.w, r21.xyzw
        endif 
        iadd r17.w, r12.w, l(1)
        mul r18.w, r1.z, cb9[r13.w + 1].z
        mul r18.w, r18.w, l(0.250000)
        lt r20.y, l(0.000000), cb9[r13.w + 6].y
        mov r24.xy, cb9[r13.w + 5].zwzz
        mov r24.z, cb9[r13.w + 6].x
        mad r21.yzw, -r24.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r13.w + 0].xxyz
        add r22.xyw, -r5.xyxz, r21.yzyw
        dp3 r20.z, r24.xyzx, r17.xyzx
        dp3 r20.w, r24.xyzx, r22.xywx
        dp3 r22.x, r17.xyzx, r22.xywx
        mad r22.y, -r20.z, r20.z, cb9[r13.w + 6].y
        mad r20.z, r20.z, r22.x, -r20.w
        div_sat r20.w, -r20.w, cb9[r13.w + 6].y
        div_sat r20.z, r20.z, r22.y
        div r22.x, r22.y, cb9[r13.w + 6].y
        mul r22.x, r22.x, l(10.000000)
        min r22.x, r22.x, l(1.000000)
        add r20.z, -r20.w, r20.z
        mad r20.z, r22.x, r20.z, r20.w
        mad r22.xyw, r20.zzzz, r24.xyxz, r21.yzyw
        mad r21.yzw, r20.wwww, r24.xxyz, r21.yyzw
        movc r21.yzw, r20.yyyy, r21.yyzw, cb9[r13.w + 0].xxyz
        movc r20.yzw, r20.yyyy, r22.xxyw, cb9[r13.w + 0].xxyz
        add r20.yzw, -r5.xxyz, r20.yyzw
        add r21.yzw, -r5.xxyz, r21.yyzw
        dp3 r22.x, r20.yzwy, r20.yzwy
        rsq r22.x, r22.x
        mul r24.xyz, r20.yzwy, r22.xxxx
        dp3 r22.y, r21.yzwy, r21.yzwy
        rsq r22.w, r22.y
        mul r21.yzw, r21.yyzw, r22.wwww
        dp3 r21.y, r11.xyzx, r21.yzwy
        mov_sat r21.z, r21.y
        movc r21.z, r0.w, |r21.y|, r21.z
        lt r21.w, l(0.000000), r21.z
        if_nz r21.w
          sqrt r21.w, r22.y
          mul r22.w, cb9[r13.w + 3].x, cb9[r13.w + 3].x
          div r22.y, r22.w, r22.y
          min r22.y, r22.y, l(1.000000)
          mad_sat r23.xy, r21.wwww, cb9[r13.w + 2].xzxx, cb9[r13.w + 2].ywyy
          mul r25.yz, r23.xxyx, r23.xxyx
          mad r23.xy, r23.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r23.xy, r23.xyxx, r25.yzyy
          mul r21.w, r22.y, r23.x
          mul r21.w, r23.y, r21.w
          lt r22.y, l(0.000000), r21.w
          if_nz r22.y
            and r22.y, r17.w, l(255)
            iadd r22.w, r22.y, l(-1)
            ult r22.w, r22.w, l(32)
            and r22.w, r2.z, r22.w
            if_nz r22.w
              imad r22.yw, r22.yyyy, l(0, 24, 0, 24), l(0, 88, 0, 104)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r23.x, cb2[52].x, r22.y, u2.xxxx
              or r23.x, r23.x, l(4)
              store_structured u2.x, cb2[52].x, r22.y, r23.x
              store_structured u2.x, cb2[52].x, r22.w, r21.w
            endif 
            iadd r22.y, r12.w, l(257)
            ine r14.w, r14.w, l(1)
            if_nz r14.w
              mad r14.w, |r21.y|, l(-0.200000), l(0.400000)
              lt r22.w, r21.y, l(0.000000)
              and r22.w, r0.w, r22.w
              movc r14.w, r22.w, -r14.w, r14.w
              mad r39.xyz, r11.xyzx, r14.wwww, r5.xyzx
              add r39.xyz, r39.xyzx, -cb9[r13.w + 4].yzwy
              max r14.w, |r39.z|, |r39.y|
              max r14.w, r14.w, |r39.x|
              div r14.w, cb9[r13.w + 5].x, r14.w
              add r14.w, r14.w, cb9[r13.w + 5].y
              dp3 r22.w, r39.xyzx, r39.xyzx
              rsq r22.w, r22.w
              max r14.w, r14.w, l(0.00006104)
              and r23.x, l(0x0000ffff), cb9[r13.w + 1].w
              utof r40.w, r23.x
              mov r23.xy, l(0,0,0,0)
              loop 
                ige r25.y, r23.y, l(8)
                breakc_nz r25.y
                dp2 r25.y, icb[r23.y + 0].xyxx, r14.xyxx
                dp2 r25.z, icb[r23.y + 0].yxyy, r14.xzxx
                mul r41.yz, r25.yyzy, cb9[r13.w + 3].yyyy
                mul r41.x, r16.x, r41.y
                mul r41.w, r15.x, r41.y
                mad r40.xyz, r39.xyzx, r22.wwww, r41.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r25.y, r40.xyzw, t10.xxxx, s13, r14.w
                mad r23.x, r25.y, l(0.125000), r23.x
                iadd r23.y, r23.y, l(1)
              endloop 
            else 
              mov r23.x, l(1.000000)
            endif 
            mul r14.w, r21.w, r23.x
            lt r21.w, l(0.000000), r14.w
            if_nz r21.w
              ubfe r21.w, l(4), l(16), cb9[r13.w + 1].w
              ult r22.w, l(0), r21.w
              and r22.w, r3.x, r22.w
              if_nz r22.w
                iadd r21.w, r21.w, cb2[0].x
                imad r21.w, r21.w, l(15), l(-15)
                mad r22.w, |r21.y|, l(-0.200000), l(0.400000)
                lt r23.y, r21.y, l(0.000000)
                and r23.y, r0.w, r23.y
                movc r22.w, r23.y, -r22.w, r22.w
                mad r26.xyz, r11.xyzx, r22.wwww, r5.xyzx
                mov r39.xyz, cb9[r21.w + 6].yzwy
                mov r39.w, cb9[r21.w + 7].x
                dp4 r22.w, r39.xyzw, r26.xyzw
                mov r39.xyz, cb9[r21.w + 7].yzwy
                mov r39.w, cb9[r21.w + 8].x
                dp4 r23.y, r39.xyzw, r26.xyzw
                lt r25.y, r23.y, r22.w
                if_z r25.y
                  mov r39.xyz, cb9[r21.w + 4].yzwy
                  mov r39.w, cb9[r21.w + 5].x
                  dp4 r39.x, r39.xyzw, r26.xyzw
                  mov r40.xyz, cb9[r21.w + 5].yzwy
                  mov r40.w, cb9[r21.w + 6].x
                  dp4 r39.y, r40.xyzw, r26.xyzw
                  div r26.xy, r39.xyxx, r23.yyyy
                  mad r26.xy, r26.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r39.x, r26.x, cb9[r21.w + 9].w
                  add r39.y, r26.y, cb9[r21.w + 10].x
                  mul r26.xy, r39.xyxx, cb9[r21.w + 9].yzyy
                  div r39.xy, cb9[r21.w + 3].yyyy, cb9[r21.w + 8].ywyy
                  add r39.zw, -r39.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                  ge r39.zw, r26.xxxy, r39.zzzw
                  ge r39.xy, r39.xyxx, r26.xyxx
                  or r39.xy, r39.xyxx, r39.zwzz
                  or r25.z, r39.y, r39.x
                  if_z r25.z
                    mov_sat r26.xy, r26.xyxx
                    mad r39.x, r26.x, cb9[r21.w + 8].y, cb9[r21.w + 8].z
                    mad r39.y, r26.y, cb9[r21.w + 8].w, cb9[r21.w + 9].x
                    mul r26.x, r23.y, cb9[r21.w + 10].z
                    mad r22.w, cb9[r21.w + 10].y, r23.y, r22.w
                    div r22.w, r22.w, r26.x
                  endif 
                else 
                  mov r25.z, l(-1)
                endif 
                or r23.y, r25.y, r25.z
                if_z r23.y
                  max r22.w, r22.w, l(0.00006104)
                  and r23.y, l(0x0000ffff), cb9[r21.w + 1].w
                  if_nz r11.w
                    utof r26.z, r23.y
                    mov r25.yz, l(0,0,0,0)
                    loop 
                      ige r27.w, r25.z, l(8)
                      breakc_nz r27.w
                      dp2 r40.x, icb[r25.z + 0].xyxx, r29.xyxx
                      dp2 r40.y, icb[r25.z + 0].yxyy, r29.xzxx
                      mad r26.xy, r40.xyxx, cb9[r21.w + 3].yyyy, r39.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r26.xyzx, t9.xxxx, s13, r22.w
                      mad r25.y, r26.x, l(0.125000), r25.y
                      iadd r25.z, r25.z, l(1)
                    endloop 
                  else 
                    utof r39.z, r23.y
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.y, r39.xyzx, t9.xxxx, s13, r22.w
                  endif 
                  mul r21.w, r25.y, r25.y
                  mul r21.w, r25.y, r21.w
                else 
                  mov r21.w, l(1.000000)
                endif 
                mul r14.w, r14.w, r21.w
              else 
                ubfe r21.w, l(4), l(20), cb9[r13.w + 1].w
                ult r22.w, l(0), r21.w
                and r22.w, r6.w, r22.w
                if_nz r22.w
                  iadd r21.w, r21.w, cb2[0].x
                  imad r21.w, r21.w, l(15), l(-15)
                  mad r22.w, |r21.y|, l(-0.200000), l(0.400000)
                  lt r23.y, r21.y, l(0.000000)
                  and r23.y, r0.w, r23.y
                  movc r22.w, r23.y, -r22.w, r22.w
                  mad r28.xyz, r11.xyzx, r22.wwww, r5.xyzx
                  mov r39.xyz, cb9[r21.w + 6].yzwy
                  mov r39.w, cb9[r21.w + 7].x
                  dp4 r22.w, r39.xyzw, r28.xyzw
                  mov r39.xyz, cb9[r21.w + 7].yzwy
                  mov r39.w, cb9[r21.w + 8].x
                  dp4 r23.y, r39.xyzw, r28.xyzw
                  lt r25.z, r23.y, r22.w
                  if_z r25.z
                    mov r39.xyz, cb9[r21.w + 4].yzwy
                    mov r39.w, cb9[r21.w + 5].x
                    dp4 r26.x, r39.xyzw, r28.xyzw
                    mov r39.xyz, cb9[r21.w + 5].yzwy
                    mov r39.w, cb9[r21.w + 6].x
                    dp4 r26.y, r39.xyzw, r28.xyzw
                    div r26.xy, r26.xyxx, r23.yyyy
                    mad r26.xy, r26.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                    add r28.x, r26.x, cb9[r21.w + 9].w
                    add r28.y, r26.y, cb9[r21.w + 10].x
                    mul r26.xy, r28.xyxx, cb9[r21.w + 9].yzyy
                    div r28.xy, cb9[r21.w + 3].yyyy, cb9[r21.w + 8].ywyy
                    add r39.xy, -r28.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r39.xy, r26.xyxx, r39.xyxx
                    ge r28.xy, r28.xyxx, r26.xyxx
                    or r28.xy, r28.xyxx, r39.xyxx
                    or r26.z, r28.y, r28.x
                    if_z r26.z
                      mov_sat r26.xy, r26.xyxx
                      mad r28.x, r26.x, cb9[r21.w + 8].y, cb9[r21.w + 8].z
                      mad r28.y, r26.y, cb9[r21.w + 8].w, cb9[r21.w + 9].x
                      mul r26.x, r23.y, cb9[r21.w + 10].z
                      mad r22.w, cb9[r21.w + 10].y, r23.y, r22.w
                      div r22.w, r22.w, r26.x
                    endif 
                  else 
                    mov r26.z, l(-1)
                  endif 
                  or r23.y, r25.z, r26.z
                  if_z r23.y
                    max r22.w, r22.w, l(0.00006104)
                    and r23.y, l(0x0000ffff), cb9[r21.w + 1].w
                    if_nz r11.w
                      utof r26.z, r23.y
                      mov r25.z, l(0)
                      mov r27.w, l(0)
                      loop 
                        ige r30.w, r27.w, l(8)
                        breakc_nz r30.w
                        dp2 r39.x, icb[r27.w + 0].xyxx, r30.xyxx
                        dp2 r39.y, icb[r27.w + 0].yxyy, r30.xzxx
                        mad r26.xy, r39.xyxx, cb9[r21.w + 3].yyyy, r28.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r26.xyzx, t9.xxxx, s13, r22.w
                        mad r25.z, r26.x, l(0.125000), r25.z
                        iadd r27.w, r27.w, l(1)
                      endloop 
                    else 
                      utof r28.z, r23.y
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.z, r28.xyzx, t9.xxxx, s13, r22.w
                    endif 
                    mul r21.w, r25.z, r25.z
                    mul r21.w, r25.z, r21.w
                  else 
                    mov r21.w, l(1.000000)
                  endif 
                  mul r14.w, r14.w, r21.w
                endif 
              endif 
              mad r21.w, -r21.z, r2.x, l(1.000000)
              mul r21.w, r21.w, r21.w
              mad r21.w, -r21.w, l(0.620000), l(0.620000)
              add r21.w, -r21.z, r21.w
              mad r21.z, r1.w, r21.w, r21.z
              mul r21.z, r14.w, r21.z
              mov r26.x, cb9[r13.w + 0].w
              mov r26.yz, cb9[r13.w + 1].xxyx
              lt r13.w, l(0.000000), r21.y
              mad r28.xyz, r21.zzzz, r26.xyzx, r35.xyzx
              dp3_sat r21.y, r11.xyzx, r24.xyzx
              mad r20.yzw, r20.yyzw, r22.xxxx, r12.xxyz
              dp3 r21.w, r20.yzwy, r20.yzwy
              rsq r21.w, r21.w
              mul r20.yzw, r20.yyzw, r21.wwww
              dp3 r21.w, r20.yzwy, r12.xyzx
              dp3 r20.y, r11.xyzx, r20.yzwy
              mad r20.z, |r20.y|, r1.z, -|r20.y|
              mad r20.y, |r20.y|, r20.z, l(1.000000)
              mad r20.z, r21.y, r2.y, r2.w
              mul r20.y, r20.y, r20.y
              mul r20.y, r20.z, r20.y
              rcp r20.y, r20.y
              mul r18.w, r18.w, r21.y
              mul r18.w, r18.w, r20.y
              mul r18.w, r14.w, r18.w
              mad r20.yzw, r18.wwww, r26.xxyz, r38.xxyz
              add_sat r21.y, -r21.w, l(1.000000)
              mul r21.w, r21.y, r21.y
              mul r21.w, r21.w, r21.w
              mul r21.y, r21.w, r21.y
              mul r18.w, r18.w, r21.y
              mad r24.xyz, r18.wwww, r26.xyzx, r37.xyzx
              mad r21.yzw, r21.zzzz, r26.xxyz, r36.xxyz
              movc r21.yzw, r0.wwww, r21.yyzw, r36.xxyz
              movc r35.xyz, r13.wwww, r28.xyzx, r35.xyzx
              movc r36.xyz, r13.wwww, r36.xyzx, r21.yzwy
              movc r37.xyz, r13.wwww, r24.xyzx, r37.xyzx
              movc r38.xyz, r13.wwww, r20.yzwy, r38.xyzx
              and r13.w, r22.y, l(255)
              iadd r18.w, r13.w, l(-1)
              ult r18.w, r18.w, l(32)
              and r18.w, r2.z, r18.w
              if_nz r18.w
                imad r20.yz, r13.wwww, l(0, 24, 24, 0), l(0, 88, 108, 0)
                ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r13.w, cb2[52].x, r20.y, u2.xxxx
                or r13.w, r13.w, l(8)
                store_structured u2.x, cb2[52].x, r20.y, r13.w
                store_structured u2.x, cb2[52].x, r20.z, r14.w
              endif 
              iadd r12.w, r12.w, l(0x00010101)
            else 
              mov r12.w, r22.y
            endif 
          else 
            mov r12.w, r17.w
          endif 
        else 
          mov r12.w, r17.w
        endif 
      endif 
    endif 
  endloop 
  mov r31.xyz, r35.xyzx
  mov r32.xyz, r36.xyzx
  mov r33.xyz, r37.xyzx
  mov r34.xyz, r38.xyzx
  mov r8.w, r12.w
  iadd r9.w, r9.w, l(32)
endloop 
mad r3.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r1.z, r3.y
mad r2.xyw, r7.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r1.w, r2.x
ieq r1.w, r1.z, r1.w
movc r2.xy, r1.wwww, r2.ywyy, l(-1.000000,0,0,0)
mad r4.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r4.x
ieq r1.w, r1.z, r1.w
movc r4.xy, r1.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r7.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r7.x
ieq r1.w, r1.z, r1.w
movc r4.zw, r1.wwww, r7.yyyz, l(0,0,-1.000000,0)
mad r7.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r7.x
ieq r1.z, r1.z, r1.w
movc r1.zw, r1.zzzz, r7.yyyz, l(0,0,-1.000000,0)
mov r7.x, r2.x
mov r7.yz, r4.xxzx
mov r7.w, r1.z
add r7.xyzw, -r3.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r1.z, r7.y, r7.x
add r1.z, r7.z, r1.z
add r1.z, r7.w, r1.z
mul r2.x, r4.y, r7.y
mad r2.x, r7.x, r2.y, r2.x
mad r2.x, r7.z, r4.w, r2.x
mad r1.w, r7.w, r1.w, r2.x
div r3.w, r1.w, r1.z
ge r1.z, l(0.000000), r1.z
movc r3.yz, r1.zzzz, l(0,0,0,0), r3.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r1.z, r1.w, r1.z
movc r2.xyw, r1.zzzz, r3.xyxz, r3.xzxy
mad r1.z, -r2.w, l(0.500000), r2.x
add r3.y, r1.z, r2.w
mad r3.z, -r2.y, l(0.500000), r1.z
add r3.x, r2.y, r3.z
mul r2.xyw, r6.xyxz, r31.xyxz
mad r2.xyw, r32.xyxz, r3.xyxz, r2.xyxw
mul r4.xyz, r33.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r4.xyz, r34.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000), r4.xyzx
add r2.xyw, r2.xyxw, r4.xyxz
add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, r33.xyzx
mad r3.xyz, r34.xyzx, r3.xyzx, r4.xyzx
mad r3.xyz, r31.xyzx, r6.xyzx, r3.xyzx
movc r2.xyw, r0.wwww, r2.xyxw, r3.xyxz
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r5.xyzx, r5.xyzx
  rsq r1.z, r0.w
  mul r3.xyz, r1.zzzz, r5.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r3.w, l(0.010000), |r5.z|
    mul r4.xy, r5.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r3.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r6.xyz, r1.wwww, cb2[12].xyzx
    exp r6.xyz, r6.xyzx
    add r6.xyz, -r4.xyzx, r6.xyzx
    mad r4.xyz, cb2[13].wwww, r6.xyzx, r4.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r5.z|
    mul r3.w, r5.z, cb2[15].z
    mul r4.w, r3.w, l(-1.442695)
    exp r4.w, r4.w
    add r4.w, -r4.w, l(1.000000)
    div r3.w, r4.w, r3.w
    mul r3.w, r1.z, r3.w
    movc r1.z, r1.w, r3.w, r1.z
    mul r6.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r6.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r3.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r3.x, cb2[8].w, -r1.z, l(1.000000)
  mul r3.x, r3.x, r3.x
  mul r3.x, r3.x, l(12.566371)
  div r1.w, r1.w, r3.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r3.xyz, r0.wwww, cb2[11].xyzx
  mad r3.xyz, r1.zzzz, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r6.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r6.xyzx
  mad r3.xyz, r2.xywx, r4.xyzx, r3.xyzx
else 
  mul r0.w, r5.z, cb2[6].x
  mad r1.z, cb2[6].x, r5.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r3.w, r1.z, l(64.000000)
  mul r3.w, r3.w, l(1.442695)
  exp r3.w, r3.w
  mov_sat r4.x, cb2[6].z
  lt r4.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r4.y, r3.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r4.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r5.xyzx, r5.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r4.xyz, r1.zzzz, r5.xyzx
  dp3 r1.z, cb2[7].yzwy, r4.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r1.zzzz, r4.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r4.w
  add r4.xyz, -r2.xywx, r4.xyzx
  mad r3.xyz, r0.wwww, r4.xyzx, r2.xywx
endif 
mul r2.xyw, r3.xyxz, cb1[85].yyyy
ge r3.xyz, r2.xywx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyw, r2.xyxw, r3.xyxz
min r2.xyw, r2.xyxw, l(65024.000000, 65024.000000, 0.000000, 64512.000000)
ilt r0.w, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(0, 8, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r1.z, cb2[55].w, l(16)
ine r1.w, r1.z, l(0)
ieq r1.z, r1.z, l(16)
and r1.z, r1.z, r1.w
and r3.z, r1.z, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xywx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xywx
movc r2.xyw, r0.wwww, r3.xyxz, r2.xyxw
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.w, r8.w, l(255)
      break 
      case l(2)
      ubfe r0.w, l(8), l(8), r8.w
      break 
      case l(3)
      ubfe r0.w, l(8), l(16), r8.w
      break 
      case l(4)
      and r0.w, r0.y, l(3)
      break 
      case l(5)
      ushr r0.w, r0.y, l(8)
      break 
      default 
      mov r0.w, l(0)
      break 
    endswitch 
    utof r0.w, r0.w
    mul r0.w, r0.w, cb2[53].z
    mad r3.xyz, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xywx
    mad r2.xyw, cb2[53].wwww, r3.xyxz, r2.xyxw
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xywx
if_nz r2.z
  add r1.xyz, r5.xyzx, cb1[24].xyzx
  and r1.w, r8.w, l(255)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.w, r0.y, l(3)
  store_structured u2.x, cb2[52].x, l(108), r0.w
endif 
if_nz cb2[52].y
  and r0.w, r8.w, l(255)
  atomic_iadd g1, l(0), r0.w
  ubfe r1.xy, l(8, 8, 0, 0), l(8, 16, 0, 0), r8.wwww
  atomic_iadd g1, l(4), r1.x
  atomic_iadd g1, l(8), r1.y
  and r1.z, r0.y, l(3)
  atomic_iadd g1, l(12), r1.z
  ushr r0.y, r0.y, l(8)
  atomic_iadd g1, l(16), r0.y
  atomic_umax g2, l(0), r0.w
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), r1.z
  atomic_umax g2, l(16), r0.y
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.y, r1.x, l(63)
  if_nz r0.y
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.y, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.y
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.y, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.y
    ieq r0.xz, r0.xxzx, cb2[52].zzwz
    and r0.x, r0.z, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.y
    endif 
  endif 
endif 
ret 
// Approximately 1691 instruction slots used
