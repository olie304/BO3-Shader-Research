//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:18 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16 [unused]
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3584], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 37
dcl_thread_group 8, 8, 1
imad r0.x, cb2[57].x, l(59), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.zw, r0.xxxy, l(0, 0, 4095, 4095)
imad r1.xy, r0.zwzz, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.yzw, r1.xyww, t0.wxyz
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.yyyx
add r9.xy, r1.wzww, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r10.x, r3.x, l(0.984375)
mul r5.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r10.x, r3.x, r5.w
max r3.x, r3.x, l(0.00000001)
rcp r10.y, r3.x
and r9.zw, r0.zzzz, r10.xxxy
add r10.xy, r9.xyxx, -cb1[71].xyxx
mul r10.xy, r10.xyxx, cb1[44].zwzz
mad r10.xy, r10.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r11.x, r10.x, cb1[12].x
mul r11.y, r10.y, cb1[13].y
mov r11.z, l(1.000000)
mul r10.xyz, r9.wwww, r11.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.z, r2.w, l(3.000000), l(0.500000)
ftou r0.z, r0.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r11.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r11.z
mul r11.xy, r2.wwww, r2.xyxx
and r12.xyzw, r0.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.z, r12.w, r12.z
movc r12.z, r0.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.z, r0.w, l(-0.500000), l(-0.00146628)
add r0.z, r0.z, r2.z
mul_sat r2.y, r0.z, l(2.00982332)
dp3 r0.z, -r10.xyzx, -r10.xyzx
rsq r0.z, r0.z
mul r12.xyz, r0.zzzz, -r10.xyzx
dp2 r0.z, r1.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.z, r0.z
mul r0.z, r0.z, l(52.982918)
frc r0.z, r0.z
mad r0.z, r0.z, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r0.z
dp2 r0.z, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.z, r0.z
mul r0.z, r0.z, l(52.982918)
frc r0.z, r0.z
mad r0.z, r0.z, l(6.28318548), cb1[70].w
sincos r3.x, r15.x, r0.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r0.z, -r12.xyzx, r11.xyzx
add r0.z, r0.z, r0.z
mad r16.xyz, r11.xyzx, -r0.zzzz, -r12.xyzx
mul r0.z, r2.y, l(17.000000)
exp r0.z, r0.z
add r0.z, r0.z, l(2.000000)
div r0.z, l(2.000000), r0.z
sqrt r0.w, r0.z
mul r1.zw, r9.xxxy, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r1.z, r1.zwzz, t27.yzxw, s4, l(0.000000)
mul r1.w, r1.z, r4.z
add r2.z, -r2.y, l(1.000000)
mul r2.w, r2.z, l(5.000000)
mad r5.w, r2.z, l(5.000000), l(-2.500000)
mul r5.w, r5.w, l(0.400000)
max r5.w, r5.w, l(0.000000)
mul r5.w, r5.w, l(100.000000)
mad r9.xy, -r2.zzzz, l(10.000000, 5.000000, 0.000000, 0.000000), l(6.857410, 7.085000, 0.000000, 0.000000)
exp r6.w, r9.x
mul r6.w, r2.x, r6.w
mul r6.w, r6.w, l(9.136810)
mul r7.w, r2.z, r2.w
mad r7.w, -r7.w, l(2.015905), r9.y
exp r7.w, r7.w
mul r7.w, r2.x, r7.w
mul r7.w, r7.w, l(9.708090)
max r6.w, r6.w, r7.w
max r6.w, r6.w, l(1.268160)
iadd r7.w, cb2[0].y, -cb2[58].x
ushr r9.xy, r0.yxyy, l(24, 24, 0, 0)
uge r0.y, r9.x, r7.w
ult r8.w, r9.x, cb2[0].y
and r0.y, r0.y, r8.w
if_nz r0.y
  imul null, r0.y, r9.x, l(14)
  add r15.yzw, r10.xxyz, -cb10[r0.y + 0].xxyz
  and r8.w, l(0x0000ffff), cb10[r0.y + 7].z
  ubfe r9.w, l(6), l(25), cb10[r0.y + 7].z
  imul null, r12.w, r8.w, l(6)
  dp3 r13.z, cb11[r12.w + 0].xyzx, r15.yzwy
  add_sat r13.z, r13.z, cb11[r12.w + 0].w
  dp3 r13.w, cb11[r12.w + 1].xyzx, r15.yzwy
  add_sat r13.w, r13.w, cb11[r12.w + 1].w
  mul r13.z, r13.w, r13.z
  dp3 r13.w, cb11[r12.w + 2].xyzx, r15.yzwy
  add_sat r13.w, r13.w, cb11[r12.w + 2].w
  mul r13.z, r13.w, r13.z
  dp3 r13.w, cb11[r12.w + 3].xyzx, r15.yzwy
  add_sat r13.w, r13.w, cb11[r12.w + 3].w
  mul r13.z, r13.w, r13.z
  dp3 r13.w, cb11[r12.w + 4].xyzx, r15.yzwy
  add_sat r13.w, r13.w, cb11[r12.w + 4].w
  mul r13.z, r13.w, r13.z
  dp3 r13.w, cb11[r12.w + 5].xyzx, r15.yzwy
  add_sat r12.w, r13.w, cb11[r12.w + 5].w
  mul r17.x, r12.w, r13.z
  and r12.w, l(1), cb10[r0.y + 6].x
  mov r17.yz, l(0,0,1.000000,0)
  movc r13.zw, r12.wwww, r17.xxxy, r17.zzzx
  mov r17.x, l(1.000000)
  mov r12.w, cb10[r0.y + 6].x
  mov r18.xy, r13.zwzz
  mov r14.w, l(1)
  loop 
    ige r17.z, r14.w, r9.w
    breakc_nz r17.z
    iadd r17.z, r8.w, r14.w
    imul null, r17.z, r17.z, l(6)
    dp3 r17.w, cb11[r17.z + 0].xyzx, r15.yzwy
    add_sat r17.w, r17.w, cb11[r17.z + 0].w
    mul r17.w, r17.w, r18.x
    dp3 r18.z, cb11[r17.z + 1].xyzx, r15.yzwy
    add_sat r18.z, r18.z, cb11[r17.z + 1].w
    mul r17.w, r17.w, r18.z
    dp3 r18.z, cb11[r17.z + 2].xyzx, r15.yzwy
    add_sat r18.z, r18.z, cb11[r17.z + 2].w
    mul r17.w, r17.w, r18.z
    dp3 r18.z, cb11[r17.z + 3].xyzx, r15.yzwy
    add_sat r18.z, r18.z, cb11[r17.z + 3].w
    mul r17.w, r17.w, r18.z
    dp3 r18.z, cb11[r17.z + 4].xyzx, r15.yzwy
    add_sat r18.z, r18.z, cb11[r17.z + 4].w
    mul r17.w, r17.w, r18.z
    dp3 r18.z, cb11[r17.z + 5].xyzx, r15.yzwy
    add_sat r17.z, r18.z, cb11[r17.z + 5].w
    mul r18.x, r17.z, r17.w
    ushr r18.z, r12.w, l(2)
    ubfe r18.w, l(1), l(2), r12.w
    and r19.x, r18.z, l(2)
    max r19.y, r18.x, r18.y
    mad r17.z, -r17.w, r17.z, l(1.000000)
    mul r17.z, r17.z, r18.y
    movc r17.y, r19.x, r17.z, r19.y
    movc r18.xy, r18.wwww, r18.xyxx, r17.xyxx
    iadd r14.w, r14.w, l(1)
    mov r12.w, r18.z
  endloop 
  mov_sat r18.y, r18.y
  mul r8.w, r18.y, cb10[r0.y + 6].y
  lt r9.w, l(0.000000), r8.w
  if_nz r9.w
    mul r9.w, r8.w, cb10[r0.y + 7].y
    mov r17.x, cb10[r0.y + 7].w
    mov r17.yz, cb10[r0.y + 8].xxyx
    dp3 r12.w, r16.xyzx, r17.xyzx
    dp3 r13.z, r15.yzwy, r17.xyzx
    add r13.z, r13.z, -cb10[r0.y + 8].z
    ge r13.w, r13.z, l(0.000000)
    max r13.z, r5.w, |r13.z|
    movc r13.z, r13.w, r13.z, -r13.z
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.z, r12.w
    min r12.w, |r12.w|, l(131072.000000)
    mov r17.x, cb10[r0.y + 8].w
    mov r17.yz, cb10[r0.y + 9].xxyx
    dp3 r13.z, r16.xyzx, r17.xyzx
    dp3 r13.w, r15.yzwy, r17.xyzx
    add r13.w, r13.w, -cb10[r0.y + 9].z
    ge r14.w, r13.w, l(0.000000)
    max r13.w, r5.w, |r13.w|
    movc r13.w, r14.w, r13.w, -r13.w
    max r13.z, -r13.z, l(0.00000010)
    div r13.z, r13.w, r13.z
    min r12.w, r12.w, |r13.z|
    mov r17.x, cb10[r0.y + 9].w
    mov r17.yz, cb10[r0.y + 10].xxyx
    dp3 r13.z, r16.xyzx, r17.xyzx
    dp3 r13.w, r15.yzwy, r17.xyzx
    add r13.w, r13.w, -cb10[r0.y + 10].z
    ge r14.w, r13.w, l(0.000000)
    max r13.w, r5.w, |r13.w|
    movc r13.w, r14.w, r13.w, -r13.w
    max r13.z, -r13.z, l(0.00000010)
    div r13.z, r13.w, r13.z
    min r12.w, r12.w, |r13.z|
    mov r17.x, cb10[r0.y + 10].w
    mov r17.yz, cb10[r0.y + 11].xxyx
    dp3 r13.z, r16.xyzx, r17.xyzx
    dp3 r13.w, r15.yzwy, r17.xyzx
    add r13.w, r13.w, -cb10[r0.y + 11].z
    ge r14.w, r13.w, l(0.000000)
    max r13.w, r5.w, |r13.w|
    movc r13.w, r14.w, r13.w, -r13.w
    max r13.z, -r13.z, l(0.00000010)
    div r13.z, r13.w, r13.z
    min r12.w, r12.w, |r13.z|
    mov r17.x, cb10[r0.y + 11].w
    mov r17.yz, cb10[r0.y + 12].xxyx
    dp3 r13.z, r16.xyzx, r17.xyzx
    dp3 r13.w, r15.yzwy, r17.xyzx
    add r13.w, r13.w, -cb10[r0.y + 12].z
    ge r14.w, r13.w, l(0.000000)
    max r13.w, r5.w, |r13.w|
    movc r13.w, r14.w, r13.w, -r13.w
    max r13.z, -r13.z, l(0.00000010)
    div r13.z, r13.w, r13.z
    min r12.w, r12.w, |r13.z|
    mov r17.x, cb10[r0.y + 12].w
    mov r17.yz, cb10[r0.y + 13].xxyx
    dp3 r13.z, r16.xyzx, r17.xyzx
    dp3 r13.w, r15.yzwy, r17.xyzx
    add r13.w, r13.w, -cb10[r0.y + 13].z
    ge r14.w, r13.w, l(0.000000)
    max r13.w, r5.w, |r13.w|
    movc r13.w, r14.w, r13.w, -r13.w
    max r13.z, -r13.z, l(0.00000010)
    div r13.z, r13.w, r13.z
    min r12.w, r12.w, |r13.z|
    add r17.x, r15.y, cb10[r0.y + 3].w
    add r17.yz, r15.zzwz, cb10[r0.y + 4].xxyx
    mad r17.xyz, r16.xyzx, r12.wwww, r17.xyzx
    dp3 r13.z, r17.xyzx, r17.xyzx
    sqrt r13.z, r13.z
    div r12.w, r12.w, r13.z
    add r12.w, r12.w, r12.w
    sqrt r12.w, r12.w
    mad r12.w, r2.z, l(5.000000), r12.w
    add r12.w, r12.w, l(-0.844800)
    mov r18.x, cb10[r0.y + 0].w
    mov r18.y, cb10[r0.y + 1].z
    mov r18.z, cb10[r0.y + 2].y
    dp3 r19.x, r17.xyzx, r18.xyzx
    mov r20.xy, cb10[r0.y + 1].xwxx
    mov r20.z, cb10[r0.y + 2].z
    dp3 r19.y, r17.xyzx, r20.xyzx
    mov r21.x, cb10[r0.y + 1].y
    mov r21.yz, cb10[r0.y + 2].xxwx
    dp3 r19.z, r17.xyzx, r21.xyzx
    ubfe r13.z, l(9), l(16), cb10[r0.y + 7].z
    utof r19.w, r13.z
    sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r19.xyzw, t8.xyzw, s2, r12.w
    dp3 r22.x, r15.yzwy, r18.xyzx
    dp3 r22.y, r15.yzwy, r20.xyzx
    dp3 r22.z, r15.yzwy, r21.xyzx
    mad_sat r15.yzw, r22.xxyz, cb10[r0.y + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    mul r22.xy, r15.yzyy, cb10[r0.y + 4].zwzz
    mul r22.z, r15.w, cb10[r0.y + 5].x
    add r15.yzw, r22.xxyz, cb10[r0.y + 5].yyzw
    dp3 r19.x, r11.xyzx, r18.xyzx
    dp3 r19.y, r11.xyzx, r20.xyzx
    dp3 r19.z, r11.xyzx, r21.xyzx
    lt r18.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r19.xyzx
    movc r20.z, r18.x, l(0), l(0.500000)
    mov r20.xy, l(0,0,0,0)
    add r20.xyz, r15.yzwy, r20.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
    mul r21.xyz, r19.xyzx, r19.xyzx
    mul r21.xyz, r9.wwww, r21.xyzx
    movc r22.z, r18.y, l(0), l(0.500000)
    mov r22.xy, l(0,0,0,0)
    add r18.xyw, r15.yzyw, r22.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyw, r18.xywx, t18.xywz, s4, l(0.000000)
    mul r18.xyw, r21.yyyy, r18.xyxw
    mad r18.xyw, r20.xyxz, r21.xxxx, r18.xyxw
    movc r20.z, r18.z, l(0), l(0.500000)
    mov r20.xy, l(0,0,0,0)
    add r15.yzw, r15.yyzw, r20.xxyz
    sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t19.wxyz, s4, l(0.000000)
    mad r15.yzw, r15.yyzw, r21.zzzz, r18.xxyw
    sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r19.xyzw, t8.xyzw, s2, l(6.000000)
    mul r15.yzw, r15.yyzw, r18.xxyz
    dp3 r0.y, r15.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r12.w, r0.y, r6.w
    mul r17.xyz, r9.wwww, r17.xyzx
    dp3 r9.w, r17.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r0.y, r6.w, r0.y, r9.w
    div r0.y, r12.w, r0.y
    mul r17.xyz, r0.yyyy, r17.xyzx
  else 
    mov r17.xyz, l(0,0,0,0)
    mov r8.w, l(0)
    mov r15.yzw, l(0,0,0,0)
  endif 
else 
  mov r17.xyz, l(0,0,0,0)
  mov r8.w, l(0)
  mov r15.yzw, l(0,0,0,0)
endif 
lt r0.y, r8.w, l(1.000000)
if_nz r0.y
  ult r0.y, r9.x, r7.w
  if_nz r0.y
    imul null, r0.y, r9.x, l(14)
    add r18.xyz, r10.xyzx, -cb10[r0.y + 0].xyzx
    and r7.w, l(0x0000ffff), cb10[r0.y + 7].z
    ubfe r9.x, l(6), l(25), cb10[r0.y + 7].z
    imul null, r9.w, r7.w, l(6)
    dp3 r12.w, cb11[r9.w + 0].xyzx, r18.xyzx
    add_sat r12.w, r12.w, cb11[r9.w + 0].w
    dp3 r13.z, cb11[r9.w + 1].xyzx, r18.xyzx
    add_sat r13.z, r13.z, cb11[r9.w + 1].w
    mul r12.w, r12.w, r13.z
    dp3 r13.z, cb11[r9.w + 2].xyzx, r18.xyzx
    add_sat r13.z, r13.z, cb11[r9.w + 2].w
    mul r12.w, r12.w, r13.z
    dp3 r13.z, cb11[r9.w + 3].xyzx, r18.xyzx
    add_sat r13.z, r13.z, cb11[r9.w + 3].w
    mul r12.w, r12.w, r13.z
    dp3 r13.z, cb11[r9.w + 4].xyzx, r18.xyzx
    add_sat r13.z, r13.z, cb11[r9.w + 4].w
    mul r12.w, r12.w, r13.z
    dp3 r13.z, cb11[r9.w + 5].xyzx, r18.xyzx
    add_sat r9.w, r13.z, cb11[r9.w + 5].w
    mul r19.x, r9.w, r12.w
    and r9.w, l(1), cb10[r0.y + 6].x
    mov r19.yz, l(0,0,1.000000,0)
    movc r13.zw, r9.wwww, r19.xxxy, r19.zzzx
    mov r19.x, l(1.000000)
    mov r9.w, cb10[r0.y + 6].x
    mov r20.xy, r13.zwzz
    mov r12.w, l(1)
    loop 
      ige r14.w, r12.w, r9.x
      breakc_nz r14.w
      iadd r14.w, r7.w, r12.w
      imul null, r14.w, r14.w, l(6)
      dp3 r17.w, cb11[r14.w + 0].xyzx, r18.xyzx
      add_sat r17.w, r17.w, cb11[r14.w + 0].w
      mul r17.w, r17.w, r20.x
      dp3 r18.w, cb11[r14.w + 1].xyzx, r18.xyzx
      add_sat r18.w, r18.w, cb11[r14.w + 1].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r14.w + 2].xyzx, r18.xyzx
      add_sat r18.w, r18.w, cb11[r14.w + 2].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r14.w + 3].xyzx, r18.xyzx
      add_sat r18.w, r18.w, cb11[r14.w + 3].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r14.w + 4].xyzx, r18.xyzx
      add_sat r18.w, r18.w, cb11[r14.w + 4].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r14.w + 5].xyzx, r18.xyzx
      add_sat r14.w, r18.w, cb11[r14.w + 5].w
      mul r20.x, r14.w, r17.w
      ushr r18.w, r9.w, l(2)
      ubfe r19.z, l(1), l(2), r9.w
      and r19.w, r18.w, l(2)
      max r20.z, r20.x, r20.y
      mad r14.w, -r17.w, r14.w, l(1.000000)
      mul r14.w, r14.w, r20.y
      movc r19.y, r19.w, r14.w, r20.z
      movc r20.xy, r19.zzzz, r20.xyxx, r19.xyxx
      iadd r12.w, r12.w, l(1)
      mov r9.w, r18.w
    endloop 
    add_sat r7.w, -r8.w, r20.y
    mul r9.x, r7.w, cb10[r0.y + 6].y
    lt r9.w, l(0.000000), r9.x
    if_nz r9.w
      mad r8.w, r7.w, cb10[r0.y + 6].y, r8.w
      mul r7.w, r9.x, cb10[r0.y + 7].y
      mov r19.x, cb10[r0.y + 7].w
      mov r19.yz, cb10[r0.y + 8].xxyx
      dp3 r9.x, r16.xyzx, r19.xyzx
      dp3 r9.w, r18.xyzx, r19.xyzx
      add r9.w, r9.w, -cb10[r0.y + 8].z
      ge r12.w, r9.w, l(0.000000)
      max r9.w, r5.w, |r9.w|
      movc r9.w, r12.w, r9.w, -r9.w
      max r9.x, -r9.x, l(0.00000010)
      div r9.x, r9.w, r9.x
      min r9.x, |r9.x|, l(131072.000000)
      mov r19.x, cb10[r0.y + 8].w
      mov r19.yz, cb10[r0.y + 9].xxyx
      dp3 r9.w, r16.xyzx, r19.xyzx
      dp3 r12.w, r18.xyzx, r19.xyzx
      add r12.w, r12.w, -cb10[r0.y + 9].z
      ge r13.z, r12.w, l(0.000000)
      max r12.w, r5.w, |r12.w|
      movc r12.w, r13.z, r12.w, -r12.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r12.w, r9.w
      min r9.x, |r9.w|, r9.x
      mov r19.x, cb10[r0.y + 9].w
      mov r19.yz, cb10[r0.y + 10].xxyx
      dp3 r9.w, r16.xyzx, r19.xyzx
      dp3 r12.w, r18.xyzx, r19.xyzx
      add r12.w, r12.w, -cb10[r0.y + 10].z
      ge r13.z, r12.w, l(0.000000)
      max r12.w, r5.w, |r12.w|
      movc r12.w, r13.z, r12.w, -r12.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r12.w, r9.w
      min r9.x, |r9.w|, r9.x
      mov r19.x, cb10[r0.y + 10].w
      mov r19.yz, cb10[r0.y + 11].xxyx
      dp3 r9.w, r16.xyzx, r19.xyzx
      dp3 r12.w, r18.xyzx, r19.xyzx
      add r12.w, r12.w, -cb10[r0.y + 11].z
      ge r13.z, r12.w, l(0.000000)
      max r12.w, r5.w, |r12.w|
      movc r12.w, r13.z, r12.w, -r12.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r12.w, r9.w
      min r9.x, |r9.w|, r9.x
      mov r19.x, cb10[r0.y + 11].w
      mov r19.yz, cb10[r0.y + 12].xxyx
      dp3 r9.w, r16.xyzx, r19.xyzx
      dp3 r12.w, r18.xyzx, r19.xyzx
      add r12.w, r12.w, -cb10[r0.y + 12].z
      ge r13.z, r12.w, l(0.000000)
      max r12.w, r5.w, |r12.w|
      movc r12.w, r13.z, r12.w, -r12.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r12.w, r9.w
      min r9.x, |r9.w|, r9.x
      mov r19.x, cb10[r0.y + 12].w
      mov r19.yz, cb10[r0.y + 13].xxyx
      dp3 r9.w, r16.xyzx, r19.xyzx
      dp3 r12.w, r18.xyzx, r19.xyzx
      add r12.w, r12.w, -cb10[r0.y + 13].z
      ge r13.z, r12.w, l(0.000000)
      max r5.w, r5.w, |r12.w|
      movc r5.w, r13.z, r5.w, -r5.w
      max r9.w, -r9.w, l(0.00000010)
      div r5.w, r5.w, r9.w
      min r5.w, |r5.w|, r9.x
      add r19.x, r18.x, cb10[r0.y + 3].w
      add r19.yz, r18.yyzy, cb10[r0.y + 4].xxyx
      mad r19.xyz, r16.xyzx, r5.wwww, r19.xyzx
      dp3 r9.x, r19.xyzx, r19.xyzx
      sqrt r9.x, r9.x
      div r5.w, r5.w, r9.x
      add r5.w, r5.w, r5.w
      sqrt r5.w, r5.w
      mad r2.z, r2.z, l(5.000000), r5.w
      add r2.z, r2.z, l(-0.844800)
      mov r20.x, cb10[r0.y + 0].w
      mov r20.y, cb10[r0.y + 1].z
      mov r20.z, cb10[r0.y + 2].y
      dp3 r21.x, r19.xyzx, r20.xyzx
      mov r22.xy, cb10[r0.y + 1].xwxx
      mov r22.z, cb10[r0.y + 2].z
      dp3 r21.y, r19.xyzx, r22.xyzx
      mov r23.x, cb10[r0.y + 1].y
      mov r23.yz, cb10[r0.y + 2].xxwx
      dp3 r21.z, r19.xyzx, r23.xyzx
      ubfe r5.w, l(9), l(16), cb10[r0.y + 7].z
      utof r21.w, r5.w
      sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r21.xyzw, t8.xyzw, s2, r2.z
      dp3 r24.x, r18.xyzx, r20.xyzx
      dp3 r24.y, r18.xyzx, r22.xyzx
      dp3 r24.z, r18.xyzx, r23.xyzx
      mad_sat r18.xyz, r24.xyzx, cb10[r0.y + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      mul r24.xy, r18.xyxx, cb10[r0.y + 4].zwzz
      mul r24.z, r18.z, cb10[r0.y + 5].x
      add r18.xyz, r24.xyzx, cb10[r0.y + 5].yzwy
      dp3 r21.x, r11.xyzx, r20.xyzx
      dp3 r21.y, r11.xyzx, r22.xyzx
      dp3 r21.z, r11.xyzx, r23.xyzx
      lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r21.xyzx
      movc r22.z, r20.x, l(0), l(0.500000)
      mov r22.xy, l(0,0,0,0)
      add r22.xyz, r18.xyzx, r22.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t17.xyzw, s4, l(0.000000)
      mul r23.xyz, r21.xyzx, r21.xyzx
      mul r23.xyz, r7.wwww, r23.xyzx
      movc r24.z, r20.y, l(0), l(0.500000)
      mov r24.xy, l(0,0,0,0)
      add r20.xyw, r18.xyxz, r24.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r20.xyw, r20.xywx, t18.xywz, s4, l(0.000000)
      mul r20.xyw, r23.yyyy, r20.xyxw
      mad r20.xyw, r22.xyxz, r23.xxxx, r20.xyxw
      movc r22.z, r20.z, l(0), l(0.500000)
      mov r22.xy, l(0,0,0,0)
      add r18.xyz, r18.xyzx, r22.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t19.xyzw, s4, l(0.000000)
      mad r18.xyz, r18.xyzx, r23.zzzz, r20.xywx
      sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r21.xyzw, t8.xyzw, s2, l(6.000000)
      mul r21.xyz, r18.xyzx, r20.xyzx
      dp3 r0.y, r21.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r15.yzw, r18.xxyz, r20.xxyz, r15.yyzw
      mul r2.z, r0.y, r6.w
      mul r18.xyz, r7.wwww, r19.xyzx
      dp3 r5.w, r18.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r0.y, r6.w, r0.y, r5.w
      div r0.y, r2.z, r0.y
      mad r17.xyz, r18.xyzx, r0.yyyy, r17.xyzx
    endif 
  endif 
endif 
max r0.y, r8.w, l(1.000000)
rcp r0.y, r0.y
mov_sat r8.w, r8.w
mul r18.xyz, r0.yyyy, r15.yzwy
mul r17.xyz, r0.yyyy, r17.xyzx
lt r2.z, r8.w, l(0.990000)
if_nz r2.z
  add r2.z, -r8.w, l(1.000000)
  mul r5.w, r2.z, cb2[19].x
  add r19.xyz, r10.xyzx, -cb2[35].xyzx
  mul r20.x, r19.x, cb2[35].w
  mul r20.yz, r19.yyzy, cb2[36].xxyx
  add_sat r19.xyz, r20.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r20.xy, r19.xyxx, cb2[36].zwzz
  mul r20.z, r19.z, cb2[37].x
  add r19.xyz, r20.xyzx, cb2[37].yzwy
  lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r20.xyz, r20.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r20.w, l(0)
  add r21.xyz, r19.xyzx, r20.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t17.xyzw, s4, l(0.000000)
  mul r22.xyz, r11.xyzx, r11.xyzx
  mul r22.xyz, r5.wwww, r22.xyzx
  add r23.xyz, r19.xyzx, r20.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r23.xyz, r23.xyzx, t18.xyzw, s4, l(0.000000)
  mul r23.xyz, r22.yyyy, r23.xyzx
  mad r21.xyz, r21.xyzx, r22.xxxx, r23.xyzx
  add r19.xyz, r19.xyzx, r20.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t19.xyzw, s4, l(0.000000)
  mad r19.xyz, r19.xyzx, r22.zzzz, r21.xyzx
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r19.xyz, r19.xyzx, r20.xyzx
  dp3 r5.w, r19.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r18.xyz, r15.yzwy, r0.yyyy, r19.xyzx
  mov r16.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r16.xyzw, t8.wxyz, s2, r2.w
  mad r0.y, cb2[19].x, r2.z, -r5.w
  mad r0.y, r2.y, r0.y, r5.w
  mad r17.xyz, r15.yzwy, r0.yyyy, r17.xyzx
endif 
mad r0.y, r4.z, r1.z, r2.x
log r0.y, |r0.y|
mul r0.y, r0.y, r0.w
exp r0.y, r0.y
mad r0.y, r4.z, r1.z, r0.y
add_sat r0.y, r0.y, l(-1.000000)
mul r15.yzw, r1.wwww, r18.xxyz
mad r1.zw, r2.xxxy, l(0.000000, 0.000000, 0.984375, 0.984375), l(0.000000, 0.000000, 0.00781250, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t5.zwxy, s2, l(0.000000)
mul r2.yzw, r0.yyyy, r17.xxyz
mul r17.xyz, r1.zzzz, r2.yzwy
mul r2.yzw, r1.wwww, r2.yyzw
sqrt r0.y, r0.w
mad r0.y, r0.y, l(0.500000), l(0.500000)
mul r0.y, r0.y, r0.y
mul r1.z, r0.y, l(0.500000)
mad r0.y, -r0.y, l(0.500000), l(1.000000)
mad r1.w, r2.x, r0.y, r1.z
mul r0.y, r0.y, r1.w
mul r1.z, r1.w, r1.z
ubfe r0.x, l(10), l(12), r0.x
mov r18.x, -r13.x
not r1.w, r9.z
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r10.w, l(1.000000)
mov r19.w, l(1.000000)
mov r18.z, r13.x
mov r20.z, l(1.000000)
mov r21.w, l(1.000000)
mov r22.w, l(1.000000)
mov r18.yw, r14.xxxx
mov r13.y, r18.w
mov r23.w, l(1.000000)
mov r14.y, r18.x
mov r14.z, r13.x
mov r24.w, l(1.000000)
mov r25.x, r14.x
mov r25.y, r18.x
mov r25.z, r13.x
mov r26.x, r14.x
mov r26.y, r18.x
mov r26.z, r13.x
mov r27.x, r14.x
mov r27.y, r18.x
mov r27.z, r13.x
mov r28.xyz, r15.yzwy
mov r29.xyz, r17.xyzx
mov r30.xyz, r2.yzwy
mov r4.z, l(0)
loop 
  ieq r5.w, r4.z, l(2)
  breakc_nz r5.w
  movc r5.w, r4.z, r0.x, r9.y
  imul null, r5.w, r5.w, l(15)
  ubfe r6.w, l(3), l(24), cb9[r5.w + 1].w
  switch r6.w
    case l(4)
    lt r6.w, l(0.000000), cb9[r5.w + 6].y
    mov r31.xy, cb9[r5.w + 5].zwzz
    mov r31.z, cb9[r5.w + 6].x
    mad r32.xyz, -r31.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), cb9[r5.w + 0].xyzx
    add r33.xyz, -r10.xyzx, r32.xyzx
    dp3 r7.w, r31.xyzx, r33.xyzx
    div_sat r8.w, -r7.w, cb9[r5.w + 6].y
    mad r34.xyz, r8.wwww, r31.xyzx, r32.xyzx
    movc r34.xyz, r6.wwww, r34.xyzx, cb9[r5.w + 0].xyzx
    add r34.xyz, -r10.xyzx, r34.xyzx
    dp3 r9.x, r34.xyzx, r34.xyzx
    rsq r9.w, r9.x
    mul r34.xyz, r9.wwww, r34.xyzx
    dp3 r9.w, r11.xyzx, r34.xyzx
    mov_sat r11.w, r9.w
    lt r12.w, l(0.000000), r11.w
    if_nz r12.w
      sqrt r12.w, r9.x
      mul r13.z, cb9[r5.w + 3].x, cb9[r5.w + 3].x
      div r9.x, r13.z, r9.x
      min r9.x, r9.x, l(1.000000)
      mad_sat r13.zw, r12.wwww, cb9[r5.w + 2].xxxz, cb9[r5.w + 2].yyyw
      mul r34.xy, r13.zwzz, r13.zwzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
      mul r13.zw, r13.zzzw, r34.xxxy
      mul r9.x, r9.x, r13.z
      mul r9.x, r13.w, r9.x
      lt r12.w, l(0.000000), r9.x
      if_nz r12.w
        ubfe r12.w, l(3), l(27), cb9[r5.w + 1].w
        ine r12.w, r12.w, l(1)
        if_nz r12.w
          mad r12.w, |r9.w|, l(-0.200000), l(0.400000)
          mad r34.xyz, r11.xyzx, r12.wwww, r10.xyzx
          add r34.xyz, r34.xyzx, -cb9[r5.w + 4].yzwy
          max r12.w, |r34.z|, |r34.y|
          max r12.w, r12.w, |r34.x|
          div r12.w, cb9[r5.w + 5].x, r12.w
          add r12.w, r12.w, cb9[r5.w + 5].y
          dp3 r13.z, r34.xyzx, r34.xyzx
          rsq r13.z, r13.z
          max r12.w, r12.w, l(0.00006104)
          and r13.w, l(0x0000ffff), cb9[r5.w + 1].w
          utof r35.w, r13.w
          mov r13.w, l(0)
          mov r14.w, l(0)
          loop 
            ige r16.w, r14.w, l(8)
            breakc_nz r16.w
            dp2 r36.y, icb[r14.w + 0].yxyy, r18.xyxx
            dp2 r36.z, icb[r14.w + 0].yxyy, r18.yzyy
            mul r36.yz, r36.yyzy, cb9[r5.w + 3].yyyy
            mul r36.x, r15.x, r36.y
            mul r36.w, r3.x, r36.y
            mad r35.xyz, r34.xyzx, r13.zzzz, r36.xzwx
            sample_c_lz_indexable(texturecubearray)(float,float,float,float) r16.w, r35.xyzw, t10.xxxx, s13, r12.w
            mad r13.w, r16.w, l(0.125000), r13.w
            iadd r14.w, r14.w, l(1)
          endloop 
        else 
          mov r13.w, l(1.000000)
        endif 
        mul r9.x, r9.x, r13.w
        lt r12.w, l(0.000000), r9.x
        if_nz r12.w
          mul r12.w, r0.z, cb9[r5.w + 1].z
          mul r12.w, r12.w, l(0.250000)
          dp3 r13.z, r31.xyzx, r16.xyzx
          dp3 r14.w, r16.xyzx, r33.xyzx
          mad r16.w, -r13.z, r13.z, cb9[r5.w + 6].y
          mad r7.w, r13.z, r14.w, -r7.w
          div_sat r7.w, r7.w, r16.w
          div r13.z, r16.w, cb9[r5.w + 6].y
          mul r13.z, r13.z, l(10.000000)
          min r13.z, r13.z, l(1.000000)
          add r7.w, -r8.w, r7.w
          mad r7.w, r13.z, r7.w, r8.w
          mad r31.xyz, r7.wwww, r31.xyzx, r32.xyzx
          movc r31.xyz, r6.wwww, r31.xyzx, cb9[r5.w + 0].xyzx
          add r31.xyz, -r10.xyzx, r31.xyzx
          dp3 r6.w, r31.xyzx, r31.xyzx
          rsq r6.w, r6.w
          mul r32.xyz, r6.wwww, r31.xyzx
          ubfe r7.w, l(4), l(16), cb9[r5.w + 1].w
          ult r8.w, l(0), r7.w
          and r8.w, r9.z, r8.w
          if_nz r8.w
            iadd r7.w, r7.w, cb2[0].x
            imad r7.w, r7.w, l(15), l(-15)
            mad r8.w, |r9.w|, l(-0.200000), l(0.400000)
            mad r19.xyz, r11.xyzx, r8.wwww, r10.xyzx
            mov r33.xyz, cb9[r7.w + 6].yzwy
            mov r33.w, cb9[r7.w + 7].x
            dp4 r8.w, r33.xyzw, r19.xyzw
            mov r33.xyz, cb9[r7.w + 7].yzwy
            mov r33.w, cb9[r7.w + 8].x
            dp4 r13.z, r33.xyzw, r19.xyzw
            lt r14.w, r13.z, r8.w
            if_z r14.w
              mov r33.xyz, cb9[r7.w + 4].yzwy
              mov r33.w, cb9[r7.w + 5].x
              dp4 r33.x, r33.xyzw, r19.xyzw
              mov r34.xyz, cb9[r7.w + 5].yzwy
              mov r34.w, cb9[r7.w + 6].x
              dp4 r33.y, r34.xyzw, r19.xyzw
              div r19.xy, r33.xyxx, r13.zzzz
              mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r33.x, r19.x, cb9[r7.w + 9].w
              add r33.y, r19.y, cb9[r7.w + 10].x
              mul r19.xy, r33.xyxx, cb9[r7.w + 9].yzyy
              div r33.xy, cb9[r7.w + 3].yyyy, cb9[r7.w + 8].ywyy
              add r33.zw, -r33.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              ge r33.zw, r19.xxxy, r33.zzzw
              ge r33.xy, r33.xyxx, r19.xyxx
              or r33.xy, r33.xyxx, r33.zwzz
              or r16.w, r33.y, r33.x
              if_z r16.w
                mov_sat r19.xy, r19.xyxx
                mad r33.x, r19.x, cb9[r7.w + 8].y, cb9[r7.w + 8].z
                mad r33.y, r19.y, cb9[r7.w + 8].w, cb9[r7.w + 9].x
                mul r17.w, r13.z, cb9[r7.w + 10].z
                mad r8.w, cb9[r7.w + 10].y, r13.z, r8.w
                div r8.w, r8.w, r17.w
              endif 
            else 
              mov r16.w, l(-1)
            endif 
            or r13.z, r14.w, r16.w
            if_z r13.z
              max r8.w, r8.w, l(0.00006104)
              and r13.z, l(0x0000ffff), cb9[r7.w + 1].w
              if_nz cb2[58].y
                utof r19.z, r13.z
                mov r14.w, l(0)
                mov r16.w, l(0)
                loop 
                  ige r17.w, r16.w, l(8)
                  breakc_nz r17.w
                  dp2 r34.x, icb[r16.w + 0].yxyy, r18.xwxx
                  dp2 r34.y, icb[r16.w + 0].xyxx, r13.xyxx
                  mad r19.xy, r34.xyxx, cb9[r7.w + 3].yyyy, r33.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r19.xyzx, t9.xxxx, s13, r8.w
                  mad r14.w, r17.w, l(0.125000), r14.w
                  iadd r16.w, r16.w, l(1)
                endloop 
              else 
                utof r33.z, r13.z
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r33.xyzx, t9.xxxx, s13, r8.w
              endif 
              mul r7.w, r14.w, r14.w
              mul r7.w, r14.w, r7.w
            else 
              mov r7.w, l(1.000000)
            endif 
            mul r9.x, r7.w, r9.x
          else 
            ubfe r7.w, l(4), l(20), cb9[r5.w + 1].w
            ult r8.w, l(0), r7.w
            and r8.w, r1.w, r8.w
            if_nz r8.w
              iadd r7.w, r7.w, cb2[0].x
              imad r7.w, r7.w, l(15), l(-15)
              mad r8.w, |r9.w|, l(-0.200000), l(0.400000)
              mad r21.xyz, r11.xyzx, r8.wwww, r10.xyzx
              mov r33.xyz, cb9[r7.w + 6].yzwy
              mov r33.w, cb9[r7.w + 7].x
              dp4 r8.w, r33.xyzw, r21.xyzw
              mov r33.xyz, cb9[r7.w + 7].yzwy
              mov r33.w, cb9[r7.w + 8].x
              dp4 r13.z, r33.xyzw, r21.xyzw
              lt r16.w, r13.z, r8.w
              if_z r16.w
                mov r33.xyz, cb9[r7.w + 4].yzwy
                mov r33.w, cb9[r7.w + 5].x
                dp4 r19.x, r33.xyzw, r21.xyzw
                mov r33.xyz, cb9[r7.w + 5].yzwy
                mov r33.w, cb9[r7.w + 6].x
                dp4 r19.y, r33.xyzw, r21.xyzw
                div r19.xy, r19.xyxx, r13.zzzz
                mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r21.x, r19.x, cb9[r7.w + 9].w
                add r21.y, r19.y, cb9[r7.w + 10].x
                mul r19.xy, r21.xyxx, cb9[r7.w + 9].yzyy
                div r21.xy, cb9[r7.w + 3].yyyy, cb9[r7.w + 8].ywyy
                add r33.xy, -r21.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r33.xy, r19.xyxx, r33.xyxx
                ge r21.xy, r21.xyxx, r19.xyxx
                or r21.xy, r21.xyxx, r33.xyxx
                or r17.w, r21.y, r21.x
                if_z r17.w
                  mov_sat r19.xy, r19.xyxx
                  mad r21.x, r19.x, cb9[r7.w + 8].y, cb9[r7.w + 8].z
                  mad r21.y, r19.y, cb9[r7.w + 8].w, cb9[r7.w + 9].x
                  mul r19.x, r13.z, cb9[r7.w + 10].z
                  mad r8.w, cb9[r7.w + 10].y, r13.z, r8.w
                  div r8.w, r8.w, r19.x
                endif 
              else 
                mov r17.w, l(-1)
              endif 
              or r13.z, r16.w, r17.w
              if_z r13.z
                max r8.w, r8.w, l(0.00006104)
                and r13.z, l(0x0000ffff), cb9[r7.w + 1].w
                if_nz cb2[58].y
                  utof r19.z, r13.z
                  mov r16.w, l(0)
                  mov r17.w, l(0)
                  loop 
                    ige r20.w, r17.w, l(8)
                    breakc_nz r20.w
                    dp2 r33.x, icb[r17.w + 0].xyxx, r14.xyxx
                    dp2 r33.y, icb[r17.w + 0].yxyy, r14.xzxx
                    mad r19.xy, r33.xyxx, cb9[r7.w + 3].yyyy, r21.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r19.x, r19.xyzx, t9.xxxx, s13, r8.w
                    mad r16.w, r19.x, l(0.125000), r16.w
                    iadd r17.w, r17.w, l(1)
                  endloop 
                else 
                  utof r21.z, r13.z
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r21.xyzx, t9.xxxx, s13, r8.w
                endif 
                mul r7.w, r16.w, r16.w
                mul r7.w, r16.w, r7.w
              else 
                mov r7.w, l(1.000000)
              endif 
              mul r9.x, r7.w, r9.x
            endif 
          endif 
          mad r7.w, -r11.w, r2.x, l(1.000000)
          mul r7.w, r7.w, r7.w
          mad r7.w, -r7.w, l(0.620000), l(0.620000)
          add r7.w, -r11.w, r7.w
          mad r7.w, r0.w, r7.w, r11.w
          mul r7.w, r9.x, r7.w
          mov r19.x, cb9[r5.w + 0].w
          mov r19.yz, cb9[r5.w + 1].xxyx
          lt r8.w, l(0.000000), r9.w
          mad r21.xyz, r7.wwww, r19.xyzx, r28.xyzx
          dp3_sat r7.w, r11.xyzx, r32.xyzx
          mad r31.xyz, r31.xyzx, r6.wwww, r12.xyzx
          dp3 r6.w, r31.xyzx, r31.xyzx
          rsq r6.w, r6.w
          mul r31.xyz, r6.wwww, r31.xyzx
          dp3 r6.w, r31.xyzx, r12.xyzx
          dp3 r9.w, r11.xyzx, r31.xyzx
          mad r11.w, |r9.w|, r0.z, -|r9.w|
          mad r9.w, |r9.w|, r11.w, l(1.000000)
          mad r11.w, r7.w, r0.y, r1.z
          mul r9.w, r9.w, r9.w
          mul r9.w, r11.w, r9.w
          rcp r9.w, r9.w
          mul r7.w, r12.w, r7.w
          mul r7.w, r7.w, r9.w
          mul r7.w, r9.x, r7.w
          mad r31.xyz, r7.wwww, r19.xyzx, r30.xyzx
          add_sat r6.w, -r6.w, l(1.000000)
          mul r9.x, r6.w, r6.w
          mul r9.x, r9.x, r9.x
          mul r6.w, r6.w, r9.x
          mul r6.w, r6.w, r7.w
          mad r19.xyz, r6.wwww, r19.xyzx, r29.xyzx
          movc r28.xyz, r8.wwww, r21.xyzx, r28.xyzx
          movc r29.xyz, r8.wwww, r19.xyzx, r29.xyzx
          movc r30.xyz, r8.wwww, r31.xyzx, r30.xyzx
        endif 
      endif 
    endif 
    break 
    case l(2)
    add r19.xy, -r10.xyxx, cb9[r5.w + 3].zwzz
    add r19.z, -r10.z, cb9[r5.w + 4].x
    dp3 r6.w, r19.xyzx, r19.xyzx
    rsq r6.w, r6.w
    mul r21.xyz, r6.wwww, r19.xyzx
    dp3 r7.w, r11.xyzx, r21.xyzx
    mov_sat r8.w, r7.w
    lt r9.x, l(0.000000), r8.w
    if_nz r9.x
      mov r31.xyz, cb9[r5.w + 7].yzwy
      mov r31.w, cb9[r5.w + 8].x
      dp4 r9.x, r31.xyzw, r10.xyzw
      lt r9.w, r9.x, l(1.000000)
      if_nz r9.w
        mov r21.xyz, l(1.000000,1.000000,1.000000,0)
        mov r9.w, l(0)
      else 
        add r32.xyz, -r10.xyzx, cb9[r5.w + 0].xyzx
        mul r11.w, cb9[r5.w + 3].x, cb9[r5.w + 3].x
        dp3 r12.w, r32.xyzx, r32.xyzx
        div r11.w, r11.w, r12.w
        min r11.w, r11.w, l(1.000000)
        mad_sat r32.xy, r9.xxxx, cb9[r5.w + 2].xzxx, cb9[r5.w + 2].ywyy
        mul r32.zw, r32.xxxy, r32.xxxy
        mad r32.xy, r32.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r32.xy, r32.xyxx, r32.zwzz
        mul r11.w, r11.w, r32.x
        mul r11.w, r32.y, r11.w
        mov r32.xyz, cb9[r5.w + 4].yzwy
        mov r32.w, cb9[r5.w + 5].x
        dp4 r32.x, r32.xyzw, r10.xyzw
        mov r33.xyz, cb9[r5.w + 5].yzwy
        mov r33.w, cb9[r5.w + 6].x
        dp4 r32.y, r33.xyzw, r10.xyzw
        div r20.xy, r32.xyxx, r9.xxxx
        lt r9.x, cb9[r5.w + 10].w, l(0.00048828)
        if_nz r9.x
          mad_sat r32.xy, |r20.xyxx|, cb9[r5.w + 12].xyxx, cb9[r5.w + 12].zwzz
          mul r32.zw, r32.xxxy, r32.xxxy
          mad r32.xy, r32.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r32.xy, r32.xyxx, r32.zwzz
          mul r9.x, r32.y, r32.x
        else 
          mul_sat r32.xyzw, |r20.yyxx|, cb9[r5.w + 11].xyzw
          log r32.xyzw, r32.xyzw
          mul r32.xyzw, r32.xyzw, cb9[r5.w + 12].zzzz
          exp r32.xyzw, r32.xyzw
          add r32.xy, r32.zwzz, r32.xyxx
          log r32.xy, r32.xyxx
          mul r32.xy, r32.xyxx, cb9[r5.w + 12].wwww
          exp r32.xy, r32.xyxx
          mul r12.w, r32.x, cb9[r5.w + 12].x
          mad r13.z, cb9[r5.w + 12].y, r32.y, l(-1.000000)
          mad r12.w, cb9[r5.w + 12].y, r32.y, -r12.w
          div_sat r12.w, r13.z, r12.w
          mul r13.z, r12.w, r12.w
          mad r12.w, r12.w, l(-2.000000), l(3.000000)
          mul r9.x, r12.w, r13.z
        endif 
        mul r9.w, r9.x, r11.w
        and r9.x, l(255), cb9[r5.w + 14].w
        if_nz r9.x
          dp3 r11.w, cb9[r5.w + 13].xyzx, r20.xyzx
          mov r32.x, cb9[r5.w + 13].w
          mov r32.yz, cb9[r5.w + 14].xxyx
          dp3 r12.w, r32.xyzx, r20.xyzx
          frc r32.x, r11.w
          frc r32.y, r12.w
          iadd r9.x, r9.x, l(-1)
          utof r32.z, r9.x
          sample_l_indexable(texture2darray)(float,float,float,float) r21.xyz, r32.xyzx, t20.xyzw, s2, l(0.000000)
        else 
          mov r21.xyz, l(1.000000,1.000000,1.000000,0)
        endif 
      endif 
      mov r32.x, cb9[r5.w + 0].w
      mov r32.yz, cb9[r5.w + 1].xxyx
      mul r20.xyw, r21.xyxz, r32.xyxz
      lt r9.x, l(0.000000), r9.w
      if_nz r9.x
        ubfe r9.x, l(3), l(27), cb9[r5.w + 1].w
        ine r9.x, r9.x, l(1)
        if_nz r9.x
          mad r9.x, |r7.w|, l(-0.200000), l(0.400000)
          mad r22.xyz, r11.xyzx, r9.xxxx, r10.xyzx
          mov r32.xyz, cb9[r5.w + 6].yzwy
          mov r32.w, cb9[r5.w + 7].x
          dp4 r9.x, r32.xyzw, r22.xyzw
          dp4 r11.w, r31.xyzw, r22.xyzw
          ge r12.w, r11.w, r9.x
          if_nz r12.w
            mov r31.xyz, cb9[r5.w + 4].yzwy
            mov r31.w, cb9[r5.w + 5].x
            dp4 r21.x, r31.xyzw, r22.xyzw
            mov r31.xyz, cb9[r5.w + 5].yzwy
            mov r31.w, cb9[r5.w + 6].x
            dp4 r21.y, r31.xyzw, r22.xyzw
            div r21.xy, r21.xyxx, r11.wwww
            mad_sat r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            mad r22.x, r21.x, cb9[r5.w + 8].y, cb9[r5.w + 8].z
            mad r22.y, r21.y, cb9[r5.w + 8].w, cb9[r5.w + 9].x
            div r9.x, r9.x, r11.w
            max r9.x, r9.x, l(0.00006104)
            and r11.w, l(0x0000ffff), cb9[r5.w + 1].w
            if_nz cb2[58].y
              utof r21.z, r11.w
              mov r12.w, l(0)
              mov r13.z, l(0)
              loop 
                ige r17.w, r13.z, l(8)
                breakc_nz r17.w
                dp2 r31.x, icb[r13.z + 0].xyxx, r25.xyxx
                dp2 r31.y, icb[r13.z + 0].yxyy, r25.xzxx
                mad r21.xy, r31.xyxx, cb9[r5.w + 3].yyyy, r22.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r21.xyzx, t9.xxxx, s13, r9.x
                mad r12.w, r17.w, l(0.125000), r12.w
                iadd r13.z, r13.z, l(1)
              endloop 
            else 
              utof r22.z, r11.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r22.xyzx, t9.xxxx, s13, r9.x
            endif 
            mul r9.x, r12.w, r12.w
            mul r9.x, r12.w, r9.x
          else 
            mov r9.x, l(1.000000)
          endif 
        else 
          mov r9.x, l(1.000000)
        endif 
        mul r9.x, r9.x, r9.w
        lt r9.w, l(0.000000), r9.x
        if_nz r9.w
          mul r9.w, r0.z, cb9[r5.w + 1].z
          mul r9.w, r8.w, r9.w
          ubfe r11.w, l(4), l(16), cb9[r5.w + 1].w
          ult r13.z, l(0), r11.w
          and r13.z, r9.z, r13.z
          if_nz r13.z
            iadd r11.w, r11.w, cb2[0].x
            imad r11.w, r11.w, l(15), l(-15)
            mad r13.z, |r7.w|, l(-0.200000), l(0.400000)
            mad r23.xyz, r11.xyzx, r13.zzzz, r10.xyzx
            mov r31.xyz, cb9[r11.w + 6].yzwy
            mov r31.w, cb9[r11.w + 7].x
            dp4 r13.z, r31.xyzw, r23.xyzw
            mov r31.xyz, cb9[r11.w + 7].yzwy
            mov r31.w, cb9[r11.w + 8].x
            dp4 r17.w, r31.xyzw, r23.xyzw
            lt r21.x, r17.w, r13.z
            if_z r21.x
              mov r31.xyz, cb9[r11.w + 4].yzwy
              mov r31.w, cb9[r11.w + 5].x
              dp4 r22.x, r31.xyzw, r23.xyzw
              mov r31.xyz, cb9[r11.w + 5].yzwy
              mov r31.w, cb9[r11.w + 6].x
              dp4 r22.y, r31.xyzw, r23.xyzw
              div r21.yz, r22.xxyx, r17.wwww
              mad r21.yz, r21.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
              add r22.x, r21.y, cb9[r11.w + 9].w
              add r22.y, r21.z, cb9[r11.w + 10].x
              mul r21.yz, r22.xxyx, cb9[r11.w + 9].yyzy
              div r22.xy, cb9[r11.w + 3].yyyy, cb9[r11.w + 8].ywyy
              add r23.xy, -r22.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r23.xy, r21.yzyy, r23.xyxx
              ge r22.xy, r22.xyxx, r21.yzyy
              or r22.xy, r22.xyxx, r23.xyxx
              or r22.x, r22.y, r22.x
              if_z r22.x
                mov_sat r21.yz, r21.yyzy
                mad r23.x, r21.y, cb9[r11.w + 8].y, cb9[r11.w + 8].z
                mad r23.y, r21.z, cb9[r11.w + 8].w, cb9[r11.w + 9].x
                mul r21.y, r17.w, cb9[r11.w + 10].z
                mad r13.z, cb9[r11.w + 10].y, r17.w, r13.z
                div r13.z, r13.z, r21.y
              endif 
            else 
              mov r22.x, l(-1)
            endif 
            or r17.w, r21.x, r22.x
            if_z r17.w
              max r13.z, r13.z, l(0.00006104)
              and r17.w, l(0x0000ffff), cb9[r11.w + 1].w
              if_nz cb2[58].y
                utof r21.z, r17.w
                mov r22.xy, l(0,0,0,0)
                loop 
                  ige r22.z, r22.y, l(8)
                  breakc_nz r22.z
                  dp2 r31.x, icb[r22.y + 0].xyxx, r26.xyxx
                  dp2 r31.y, icb[r22.y + 0].yxyy, r26.xzxx
                  mad r21.xy, r31.xyxx, cb9[r11.w + 3].yyyy, r23.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r13.z
                  mad r22.x, r21.x, l(0.125000), r22.x
                  iadd r22.y, r22.y, l(1)
                endloop 
              else 
                utof r23.z, r17.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r23.xyzx, t9.xxxx, s13, r13.z
              endif 
              mul r11.w, r22.x, r22.x
              mul r11.w, r22.x, r11.w
            else 
              mov r11.w, l(1.000000)
            endif 
            mul r9.x, r9.x, r11.w
          else 
            ubfe r5.w, l(4), l(20), cb9[r5.w + 1].w
            ult r11.w, l(0), r5.w
            and r11.w, r1.w, r11.w
            if_nz r11.w
              iadd r5.w, r5.w, cb2[0].x
              imad r5.w, r5.w, l(15), l(-15)
              mad r11.w, |r7.w|, l(-0.200000), l(0.400000)
              mad r24.xyz, r11.xyzx, r11.wwww, r10.xyzx
              mov r31.xyz, cb9[r5.w + 6].yzwy
              mov r31.w, cb9[r5.w + 7].x
              dp4 r11.w, r31.xyzw, r24.xyzw
              mov r31.xyz, cb9[r5.w + 7].yzwy
              mov r31.w, cb9[r5.w + 8].x
              dp4 r13.z, r31.xyzw, r24.xyzw
              lt r17.w, r13.z, r11.w
              if_z r17.w
                mov r31.xyz, cb9[r5.w + 4].yzwy
                mov r31.w, cb9[r5.w + 5].x
                dp4 r21.x, r31.xyzw, r24.xyzw
                mov r31.xyz, cb9[r5.w + 5].yzwy
                mov r31.w, cb9[r5.w + 6].x
                dp4 r21.y, r31.xyzw, r24.xyzw
                div r21.xy, r21.xyxx, r13.zzzz
                mad r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r23.x, r21.x, cb9[r5.w + 9].w
                add r23.y, r21.y, cb9[r5.w + 10].x
                mul r21.xy, r23.xyxx, cb9[r5.w + 9].yzyy
                div r22.yz, cb9[r5.w + 3].yyyy, cb9[r5.w + 8].yywy
                add r23.xy, -r22.yzyy, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r23.xy, r21.xyxx, r23.xyxx
                ge r22.yz, r22.yyzy, r21.xxyx
                or r22.yz, r22.yyzy, r23.xxyx
                or r21.z, r22.z, r22.y
                if_z r21.z
                  mov_sat r21.xy, r21.xyxx
                  mad r23.x, r21.x, cb9[r5.w + 8].y, cb9[r5.w + 8].z
                  mad r23.y, r21.y, cb9[r5.w + 8].w, cb9[r5.w + 9].x
                  mul r21.x, r13.z, cb9[r5.w + 10].z
                  mad r11.w, cb9[r5.w + 10].y, r13.z, r11.w
                  div r11.w, r11.w, r21.x
                endif 
              else 
                mov r21.z, l(-1)
              endif 
              or r13.z, r17.w, r21.z
              if_z r13.z
                max r11.w, r11.w, l(0.00006104)
                and r13.z, l(0x0000ffff), cb9[r5.w + 1].w
                if_nz cb2[58].y
                  utof r21.z, r13.z
                  mov r17.w, l(0)
                  mov r22.y, l(0)
                  loop 
                    ige r22.z, r22.y, l(8)
                    breakc_nz r22.z
                    dp2 r24.x, icb[r22.y + 0].xyxx, r27.xyxx
                    dp2 r24.y, icb[r22.y + 0].yxyy, r27.xzxx
                    mad r21.xy, r24.xyxx, cb9[r5.w + 3].yyyy, r23.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r11.w
                    mad r17.w, r21.x, l(0.125000), r17.w
                    iadd r22.y, r22.y, l(1)
                  endloop 
                else 
                  utof r23.z, r13.z
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r23.xyzx, t9.xxxx, s13, r11.w
                endif 
                mul r5.w, r17.w, r17.w
                mul r5.w, r17.w, r5.w
              else 
                mov r5.w, l(1.000000)
              endif 
              mul r9.x, r5.w, r9.x
            endif 
          endif 
          mad r5.w, -r8.w, r2.x, l(1.000000)
          mul r5.w, r5.w, r5.w
          mad r5.w, -r5.w, l(0.620000), l(0.620000)
          add r5.w, -r8.w, r5.w
          mad r5.w, r0.w, r5.w, r8.w
          mul r5.w, r9.x, r5.w
          lt r7.w, l(0.000000), r7.w
          mad r21.xyz, r5.wwww, r20.xywx, r28.xyzx
          mad r19.xyz, r19.xyzx, r6.wwww, r12.xyzx
          dp3 r5.w, r19.xyzx, r19.xyzx
          rsq r5.w, r5.w
          mul r19.xyz, r5.wwww, r19.xyzx
          dp3 r5.w, r19.xyzx, r12.xyzx
          dp3 r6.w, r11.xyzx, r19.xyzx
          mad r11.w, |r6.w|, r0.z, -|r6.w|
          mad r6.w, |r6.w|, r11.w, l(1.000000)
          mad r8.w, r8.w, r0.y, r1.z
          mul r6.w, r6.w, r6.w
          mul r6.w, r8.w, r6.w
          rcp r6.w, r6.w
          mul r6.w, r9.w, r6.w
          mul r6.w, r6.w, r9.x
          mul r6.w, r6.w, l(0.250000)
          mad r19.xyz, r6.wwww, r20.xywx, r30.xyzx
          add_sat r5.w, -r5.w, l(1.000000)
          mul r8.w, r5.w, r5.w
          mul r8.w, r8.w, r8.w
          mul r5.w, r5.w, r8.w
          mul r5.w, r5.w, r6.w
          mad r20.xyw, r5.wwww, r20.xyxw, r29.xyxz
          movc r28.xyz, r7.wwww, r21.xyzx, r28.xyzx
          movc r29.xyz, r7.wwww, r20.xywx, r29.xyzx
          movc r30.xyz, r7.wwww, r19.xyzx, r30.xyzx
        endif 
      endif 
    endif 
    break 
    default 
    break 
  endswitch 
  iadd r4.z, r4.z, l(1)
endloop 
mad r0.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r1.z, r0.y
mad r2.xyz, r5.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r2.x
ieq r1.w, r1.z, r1.w
movc r2.xy, r1.wwww, r2.yzyy, l(-1.000000,0,0,0)
mad r4.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r4.x
ieq r1.w, r1.z, r1.w
movc r2.zw, r1.wwww, r4.yyyz, l(0,0,-1.000000,0)
mad r4.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r4.x
ieq r1.w, r1.z, r1.w
movc r4.xy, r1.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r5.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r1.z, r1.z, r1.w
movc r1.zw, r1.zzzz, r5.yyyz, l(0,0,-1.000000,0)
mov r5.xy, r2.xzxx
mov r5.z, r4.x
mov r5.w, r1.z
add r5.xyzw, -r0.xxxx, r5.xyzw
ge r5.xyzw, |r5.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r5.xyzw, r5.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r1.z, r5.y, r5.x
add r1.z, r5.z, r1.z
add r1.z, r5.w, r1.z
mul r2.x, r2.w, r5.y
mad r2.x, r5.x, r2.y, r2.x
mad r2.x, r5.z, r4.y, r2.x
mad r1.w, r5.w, r1.w, r2.x
div r0.w, r1.w, r1.z
ge r1.z, l(0.000000), r1.z
movc r0.yz, r1.zzzz, l(0,0,0,0), r0.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.w, r1.w, r1.z
movc r0.xyz, r0.wwww, r0.xyzx, r0.xzyx
mad r0.x, -r0.z, l(0.500000), r0.x
add r2.y, r0.x, r0.z
mad r2.z, -r0.y, l(0.500000), r0.x
add r2.x, r0.y, r2.z
add r0.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r29.xyzx
mad r0.xyz, r30.xyzx, r2.xyzx, r0.xyzx
mad r0.xyz, r28.xyzx, r3.yzwy, r0.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r10.xyzx, r10.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r10.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r10.z|
    mul r3.xy, r10.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r10.z|
    mul r2.w, r10.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r10.z, cb2[6].x
  mad r1.z, cb2[6].x, r10.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r10.xyzx, r10.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r10.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 1353 instruction slots used
