//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:24:07 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 43
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(20), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r0.w, r1.xyww, t4.yzwx
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
utof r4.xy, r1.xyxx
add r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ge r5.x, r0.w, l(0.984375)
mul r5.z, r0.w, l(1.01587307)
mad r0.w, r0.w, l(64.000000), l(-63.000000)
movc r0.w, r5.x, r0.w, r5.z
max r0.w, r0.w, l(0.00000001)
rcp r5.y, r0.w
and r0.zw, r0.zzzz, r5.xxxy
mul r5.xy, r4.zwzz, cb1[44].zwzz
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t28.xyzw, s4.x
mul r7.xy, r4.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
frc r7.xy, r7.xyxx
add r7.zw, -r7.yyyx, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r8.xyzw, r7.zzwy, r7.xwyx
dp4 r7.x, r6.xyzw, r8.xyzw
add r5.xyzw, -r0.wwww, r5.xyzw
min r7.y, |r5.w|, |r5.z|
min r7.y, |r5.y|, r7.y
min r7.y, |r5.x|, r7.y
max r7.z, |r5.w|, |r5.z|
max r7.z, |r5.y|, r7.z
max r5.x, |r5.x|, r7.z
eq r5.yzw, |r5.yyzw|, r7.yyyy
movc r5.y, r5.y, r6.y, r6.x
movc r5.y, r5.z, r6.z, r5.y
movc r5.y, r5.w, r6.w, r5.y
mul r5.z, r0.w, l(0.010000)
lt r5.x, r5.z, r5.x
movc r5.x, r5.x, r5.y, r7.x
mul r3.z, r3.z, r5.x
if_nz cb2[55].x
  mul r5.x, r3.z, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r5.xxxx
  ret 
else 
  movc r5.x, cb2[54].w, r3.z, l(1.000000)
endif 
ge r3.z, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.yzw, r1.xyww, t0.wxyz
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
add r1.zw, r4.zzzw, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r10.x, r1.z, cb1[12].x
mul r10.y, r1.w, cb1[13].y
mov r10.z, l(1.000000)
mul r10.xyz, r0.wwww, r10.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r1.zw, r2.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.850000, 0.850000)
dp2 r2.x, r1.zwzz, r1.zwzz
add r11.zw, -r2.xxxx, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.x, r11.z
mul r11.xy, r1.zwzz, r2.xxxx
and r12.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r12.w, r12.z
movc r12.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.w, r3.z, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r10.xyzx, -r10.xyzx
rsq r0.w, r0.w
mul r12.xyz, r0.wwww, -r10.xyzx
dp2 r0.w, r4.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r4.x, r13.x, r0.w
utof r1.zw, r1.yyyx
dp2 r0.w, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r14.x, r15.x, r0.w
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r0.w, -r12.xyzx, r11.xyzx
add r0.w, r0.w, r0.w
mad r16.xyz, r11.xyzx, -r0.wwww, -r12.xyzx
mul r0.w, r2.y, l(17.000000)
exp r0.w, r0.w
add r0.w, r0.w, l(2.000000)
div r0.w, l(2.000000), r0.w
sqrt r1.z, r0.w
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r2.zw, r2.zzzw
ieq r2.zw, r1.xxxy, r2.zzzw
and r1.w, r2.w, r2.z
add r2.z, -r2.y, l(1.000000)
mul r2.z, r2.z, l(5.000000)
add r14.yzw, r10.xxyz, -cb2[35].xxyz
mul r17.x, r14.y, cb2[35].w
mul r17.yz, r14.zzwz, cb2[36].xxyx
add_sat r14.yzw, r17.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
mul r17.xy, r14.yzyy, cb2[36].zwzz
mul r17.z, r14.w, cb2[37].x
add r14.yzw, r17.xxyz, cb2[37].yyzw
lt r15.yzw, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xxyz
movc r17.xyz, r15.yzwy, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
mov r17.w, l(0)
add r15.yzw, r14.yyzw, r17.wwwx
sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t17.wxyz, s4, l(0.000000)
mul r18.xyz, r11.xyzx, r11.xyzx
mul r18.xyz, r18.xyzx, cb2[19].xxxx
add r19.xyz, r14.yzwy, r17.wwyw
sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t18.xyzw, s4, l(0.000000)
mul r19.xyz, r18.yyyy, r19.xyzx
mad r15.yzw, r15.yyzw, r18.xxxx, r19.xxyz
add r14.yzw, r14.yyzw, r17.wwwz
sample_l_indexable(texture3d)(float,float,float,float) r14.yzw, r14.yzwy, t19.wxyz, s4, l(0.000000)
mad r14.yzw, r14.yyzw, r18.zzzz, r15.yyzw
mov r11.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r11.xyzw, t8.wxyz, s2, l(6.000000)
mul r14.yzw, r14.yyzw, r15.yyzw
dp3 r2.w, r14.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
mov r16.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r16.xyzw, t8.wxyz, s2, r2.z
add r2.z, -r2.w, cb2[19].x
mad r2.z, r2.y, r2.z, r2.w
mul r15.yzw, r2.zzzz, r15.yyzw
add r2.z, r5.x, r2.x
log r2.z, |r2.z|
mul r2.z, r1.z, r2.z
exp r2.z, r2.z
add r2.z, r5.x, r2.z
add_sat r2.z, r2.z, l(-1.000000)
mul r14.yzw, r5.xxxx, r14.yyzw
and r17.xyz, r3.zzzz, r14.yzwy
mad r2.yw, r2.xxxy, l(0.000000, 0.984375, 0.000000, 0.984375), l(0.000000, 0.00781250, 0.000000, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r2.yw, r2.ywyy, t5.zxwy, s2, l(0.000000)
mul r15.yzw, r2.zzzz, r15.yyzw
mul r18.xyz, r2.yyyy, r15.yzwy
mul r2.yzw, r2.wwww, r15.yyzw
sqrt r4.z, r1.z
mad r4.z, r4.z, l(0.500000), l(0.500000)
mul r4.z, r4.z, r4.z
mul r4.w, r4.z, l(0.500000)
mad r4.z, -r4.z, l(0.500000), l(1.000000)
mad r5.x, r2.x, r4.z, r4.w
mul r4.zw, r4.zzzw, r5.xxxx
ftou r5.x, cb1[44].x
iadd r5.x, r5.x, l(7)
ushr r5.x, r5.x, l(3)
imad r5.x, r0.y, r5.x, r0.x
ishl r5.x, r5.x, l(5)
not r6.w, r0.z
mov r19.x, -r4.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r20.x, l(2)
mov r10.w, l(1.000000)
mov r21.x, l(2)
mov r22.z, l(1.000000)
mov r23.w, l(1.000000)
mov r24.w, l(1.000000)
mov r25.w, l(1.000000)
mov r19.z, r4.x
mov r26.w, l(1.000000)
mov r19.yw, r13.xxxx
mov r4.y, r19.w
mov r13.y, r19.x
mov r27.x, r13.x
mov r27.y, r19.x
mov r27.z, r4.x
mov r13.z, r4.x
mov r28.w, l(1.000000)
mov r29.x, r13.x
mov r29.y, r19.x
mov r29.z, r4.x
mov r30.x, r13.x
mov r30.y, r19.x
mov r30.z, r4.x
mov r15.yzw, r14.yyzw
mov r31.xyz, r17.xyzx
mov r32.xyz, r18.xyzx
mov r33.xyz, r2.yzwy
mov r7.w, cb2[58].y
mov r8.w, l(0)
mov r9.w, l(0)
loop 
  uge r11.w, r9.w, cb2[0].x
  breakc_nz r11.w
  ushr r11.w, r9.w, l(5)
  iadd r11.w, r5.x, r11.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r11.w, l(0), t26.xxxx
  mov r34.xyz, r15.yzwy
  mov r35.xyz, r31.xyzx
  mov r36.xyz, r32.xyzx
  mov r37.xyz, r33.xyzx
  mov r12.w, r7.w
  mov r13.w, r8.w
  mov r16.w, r11.w
  loop 
    breakc_z r16.w
    firstbit_lo r17.w, r16.w
    ishl r18.w, l(1), r17.w
    not r18.w, r18.w
    and r16.w, r16.w, r18.w
    iadd r17.w, r9.w, r17.w
    imul null, r17.w, r17.w, l(15)
    ubfe r18.w, l(3), l(24), cb9[r17.w + 1].w
    ieq r22.w, r18.w, l(2)
    if_nz r22.w
      ubfe r22.w, l(3), l(27), cb9[r17.w + 1].w
      and r27.w, r13.w, l(255)
      ult r29.w, r27.w, l(32)
      and r29.w, r1.w, r29.w
      if_nz r29.w
        imad r27.w, r27.w, l(24), l(112)
        add r20.yzw, cb1[24].xxyz, cb9[r17.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r27.w, r20.xyzw
      endif 
      iadd r20.y, r13.w, l(1)
      add r38.xy, -r10.xyxx, cb9[r17.w + 3].zwzz
      add r38.z, -r10.z, cb9[r17.w + 4].x
      dp3 r20.z, r38.xyzx, r38.xyzx
      rsq r20.z, r20.z
      mul r39.xyz, r20.zzzz, r38.xyzx
      mul r20.w, r0.w, cb9[r17.w + 1].z
      mul r20.w, r20.w, l(0.250000)
      dp3 r27.w, r11.xyzx, r39.xyzx
      mov_sat r29.w, r27.w
      movc r30.w, r3.z, |r27.w|, r29.w
      lt r31.w, l(0.000000), r30.w
      if_nz r31.w
        mov r39.xyz, cb9[r17.w + 7].yzwy
        mov r39.w, cb9[r17.w + 8].x
        dp4 r31.w, r39.xyzw, r10.xyzw
        lt r32.w, r31.w, l(1.000000)
        if_nz r32.w
          mov r40.xyz, l(1.000000,1.000000,1.000000,0)
          mov r32.w, l(0)
        else 
          add r41.xyz, -r10.xyzx, cb9[r17.w + 0].xyzx
          mul r33.w, cb9[r17.w + 3].x, cb9[r17.w + 3].x
          dp3 r34.w, r41.xyzx, r41.xyzx
          div r33.w, r33.w, r34.w
          min r33.w, r33.w, l(1.000000)
          mad_sat r41.xy, r31.wwww, cb9[r17.w + 2].xzxx, cb9[r17.w + 2].ywyy
          mul r41.zw, r41.xxxy, r41.xxxy
          mad r41.xy, r41.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r41.xy, r41.xyxx, r41.zwzz
          mul r33.w, r33.w, r41.x
          mul r33.w, r41.y, r33.w
          mov r41.xyz, cb9[r17.w + 4].yzwy
          mov r41.w, cb9[r17.w + 5].x
          dp4 r41.x, r41.xyzw, r10.xyzw
          mov r42.xyz, cb9[r17.w + 5].yzwy
          mov r42.w, cb9[r17.w + 6].x
          dp4 r41.y, r42.xyzw, r10.xyzw
          div r22.xy, r41.xyxx, r31.wwww
          lt r31.w, cb9[r17.w + 10].w, l(0.00048828)
          if_nz r31.w
            mad_sat r41.xy, |r22.xyxx|, cb9[r17.w + 12].xyxx, cb9[r17.w + 12].zwzz
            mul r41.zw, r41.xxxy, r41.xxxy
            mad r41.xy, r41.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r41.xy, r41.xyxx, r41.zwzz
            mul r31.w, r41.y, r41.x
          else 
            mul_sat r41.xyzw, |r22.yyxx|, cb9[r17.w + 11].xyzw
            log r41.xyzw, r41.xyzw
            mul r41.xyzw, r41.xyzw, cb9[r17.w + 12].zzzz
            exp r41.xyzw, r41.xyzw
            add r41.xy, r41.zwzz, r41.xyxx
            log r41.xy, r41.xyxx
            mul r41.xy, r41.xyxx, cb9[r17.w + 12].wwww
            exp r41.xy, r41.xyxx
            mul r34.w, r41.x, cb9[r17.w + 12].x
            mad r35.w, cb9[r17.w + 12].y, r41.y, l(-1.000000)
            mad r34.w, cb9[r17.w + 12].y, r41.y, -r34.w
            div_sat r34.w, r35.w, r34.w
            mul r35.w, r34.w, r34.w
            mad r34.w, r34.w, l(-2.000000), l(3.000000)
            mul r31.w, r34.w, r35.w
          endif 
          mul r32.w, r31.w, r33.w
          and r31.w, l(255), cb9[r17.w + 14].w
          if_nz r31.w
            dp3 r33.w, cb9[r17.w + 13].xyzx, r22.xyzx
            mov r41.x, cb9[r17.w + 13].w
            mov r41.yz, cb9[r17.w + 14].xxyx
            dp3 r22.x, r41.xyzx, r22.xyzx
            frc r41.x, r33.w
            frc r41.y, r22.x
            iadd r22.x, r31.w, l(-1)
            utof r41.z, r22.x
            sample_l_indexable(texture2darray)(float,float,float,float) r40.xyz, r41.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r40.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r41.x, cb9[r17.w + 0].w
        mov r41.yz, cb9[r17.w + 1].xxyx
        mul r40.xyz, r40.xyzx, r41.xyzx
        lt r22.x, l(0.000000), r32.w
        if_nz r22.x
          and r22.x, r20.y, l(255)
          iadd r22.y, r22.x, l(-1)
          ult r22.y, r22.y, l(32)
          and r22.y, r1.w, r22.y
          if_nz r22.y
            imad r22.xy, r22.xxxx, l(24, 24, 0, 0), l(88, 104, 0, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r31.w, cb2[52].x, r22.x, u2.xxxx
            or r31.w, r31.w, l(4)
            store_structured u2.x, cb2[52].x, r22.x, r31.w
            store_structured u2.x, cb2[52].x, r22.y, r32.w
          endif 
          iadd r22.x, r13.w, l(257)
          ine r22.y, r22.w, l(1)
          if_nz r22.y
            mad r22.y, |r27.w|, l(-0.200000), l(0.400000)
            lt r22.w, r27.w, l(0.000000)
            and r22.w, r3.z, r22.w
            movc r22.y, r22.w, -r22.y, r22.y
            mad r23.xyz, r11.xyzx, r22.yyyy, r10.xyzx
            mov r41.xyz, cb9[r17.w + 6].yzwy
            mov r41.w, cb9[r17.w + 7].x
            dp4 r22.y, r41.xyzw, r23.xyzw
            dp4 r22.w, r39.xyzw, r23.xyzw
            ge r31.w, r22.w, r22.y
            if_nz r31.w
              mov r39.xyz, cb9[r17.w + 4].yzwy
              mov r39.w, cb9[r17.w + 5].x
              dp4 r39.x, r39.xyzw, r23.xyzw
              mov r41.xyz, cb9[r17.w + 5].yzwy
              mov r41.w, cb9[r17.w + 6].x
              dp4 r39.y, r41.xyzw, r23.xyzw
              div r23.xy, r39.xyxx, r22.wwww
              mad_sat r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r39.x, r23.x, cb9[r17.w + 8].y, cb9[r17.w + 8].z
              mad r39.y, r23.y, cb9[r17.w + 8].w, cb9[r17.w + 9].x
              div r22.y, r22.y, r22.w
              max r22.y, r22.y, l(0.00006104)
              and r22.w, l(0x0000ffff), cb9[r17.w + 1].w
              if_nz r12.w
                utof r23.z, r22.w
                mov r31.w, l(0)
                mov r33.w, l(0)
                loop 
                  ige r34.w, r33.w, l(8)
                  breakc_nz r34.w
                  dp2 r41.x, icb[r33.w + 0].yxyy, r19.xyxx
                  dp2 r41.y, icb[r33.w + 0].yxyy, r19.yzyy
                  mad r23.xy, r41.xyxx, cb9[r17.w + 3].yyyy, r39.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r22.y
                  mad r31.w, r23.x, l(0.125000), r31.w
                  iadd r33.w, r33.w, l(1)
                endloop 
              else 
                utof r39.z, r22.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r31.w, r39.xyzx, t9.xxxx, s13, r22.y
              endif 
              mul r22.y, r31.w, r31.w
              mul r22.y, r31.w, r22.y
            else 
              mov r22.y, l(1.000000)
            endif 
          else 
            mov r22.y, l(1.000000)
          endif 
          mul r22.y, r22.y, r32.w
          lt r22.w, l(0.000000), r22.y
          if_nz r22.w
            ubfe r22.w, l(4), l(16), cb9[r17.w + 1].w
            ult r23.x, l(0), r22.w
            and r23.x, r0.z, r23.x
            if_nz r23.x
              iadd r22.w, r22.w, cb2[0].x
              imad r22.w, r22.w, l(15), l(-15)
              mad r23.x, |r27.w|, l(-0.200000), l(0.400000)
              lt r23.y, r27.w, l(0.000000)
              and r23.y, r3.z, r23.y
              movc r23.x, r23.y, -r23.x, r23.x
              mad r24.xyz, r11.xyzx, r23.xxxx, r10.xyzx
              mov r39.xyz, cb9[r22.w + 6].yzwy
              mov r39.w, cb9[r22.w + 7].x
              dp4 r23.x, r39.xyzw, r24.xyzw
              mov r39.xyz, cb9[r22.w + 7].yzwy
              mov r39.w, cb9[r22.w + 8].x
              dp4 r23.y, r39.xyzw, r24.xyzw
              lt r23.z, r23.y, r23.x
              if_z r23.z
                mov r39.xyz, cb9[r22.w + 4].yzwy
                mov r39.w, cb9[r22.w + 5].x
                dp4 r39.x, r39.xyzw, r24.xyzw
                mov r41.xyz, cb9[r22.w + 5].yzwy
                mov r41.w, cb9[r22.w + 6].x
                dp4 r39.y, r41.xyzw, r24.xyzw
                div r24.xy, r39.xyxx, r23.yyyy
                mad r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r39.x, r24.x, cb9[r22.w + 9].w
                add r39.y, r24.y, cb9[r22.w + 10].x
                mul r24.xy, r39.xyxx, cb9[r22.w + 9].yzyy
                div r39.xy, cb9[r22.w + 3].yyyy, cb9[r22.w + 8].ywyy
                add r39.zw, -r39.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r39.zw, r24.xxxy, r39.zzzw
                ge r39.xy, r39.xyxx, r24.xyxx
                or r39.xy, r39.xyxx, r39.zwzz
                or r24.z, r39.y, r39.x
                if_z r24.z
                  mov_sat r24.xy, r24.xyxx
                  mad r39.x, r24.x, cb9[r22.w + 8].y, cb9[r22.w + 8].z
                  mad r39.y, r24.y, cb9[r22.w + 8].w, cb9[r22.w + 9].x
                  mul r24.x, r23.y, cb9[r22.w + 10].z
                  mad r23.x, cb9[r22.w + 10].y, r23.y, r23.x
                  div r23.x, r23.x, r24.x
                endif 
              else 
                mov r24.z, l(-1)
              endif 
              or r23.y, r23.z, r24.z
              if_z r23.y
                max r23.x, r23.x, l(0.00006104)
                and r23.y, l(0x0000ffff), cb9[r22.w + 1].w
                if_nz r12.w
                  utof r24.z, r23.y
                  mov r23.z, l(0)
                  mov r32.w, l(0)
                  loop 
                    ige r33.w, r32.w, l(8)
                    breakc_nz r33.w
                    dp2 r41.x, icb[r32.w + 0].yxyy, r19.xwxx
                    dp2 r41.y, icb[r32.w + 0].xyxx, r4.xyxx
                    mad r24.xy, r41.xyxx, cb9[r22.w + 3].yyyy, r39.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r23.x
                    mad r23.z, r24.x, l(0.125000), r23.z
                    iadd r32.w, r32.w, l(1)
                  endloop 
                else 
                  utof r39.z, r23.y
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.z, r39.xyzx, t9.xxxx, s13, r23.x
                endif 
                mul r22.w, r23.z, r23.z
                mul r22.w, r23.z, r22.w
              else 
                mov r22.w, l(1.000000)
              endif 
              mul r22.y, r22.w, r22.y
            else 
              ubfe r22.w, l(4), l(20), cb9[r17.w + 1].w
              ult r23.x, l(0), r22.w
              and r23.x, r6.w, r23.x
              if_nz r23.x
                iadd r22.w, r22.w, cb2[0].x
                imad r22.w, r22.w, l(15), l(-15)
                mad r23.x, |r27.w|, l(-0.200000), l(0.400000)
                lt r23.y, r27.w, l(0.000000)
                and r23.y, r3.z, r23.y
                movc r23.x, r23.y, -r23.x, r23.x
                mad r25.xyz, r11.xyzx, r23.xxxx, r10.xyzx
                mov r39.xyz, cb9[r22.w + 6].yzwy
                mov r39.w, cb9[r22.w + 7].x
                dp4 r23.x, r39.xyzw, r25.xyzw
                mov r39.xyz, cb9[r22.w + 7].yzwy
                mov r39.w, cb9[r22.w + 8].x
                dp4 r23.y, r39.xyzw, r25.xyzw
                lt r24.x, r23.y, r23.x
                if_z r24.x
                  mov r39.xyz, cb9[r22.w + 4].yzwy
                  mov r39.w, cb9[r22.w + 5].x
                  dp4 r39.x, r39.xyzw, r25.xyzw
                  mov r41.xyz, cb9[r22.w + 5].yzwy
                  mov r41.w, cb9[r22.w + 6].x
                  dp4 r39.y, r41.xyzw, r25.xyzw
                  div r24.yz, r39.xxyx, r23.yyyy
                  mad r24.yz, r24.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                  add r25.x, r24.y, cb9[r22.w + 9].w
                  add r25.y, r24.z, cb9[r22.w + 10].x
                  mul r24.yz, r25.xxyx, cb9[r22.w + 9].yyzy
                  div r25.xy, cb9[r22.w + 3].yyyy, cb9[r22.w + 8].ywyy
                  add r39.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r39.xy, r24.yzyy, r39.xyxx
                  ge r25.xy, r25.xyxx, r24.yzyy
                  or r25.xy, r25.xyxx, r39.xyxx
                  or r25.x, r25.y, r25.x
                  if_z r25.x
                    mov_sat r24.yz, r24.yyzy
                    mad r39.x, r24.y, cb9[r22.w + 8].y, cb9[r22.w + 8].z
                    mad r39.y, r24.z, cb9[r22.w + 8].w, cb9[r22.w + 9].x
                    mul r24.y, r23.y, cb9[r22.w + 10].z
                    mad r23.x, cb9[r22.w + 10].y, r23.y, r23.x
                    div r23.x, r23.x, r24.y
                  endif 
                else 
                  mov r25.x, l(-1)
                endif 
                or r23.y, r24.x, r25.x
                if_z r23.y
                  max r23.x, r23.x, l(0.00006104)
                  and r23.y, l(0x0000ffff), cb9[r22.w + 1].w
                  if_nz r12.w
                    utof r24.z, r23.y
                    mov r25.xy, l(0,0,0,0)
                    loop 
                      ige r25.z, r25.y, l(8)
                      breakc_nz r25.z
                      dp2 r41.x, icb[r25.y + 0].xyxx, r27.xyxx
                      dp2 r41.y, icb[r25.y + 0].yxyy, r27.xzxx
                      mad r24.xy, r41.xyxx, cb9[r22.w + 3].yyyy, r39.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r23.x
                      mad r25.x, r24.x, l(0.125000), r25.x
                      iadd r25.y, r25.y, l(1)
                    endloop 
                  else 
                    utof r39.z, r23.y
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r39.xyzx, t9.xxxx, s13, r23.x
                  endif 
                  mul r22.w, r25.x, r25.x
                  mul r22.w, r25.x, r22.w
                else 
                  mov r22.w, l(1.000000)
                endif 
                mul r22.y, r22.w, r22.y
              endif 
            endif 
            mad r22.w, -r30.w, r2.x, l(1.000000)
            mul r22.w, r22.w, r22.w
            mad r22.w, -r22.w, l(0.620000), l(0.620000)
            add r22.w, -r30.w, r22.w
            mad r22.w, r1.z, r22.w, r30.w
            mul r22.w, r22.y, r22.w
            lt r23.x, l(0.000000), r27.w
            mad r24.xyz, r22.wwww, r40.xyzx, r34.xyzx
            mad r38.xyz, r38.xyzx, r20.zzzz, r12.xyzx
            dp3 r20.z, r38.xyzx, r38.xyzx
            rsq r20.z, r20.z
            mul r38.xyz, r20.zzzz, r38.xyzx
            dp3 r20.z, r38.xyzx, r12.xyzx
            dp3 r23.y, r11.xyzx, r38.xyzx
            mad r25.y, |r23.y|, r0.w, -|r23.y|
            mad r23.y, |r23.y|, r25.y, l(1.000000)
            mad r25.y, r29.w, r4.z, r4.w
            mul r23.y, r23.y, r23.y
            mul r23.y, r25.y, r23.y
            rcp r23.y, r23.y
            mul r20.w, r20.w, r29.w
            mul r20.w, r20.w, r23.y
            mul r20.w, r22.y, r20.w
            mad r38.xyz, r20.wwww, r40.xyzx, r37.xyzx
            add_sat r20.z, -r20.z, l(1.000000)
            mul r23.y, r20.z, r20.z
            mul r23.y, r23.y, r23.y
            mul r20.z, r20.z, r23.y
            mul r20.z, r20.z, r20.w
            mad r39.xyz, r20.zzzz, r40.xyzx, r36.xyzx
            mad r40.xyz, r22.wwww, r40.xyzx, r35.xyzx
            movc r40.xyz, r3.zzzz, r40.xyzx, r35.xyzx
            movc r34.xyz, r23.xxxx, r24.xyzx, r34.xyzx
            movc r35.xyz, r23.xxxx, r35.xyzx, r40.xyzx
            movc r36.xyz, r23.xxxx, r39.xyzx, r36.xyzx
            movc r37.xyz, r23.xxxx, r38.xyzx, r37.xyzx
            and r20.z, r22.x, l(255)
            iadd r20.w, r20.z, l(-1)
            ult r20.w, r20.w, l(32)
            and r20.w, r1.w, r20.w
            if_nz r20.w
              imad r20.zw, r20.zzzz, l(0, 0, 24, 24), l(0, 0, 88, 108)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r22.w, cb2[52].x, r20.z, u2.xxxx
              or r22.w, r22.w, l(8)
              store_structured u2.x, cb2[52].x, r20.z, r22.w
              store_structured u2.x, cb2[52].x, r20.w, r22.y
            endif 
            iadd r13.w, r13.w, l(0x00010101)
          else 
            mov r13.w, r22.x
          endif 
        else 
          mov r13.w, r20.y
        endif 
      else 
        mov r13.w, r20.y
      endif 
    else 
      ieq r18.w, r18.w, l(4)
      if_nz r18.w
        ubfe r18.w, l(3), l(27), cb9[r17.w + 1].w
        and r20.y, r13.w, l(255)
        ult r20.z, r20.y, l(32)
        and r20.z, r1.w, r20.z
        if_nz r20.z
          imad r20.y, r20.y, l(24), l(112)
          add r21.yzw, cb1[24].xxyz, cb9[r17.w + 0].xxyz
          store_structured u2.xyzw, cb2[52].x, r20.y, r21.xyzw
        endif 
        iadd r20.y, r13.w, l(1)
        mul r20.z, r0.w, cb9[r17.w + 1].z
        mul r20.z, r20.z, l(0.250000)
        lt r20.w, l(0.000000), cb9[r17.w + 6].y
        mov r24.xy, cb9[r17.w + 5].zwzz
        mov r24.z, cb9[r17.w + 6].x
        mad r21.yzw, -r24.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r17.w + 0].xxyz
        add r22.xyw, -r10.xyxz, r21.yzyw
        dp3 r23.x, r24.xyzx, r16.xyzx
        dp3 r23.y, r24.xyzx, r22.xywx
        dp3 r22.x, r16.xyzx, r22.xywx
        mad r22.y, -r23.x, r23.x, cb9[r17.w + 6].y
        mad r22.x, r23.x, r22.x, -r23.y
        div_sat r22.w, -r23.y, cb9[r17.w + 6].y
        div_sat r22.x, r22.x, r22.y
        div r22.y, r22.y, cb9[r17.w + 6].y
        mul r22.y, r22.y, l(10.000000)
        min r22.y, r22.y, l(1.000000)
        add r22.x, -r22.w, r22.x
        mad r22.x, r22.y, r22.x, r22.w
        mad r38.xyz, r22.xxxx, r24.xyzx, r21.yzwy
        mad r21.yzw, r22.wwww, r24.xxyz, r21.yyzw
        movc r21.yzw, r20.wwww, r21.yyzw, cb9[r17.w + 0].xxyz
        movc r22.xyw, r20.wwww, r38.xyxz, cb9[r17.w + 0].xyxz
        add r22.xyw, -r10.xyxz, r22.xyxw
        add r21.yzw, -r10.xxyz, r21.yyzw
        dp3 r20.w, r22.xywx, r22.xywx
        rsq r20.w, r20.w
        mul r24.xyz, r20.wwww, r22.xywx
        dp3 r23.x, r21.yzwy, r21.yzwy
        rsq r23.y, r23.x
        mul r21.yzw, r21.yyzw, r23.yyyy
        dp3 r21.y, r11.xyzx, r21.yzwy
        mov_sat r21.z, r21.y
        movc r21.z, r3.z, |r21.y|, r21.z
        lt r21.w, l(0.000000), r21.z
        if_nz r21.w
          sqrt r21.w, r23.x
          mul r23.y, cb9[r17.w + 3].x, cb9[r17.w + 3].x
          div r23.x, r23.y, r23.x
          min r23.x, r23.x, l(1.000000)
          mad_sat r25.yz, r21.wwww, cb9[r17.w + 2].xxzx, cb9[r17.w + 2].yywy
          mul r38.xy, r25.yzyy, r25.yzyy
          mad r25.yz, r25.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
          mul r25.yz, r25.yyzy, r38.xxyx
          mul r21.w, r23.x, r25.y
          mul r21.w, r25.z, r21.w
          lt r23.x, l(0.000000), r21.w
          if_nz r23.x
            and r23.x, r20.y, l(255)
            iadd r23.y, r23.x, l(-1)
            ult r23.y, r23.y, l(32)
            and r23.y, r1.w, r23.y
            if_nz r23.y
              imad r23.xy, r23.xxxx, l(24, 24, 0, 0), l(88, 104, 0, 0)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r25.y, cb2[52].x, r23.x, u2.xxxx
              or r25.y, r25.y, l(4)
              store_structured u2.x, cb2[52].x, r23.x, r25.y
              store_structured u2.x, cb2[52].x, r23.y, r21.w
            endif 
            iadd r23.x, r13.w, l(257)
            ine r18.w, r18.w, l(1)
            if_nz r18.w
              mad r18.w, |r21.y|, l(-0.200000), l(0.400000)
              lt r23.y, r21.y, l(0.000000)
              and r23.y, r3.z, r23.y
              movc r18.w, r23.y, -r18.w, r18.w
              mad r38.xyz, r11.xyzx, r18.wwww, r10.xyzx
              add r38.xyz, r38.xyzx, -cb9[r17.w + 4].yzwy
              max r18.w, |r38.z|, |r38.y|
              max r18.w, r18.w, |r38.x|
              div r18.w, cb9[r17.w + 5].x, r18.w
              add r18.w, r18.w, cb9[r17.w + 5].y
              dp3 r23.y, r38.xyzx, r38.xyzx
              rsq r23.y, r23.y
              max r18.w, r18.w, l(0.00006104)
              and r25.y, l(0x0000ffff), cb9[r17.w + 1].w
              utof r39.w, r25.y
              mov r25.yz, l(0,0,0,0)
              loop 
                ige r27.w, r25.z, l(8)
                breakc_nz r27.w
                dp2 r40.y, icb[r25.z + 0].xyxx, r13.xyxx
                dp2 r40.z, icb[r25.z + 0].yxyy, r13.xzxx
                mul r40.yz, r40.yyzy, cb9[r17.w + 3].yyyy
                mul r40.x, r15.x, r40.y
                mul r40.w, r14.x, r40.y
                mad r39.xyz, r38.xyzx, r23.yyyy, r40.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r27.w, r39.xyzw, t10.xxxx, s13, r18.w
                mad r25.y, r27.w, l(0.125000), r25.y
                iadd r25.z, r25.z, l(1)
              endloop 
            else 
              mov r25.y, l(1.000000)
            endif 
            mul r18.w, r21.w, r25.y
            lt r21.w, l(0.000000), r18.w
            if_nz r21.w
              ubfe r21.w, l(4), l(16), cb9[r17.w + 1].w
              ult r23.y, l(0), r21.w
              and r23.y, r0.z, r23.y
              if_nz r23.y
                iadd r21.w, r21.w, cb2[0].x
                imad r21.w, r21.w, l(15), l(-15)
                mad r23.y, |r21.y|, l(-0.200000), l(0.400000)
                lt r25.z, r21.y, l(0.000000)
                and r25.z, r3.z, r25.z
                movc r23.y, r25.z, -r23.y, r23.y
                mad r26.xyz, r11.xyzx, r23.yyyy, r10.xyzx
                mov r38.xyz, cb9[r21.w + 6].yzwy
                mov r38.w, cb9[r21.w + 7].x
                dp4 r23.y, r38.xyzw, r26.xyzw
                mov r38.xyz, cb9[r21.w + 7].yzwy
                mov r38.w, cb9[r21.w + 8].x
                dp4 r25.z, r38.xyzw, r26.xyzw
                lt r27.w, r25.z, r23.y
                if_z r27.w
                  mov r38.xyz, cb9[r21.w + 4].yzwy
                  mov r38.w, cb9[r21.w + 5].x
                  dp4 r38.x, r38.xyzw, r26.xyzw
                  mov r39.xyz, cb9[r21.w + 5].yzwy
                  mov r39.w, cb9[r21.w + 6].x
                  dp4 r38.y, r39.xyzw, r26.xyzw
                  div r26.xy, r38.xyxx, r25.zzzz
                  mad r26.xy, r26.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r38.x, r26.x, cb9[r21.w + 9].w
                  add r38.y, r26.y, cb9[r21.w + 10].x
                  mul r26.xy, r38.xyxx, cb9[r21.w + 9].yzyy
                  div r38.xy, cb9[r21.w + 3].yyyy, cb9[r21.w + 8].ywyy
                  add r38.zw, -r38.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                  ge r38.zw, r26.xxxy, r38.zzzw
                  ge r38.xy, r38.xyxx, r26.xyxx
                  or r38.xy, r38.xyxx, r38.zwzz
                  or r26.z, r38.y, r38.x
                  if_z r26.z
                    mov_sat r26.xy, r26.xyxx
                    mad r38.x, r26.x, cb9[r21.w + 8].y, cb9[r21.w + 8].z
                    mad r38.y, r26.y, cb9[r21.w + 8].w, cb9[r21.w + 9].x
                    mul r26.x, r25.z, cb9[r21.w + 10].z
                    mad r23.y, cb9[r21.w + 10].y, r25.z, r23.y
                    div r23.y, r23.y, r26.x
                  endif 
                else 
                  mov r26.z, l(-1)
                endif 
                or r25.z, r27.w, r26.z
                if_z r25.z
                  max r23.y, r23.y, l(0.00006104)
                  and r25.z, l(0x0000ffff), cb9[r21.w + 1].w
                  if_nz r12.w
                    utof r26.z, r25.z
                    mov r27.w, l(0)
                    mov r29.w, l(0)
                    loop 
                      ige r30.w, r29.w, l(8)
                      breakc_nz r30.w
                      dp2 r39.x, icb[r29.w + 0].xyxx, r29.xyxx
                      dp2 r39.y, icb[r29.w + 0].yxyy, r29.xzxx
                      mad r26.xy, r39.xyxx, cb9[r21.w + 3].yyyy, r38.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r26.xyzx, t9.xxxx, s13, r23.y
                      mad r27.w, r26.x, l(0.125000), r27.w
                      iadd r29.w, r29.w, l(1)
                    endloop 
                  else 
                    utof r38.z, r25.z
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r27.w, r38.xyzx, t9.xxxx, s13, r23.y
                  endif 
                  mul r21.w, r27.w, r27.w
                  mul r21.w, r27.w, r21.w
                else 
                  mov r21.w, l(1.000000)
                endif 
                mul r18.w, r18.w, r21.w
              else 
                ubfe r21.w, l(4), l(20), cb9[r17.w + 1].w
                ult r23.y, l(0), r21.w
                and r23.y, r6.w, r23.y
                if_nz r23.y
                  iadd r21.w, r21.w, cb2[0].x
                  imad r21.w, r21.w, l(15), l(-15)
                  mad r23.y, |r21.y|, l(-0.200000), l(0.400000)
                  lt r25.z, r21.y, l(0.000000)
                  and r25.z, r3.z, r25.z
                  movc r23.y, r25.z, -r23.y, r23.y
                  mad r28.xyz, r11.xyzx, r23.yyyy, r10.xyzx
                  mov r38.xyz, cb9[r21.w + 6].yzwy
                  mov r38.w, cb9[r21.w + 7].x
                  dp4 r23.y, r38.xyzw, r28.xyzw
                  mov r38.xyz, cb9[r21.w + 7].yzwy
                  mov r38.w, cb9[r21.w + 8].x
                  dp4 r25.z, r38.xyzw, r28.xyzw
                  lt r26.x, r25.z, r23.y
                  if_z r26.x
                    mov r38.xyz, cb9[r21.w + 4].yzwy
                    mov r38.w, cb9[r21.w + 5].x
                    dp4 r38.x, r38.xyzw, r28.xyzw
                    mov r39.xyz, cb9[r21.w + 5].yzwy
                    mov r39.w, cb9[r21.w + 6].x
                    dp4 r38.y, r39.xyzw, r28.xyzw
                    div r26.yz, r38.xxyx, r25.zzzz
                    mad r26.yz, r26.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                    add r28.x, r26.y, cb9[r21.w + 9].w
                    add r28.y, r26.z, cb9[r21.w + 10].x
                    mul r26.yz, r28.xxyx, cb9[r21.w + 9].yyzy
                    div r28.xy, cb9[r21.w + 3].yyyy, cb9[r21.w + 8].ywyy
                    add r38.xy, -r28.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r38.xy, r26.yzyy, r38.xyxx
                    ge r28.xy, r28.xyxx, r26.yzyy
                    or r28.xy, r28.xyxx, r38.xyxx
                    or r28.x, r28.y, r28.x
                    if_z r28.x
                      mov_sat r26.yz, r26.yyzy
                      mad r38.x, r26.y, cb9[r21.w + 8].y, cb9[r21.w + 8].z
                      mad r38.y, r26.z, cb9[r21.w + 8].w, cb9[r21.w + 9].x
                      mul r26.y, r25.z, cb9[r21.w + 10].z
                      mad r23.y, cb9[r21.w + 10].y, r25.z, r23.y
                      div r23.y, r23.y, r26.y
                    endif 
                  else 
                    mov r28.x, l(-1)
                  endif 
                  or r25.z, r26.x, r28.x
                  if_z r25.z
                    max r23.y, r23.y, l(0.00006104)
                    and r25.z, l(0x0000ffff), cb9[r21.w + 1].w
                    if_nz r12.w
                      utof r26.z, r25.z
                      mov r28.xy, l(0,0,0,0)
                      loop 
                        ige r28.z, r28.y, l(8)
                        breakc_nz r28.z
                        dp2 r39.x, icb[r28.y + 0].xyxx, r30.xyxx
                        dp2 r39.y, icb[r28.y + 0].yxyy, r30.xzxx
                        mad r26.xy, r39.xyxx, cb9[r21.w + 3].yyyy, r38.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r26.xyzx, t9.xxxx, s13, r23.y
                        mad r28.x, r26.x, l(0.125000), r28.x
                        iadd r28.y, r28.y, l(1)
                      endloop 
                    else 
                      utof r38.z, r25.z
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r28.x, r38.xyzx, t9.xxxx, s13, r23.y
                    endif 
                    mul r21.w, r28.x, r28.x
                    mul r21.w, r28.x, r21.w
                  else 
                    mov r21.w, l(1.000000)
                  endif 
                  mul r18.w, r18.w, r21.w
                endif 
              endif 
              mad r21.w, -r21.z, r2.x, l(1.000000)
              mul r21.w, r21.w, r21.w
              mad r21.w, -r21.w, l(0.620000), l(0.620000)
              add r21.w, -r21.z, r21.w
              mad r21.z, r1.z, r21.w, r21.z
              mul r21.z, r18.w, r21.z
              mov r26.x, cb9[r17.w + 0].w
              mov r26.yz, cb9[r17.w + 1].xxyx
              lt r17.w, l(0.000000), r21.y
              mad r38.xyz, r21.zzzz, r26.xyzx, r34.xyzx
              dp3_sat r21.y, r11.xyzx, r24.xyzx
              mad r22.xyw, r22.xyxw, r20.wwww, r12.xyxz
              dp3 r20.w, r22.xywx, r22.xywx
              rsq r20.w, r20.w
              mul r22.xyw, r20.wwww, r22.xyxw
              dp3 r20.w, r22.xywx, r12.xyzx
              dp3 r21.w, r11.xyzx, r22.xywx
              mad r22.x, |r21.w|, r0.w, -|r21.w|
              mad r21.w, |r21.w|, r22.x, l(1.000000)
              mad r22.x, r21.y, r4.z, r4.w
              mul r21.w, r21.w, r21.w
              mul r21.w, r22.x, r21.w
              rcp r21.w, r21.w
              mul r20.z, r20.z, r21.y
              mul r20.z, r20.z, r21.w
              mul r20.z, r18.w, r20.z
              mad r22.xyw, r20.zzzz, r26.xyxz, r37.xyxz
              add_sat r20.w, -r20.w, l(1.000000)
              mul r21.y, r20.w, r20.w
              mul r21.y, r21.y, r21.y
              mul r20.w, r20.w, r21.y
              mul r20.z, r20.w, r20.z
              mad r24.xyz, r20.zzzz, r26.xyzx, r36.xyzx
              mad r21.yzw, r21.zzzz, r26.xxyz, r35.xxyz
              movc r21.yzw, r3.zzzz, r21.yyzw, r35.xxyz
              movc r34.xyz, r17.wwww, r38.xyzx, r34.xyzx
              movc r35.xyz, r17.wwww, r35.xyzx, r21.yzwy
              movc r36.xyz, r17.wwww, r24.xyzx, r36.xyzx
              movc r37.xyz, r17.wwww, r22.xywx, r37.xyzx
              and r17.w, r23.x, l(255)
              iadd r20.z, r17.w, l(-1)
              ult r20.z, r20.z, l(32)
              and r20.z, r1.w, r20.z
              if_nz r20.z
                imad r20.zw, r17.wwww, l(0, 0, 24, 24), l(0, 0, 88, 108)
                ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.w, cb2[52].x, r20.z, u2.xxxx
                or r17.w, r17.w, l(8)
                store_structured u2.x, cb2[52].x, r20.z, r17.w
                store_structured u2.x, cb2[52].x, r20.w, r18.w
              endif 
              iadd r13.w, r13.w, l(0x00010101)
            else 
              mov r13.w, r23.x
            endif 
          else 
            mov r13.w, r20.y
          endif 
        else 
          mov r13.w, r20.y
        endif 
      endif 
    endif 
  endloop 
  mov r15.yzw, r34.xxyz
  mov r31.xyz, r35.xyzx
  mov r32.xyz, r36.xyzx
  mov r33.xyz, r37.xyzx
  mov r8.w, r13.w
  iadd r9.w, r9.w, l(32)
endloop 
mad r2.xyz, r3.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.z, r2.y
mad r3.xyw, r6.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r0.w, r3.x
ieq r0.w, r0.z, r0.w
movc r3.xy, r0.wwww, r3.ywyy, l(-1.000000,0,0,0)
mad r4.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r4.x
ieq r0.w, r0.z, r0.w
movc r4.xy, r0.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r6.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r6.x
ieq r0.w, r0.z, r0.w
movc r4.zw, r0.wwww, r6.yyyz, l(0,0,-1.000000,0)
mad r6.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r6.x
ieq r0.z, r0.z, r0.w
movc r0.zw, r0.zzzz, r6.yyyz, l(0,0,-1.000000,0)
mov r6.x, r3.x
mov r6.yz, r4.xxzx
mov r6.w, r0.z
add r6.xyzw, -r2.xxxx, r6.xyzw
ge r6.xyzw, |r6.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r6.xyzw, r6.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.z, r6.y, r6.x
add r0.z, r6.z, r0.z
add r0.z, r6.w, r0.z
mul r1.z, r4.y, r6.y
mad r1.z, r6.x, r3.y, r1.z
mad r1.z, r6.z, r4.w, r1.z
mad r0.w, r6.w, r0.w, r1.z
div r2.w, r0.w, r0.z
ge r0.z, l(0.000000), r0.z
movc r2.yz, r0.zzzz, l(0,0,0,0), r2.zzwz
and r0.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.z, r0.w, r0.z
movc r2.xyz, r0.zzzz, r2.xyzx, r2.xzyx
mad r0.z, -r2.z, l(0.500000), r2.x
add r4.y, r0.z, r2.z
mad r4.z, -r2.y, l(0.500000), r0.z
add r4.x, r2.y, r4.z
mul r2.xyz, r5.yzwy, r15.yzwy
mad r2.xyz, r31.xyzx, r4.xyzx, r2.xyzx
mul r3.xyw, r32.xyxz, l(0.960000, 0.960000, 0.000000, 0.960000)
mad r3.xyw, r33.xyxz, l(0.040000, 0.040000, 0.000000, 0.040000), r3.xyxw
add r2.xyz, r2.xyzx, r3.xywx
add r3.xyw, -r4.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
mul r3.xyw, r3.xyxw, r32.xyxz
mad r3.xyw, r33.xyxz, r4.xyxz, r3.xyxw
mad r3.xyw, r15.yzyw, r5.yzyw, r3.xyxw
movc r2.xyz, r3.zzzz, r2.xyzx, r3.xywx
lt r0.z, l(0.000000), cb2[9].z
if_nz r0.z
  dp3 r0.z, r10.xyzx, r10.xyzx
  rsq r0.w, r0.z
  mul r3.xyz, r0.wwww, r10.xyzx
  sqrt r0.z, r0.z
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r4.xy, r0.zzzz, cb2[15].xyxx, cb2[14].zwzz
    mul r4.xy, r4.xyxx, cb2[16].xyxx
    lt r0.w, l(0.010000), |r10.z|
    mul r4.zw, r10.zzzz, cb2[15].zzzw
    mul r5.xy, r4.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r5.xy, r5.xyxx
    add r5.xy, -r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r4.zw, r5.xxxy, r4.zzzw
    mul r4.zw, r4.zzzw, r4.xxxy
    movc r4.xy, r0.wwww, r4.zwzz, r4.xyxx
    mul r4.xzw, r4.xxxx, cb2[12].xxyz
    exp r4.xzw, r4.xxzw
    mul r5.xyz, r4.yyyy, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xzwx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xzwx
  else 
    mad r0.w, r0.z, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r10.z|
    mul r2.w, r10.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r0.w, r2.w
    movc r0.w, r1.z, r2.w, r0.w
    mul r5.xyz, r0.wwww, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xyzx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.w, cb2[8].w, -r0.w, l(1.000000)
  mul r2.w, r2.w, r2.w
  mul r2.w, r2.w, l(12.566371)
  div r1.z, r1.z, r2.w
  add r0.z, r0.z, -cb2[10].w
  mul_sat r0.z, r0.z, cb2[11].w
  mul r0.z, r0.z, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyz, r0.zzzz, cb2[11].xyzx
  mad r3.xyz, r0.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r5.xyzx
  mad r3.xyz, r2.xyzx, r4.xyzx, r3.xyzx
else 
  mul r0.z, r10.z, cb2[6].x
  mad r0.w, cb2[6].x, r10.z, cb2[5].x
  lt r1.z, |r0.z|, l(0.000100)
  min r2.w, r0.w, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.w, cb2[6].z
  lt r4.x, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r4.x, r2.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.z, r1.z, l(1.000000), r0.z
  div r0.z, r0.w, r0.z
  movc r0.z, r1.z, r3.w, r0.z
  mul r0.z, r0.z, cb2[5].z
  dp3 r0.w, r10.xyzx, r10.xyzx
  sqrt r1.z, r0.w
  mad r0.z, r0.z, r1.z, cb2[5].w
  exp r0.z, r0.z
  min r0.z, r0.z, l(1.000000)
  add r0.z, -r0.z, l(1.000000)
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r10.xyzx
  dp3 r0.w, cb2[7].yzwy, r4.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r0.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.z, r0.z, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyz, r0.zzzz, r4.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.z, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r3.xz, r3.xxzx, l(0, 0, 0, 0)
ieq r3.yw, r3.yyyw, l(0, 0, 0, 4)
and r3.xy, r3.ywyy, r3.xzxx
and r3.xy, r3.xyxx, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(16)
and r0.w, r0.w, r1.z
and r3.z, r0.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.zzzz, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.z, r8.w, l(255)
      break 
      case l(2)
      ubfe r0.z, l(8), l(8), r8.w
      break 
      case l(3)
      ubfe r0.z, l(8), l(16), r8.w
      break 
      case l(4)
      mov r0.z, l(0)
      break 
      case l(5)
      mov r0.z, l(1)
      break 
      default 
      mov r0.z, l(0)
      break 
    endswitch 
    utof r0.z, r0.z
    mul r0.z, r0.z, cb2[53].z
    mad r3.xyz, r0.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r1.w
  add r1.xyz, r10.xyzx, cb1[24].xyzx
  and r1.w, r8.w, l(255)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  store_structured u2.x, cb2[52].x, l(108), l(0)
endif 
if_nz cb2[52].y
  and r0.z, r8.w, l(255)
  atomic_iadd g1, l(0), r0.z
  ubfe r1.xy, l(8, 8, 0, 0), l(8, 16, 0, 0), r8.wwww
  atomic_iadd g1, l(4), r1.x
  atomic_iadd g1, l(8), r1.y
  atomic_iadd g1, l(12), l(0)
  atomic_iadd g1, l(16), l(1)
  atomic_umax g2, l(0), r0.z
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), l(0)
  atomic_umax g2, l(16), l(1)
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.z, r1.x, l(63)
  if_nz r0.z
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.z, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.z
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.z, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.z
    ieq r0.xy, r0.xyxx, cb2[52].zwzz
    and r0.x, r0.y, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.z
    endif 
  endif 
endif 
ret 
// Approximately 1188 instruction slots used
