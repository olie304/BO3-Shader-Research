//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:22:58 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4
//   float probeDebugRadius;            // Offset:  868 Size:     4
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 43
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(18), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.yz, r0.xxyx, l(0, 4095, 4095, 0)
imad r1.xy, r0.yzyy, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.yz, r1.xxyx
add r5.xy, r3.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r6.x, r3.x, l(0.984375)
mul r3.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r6.x, r3.x, r3.w
max r3.x, r3.x, l(0.00000001)
rcp r6.y, r3.x
and r3.xw, r0.wwww, r6.xxxy
mul r5.zw, r5.xxxy, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r7.xyzw, r5.zwzz, t28.xyzw, s4.x
mul r5.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r5.zw, r5.zzzw
add r8.xy, -r5.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r9.y, r8.x, r8.y
mul r9.xz, r5.zzwz, r8.xxyx
mul r9.w, r5.w, r5.z
dp4 r0.w, r6.xyzw, r9.xyzw
add r7.xyzw, -r3.wwww, r7.xyzw
min r5.z, |r7.w|, |r7.z|
min r5.z, r5.z, |r7.y|
min r5.z, r5.z, |r7.x|
max r5.w, |r7.w|, |r7.z|
max r5.w, r5.w, |r7.y|
max r5.w, r5.w, |r7.x|
eq r7.xyz, r5.zzzz, |r7.yzwy|
movc r5.z, r7.x, r6.y, r6.x
movc r5.z, r7.y, r6.z, r5.z
movc r5.z, r7.z, r6.w, r5.z
mul r6.x, r3.w, l(0.010000)
lt r5.w, r6.x, r5.w
movc r0.w, r5.w, r5.z, r0.w
mul r0.w, r0.w, r4.z
if_nz cb2[55].x
  mul r4.z, r0.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r4.zzzz
  ret 
else 
  movc r4.z, cb2[54].w, r0.w, l(1.000000)
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
add r1.zw, r5.xxxy, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r5.x, r1.z, cb1[12].x
mul r5.y, r1.w, cb1[13].y
mov r5.z, l(1.000000)
mul r5.xyz, r3.wwww, r5.xyzx
mul r11.xyz, r5.yyyy, cb1[17].xyzx
mad r5.xyw, r5.xxxx, cb1[16].xyxz, r11.xyxz
mad r5.xyz, r5.zzzz, cb1[18].xyzx, r5.xywx
mad r1.z, r2.w, l(3.000000), l(0.500000)
ftou r1.z, r1.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r11.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r11.z
mul r11.xy, r1.wwww, r2.xyxx
and r12.xyzw, r1.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.z, r12.w, r12.z
movc r12.z, r1.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r1.z, r0.w, l(-0.500000), l(-0.00146628)
add r1.z, r1.z, r2.z
mul_sat r2.y, r1.z, l(2.00982332)
dp3 r1.z, -r5.xyzx, -r5.xyzx
rsq r1.z, r1.z
mul r12.xyz, r1.zzzz, -r5.xyzx
dp2 r1.z, r3.yzyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r1.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.z, -r12.xyzx, r11.xyzx
add r1.z, r1.z, r1.z
mad r15.xyz, r11.xyzx, -r1.zzzz, -r12.xyzx
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.w, r1.z
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r2.zw, r2.zzzw
ieq r2.zw, r1.xxxy, r2.zzzw
and r2.z, r2.w, r2.z
add r2.w, -r2.y, l(1.000000)
mul r3.y, r2.w, l(5.000000)
mad r3.z, r2.w, l(5.000000), l(-2.500000)
mul r3.z, r3.z, l(0.400000)
max r3.z, r3.z, l(0.000000)
mad r13.yz, -r2.wwww, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r3.w, r13.y
mul r3.w, r2.x, r3.w
mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 100.000000, 9.136810)
mul r6.w, r2.w, r3.y
mad r6.w, -r6.w, l(2.015905), r13.z
exp r6.w, r6.w
mul r6.w, r2.x, r6.w
mul r6.w, r6.w, l(9.708090)
max r3.w, r3.w, r6.w
max r3.w, r3.w, l(1.268160)
if_nz cb2[54].x
  ftou r6.w, cb1[44].x
  iadd r6.w, r6.w, l(7)
  ushr r6.w, r6.w, l(3)
  imad r6.w, r0.z, r6.w, r0.y
  bfi r6.w, l(27), l(5), r6.w, l(16)
  mov r16.xyzw, l(0,0,0,0)
  mov r17.xyzw, l(0,0,0,0)
  mov r18.xyzw, l(0,0,0,0)
  mov r19.xyzw, l(0,0,0,0)
  mov r20.xyzw, l(0,0,0,0)
  mov r21.xyzw, l(0,0,0,0)
  mov r22.xyzw, l(0,0,0,0)
  mov r23.xyzw, l(0,0,0,0)
  mov r24.xyzw, l(0,0,0,0)
  mov r25.xyzw, l(0,0,0,0)
  mov r26.xyzw, l(0,0,0,0)
  mov r13.yzw, l(0,0,0,0)
  mov r14.yz, l(0,0,0,0)
  mov r7.w, l(0)
  mov r27.z, l(0)
  mov r28.z, l(0)
  mov r8.w, l(0)
  mov r9.w, l(0)
  loop 
    uge r10.w, r9.w, cb2[0].y
    breakc_nz r10.w
    ushr r10.w, r9.w, l(5)
    iadd r10.w, r6.w, r10.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r10.w, l(0), t26.xxxx
    mov r29.xyzw, r16.yxzw
    mov r30.xyzw, r17.xyzw
    mov r31.xyzw, r18.yzwx
    mov r32.xyzw, r19.xyzw
    mov r33.xyzw, r20.xyzw
    mov r34.xyzw, r21.zwxy
    mov r35.xyzw, r22.zwxy
    mov r36.xyzw, r24.zwxy
    mov r37.xyzw, r25.zwxy
    mov r38.xyz, r13.yzwy
    mov r39.xy, r14.zyzz
    mov r12.w, r7.w
    mov r14.w, r27.z
    mov r27.w, r28.z
    mov r28.w, r8.w
    mov r40.xyzw, r23.zwxy
    mov r41.xyzw, r26.zwxy
    mov r38.w, r10.w
    loop 
      breakc_z r38.w
      firstbit_lo r39.z, r38.w
      ishl r39.w, l(1), r39.z
      not r39.w, r39.w
      and r38.w, r38.w, r39.w
      iadd r39.z, r9.w, r39.z
      imul null, r39.z, r39.z, l(14)
      add r42.xyz, r5.xyzx, -cb10[r39.z + 0].xyzx
      dp3 r39.w, r42.xyzx, r42.xyzx
      sqrt r39.w, r39.w
      ge r39.w, cb2[54].y, r39.w
      if_nz r39.w
        mov r29.yzw, cb10[r39.z + 1].xxyz
        mov r29.x, cb10[r39.z + 0].w
        mov r30.yzw, cb10[r39.z + 2].xxyz
        mov r30.x, cb10[r39.z + 1].w
        mov r31.xyz, cb10[r39.z + 3].xyzx
        mov r31.w, cb10[r39.z + 4].z
        mov r32.yz, cb10[r39.z + 4].xxyx
        mov r32.x, cb10[r39.z + 3].w
        mov r32.w, cb10[r39.z + 6].x
        mov r33.yzw, cb10[r39.z + 5].xxyz
        mov r33.x, cb10[r39.z + 4].w
        mov r34.yz, cb10[r39.z + 7].yywy
        mov r34.x, cb10[r39.z + 6].y
        mov r34.w, cb10[r39.z + 8].x
        mov r35.xyz, cb10[r39.z + 8].yzwy
        mov r35.w, cb10[r39.z + 9].x
        mov r36.xyz, cb10[r39.z + 10].yzwy
        mov r36.w, cb10[r39.z + 11].x
        mov r37.xyz, cb10[r39.z + 11].yzwy
        mov r37.w, cb10[r39.z + 12].x
        mov r38.xyz, cb10[r39.z + 0].xyzx
        mov r42.xy, cb10[r39.z + 13].yzyy
        mov r12.w, l(-1)
        mov r14.w, cb10[r39.z + 2].w
        mov r27.w, cb10[r39.z + 5].w
        mov r28.w, cb10[r39.z + 7].z
        mov r40.xyz, cb10[r39.z + 9].yzwy
        mov r40.w, cb10[r39.z + 10].x
        mov r41.xyz, cb10[r39.z + 12].yzwy
        mov r41.w, cb10[r39.z + 13].x
        mov r39.xy, r42.xyxx
        break 
      endif 
    endloop 
    if_nz r12.w
      mov r16.xyzw, r29.yxzw
      mov r17.xyzw, r30.xyzw
      mov r18.xyzw, r31.wxyz
      mov r19.xyzw, r32.xyzw
      mov r20.xyzw, r33.xyzw
      mov r21.xyzw, r34.zwxy
      mov r22.xyzw, r35.zwxy
      mov r23.xyzw, r40.zwxy
      mov r24.xyzw, r36.zwxy
      mov r25.xyzw, r37.zwxy
      mov r26.xyzw, r41.zwxy
      mov r13.yzw, r38.xxyz
      mov r14.yz, r39.yyxy
      mov r7.w, l(-1)
      mov r27.z, r14.w
      mov r28.z, r27.w
      mov r8.w, r28.w
      break 
    endif 
    iadd r9.w, r9.w, l(32)
    mov r16.xyzw, r29.yxzw
    mov r17.xyzw, r30.xyzw
    mov r18.xyzw, r31.wxyz
    mov r19.xyzw, r32.xyzw
    mov r20.xyzw, r33.xyzw
    mov r21.xyzw, r34.zwxy
    mov r22.xyzw, r35.zwxy
    mov r24.xyzw, r36.zwxy
    mov r25.xyzw, r37.zwxy
    mov r13.yzw, r38.xxyz
    mov r14.yz, r39.yyxy
    mov r7.w, r12.w
    mov r27.z, r14.w
    mov r28.z, r27.w
    mov r8.w, r28.w
    mov r23.xyzw, r40.zwxy
    mov r26.xyzw, r41.zwxy
  endloop 
  mov r29.xy, r16.ywyy
  mov r27.x, r16.z
  mov r16.yz, r17.xxwx
  mov r27.y, r17.y
  mov r29.z, r17.z
  mov r17.xyz, r18.yzwy
  mov r18.yz, r20.xxyx
  mov r28.xy, r20.zwzz
  mov r20.xy, r21.zwzz
  mov r21.z, r22.z
  mov r22.z, r23.z
  mov r23.z, r24.z
  mov r24.z, r25.z
  mov r25.z, r26.z
  mov r26.z, r14.z
else 
  mov r7.w, l(0)
endif 
if_nz r7.w
  if_nz r2.z
    add r30.yzw, r13.yyzw, cb1[24].xxyz
    mov r30.x, l(16)
    store_structured u2.xyzw, cb2[52].x, l(880), r30.xyzw
  endif 
  add r13.yzw, r5.xxyz, -r13.yyzw
  and r6.w, r8.w, l(0x0000ffff)
  ubfe r9.w, l(6), l(25), r8.w
  imul null, r10.w, r6.w, l(6)
  dp3 r12.w, cb11[r10.w + 0].xyzx, r13.yzwy
  add_sat r12.w, r12.w, cb11[r10.w + 0].w
  dp3 r14.z, cb11[r10.w + 1].xyzx, r13.yzwy
  add_sat r14.z, r14.z, cb11[r10.w + 1].w
  mul r12.w, r12.w, r14.z
  dp3 r14.z, cb11[r10.w + 2].xyzx, r13.yzwy
  add_sat r14.z, r14.z, cb11[r10.w + 2].w
  mul r12.w, r12.w, r14.z
  dp3 r14.z, cb11[r10.w + 3].xyzx, r13.yzwy
  add_sat r14.z, r14.z, cb11[r10.w + 3].w
  mul r12.w, r12.w, r14.z
  dp3 r14.z, cb11[r10.w + 4].xyzx, r13.yzwy
  add_sat r14.z, r14.z, cb11[r10.w + 4].w
  mul r12.w, r12.w, r14.z
  dp3 r14.z, cb11[r10.w + 5].xyzx, r13.yzwy
  add_sat r10.w, r14.z, cb11[r10.w + 5].w
  mul r30.x, r10.w, r12.w
  and r10.w, r19.w, l(1)
  mov r30.yz, l(0,0,1.000000,0)
  movc r14.zw, r10.wwww, r30.xxxy, r30.zzzx
  mov r30.x, l(1.000000)
  mov r10.w, r19.w
  mov r31.xy, r14.zwzz
  mov r12.w, l(1)
  loop 
    ige r16.w, r12.w, r9.w
    breakc_nz r16.w
    iadd r16.w, r6.w, r12.w
    imul null, r16.w, r16.w, l(6)
    dp3 r17.w, cb11[r16.w + 0].xyzx, r13.yzwy
    add_sat r17.w, r17.w, cb11[r16.w + 0].w
    mul r17.w, r17.w, r31.x
    dp3 r18.w, cb11[r16.w + 1].xyzx, r13.yzwy
    add_sat r18.w, r18.w, cb11[r16.w + 1].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r16.w + 2].xyzx, r13.yzwy
    add_sat r18.w, r18.w, cb11[r16.w + 2].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r16.w + 3].xyzx, r13.yzwy
    add_sat r18.w, r18.w, cb11[r16.w + 3].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r16.w + 4].xyzx, r13.yzwy
    add_sat r18.w, r18.w, cb11[r16.w + 4].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r16.w + 5].xyzx, r13.yzwy
    add_sat r16.w, r18.w, cb11[r16.w + 5].w
    mul r31.x, r16.w, r17.w
    ushr r18.w, r10.w, l(2)
    ubfe r20.z, l(1), l(2), r10.w
    and r20.w, r18.w, l(2)
    max r21.w, r31.x, r31.y
    mad r16.w, -r17.w, r16.w, l(1.000000)
    mul r16.w, r16.w, r31.y
    movc r30.y, r20.w, r16.w, r21.w
    movc r31.xy, r20.zzzz, r31.xyxx, r30.xyxx
    iadd r12.w, r12.w, l(1)
    mov r10.w, r18.w
  endloop 
  mov_sat r31.y, r31.y
  mul r30.w, r20.x, r31.y
  lt r6.w, l(0.000000), r30.w
  if_nz r6.w
    if_nz r2.z
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r6.w, cb2[52].x, l(880), u2.xxxx
      or r6.w, r6.w, l(32)
      store_structured u2.x, cb2[52].x, l(880), r6.w
      store_structured u2.x, cb2[52].x, l(896), r30.w
    endif 
    mul r6.w, r20.y, r30.w
    dp3 r9.w, r15.xyzx, r21.xyzx
    dp3 r10.w, r13.yzwy, r21.xyzx
    add r10.w, -r22.w, r10.w
    ge r12.w, r10.w, l(0.000000)
    max r10.w, r3.z, |r10.w|
    movc r10.w, r12.w, r10.w, -r10.w
    max r9.w, -r9.w, l(0.00000010)
    div r9.w, r10.w, r9.w
    min r9.w, |r9.w|, l(131072.000000)
    dp3 r10.w, r15.xyzx, r22.xyzx
    dp3 r12.w, r13.yzwy, r22.xyzx
    add r12.w, -r23.w, r12.w
    ge r14.z, r12.w, l(0.000000)
    max r12.w, r3.z, |r12.w|
    movc r12.w, r14.z, r12.w, -r12.w
    max r10.w, -r10.w, l(0.00000010)
    div r10.w, r12.w, r10.w
    min r9.w, r9.w, |r10.w|
    dp3 r10.w, r15.xyzx, r23.xyzx
    dp3 r12.w, r13.yzwy, r23.xyzx
    add r12.w, -r24.w, r12.w
    ge r14.z, r12.w, l(0.000000)
    max r12.w, r3.z, |r12.w|
    movc r12.w, r14.z, r12.w, -r12.w
    max r10.w, -r10.w, l(0.00000010)
    div r10.w, r12.w, r10.w
    min r9.w, r9.w, |r10.w|
    dp3 r10.w, r15.xyzx, r24.xyzx
    dp3 r12.w, r13.yzwy, r24.xyzx
    add r12.w, -r25.w, r12.w
    ge r14.z, r12.w, l(0.000000)
    max r12.w, r3.z, |r12.w|
    movc r12.w, r14.z, r12.w, -r12.w
    max r10.w, -r10.w, l(0.00000010)
    div r10.w, r12.w, r10.w
    min r9.w, r9.w, |r10.w|
    dp3 r10.w, r15.xyzx, r25.xyzx
    dp3 r12.w, r13.yzwy, r25.xyzx
    add r12.w, -r26.w, r12.w
    ge r14.z, r12.w, l(0.000000)
    max r12.w, r3.z, |r12.w|
    movc r12.w, r14.z, r12.w, -r12.w
    max r10.w, -r10.w, l(0.00000010)
    div r10.w, r12.w, r10.w
    min r9.w, r9.w, |r10.w|
    dp3 r10.w, r15.xyzx, r26.xyzx
    dp3 r12.w, r13.yzwy, r26.xyzx
    add r12.w, -r14.y, r12.w
    ge r14.y, r12.w, l(0.000000)
    max r12.w, r3.z, |r12.w|
    movc r12.w, r14.y, r12.w, -r12.w
    max r10.w, -r10.w, l(0.00000010)
    div r10.w, r12.w, r10.w
    min r9.w, r9.w, |r10.w|
    add r14.yzw, r13.yyzw, r19.xxyz
    mad r14.yzw, r15.xxyz, r9.wwww, r14.yyzw
    dp3 r10.w, r14.yzwy, r14.yzwy
    sqrt r10.w, r10.w
    div r9.w, r9.w, r10.w
    add r9.w, r9.w, r9.w
    sqrt r9.w, r9.w
    mad r9.w, r2.w, l(5.000000), r9.w
    add r9.w, r9.w, l(-0.844800)
    dp3 r19.x, r14.yzwy, r29.xyzx
    dp3 r19.y, r14.yzwy, r16.xyzx
    dp3 r19.z, r14.yzwy, r27.xyzx
    ubfe r8.w, l(9), l(16), r8.w
    utof r19.w, r8.w
    sample_l_indexable(texturecubearray)(float,float,float,float) r14.yzw, r19.xyzw, t8.wxyz, s2, r9.w
    and r20.xyz, r14.yzwy, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r20.xyz, r20.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r8.w, r20.y, r20.x
    or r8.w, r20.z, r8.w
    movc r14.yzw, r8.wwww, l(0,1.000000,1.000000,0), r14.yyzw
    dp3 r20.x, r13.yzwy, r29.xyzx
    dp3 r20.y, r13.yzwy, r16.xyzx
    dp3 r20.z, r13.yzwy, r27.xyzx
    mad_sat r13.yzw, r20.xxyz, r17.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    mad r13.yzw, r13.yyzw, r18.xxyz, r28.xxyz
    dp3 r19.x, r11.xyzx, r29.xyzx
    dp3 r19.y, r11.xyzx, r16.xyzx
    dp3 r19.z, r11.xyzx, r27.xyzx
    lt r16.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r19.xyzx
    movc r17.z, r16.x, l(0), l(0.500000)
    mov r17.xy, l(0,0,0,0)
    add r17.xyz, r13.yzwy, r17.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t17.xyzw, s4, l(0.000000)
    mul r18.xyz, r19.xyzx, r19.xyzx
    mul r18.xyz, r6.wwww, r18.xyzx
    movc r20.z, r16.y, l(0), l(0.500000)
    mov r20.xy, l(0,0,0,0)
    add r16.xyw, r13.yzyw, r20.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r16.xyw, r16.xywx, t18.xywz, s4, l(0.000000)
    mul r16.xyw, r18.yyyy, r16.xyxw
    mad r16.xyw, r17.xyxz, r18.xxxx, r16.xyxw
    movc r17.z, r16.z, l(0), l(0.500000)
    mov r17.xy, l(0,0,0,0)
    add r13.yzw, r13.yyzw, r17.xxyz
    sample_l_indexable(texture3d)(float,float,float,float) r13.yzw, r13.yzwy, t19.wxyz, s4, l(0.000000)
    mad r13.yzw, r13.yyzw, r18.zzzz, r16.xxyw
    sample_l_indexable(texturecubearray)(float,float,float,float) r16.xyz, r19.xyzw, t8.xyzw, s2, l(6.000000)
    and r17.xyz, r16.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r17.xyz, r17.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r8.w, r17.y, r17.x
    or r8.w, r17.z, r8.w
    movc r16.xyz, r8.wwww, l(1.000000,1.000000,0,0), r16.xyzx
    mul r13.yzw, r13.yyzw, r16.xxyz
    dp3 r8.w, r13.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r9.w, r3.w, r8.w
    mul r13.yzw, r6.wwww, r14.yyzw
    dp3 r6.w, r13.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r6.w, r3.w, r8.w, r6.w
    div r6.w, r9.w, r6.w
    mul r30.xyz, r6.wwww, r13.yzwy
    mov r6.w, l(257)
  else 
    mov r30.xyzw, l(0,0,0,0)
    mov r6.w, l(1)
  endif 
  mov r8.w, l(-1)
else 
  mov r30.xyzw, l(0,0,0,0)
  mov r6.w, l(0)
endif 
and r7.w, r7.w, r8.w
if_z r7.w
  iadd r7.w, cb2[0].y, -cb2[58].x
  ftou r8.w, cb1[44].x
  iadd r8.w, r8.w, l(7)
  ushr r8.w, r8.w, l(3)
  imad r8.w, r0.z, r8.w, r0.y
  bfi r8.w, l(27), l(5), r8.w, l(16)
  and r9.w, r7.w, l(-32)
  iadd r10.w, r7.w, -r9.w
  and r12.w, cb2[0].y, l(-32)
  iadd r13.y, -r12.w, cb2[0].y
  mov r16.x, l(16)
  mov r17.yz, l(0,0,1.000000,0)
  mov r18.xy, l(0,0,0,0)
  mov r19.xz, l(1.000000,0,1.000000,0)
  mov r20.xy, l(0,0,0,0)
  mov r21.xy, l(0,0,0,0)
  mov r22.xyz, l(0,0,0,0)
  mov r22.w, r30.x
  mov r23.xyz, r30.yzwy
  mov r23.w, r6.w
  mov r13.z, r9.w
  loop 
    uge r13.w, r13.z, cb2[0].y
    breakc_nz r13.w
    ushr r13.w, r13.z, l(5)
    iadd r13.w, r8.w, r13.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.w, l(0), t26.xxxx
    ieq r14.y, r9.w, r13.z
    bfi r14.z, r10.w, l(0), l(0), r13.w
    movc r13.w, r14.y, r14.z, r13.w
    ieq r14.y, r12.w, r13.z
    ubfe r14.z, r13.y, l(0), r13.w
    movc r13.w, r14.y, r14.z, r13.w
    mov r24.xyzw, r22.xyzw
    mov r25.xyzw, r23.xyzw
    mov r14.y, r13.w
    loop 
      breakc_z r14.y
      firstbit_lo r14.z, r14.y
      ishl r14.w, l(1), r14.z
      not r14.w, r14.w
      and r14.y, r14.w, r14.y
      iadd r14.z, r13.z, r14.z
      imul null, r14.z, r14.z, l(14)
      and r14.w, r25.w, l(255)
      ult r17.w, r14.w, l(32)
      and r17.w, r2.z, r17.w
      if_nz r17.w
        imad r14.w, r14.w, l(20), l(880)
        add r16.yzw, cb1[24].xxyz, cb10[r14.z + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r14.w, r16.xyzw
      endif 
      iadd r26.w, r25.w, l(1)
      add r16.yzw, r5.xxyz, -cb10[r14.z + 0].xxyz
      and r14.w, l(0x0000ffff), cb10[r14.z + 7].z
      ubfe r17.w, l(6), l(25), cb10[r14.z + 7].z
      imul null, r18.w, r14.w, l(6)
      dp3 r20.w, cb11[r18.w + 0].xyzx, r16.yzwy
      add_sat r20.w, r20.w, cb11[r18.w + 0].w
      dp3 r21.w, cb11[r18.w + 1].xyzx, r16.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 1].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 2].xyzx, r16.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 2].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 3].xyzx, r16.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 3].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 4].xyzx, r16.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 4].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 5].xyzx, r16.yzwy
      add_sat r18.w, r21.w, cb11[r18.w + 5].w
      mul r17.x, r18.w, r20.w
      and r18.w, l(1), cb10[r14.z + 6].x
      movc r27.xy, r18.wwww, r17.xyxx, r17.zxzz
      mov r17.x, cb10[r14.z + 6].x
      mov r28.xy, r27.xyxx
      mov r18.w, l(1)
      loop 
        ige r20.w, r18.w, r17.w
        breakc_nz r20.w
        iadd r20.w, r14.w, r18.w
        imul null, r20.w, r20.w, l(6)
        dp3 r21.w, cb11[r20.w + 0].xyzx, r16.yzwy
        add_sat r21.w, r21.w, cb11[r20.w + 0].w
        mul r21.w, r21.w, r28.x
        dp3 r27.z, cb11[r20.w + 1].xyzx, r16.yzwy
        add_sat r27.z, r27.z, cb11[r20.w + 1].w
        mul r21.w, r21.w, r27.z
        dp3 r27.z, cb11[r20.w + 2].xyzx, r16.yzwy
        add_sat r27.z, r27.z, cb11[r20.w + 2].w
        mul r21.w, r21.w, r27.z
        dp3 r27.z, cb11[r20.w + 3].xyzx, r16.yzwy
        add_sat r27.z, r27.z, cb11[r20.w + 3].w
        mul r21.w, r21.w, r27.z
        dp3 r27.z, cb11[r20.w + 4].xyzx, r16.yzwy
        add_sat r27.z, r27.z, cb11[r20.w + 4].w
        mul r21.w, r21.w, r27.z
        dp3 r27.z, cb11[r20.w + 5].xyzx, r16.yzwy
        add_sat r20.w, r27.z, cb11[r20.w + 5].w
        mul r28.x, r20.w, r21.w
        ushr r27.z, r17.x, l(2)
        ubfe r27.w, l(1), l(2), r17.x
        and r28.z, r27.z, l(2)
        max r28.w, r28.x, r28.y
        mad r20.w, -r21.w, r20.w, l(1.000000)
        mul r20.w, r20.w, r28.y
        movc r19.y, r28.z, r20.w, r28.w
        movc r28.xy, r27.wwww, r28.xyxx, r19.xyxx
        iadd r18.w, r18.w, l(1)
        mov r17.x, r27.z
      endloop 
      mov_sat r28.y, r28.y
      mul r14.w, r28.y, cb10[r14.z + 6].y
      lt r17.x, l(0.000000), r14.w
      if_nz r17.x
        and r17.x, r26.w, l(255)
        iadd r17.w, r17.x, l(-1)
        ult r17.w, r17.w, l(32)
        and r17.w, r2.z, r17.w
        if_nz r17.w
          imad r17.xw, r17.xxxx, l(20, 0, 0, 20), l(860, 0, 0, 876)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r18.w, cb2[52].x, r17.x, u2.xxxx
          or r18.w, r18.w, l(32)
          store_structured u2.x, cb2[52].x, r17.x, r18.w
          store_structured u2.x, cb2[52].x, r17.w, r14.w
        endif 
        iadd r25.w, r25.w, l(257)
        mad r25.z, r28.y, cb10[r14.z + 6].y, r25.z
        mul r14.w, r14.w, cb10[r14.z + 7].y
        mov r27.x, cb10[r14.z + 7].w
        mov r27.yz, cb10[r14.z + 8].xxyx
        dp3 r17.x, r15.xyzx, r27.xyzx
        dp3 r17.w, r16.yzwy, r27.xyzx
        add r17.w, r17.w, -cb10[r14.z + 8].z
        ge r18.w, r17.w, l(0.000000)
        max r17.w, r3.z, |r17.w|
        movc r17.w, r18.w, r17.w, -r17.w
        max r17.x, -r17.x, l(0.00000010)
        div r17.x, r17.w, r17.x
        min r17.x, |r17.x|, l(131072.000000)
        mov r27.x, cb10[r14.z + 8].w
        mov r27.yz, cb10[r14.z + 9].xxyx
        dp3 r17.w, r15.xyzx, r27.xyzx
        dp3 r18.w, r16.yzwy, r27.xyzx
        add r18.w, r18.w, -cb10[r14.z + 9].z
        ge r19.y, r18.w, l(0.000000)
        max r18.w, r3.z, |r18.w|
        movc r18.w, r19.y, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.x, |r17.w|, r17.x
        mov r27.x, cb10[r14.z + 9].w
        mov r27.yz, cb10[r14.z + 10].xxyx
        dp3 r17.w, r15.xyzx, r27.xyzx
        dp3 r18.w, r16.yzwy, r27.xyzx
        add r18.w, r18.w, -cb10[r14.z + 10].z
        ge r19.y, r18.w, l(0.000000)
        max r18.w, r3.z, |r18.w|
        movc r18.w, r19.y, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.x, |r17.w|, r17.x
        mov r27.x, cb10[r14.z + 10].w
        mov r27.yz, cb10[r14.z + 11].xxyx
        dp3 r17.w, r15.xyzx, r27.xyzx
        dp3 r18.w, r16.yzwy, r27.xyzx
        add r18.w, r18.w, -cb10[r14.z + 11].z
        ge r19.y, r18.w, l(0.000000)
        max r18.w, r3.z, |r18.w|
        movc r18.w, r19.y, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.x, |r17.w|, r17.x
        mov r27.x, cb10[r14.z + 11].w
        mov r27.yz, cb10[r14.z + 12].xxyx
        dp3 r17.w, r15.xyzx, r27.xyzx
        dp3 r18.w, r16.yzwy, r27.xyzx
        add r18.w, r18.w, -cb10[r14.z + 12].z
        ge r19.y, r18.w, l(0.000000)
        max r18.w, r3.z, |r18.w|
        movc r18.w, r19.y, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.x, |r17.w|, r17.x
        mov r27.x, cb10[r14.z + 12].w
        mov r27.yz, cb10[r14.z + 13].xxyx
        dp3 r17.w, r15.xyzx, r27.xyzx
        dp3 r18.w, r16.yzwy, r27.xyzx
        add r18.w, r18.w, -cb10[r14.z + 13].z
        ge r19.y, r18.w, l(0.000000)
        max r18.w, r3.z, |r18.w|
        movc r18.w, r19.y, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.x, |r17.w|, r17.x
        add r27.x, r16.y, cb10[r14.z + 3].w
        add r27.yz, r16.zzwz, cb10[r14.z + 4].xxyx
        mad r27.xyz, r15.xyzx, r17.xxxx, r27.xyzx
        dp3 r17.w, r27.xyzx, r27.xyzx
        sqrt r17.w, r17.w
        div r17.x, r17.x, r17.w
        add r17.x, r17.x, r17.x
        sqrt r17.x, r17.x
        mad r17.x, r2.w, l(5.000000), r17.x
        add r17.x, r17.x, l(-0.844800)
        mov r29.x, cb10[r14.z + 0].w
        mov r29.y, cb10[r14.z + 1].z
        mov r29.z, cb10[r14.z + 2].y
        dp3 r31.x, r27.xyzx, r29.xyzx
        mov r32.xy, cb10[r14.z + 1].xwxx
        mov r32.z, cb10[r14.z + 2].z
        dp3 r31.y, r27.xyzx, r32.xyzx
        mov r33.x, cb10[r14.z + 1].y
        mov r33.yz, cb10[r14.z + 2].xxwx
        dp3 r31.z, r27.xyzx, r33.xyzx
        ubfe r17.w, l(9), l(16), cb10[r14.z + 7].z
        utof r31.w, r17.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r27.xyz, r31.xyzw, t8.xyzw, s2, r17.x
        and r28.xzw, r27.xxyz, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
        ieq r28.xzw, r28.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
        or r17.x, r28.z, r28.x
        or r17.x, r28.w, r17.x
        movc r27.xyz, r17.xxxx, l(1.000000,1.000000,0,0), r27.xyzx
        dp3 r34.x, r16.yzwy, r29.xyzx
        dp3 r34.y, r16.yzwy, r32.xyzx
        dp3 r34.z, r16.yzwy, r33.xyzx
        mad_sat r16.yzw, r34.xxyz, cb10[r14.z + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r34.xy, r16.yzyy, cb10[r14.z + 4].zwzz
        mul r34.z, r16.w, cb10[r14.z + 5].x
        add r16.yzw, r34.xxyz, cb10[r14.z + 5].yyzw
        dp3 r31.x, r11.xyzx, r29.xyzx
        dp3 r31.y, r11.xyzx, r32.xyzx
        dp3 r31.z, r11.xyzx, r33.xyzx
        lt r28.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r31.xxyz
        movc r18.z, r28.x, l(0), l(0.500000)
        add r29.xyz, r16.yzwy, r18.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t17.xyzw, s4, l(0.000000)
        mul r32.xyz, r31.xyzx, r31.xyzx
        mul r32.xyz, r14.wwww, r32.xyzx
        movc r20.z, r28.z, l(0), l(0.500000)
        add r33.xyz, r16.yzwy, r20.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r33.xyz, r33.xyzx, t18.xyzw, s4, l(0.000000)
        mul r33.xyz, r32.yyyy, r33.xyzx
        mad r29.xyz, r29.xyzx, r32.xxxx, r33.xyzx
        movc r21.z, r28.w, l(0), l(0.500000)
        add r16.yzw, r16.yyzw, r21.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r16.yzw, r16.yzwy, t19.wxyz, s4, l(0.000000)
        mad r16.yzw, r16.yyzw, r32.zzzz, r29.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r28.xzw, r31.xyzw, t8.xwyz, s2, l(6.000000)
        and r29.xyz, r28.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r29.xyz, r29.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r14.z, r29.y, r29.x
        or r14.z, r29.z, r14.z
        movc r28.xzw, r14.zzzz, l(1.000000,0,1.000000,0), r28.xxzw
        mul r29.xyz, r16.yzwy, r28.xzwx
        dp3 r14.z, r29.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r24.xyz, r16.yzwy, r28.xzwx, r24.xyzx
        mul r16.y, r3.w, r14.z
        mul r27.xyz, r14.wwww, r27.xyzx
        dp3 r14.w, r27.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r14.z, r3.w, r14.z, r14.w
        div r14.z, r16.y, r14.z
        mov r29.x, r24.w
        mov r29.yz, r25.xxyx
        mad r16.yzw, r27.xxyz, r14.zzzz, r29.xxyz
        mov r24.w, r16.y
        mov r25.xy, r16.zwzz
      else 
        mov r26.xyz, r25.xyzx
        mov r25.xyzw, r26.xyzw
      endif 
    endloop 
    mov r22.xyzw, r24.xyzw
    mov r23.xyzw, r25.xyzw
    iadd r13.z, r13.z, l(32)
  endloop 
  mov r16.x, l(16)
  mov r17.yz, l(0,0,1.000000,0)
  mov r18.xy, l(0,0,0,0)
  mov r20.xy, l(0,0,0,0)
  mov r21.xy, l(0,0,0,0)
  mov r13.yzw, r22.xxyz
  mov r24.x, r22.w
  mov r24.yz, r23.xxyx
  mov r14.yzw, r23.zzwz
  mov r12.w, l(0)
  loop 
    uge r17.w, r12.w, r7.w
    breakc_nz r17.w
    ushr r17.w, r12.w, l(5)
    iadd r17.w, r8.w, r17.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.w, l(0), t26.xxxx
    ieq r18.w, r9.w, r12.w
    ubfe r19.x, r10.w, l(0), r17.w
    movc r17.w, r18.w, r19.x, r17.w
    mov r25.xyz, r13.yzwy
    mov r26.xyz, r24.xyzx
    mov r27.xyz, r14.ywzy
    mov r18.w, r17.w
    loop 
      breakc_z r18.w
      firstbit_lo r19.x, r18.w
      ishl r19.y, l(1), r19.x
      not r19.y, r19.y
      and r18.w, r18.w, r19.y
      iadd r19.x, r12.w, r19.x
      imul null, r19.x, r19.x, l(14)
      and r19.y, r27.z, l(255)
      ult r20.w, r19.y, l(32)
      and r20.w, r2.z, r20.w
      if_nz r20.w
        imad r19.y, r19.y, l(20), l(880)
        add r16.yzw, cb1[24].xxyz, cb10[r19.x + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r19.y, r16.xyzw
      endif 
      iadd r28.y, r27.z, l(1)
      add r16.yzw, r5.xxyz, -cb10[r19.x + 0].xxyz
      and r19.y, l(0x0000ffff), cb10[r19.x + 7].z
      ubfe r20.w, l(6), l(25), cb10[r19.x + 7].z
      imul null, r21.w, r19.y, l(6)
      dp3 r24.w, cb11[r21.w + 0].xyzx, r16.yzwy
      add_sat r24.w, r24.w, cb11[r21.w + 0].w
      dp3 r25.w, cb11[r21.w + 1].xyzx, r16.yzwy
      add_sat r25.w, r25.w, cb11[r21.w + 1].w
      mul r24.w, r24.w, r25.w
      dp3 r25.w, cb11[r21.w + 2].xyzx, r16.yzwy
      add_sat r25.w, r25.w, cb11[r21.w + 2].w
      mul r24.w, r24.w, r25.w
      dp3 r25.w, cb11[r21.w + 3].xyzx, r16.yzwy
      add_sat r25.w, r25.w, cb11[r21.w + 3].w
      mul r24.w, r24.w, r25.w
      dp3 r25.w, cb11[r21.w + 4].xyzx, r16.yzwy
      add_sat r25.w, r25.w, cb11[r21.w + 4].w
      mul r24.w, r24.w, r25.w
      dp3 r25.w, cb11[r21.w + 5].xyzx, r16.yzwy
      add_sat r21.w, r25.w, cb11[r21.w + 5].w
      mul r17.x, r21.w, r24.w
      and r21.w, l(1), cb10[r19.x + 6].x
      movc r28.zw, r21.wwww, r17.xxxy, r17.zzzx
      mov r17.x, cb10[r19.x + 6].x
      mov r29.xy, r28.zwzz
      mov r21.w, l(1)
      loop 
        ige r24.w, r21.w, r20.w
        breakc_nz r24.w
        iadd r24.w, r19.y, r21.w
        imul null, r24.w, r24.w, l(6)
        dp3 r25.w, cb11[r24.w + 0].xyzx, r16.yzwy
        add_sat r25.w, r25.w, cb11[r24.w + 0].w
        mul r25.w, r25.w, r29.x
        dp3 r26.w, cb11[r24.w + 1].xyzx, r16.yzwy
        add_sat r26.w, r26.w, cb11[r24.w + 1].w
        mul r25.w, r25.w, r26.w
        dp3 r26.w, cb11[r24.w + 2].xyzx, r16.yzwy
        add_sat r26.w, r26.w, cb11[r24.w + 2].w
        mul r25.w, r25.w, r26.w
        dp3 r26.w, cb11[r24.w + 3].xyzx, r16.yzwy
        add_sat r26.w, r26.w, cb11[r24.w + 3].w
        mul r25.w, r25.w, r26.w
        dp3 r26.w, cb11[r24.w + 4].xyzx, r16.yzwy
        add_sat r26.w, r26.w, cb11[r24.w + 4].w
        mul r25.w, r25.w, r26.w
        dp3 r26.w, cb11[r24.w + 5].xyzx, r16.yzwy
        add_sat r24.w, r26.w, cb11[r24.w + 5].w
        mul r29.x, r24.w, r25.w
        ushr r26.w, r17.x, l(2)
        ubfe r27.w, l(1), l(2), r17.x
        and r29.z, r26.w, l(2)
        max r29.w, r29.x, r29.y
        mad r24.w, -r25.w, r24.w, l(1.000000)
        mul r24.w, r24.w, r29.y
        movc r19.w, r29.z, r24.w, r29.w
        movc r29.xy, r27.wwww, r29.xyxx, r19.zwzz
        iadd r21.w, r21.w, l(1)
        mov r17.x, r26.w
      endloop 
      add_sat r17.x, -r27.y, r29.y
      mul r19.y, r17.x, cb10[r19.x + 6].y
      lt r19.w, l(0.000000), r19.y
      if_nz r19.w
        and r19.w, r28.y, l(255)
        iadd r20.w, r19.w, l(-1)
        ult r20.w, r20.w, l(32)
        and r20.w, r2.z, r20.w
        if_nz r20.w
          imad r28.zw, r19.wwww, l(0, 0, 20, 20), l(0, 0, 860, 876)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r19.w, cb2[52].x, r28.z, u2.xxxx
          or r19.w, r19.w, l(32)
          store_structured u2.x, cb2[52].x, r28.z, r19.w
          store_structured u2.x, cb2[52].x, r28.w, r19.y
        endif 
        iadd r27.z, r27.z, l(257)
        mad r27.x, r17.x, cb10[r19.x + 6].y, r27.x
        mul r17.x, r19.y, cb10[r19.x + 7].y
        mov r31.x, cb10[r19.x + 7].w
        mov r31.yz, cb10[r19.x + 8].xxyx
        dp3 r19.y, r15.xyzx, r31.xyzx
        dp3 r19.w, r16.yzwy, r31.xyzx
        add r19.w, r19.w, -cb10[r19.x + 8].z
        ge r20.w, r19.w, l(0.000000)
        max r19.w, r3.z, |r19.w|
        movc r19.w, r20.w, r19.w, -r19.w
        max r19.y, -r19.y, l(0.00000010)
        div r19.y, r19.w, r19.y
        min r19.y, |r19.y|, l(131072.000000)
        mov r31.x, cb10[r19.x + 8].w
        mov r31.yz, cb10[r19.x + 9].xxyx
        dp3 r19.w, r15.xyzx, r31.xyzx
        dp3 r20.w, r16.yzwy, r31.xyzx
        add r20.w, r20.w, -cb10[r19.x + 9].z
        ge r21.w, r20.w, l(0.000000)
        max r20.w, r3.z, |r20.w|
        movc r20.w, r21.w, r20.w, -r20.w
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r20.w, r19.w
        min r19.y, |r19.w|, r19.y
        mov r31.x, cb10[r19.x + 9].w
        mov r31.yz, cb10[r19.x + 10].xxyx
        dp3 r19.w, r15.xyzx, r31.xyzx
        dp3 r20.w, r16.yzwy, r31.xyzx
        add r20.w, r20.w, -cb10[r19.x + 10].z
        ge r21.w, r20.w, l(0.000000)
        max r20.w, r3.z, |r20.w|
        movc r20.w, r21.w, r20.w, -r20.w
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r20.w, r19.w
        min r19.y, |r19.w|, r19.y
        mov r31.x, cb10[r19.x + 10].w
        mov r31.yz, cb10[r19.x + 11].xxyx
        dp3 r19.w, r15.xyzx, r31.xyzx
        dp3 r20.w, r16.yzwy, r31.xyzx
        add r20.w, r20.w, -cb10[r19.x + 11].z
        ge r21.w, r20.w, l(0.000000)
        max r20.w, r3.z, |r20.w|
        movc r20.w, r21.w, r20.w, -r20.w
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r20.w, r19.w
        min r19.y, |r19.w|, r19.y
        mov r31.x, cb10[r19.x + 11].w
        mov r31.yz, cb10[r19.x + 12].xxyx
        dp3 r19.w, r15.xyzx, r31.xyzx
        dp3 r20.w, r16.yzwy, r31.xyzx
        add r20.w, r20.w, -cb10[r19.x + 12].z
        ge r21.w, r20.w, l(0.000000)
        max r20.w, r3.z, |r20.w|
        movc r20.w, r21.w, r20.w, -r20.w
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r20.w, r19.w
        min r19.y, |r19.w|, r19.y
        mov r31.x, cb10[r19.x + 12].w
        mov r31.yz, cb10[r19.x + 13].xxyx
        dp3 r19.w, r15.xyzx, r31.xyzx
        dp3 r20.w, r16.yzwy, r31.xyzx
        add r20.w, r20.w, -cb10[r19.x + 13].z
        ge r21.w, r20.w, l(0.000000)
        max r20.w, r3.z, |r20.w|
        movc r20.w, r21.w, r20.w, -r20.w
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r20.w, r19.w
        min r19.y, |r19.w|, r19.y
        add r31.x, r16.y, cb10[r19.x + 3].w
        add r31.yz, r16.zzwz, cb10[r19.x + 4].xxyx
        mad r29.xzw, r15.xxyz, r19.yyyy, r31.xxyz
        dp3 r19.w, r29.xzwx, r29.xzwx
        sqrt r19.w, r19.w
        div r19.y, r19.y, r19.w
        add r19.y, r19.y, r19.y
        sqrt r19.y, r19.y
        mad r19.y, r2.w, l(5.000000), r19.y
        add r19.y, r19.y, l(-0.844800)
        mov r31.x, cb10[r19.x + 0].w
        mov r31.y, cb10[r19.x + 1].z
        mov r31.z, cb10[r19.x + 2].y
        dp3 r32.x, r29.xzwx, r31.xyzx
        mov r33.xy, cb10[r19.x + 1].xwxx
        mov r33.z, cb10[r19.x + 2].z
        dp3 r32.y, r29.xzwx, r33.xyzx
        mov r34.x, cb10[r19.x + 1].y
        mov r34.yz, cb10[r19.x + 2].xxwx
        dp3 r32.z, r29.xzwx, r34.xyzx
        ubfe r19.w, l(9), l(16), cb10[r19.x + 7].z
        utof r32.w, r19.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r29.xzw, r32.xyzw, t8.xwyz, s2, r19.y
        and r35.xyz, r29.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r35.xyz, r35.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r19.y, r35.y, r35.x
        or r19.y, r35.z, r19.y
        movc r29.xzw, r19.yyyy, l(1.000000,0,1.000000,0), r29.xxzw
        dp3 r35.x, r16.yzwy, r31.xyzx
        dp3 r35.y, r16.yzwy, r33.xyzx
        dp3 r35.z, r16.yzwy, r34.xyzx
        mad_sat r16.yzw, r35.xxyz, cb10[r19.x + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r35.xy, r16.yzyy, cb10[r19.x + 4].zwzz
        mul r35.z, r16.w, cb10[r19.x + 5].x
        add r16.yzw, r35.xxyz, cb10[r19.x + 5].yyzw
        dp3 r32.x, r11.xyzx, r31.xyzx
        dp3 r32.y, r11.xyzx, r33.xyzx
        dp3 r32.z, r11.xyzx, r34.xyzx
        lt r19.xyw, l(0.000000, 0.000000, 0.000000, 0.000000), r32.xyxz
        movc r18.z, r19.x, l(0), l(0.500000)
        add r31.xyz, r16.yzwy, r18.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r31.xyz, r31.xyzx, t17.xyzw, s4, l(0.000000)
        mul r33.xyz, r32.xyzx, r32.xyzx
        mul r33.xyz, r17.xxxx, r33.xyzx
        movc r20.z, r19.y, l(0), l(0.500000)
        add r34.xyz, r16.yzwy, r20.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r34.xyz, r34.xyzx, t18.xyzw, s4, l(0.000000)
        mul r34.xyz, r33.yyyy, r34.xyzx
        mad r31.xyz, r31.xyzx, r33.xxxx, r34.xyzx
        movc r21.z, r19.w, l(0), l(0.500000)
        add r16.yzw, r16.yyzw, r21.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r16.yzw, r16.yzwy, t19.wxyz, s4, l(0.000000)
        mad r16.yzw, r16.yyzw, r33.zzzz, r31.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyw, r32.xyzw, t8.xywz, s2, l(6.000000)
        and r31.xyz, r19.xywx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r31.xyz, r31.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r18.z, r31.y, r31.x
        or r18.z, r31.z, r18.z
        movc r19.xyw, r18.zzzz, l(1.000000,1.000000,0,0), r19.xyxw
        mul r31.xyz, r16.yzwy, r19.xywx
        dp3 r18.z, r31.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r25.xyz, r16.yzwy, r19.xywx, r25.xyzx
        mul r16.y, r3.w, r18.z
        mul r19.xyw, r17.xxxx, r29.xzxw
        dp3 r16.z, r19.xywx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r16.z, r3.w, r18.z, r16.z
        div r16.y, r16.y, r16.z
        mad r26.xyz, r19.xywx, r16.yyyy, r26.xyzx
      else 
        mov r28.x, r27.x
        mov r27.xz, r28.xxyx
      endif 
    endloop 
    mov r13.yzw, r25.xxyz
    mov r24.xyz, r26.xyzx
    mov r14.yz, r27.xxzx
    iadd r12.w, r12.w, l(32)
  endloop 
  ge r2.w, r23.z, l(1.000000)
  and r3.z, r23.w, l(0x0000ff00)
  bfi r3.z, l(8), l(0), r14.z, r3.z
  movc r6.w, r2.w, r3.z, r14.z
  max r2.w, r14.y, l(1.000000)
  rcp r2.w, r2.w
  mov_sat r14.y, r14.y
  mul r16.xyz, r2.wwww, r13.yzwy
  mul r30.xyz, r2.wwww, r24.xyzx
  lt r3.z, r14.y, l(0.990000)
  if_nz r3.z
    iadd r6.w, r6.w, l(256)
    add r3.z, -r14.y, l(1.000000)
    mul r3.w, r3.z, cb2[19].x
    add r14.yzw, r5.xxyz, -cb2[35].xxyz
    mul r17.x, r14.y, cb2[35].w
    mul r17.yz, r14.zzwz, cb2[36].xxyx
    add_sat r14.yzw, r17.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    mul r17.xy, r14.yzyy, cb2[36].zwzz
    mul r17.z, r14.w, cb2[37].x
    add r14.yzw, r17.xxyz, cb2[37].yyzw
    lt r17.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
    movc r17.xyz, r17.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
    mov r17.w, l(0)
    add r18.xyz, r14.yzwy, r17.wwxw
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t17.xyzw, s4, l(0.000000)
    mul r19.xyz, r11.xyzx, r11.xyzx
    mul r19.xyz, r3.wwww, r19.xyzx
    add r20.xyz, r14.yzwy, r17.wwyw
    sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t18.xyzw, s4, l(0.000000)
    mul r20.xyz, r19.yyyy, r20.xyzx
    mad r18.xyz, r18.xyzx, r19.xxxx, r20.xyzx
    add r14.yzw, r14.yyzw, r17.wwwz
    sample_l_indexable(texture3d)(float,float,float,float) r14.yzw, r14.yzwy, t19.wxyz, s4, l(0.000000)
    mad r14.yzw, r14.yyzw, r19.zzzz, r18.xxyz
    mov r11.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
    mul r14.yzw, r14.yyzw, r17.xxyz
    dp3 r3.w, r14.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r16.xyz, r13.yzwy, r2.wwww, r14.yzwy
    mov r15.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r13.yzw, r15.xyzw, t8.wxyz, s2, r3.y
    mad r2.w, cb2[19].x, r3.z, -r3.w
    mad r2.w, r2.y, r2.w, r3.w
    mad r30.xyz, r13.yzwy, r2.wwww, r30.xyzx
  endif 
else 
  mov r16.xyz, l(0,0,0,0)
endif 
add r2.w, r4.z, r2.x
log r2.w, |r2.w|
mul r2.w, r1.w, r2.w
exp r2.w, r2.w
add r2.w, r4.z, r2.w
add_sat r2.w, r2.w, l(-1.000000)
mul r3.yzw, r4.zzzz, r16.xxyz
and r13.yzw, r0.wwww, r3.yyzw
mad r14.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r14.yz, r14.yzyy, t5.zxyw, s2, l(0.000000)
mul r17.xyz, r2.wwww, r30.xyzx
mul r18.xyz, r14.yyyy, r17.xyzx
mul r14.yzw, r14.zzzz, r17.xxyz
sqrt r2.y, r1.w
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r2.w, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r7.w, r2.x, r2.y, r2.w
mul r2.yw, r2.yyyw, r7.wwww
ushr r0.x, r0.x, l(24)
imul null, r0.x, r0.x, l(15)
ubfe r7.w, l(3), l(24), cb9[r0.x + 1].w
switch r7.w
  case l(4)
  if_nz r2.z
    add r17.yzw, cb1[24].xxyz, cb9[r0.x + 0].xxyz
    mov r17.x, l(2)
    store_structured u2.xyzw, cb2[52].x, l(112), r17.xyzw
  endif 
  lt r8.w, l(0.000000), cb9[r0.x + 6].y
  mov r17.xy, cb9[r0.x + 5].zwzz
  mov r17.z, cb9[r0.x + 6].x
  mad r19.xyz, -r17.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), cb9[r0.x + 0].xyzx
  add r20.xyz, -r5.xyzx, r19.xyzx
  dp3 r9.w, r17.xyzx, r20.xyzx
  div_sat r10.w, -r9.w, cb9[r0.x + 6].y
  mad r21.xyz, r10.wwww, r17.xyzx, r19.xyzx
  movc r21.xyz, r8.wwww, r21.xyzx, cb9[r0.x + 0].xyzx
  add r21.xyz, -r5.xyzx, r21.xyzx
  dp3 r11.w, r21.xyzx, r21.xyzx
  rsq r12.w, r11.w
  mul r21.xyz, r12.wwww, r21.xyzx
  dp3 r12.w, r11.xyzx, r21.xyzx
  mov_sat r15.w, r12.w
  movc r15.w, r0.w, |r12.w|, r15.w
  lt r16.w, l(0.000000), r15.w
  if_nz r16.w
    sqrt r16.w, r11.w
    mul r17.w, cb9[r0.x + 3].x, cb9[r0.x + 3].x
    div r11.w, r17.w, r11.w
    min r11.w, r11.w, l(1.000000)
    mad_sat r21.xy, r16.wwww, cb9[r0.x + 2].xzxx, cb9[r0.x + 2].ywyy
    mul r21.zw, r21.xxxy, r21.xxxy
    mad r21.xy, r21.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
    mul r21.xy, r21.xyxx, r21.zwzz
    mul r11.w, r11.w, r21.x
    mul r11.w, r21.y, r11.w
    lt r16.w, l(0.000000), r11.w
    if_nz r16.w
      ubfe r16.w, l(3), l(27), cb9[r0.x + 1].w
      if_nz r2.z
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.w, cb2[52].x, l(112), u2.xxxx
        or r17.w, r17.w, l(4)
        store_structured u2.x, cb2[52].x, l(112), r17.w
        store_structured u2.x, cb2[52].x, l(128), r11.w
      endif 
      ine r16.w, r16.w, l(1)
      if_nz r16.w
        utof r21.xy, r1.yxyy
        dp2 r16.w, r21.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
        frc r16.w, r16.w
        mul r16.w, r16.w, l(52.982918)
        frc r16.w, r16.w
        mad r16.w, r16.w, l(6.28318548), cb1[70].w
        sincos r21.x, r22.x, r16.w
        mad r16.w, |r12.w|, l(-0.200000), l(0.400000)
        lt r17.w, r12.w, l(0.000000)
        and r17.w, r0.w, r17.w
        movc r16.w, r17.w, -r16.w, r16.w
        mad r21.yzw, r11.xxyz, r16.wwww, r5.xxyz
        add r21.yzw, r21.yyzw, -cb9[r0.x + 4].yyzw
        max r16.w, |r21.w|, |r21.z|
        max r16.w, r16.w, |r21.y|
        div r16.w, cb9[r0.x + 5].x, r16.w
        add r16.w, r16.w, cb9[r0.x + 5].y
        dp3 r17.w, r21.yzwy, r21.yzwy
        rsq r17.w, r17.w
        max r16.w, r16.w, l(0.00006104)
        and r18.w, l(0x0000ffff), cb9[r0.x + 1].w
        mov r23.x, -r13.x
        utof r24.w, r18.w
        mov r23.y, r14.x
        mov r23.z, r13.x
        mov r18.w, l(0)
        mov r19.w, l(0)
        loop 
          ige r20.w, r19.w, l(8)
          breakc_nz r20.w
          dp2 r22.y, icb[r19.w + 0].yxyy, r23.xyxx
          dp2 r22.z, icb[r19.w + 0].yxyy, r23.yzyy
          mul r25.yz, r22.yyzy, cb9[r0.x + 3].yyyy
          mul r25.x, r22.x, r25.y
          mul r25.w, r21.x, r25.y
          mad r24.xyz, r21.yzwy, r17.wwww, r25.xzwx
          sample_c_lz_indexable(texturecubearray)(float,float,float,float) r20.w, r24.xyzw, t10.xxxx, s13, r16.w
          mad r18.w, r20.w, l(0.125000), r18.w
          iadd r19.w, r19.w, l(1)
        endloop 
      else 
        mov r18.w, l(1.000000)
      endif 
      mul r11.w, r11.w, r18.w
      lt r16.w, l(0.000000), r11.w
      if_nz r16.w
        mul r16.w, r1.z, cb9[r0.x + 1].z
        mul r16.w, r16.w, l(0.250000)
        dp3 r17.w, r17.xyzx, r15.xyzx
        dp3 r15.x, r15.xyzx, r20.xyzx
        mad r15.y, -r17.w, r17.w, cb9[r0.x + 6].y
        mad r9.w, r17.w, r15.x, -r9.w
        div_sat r9.w, r9.w, r15.y
        div r15.x, r15.y, cb9[r0.x + 6].y
        mul r15.x, r15.x, l(10.000000)
        min r15.x, r15.x, l(1.000000)
        add r9.w, -r10.w, r9.w
        mad r9.w, r15.x, r9.w, r10.w
        mad r15.xyz, r9.wwww, r17.xyzx, r19.xyzx
        movc r15.xyz, r8.wwww, r15.xyzx, cb9[r0.x + 0].xyzx
        add r15.xyz, -r5.xyzx, r15.xyzx
        dp3 r8.w, r15.xyzx, r15.xyzx
        rsq r8.w, r8.w
        mul r17.xyz, r8.wwww, r15.xyzx
        ubfe r9.w, l(4), l(16), cb9[r0.x + 1].w
        ult r10.w, l(0), r9.w
        and r10.w, r3.x, r10.w
        if_nz r10.w
          iadd r9.w, r9.w, cb2[0].x
          imad r9.w, r9.w, l(15), l(-15)
          mad r10.w, |r12.w|, l(-0.200000), l(0.400000)
          lt r17.w, r12.w, l(0.000000)
          and r17.w, r0.w, r17.w
          movc r10.w, r17.w, -r10.w, r10.w
          mad r19.xyz, r11.xyzx, r10.wwww, r5.xyzx
          mov r20.xyz, cb9[r9.w + 6].yzwy
          mov r20.w, cb9[r9.w + 7].x
          mov r19.w, l(1.000000)
          dp4 r10.w, r20.xyzw, r19.xyzw
          mov r20.xyz, cb9[r9.w + 7].yzwy
          mov r20.w, cb9[r9.w + 8].x
          dp4 r17.w, r20.xyzw, r19.xyzw
          lt r18.w, r17.w, r10.w
          if_z r18.w
            mov r20.xyz, cb9[r9.w + 4].yzwy
            mov r20.w, cb9[r9.w + 5].x
            dp4 r20.x, r20.xyzw, r19.xyzw
            mov r21.xyz, cb9[r9.w + 5].yzwy
            mov r21.w, cb9[r9.w + 6].x
            dp4 r20.y, r21.xyzw, r19.xyzw
            div r19.xy, r20.xyxx, r17.wwww
            mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r20.x, r19.x, cb9[r9.w + 9].w
            add r20.y, r19.y, cb9[r9.w + 10].x
            mul r19.xy, r20.xyxx, cb9[r9.w + 9].yzyy
            div r19.zw, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].yyyw
            add r20.xy, -r19.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r20.xy, r19.xyxx, r20.xyxx
            ge r19.zw, r19.zzzw, r19.xxxy
            or r19.zw, r19.zzzw, r20.xxxy
            or r19.z, r19.w, r19.z
            if_z r19.z
              mov_sat r19.xy, r19.xyxx
              mad r20.x, r19.x, cb9[r9.w + 8].y, cb9[r9.w + 8].z
              mad r20.y, r19.y, cb9[r9.w + 8].w, cb9[r9.w + 9].x
              mul r19.x, r17.w, cb9[r9.w + 10].z
              mad r10.w, cb9[r9.w + 10].y, r17.w, r10.w
              div r10.w, r10.w, r19.x
            endif 
          else 
            mov r19.z, l(-1)
          endif 
          or r17.w, r18.w, r19.z
          if_z r17.w
            max r10.w, r10.w, l(0.00006104)
            and r17.w, l(0x0000ffff), cb9[r9.w + 1].w
            if_nz cb2[58].y
              mov r19.x, -r13.x
              utof r21.z, r17.w
              mov r19.y, r14.x
              mov r19.z, r13.x
              mov r18.w, l(0)
              mov r19.w, l(0)
              loop 
                ige r20.w, r19.w, l(8)
                breakc_nz r20.w
                dp2 r22.x, icb[r19.w + 0].yxyy, r19.xyxx
                dp2 r22.y, icb[r19.w + 0].yxyy, r19.yzyy
                mad r21.xy, r22.xyxx, cb9[r9.w + 3].yyyy, r20.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r21.xyzx, t9.xxxx, s13, r10.w
                mad r18.w, r20.w, l(0.125000), r18.w
                iadd r19.w, r19.w, l(1)
              endloop 
            else 
              utof r20.z, r17.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r20.xyzx, t9.xxxx, s13, r10.w
            endif 
            mul r9.w, r18.w, r18.w
            mul r9.w, r18.w, r9.w
          else 
            mov r9.w, l(1.000000)
          endif 
          mul r11.w, r9.w, r11.w
        else 
          ubfe r9.w, l(4), l(20), cb9[r0.x + 1].w
          ult r10.w, l(0), r9.w
          not r17.w, r3.x
          and r10.w, r10.w, r17.w
          if_nz r10.w
            iadd r9.w, r9.w, cb2[0].x
            imad r9.w, r9.w, l(15), l(-15)
            mad r10.w, |r12.w|, l(-0.200000), l(0.400000)
            lt r17.w, r12.w, l(0.000000)
            and r17.w, r0.w, r17.w
            movc r10.w, r17.w, -r10.w, r10.w
            mad r19.xyz, r11.xyzx, r10.wwww, r5.xyzx
            mov r20.xyz, cb9[r9.w + 6].yzwy
            mov r20.w, cb9[r9.w + 7].x
            mov r19.w, l(1.000000)
            dp4 r10.w, r20.xyzw, r19.xyzw
            mov r20.xyz, cb9[r9.w + 7].yzwy
            mov r20.w, cb9[r9.w + 8].x
            dp4 r17.w, r20.xyzw, r19.xyzw
            lt r18.w, r17.w, r10.w
            if_z r18.w
              mov r20.xyz, cb9[r9.w + 4].yzwy
              mov r20.w, cb9[r9.w + 5].x
              dp4 r20.x, r20.xyzw, r19.xyzw
              mov r21.xyz, cb9[r9.w + 5].yzwy
              mov r21.w, cb9[r9.w + 6].x
              dp4 r20.y, r21.xyzw, r19.xyzw
              div r19.xy, r20.xyxx, r17.wwww
              mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r20.x, r19.x, cb9[r9.w + 9].w
              add r20.y, r19.y, cb9[r9.w + 10].x
              mul r19.xy, r20.xyxx, cb9[r9.w + 9].yzyy
              div r19.zw, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].yyyw
              add r20.xy, -r19.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r20.xy, r19.xyxx, r20.xyxx
              ge r19.zw, r19.zzzw, r19.xxxy
              or r19.zw, r19.zzzw, r20.xxxy
              or r19.z, r19.w, r19.z
              if_z r19.z
                mov_sat r19.xy, r19.xyxx
                mad r20.x, r19.x, cb9[r9.w + 8].y, cb9[r9.w + 8].z
                mad r20.y, r19.y, cb9[r9.w + 8].w, cb9[r9.w + 9].x
                mul r19.x, r17.w, cb9[r9.w + 10].z
                mad r10.w, cb9[r9.w + 10].y, r17.w, r10.w
                div r10.w, r10.w, r19.x
              endif 
            else 
              mov r19.z, l(-1)
            endif 
            or r17.w, r18.w, r19.z
            if_z r17.w
              max r10.w, r10.w, l(0.00006104)
              and r17.w, l(0x0000ffff), cb9[r9.w + 1].w
              if_nz cb2[58].y
                mov r19.x, -r13.x
                utof r21.z, r17.w
                mov r19.y, r14.x
                mov r19.z, r13.x
                mov r18.w, l(0)
                mov r19.w, l(0)
                loop 
                  ige r20.w, r19.w, l(8)
                  breakc_nz r20.w
                  dp2 r22.x, icb[r19.w + 0].yxyy, r19.xyxx
                  dp2 r22.y, icb[r19.w + 0].yxyy, r19.yzyy
                  mad r21.xy, r22.xyxx, cb9[r9.w + 3].yyyy, r20.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r21.xyzx, t9.xxxx, s13, r10.w
                  mad r18.w, r20.w, l(0.125000), r18.w
                  iadd r19.w, r19.w, l(1)
                endloop 
              else 
                utof r20.z, r17.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r20.xyzx, t9.xxxx, s13, r10.w
              endif 
              mul r9.w, r18.w, r18.w
              mul r9.w, r18.w, r9.w
            else 
              mov r9.w, l(1.000000)
            endif 
            mul r11.w, r9.w, r11.w
          endif 
        endif 
        mad r9.w, -r2.x, l(0.500000), l(1.000000)
        mad r9.w, -r15.w, r9.w, l(1.000000)
        mul r9.w, r9.w, r9.w
        mad r9.w, -r9.w, l(0.620000), l(0.620000)
        add r9.w, -r15.w, r9.w
        mad r9.w, r1.w, r9.w, r15.w
        mul r9.w, r11.w, r9.w
        mov r19.x, cb9[r0.x + 0].w
        mov r19.yz, cb9[r0.x + 1].xxyx
        mul r20.xyz, r9.wwww, r19.xyzx
        lt r10.w, l(0.000000), r12.w
        mad r20.xyz, r16.xyzx, r4.zzzz, r20.xyzx
        dp3_sat r12.w, r11.xyzx, r17.xyzx
        mad r15.xyz, r15.xyzx, r8.wwww, r12.xyzx
        dp3 r8.w, r15.xyzx, r15.xyzx
        rsq r8.w, r8.w
        mul r15.xyz, r8.wwww, r15.xyzx
        dp3 r8.w, r15.xyzx, r12.xyzx
        dp3 r15.x, r11.xyzx, r15.xyzx
        mad r15.y, |r15.x|, r1.z, -|r15.x|
        mad r15.x, |r15.x|, r15.y, l(1.000000)
        mad r15.y, r12.w, r2.y, r2.w
        mul r15.x, r15.x, r15.x
        mul r15.x, r15.y, r15.x
        rcp r15.x, r15.x
        mul r12.w, r16.w, r12.w
        mul r12.w, r12.w, r15.x
        mul r12.w, r11.w, r12.w
        mad r15.xyz, r12.wwww, r19.xyzx, r14.yzwy
        add_sat r8.w, -r8.w, l(1.000000)
        mul r15.w, r8.w, r8.w
        mul r15.w, r15.w, r15.w
        mul r8.w, r8.w, r15.w
        mul r8.w, r8.w, r12.w
        mad r17.xyz, r8.wwww, r19.xyzx, r18.xyzx
        mad r19.xyz, r9.wwww, r19.xyzx, r13.yzwy
        and r19.xyz, r0.wwww, r19.xyzx
        movc r3.yzw, r10.wwww, r20.xxyz, r3.yyzw
        movc r13.yzw, r10.wwww, r13.yyzw, r19.xxyz
        movc r18.xyz, r10.wwww, r17.xyzx, r18.xyzx
        movc r14.yzw, r10.wwww, r15.xxyz, r14.yyzw
        if_nz r2.z
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r8.w, cb2[52].x, l(112), u2.xxxx
          or r8.w, r8.w, l(8)
          store_structured u2.x, cb2[52].x, l(112), r8.w
          store_structured u2.x, cb2[52].x, l(132), r11.w
        endif 
        mov r7.w, l(0x00010101)
      else 
        mov r7.w, l(257)
      endif 
    else 
      mov r7.w, l(1)
    endif 
  else 
    mov r7.w, l(1)
  endif 
  break 
  case l(2)
  if_nz r2.z
    add r15.yzw, cb1[24].xxyz, cb9[r0.x + 0].xxyz
    mov r15.x, l(2)
    store_structured u2.xyzw, cb2[52].x, l(112), r15.xyzw
  endif 
  add r15.xy, -r5.xyxx, cb9[r0.x + 3].zwzz
  add r15.z, -r5.z, cb9[r0.x + 4].x
  dp3 r8.w, r15.xyzx, r15.xyzx
  rsq r8.w, r8.w
  mul r17.xyz, r8.wwww, r15.xyzx
  dp3 r9.w, r11.xyzx, r17.xyzx
  mov_sat r10.w, r9.w
  movc r11.w, r0.w, |r9.w|, r10.w
  lt r12.w, l(0.000000), r11.w
  if_nz r12.w
    mov r17.xyz, cb9[r0.x + 7].yzwy
    mov r17.w, cb9[r0.x + 8].x
    mov r5.w, l(1.000000)
    dp4 r12.w, r17.xyzw, r5.xyzw
    lt r15.w, r12.w, l(1.000000)
    if_nz r15.w
      mov r19.xyz, l(1.000000,1.000000,1.000000,0)
      mov r15.w, l(0)
    else 
      add r20.xyz, -r5.xyzx, cb9[r0.x + 0].xyzx
      mul r16.w, cb9[r0.x + 3].x, cb9[r0.x + 3].x
      dp3 r18.w, r20.xyzx, r20.xyzx
      div r16.w, r16.w, r18.w
      min r16.w, r16.w, l(1.000000)
      mad_sat r20.xy, r12.wwww, cb9[r0.x + 2].xzxx, cb9[r0.x + 2].ywyy
      mul r20.zw, r20.xxxy, r20.xxxy
      mad r20.xy, r20.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r20.xy, r20.xyxx, r20.zwzz
      mul r16.w, r16.w, r20.x
      mul r16.w, r20.y, r16.w
      mov r20.xyz, cb9[r0.x + 4].yzwy
      mov r20.w, cb9[r0.x + 5].x
      dp4 r20.x, r20.xyzw, r5.xyzw
      mov r21.xyz, cb9[r0.x + 5].yzwy
      mov r21.w, cb9[r0.x + 6].x
      dp4 r20.y, r21.xyzw, r5.xyzw
      div r20.xy, r20.xyxx, r12.wwww
      lt r5.w, cb9[r0.x + 10].w, l(0.00048828)
      if_nz r5.w
        mad_sat r21.xy, |r20.xyxx|, cb9[r0.x + 12].xyxx, cb9[r0.x + 12].zwzz
        mul r21.zw, r21.xxxy, r21.xxxy
        mad r21.xy, r21.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r21.xy, r21.xyxx, r21.zwzz
        mul r5.w, r21.y, r21.x
      else 
        mul_sat r21.xyzw, |r20.yyxx|, cb9[r0.x + 11].xyzw
        log r21.xyzw, r21.xyzw
        mul r21.xyzw, r21.xyzw, cb9[r0.x + 12].zzzz
        exp r21.xyzw, r21.xyzw
        add r21.xy, r21.zwzz, r21.xyxx
        log r21.xy, r21.xyxx
        mul r21.xy, r21.xyxx, cb9[r0.x + 12].wwww
        exp r21.xy, r21.xyxx
        mul r12.w, r21.x, cb9[r0.x + 12].x
        mad r18.w, cb9[r0.x + 12].y, r21.y, l(-1.000000)
        mad r12.w, cb9[r0.x + 12].y, r21.y, -r12.w
        div_sat r12.w, r18.w, r12.w
        mul r18.w, r12.w, r12.w
        mad r12.w, r12.w, l(-2.000000), l(3.000000)
        mul r5.w, r12.w, r18.w
      endif 
      mul r15.w, r5.w, r16.w
      and r5.w, l(255), cb9[r0.x + 14].w
      if_nz r5.w
        mov r20.z, l(1.000000)
        dp3 r12.w, cb9[r0.x + 13].xyzx, r20.xyzx
        mov r21.x, cb9[r0.x + 13].w
        mov r21.yz, cb9[r0.x + 14].xxyx
        dp3 r16.w, r21.xyzx, r20.xyzx
        frc r20.x, r12.w
        frc r20.y, r16.w
        iadd r5.w, r5.w, l(-1)
        utof r20.z, r5.w
        sample_l_indexable(texture2darray)(float,float,float,float) r19.xyz, r20.xyzx, t20.xyzw, s2, l(0.000000)
      else 
        mov r19.xyz, l(1.000000,1.000000,1.000000,0)
      endif 
    endif 
    mov r20.x, cb9[r0.x + 0].w
    mov r20.yz, cb9[r0.x + 1].xxyx
    mul r19.xyz, r19.xyzx, r20.xyzx
    lt r5.w, l(0.000000), r15.w
    if_nz r5.w
      ubfe r5.w, l(3), l(27), cb9[r0.x + 1].w
      if_nz r2.z
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r12.w, cb2[52].x, l(112), u2.xxxx
        or r12.w, r12.w, l(4)
        store_structured u2.x, cb2[52].x, l(112), r12.w
        store_structured u2.x, cb2[52].x, l(128), r15.w
      endif 
      ine r5.w, r5.w, l(1)
      if_nz r5.w
        mad r5.w, |r9.w|, l(-0.200000), l(0.400000)
        lt r12.w, r9.w, l(0.000000)
        and r12.w, r0.w, r12.w
        movc r5.w, r12.w, -r5.w, r5.w
        mad r20.xyz, r11.xyzx, r5.wwww, r5.xyzx
        mov r21.xyz, cb9[r0.x + 6].yzwy
        mov r21.w, cb9[r0.x + 7].x
        mov r20.w, l(1.000000)
        dp4 r5.w, r21.xyzw, r20.xyzw
        dp4 r12.w, r17.xyzw, r20.xyzw
        ge r16.w, r12.w, r5.w
        if_nz r16.w
          mov r17.xyz, cb9[r0.x + 4].yzwy
          mov r17.w, cb9[r0.x + 5].x
          dp4 r17.x, r17.xyzw, r20.xyzw
          mov r21.xyz, cb9[r0.x + 5].yzwy
          mov r21.w, cb9[r0.x + 6].x
          dp4 r17.y, r21.xyzw, r20.xyzw
          div r17.xy, r17.xyxx, r12.wwww
          mad_sat r17.xy, r17.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
          mad r20.x, r17.x, cb9[r0.x + 8].y, cb9[r0.x + 8].z
          mad r20.y, r17.y, cb9[r0.x + 8].w, cb9[r0.x + 9].x
          div r5.w, r5.w, r12.w
          max r5.w, r5.w, l(0.00006104)
          and r12.w, l(0x0000ffff), cb9[r0.x + 1].w
          if_nz cb2[58].y
            mov r17.x, -r13.x
            utof r21.z, r12.w
            mov r17.y, r14.x
            mov r17.z, r13.x
            mov r16.w, l(0)
            mov r17.w, l(0)
            loop 
              ige r18.w, r17.w, l(8)
              breakc_nz r18.w
              dp2 r22.x, icb[r17.w + 0].yxyy, r17.xyxx
              dp2 r22.y, icb[r17.w + 0].yxyy, r17.yzyy
              mad r21.xy, r22.xyxx, cb9[r0.x + 3].yyyy, r20.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r21.xyzx, t9.xxxx, s13, r5.w
              mad r16.w, r18.w, l(0.125000), r16.w
              iadd r17.w, r17.w, l(1)
            endloop 
          else 
            utof r20.z, r12.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r20.xyzx, t9.xxxx, s13, r5.w
          endif 
          mul r5.w, r16.w, r16.w
          mul r5.w, r16.w, r5.w
        else 
          mov r5.w, l(1.000000)
        endif 
      else 
        mov r5.w, l(1.000000)
      endif 
      mul r5.w, r5.w, r15.w
      lt r12.w, l(0.000000), r5.w
      if_nz r12.w
        mul r12.w, r1.z, cb9[r0.x + 1].z
        mul r12.w, r10.w, r12.w
        ubfe r15.w, l(4), l(16), cb9[r0.x + 1].w
        ult r16.w, l(0), r15.w
        and r16.w, r3.x, r16.w
        if_nz r16.w
          iadd r15.w, r15.w, cb2[0].x
          imad r15.w, r15.w, l(15), l(-15)
          mad r16.w, |r9.w|, l(-0.200000), l(0.400000)
          lt r17.x, r9.w, l(0.000000)
          and r17.x, r0.w, r17.x
          movc r16.w, r17.x, -r16.w, r16.w
          mad r17.xyz, r11.xyzx, r16.wwww, r5.xyzx
          mov r20.xyz, cb9[r15.w + 6].yzwy
          mov r20.w, cb9[r15.w + 7].x
          mov r17.w, l(1.000000)
          dp4 r16.w, r20.xyzw, r17.xyzw
          mov r20.xyz, cb9[r15.w + 7].yzwy
          mov r20.w, cb9[r15.w + 8].x
          dp4 r18.w, r20.xyzw, r17.xyzw
          lt r19.w, r18.w, r16.w
          if_z r19.w
            mov r20.xyz, cb9[r15.w + 4].yzwy
            mov r20.w, cb9[r15.w + 5].x
            dp4 r20.x, r20.xyzw, r17.xyzw
            mov r21.xyz, cb9[r15.w + 5].yzwy
            mov r21.w, cb9[r15.w + 6].x
            dp4 r20.y, r21.xyzw, r17.xyzw
            div r17.xy, r20.xyxx, r18.wwww
            mad r17.xy, r17.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r20.x, r17.x, cb9[r15.w + 9].w
            add r20.y, r17.y, cb9[r15.w + 10].x
            mul r17.xy, r20.xyxx, cb9[r15.w + 9].yzyy
            div r17.zw, cb9[r15.w + 3].yyyy, cb9[r15.w + 8].yyyw
            add r20.xy, -r17.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r20.xy, r17.xyxx, r20.xyxx
            ge r17.zw, r17.zzzw, r17.xxxy
            or r17.zw, r17.zzzw, r20.xxxy
            or r17.z, r17.w, r17.z
            if_z r17.z
              mov_sat r17.xy, r17.xyxx
              mad r20.x, r17.x, cb9[r15.w + 8].y, cb9[r15.w + 8].z
              mad r20.y, r17.y, cb9[r15.w + 8].w, cb9[r15.w + 9].x
              mul r17.x, r18.w, cb9[r15.w + 10].z
              mad r16.w, cb9[r15.w + 10].y, r18.w, r16.w
              div r16.w, r16.w, r17.x
            endif 
          else 
            mov r17.z, l(-1)
          endif 
          or r17.x, r19.w, r17.z
          if_z r17.x
            max r16.w, r16.w, l(0.00006104)
            and r17.x, l(0x0000ffff), cb9[r15.w + 1].w
            if_nz cb2[58].y
              mov r21.x, -r13.x
              utof r22.z, r17.x
              mov r21.y, r14.x
              mov r21.z, r13.x
              mov r17.yz, l(0,0,0,0)
              loop 
                ige r17.w, r17.z, l(8)
                breakc_nz r17.w
                dp2 r23.x, icb[r17.z + 0].yxyy, r21.xyxx
                dp2 r23.y, icb[r17.z + 0].yxyy, r21.yzyy
                mad r22.xy, r23.xyxx, cb9[r15.w + 3].yyyy, r20.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r22.xyzx, t9.xxxx, s13, r16.w
                mad r17.y, r17.w, l(0.125000), r17.y
                iadd r17.z, r17.z, l(1)
              endloop 
            else 
              utof r20.z, r17.x
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.y, r20.xyzx, t9.xxxx, s13, r16.w
            endif 
            mul r15.w, r17.y, r17.y
            mul r15.w, r17.y, r15.w
          else 
            mov r15.w, l(1.000000)
          endif 
          mul r5.w, r5.w, r15.w
        else 
          ubfe r0.x, l(4), l(20), cb9[r0.x + 1].w
          ult r15.w, l(0), r0.x
          not r3.x, r3.x
          and r3.x, r3.x, r15.w
          if_nz r3.x
            iadd r0.x, r0.x, cb2[0].x
            imad r0.x, r0.x, l(15), l(-15)
            mad r3.x, |r9.w|, l(-0.200000), l(0.400000)
            lt r15.w, r9.w, l(0.000000)
            and r15.w, r0.w, r15.w
            movc r3.x, r15.w, -r3.x, r3.x
            mad r17.xyz, r11.xyzx, r3.xxxx, r5.xyzx
            mov r20.xyz, cb9[r0.x + 6].yzwy
            mov r20.w, cb9[r0.x + 7].x
            mov r17.w, l(1.000000)
            dp4 r3.x, r20.xyzw, r17.xyzw
            mov r20.xyz, cb9[r0.x + 7].yzwy
            mov r20.w, cb9[r0.x + 8].x
            dp4 r15.w, r20.xyzw, r17.xyzw
            lt r16.w, r15.w, r3.x
            if_z r16.w
              mov r20.xyz, cb9[r0.x + 4].yzwy
              mov r20.w, cb9[r0.x + 5].x
              dp4 r20.x, r20.xyzw, r17.xyzw
              mov r21.xyz, cb9[r0.x + 5].yzwy
              mov r21.w, cb9[r0.x + 6].x
              dp4 r20.y, r21.xyzw, r17.xyzw
              div r17.xy, r20.xyxx, r15.wwww
              mad r17.xy, r17.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r20.x, r17.x, cb9[r0.x + 9].w
              add r20.y, r17.y, cb9[r0.x + 10].x
              mul r17.xy, r20.xyxx, cb9[r0.x + 9].yzyy
              div r17.zw, cb9[r0.x + 3].yyyy, cb9[r0.x + 8].yyyw
              add r20.xy, -r17.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r20.xy, r17.xyxx, r20.xyxx
              ge r17.zw, r17.zzzw, r17.xxxy
              or r17.zw, r17.zzzw, r20.xxxy
              or r17.z, r17.w, r17.z
              if_z r17.z
                mov_sat r17.xy, r17.xyxx
                mad r20.x, r17.x, cb9[r0.x + 8].y, cb9[r0.x + 8].z
                mad r20.y, r17.y, cb9[r0.x + 8].w, cb9[r0.x + 9].x
                mul r17.x, r15.w, cb9[r0.x + 10].z
                mad r3.x, cb9[r0.x + 10].y, r15.w, r3.x
                div r3.x, r3.x, r17.x
              endif 
            else 
              mov r17.z, l(-1)
            endif 
            or r15.w, r16.w, r17.z
            if_z r15.w
              max r3.x, r3.x, l(0.00006104)
              and r15.w, l(0x0000ffff), cb9[r0.x + 1].w
              if_nz cb2[58].y
                mov r17.x, -r13.x
                utof r21.z, r15.w
                mov r17.y, r14.x
                mov r17.z, r13.x
                mov r13.x, l(0)
                mov r14.x, l(0)
                loop 
                  ige r16.w, r14.x, l(8)
                  breakc_nz r16.w
                  dp2 r22.x, icb[r14.x + 0].yxyy, r17.xyxx
                  dp2 r22.y, icb[r14.x + 0].yxyy, r17.yzyy
                  mad r21.xy, r22.xyxx, cb9[r0.x + 3].yyyy, r20.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r21.xyzx, t9.xxxx, s13, r3.x
                  mad r13.x, r16.w, l(0.125000), r13.x
                  iadd r14.x, r14.x, l(1)
                endloop 
              else 
                utof r20.z, r15.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.x, r20.xyzx, t9.xxxx, s13, r3.x
              endif 
              mul r0.x, r13.x, r13.x
              mul r0.x, r13.x, r0.x
            else 
              mov r0.x, l(1.000000)
            endif 
            mul r5.w, r0.x, r5.w
          endif 
        endif 
        mad r0.x, -r2.x, l(0.500000), l(1.000000)
        mad r0.x, -r11.w, r0.x, l(1.000000)
        mul r0.x, r0.x, r0.x
        mad r0.x, -r0.x, l(0.620000), l(0.620000)
        add r0.x, -r11.w, r0.x
        mad r0.x, r1.w, r0.x, r11.w
        mul r0.x, r5.w, r0.x
        mul r17.xyz, r19.xyzx, r0.xxxx
        lt r1.w, l(0.000000), r9.w
        mad r16.xyz, r16.xyzx, r4.zzzz, r17.xyzx
        mad r15.xyz, r15.xyzx, r8.wwww, r12.xyzx
        dp3 r2.x, r15.xyzx, r15.xyzx
        rsq r2.x, r2.x
        mul r15.xyz, r2.xxxx, r15.xyzx
        dp3 r2.x, r15.xyzx, r12.xyzx
        dp3 r3.x, r11.xyzx, r15.xyzx
        mad r1.z, |r3.x|, r1.z, -|r3.x|
        mad r1.z, |r3.x|, r1.z, l(1.000000)
        mad r2.y, r10.w, r2.y, r2.w
        mul r1.z, r1.z, r1.z
        mul r1.z, r2.y, r1.z
        rcp r1.z, r1.z
        mul r1.z, r12.w, r1.z
        mul r1.z, r1.z, r5.w
        mul r1.z, r1.z, l(0.250000)
        mad r11.xyz, r1.zzzz, r19.xyzx, r14.yzwy
        add_sat r2.x, -r2.x, l(1.000000)
        mul r2.y, r2.x, r2.x
        mul r2.y, r2.y, r2.y
        mul r2.x, r2.y, r2.x
        mul r1.z, r1.z, r2.x
        mad r2.xyw, r1.zzzz, r19.xyxz, r18.xyxz
        mad r12.xyz, r0.xxxx, r19.xyzx, r13.yzwy
        and r12.xyz, r0.wwww, r12.xyzx
        movc r3.yzw, r1.wwww, r16.xxyz, r3.yyzw
        movc r13.yzw, r1.wwww, r13.yyzw, r12.xxyz
        movc r18.xyz, r1.wwww, r2.xywx, r18.xyzx
        movc r14.yzw, r1.wwww, r11.xxyz, r14.yyzw
        if_nz r2.z
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r0.x, cb2[52].x, l(112), u2.xxxx
          or r0.x, r0.x, l(8)
          store_structured u2.x, cb2[52].x, l(112), r0.x
          store_structured u2.x, cb2[52].x, l(132), r5.w
        endif 
        mov r7.w, l(0x00010101)
      else 
        mov r7.w, l(257)
      endif 
    else 
      mov r7.w, l(1)
    endif 
  else 
    mov r7.w, l(1)
  endif 
  break 
  default 
  mov r7.w, l(0)
  break 
endswitch 
mad r4.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.x, r4.y
mad r2.xyw, r7.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r1.z, r2.x
ieq r1.z, r0.x, r1.z
movc r1.zw, r1.zzzz, r2.yyyw, l(0,0,-1.000000,0)
mad r2.xyw, r8.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r2.x, r2.x
ieq r2.x, r0.x, r2.x
movc r2.xy, r2.xxxx, r2.ywyy, l(-1.000000,0,0,0)
mad r7.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.w, r7.x
ieq r2.w, r0.x, r2.w
movc r7.xy, r2.wwww, r7.yzyy, l(-1.000000,0,0,0)
mad r8.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.w, r8.x
ieq r0.x, r0.x, r2.w
movc r8.xy, r0.xxxx, r8.yzyy, l(-1.000000,0,0,0)
mov r9.x, r1.z
mov r9.y, r2.x
mov r9.z, r7.x
mov r9.w, r8.x
add r9.xyzw, -r4.xxxx, r9.xyzw
ge r9.xyzw, |r9.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r9.xyzw, r9.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.x, r9.y, r9.x
add r0.x, r9.z, r0.x
add r0.x, r9.w, r0.x
mul r1.z, r2.y, r9.y
mad r1.z, r9.x, r1.w, r1.z
mad r1.z, r9.z, r7.y, r1.z
mad r1.z, r9.w, r8.y, r1.z
div r4.w, r1.z, r0.x
ge r0.x, l(0.000000), r0.x
movc r4.yz, r0.xxxx, l(0,0,0,0), r4.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.x, r1.w, r1.z
movc r2.xyw, r0.xxxx, r4.xyxz, r4.xzxy
mad r0.x, -r2.w, l(0.500000), r2.x
add r4.y, r0.x, r2.w
mad r4.z, -r2.y, l(0.500000), r0.x
add r4.x, r2.y, r4.z
mul r2.xyw, r6.xyxz, r3.yzyw
mad r2.xyw, r13.yzyw, r4.xyxz, r2.xyxw
mul r7.xyz, r18.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r7.xyz, r14.yzwy, l(0.040000, 0.040000, 0.040000, 0.000000), r7.xyzx
add r2.xyw, r2.xyxw, r7.xyxz
add r7.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r7.xyz, r7.xyzx, r18.xyzx
mad r4.xyz, r14.yzwy, r4.xyzx, r7.xyzx
mad r3.xyz, r3.yzwy, r6.xyzx, r4.xyzx
movc r2.xyw, r0.wwww, r2.xyxw, r3.xyxz
lt r0.x, l(0.000000), cb2[9].z
if_nz r0.x
  dp3 r0.x, r5.xyzx, r5.xyzx
  rsq r0.w, r0.x
  mul r3.xyz, r0.wwww, r5.xyzx
  sqrt r0.x, r0.x
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r1.zw, r0.xxxx, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r0.w, l(0.010000), |r5.z|
    mul r4.xy, r5.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r0.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r6.xyz, r1.wwww, cb2[12].xyzx
    exp r6.xyz, r6.xyzx
    add r6.xyz, -r4.xyzx, r6.xyzx
    mad r4.xyz, cb2[13].wwww, r6.xyzx, r4.xyzx
  else 
    mad r0.w, r0.x, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r5.z|
    mul r1.w, r5.z, cb2[15].z
    mul r3.w, r1.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r1.w, r3.w, r1.w
    mul r1.w, r0.w, r1.w
    movc r0.w, r1.z, r1.w, r0.w
    mul r6.xyz, r0.wwww, cb2[12].xyzx
    exp r4.xyz, r6.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xyzx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r1.w, cb2[8].w, -r0.w, l(1.000000)
  mul r1.w, r1.w, r1.w
  mul r1.w, r1.w, l(12.566371)
  div r1.z, r1.z, r1.w
  add r0.x, r0.x, -cb2[10].w
  mul_sat r0.x, r0.x, cb2[11].w
  mul r0.x, r0.x, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyz, r0.xxxx, cb2[11].xyzx
  mad r3.xyz, r0.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r6.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r6.xyzx
  mad r3.xyz, r2.xywx, r4.xyzx, r3.xyzx
else 
  mul r0.x, r5.z, cb2[6].x
  mad r0.w, cb2[6].x, r5.z, cb2[5].x
  lt r1.z, |r0.x|, l(0.000100)
  min r1.w, r0.w, l(64.000000)
  mul r1.w, r1.w, l(1.442695)
  exp r1.w, r1.w
  mov_sat r3.w, cb2[6].z
  lt r4.x, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r4.x, r1.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.x, r1.z, l(1.000000), r0.x
  div r0.x, r0.w, r0.x
  movc r0.x, r1.z, r3.w, r0.x
  mul r0.x, r0.x, cb2[5].z
  dp3 r0.w, r5.xyzx, r5.xyzx
  sqrt r1.z, r0.w
  mad r0.x, r0.x, r1.z, cb2[5].w
  exp r0.x, r0.x
  min r0.x, r0.x, l(1.000000)
  add r0.x, -r0.x, l(1.000000)
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r5.xyzx
  dp3 r0.w, cb2[7].yzwy, r4.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r0.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.x, r0.x, r4.w
  add r4.xyz, -r2.xywx, r4.xyzx
  mad r3.xyz, r0.xxxx, r4.xyzx, r2.xywx
endif 
mul r2.xyw, r3.xyxz, cb1[85].yyyy
ge r3.xyz, r2.xywx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyw, r2.xyxw, r3.xyxz
min r2.xyw, r2.xyxw, l(65024.000000, 65024.000000, 0.000000, 64512.000000)
ilt r0.x, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(2, 0, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(16)
and r0.w, r0.w, r1.z
and r3.z, r0.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xywx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xywx
movc r2.xyw, r0.xxxx, r3.xyxz, r2.xyxw
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.x, r7.w, l(1)
      break 
      case l(2)
      ubfe r0.x, l(1), l(8), r7.w
      break 
      case l(3)
      ushr r0.x, r7.w, l(16)
      break 
      case l(4)
      and r0.x, r6.w, l(255)
      break 
      case l(5)
      ubfe r0.x, l(8), l(8), r6.w
      break 
      default 
      mov r0.x, l(0)
      break 
    endswitch 
    utof r0.x, r0.x
    mul r0.x, r0.x, cb2[53].z
    mad r3.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xywx
    mad r2.xyw, cb2[53].wwww, r3.xyxz, r2.xyxw
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xywx
if_nz r2.z
  add r1.xyz, r5.xyzx, cb1[24].xyzx
  and r1.w, r7.w, l(1)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.x, r6.w, l(255)
  store_structured u2.x, cb2[52].x, l(108), r0.x
endif 
if_nz cb2[52].y
  and r0.x, r7.w, l(1)
  atomic_iadd g1, l(0), r0.x
  ubfe r0.w, l(1), l(8), r7.w
  atomic_iadd g1, l(4), r0.w
  ushr r1.x, r7.w, l(16)
  atomic_iadd g1, l(8), r1.x
  and r1.y, r6.w, l(255)
  atomic_iadd g1, l(12), r1.y
  ubfe r1.z, l(8), l(8), r6.w
  atomic_iadd g1, l(16), r1.z
  atomic_umax g2, l(0), r0.x
  atomic_umax g2, l(4), r0.w
  atomic_umax g2, l(8), r1.x
  atomic_umax g2, l(12), r1.y
  atomic_umax g2, l(16), r1.z
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.x, r1.x, l(63)
  if_nz r0.x
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.x, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.x
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.x, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.x
    ieq r0.yz, r0.yyzy, cb2[52].zzwz
    and r0.y, r0.z, r0.y
    if_nz r0.y
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.x
    endif 
  endif 
endif 
ret 
// Approximately 2065 instruction slots used
