//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:13 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3584], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 42
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(11), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.zw, r0.xxxy, l(0, 0, 4095, 4095)
imad r1.xy, r0.zwzz, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r3.x, r3.y, r3.x
lt r3.y, l(0.000000), r2.z
and r3.x, r3.y, r3.x
if_z r3.x
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.y, r1.xyww, t4.yxzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.zw, r1.xxxy
add r5.xy, r3.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r6.x, r3.y, l(0.984375)
mul r5.z, r3.y, l(1.01587307)
mad r3.y, r3.y, l(64.000000), l(-63.000000)
movc r3.y, r6.x, r3.y, r5.z
max r3.y, r3.y, l(0.00000001)
rcp r6.y, r3.y
and r3.xy, r3.xxxx, r6.xyxx
mul r5.zw, r5.xxxy, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r7.xyzw, r5.zwzz, t28.xyzw, s4.x
mul r5.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r5.zw, r5.zzzw
add r8.xy, -r5.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r9.y, r8.x, r8.y
mul r9.xz, r5.zzwz, r8.xxyx
mul r9.w, r5.w, r5.z
dp4 r5.z, r6.xyzw, r9.xyzw
add r7.xyzw, -r3.yyyy, r7.xyzw
min r5.w, |r7.w|, |r7.z|
min r5.w, r5.w, |r7.y|
min r5.w, r5.w, |r7.x|
max r8.x, |r7.w|, |r7.z|
max r8.x, |r7.y|, r8.x
max r7.x, |r7.x|, r8.x
eq r7.yzw, r5.wwww, |r7.yyzw|
movc r5.w, r7.y, r6.y, r6.x
movc r5.w, r7.z, r6.z, r5.w
movc r5.w, r7.w, r6.w, r5.w
mul r6.x, r3.y, l(0.010000)
lt r6.x, r6.x, r7.x
movc r5.z, r6.x, r5.w, r5.z
mul r4.z, r4.z, r5.z
if_nz cb2[55].x
  mul r5.z, r4.z, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r5.zzzz
  ret 
else 
  movc r5.z, cb2[54].w, r4.z, l(1.000000)
endif 
ge r4.z, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
add r1.zw, r5.xxxy, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r11.x, r1.z, cb1[12].x
mul r11.y, r1.w, cb1[13].y
mov r11.zw, l(0,0,1.000000,1.000000)
mul r5.xyw, r3.yyyy, r11.xyxz
mul r11.xyz, r5.yyyy, cb1[17].xyzx
mad r11.xyz, r5.xxxx, cb1[16].xyzx, r11.xyzx
mad r11.xyz, r5.wwww, cb1[18].xyzx, r11.xyzx
mad r1.z, r2.w, l(3.000000), l(0.500000)
ftou r1.z, r1.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r12.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r12.z
mul r12.xy, r1.wwww, r2.xyxx
and r13.xyzw, r1.zzzz, l(2, 1, 2, 1)
movc r13.xyzw, r13.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.z, r13.w, r13.z
movc r13.z, r1.z, l(-1.000000), l(1.000000)
mul r2.xyw, r13.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r5.xyw, r13.xyxz, l(1.000000, -2.000000, 0.000000, 1.000000)
mul r12.xyz, r12.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r12.yyyy
mad r2.xyw, r5.xyxw, r12.xxxx, r2.xyxw
mad r12.xyz, r13.xyzx, r12.zzzz, r2.xywx
movc r1.z, r4.z, l(-0.500000), l(-0.00146628)
add r1.z, r1.z, r2.z
mul_sat r2.y, r1.z, l(2.00982332)
dp3 r1.z, -r11.xyzx, -r11.xyzx
rsq r1.z, r1.z
mul r5.xyw, r1.zzzz, -r11.xyxz
dp2 r1.w, r3.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r1.w
utof r2.zw, r1.yyyx
dp2 r1.w, r2.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r15.x, r16.x, r1.w
dp3_sat r2.x, r12.xyzx, r5.xywx
dp3 r1.w, -r5.xywx, r12.xyzx
add r1.w, r1.w, r1.w
mad r17.xyz, r12.xyzx, -r1.wwww, -r5.xywx
mul r1.w, r2.y, l(17.000000)
exp r1.w, r1.w
add r1.w, r1.w, l(2.000000)
div r1.w, l(2.000000), r1.w
sqrt r2.z, r1.w
mul r3.yz, cb1[44].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
ftou r3.yz, r3.yyzy
ieq r3.yz, r1.xxyx, r3.yyzy
and r2.w, r3.z, r3.y
dp3 r3.y, r12.xyzx, cb2[17].xyzx
mov_sat r3.z, r3.y
movc r3.w, r4.z, |r3.y|, r3.z
ge r6.w, l(0.000000), r3.w
if_nz r6.w
  mov r7.w, l(0)
endif 
if_z r6.w
  mul r15.yzw, r11.yyyy, cb2[29].xxyz
  mad r15.yzw, r11.xxxx, cb2[28].xxyz, r15.yyzw
  mad r15.yzw, r11.zzzz, cb2[30].xxyz, r15.yyzw
  add r15.yzw, r15.yyzw, cb2[31].xxyz
  add r6.w, r15.w, -cb2[17].w
  mad r6.w, -r6.w, l(0.00006104), l(1.000000)
  mov_sat r8.w, r6.w
  eq r8.w, r6.w, r8.w
  if_nz r8.w
    mov r8.w, l(0)
    mov r9.w, l(0)
    loop 
      ge r10.w, r8.w, l(3.000000)
      breakc_nz r10.w
      ftou r10.w, r8.w
      add r13.zw, r15.yyyz, -cb2[r10.w + 20].xxxy
      max r13.z, |r13.w|, |r13.z|
      mul r9.w, r13.z, cb2[r10.w + 20].z
      lt r10.w, r9.w, l(1.000000)
      if_nz r10.w
        break 
      endif 
      add r8.w, r8.w, l(1.000000)
      mov r9.w, l(0)
    endloop 
  else 
    mov r8.w, l(3.000000)
    mov r9.w, l(0)
  endif 
  ge r10.w, r8.w, l(3.000000)
  if_nz r10.w
    mul r16.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r18.xz, r16.yyyy
    mov r18.y, -r18.z
    mad r16.yzw, r15.yyzy, r18.xxyz, r16.zzwz
    add r18.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r16.yzw, r16.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r16.yzw, r18.xxyz, r16.yyzw
    mul r13.zw, r16.wwwz, cb2[32].xxxx
    round_ni r13.zw, r13.zzzw
    mul r13.w, r13.w, cb2[27].x
    mad r13.z, r13.w, cb2[32].x, r13.z
    ftou r13.z, r13.z
    iadd r13.z, r13.z, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.z, l(0), t23.xxxx
    and r14.w, r13.w, l(0x40000000)
    ishl r18.x, r13.w, l(2)
    if_z r14.w
      and r14.w, r13.w, l(0x01ffffff)
      iadd r19.x, r13.z, r14.w
      ushr r13.z, r13.w, l(25)
      utof r13.z, r13.z
      mul r16.yzw, r13.zzzz, r16.yyzw
      frc r16.yzw, r16.yyzw
      mul r16.yzw, r16.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r16.yzw, r16.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      ushr r13.zw, r16.wwwz, l(0, 0, 6, 6)
      and r14.w, r19.z, l(0xc0000000)
      iadd r18.y, r19.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.y, r18.y, l(0), t23.xxxx
      movc r13.w, r13.w, r19.z, r18.y
      ushr r18.y, r13.w, l(13)
      movc r13.z, r13.z, r18.y, r13.w
      and r13.z, r13.z, l(8191)
      iadd r20.x, r13.z, r19.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
      mov r19.y, l(0)
      mov r20.y, l(1)
      movc r18.yzw, r14.wwww, r19.xxyz, r20.xxyz
      movc r20.yz, r14.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r13.zw, r16.wwwz, r20.yyyy
      and r13.zw, r13.zzzw, l(0, 0, 1, 1)
      and r19.w, r18.w, l(0xc0000000)
      iadd r20.y, r18.y, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.y, r20.y, l(0), t23.xxxx
      movc r13.w, r13.w, r18.w, r20.y
      ushr r20.y, r13.w, l(13)
      movc r13.z, r13.z, r20.y, r13.w
      and r13.z, r13.z, l(8191)
      iadd r20.x, r13.z, r18.y
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.w, r20.x, l(0), t23.xxxx
      movc r18.yzw, r19.wwww, r18.yyzw, r20.xxzw
      movc r18.yzw, r14.wwww, r19.xxyz, r18.yyzw
      and r13.z, r18.w, l(0xc0000000)
      if_z r13.z
        iadd r13.z, -r18.z, l(6)
        ushr r13.zw, r16.wwwz, r13.zzzz
        or r14.w, r18.w, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r14.w, r13.z
        and r13.z, r13.z, l(1023)
        iadd r19.x, r13.z, r18.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
        iadd r19.yz, r18.zzzz, l(0, 1, 2, 0)
        iadd r13.z, -r19.y, l(6)
        ushr r13.zw, r16.wwwz, r13.zzzz
        and r14.w, r19.w, l(0xc0000000)
        or r18.z, r19.w, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r18.z, r13.z
        and r13.z, r13.z, l(1023)
        iadd r20.x, r13.z, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
        mov r20.y, r19.z
        movc r20.xyz, r14.wwww, r19.xywx, r20.xyzx
        iadd r13.z, -r20.y, l(6)
        ushr r13.zw, r16.wwwz, r13.zzzz
        and r18.z, r20.z, l(0xc0000000)
        or r19.y, r20.z, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r19.y, r13.z
        and r13.z, r13.z, l(1023)
        iadd r21.x, r13.z, r20.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r21.y, r21.x, l(0), t23.xxxx
        movc r13.zw, r18.zzzz, r20.xxxz, r21.xxxy
        movc r18.yw, r14.wwww, r19.xxxw, r13.zzzw
      endif 
      and r13.z, r18.w, l(0xc0000000)
      if_z r13.z
        ubfe r13.w, l(14), l(15), r18.w
        utof r13.w, r13.w
        mul r13.w, r13.w, cb2[27].w
        mul r13.w, r13.w, l(0.00006104)
        and r19.xy, r18.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r14.w, r19.x
        mul r14.w, r14.w, cb2[27].w
        mul r14.w, r14.w, l(0.00003052)
        and r18.z, r16.z, l(3)
        iadd r18.z, r18.z, r18.y
        iadd r18.z, r18.z, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.z, l(0), t23.xxxx
        bfi r19.xzw, l(2, 0, 2, 1), l(3, 0, 1, 4), r16.yyzw, l(0, 0, 0, 0)
        ushr r16.y, r18.z, r19.x
        and r16.y, r16.y, l(255)
        utof r16.y, r16.y
        mul r16.y, r14.w, r16.y
        mad r16.y, r16.y, l(0.00392157), r13.w
        iadd r16.z, r19.z, l(1)
        ubfe r16.w, l(1), l(1), r16.w
        iadd r16.z, r16.w, r16.z
        iadd r16.z, r16.z, r18.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.z, r16.z, l(0), t23.xxxx
        ushr r16.z, r16.z, r19.w
        and r16.z, r16.z, l(0x0000ffff)
        utof r16.z, r16.z
        mul r14.w, r14.w, r16.z
        mad r13.w, r14.w, l(0.00001526), r13.w
        movc r18.x, r19.y, r16.y, r13.w
      else 
        and r13.w, r18.w, l(0x80000000)
        iadd r14.w, r18.y, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t23.xxxx
        movc r13.w, r13.w, r14.w, l(0)
        ishl r14.w, r18.w, l(2)
        ushr r16.y, r13.w, l(16)
        f16tof32 r16.y, r16.y
        and r13.w, r13.w, l(0x0000ffff)
        f16tof32 r13.w, r13.w
        mad r14.w, r15.y, r16.y, r14.w
        mad r13.w, r15.z, r13.w, r14.w
        movc r18.x, r13.z, r13.w, r18.x
      endif 
    endif 
    mad r13.z, -cb2[27].z, l(2.000000), r15.w
    lt r13.z, r18.x, r13.z
    movc r7.w, r13.z, l(0), l(1.000000)
  endif 
  if_z r10.w
    if_z cb2[58].y
      ftou r10.w, r8.w
      add r13.zw, r15.yyyz, -cb2[r10.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r10.w + 20].zzzz
      mad r18.xy, r13.zwzz, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r10.w, cb2[26].y
      add r18.z, r8.w, r10.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r18.xyzx, t13.xxxx, s13, r6.w
      sample_l_indexable(texture2darray)(float,float,float,float) r13.z, r18.xyzx, t31.yzxw, s0, l(0.000000)
      add r10.w, r10.w, r13.z
      add_sat r10.w, r10.w, l(-1.000000)
      mul r13.z, r10.w, r10.w
      mul r7.w, r10.w, r13.z
    endif 
    if_nz cb2[58].y
      mov r18.x, -r13.x
      ftou r10.w, r8.w
      add r8.w, r8.w, l(1.000000)
      min r8.w, r8.w, l(2.000000)
      ftou r8.w, r8.w
      add r9.w, -r9.w, l(1.000000)
      mul r9.w, r9.w, l(28.000000)
      ftou r9.w, r9.w
      add r13.zw, r15.yyyz, -cb2[r10.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r10.w + 20].zzzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r15.yz, r15.yyzy, -cb2[r8.w + 20].xxyx
      mul r15.yz, r15.yyzy, cb2[r8.w + 20].zzzz
      mad r15.yz, r15.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r18.y, r14.x
      mov r18.z, r13.x
      mov r14.w, l(0)
      mov r15.w, l(0)
      loop 
        uge r16.y, r15.w, l(8)
        breakc_nz r16.y
        ult r16.y, r9.w, r15.w
        movc r16.zw, r16.yyyy, r15.yyyz, r13.zzzw
        movc r18.w, r16.y, cb2[r8.w + 20].w, cb2[r10.w + 20].w
        movc r16.y, r16.y, r8.w, r10.w
        dp2 r19.x, icb[r15.w + 0].yxyy, r18.xyxx
        dp2 r19.y, icb[r15.w + 0].yxyy, r18.yzyy
        mad r19.xy, r19.xyxx, r18.wwww, r16.zwzz
        iadd r16.y, r16.y, cb2[26].y
        utof r19.z, r16.y
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.y, r19.xyzx, t13.xxxx, s13, r6.w
        sample_l_indexable(texture2darray)(float,float,float,float) r16.z, r19.xyzx, t31.yzxw, s0, l(0.000000)
        add r16.y, r16.z, r16.y
        add_sat r16.y, r16.y, l(-1.000000)
        mad r14.w, r16.y, l(0.125000), r14.w
        iadd r15.w, r15.w, l(1)
      endloop 
      mul r6.w, r14.w, r14.w
      mul r7.w, r14.w, r6.w
    endif 
  endif 
endif 
add r6.w, -r2.y, l(1.000000)
mul r8.w, r6.w, l(5.000000)
mad r9.w, r6.w, l(5.000000), l(-2.500000)
mul r9.w, r9.w, l(0.400000)
max r9.w, r9.w, l(0.000000)
mul r9.w, r9.w, l(100.000000)
mad r13.zw, -r6.wwww, l(0.000000, 0.000000, 10.000000, 5.000000), l(0.000000, 0.000000, 6.857410, 7.085000)
exp r10.w, r13.z
mul r10.w, r2.x, r10.w
mul r10.w, r10.w, l(9.136810)
mul r13.z, r6.w, r8.w
mad r13.z, -r13.z, l(2.015905), r13.w
exp r13.z, r13.z
mul r13.z, r2.x, r13.z
mul r13.z, r13.z, l(9.708090)
max r10.w, r10.w, r13.z
max r10.w, r10.w, l(1.268160)
iadd r13.z, cb2[0].y, -cb2[58].x
ushr r15.yz, r0.yyxy, l(0, 24, 24, 0)
uge r0.y, r15.y, r13.z
ult r13.w, r15.y, cb2[0].y
and r0.y, r0.y, r13.w
if_nz r0.y
  imul null, r0.y, r15.y, l(14)
  if_nz r2.w
    add r18.yzw, cb1[24].xxyz, cb10[r0.y + 0].xxyz
    mov r18.x, l(16)
    store_structured u2.xyzw, cb2[52].x, l(880), r18.xyzw
  endif 
  add r16.yzw, r11.xxyz, -cb10[r0.y + 0].xxyz
  and r13.w, l(0x0000ffff), cb10[r0.y + 7].z
  ubfe r14.w, l(6), l(25), cb10[r0.y + 7].z
  imul null, r15.w, r13.w, l(6)
  dp3 r18.x, cb11[r15.w + 0].xyzx, r16.yzwy
  add_sat r18.x, r18.x, cb11[r15.w + 0].w
  dp3 r18.y, cb11[r15.w + 1].xyzx, r16.yzwy
  add_sat r18.y, r18.y, cb11[r15.w + 1].w
  mul r18.x, r18.y, r18.x
  dp3 r18.y, cb11[r15.w + 2].xyzx, r16.yzwy
  add_sat r18.y, r18.y, cb11[r15.w + 2].w
  mul r18.x, r18.y, r18.x
  dp3 r18.y, cb11[r15.w + 3].xyzx, r16.yzwy
  add_sat r18.y, r18.y, cb11[r15.w + 3].w
  mul r18.x, r18.y, r18.x
  dp3 r18.y, cb11[r15.w + 4].xyzx, r16.yzwy
  add_sat r18.y, r18.y, cb11[r15.w + 4].w
  mul r18.x, r18.y, r18.x
  dp3 r18.y, cb11[r15.w + 5].xyzx, r16.yzwy
  add_sat r15.w, r18.y, cb11[r15.w + 5].w
  mul r18.x, r15.w, r18.x
  and r15.w, l(1), cb10[r0.y + 6].x
  mov r18.yz, l(0,0,1.000000,0)
  movc r18.xy, r15.wwww, r18.xyxx, r18.zxzz
  mov r19.x, l(1.000000)
  mov r15.w, cb10[r0.y + 6].x
  mov r20.xy, r18.xyxx
  mov r18.z, l(1)
  loop 
    ige r18.w, r18.z, r14.w
    breakc_nz r18.w
    iadd r18.w, r13.w, r18.z
    imul null, r18.w, r18.w, l(6)
    dp3 r19.z, cb11[r18.w + 0].xyzx, r16.yzwy
    add_sat r19.z, r19.z, cb11[r18.w + 0].w
    mul r19.z, r19.z, r20.x
    dp3 r19.w, cb11[r18.w + 1].xyzx, r16.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 1].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 2].xyzx, r16.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 2].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 3].xyzx, r16.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 3].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 4].xyzx, r16.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 4].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 5].xyzx, r16.yzwy
    add_sat r18.w, r19.w, cb11[r18.w + 5].w
    mul r20.x, r18.w, r19.z
    ushr r19.w, r15.w, l(2)
    ubfe r20.z, l(1), l(2), r15.w
    and r20.w, r19.w, l(2)
    max r21.x, r20.x, r20.y
    mad r18.w, -r19.z, r18.w, l(1.000000)
    mul r18.w, r18.w, r20.y
    movc r19.y, r20.w, r18.w, r21.x
    movc r20.xy, r20.zzzz, r20.xyxx, r19.xyxx
    iadd r18.z, r18.z, l(1)
    mov r15.w, r19.w
  endloop 
  mov_sat r20.y, r20.y
  mul r13.w, r20.y, cb10[r0.y + 6].y
  lt r14.w, l(0.000000), r13.w
  if_nz r14.w
    if_nz r2.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r14.w, cb2[52].x, l(880), u2.xxxx
      or r14.w, r14.w, l(32)
      store_structured u2.x, cb2[52].x, l(880), r14.w
      store_structured u2.x, cb2[52].x, l(896), r13.w
    endif 
    mul r14.w, r13.w, cb10[r0.y + 7].y
    mov r18.x, cb10[r0.y + 7].w
    mov r18.yz, cb10[r0.y + 8].xxyx
    dp3 r15.w, r17.xyzx, r18.xyzx
    dp3 r18.x, r16.yzwy, r18.xyzx
    add r18.x, r18.x, -cb10[r0.y + 8].z
    ge r18.y, r18.x, l(0.000000)
    max r18.x, r9.w, |r18.x|
    movc r18.x, r18.y, r18.x, -r18.x
    max r15.w, -r15.w, l(0.00000010)
    div r15.w, r18.x, r15.w
    min r15.w, |r15.w|, l(131072.000000)
    mov r18.x, cb10[r0.y + 8].w
    mov r18.yz, cb10[r0.y + 9].xxyx
    dp3 r18.w, r17.xyzx, r18.xyzx
    dp3 r18.x, r16.yzwy, r18.xyzx
    add r18.x, r18.x, -cb10[r0.y + 9].z
    ge r18.y, r18.x, l(0.000000)
    max r18.x, r9.w, |r18.x|
    movc r18.x, r18.y, r18.x, -r18.x
    max r18.y, -r18.w, l(0.00000010)
    div r18.x, r18.x, r18.y
    min r15.w, r15.w, |r18.x|
    mov r18.x, cb10[r0.y + 9].w
    mov r18.yz, cb10[r0.y + 10].xxyx
    dp3 r18.w, r17.xyzx, r18.xyzx
    dp3 r18.x, r16.yzwy, r18.xyzx
    add r18.x, r18.x, -cb10[r0.y + 10].z
    ge r18.y, r18.x, l(0.000000)
    max r18.x, r9.w, |r18.x|
    movc r18.x, r18.y, r18.x, -r18.x
    max r18.y, -r18.w, l(0.00000010)
    div r18.x, r18.x, r18.y
    min r15.w, r15.w, |r18.x|
    mov r18.x, cb10[r0.y + 10].w
    mov r18.yz, cb10[r0.y + 11].xxyx
    dp3 r18.w, r17.xyzx, r18.xyzx
    dp3 r18.x, r16.yzwy, r18.xyzx
    add r18.x, r18.x, -cb10[r0.y + 11].z
    ge r18.y, r18.x, l(0.000000)
    max r18.x, r9.w, |r18.x|
    movc r18.x, r18.y, r18.x, -r18.x
    max r18.y, -r18.w, l(0.00000010)
    div r18.x, r18.x, r18.y
    min r15.w, r15.w, |r18.x|
    mov r18.x, cb10[r0.y + 11].w
    mov r18.yz, cb10[r0.y + 12].xxyx
    dp3 r18.w, r17.xyzx, r18.xyzx
    dp3 r18.x, r16.yzwy, r18.xyzx
    add r18.x, r18.x, -cb10[r0.y + 12].z
    ge r18.y, r18.x, l(0.000000)
    max r18.x, r9.w, |r18.x|
    movc r18.x, r18.y, r18.x, -r18.x
    max r18.y, -r18.w, l(0.00000010)
    div r18.x, r18.x, r18.y
    min r15.w, r15.w, |r18.x|
    mov r18.x, cb10[r0.y + 12].w
    mov r18.yz, cb10[r0.y + 13].xxyx
    dp3 r18.w, r17.xyzx, r18.xyzx
    dp3 r18.x, r16.yzwy, r18.xyzx
    add r18.x, r18.x, -cb10[r0.y + 13].z
    ge r18.y, r18.x, l(0.000000)
    max r18.x, r9.w, |r18.x|
    movc r18.x, r18.y, r18.x, -r18.x
    max r18.y, -r18.w, l(0.00000010)
    div r18.x, r18.x, r18.y
    min r15.w, r15.w, |r18.x|
    add r18.x, r16.y, cb10[r0.y + 3].w
    add r18.yz, r16.zzwz, cb10[r0.y + 4].xxyx
    mad r18.xyz, r17.xyzx, r15.wwww, r18.xyzx
    dp3 r18.w, r18.xyzx, r18.xyzx
    sqrt r18.w, r18.w
    div r15.w, r15.w, r18.w
    add r15.w, r15.w, r15.w
    sqrt r15.w, r15.w
    mad r15.w, r6.w, l(5.000000), r15.w
    add r15.w, r15.w, l(-0.844800)
    mov r19.x, cb10[r0.y + 0].w
    mov r19.y, cb10[r0.y + 1].z
    mov r19.z, cb10[r0.y + 2].y
    dp3 r20.x, r18.xyzx, r19.xyzx
    mov r21.xy, cb10[r0.y + 1].xwxx
    mov r21.z, cb10[r0.y + 2].z
    dp3 r20.y, r18.xyzx, r21.xyzx
    mov r22.x, cb10[r0.y + 1].y
    mov r22.yz, cb10[r0.y + 2].xxwx
    dp3 r20.z, r18.xyzx, r22.xyzx
    ubfe r18.x, l(9), l(16), cb10[r0.y + 7].z
    utof r20.w, r18.x
    sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r20.xyzw, t8.xyzw, s2, r15.w
    and r23.xyz, r18.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r23.xyz, r23.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r15.w, r23.y, r23.x
    or r15.w, r23.z, r15.w
    movc r18.xyz, r15.wwww, l(1.000000,1.000000,0,0), r18.xyzx
    dp3 r23.x, r16.yzwy, r19.xyzx
    dp3 r23.y, r16.yzwy, r21.xyzx
    dp3 r23.z, r16.yzwy, r22.xyzx
    mad_sat r16.yzw, r23.xxyz, cb10[r0.y + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    mul r23.xy, r16.yzyy, cb10[r0.y + 4].zwzz
    mul r23.z, r16.w, cb10[r0.y + 5].x
    add r16.yzw, r23.xxyz, cb10[r0.y + 5].yyzw
    dp3 r20.x, r12.xyzx, r19.xyzx
    dp3 r20.y, r12.xyzx, r21.xyzx
    dp3 r20.z, r12.xyzx, r22.xyzx
    lt r19.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r20.xyzx
    movc r21.z, r19.x, l(0), l(0.500000)
    mov r21.xy, l(0,0,0,0)
    add r21.xyz, r16.yzwy, r21.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t17.xyzw, s4, l(0.000000)
    mul r22.xyz, r20.xyzx, r20.xyzx
    mul r22.xyz, r14.wwww, r22.xyzx
    movc r23.z, r19.y, l(0), l(0.500000)
    mov r23.xy, l(0,0,0,0)
    add r19.xyw, r16.yzyw, r23.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r19.xyw, r19.xywx, t18.xywz, s4, l(0.000000)
    mul r19.xyw, r22.yyyy, r19.xyxw
    mad r19.xyw, r21.xyxz, r22.xxxx, r19.xyxw
    movc r21.z, r19.z, l(0), l(0.500000)
    mov r21.xy, l(0,0,0,0)
    add r16.yzw, r16.yyzw, r21.xxyz
    sample_l_indexable(texture3d)(float,float,float,float) r16.yzw, r16.yzwy, t19.wxyz, s4, l(0.000000)
    mad r16.yzw, r16.yyzw, r22.zzzz, r19.xxyw
    sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r20.xyzw, t8.xyzw, s2, l(6.000000)
    and r20.xyz, r19.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r20.xyz, r20.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r0.y, r20.y, r20.x
    or r0.y, r20.z, r0.y
    movc r19.xyz, r0.yyyy, l(1.000000,1.000000,0,0), r19.xyzx
    mul r16.yzw, r16.yyzw, r19.xxyz
    dp3 r0.y, r16.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r15.w, r0.y, r10.w
    mul r18.xyz, r14.wwww, r18.xyzx
    dp3 r14.w, r18.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r0.y, r10.w, r0.y, r14.w
    div r0.y, r15.w, r0.y
    mul r18.xyz, r0.yyyy, r18.xyzx
    mov r0.y, l(257)
  else 
    mov r16.yzw, l(0,0,0,0)
    mov r18.xyz, l(0,0,0,0)
    mov r13.w, l(0)
    mov r0.y, l(1)
  endif 
else 
  mov r16.yzw, l(0,0,0,0)
  mov r18.xyz, l(0,0,0,0)
  mov r13.w, l(0)
  mov r0.y, l(0)
endif 
ult r13.z, r15.y, r13.z
if_nz r13.z
  imul null, r13.z, r15.y, l(14)
  if_nz r2.w
    and r14.w, r0.y, l(1)
    imad r14.w, r14.w, l(20), l(880)
    add r19.yzw, cb1[24].xxyz, cb10[r13.z + 0].xxyz
    mov r19.x, l(16)
    store_structured u2.xyzw, cb2[52].x, r14.w, r19.xyzw
  endif 
  iadd r14.w, r0.y, l(1)
  add r19.xyz, r11.xyzx, -cb10[r13.z + 0].xyzx
  and r15.y, l(0x0000ffff), cb10[r13.z + 7].z
  ubfe r15.w, l(6), l(25), cb10[r13.z + 7].z
  imul null, r18.w, r15.y, l(6)
  dp3 r19.w, cb11[r18.w + 0].xyzx, r19.xyzx
  add_sat r19.w, r19.w, cb11[r18.w + 0].w
  dp3 r20.x, cb11[r18.w + 1].xyzx, r19.xyzx
  add_sat r20.x, r20.x, cb11[r18.w + 1].w
  mul r19.w, r19.w, r20.x
  dp3 r20.x, cb11[r18.w + 2].xyzx, r19.xyzx
  add_sat r20.x, r20.x, cb11[r18.w + 2].w
  mul r19.w, r19.w, r20.x
  dp3 r20.x, cb11[r18.w + 3].xyzx, r19.xyzx
  add_sat r20.x, r20.x, cb11[r18.w + 3].w
  mul r19.w, r19.w, r20.x
  dp3 r20.x, cb11[r18.w + 4].xyzx, r19.xyzx
  add_sat r20.x, r20.x, cb11[r18.w + 4].w
  mul r19.w, r19.w, r20.x
  dp3 r20.x, cb11[r18.w + 5].xyzx, r19.xyzx
  add_sat r18.w, r20.x, cb11[r18.w + 5].w
  mul r20.x, r18.w, r19.w
  and r18.w, l(1), cb10[r13.z + 6].x
  mov r20.yz, l(0,0,1.000000,0)
  movc r20.xy, r18.wwww, r20.xyxx, r20.zxzz
  mov r21.x, l(1.000000)
  mov r18.w, cb10[r13.z + 6].x
  mov r22.xy, r20.xyxx
  mov r19.w, l(1)
  loop 
    ige r20.z, r19.w, r15.w
    breakc_nz r20.z
    iadd r20.z, r15.y, r19.w
    imul null, r20.z, r20.z, l(6)
    dp3 r20.w, cb11[r20.z + 0].xyzx, r19.xyzx
    add_sat r20.w, r20.w, cb11[r20.z + 0].w
    mul r20.w, r20.w, r22.x
    dp3 r21.z, cb11[r20.z + 1].xyzx, r19.xyzx
    add_sat r21.z, r21.z, cb11[r20.z + 1].w
    mul r20.w, r20.w, r21.z
    dp3 r21.z, cb11[r20.z + 2].xyzx, r19.xyzx
    add_sat r21.z, r21.z, cb11[r20.z + 2].w
    mul r20.w, r20.w, r21.z
    dp3 r21.z, cb11[r20.z + 3].xyzx, r19.xyzx
    add_sat r21.z, r21.z, cb11[r20.z + 3].w
    mul r20.w, r20.w, r21.z
    dp3 r21.z, cb11[r20.z + 4].xyzx, r19.xyzx
    add_sat r21.z, r21.z, cb11[r20.z + 4].w
    mul r20.w, r20.w, r21.z
    dp3 r21.z, cb11[r20.z + 5].xyzx, r19.xyzx
    add_sat r20.z, r21.z, cb11[r20.z + 5].w
    mul r22.x, r20.z, r20.w
    ushr r21.z, r18.w, l(2)
    ubfe r21.w, l(1), l(2), r18.w
    and r22.z, r21.z, l(2)
    max r22.w, r22.x, r22.y
    mad r20.z, -r20.w, r20.z, l(1.000000)
    mul r20.z, r20.z, r22.y
    movc r21.y, r22.z, r20.z, r22.w
    movc r22.xy, r21.wwww, r22.xyxx, r21.xyxx
    iadd r19.w, r19.w, l(1)
    mov r18.w, r21.z
  endloop 
  add_sat r15.y, -r13.w, r22.y
  mul r15.w, r15.y, cb10[r13.z + 6].y
  lt r18.w, l(0.000000), r15.w
  if_nz r18.w
    and r18.w, r14.w, l(3)
    iadd r19.w, r18.w, l(-1)
    ult r19.w, r19.w, l(32)
    and r19.w, r2.w, r19.w
    if_nz r19.w
      imad r20.xy, r18.wwww, l(20, 20, 0, 0), l(860, 876, 0, 0)
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r18.w, cb2[52].x, r20.x, u2.xxxx
      or r18.w, r18.w, l(32)
      store_structured u2.x, cb2[52].x, r20.x, r18.w
      store_structured u2.x, cb2[52].x, r20.y, r15.w
    endif 
    iadd r14.w, r0.y, l(257)
    mad r15.y, r15.y, cb10[r13.z + 6].y, r13.w
    mul r15.w, r15.w, cb10[r13.z + 7].y
    mov r20.x, cb10[r13.z + 7].w
    mov r20.yz, cb10[r13.z + 8].xxyx
    dp3 r18.w, r17.xyzx, r20.xyzx
    dp3 r19.w, r19.xyzx, r20.xyzx
    add r19.w, r19.w, -cb10[r13.z + 8].z
    ge r20.x, r19.w, l(0.000000)
    max r19.w, r9.w, |r19.w|
    movc r19.w, r20.x, r19.w, -r19.w
    max r18.w, -r18.w, l(0.00000010)
    div r18.w, r19.w, r18.w
    min r18.w, |r18.w|, l(131072.000000)
    mov r20.x, cb10[r13.z + 8].w
    mov r20.yz, cb10[r13.z + 9].xxyx
    dp3 r19.w, r17.xyzx, r20.xyzx
    dp3 r20.x, r19.xyzx, r20.xyzx
    add r20.x, r20.x, -cb10[r13.z + 9].z
    ge r20.y, r20.x, l(0.000000)
    max r20.x, r9.w, |r20.x|
    movc r20.x, r20.y, r20.x, -r20.x
    max r19.w, -r19.w, l(0.00000010)
    div r19.w, r20.x, r19.w
    min r18.w, r18.w, |r19.w|
    mov r20.x, cb10[r13.z + 9].w
    mov r20.yz, cb10[r13.z + 10].xxyx
    dp3 r19.w, r17.xyzx, r20.xyzx
    dp3 r20.x, r19.xyzx, r20.xyzx
    add r20.x, r20.x, -cb10[r13.z + 10].z
    ge r20.y, r20.x, l(0.000000)
    max r20.x, r9.w, |r20.x|
    movc r20.x, r20.y, r20.x, -r20.x
    max r19.w, -r19.w, l(0.00000010)
    div r19.w, r20.x, r19.w
    min r18.w, r18.w, |r19.w|
    mov r20.x, cb10[r13.z + 10].w
    mov r20.yz, cb10[r13.z + 11].xxyx
    dp3 r19.w, r17.xyzx, r20.xyzx
    dp3 r20.x, r19.xyzx, r20.xyzx
    add r20.x, r20.x, -cb10[r13.z + 11].z
    ge r20.y, r20.x, l(0.000000)
    max r20.x, r9.w, |r20.x|
    movc r20.x, r20.y, r20.x, -r20.x
    max r19.w, -r19.w, l(0.00000010)
    div r19.w, r20.x, r19.w
    min r18.w, r18.w, |r19.w|
    mov r20.x, cb10[r13.z + 11].w
    mov r20.yz, cb10[r13.z + 12].xxyx
    dp3 r19.w, r17.xyzx, r20.xyzx
    dp3 r20.x, r19.xyzx, r20.xyzx
    add r20.x, r20.x, -cb10[r13.z + 12].z
    ge r20.y, r20.x, l(0.000000)
    max r20.x, r9.w, |r20.x|
    movc r20.x, r20.y, r20.x, -r20.x
    max r19.w, -r19.w, l(0.00000010)
    div r19.w, r20.x, r19.w
    min r18.w, r18.w, |r19.w|
    mov r20.x, cb10[r13.z + 12].w
    mov r20.yz, cb10[r13.z + 13].xxyx
    dp3 r19.w, r17.xyzx, r20.xyzx
    dp3 r20.x, r19.xyzx, r20.xyzx
    add r20.x, r20.x, -cb10[r13.z + 13].z
    ge r20.y, r20.x, l(0.000000)
    max r9.w, r9.w, |r20.x|
    movc r9.w, r20.y, r9.w, -r9.w
    max r19.w, -r19.w, l(0.00000010)
    div r9.w, r9.w, r19.w
    min r9.w, |r9.w|, r18.w
    add r20.x, r19.x, cb10[r13.z + 3].w
    add r20.yz, r19.yyzy, cb10[r13.z + 4].xxyx
    mad r20.xyz, r17.xyzx, r9.wwww, r20.xyzx
    dp3 r18.w, r20.xyzx, r20.xyzx
    sqrt r18.w, r18.w
    div r9.w, r9.w, r18.w
    add r9.w, r9.w, r9.w
    sqrt r9.w, r9.w
    mad r6.w, r6.w, l(5.000000), r9.w
    add r6.w, r6.w, l(-0.844800)
    mov r21.x, cb10[r13.z + 0].w
    mov r21.y, cb10[r13.z + 1].z
    mov r21.z, cb10[r13.z + 2].y
    dp3 r22.x, r20.xyzx, r21.xyzx
    mov r23.xy, cb10[r13.z + 1].xwxx
    mov r23.z, cb10[r13.z + 2].z
    dp3 r22.y, r20.xyzx, r23.xyzx
    mov r24.x, cb10[r13.z + 1].y
    mov r24.yz, cb10[r13.z + 2].xxwx
    dp3 r22.z, r20.xyzx, r24.xyzx
    ubfe r9.w, l(9), l(16), cb10[r13.z + 7].z
    utof r22.w, r9.w
    sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r22.xyzw, t8.xyzw, s2, r6.w
    and r25.xyz, r20.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r25.xyz, r25.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r6.w, r25.y, r25.x
    or r6.w, r25.z, r6.w
    movc r20.xyz, r6.wwww, l(1.000000,1.000000,0,0), r20.xyzx
    dp3 r25.x, r19.xyzx, r21.xyzx
    dp3 r25.y, r19.xyzx, r23.xyzx
    dp3 r25.z, r19.xyzx, r24.xyzx
    mad_sat r19.xyz, r25.xyzx, cb10[r13.z + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r25.xy, r19.xyxx, cb10[r13.z + 4].zwzz
    mul r25.z, r19.z, cb10[r13.z + 5].x
    add r19.xyz, r25.xyzx, cb10[r13.z + 5].yzwy
    dp3 r22.x, r12.xyzx, r21.xyzx
    dp3 r22.y, r12.xyzx, r23.xyzx
    dp3 r22.z, r12.xyzx, r24.xyzx
    lt r21.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r22.xyzx
    movc r23.z, r21.x, l(0), l(0.500000)
    mov r23.xy, l(0,0,0,0)
    add r23.xyz, r19.xyzx, r23.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r23.xyz, r23.xyzx, t17.xyzw, s4, l(0.000000)
    mul r24.xyz, r22.xyzx, r22.xyzx
    mul r24.xyz, r15.wwww, r24.xyzx
    movc r25.z, r21.y, l(0), l(0.500000)
    mov r25.xy, l(0,0,0,0)
    add r21.xyw, r19.xyxz, r25.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r21.xyw, r21.xywx, t18.xywz, s4, l(0.000000)
    mul r21.xyw, r24.yyyy, r21.xyxw
    mad r21.xyw, r23.xyxz, r24.xxxx, r21.xyxw
    movc r23.z, r21.z, l(0), l(0.500000)
    mov r23.xy, l(0,0,0,0)
    add r19.xyz, r19.xyzx, r23.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t19.xyzw, s4, l(0.000000)
    mad r19.xyz, r19.xyzx, r24.zzzz, r21.xywx
    sample_l_indexable(texturecubearray)(float,float,float,float) r21.xyz, r22.xyzw, t8.xyzw, s2, l(6.000000)
    and r22.xyz, r21.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r22.xyz, r22.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r6.w, r22.y, r22.x
    or r6.w, r22.z, r6.w
    movc r21.xyz, r6.wwww, l(1.000000,1.000000,0,0), r21.xyzx
    mul r22.xyz, r19.xyzx, r21.xyzx
    dp3 r6.w, r22.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r16.yzw, r19.xxyz, r21.xxyz, r16.yyzw
    mul r9.w, r6.w, r10.w
    mul r19.xyz, r15.wwww, r20.xyzx
    dp3 r13.z, r19.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r6.w, r10.w, r6.w, r13.z
    div r6.w, r9.w, r6.w
    mad r18.xyz, r19.xyzx, r6.wwww, r18.xyzx
  else 
    mov r15.y, r13.w
  endif 
else 
  mov r15.y, r13.w
  mov r14.w, r0.y
endif 
ge r6.w, r13.w, l(1.000000)
bfi r0.y, l(8), l(0), r14.w, r0.y
movc r0.y, r6.w, r0.y, r14.w
max r6.w, r15.y, l(1.000000)
rcp r6.w, r6.w
mov_sat r15.y, r15.y
mul r19.xyz, r6.wwww, r16.yzwy
mul r18.xyz, r6.wwww, r18.xyzx
lt r9.w, r15.y, l(0.990000)
if_nz r9.w
  iadd r0.y, r0.y, l(256)
  add r9.w, -r15.y, l(1.000000)
  mul r10.w, r9.w, cb2[19].x
  add r20.xyz, r11.xyzx, -cb2[35].xyzx
  mul r21.x, r20.x, cb2[35].w
  mul r21.yz, r20.yyzy, cb2[36].xxyx
  add_sat r20.xyz, r21.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r21.xy, r20.xyxx, cb2[36].zwzz
  mul r21.z, r20.z, cb2[37].x
  add r20.xyz, r21.xyzx, cb2[37].yzwy
  lt r21.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
  movc r21.xyz, r21.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r21.w, l(0)
  add r22.xyz, r20.xyzx, r21.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t17.xyzw, s4, l(0.000000)
  mul r23.xyz, r12.xyzx, r12.xyzx
  mul r23.xyz, r10.wwww, r23.xyzx
  add r24.xyz, r20.xyzx, r21.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r24.xyz, r24.xyzx, t18.xyzw, s4, l(0.000000)
  mul r24.xyz, r23.yyyy, r24.xyzx
  mad r22.xyz, r22.xyzx, r23.xxxx, r24.xyzx
  add r20.xyz, r20.xyzx, r21.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t19.xyzw, s4, l(0.000000)
  mad r20.xyz, r20.xyzx, r23.zzzz, r22.xyzx
  mov r12.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r21.xyz, r12.xyzw, t8.xyzw, s2, l(6.000000)
  mul r20.xyz, r20.xyzx, r21.xyzx
  dp3 r10.w, r20.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r19.xyz, r16.yzwy, r6.wwww, r20.xyzx
  mov r17.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r16.yzw, r17.xyzw, t8.wxyz, s2, r8.w
  mad r6.w, cb2[19].x, r9.w, -r10.w
  mad r6.w, r2.y, r6.w, r10.w
  mad r18.xyz, r16.yzwy, r6.wwww, r18.xyzx
endif 
add r6.w, r5.z, r2.x
log r6.w, |r6.w|
mul r6.w, r2.z, r6.w
exp r6.w, r6.w
add r6.w, r5.z, r6.w
add_sat r6.w, r6.w, l(-1.000000)
mul r20.xyz, r5.zzzz, r19.xyzx
and r21.xyz, r4.zzzz, r20.yzxy
mad r13.zw, r2.xxxy, l(0.000000, 0.000000, 0.984375, 0.984375), l(0.000000, 0.000000, 0.00781250, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r13.zw, r13.zwzz, t5.zwxy, s2, l(0.000000)
mul r16.yzw, r6.wwww, r18.xxyz
mul r18.xyz, r13.zzzz, r16.yzwy
mul r22.xyz, r13.wwww, r16.yzwy
sqrt r2.y, r2.z
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r6.w, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r8.w, r2.x, r2.y, r6.w
mul r2.y, r2.y, r8.w
mul r6.w, r6.w, r8.w
if_nz r2.w
  mov r23.x, l(3)
  mov r23.yzw, cb1[24].xxyz
  store_structured u2.xyzw, cb2[52].x, l(112), r23.xyzw
endif 
lt r8.w, l(0.000000), r3.w
if_nz r8.w
  if_nz r2.w
    ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r8.w, cb2[52].x, l(112), u2.xxxx
    or r8.w, r8.w, l(4)
    store_structured u2.x, cb2[52].x, l(112), r8.w
    store_structured u2.x, cb2[52].x, l(128), r7.w
  endif 
  lt r8.w, l(0.000000), r7.w
  if_nz r8.w
    mul r8.w, r1.w, cb2[18].w
    mul r8.w, r3.z, r8.w
    if_nz cb2[23].x
      add r23.xyz, r11.xyzx, cb1[24].xyzx
      mov r23.w, l(1.000000)
      dp4 r9.w, cb2[24].xyzw, r23.xyzw
      dp4 r10.w, cb2[25].xyzw, r23.xyzw
      frc r23.x, r9.w
      frc r23.y, r10.w
      iadd r9.w, l(-1), cb2[23].x
      utof r23.z, r9.w
      sample_l_indexable(texture2darray)(float,float,float,float) r16.yzw, r23.xyzx, t20.wxyz, s2, l(0.000000)
      add r16.yzw, r16.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
      mad r16.yzw, cb2[23].yyyy, r16.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      mul r16.yzw, r16.yyzw, cb2[18].xxyz
    else 
      mov r16.yzw, cb2[18].xxyz
    endif 
    ushr r9.w, cb2[53].x, l(16)
    ult r10.w, l(0), r9.w
    and r10.w, r3.x, r10.w
    if_nz r10.w
      iadd r9.w, r9.w, cb2[0].x
      imad r9.w, r9.w, l(15), l(-15)
      mad r10.w, |r3.y|, l(-0.200000), l(0.400000)
      lt r12.w, r3.y, l(0.000000)
      and r12.w, r4.z, r12.w
      movc r10.w, r12.w, -r10.w, r10.w
      mad r23.xyz, r12.xyzx, r10.wwww, r11.xyzx
      mov r24.xyz, cb9[r9.w + 4].yzwy
      mov r24.w, cb9[r9.w + 5].x
      mov r23.w, l(1.000000)
      dp4 r24.x, r24.xyzw, r23.xyzw
      mov r25.xyz, cb9[r9.w + 5].yzwy
      mov r25.w, cb9[r9.w + 6].x
      dp4 r24.y, r25.xyzw, r23.xyzw
      mad r13.zw, r24.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r24.x, r13.z, cb9[r9.w + 9].w
      add r24.y, r13.w, cb9[r9.w + 10].x
      mul r13.zw, r24.xxxy, cb9[r9.w + 9].yyyz
      div r15.yw, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].yyyw
      add r24.xy, -r15.ywyy, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r24.xy, r13.zwzz, r24.xyxx
      ge r15.yw, r15.yyyw, r13.zzzw
      or r15.yw, r15.yyyw, r24.xxxy
      or r10.w, r15.w, r15.y
      if_z r10.w
        mov r24.xyz, cb9[r9.w + 6].yzwy
        mov r24.w, cb9[r9.w + 7].x
        dp4 r10.w, r24.xyzw, r23.xyzw
        mov_sat r13.zw, r13.zzzw
        mad r23.x, r13.z, cb9[r9.w + 8].y, cb9[r9.w + 8].z
        mad r23.y, r13.w, cb9[r9.w + 8].w, cb9[r9.w + 9].x
        add r10.w, r10.w, cb9[r9.w + 10].y
        div r10.w, r10.w, cb9[r9.w + 10].z
        max r10.w, r10.w, l(0.00006104)
        and r12.w, l(0x0000ffff), cb9[r9.w + 1].w
        if_nz cb2[58].y
          mov r24.x, -r13.x
          utof r25.z, r12.w
          mov r24.y, r14.x
          mov r24.z, r13.x
          mov r13.zw, l(0,0,0,0)
          loop 
            ige r14.w, r13.w, l(8)
            breakc_nz r14.w
            dp2 r26.x, icb[r13.w + 0].yxyy, r24.xyxx
            dp2 r26.y, icb[r13.w + 0].yxyy, r24.yzyy
            mad r25.xy, r26.xyxx, cb9[r9.w + 3].yyyy, r23.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r25.xyzx, t9.xxxx, s13, r10.w
            mad r13.z, r14.w, l(0.125000), r13.z
            iadd r13.w, r13.w, l(1)
          endloop 
        else 
          utof r23.z, r12.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.z, r23.xyzx, t9.xxxx, s13, r10.w
        endif 
        mul r9.w, r13.z, r13.z
        mul r9.w, r13.z, r9.w
      else 
        mov r9.w, l(1.000000)
      endif 
      mul r7.w, r7.w, r9.w
    else 
      and r9.w, cb2[53].x, l(0x0000ffff)
      ult r10.w, l(0), r9.w
      not r12.w, r3.x
      and r10.w, r10.w, r12.w
      if_nz r10.w
        iadd r9.w, r9.w, cb2[0].x
        imad r9.w, r9.w, l(15), l(-15)
        mad r10.w, |r3.y|, l(-0.200000), l(0.400000)
        lt r12.w, r3.y, l(0.000000)
        and r12.w, r4.z, r12.w
        movc r10.w, r12.w, -r10.w, r10.w
        mad r23.xyz, r12.xyzx, r10.wwww, r11.xyzx
        mov r24.xyz, cb9[r9.w + 4].yzwy
        mov r24.w, cb9[r9.w + 5].x
        mov r23.w, l(1.000000)
        dp4 r24.x, r24.xyzw, r23.xyzw
        mov r25.xyz, cb9[r9.w + 5].yzwy
        mov r25.w, cb9[r9.w + 6].x
        dp4 r24.y, r25.xyzw, r23.xyzw
        mad r13.zw, r24.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r24.x, r13.z, cb9[r9.w + 9].w
        add r24.y, r13.w, cb9[r9.w + 10].x
        mul r13.zw, r24.xxxy, cb9[r9.w + 9].yyyz
        div r15.yw, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].yyyw
        add r24.xy, -r15.ywyy, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r24.xy, r13.zwzz, r24.xyxx
        ge r15.yw, r15.yyyw, r13.zzzw
        or r15.yw, r15.yyyw, r24.xxxy
        or r10.w, r15.w, r15.y
        if_z r10.w
          mov r24.xyz, cb9[r9.w + 6].yzwy
          mov r24.w, cb9[r9.w + 7].x
          dp4 r10.w, r24.xyzw, r23.xyzw
          mov_sat r13.zw, r13.zzzw
          mad r23.x, r13.z, cb9[r9.w + 8].y, cb9[r9.w + 8].z
          mad r23.y, r13.w, cb9[r9.w + 8].w, cb9[r9.w + 9].x
          add r10.w, r10.w, cb9[r9.w + 10].y
          div r10.w, r10.w, cb9[r9.w + 10].z
          max r10.w, r10.w, l(0.00006104)
          and r12.w, l(0x0000ffff), cb9[r9.w + 1].w
          if_nz cb2[58].y
            mov r24.x, -r13.x
            utof r25.z, r12.w
            mov r24.y, r14.x
            mov r24.z, r13.x
            mov r13.zw, l(0,0,0,0)
            loop 
              ige r14.w, r13.w, l(8)
              breakc_nz r14.w
              dp2 r26.x, icb[r13.w + 0].yxyy, r24.xyxx
              dp2 r26.y, icb[r13.w + 0].yxyy, r24.yzyy
              mad r25.xy, r26.xyxx, cb9[r9.w + 3].yyyy, r23.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r25.xyzx, t9.xxxx, s13, r10.w
              mad r13.z, r14.w, l(0.125000), r13.z
              iadd r13.w, r13.w, l(1)
            endloop 
          else 
            utof r23.z, r12.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.z, r23.xyzx, t9.xxxx, s13, r10.w
          endif 
          mul r9.w, r13.z, r13.z
          mul r9.w, r13.z, r9.w
        else 
          mov r9.w, l(1.000000)
        endif 
        mul r7.w, r7.w, r9.w
      endif 
    endif 
    mad r9.w, -r2.x, l(0.500000), l(1.000000)
    mad r9.w, -r3.w, r9.w, l(1.000000)
    mul r9.w, r9.w, r9.w
    mad r9.w, -r9.w, l(0.620000), l(0.620000)
    add r9.w, -r3.w, r9.w
    mad r3.w, r2.z, r9.w, r3.w
    mul r3.w, r7.w, r3.w
    mul r23.xyz, r16.yzwy, r3.wwww
    lt r3.y, l(0.000000), r3.y
    mad r19.xyz, r19.xyzx, r5.zzzz, r23.xyzx
    mad r23.xyz, -r11.xyzx, r1.zzzz, cb2[17].xyzx
    dp3 r1.z, r23.xyzx, r23.xyzx
    rsq r1.z, r1.z
    mul r23.xyz, r1.zzzz, r23.xyzx
    dp3 r1.z, r23.xyzx, r5.xywx
    dp3 r5.z, r12.xyzx, r23.xyzx
    mad r9.w, |r5.z|, r1.w, -|r5.z|
    mad r5.z, |r5.z|, r9.w, l(1.000000)
    mad r3.z, r3.z, r2.y, r6.w
    mul r5.z, r5.z, r5.z
    mul r3.z, r3.z, r5.z
    rcp r3.z, r3.z
    mul r3.z, r8.w, r3.z
    mul r3.z, r3.z, r7.w
    mul r3.z, r3.z, l(0.250000)
    mad r23.yzw, r3.zzzz, r16.yyzw, r22.xxyz
    add_sat r1.z, -r1.z, l(1.000000)
    mul r5.z, r1.z, r1.z
    mul r5.z, r5.z, r5.z
    mul r1.z, r1.z, r5.z
    mul r1.z, r1.z, r3.z
    mad r24.xyz, r1.zzzz, r16.yzwy, r18.xyzx
    mad r16.yzw, r3.wwww, r16.yyzw, r21.zzxy
    and r25.xyz, r4.zzzz, r16.zwyz
    mov r19.w, r21.z
    mov r20.w, r25.z
    movc r20.xyzw, r3.yyyy, r19.xyzw, r20.xyzw
    mov r21.zw, r24.xxxy
    mov r25.zw, r18.xxxy
    movc r19.xyzw, r3.yyyy, r21.xyzw, r25.xyzw
    mov r23.x, r24.z
    mov r22.w, r18.z
    movc r22.xyzw, r3.yyyy, r23.yzwx, r22.xyzw
    if_nz r2.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r1.z, cb2[52].x, l(112), u2.xxxx
      or r1.z, r1.z, l(8)
      store_structured u2.x, cb2[52].x, l(112), r1.z
      store_structured u2.x, cb2[52].x, l(132), r7.w
    endif 
    mov r21.z, r20.w
    mov r21.xy, r19.xyxx
    mov r18.xy, r19.zwzz
    mov r18.z, r22.w
    mov r1.z, l(0x00010101)
  else 
    mov r1.z, l(257)
  endif 
else 
  mov r1.z, l(1)
endif 
ubfe r0.x, l(10), l(12), r0.x
mov r19.x, -r13.x
not r3.y, r3.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r23.x, l(2)
mov r24.x, l(2)
mov r25.w, l(1.000000)
mov r19.z, r13.x
mov r26.w, l(1.000000)
mov r27.z, l(1.000000)
mov r28.w, l(1.000000)
mov r19.yw, r14.xxxx
mov r13.y, r19.w
mov r29.w, l(1.000000)
mov r14.y, r19.x
mov r14.z, r13.x
mov r30.w, l(1.000000)
mov r31.x, r14.x
mov r31.y, r19.x
mov r31.z, r13.x
mov r32.x, r14.x
mov r32.y, r19.x
mov r32.z, r13.x
mov r33.x, r14.x
mov r33.y, r19.x
mov r33.z, r13.x
mov r16.yzw, r20.xxyz
mov r34.xyz, r21.zxyz
mov r35.xyz, r18.xyzx
mov r36.xyz, r22.xyzx
mov r3.z, r1.z
mov r3.w, l(0)
loop 
  ieq r5.z, r3.w, l(2)
  breakc_nz r5.z
  movc r5.z, r3.w, r0.x, r15.z
  imul null, r5.z, r5.z, l(15)
  ubfe r7.w, l(3), l(24), cb9[r5.z + 1].w
  switch r7.w
    case l(4)
    if_nz r2.w
      and r7.w, r3.z, l(7)
      imad r7.w, r7.w, l(24), l(112)
      add r23.yzw, cb1[24].xxyz, cb9[r5.z + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r7.w, r23.xyzw
    endif 
    iadd r7.w, r3.z, l(1)
    lt r8.w, l(0.000000), cb9[r5.z + 6].y
    mov r37.xy, cb9[r5.z + 5].zwzz
    mov r37.z, cb9[r5.z + 6].x
    mad r23.yzw, -r37.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r5.z + 0].xxyz
    add r38.xyz, -r11.xyzx, r23.yzwy
    dp3 r9.w, r37.xyzx, r38.xyzx
    div_sat r10.w, -r9.w, cb9[r5.z + 6].y
    mad r39.xyz, r10.wwww, r37.xyzx, r23.yzwy
    movc r39.xyz, r8.wwww, r39.xyzx, cb9[r5.z + 0].xyzx
    add r39.xyz, -r11.xyzx, r39.xyzx
    dp3 r12.w, r39.xyzx, r39.xyzx
    rsq r13.z, r12.w
    mul r39.xyz, r13.zzzz, r39.xyzx
    dp3 r13.z, r12.xyzx, r39.xyzx
    mov_sat r13.w, r13.z
    movc r13.w, r4.z, |r13.z|, r13.w
    lt r14.w, l(0.000000), r13.w
    if_nz r14.w
      sqrt r14.w, r12.w
      mul r15.y, cb9[r5.z + 3].x, cb9[r5.z + 3].x
      div r12.w, r15.y, r12.w
      min r12.w, r12.w, l(1.000000)
      mad_sat r15.yw, r14.wwww, cb9[r5.z + 2].xxxz, cb9[r5.z + 2].yyyw
      mul r39.xy, r15.ywyy, r15.ywyy
      mad r15.yw, r15.yyyw, l(0.000000, -2.000000, 0.000000, -2.000000), l(0.000000, 3.000000, 0.000000, 3.000000)
      mul r15.yw, r15.yyyw, r39.xxxy
      mul r12.w, r12.w, r15.y
      mul r12.w, r15.w, r12.w
      lt r14.w, l(0.000000), r12.w
      if_nz r14.w
        ubfe r14.w, l(3), l(27), cb9[r5.z + 1].w
        and r15.y, r7.w, l(15)
        iadd r15.w, r15.y, l(-1)
        ult r15.w, r15.w, l(32)
        and r15.w, r2.w, r15.w
        if_nz r15.w
          imad r15.yw, r15.yyyy, l(0, 24, 0, 24), l(0, 88, 0, 104)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.w, cb2[52].x, r15.y, u2.xxxx
          or r17.w, r17.w, l(4)
          store_structured u2.x, cb2[52].x, r15.y, r17.w
          store_structured u2.x, cb2[52].x, r15.w, r12.w
        endif 
        iadd r15.y, r3.z, l(257)
        ine r14.w, r14.w, l(1)
        if_nz r14.w
          mad r14.w, |r13.z|, l(-0.200000), l(0.400000)
          lt r15.w, r13.z, l(0.000000)
          and r15.w, r4.z, r15.w
          movc r14.w, r15.w, -r14.w, r14.w
          mad r39.xyz, r12.xyzx, r14.wwww, r11.xyzx
          add r39.xyz, r39.xyzx, -cb9[r5.z + 4].yzwy
          max r14.w, |r39.z|, |r39.y|
          max r14.w, r14.w, |r39.x|
          div r14.w, cb9[r5.z + 5].x, r14.w
          add r14.w, r14.w, cb9[r5.z + 5].y
          dp3 r15.w, r39.xyzx, r39.xyzx
          rsq r15.w, r15.w
          max r14.w, r14.w, l(0.00006104)
          and r17.w, l(0x0000ffff), cb9[r5.z + 1].w
          utof r40.w, r17.w
          mov r17.w, l(0)
          mov r18.w, l(0)
          loop 
            ige r20.w, r18.w, l(8)
            breakc_nz r20.w
            dp2 r41.y, icb[r18.w + 0].yxyy, r19.xyxx
            dp2 r41.z, icb[r18.w + 0].yxyy, r19.yzyy
            mul r41.yz, r41.yyzy, cb9[r5.z + 3].yyyy
            mul r41.x, r16.x, r41.y
            mul r41.w, r15.x, r41.y
            mad r40.xyz, r39.xyzx, r15.wwww, r41.xzwx
            sample_c_lz_indexable(texturecubearray)(float,float,float,float) r20.w, r40.xyzw, t10.xxxx, s13, r14.w
            mad r17.w, r20.w, l(0.125000), r17.w
            iadd r18.w, r18.w, l(1)
          endloop 
        else 
          mov r17.w, l(1.000000)
        endif 
        mul r12.w, r12.w, r17.w
        lt r14.w, l(0.000000), r12.w
        if_nz r14.w
          mul r14.w, r1.w, cb9[r5.z + 1].z
          mul r14.w, r14.w, l(0.250000)
          dp3 r15.w, r37.xyzx, r17.xyzx
          dp3 r18.w, r17.xyzx, r38.xyzx
          mad r20.w, -r15.w, r15.w, cb9[r5.z + 6].y
          mad r9.w, r15.w, r18.w, -r9.w
          div_sat r9.w, r9.w, r20.w
          div r15.w, r20.w, cb9[r5.z + 6].y
          mul r15.w, r15.w, l(10.000000)
          min r15.w, r15.w, l(1.000000)
          add r9.w, -r10.w, r9.w
          mad r9.w, r15.w, r9.w, r10.w
          mad r23.yzw, r9.wwww, r37.xxyz, r23.yyzw
          movc r23.yzw, r8.wwww, r23.yyzw, cb9[r5.z + 0].xxyz
          add r23.yzw, -r11.xxyz, r23.yyzw
          dp3 r8.w, r23.yzwy, r23.yzwy
          rsq r8.w, r8.w
          mul r37.xyz, r8.wwww, r23.yzwy
          ubfe r9.w, l(4), l(16), cb9[r5.z + 1].w
          ult r10.w, l(0), r9.w
          and r10.w, r3.x, r10.w
          if_nz r10.w
            iadd r9.w, r9.w, cb2[0].x
            imad r9.w, r9.w, l(15), l(-15)
            mad r10.w, |r13.z|, l(-0.200000), l(0.400000)
            lt r15.w, r13.z, l(0.000000)
            and r15.w, r4.z, r15.w
            movc r10.w, r15.w, -r10.w, r10.w
            mad r25.xyz, r12.xyzx, r10.wwww, r11.xyzx
            mov r38.xyz, cb9[r9.w + 6].yzwy
            mov r38.w, cb9[r9.w + 7].x
            dp4 r10.w, r38.xyzw, r25.xyzw
            mov r38.xyz, cb9[r9.w + 7].yzwy
            mov r38.w, cb9[r9.w + 8].x
            dp4 r15.w, r38.xyzw, r25.xyzw
            lt r18.w, r15.w, r10.w
            if_z r18.w
              mov r38.xyz, cb9[r9.w + 4].yzwy
              mov r38.w, cb9[r9.w + 5].x
              dp4 r38.x, r38.xyzw, r25.xyzw
              mov r39.xyz, cb9[r9.w + 5].yzwy
              mov r39.w, cb9[r9.w + 6].x
              dp4 r38.y, r39.xyzw, r25.xyzw
              div r25.xy, r38.xyxx, r15.wwww
              mad r25.xy, r25.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r38.x, r25.x, cb9[r9.w + 9].w
              add r38.y, r25.y, cb9[r9.w + 10].x
              mul r25.xy, r38.xyxx, cb9[r9.w + 9].yzyy
              div r38.xy, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].ywyy
              add r38.zw, -r38.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              ge r38.zw, r25.xxxy, r38.zzzw
              ge r38.xy, r38.xyxx, r25.xyxx
              or r38.xy, r38.xyxx, r38.zwzz
              or r20.w, r38.y, r38.x
              if_z r20.w
                mov_sat r25.xy, r25.xyxx
                mad r38.x, r25.x, cb9[r9.w + 8].y, cb9[r9.w + 8].z
                mad r38.y, r25.y, cb9[r9.w + 8].w, cb9[r9.w + 9].x
                mul r21.w, r15.w, cb9[r9.w + 10].z
                mad r10.w, cb9[r9.w + 10].y, r15.w, r10.w
                div r10.w, r10.w, r21.w
              endif 
            else 
              mov r20.w, l(-1)
            endif 
            or r15.w, r18.w, r20.w
            if_z r15.w
              max r10.w, r10.w, l(0.00006104)
              and r15.w, l(0x0000ffff), cb9[r9.w + 1].w
              if_nz cb2[58].y
                utof r25.z, r15.w
                mov r18.w, l(0)
                mov r20.w, l(0)
                loop 
                  ige r21.w, r20.w, l(8)
                  breakc_nz r21.w
                  dp2 r39.x, icb[r20.w + 0].yxyy, r19.xwxx
                  dp2 r39.y, icb[r20.w + 0].xyxx, r13.xyxx
                  mad r25.xy, r39.xyxx, cb9[r9.w + 3].yyyy, r38.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.w, r25.xyzx, t9.xxxx, s13, r10.w
                  mad r18.w, r21.w, l(0.125000), r18.w
                  iadd r20.w, r20.w, l(1)
                endloop 
              else 
                utof r38.z, r15.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r38.xyzx, t9.xxxx, s13, r10.w
              endif 
              mul r9.w, r18.w, r18.w
              mul r9.w, r18.w, r9.w
            else 
              mov r9.w, l(1.000000)
            endif 
            mul r12.w, r9.w, r12.w
          else 
            ubfe r9.w, l(4), l(20), cb9[r5.z + 1].w
            ult r10.w, l(0), r9.w
            and r10.w, r3.y, r10.w
            if_nz r10.w
              iadd r9.w, r9.w, cb2[0].x
              imad r9.w, r9.w, l(15), l(-15)
              mad r10.w, |r13.z|, l(-0.200000), l(0.400000)
              lt r15.w, r13.z, l(0.000000)
              and r15.w, r4.z, r15.w
              movc r10.w, r15.w, -r10.w, r10.w
              mad r26.xyz, r12.xyzx, r10.wwww, r11.xyzx
              mov r38.xyz, cb9[r9.w + 6].yzwy
              mov r38.w, cb9[r9.w + 7].x
              dp4 r10.w, r38.xyzw, r26.xyzw
              mov r38.xyz, cb9[r9.w + 7].yzwy
              mov r38.w, cb9[r9.w + 8].x
              dp4 r15.w, r38.xyzw, r26.xyzw
              lt r20.w, r15.w, r10.w
              if_z r20.w
                mov r38.xyz, cb9[r9.w + 4].yzwy
                mov r38.w, cb9[r9.w + 5].x
                dp4 r25.x, r38.xyzw, r26.xyzw
                mov r38.xyz, cb9[r9.w + 5].yzwy
                mov r38.w, cb9[r9.w + 6].x
                dp4 r25.y, r38.xyzw, r26.xyzw
                div r25.xy, r25.xyxx, r15.wwww
                mad r25.xy, r25.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r26.x, r25.x, cb9[r9.w + 9].w
                add r26.y, r25.y, cb9[r9.w + 10].x
                mul r25.xy, r26.xyxx, cb9[r9.w + 9].yzyy
                div r26.xy, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].ywyy
                add r38.xy, -r26.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r38.xy, r25.xyxx, r38.xyxx
                ge r26.xy, r26.xyxx, r25.xyxx
                or r26.xy, r26.xyxx, r38.xyxx
                or r21.w, r26.y, r26.x
                if_z r21.w
                  mov_sat r25.xy, r25.xyxx
                  mad r26.x, r25.x, cb9[r9.w + 8].y, cb9[r9.w + 8].z
                  mad r26.y, r25.y, cb9[r9.w + 8].w, cb9[r9.w + 9].x
                  mul r22.w, r15.w, cb9[r9.w + 10].z
                  mad r10.w, cb9[r9.w + 10].y, r15.w, r10.w
                  div r10.w, r10.w, r22.w
                endif 
              else 
                mov r21.w, l(-1)
              endif 
              or r15.w, r20.w, r21.w
              if_z r15.w
                max r10.w, r10.w, l(0.00006104)
                and r15.w, l(0x0000ffff), cb9[r9.w + 1].w
                if_nz cb2[58].y
                  utof r25.z, r15.w
                  mov r20.w, l(0)
                  mov r21.w, l(0)
                  loop 
                    ige r22.w, r21.w, l(8)
                    breakc_nz r22.w
                    dp2 r38.x, icb[r21.w + 0].xyxx, r14.xyxx
                    dp2 r38.y, icb[r21.w + 0].yxyy, r14.xzxx
                    mad r25.xy, r38.xyxx, cb9[r9.w + 3].yyyy, r26.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.w, r25.xyzx, t9.xxxx, s13, r10.w
                    mad r20.w, r22.w, l(0.125000), r20.w
                    iadd r21.w, r21.w, l(1)
                  endloop 
                else 
                  utof r26.z, r15.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r26.xyzx, t9.xxxx, s13, r10.w
                endif 
                mul r9.w, r20.w, r20.w
                mul r9.w, r20.w, r9.w
              else 
                mov r9.w, l(1.000000)
              endif 
              mul r12.w, r9.w, r12.w
            endif 
          endif 
          mad r9.w, -r13.w, r2.x, l(1.000000)
          mul r9.w, r9.w, r9.w
          mad r9.w, -r9.w, l(0.620000), l(0.620000)
          add r9.w, -r13.w, r9.w
          mad r9.w, r2.z, r9.w, r13.w
          mul r9.w, r12.w, r9.w
          mov r25.x, cb9[r5.z + 0].w
          mov r25.yz, cb9[r5.z + 1].xxyx
          lt r10.w, l(0.000000), r13.z
          mad r26.xyz, r9.wwww, r25.xyzx, r16.yzwy
          dp3_sat r13.z, r12.xyzx, r37.xyzx
          mad r23.yzw, r23.yyzw, r8.wwww, r5.xxyw
          dp3 r8.w, r23.yzwy, r23.yzwy
          rsq r8.w, r8.w
          mul r23.yzw, r8.wwww, r23.yyzw
          dp3 r8.w, r23.yzwy, r5.xywx
          dp3 r13.w, r12.xyzx, r23.yzwy
          mad r15.w, |r13.w|, r1.w, -|r13.w|
          mad r13.w, |r13.w|, r15.w, l(1.000000)
          mad r15.w, r13.z, r2.y, r6.w
          mul r13.w, r13.w, r13.w
          mul r13.w, r15.w, r13.w
          rcp r13.w, r13.w
          mul r13.z, r14.w, r13.z
          mul r13.z, r13.z, r13.w
          mul r13.z, r12.w, r13.z
          mad r23.yzw, r13.zzzz, r25.xxyz, r36.xxyz
          add_sat r8.w, -r8.w, l(1.000000)
          mul r13.w, r8.w, r8.w
          mul r13.w, r13.w, r13.w
          mul r8.w, r8.w, r13.w
          mul r8.w, r8.w, r13.z
          mad r37.xyz, r8.wwww, r25.xyzx, r35.xyzx
          mad r25.xyz, r9.wwww, r25.xyzx, r34.xyzx
          movc r25.xyz, r4.zzzz, r25.xyzx, r34.xyzx
          movc r16.yzw, r10.wwww, r26.xxyz, r16.yyzw
          movc r34.xyz, r10.wwww, r34.xyzx, r25.xyzx
          movc r35.xyz, r10.wwww, r37.xyzx, r35.xyzx
          movc r36.xyz, r10.wwww, r23.yzwy, r36.xyzx
          and r8.w, r15.y, l(15)
          iadd r9.w, r8.w, l(-1)
          ult r9.w, r9.w, l(32)
          and r9.w, r2.w, r9.w
          if_nz r9.w
            imad r13.zw, r8.wwww, l(0, 0, 24, 24), l(0, 0, 88, 108)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r8.w, cb2[52].x, r13.z, u2.xxxx
            or r8.w, r8.w, l(8)
            store_structured u2.x, cb2[52].x, r13.z, r8.w
            store_structured u2.x, cb2[52].x, r13.w, r12.w
          endif 
          iadd r3.z, r3.z, l(0x00010101)
        else 
          mov r3.z, r15.y
        endif 
      else 
        mov r3.z, r7.w
      endif 
    else 
      mov r3.z, r7.w
    endif 
    break 
    case l(2)
    if_nz r2.w
      and r7.w, r3.z, l(7)
      imad r7.w, r7.w, l(24), l(112)
      add r24.yzw, cb1[24].xxyz, cb9[r5.z + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r7.w, r24.xyzw
    endif 
    iadd r7.w, r3.z, l(1)
    add r25.xy, -r11.xyxx, cb9[r5.z + 3].zwzz
    add r25.z, -r11.z, cb9[r5.z + 4].x
    dp3 r8.w, r25.xyzx, r25.xyzx
    rsq r8.w, r8.w
    mul r23.yzw, r8.wwww, r25.xxyz
    dp3 r9.w, r12.xyzx, r23.yzwy
    mov_sat r10.w, r9.w
    movc r12.w, r4.z, |r9.w|, r10.w
    lt r13.z, l(0.000000), r12.w
    if_nz r13.z
      mov r37.xyz, cb9[r5.z + 7].yzwy
      mov r37.w, cb9[r5.z + 8].x
      dp4 r13.z, r37.xyzw, r11.xyzw
      lt r13.w, r13.z, l(1.000000)
      if_nz r13.w
        mov r23.yzw, l(0,1.000000,1.000000,1.000000)
        mov r13.w, l(0)
      else 
        add r24.yzw, -r11.xxyz, cb9[r5.z + 0].xxyz
        mul r14.w, cb9[r5.z + 3].x, cb9[r5.z + 3].x
        dp3 r15.y, r24.yzwy, r24.yzwy
        div r14.w, r14.w, r15.y
        min r14.w, r14.w, l(1.000000)
        mad_sat r15.yw, r13.zzzz, cb9[r5.z + 2].xxxz, cb9[r5.z + 2].yyyw
        mul r24.yz, r15.yywy, r15.yywy
        mad r15.yw, r15.yyyw, l(0.000000, -2.000000, 0.000000, -2.000000), l(0.000000, 3.000000, 0.000000, 3.000000)
        mul r15.yw, r15.yyyw, r24.yyyz
        mul r14.w, r14.w, r15.y
        mul r14.w, r15.w, r14.w
        mov r38.xyz, cb9[r5.z + 4].yzwy
        mov r38.w, cb9[r5.z + 5].x
        dp4 r26.x, r38.xyzw, r11.xyzw
        mov r38.xyz, cb9[r5.z + 5].yzwy
        mov r38.w, cb9[r5.z + 6].x
        dp4 r26.y, r38.xyzw, r11.xyzw
        div r27.xy, r26.xyxx, r13.zzzz
        lt r13.z, cb9[r5.z + 10].w, l(0.00048828)
        if_nz r13.z
          mad_sat r15.yw, |r27.xxxy|, cb9[r5.z + 12].xxxy, cb9[r5.z + 12].zzzw
          mul r24.yz, r15.yywy, r15.yywy
          mad r15.yw, r15.yyyw, l(0.000000, -2.000000, 0.000000, -2.000000), l(0.000000, 3.000000, 0.000000, 3.000000)
          mul r15.yw, r15.yyyw, r24.yyyz
          mul r13.z, r15.w, r15.y
        else 
          mul_sat r38.xyzw, |r27.yyxx|, cb9[r5.z + 11].xyzw
          log r38.xyzw, r38.xyzw
          mul r38.xyzw, r38.xyzw, cb9[r5.z + 12].zzzz
          exp r38.xyzw, r38.xyzw
          add r15.yw, r38.zzzw, r38.xxxy
          log r15.yw, r15.yyyw
          mul r15.yw, r15.yyyw, cb9[r5.z + 12].wwww
          exp r15.yw, r15.yyyw
          mul r15.y, r15.y, cb9[r5.z + 12].x
          mad r21.w, cb9[r5.z + 12].y, r15.w, l(-1.000000)
          mad r15.y, cb9[r5.z + 12].y, r15.w, -r15.y
          div_sat r15.y, r21.w, r15.y
          mul r15.w, r15.y, r15.y
          mad r15.y, r15.y, l(-2.000000), l(3.000000)
          mul r13.z, r15.y, r15.w
        endif 
        mul r13.w, r13.z, r14.w
        and r13.z, l(255), cb9[r5.z + 14].w
        if_nz r13.z
          dp3 r14.w, cb9[r5.z + 13].xyzx, r27.xyzx
          mov r26.x, cb9[r5.z + 13].w
          mov r26.yz, cb9[r5.z + 14].xxyx
          dp3 r15.y, r26.xyzx, r27.xyzx
          frc r26.x, r14.w
          frc r26.y, r15.y
          iadd r13.z, r13.z, l(-1)
          utof r26.z, r13.z
          sample_l_indexable(texture2darray)(float,float,float,float) r23.yzw, r26.xyzx, t20.wxyz, s2, l(0.000000)
        else 
          mov r23.yzw, l(0,1.000000,1.000000,1.000000)
        endif 
      endif 
      mov r26.x, cb9[r5.z + 0].w
      mov r26.yz, cb9[r5.z + 1].xxyx
      mul r23.yzw, r23.yyzw, r26.xxyz
      lt r13.z, l(0.000000), r13.w
      if_nz r13.z
        ubfe r13.z, l(3), l(27), cb9[r5.z + 1].w
        and r14.w, r7.w, l(15)
        iadd r15.y, r14.w, l(-1)
        ult r15.y, r15.y, l(32)
        and r15.y, r2.w, r15.y
        if_nz r15.y
          imad r15.yw, r14.wwww, l(0, 24, 0, 24), l(0, 88, 0, 104)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r14.w, cb2[52].x, r15.y, u2.xxxx
          or r14.w, r14.w, l(4)
          store_structured u2.x, cb2[52].x, r15.y, r14.w
          store_structured u2.x, cb2[52].x, r15.w, r13.w
        endif 
        iadd r14.w, r3.z, l(257)
        ine r13.z, r13.z, l(1)
        if_nz r13.z
          mad r13.z, |r9.w|, l(-0.200000), l(0.400000)
          lt r15.y, r9.w, l(0.000000)
          and r15.y, r4.z, r15.y
          movc r13.z, r15.y, -r13.z, r13.z
          mad r28.xyz, r12.xyzx, r13.zzzz, r11.xyzx
          mov r38.xyz, cb9[r5.z + 6].yzwy
          mov r38.w, cb9[r5.z + 7].x
          dp4 r13.z, r38.xyzw, r28.xyzw
          dp4 r15.y, r37.xyzw, r28.xyzw
          ge r15.w, r15.y, r13.z
          if_nz r15.w
            mov r37.xyz, cb9[r5.z + 4].yzwy
            mov r37.w, cb9[r5.z + 5].x
            dp4 r26.x, r37.xyzw, r28.xyzw
            mov r37.xyz, cb9[r5.z + 5].yzwy
            mov r37.w, cb9[r5.z + 6].x
            dp4 r26.y, r37.xyzw, r28.xyzw
            div r24.yz, r26.xxyx, r15.yyyy
            mad_sat r24.yz, r24.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
            mad r26.x, r24.y, cb9[r5.z + 8].y, cb9[r5.z + 8].z
            mad r26.y, r24.z, cb9[r5.z + 8].w, cb9[r5.z + 9].x
            div r13.z, r13.z, r15.y
            max r13.z, r13.z, l(0.00006104)
            and r15.y, l(0x0000ffff), cb9[r5.z + 1].w
            if_nz cb2[58].y
              utof r28.z, r15.y
              mov r15.w, l(0)
              mov r21.w, l(0)
              loop 
                ige r22.w, r21.w, l(8)
                breakc_nz r22.w
                dp2 r27.x, icb[r21.w + 0].xyxx, r31.xyxx
                dp2 r27.y, icb[r21.w + 0].yxyy, r31.xzxx
                mad r28.xy, r27.xyxx, cb9[r5.z + 3].yyyy, r26.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.w, r28.xyzx, t9.xxxx, s13, r13.z
                mad r15.w, r22.w, l(0.125000), r15.w
                iadd r21.w, r21.w, l(1)
              endloop 
            else 
              utof r26.z, r15.y
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r26.xyzx, t9.xxxx, s13, r13.z
            endif 
            mul r13.z, r15.w, r15.w
            mul r13.z, r15.w, r13.z
          else 
            mov r13.z, l(1.000000)
          endif 
        else 
          mov r13.z, l(1.000000)
        endif 
        mul r13.z, r13.z, r13.w
        lt r13.w, l(0.000000), r13.z
        if_nz r13.w
          mul r13.w, r1.w, cb9[r5.z + 1].z
          mul r13.w, r10.w, r13.w
          ubfe r15.y, l(4), l(16), cb9[r5.z + 1].w
          ult r21.w, l(0), r15.y
          and r21.w, r3.x, r21.w
          if_nz r21.w
            iadd r15.y, r15.y, cb2[0].x
            imad r15.y, r15.y, l(15), l(-15)
            mad r21.w, |r9.w|, l(-0.200000), l(0.400000)
            lt r22.w, r9.w, l(0.000000)
            and r22.w, r4.z, r22.w
            movc r21.w, r22.w, -r21.w, r21.w
            mad r29.xyz, r12.xyzx, r21.wwww, r11.xyzx
            mov r37.xyz, cb9[r15.y + 6].yzwy
            mov r37.w, cb9[r15.y + 7].x
            dp4 r21.w, r37.xyzw, r29.xyzw
            mov r37.xyz, cb9[r15.y + 7].yzwy
            mov r37.w, cb9[r15.y + 8].x
            dp4 r22.w, r37.xyzw, r29.xyzw
            lt r24.y, r22.w, r21.w
            if_z r24.y
              mov r37.xyz, cb9[r15.y + 4].yzwy
              mov r37.w, cb9[r15.y + 5].x
              dp4 r26.x, r37.xyzw, r29.xyzw
              mov r37.xyz, cb9[r15.y + 5].yzwy
              mov r37.w, cb9[r15.y + 6].x
              dp4 r26.y, r37.xyzw, r29.xyzw
              div r24.zw, r26.xxxy, r22.wwww
              mad r24.zw, r24.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
              add r26.x, r24.z, cb9[r15.y + 9].w
              add r26.y, r24.w, cb9[r15.y + 10].x
              mul r24.zw, r26.xxxy, cb9[r15.y + 9].yyyz
              div r26.xy, cb9[r15.y + 3].yyyy, cb9[r15.y + 8].ywyy
              add r27.xy, -r26.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r27.xy, r24.zwzz, r27.xyxx
              ge r26.xy, r26.xyxx, r24.zwzz
              or r26.xy, r26.xyxx, r27.xyxx
              or r26.x, r26.y, r26.x
              if_z r26.x
                mov_sat r24.zw, r24.zzzw
                mad r28.x, r24.z, cb9[r15.y + 8].y, cb9[r15.y + 8].z
                mad r28.y, r24.w, cb9[r15.y + 8].w, cb9[r15.y + 9].x
                mul r24.z, r22.w, cb9[r15.y + 10].z
                mad r21.w, cb9[r15.y + 10].y, r22.w, r21.w
                div r21.w, r21.w, r24.z
              endif 
            else 
              mov r26.x, l(-1)
            endif 
            or r22.w, r24.y, r26.x
            if_z r22.w
              max r21.w, r21.w, l(0.00006104)
              and r22.w, l(0x0000ffff), cb9[r15.y + 1].w
              if_nz cb2[58].y
                utof r26.z, r22.w
                mov r24.yz, l(0,0,0,0)
                loop 
                  ige r24.w, r24.z, l(8)
                  breakc_nz r24.w
                  dp2 r27.x, icb[r24.z + 0].xyxx, r32.xyxx
                  dp2 r27.y, icb[r24.z + 0].yxyy, r32.xzxx
                  mad r26.xy, r27.xyxx, cb9[r15.y + 3].yyyy, r28.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.w, r26.xyzx, t9.xxxx, s13, r21.w
                  mad r24.y, r24.w, l(0.125000), r24.y
                  iadd r24.z, r24.z, l(1)
                endloop 
              else 
                utof r28.z, r22.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.y, r28.xyzx, t9.xxxx, s13, r21.w
              endif 
              mul r15.y, r24.y, r24.y
              mul r15.y, r24.y, r15.y
            else 
              mov r15.y, l(1.000000)
            endif 
            mul r13.z, r13.z, r15.y
          else 
            ubfe r5.z, l(4), l(20), cb9[r5.z + 1].w
            ult r15.y, l(0), r5.z
            and r15.y, r3.y, r15.y
            if_nz r15.y
              iadd r5.z, r5.z, cb2[0].x
              imad r5.z, r5.z, l(15), l(-15)
              mad r15.y, |r9.w|, l(-0.200000), l(0.400000)
              lt r21.w, r9.w, l(0.000000)
              and r21.w, r4.z, r21.w
              movc r15.y, r21.w, -r15.y, r15.y
              mad r30.xyz, r12.xyzx, r15.yyyy, r11.xyzx
              mov r37.xyz, cb9[r5.z + 6].yzwy
              mov r37.w, cb9[r5.z + 7].x
              dp4 r15.y, r37.xyzw, r30.xyzw
              mov r37.xyz, cb9[r5.z + 7].yzwy
              mov r37.w, cb9[r5.z + 8].x
              dp4 r21.w, r37.xyzw, r30.xyzw
              lt r22.w, r21.w, r15.y
              if_z r22.w
                mov r37.xyz, cb9[r5.z + 4].yzwy
                mov r37.w, cb9[r5.z + 5].x
                dp4 r26.x, r37.xyzw, r30.xyzw
                mov r37.xyz, cb9[r5.z + 5].yzwy
                mov r37.w, cb9[r5.z + 6].x
                dp4 r26.y, r37.xyzw, r30.xyzw
                div r24.zw, r26.xxxy, r21.wwww
                mad r24.zw, r24.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
                add r26.x, r24.z, cb9[r5.z + 9].w
                add r26.y, r24.w, cb9[r5.z + 10].x
                mul r24.zw, r26.xxxy, cb9[r5.z + 9].yyyz
                div r26.xy, cb9[r5.z + 3].yyyy, cb9[r5.z + 8].ywyy
                add r27.xy, -r26.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r27.xy, r24.zwzz, r27.xyxx
                ge r26.xy, r26.xyxx, r24.zwzz
                or r26.xy, r26.xyxx, r27.xyxx
                or r26.x, r26.y, r26.x
                if_z r26.x
                  mov_sat r24.zw, r24.zzzw
                  mad r28.x, r24.z, cb9[r5.z + 8].y, cb9[r5.z + 8].z
                  mad r28.y, r24.w, cb9[r5.z + 8].w, cb9[r5.z + 9].x
                  mul r24.z, r21.w, cb9[r5.z + 10].z
                  mad r15.y, cb9[r5.z + 10].y, r21.w, r15.y
                  div r15.y, r15.y, r24.z
                endif 
              else 
                mov r26.x, l(-1)
              endif 
              or r21.w, r22.w, r26.x
              if_z r21.w
                max r15.y, r15.y, l(0.00006104)
                and r21.w, l(0x0000ffff), cb9[r5.z + 1].w
                if_nz cb2[58].y
                  utof r26.z, r21.w
                  mov r22.w, l(0)
                  mov r24.z, l(0)
                  loop 
                    ige r24.w, r24.z, l(8)
                    breakc_nz r24.w
                    dp2 r27.x, icb[r24.z + 0].xyxx, r33.xyxx
                    dp2 r27.y, icb[r24.z + 0].yxyy, r33.xzxx
                    mad r26.xy, r27.xyxx, cb9[r5.z + 3].yyyy, r28.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.w, r26.xyzx, t9.xxxx, s13, r15.y
                    mad r22.w, r24.w, l(0.125000), r22.w
                    iadd r24.z, r24.z, l(1)
                  endloop 
                else 
                  utof r28.z, r21.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.w, r28.xyzx, t9.xxxx, s13, r15.y
                endif 
                mul r5.z, r22.w, r22.w
                mul r5.z, r22.w, r5.z
              else 
                mov r5.z, l(1.000000)
              endif 
              mul r13.z, r5.z, r13.z
            endif 
          endif 
          mad r5.z, -r12.w, r2.x, l(1.000000)
          mul r5.z, r5.z, r5.z
          mad r5.z, -r5.z, l(0.620000), l(0.620000)
          add r5.z, -r12.w, r5.z
          mad r5.z, r2.z, r5.z, r12.w
          mul r5.z, r13.z, r5.z
          lt r9.w, l(0.000000), r9.w
          mad r26.xyz, r5.zzzz, r23.yzwy, r16.yzwy
          mad r25.xyz, r25.xyzx, r8.wwww, r5.xywx
          dp3 r8.w, r25.xyzx, r25.xyzx
          rsq r8.w, r8.w
          mul r25.xyz, r8.wwww, r25.xyzx
          dp3 r8.w, r25.xyzx, r5.xywx
          dp3 r12.w, r12.xyzx, r25.xyzx
          mad r15.y, |r12.w|, r1.w, -|r12.w|
          mad r12.w, |r12.w|, r15.y, l(1.000000)
          mad r10.w, r10.w, r2.y, r6.w
          mul r12.w, r12.w, r12.w
          mul r10.w, r10.w, r12.w
          rcp r10.w, r10.w
          mul r10.w, r13.w, r10.w
          mul r10.w, r10.w, r13.z
          mul r10.w, r10.w, l(0.250000)
          mad r25.xyz, r10.wwww, r23.yzwy, r36.xyzx
          add_sat r8.w, -r8.w, l(1.000000)
          mul r12.w, r8.w, r8.w
          mul r12.w, r12.w, r12.w
          mul r8.w, r8.w, r12.w
          mul r8.w, r8.w, r10.w
          mad r27.xyw, r8.wwww, r23.yzyw, r35.xyxz
          mad r23.yzw, r5.zzzz, r23.yyzw, r34.xxyz
          movc r23.yzw, r4.zzzz, r23.yyzw, r34.xxyz
          movc r16.yzw, r9.wwww, r26.xxyz, r16.yyzw
          movc r34.xyz, r9.wwww, r34.xyzx, r23.yzwy
          movc r35.xyz, r9.wwww, r27.xywx, r35.xyzx
          movc r36.xyz, r9.wwww, r25.xyzx, r36.xyzx
          and r5.z, r14.w, l(15)
          iadd r8.w, r5.z, l(-1)
          ult r8.w, r8.w, l(32)
          and r8.w, r2.w, r8.w
          if_nz r8.w
            imad r23.yz, r5.zzzz, l(0, 24, 24, 0), l(0, 88, 108, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r5.z, cb2[52].x, r23.y, u2.xxxx
            or r5.z, r5.z, l(8)
            store_structured u2.x, cb2[52].x, r23.y, r5.z
            store_structured u2.x, cb2[52].x, r23.z, r13.z
          endif 
          iadd r3.z, r3.z, l(0x00010101)
        else 
          mov r3.z, r14.w
        endif 
      else 
        mov r3.z, r7.w
      endif 
    else 
      mov r3.z, r7.w
    endif 
    break 
    default 
    break 
  endswitch 
  iadd r3.w, r3.w, l(1)
endloop 
mad r5.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.x, r5.y
mad r2.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r2.x
ieq r1.z, r0.x, r1.z
movc r1.zw, r1.zzzz, r2.yyyz, l(0,0,-1.000000,0)
mad r2.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.x, r2.x
ieq r2.x, r0.x, r2.x
movc r2.xy, r2.xxxx, r2.yzyy, l(-1.000000,0,0,0)
mad r3.xyw, r9.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r2.z, r3.x
ieq r2.z, r0.x, r2.z
movc r3.xy, r2.zzzz, r3.ywyy, l(-1.000000,0,0,0)
mad r4.xyw, r10.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r2.z, r4.x
ieq r0.x, r0.x, r2.z
movc r4.xy, r0.xxxx, r4.ywyy, l(-1.000000,0,0,0)
mov r7.x, r1.z
mov r7.y, r2.x
mov r7.z, r3.x
mov r7.w, r4.x
add r7.xyzw, -r5.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.x, r7.y, r7.x
add r0.x, r7.z, r0.x
add r0.x, r7.w, r0.x
mul r1.z, r2.y, r7.y
mad r1.z, r7.x, r1.w, r1.z
mad r1.z, r7.z, r3.y, r1.z
mad r1.z, r7.w, r4.y, r1.z
div r5.w, r1.z, r0.x
ge r0.x, l(0.000000), r0.x
movc r5.yz, r0.xxxx, l(0,0,0,0), r5.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.x, r1.w, r1.z
movc r2.xyz, r0.xxxx, r5.xyzx, r5.xzyx
mad r0.x, -r2.z, l(0.500000), r2.x
add r5.y, r0.x, r2.z
mad r5.z, -r2.y, l(0.500000), r0.x
add r5.x, r2.y, r5.z
mul r2.xyz, r6.xyzx, r16.yzwy
mad r2.xyz, r34.xyzx, r5.xyzx, r2.xyzx
mul r3.xyw, r35.xyxz, l(0.960000, 0.960000, 0.000000, 0.960000)
mad r3.xyw, r36.xyxz, l(0.040000, 0.040000, 0.000000, 0.040000), r3.xyxw
add r2.xyz, r2.xyzx, r3.xywx
add r3.xyw, -r5.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
mul r3.xyw, r3.xyxw, r35.xyxz
mad r3.xyw, r36.xyxz, r5.xyxz, r3.xyxw
mad r3.xyw, r16.yzyw, r6.xyxz, r3.xyxw
movc r2.xyz, r4.zzzz, r2.xyzx, r3.xywx
lt r0.x, l(0.000000), cb2[9].z
if_nz r0.x
  dp3 r0.x, r11.xyzx, r11.xyzx
  rsq r1.z, r0.x
  mul r3.xyw, r1.zzzz, r11.xyxz
  sqrt r0.x, r0.x
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.xxxx, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r4.x, l(0.010000), |r11.z|
    mul r4.yz, r11.zzzz, cb2[15].zzwz
    mul r5.xy, r4.yzyy, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r5.xy, r5.xyxx
    add r5.xy, -r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r4.yz, r5.xxyx, r4.yyzy
    mul r4.yz, r1.zzwz, r4.yyzy
    movc r1.zw, r4.xxxx, r4.yyyz, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r5.xyz, r1.wwww, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xyzx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xyzx
  else 
    mad r1.z, r0.x, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r11.z|
    mul r4.w, r11.z, cb2[15].z
    mul r5.x, r4.w, l(-1.442695)
    exp r5.x, r5.x
    add r5.x, -r5.x, l(1.000000)
    div r4.w, r5.x, r4.w
    mul r4.w, r1.z, r4.w
    movc r1.z, r1.w, r4.w, r1.z
    mul r5.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r3.xywx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r3.x, cb2[8].w, -r1.z, l(1.000000)
  mul r3.x, r3.x, r3.x
  mul r3.x, r3.x, l(12.566371)
  div r1.w, r1.w, r3.x
  add r0.x, r0.x, -cb2[10].w
  mul_sat r0.x, r0.x, cb2[11].w
  mul r0.x, r0.x, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r3.xyw, r0.xxxx, cb2[11].xyxz
  mad r3.xyw, r1.zzzz, cb2[10].xyxz, r3.xyxw
  mul r3.xyw, r3.xyxw, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyw, r3.xyxw, r5.xyxz
  mad r3.xyw, r2.xyxz, r4.xyxz, r3.xyxw
else 
  mul r0.x, r11.z, cb2[6].x
  mad r1.z, cb2[6].x, r11.z, cb2[5].x
  lt r1.w, |r0.x|, l(0.000100)
  min r4.x, r1.z, l(64.000000)
  mul r4.x, r4.x, l(1.442695)
  exp r4.x, r4.x
  mov_sat r4.y, cb2[6].z
  lt r4.z, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r4.z, r4.x, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.x, r1.w, l(1.000000), r0.x
  div r0.x, r1.z, r0.x
  movc r0.x, r1.w, r4.y, r0.x
  mul r0.x, r0.x, cb2[5].z
  dp3 r1.z, r11.xyzx, r11.xyzx
  sqrt r1.w, r1.z
  mad r0.x, r0.x, r1.w, cb2[5].w
  exp r0.x, r0.x
  min r0.x, r0.x, l(1.000000)
  add r0.x, -r0.x, l(1.000000)
  rsq r1.z, r1.z
  mul r4.xyz, r1.zzzz, r11.xyzx
  dp3 r1.z, cb2[7].yzwy, r4.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r1.zzzz, r4.xyzw, cb2[4].xyzw
  mul r0.x, r0.x, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyw, r0.xxxx, r4.xyxz, r2.xyxz
endif 
mul r2.xyz, r3.xywx, cb1[85].yyyy
ge r3.xyw, r2.xyxz, l(0.00006104, 0.00006104, 0.000000, 0.00006104)
and r2.xyz, r2.xyzx, r3.xywx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.x, l(0), cb2[55].w
and r4.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r4.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r4.ywyy, l(3, 8, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r4.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r1.z, cb2[55].w, l(16)
ine r1.w, r1.z, l(0)
ieq r1.z, r1.z, l(0)
and r1.z, r1.z, r1.w
and r4.z, r1.z, l(0x3e4ccccd)
mad r3.xyw, r4.xyxz, cb1[85].xxxx, -r2.xyxz
mad r3.xyw, r3.xyxw, l(0.500000, 0.500000, 0.000000, 0.500000), r2.xyxz
movc r2.xyz, r0.xxxx, r3.xywx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.x, r3.z, l(7)
      break 
      case l(2)
      ubfe r0.x, l(3), l(8), r3.z
      break 
      case l(3)
      ushr r0.x, r3.z, l(16)
      break 
      case l(4)
      and r0.x, r0.y, l(3)
      break 
      case l(5)
      ushr r0.x, r0.y, l(8)
      break 
      default 
      mov r0.x, l(0)
      break 
    endswitch 
    utof r0.x, r0.x
    mul r0.x, r0.x, cb2[53].z
    mad r3.xyw, r0.xxxx, l(0.500000, 0.500000, 0.000000, 0.500000), -r2.xyxz
    mad r2.xyz, cb2[53].wwww, r3.xywx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r2.w
  add r1.xyz, r11.xyzx, cb1[24].xyzx
  and r1.w, r3.z, l(7)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.x, r0.y, l(3)
  store_structured u2.x, cb2[52].x, l(108), r0.x
endif 
if_nz cb2[52].y
  and r0.x, r3.z, l(7)
  atomic_iadd g1, l(0), r0.x
  ubfe r1.x, l(3), l(8), r3.z
  atomic_iadd g1, l(4), r1.x
  ushr r1.y, r3.z, l(16)
  atomic_iadd g1, l(8), r1.y
  and r1.z, r0.y, l(3)
  atomic_iadd g1, l(12), r1.z
  ushr r0.y, r0.y, l(8)
  atomic_iadd g1, l(16), r0.y
  atomic_umax g2, l(0), r0.x
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), r1.z
  atomic_umax g2, l(16), r0.y
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.x, r1.x, l(63)
  if_nz r0.x
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.x, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.x
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.x, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.x
    ieq r0.yz, r0.zzwz, cb2[52].zzwz
    and r0.y, r0.z, r0.y
    if_nz r0.y
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.x
    endif 
  endif 
endif 
ret 
// Approximately 2133 instruction slots used
