//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:49 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3584], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 36
dcl_thread_group 8, 8, 1
imad r0.x, cb2[57].x, l(43), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.zw, r0.xxxy, l(0, 0, 4095, 4095)
imad r1.xy, r0.zwzz, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.yzw, r1.xyww, t0.wxyz
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.yyyx
add r9.xy, r1.wzww, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r10.x, r3.x, l(0.984375)
mul r5.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r10.x, r3.x, r5.w
max r3.x, r3.x, l(0.00000001)
rcp r10.y, r3.x
and r9.zw, r0.zzzz, r10.xxxy
add r10.xy, r9.xyxx, -cb1[71].xyxx
mul r10.xy, r10.xyxx, cb1[44].zwzz
mad r10.xy, r10.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r11.x, r10.x, cb1[12].x
mul r11.y, r10.y, cb1[13].y
mov r11.z, l(1.000000)
mul r10.xyz, r9.wwww, r11.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.z, r2.w, l(3.000000), l(0.500000)
ftou r0.z, r0.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r11.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r11.z
mul r11.xy, r2.wwww, r2.xyxx
and r12.xyzw, r0.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.z, r12.w, r12.z
movc r12.z, r0.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.z, r0.w, l(-0.500000), l(-0.00146628)
add r0.z, r0.z, r2.z
mul_sat r2.y, r0.z, l(2.00982332)
dp3 r0.z, -r10.xyzx, -r10.xyzx
rsq r0.z, r0.z
mul r12.xyz, r0.zzzz, -r10.xyzx
dp2 r0.w, r1.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r0.w
dp2 r0.w, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r3.x, r15.x, r0.w
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r0.w, -r12.xyzx, r11.xyzx
add r0.w, r0.w, r0.w
mad r16.xyz, r11.xyzx, -r0.wwww, -r12.xyzx
mul r0.w, r2.y, l(17.000000)
exp r0.w, r0.w
add r0.w, r0.w, l(2.000000)
div r0.w, l(2.000000), r0.w
sqrt r1.z, r0.w
mul r2.zw, r9.xxxy, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.zwzz, t27.yzwx, s4, l(0.000000)
mul r2.z, r1.w, r4.z
dp3 r2.w, r11.xyzx, cb2[17].xyzx
mov_sat r5.w, r2.w
ge r6.w, l(0.000000), r5.w
if_nz r6.w
  mov r7.w, l(0)
endif 
if_z r6.w
  mul r9.xyw, r10.yyyy, cb2[29].xyxz
  mad r9.xyw, r10.xxxx, cb2[28].xyxz, r9.xyxw
  mad r9.xyw, r10.zzzz, cb2[30].xyxz, r9.xyxw
  add r9.xyw, r9.xyxw, cb2[31].xyxz
  add r6.w, r9.w, -cb2[17].w
  mad r6.w, -r6.w, l(0.00006104), l(1.000000)
  mov_sat r8.w, r6.w
  eq r8.w, r6.w, r8.w
  if_nz r8.w
    mov r8.w, l(0)
    mov r12.w, l(0)
    loop 
      ge r13.z, r8.w, l(3.000000)
      breakc_nz r13.z
      ftou r13.z, r8.w
      add r15.yz, r9.xxyx, -cb2[r13.z + 20].xxyx
      max r13.w, |r15.z|, |r15.y|
      mul r12.w, r13.w, cb2[r13.z + 20].z
      lt r13.z, r12.w, l(1.000000)
      if_nz r13.z
        break 
      endif 
      add r8.w, r8.w, l(1.000000)
      mov r12.w, l(0)
    endloop 
  else 
    mov r8.w, l(3.000000)
    mov r12.w, l(0)
  endif 
  ge r13.z, r8.w, l(3.000000)
  if_nz r13.z
    mul r15.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r17.xz, r15.yyyy
    mov r17.y, -r17.z
    mad r15.yzw, r9.xxyx, r17.xxyz, r15.zzwz
    add r17.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r15.yzw, r15.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r15.yzw, r17.xxyz, r15.yyzw
    mul r17.xy, r15.wzww, cb2[32].xxxx
    round_ni r17.xy, r17.xyxx
    mul r13.w, r17.y, cb2[27].x
    mad r13.w, r13.w, cb2[32].x, r17.x
    ftou r13.w, r13.w
    iadd r13.w, r13.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r13.w, l(0), t23.xxxx
    and r17.x, r14.w, l(0x40000000)
    ishl r17.y, r14.w, l(2)
    if_z r17.x
      and r17.x, r14.w, l(0x01ffffff)
      iadd r18.x, r13.w, r17.x
      ushr r13.w, r14.w, l(25)
      utof r13.w, r13.w
      mul r15.yzw, r13.wwww, r15.yyzw
      frc r15.yzw, r15.yyzw
      mul r15.yzw, r15.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r15.yzw, r15.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      ushr r17.xz, r15.wwzw, l(6, 0, 6, 0)
      and r13.w, r18.z, l(0xc0000000)
      iadd r14.w, r18.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t23.xxxx
      movc r14.w, r17.z, r18.z, r14.w
      ushr r17.z, r14.w, l(13)
      movc r14.w, r17.x, r17.z, r14.w
      and r14.w, r14.w, l(8191)
      iadd r19.x, r14.w, r18.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      mov r18.y, l(0)
      mov r19.y, l(1)
      movc r17.xzw, r13.wwww, r18.xxyz, r19.xxyz
      movc r19.yz, r13.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r20.xy, r15.wzww, r19.yyyy
      and r20.xy, r20.xyxx, l(1, 1, 0, 0)
      and r14.w, r17.w, l(0xc0000000)
      iadd r18.w, r17.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.w, l(0), t23.xxxx
      movc r18.w, r20.y, r17.w, r18.w
      ushr r19.y, r18.w, l(13)
      movc r18.w, r20.x, r19.y, r18.w
      and r18.w, r18.w, l(8191)
      iadd r19.x, r17.x, r18.w
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
      movc r17.xzw, r14.wwww, r17.xxzw, r19.xxzw
      movc r17.xzw, r13.wwww, r18.xxyz, r17.xxzw
      and r13.w, r17.w, l(0xc0000000)
      if_z r13.w
        iadd r13.w, -r17.z, l(6)
        ushr r18.xy, r15.wzww, r13.wwww
        or r13.w, r17.w, l(0x40000000)
        bfi r14.w, l(1), l(1), r18.y, l(0)
        bfi r14.w, l(1), l(0), r18.x, r14.w
        imul null, r14.w, r14.w, l(10)
        ushr r13.w, r13.w, r14.w
        and r13.w, r13.w, l(1023)
        iadd r18.x, r13.w, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.x, l(0), t23.xxxx
        iadd r18.yz, r17.zzzz, l(0, 1, 2, 0)
        iadd r13.w, -r18.y, l(6)
        ushr r19.xy, r15.wzww, r13.wwww
        and r13.w, r18.w, l(0xc0000000)
        or r14.w, r18.w, l(0x40000000)
        bfi r17.z, l(1), l(1), r19.y, l(0)
        bfi r17.z, l(1), l(0), r19.x, r17.z
        imul null, r17.z, r17.z, l(10)
        ushr r14.w, r14.w, r17.z
        and r14.w, r14.w, l(1023)
        iadd r19.x, r14.w, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
        mov r19.y, r18.z
        movc r19.xyz, r13.wwww, r18.xywx, r19.xyzx
        iadd r14.w, -r19.y, l(6)
        ushr r18.yz, r15.wwzw, r14.wwww
        and r14.w, r19.z, l(0xc0000000)
        or r17.z, r19.z, l(0x40000000)
        bfi r18.z, l(1), l(1), r18.z, l(0)
        bfi r18.y, l(1), l(0), r18.y, r18.z
        imul null, r18.y, r18.y, l(10)
        ushr r17.z, r17.z, r18.y
        and r17.z, r17.z, l(1023)
        iadd r20.x, r17.z, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.y, r20.x, l(0), t23.xxxx
        movc r18.yz, r14.wwww, r19.xxzx, r20.xxyx
        movc r17.xw, r13.wwww, r18.xxxw, r18.yyyz
      endif 
      and r13.w, r17.w, l(0xc0000000)
      if_z r13.w
        ubfe r14.w, l(14), l(15), r17.w
        utof r14.w, r14.w
        mul r14.w, r14.w, cb2[27].w
        mul r14.w, r14.w, l(0.00006104)
        and r18.xy, r17.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r17.z, r18.x
        mul r17.z, r17.z, cb2[27].w
        mul r17.z, r17.z, l(0.00003052)
        and r18.x, r15.z, l(3)
        iadd r18.x, r17.x, r18.x
        iadd r18.x, r18.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.x, r18.x, l(0), t23.xxxx
        bfi r19.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r15.yzwy, l(0, 0, 0, 0)
        ushr r15.y, r18.x, r19.x
        and r15.y, r15.y, l(255)
        utof r15.y, r15.y
        mul r15.y, r17.z, r15.y
        mad r15.y, r15.y, l(0.00392157), r14.w
        iadd r15.z, r19.y, l(1)
        ubfe r15.w, l(1), l(1), r15.w
        iadd r15.z, r15.w, r15.z
        iadd r15.z, r15.z, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.z, r15.z, l(0), t23.xxxx
        ushr r15.z, r15.z, r19.z
        and r15.z, r15.z, l(0x0000ffff)
        utof r15.z, r15.z
        mul r15.z, r17.z, r15.z
        mad r14.w, r15.z, l(0.00001526), r14.w
        movc r17.y, r18.y, r15.y, r14.w
      else 
        and r14.w, r17.w, l(0x80000000)
        iadd r15.y, r17.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.y, r15.y, l(0), t23.xxxx
        movc r14.w, r14.w, r15.y, l(0)
        ishl r15.y, r17.w, l(2)
        ushr r15.z, r14.w, l(16)
        f16tof32 r15.z, r15.z
        and r14.w, r14.w, l(0x0000ffff)
        f16tof32 r14.w, r14.w
        mad r15.y, r9.x, r15.z, r15.y
        mad r14.w, r9.y, r14.w, r15.y
        movc r17.y, r13.w, r14.w, r17.y
      endif 
    endif 
    mad r9.w, -cb2[27].z, l(2.000000), r9.w
    lt r9.w, r17.y, r9.w
    movc r7.w, r9.w, l(0), l(1.000000)
  endif 
  if_z r13.z
    if_z cb2[58].y
      ftou r9.w, r8.w
      add r13.zw, r9.xxxy, -cb2[r9.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r9.w + 20].zzzz
      mad r17.xy, r13.zwzz, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r9.w, cb2[26].y
      add r17.z, r8.w, r9.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r17.xyzx, t13.xxxx, s13, r6.w
      sample_l_indexable(texture2darray)(float,float,float,float) r13.z, r17.xyzx, t31.yzxw, s0, l(0.000000)
      add r9.w, r9.w, r13.z
      add_sat r9.w, r9.w, l(-1.000000)
      mul r13.z, r9.w, r9.w
      mul r7.w, r9.w, r13.z
    endif 
    if_nz cb2[58].y
      mov r17.x, -r13.x
      ftou r9.w, r8.w
      add r8.w, r8.w, l(1.000000)
      min r8.w, r8.w, l(2.000000)
      ftou r8.w, r8.w
      add r12.w, -r12.w, l(1.000000)
      mul r12.w, r12.w, l(28.000000)
      ftou r12.w, r12.w
      add r13.zw, r9.xxxy, -cb2[r9.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r9.w + 20].zzzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r9.xy, r9.xyxx, -cb2[r8.w + 20].xyxx
      mul r9.xy, r9.xyxx, cb2[r8.w + 20].zzzz
      mad r9.xy, r9.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mov r17.y, r14.x
      mov r17.z, r13.x
      mov r14.w, l(0)
      mov r15.y, l(0)
      loop 
        uge r15.z, r15.y, l(8)
        breakc_nz r15.z
        ult r15.z, r12.w, r15.y
        movc r18.xy, r15.zzzz, r9.xyxx, r13.zwzz
        movc r15.w, r15.z, cb2[r8.w + 20].w, cb2[r9.w + 20].w
        movc r15.z, r15.z, r8.w, r9.w
        dp2 r19.x, icb[r15.y + 0].yxyy, r17.xyxx
        dp2 r19.y, icb[r15.y + 0].yxyy, r17.yzyy
        mad r18.xy, r19.xyxx, r15.wwww, r18.xyxx
        iadd r15.z, r15.z, cb2[26].y
        utof r18.z, r15.z
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.z, r18.xyzx, t13.xxxx, s13, r6.w
        sample_l_indexable(texture2darray)(float,float,float,float) r15.w, r18.xyzx, t31.yzwx, s0, l(0.000000)
        add r15.z, r15.w, r15.z
        add_sat r15.z, r15.z, l(-1.000000)
        mad r14.w, r15.z, l(0.125000), r14.w
        iadd r15.y, r15.y, l(1)
      endloop 
      mul r6.w, r14.w, r14.w
      mul r7.w, r14.w, r6.w
    endif 
  endif 
endif 
add r6.w, -r2.y, l(1.000000)
mul r8.w, r6.w, l(5.000000)
mad r9.x, r6.w, l(5.000000), l(-2.500000)
mul r9.x, r9.x, l(0.400000)
max r9.x, r9.x, l(0.000000)
mad r9.yw, -r6.wwww, l(0.000000, 10.000000, 0.000000, 5.000000), l(0.000000, 6.857410, 0.000000, 7.085000)
exp r9.y, r9.y
mul r9.y, r2.x, r9.y
mul r12.w, r6.w, r8.w
mad r9.w, -r12.w, l(2.015905), r9.w
exp r9.w, r9.w
mul r9.w, r2.x, r9.w
mul r9.xyw, r9.xyxw, l(100.000000, 9.136810, 0.000000, 9.708090)
max r9.y, r9.w, r9.y
max r9.y, r9.y, l(1.268160)
iadd r9.w, cb2[0].y, -cb2[58].x
ushr r13.zw, r0.yyyx, l(0, 0, 24, 24)
uge r0.y, r13.z, r9.w
ult r12.w, r13.z, cb2[0].y
and r0.y, r0.y, r12.w
if_nz r0.y
  imul null, r0.y, r13.z, l(14)
  add r15.yzw, r10.xxyz, -cb10[r0.y + 0].xxyz
  and r12.w, l(0x0000ffff), cb10[r0.y + 7].z
  ubfe r14.w, l(6), l(25), cb10[r0.y + 7].z
  imul null, r17.x, r12.w, l(6)
  dp3 r17.y, cb11[r17.x + 0].xyzx, r15.yzwy
  add_sat r17.y, r17.y, cb11[r17.x + 0].w
  dp3 r17.z, cb11[r17.x + 1].xyzx, r15.yzwy
  add_sat r17.z, r17.z, cb11[r17.x + 1].w
  mul r17.y, r17.z, r17.y
  dp3 r17.z, cb11[r17.x + 2].xyzx, r15.yzwy
  add_sat r17.z, r17.z, cb11[r17.x + 2].w
  mul r17.y, r17.z, r17.y
  dp3 r17.z, cb11[r17.x + 3].xyzx, r15.yzwy
  add_sat r17.z, r17.z, cb11[r17.x + 3].w
  mul r17.y, r17.z, r17.y
  dp3 r17.z, cb11[r17.x + 4].xyzx, r15.yzwy
  add_sat r17.z, r17.z, cb11[r17.x + 4].w
  mul r17.y, r17.z, r17.y
  dp3 r17.z, cb11[r17.x + 5].xyzx, r15.yzwy
  add_sat r17.x, r17.z, cb11[r17.x + 5].w
  mul r17.x, r17.x, r17.y
  and r17.w, l(1), cb10[r0.y + 6].x
  mov r17.yz, l(0,0,1.000000,0)
  movc r17.xy, r17.wwww, r17.xyxx, r17.zxzz
  mov r18.x, l(1.000000)
  mov r17.z, cb10[r0.y + 6].x
  mov r19.xy, r17.xyxx
  mov r17.w, l(1)
  loop 
    ige r18.z, r17.w, r14.w
    breakc_nz r18.z
    iadd r18.z, r12.w, r17.w
    imul null, r18.z, r18.z, l(6)
    dp3 r18.w, cb11[r18.z + 0].xyzx, r15.yzwy
    add_sat r18.w, r18.w, cb11[r18.z + 0].w
    mul r18.w, r18.w, r19.x
    dp3 r19.z, cb11[r18.z + 1].xyzx, r15.yzwy
    add_sat r19.z, r19.z, cb11[r18.z + 1].w
    mul r18.w, r18.w, r19.z
    dp3 r19.z, cb11[r18.z + 2].xyzx, r15.yzwy
    add_sat r19.z, r19.z, cb11[r18.z + 2].w
    mul r18.w, r18.w, r19.z
    dp3 r19.z, cb11[r18.z + 3].xyzx, r15.yzwy
    add_sat r19.z, r19.z, cb11[r18.z + 3].w
    mul r18.w, r18.w, r19.z
    dp3 r19.z, cb11[r18.z + 4].xyzx, r15.yzwy
    add_sat r19.z, r19.z, cb11[r18.z + 4].w
    mul r18.w, r18.w, r19.z
    dp3 r19.z, cb11[r18.z + 5].xyzx, r15.yzwy
    add_sat r18.z, r19.z, cb11[r18.z + 5].w
    mul r19.x, r18.z, r18.w
    ushr r19.z, r17.z, l(2)
    ubfe r19.w, l(1), l(2), r17.z
    and r20.x, r19.z, l(2)
    max r20.y, r19.x, r19.y
    mad r18.z, -r18.w, r18.z, l(1.000000)
    mul r18.z, r18.z, r19.y
    movc r18.y, r20.x, r18.z, r20.y
    movc r19.xy, r19.wwww, r19.xyxx, r18.xyxx
    iadd r17.w, r17.w, l(1)
    mov r17.z, r19.z
  endloop 
  mov_sat r19.y, r19.y
  mul r12.w, r19.y, cb10[r0.y + 6].y
  lt r14.w, l(0.000000), r12.w
  if_nz r14.w
    mul r14.w, r12.w, cb10[r0.y + 7].y
    mov r17.x, cb10[r0.y + 7].w
    mov r17.yz, cb10[r0.y + 8].xxyx
    dp3 r17.w, r16.xyzx, r17.xyzx
    dp3 r17.x, r15.yzwy, r17.xyzx
    add r17.x, r17.x, -cb10[r0.y + 8].z
    ge r17.y, r17.x, l(0.000000)
    max r17.x, r9.x, |r17.x|
    movc r17.x, r17.y, r17.x, -r17.x
    max r17.y, -r17.w, l(0.00000010)
    div r17.x, r17.x, r17.y
    min r17.x, |r17.x|, l(131072.000000)
    mov r18.x, cb10[r0.y + 8].w
    mov r18.yz, cb10[r0.y + 9].xxyx
    dp3 r17.y, r16.xyzx, r18.xyzx
    dp3 r17.z, r15.yzwy, r18.xyzx
    add r17.z, r17.z, -cb10[r0.y + 9].z
    ge r17.w, r17.z, l(0.000000)
    max r17.z, r9.x, |r17.z|
    movc r17.z, r17.w, r17.z, -r17.z
    max r17.y, -r17.y, l(0.00000010)
    div r17.y, r17.z, r17.y
    min r17.x, |r17.y|, r17.x
    mov r18.x, cb10[r0.y + 9].w
    mov r18.yz, cb10[r0.y + 10].xxyx
    dp3 r17.y, r16.xyzx, r18.xyzx
    dp3 r17.z, r15.yzwy, r18.xyzx
    add r17.z, r17.z, -cb10[r0.y + 10].z
    ge r17.w, r17.z, l(0.000000)
    max r17.z, r9.x, |r17.z|
    movc r17.z, r17.w, r17.z, -r17.z
    max r17.y, -r17.y, l(0.00000010)
    div r17.y, r17.z, r17.y
    min r17.x, |r17.y|, r17.x
    mov r18.x, cb10[r0.y + 10].w
    mov r18.yz, cb10[r0.y + 11].xxyx
    dp3 r17.y, r16.xyzx, r18.xyzx
    dp3 r17.z, r15.yzwy, r18.xyzx
    add r17.z, r17.z, -cb10[r0.y + 11].z
    ge r17.w, r17.z, l(0.000000)
    max r17.z, r9.x, |r17.z|
    movc r17.z, r17.w, r17.z, -r17.z
    max r17.y, -r17.y, l(0.00000010)
    div r17.y, r17.z, r17.y
    min r17.x, |r17.y|, r17.x
    mov r18.x, cb10[r0.y + 11].w
    mov r18.yz, cb10[r0.y + 12].xxyx
    dp3 r17.y, r16.xyzx, r18.xyzx
    dp3 r17.z, r15.yzwy, r18.xyzx
    add r17.z, r17.z, -cb10[r0.y + 12].z
    ge r17.w, r17.z, l(0.000000)
    max r17.z, r9.x, |r17.z|
    movc r17.z, r17.w, r17.z, -r17.z
    max r17.y, -r17.y, l(0.00000010)
    div r17.y, r17.z, r17.y
    min r17.x, |r17.y|, r17.x
    mov r18.x, cb10[r0.y + 12].w
    mov r18.yz, cb10[r0.y + 13].xxyx
    dp3 r17.y, r16.xyzx, r18.xyzx
    dp3 r17.z, r15.yzwy, r18.xyzx
    add r17.z, r17.z, -cb10[r0.y + 13].z
    ge r17.w, r17.z, l(0.000000)
    max r17.z, r9.x, |r17.z|
    movc r17.z, r17.w, r17.z, -r17.z
    max r17.y, -r17.y, l(0.00000010)
    div r17.y, r17.z, r17.y
    min r17.x, |r17.y|, r17.x
    add r18.x, r15.y, cb10[r0.y + 3].w
    add r18.yz, r15.zzwz, cb10[r0.y + 4].xxyx
    mad r17.yzw, r16.xxyz, r17.xxxx, r18.xxyz
    dp3 r18.x, r17.yzwy, r17.yzwy
    sqrt r18.x, r18.x
    div r17.x, r17.x, r18.x
    add r17.x, r17.x, r17.x
    sqrt r17.x, r17.x
    mad r17.x, r6.w, l(5.000000), r17.x
    add r17.x, r17.x, l(-0.844800)
    mov r18.x, cb10[r0.y + 0].w
    mov r18.y, cb10[r0.y + 1].z
    mov r18.z, cb10[r0.y + 2].y
    dp3 r19.x, r17.yzwy, r18.xyzx
    mov r20.xy, cb10[r0.y + 1].xwxx
    mov r20.z, cb10[r0.y + 2].z
    dp3 r19.y, r17.yzwy, r20.xyzx
    mov r21.x, cb10[r0.y + 1].y
    mov r21.yz, cb10[r0.y + 2].xxwx
    dp3 r19.z, r17.yzwy, r21.xyzx
    ubfe r17.y, l(9), l(16), cb10[r0.y + 7].z
    utof r19.w, r17.y
    sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r19.xyzw, t8.xyzw, s2, r17.x
    dp3 r22.x, r15.yzwy, r18.xyzx
    dp3 r22.y, r15.yzwy, r20.xyzx
    dp3 r22.z, r15.yzwy, r21.xyzx
    mad_sat r15.yzw, r22.xxyz, cb10[r0.y + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    mul r22.xy, r15.yzyy, cb10[r0.y + 4].zwzz
    mul r22.z, r15.w, cb10[r0.y + 5].x
    add r15.yzw, r22.xxyz, cb10[r0.y + 5].yyzw
    dp3 r19.x, r11.xyzx, r18.xyzx
    dp3 r19.y, r11.xyzx, r20.xyzx
    dp3 r19.z, r11.xyzx, r21.xyzx
    lt r18.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r19.xyzx
    movc r20.z, r18.x, l(0), l(0.500000)
    mov r20.xy, l(0,0,0,0)
    add r20.xyz, r15.yzwy, r20.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
    mul r21.xyz, r19.xyzx, r19.xyzx
    mul r21.xyz, r14.wwww, r21.xyzx
    movc r22.z, r18.y, l(0), l(0.500000)
    mov r22.xy, l(0,0,0,0)
    add r18.xyw, r15.yzyw, r22.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyw, r18.xywx, t18.xywz, s4, l(0.000000)
    mul r18.xyw, r21.yyyy, r18.xyxw
    mad r18.xyw, r20.xyxz, r21.xxxx, r18.xyxw
    movc r20.z, r18.z, l(0), l(0.500000)
    mov r20.xy, l(0,0,0,0)
    add r15.yzw, r15.yyzw, r20.xxyz
    sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t19.wxyz, s4, l(0.000000)
    mad r15.yzw, r15.yyzw, r21.zzzz, r18.xxyw
    sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r19.xyzw, t8.xyzw, s2, l(6.000000)
    mul r15.yzw, r15.yyzw, r18.xxyz
    dp3 r0.y, r15.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r17.w, r0.y, r9.y
    mul r17.xyz, r14.wwww, r17.xyzx
    dp3 r14.w, r17.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r0.y, r9.y, r0.y, r14.w
    div r0.y, r17.w, r0.y
    mul r17.xyz, r0.yyyy, r17.xyzx
  else 
    mov r17.xyz, l(0,0,0,0)
    mov r12.w, l(0)
    mov r15.yzw, l(0,0,0,0)
  endif 
else 
  mov r17.xyz, l(0,0,0,0)
  mov r12.w, l(0)
  mov r15.yzw, l(0,0,0,0)
endif 
lt r0.y, r12.w, l(1.000000)
if_nz r0.y
  ult r0.y, r13.z, r9.w
  if_nz r0.y
    imul null, r0.y, r13.z, l(14)
    add r18.xyz, r10.xyzx, -cb10[r0.y + 0].xyzx
    and r9.w, l(0x0000ffff), cb10[r0.y + 7].z
    ubfe r13.z, l(6), l(25), cb10[r0.y + 7].z
    imul null, r14.w, r9.w, l(6)
    dp3 r17.w, cb11[r14.w + 0].xyzx, r18.xyzx
    add_sat r17.w, r17.w, cb11[r14.w + 0].w
    dp3 r18.w, cb11[r14.w + 1].xyzx, r18.xyzx
    add_sat r18.w, r18.w, cb11[r14.w + 1].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r14.w + 2].xyzx, r18.xyzx
    add_sat r18.w, r18.w, cb11[r14.w + 2].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r14.w + 3].xyzx, r18.xyzx
    add_sat r18.w, r18.w, cb11[r14.w + 3].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r14.w + 4].xyzx, r18.xyzx
    add_sat r18.w, r18.w, cb11[r14.w + 4].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r14.w + 5].xyzx, r18.xyzx
    add_sat r14.w, r18.w, cb11[r14.w + 5].w
    mul r19.x, r14.w, r17.w
    and r14.w, l(1), cb10[r0.y + 6].x
    mov r19.yz, l(0,0,1.000000,0)
    movc r19.xy, r14.wwww, r19.xyxx, r19.zxzz
    mov r20.x, l(1.000000)
    mov r14.w, cb10[r0.y + 6].x
    mov r21.xy, r19.xyxx
    mov r17.w, l(1)
    loop 
      ige r18.w, r17.w, r13.z
      breakc_nz r18.w
      iadd r18.w, r9.w, r17.w
      imul null, r18.w, r18.w, l(6)
      dp3 r19.z, cb11[r18.w + 0].xyzx, r18.xyzx
      add_sat r19.z, r19.z, cb11[r18.w + 0].w
      mul r19.z, r19.z, r21.x
      dp3 r19.w, cb11[r18.w + 1].xyzx, r18.xyzx
      add_sat r19.w, r19.w, cb11[r18.w + 1].w
      mul r19.z, r19.w, r19.z
      dp3 r19.w, cb11[r18.w + 2].xyzx, r18.xyzx
      add_sat r19.w, r19.w, cb11[r18.w + 2].w
      mul r19.z, r19.w, r19.z
      dp3 r19.w, cb11[r18.w + 3].xyzx, r18.xyzx
      add_sat r19.w, r19.w, cb11[r18.w + 3].w
      mul r19.z, r19.w, r19.z
      dp3 r19.w, cb11[r18.w + 4].xyzx, r18.xyzx
      add_sat r19.w, r19.w, cb11[r18.w + 4].w
      mul r19.z, r19.w, r19.z
      dp3 r19.w, cb11[r18.w + 5].xyzx, r18.xyzx
      add_sat r18.w, r19.w, cb11[r18.w + 5].w
      mul r21.x, r18.w, r19.z
      ushr r19.w, r14.w, l(2)
      ubfe r20.z, l(1), l(2), r14.w
      and r20.w, r19.w, l(2)
      max r21.z, r21.x, r21.y
      mad r18.w, -r19.z, r18.w, l(1.000000)
      mul r18.w, r18.w, r21.y
      movc r20.y, r20.w, r18.w, r21.z
      movc r21.xy, r20.zzzz, r21.xyxx, r20.xyxx
      iadd r17.w, r17.w, l(1)
      mov r14.w, r19.w
    endloop 
    add_sat r9.w, -r12.w, r21.y
    mul r13.z, r9.w, cb10[r0.y + 6].y
    lt r14.w, l(0.000000), r13.z
    if_nz r14.w
      mad r12.w, r9.w, cb10[r0.y + 6].y, r12.w
      mul r9.w, r13.z, cb10[r0.y + 7].y
      mov r19.x, cb10[r0.y + 7].w
      mov r19.yz, cb10[r0.y + 8].xxyx
      dp3 r13.z, r16.xyzx, r19.xyzx
      dp3 r14.w, r18.xyzx, r19.xyzx
      add r14.w, r14.w, -cb10[r0.y + 8].z
      ge r17.w, r14.w, l(0.000000)
      max r14.w, r9.x, |r14.w|
      movc r14.w, r17.w, r14.w, -r14.w
      max r13.z, -r13.z, l(0.00000010)
      div r13.z, r14.w, r13.z
      min r13.z, |r13.z|, l(131072.000000)
      mov r19.x, cb10[r0.y + 8].w
      mov r19.yz, cb10[r0.y + 9].xxyx
      dp3 r14.w, r16.xyzx, r19.xyzx
      dp3 r17.w, r18.xyzx, r19.xyzx
      add r17.w, r17.w, -cb10[r0.y + 9].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r9.x, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r14.w, -r14.w, l(0.00000010)
      div r14.w, r17.w, r14.w
      min r13.z, r13.z, |r14.w|
      mov r19.x, cb10[r0.y + 9].w
      mov r19.yz, cb10[r0.y + 10].xxyx
      dp3 r14.w, r16.xyzx, r19.xyzx
      dp3 r17.w, r18.xyzx, r19.xyzx
      add r17.w, r17.w, -cb10[r0.y + 10].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r9.x, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r14.w, -r14.w, l(0.00000010)
      div r14.w, r17.w, r14.w
      min r13.z, r13.z, |r14.w|
      mov r19.x, cb10[r0.y + 10].w
      mov r19.yz, cb10[r0.y + 11].xxyx
      dp3 r14.w, r16.xyzx, r19.xyzx
      dp3 r17.w, r18.xyzx, r19.xyzx
      add r17.w, r17.w, -cb10[r0.y + 11].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r9.x, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r14.w, -r14.w, l(0.00000010)
      div r14.w, r17.w, r14.w
      min r13.z, r13.z, |r14.w|
      mov r19.x, cb10[r0.y + 11].w
      mov r19.yz, cb10[r0.y + 12].xxyx
      dp3 r14.w, r16.xyzx, r19.xyzx
      dp3 r17.w, r18.xyzx, r19.xyzx
      add r17.w, r17.w, -cb10[r0.y + 12].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r9.x, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r14.w, -r14.w, l(0.00000010)
      div r14.w, r17.w, r14.w
      min r13.z, r13.z, |r14.w|
      mov r19.x, cb10[r0.y + 12].w
      mov r19.yz, cb10[r0.y + 13].xxyx
      dp3 r14.w, r16.xyzx, r19.xyzx
      dp3 r17.w, r18.xyzx, r19.xyzx
      add r17.w, r17.w, -cb10[r0.y + 13].z
      ge r18.w, r17.w, l(0.000000)
      max r9.x, r9.x, |r17.w|
      movc r9.x, r18.w, r9.x, -r9.x
      max r14.w, -r14.w, l(0.00000010)
      div r9.x, r9.x, r14.w
      min r9.x, |r9.x|, r13.z
      add r19.x, r18.x, cb10[r0.y + 3].w
      add r19.yz, r18.yyzy, cb10[r0.y + 4].xxyx
      mad r19.xyz, r16.xyzx, r9.xxxx, r19.xyzx
      dp3 r13.z, r19.xyzx, r19.xyzx
      sqrt r13.z, r13.z
      div r9.x, r9.x, r13.z
      add r9.x, r9.x, r9.x
      sqrt r9.x, r9.x
      mad r6.w, r6.w, l(5.000000), r9.x
      add r6.w, r6.w, l(-0.844800)
      mov r20.x, cb10[r0.y + 0].w
      mov r20.y, cb10[r0.y + 1].z
      mov r20.z, cb10[r0.y + 2].y
      dp3 r21.x, r19.xyzx, r20.xyzx
      mov r22.xy, cb10[r0.y + 1].xwxx
      mov r22.z, cb10[r0.y + 2].z
      dp3 r21.y, r19.xyzx, r22.xyzx
      mov r23.x, cb10[r0.y + 1].y
      mov r23.yz, cb10[r0.y + 2].xxwx
      dp3 r21.z, r19.xyzx, r23.xyzx
      ubfe r9.x, l(9), l(16), cb10[r0.y + 7].z
      utof r21.w, r9.x
      sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r21.xyzw, t8.xyzw, s2, r6.w
      dp3 r24.x, r18.xyzx, r20.xyzx
      dp3 r24.y, r18.xyzx, r22.xyzx
      dp3 r24.z, r18.xyzx, r23.xyzx
      mad_sat r18.xyz, r24.xyzx, cb10[r0.y + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      mul r24.xy, r18.xyxx, cb10[r0.y + 4].zwzz
      mul r24.z, r18.z, cb10[r0.y + 5].x
      add r18.xyz, r24.xyzx, cb10[r0.y + 5].yzwy
      dp3 r21.x, r11.xyzx, r20.xyzx
      dp3 r21.y, r11.xyzx, r22.xyzx
      dp3 r21.z, r11.xyzx, r23.xyzx
      lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r21.xyzx
      movc r22.z, r20.x, l(0), l(0.500000)
      mov r22.xy, l(0,0,0,0)
      add r22.xyz, r18.xyzx, r22.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t17.xyzw, s4, l(0.000000)
      mul r23.xyz, r21.xyzx, r21.xyzx
      mul r23.xyz, r9.wwww, r23.xyzx
      movc r24.z, r20.y, l(0), l(0.500000)
      mov r24.xy, l(0,0,0,0)
      add r20.xyw, r18.xyxz, r24.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r20.xyw, r20.xywx, t18.xywz, s4, l(0.000000)
      mul r20.xyw, r23.yyyy, r20.xyxw
      mad r20.xyw, r22.xyxz, r23.xxxx, r20.xyxw
      movc r22.z, r20.z, l(0), l(0.500000)
      mov r22.xy, l(0,0,0,0)
      add r18.xyz, r18.xyzx, r22.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t19.xyzw, s4, l(0.000000)
      mad r18.xyz, r18.xyzx, r23.zzzz, r20.xywx
      sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r21.xyzw, t8.xyzw, s2, l(6.000000)
      mul r21.xyz, r18.xyzx, r20.xyzx
      dp3 r0.y, r21.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r15.yzw, r18.xxyz, r20.xxyz, r15.yyzw
      mul r6.w, r0.y, r9.y
      mul r18.xyz, r9.wwww, r19.xyzx
      dp3 r9.x, r18.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r0.y, r9.y, r0.y, r9.x
      div r0.y, r6.w, r0.y
      mad r17.xyz, r18.xyzx, r0.yyyy, r17.xyzx
    endif 
  endif 
endif 
max r0.y, r12.w, l(1.000000)
rcp r0.y, r0.y
mov_sat r12.w, r12.w
mul r9.xyw, r0.yyyy, r15.yzyw
mul r17.xyz, r0.yyyy, r17.xyzx
lt r6.w, r12.w, l(0.990000)
if_nz r6.w
  add r6.w, -r12.w, l(1.000000)
  mul r12.w, r6.w, cb2[19].x
  add r18.xyz, r10.xyzx, -cb2[35].xyzx
  mul r19.x, r18.x, cb2[35].w
  mul r19.yz, r18.yyzy, cb2[36].xxyx
  add_sat r18.xyz, r19.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r19.xy, r18.xyxx, cb2[36].zwzz
  mul r19.z, r18.z, cb2[37].x
  add r18.xyz, r19.xyzx, cb2[37].yzwy
  lt r19.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r19.xyz, r19.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r19.w, l(0)
  add r20.xyz, r18.xyzx, r19.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
  mul r21.xyz, r11.xyzx, r11.xyzx
  mul r21.xyz, r12.wwww, r21.xyzx
  add r22.xyz, r18.xyzx, r19.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t18.xyzw, s4, l(0.000000)
  mul r22.xyz, r21.yyyy, r22.xyzx
  mad r20.xyz, r20.xyzx, r21.xxxx, r22.xyzx
  add r18.xyz, r18.xyzx, r19.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t19.xyzw, s4, l(0.000000)
  mad r18.xyz, r18.xyzx, r21.zzzz, r20.xyzx
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r18.xyz, r18.xyzx, r19.xyzx
  dp3 r11.w, r18.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r9.xyw, r15.yzyw, r0.yyyy, r18.xyxz
  mov r16.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r16.xyzw, t8.wxyz, s2, r8.w
  mad r0.y, cb2[19].x, r6.w, -r11.w
  mad r0.y, r2.y, r0.y, r11.w
  mad r17.xyz, r15.yzwy, r0.yyyy, r17.xyzx
endif 
mad r0.y, r4.z, r1.w, r2.x
log r0.y, |r0.y|
mul r0.y, r0.y, r1.z
exp r0.y, r0.y
mad r0.y, r4.z, r1.w, r0.y
add_sat r0.y, r0.y, l(-1.000000)
mul r18.xyz, r2.zzzz, r9.xywx
mad r2.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t5.zxyw, s2, l(0.000000)
mul r9.xyw, r0.yyyy, r17.xyxz
mul r17.xyz, r2.yyyy, r9.ywxy
mul r9.xyw, r2.zzzz, r9.xyxw
sqrt r0.y, r1.z
mad r0.y, r0.y, l(0.500000), l(0.500000)
mul r0.y, r0.y, r0.y
mul r1.w, r0.y, l(0.500000)
mad r0.y, -r0.y, l(0.500000), l(1.000000)
mad r2.y, r2.x, r0.y, r1.w
mul r0.y, r0.y, r2.y
mul r1.w, r1.w, r2.y
lt r2.y, l(0.000000), r5.w
if_nz r2.y
  lt r2.y, l(0.000000), r7.w
  if_nz r2.y
    mul r2.y, r0.w, cb2[18].w
    mul r2.y, r5.w, r2.y
    if_nz cb2[23].x
      add r19.xyz, r10.xyzx, cb1[24].xyzx
      mov r19.w, l(1.000000)
      dp4 r2.z, cb2[24].xyzw, r19.xyzw
      dp4 r4.z, cb2[25].xyzw, r19.xyzw
      frc r19.x, r2.z
      frc r19.y, r4.z
      iadd r2.z, l(-1), cb2[23].x
      utof r19.z, r2.z
      sample_l_indexable(texture2darray)(float,float,float,float) r15.yzw, r19.xyzx, t20.wxyz, s2, l(0.000000)
      add r15.yzw, r15.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
      mad r15.yzw, cb2[23].yyyy, r15.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      mul r15.yzw, r15.yyzw, cb2[18].xxyz
    else 
      mov r15.yzw, cb2[18].xxyz
    endif 
    ushr r2.z, cb2[53].x, l(16)
    ult r4.z, l(0), r2.z
    and r4.z, r9.z, r4.z
    if_nz r4.z
      iadd r2.z, r2.z, cb2[0].x
      imad r2.z, r2.z, l(15), l(-15)
      mad r4.z, |r2.w|, l(-0.200000), l(0.400000)
      mad r19.xyz, r11.xyzx, r4.zzzz, r10.xyzx
      mov r20.xyz, cb9[r2.z + 4].yzwy
      mov r20.w, cb9[r2.z + 5].x
      mov r19.w, l(1.000000)
      dp4 r20.x, r20.xyzw, r19.xyzw
      mov r21.xyz, cb9[r2.z + 5].yzwy
      mov r21.w, cb9[r2.z + 6].x
      dp4 r20.y, r21.xyzw, r19.xyzw
      mad r20.xy, r20.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r21.x, r20.x, cb9[r2.z + 9].w
      add r21.y, r20.y, cb9[r2.z + 10].x
      mul r20.xy, r21.xyxx, cb9[r2.z + 9].yzyy
      div r20.zw, cb9[r2.z + 3].yyyy, cb9[r2.z + 8].yyyw
      add r21.xy, -r20.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r21.xy, r20.xyxx, r21.xyxx
      ge r20.zw, r20.zzzw, r20.xxxy
      or r20.zw, r20.zzzw, r21.xxxy
      or r4.z, r20.w, r20.z
      if_z r4.z
        mov r21.xyz, cb9[r2.z + 6].yzwy
        mov r21.w, cb9[r2.z + 7].x
        dp4 r4.z, r21.xyzw, r19.xyzw
        mov_sat r20.xy, r20.xyxx
        mad r19.x, r20.x, cb9[r2.z + 8].y, cb9[r2.z + 8].z
        mad r19.y, r20.y, cb9[r2.z + 8].w, cb9[r2.z + 9].x
        add r4.z, r4.z, cb9[r2.z + 10].y
        div r4.z, r4.z, cb9[r2.z + 10].z
        max r4.z, r4.z, l(0.00006104)
        and r6.w, l(0x0000ffff), cb9[r2.z + 1].w
        if_nz cb2[58].y
          mov r20.x, -r13.x
          utof r21.z, r6.w
          mov r20.y, r14.x
          mov r20.z, r13.x
          mov r8.w, l(0)
          mov r11.w, l(0)
          loop 
            ige r12.w, r11.w, l(8)
            breakc_nz r12.w
            dp2 r22.x, icb[r11.w + 0].yxyy, r20.xyxx
            dp2 r22.y, icb[r11.w + 0].yxyy, r20.yzyy
            mad r21.xy, r22.xyxx, cb9[r2.z + 3].yyyy, r19.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r21.xyzx, t9.xxxx, s13, r4.z
            mad r8.w, r12.w, l(0.125000), r8.w
            iadd r11.w, r11.w, l(1)
          endloop 
        else 
          utof r19.z, r6.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r19.xyzx, t9.xxxx, s13, r4.z
        endif 
        mul r2.z, r8.w, r8.w
        mul r2.z, r8.w, r2.z
      else 
        mov r2.z, l(1.000000)
      endif 
      mul r7.w, r2.z, r7.w
    else 
      and r2.z, cb2[53].x, l(0x0000ffff)
      ult r4.z, l(0), r2.z
      not r6.w, r9.z
      and r4.z, r4.z, r6.w
      if_nz r4.z
        iadd r2.z, r2.z, cb2[0].x
        imad r2.z, r2.z, l(15), l(-15)
        mad r4.z, |r2.w|, l(-0.200000), l(0.400000)
        mad r19.xyz, r11.xyzx, r4.zzzz, r10.xyzx
        mov r20.xyz, cb9[r2.z + 4].yzwy
        mov r20.w, cb9[r2.z + 5].x
        mov r19.w, l(1.000000)
        dp4 r20.x, r20.xyzw, r19.xyzw
        mov r21.xyz, cb9[r2.z + 5].yzwy
        mov r21.w, cb9[r2.z + 6].x
        dp4 r20.y, r21.xyzw, r19.xyzw
        mad r20.xy, r20.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r21.x, r20.x, cb9[r2.z + 9].w
        add r21.y, r20.y, cb9[r2.z + 10].x
        mul r20.xy, r21.xyxx, cb9[r2.z + 9].yzyy
        div r20.zw, cb9[r2.z + 3].yyyy, cb9[r2.z + 8].yyyw
        add r21.xy, -r20.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r21.xy, r20.xyxx, r21.xyxx
        ge r20.zw, r20.zzzw, r20.xxxy
        or r20.zw, r20.zzzw, r21.xxxy
        or r4.z, r20.w, r20.z
        if_z r4.z
          mov r21.xyz, cb9[r2.z + 6].yzwy
          mov r21.w, cb9[r2.z + 7].x
          dp4 r4.z, r21.xyzw, r19.xyzw
          mov_sat r20.xy, r20.xyxx
          mad r19.x, r20.x, cb9[r2.z + 8].y, cb9[r2.z + 8].z
          mad r19.y, r20.y, cb9[r2.z + 8].w, cb9[r2.z + 9].x
          add r4.z, r4.z, cb9[r2.z + 10].y
          div r4.z, r4.z, cb9[r2.z + 10].z
          max r4.z, r4.z, l(0.00006104)
          and r6.w, l(0x0000ffff), cb9[r2.z + 1].w
          if_nz cb2[58].y
            mov r20.x, -r13.x
            utof r21.z, r6.w
            mov r20.y, r14.x
            mov r20.z, r13.x
            mov r8.w, l(0)
            mov r11.w, l(0)
            loop 
              ige r12.w, r11.w, l(8)
              breakc_nz r12.w
              dp2 r22.x, icb[r11.w + 0].yxyy, r20.xyxx
              dp2 r22.y, icb[r11.w + 0].yxyy, r20.yzyy
              mad r21.xy, r22.xyxx, cb9[r2.z + 3].yyyy, r19.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r21.xyzx, t9.xxxx, s13, r4.z
              mad r8.w, r12.w, l(0.125000), r8.w
              iadd r11.w, r11.w, l(1)
            endloop 
          else 
            utof r19.z, r6.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r19.xyzx, t9.xxxx, s13, r4.z
          endif 
          mul r2.z, r8.w, r8.w
          mul r2.z, r8.w, r2.z
        else 
          mov r2.z, l(1.000000)
        endif 
        mul r7.w, r2.z, r7.w
      endif 
    endif 
    mad r2.z, -r2.x, l(0.500000), l(1.000000)
    mad r2.z, -r5.w, r2.z, l(1.000000)
    mul r2.z, r2.z, r2.z
    mad r2.z, -r2.z, l(0.620000), l(0.620000)
    add r2.z, -r5.w, r2.z
    mad r2.z, r1.z, r2.z, r5.w
    mul r2.z, r7.w, r2.z
    lt r2.w, l(0.000000), r2.w
    mad r19.xyz, r2.zzzz, r15.yzwy, r18.xyzx
    mad r20.xyz, -r10.xyzx, r0.zzzz, cb2[17].xyzx
    dp3 r0.z, r20.xyzx, r20.xyzx
    rsq r0.z, r0.z
    mul r20.xyz, r0.zzzz, r20.xyzx
    dp3 r0.z, r20.xyzx, r12.xyzx
    dp3 r2.z, r11.xyzx, r20.xyzx
    mad r4.z, |r2.z|, r0.w, -|r2.z|
    mad r2.z, |r2.z|, r4.z, l(1.000000)
    mad r4.z, r5.w, r0.y, r1.w
    mul r2.z, r2.z, r2.z
    mul r2.z, r4.z, r2.z
    rcp r2.z, r2.z
    mul r2.y, r2.y, r2.z
    mul r2.y, r2.y, r7.w
    mul r2.y, r2.y, l(0.250000)
    mad r20.xyz, r2.yyyy, r15.yzwy, r9.xywx
    add_sat r0.z, -r0.z, l(1.000000)
    mul r2.z, r0.z, r0.z
    mul r2.z, r2.z, r2.z
    mul r0.z, r0.z, r2.z
    mul r0.z, r0.z, r2.y
    mad r21.xyz, r0.zzzz, r15.zwyz, r17.xyzx
    mov r19.w, r21.z
    mov r18.w, r17.z
    movc r18.xyzw, r2.wwww, r19.xyzw, r18.xyzw
    mov r21.zw, r20.xxxy
    mov r17.zw, r9.xxxy
    movc r19.xyzw, r2.wwww, r21.xyzw, r17.xyzw
    movc r9.w, r2.w, r20.z, r9.w
    mov r17.z, r18.w
    mov r17.xy, r19.xyxx
    mov r9.xy, r19.zwzz
  endif 
endif 
ubfe r0.x, l(10), l(12), r0.x
mov r19.x, -r13.x
not r0.z, r9.z
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r10.w, l(1.000000)
mov r20.w, l(1.000000)
mov r19.z, r13.x
mov r21.z, l(1.000000)
mov r22.w, l(1.000000)
mov r23.w, l(1.000000)
mov r19.yw, r14.xxxx
mov r13.y, r19.w
mov r24.w, l(1.000000)
mov r14.y, r19.x
mov r14.z, r13.x
mov r25.w, l(1.000000)
mov r26.x, r14.x
mov r26.y, r19.x
mov r26.z, r13.x
mov r27.x, r14.x
mov r27.y, r19.x
mov r27.z, r13.x
mov r28.x, r14.x
mov r28.y, r19.x
mov r28.z, r13.x
mov r2.yzw, r18.xxyz
mov r29.xyz, r17.zxyz
mov r30.xyz, r9.xywx
mov r4.z, l(0)
loop 
  ieq r5.w, r4.z, l(2)
  breakc_nz r5.w
  movc r5.w, r4.z, r0.x, r13.w
  imul null, r5.w, r5.w, l(15)
  ubfe r6.w, l(3), l(24), cb9[r5.w + 1].w
  switch r6.w
    case l(4)
    lt r6.w, l(0.000000), cb9[r5.w + 6].y
    mov r31.xy, cb9[r5.w + 5].zwzz
    mov r31.z, cb9[r5.w + 6].x
    mad r15.yzw, -r31.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r5.w + 0].xxyz
    add r32.xyz, -r10.xyzx, r15.yzwy
    dp3 r7.w, r31.xyzx, r32.xyzx
    div_sat r8.w, -r7.w, cb9[r5.w + 6].y
    mad r33.xyz, r8.wwww, r31.xyzx, r15.yzwy
    movc r33.xyz, r6.wwww, r33.xyzx, cb9[r5.w + 0].xyzx
    add r33.xyz, -r10.xyzx, r33.xyzx
    dp3 r11.w, r33.xyzx, r33.xyzx
    rsq r12.w, r11.w
    mul r33.xyz, r12.wwww, r33.xyzx
    dp3 r12.w, r11.xyzx, r33.xyzx
    mov_sat r13.z, r12.w
    lt r14.w, l(0.000000), r13.z
    if_nz r14.w
      sqrt r14.w, r11.w
      mul r16.w, cb9[r5.w + 3].x, cb9[r5.w + 3].x
      div r11.w, r16.w, r11.w
      min r11.w, r11.w, l(1.000000)
      mad_sat r33.xy, r14.wwww, cb9[r5.w + 2].xzxx, cb9[r5.w + 2].ywyy
      mul r33.zw, r33.xxxy, r33.xxxy
      mad r33.xy, r33.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r33.xy, r33.xyxx, r33.zwzz
      mul r11.w, r11.w, r33.x
      mul r11.w, r33.y, r11.w
      lt r14.w, l(0.000000), r11.w
      if_nz r14.w
        ubfe r14.w, l(3), l(27), cb9[r5.w + 1].w
        ine r14.w, r14.w, l(1)
        if_nz r14.w
          mad r14.w, |r12.w|, l(-0.200000), l(0.400000)
          mad r33.xyz, r11.xyzx, r14.wwww, r10.xyzx
          add r33.xyz, r33.xyzx, -cb9[r5.w + 4].yzwy
          max r14.w, |r33.z|, |r33.y|
          max r14.w, r14.w, |r33.x|
          div r14.w, cb9[r5.w + 5].x, r14.w
          add r14.w, r14.w, cb9[r5.w + 5].y
          dp3 r16.w, r33.xyzx, r33.xyzx
          rsq r16.w, r16.w
          max r14.w, r14.w, l(0.00006104)
          and r17.w, l(0x0000ffff), cb9[r5.w + 1].w
          utof r34.w, r17.w
          mov r17.w, l(0)
          mov r18.w, l(0)
          loop 
            ige r21.w, r18.w, l(8)
            breakc_nz r21.w
            dp2 r35.y, icb[r18.w + 0].yxyy, r19.xyxx
            dp2 r35.z, icb[r18.w + 0].yxyy, r19.yzyy
            mul r35.yz, r35.yyzy, cb9[r5.w + 3].yyyy
            mul r35.x, r15.x, r35.y
            mul r35.w, r3.x, r35.y
            mad r34.xyz, r33.xyzx, r16.wwww, r35.xzwx
            sample_c_lz_indexable(texturecubearray)(float,float,float,float) r21.w, r34.xyzw, t10.xxxx, s13, r14.w
            mad r17.w, r21.w, l(0.125000), r17.w
            iadd r18.w, r18.w, l(1)
          endloop 
        else 
          mov r17.w, l(1.000000)
        endif 
        mul r11.w, r11.w, r17.w
        lt r14.w, l(0.000000), r11.w
        if_nz r14.w
          mul r14.w, r0.w, cb9[r5.w + 1].z
          mul r14.w, r14.w, l(0.250000)
          dp3 r16.w, r31.xyzx, r16.xyzx
          dp3 r18.w, r16.xyzx, r32.xyzx
          mad r21.w, -r16.w, r16.w, cb9[r5.w + 6].y
          mad r7.w, r16.w, r18.w, -r7.w
          div_sat r7.w, r7.w, r21.w
          div r16.w, r21.w, cb9[r5.w + 6].y
          mul r16.w, r16.w, l(10.000000)
          min r16.w, r16.w, l(1.000000)
          add r7.w, -r8.w, r7.w
          mad r7.w, r16.w, r7.w, r8.w
          mad r15.yzw, r7.wwww, r31.xxyz, r15.yyzw
          movc r15.yzw, r6.wwww, r15.yyzw, cb9[r5.w + 0].xxyz
          add r15.yzw, -r10.xxyz, r15.yyzw
          dp3 r6.w, r15.yzwy, r15.yzwy
          rsq r6.w, r6.w
          mul r31.xyz, r6.wwww, r15.yzwy
          ubfe r7.w, l(4), l(16), cb9[r5.w + 1].w
          ult r8.w, l(0), r7.w
          and r8.w, r9.z, r8.w
          if_nz r8.w
            iadd r7.w, r7.w, cb2[0].x
            imad r7.w, r7.w, l(15), l(-15)
            mad r8.w, |r12.w|, l(-0.200000), l(0.400000)
            mad r20.xyz, r11.xyzx, r8.wwww, r10.xyzx
            mov r32.xyz, cb9[r7.w + 6].yzwy
            mov r32.w, cb9[r7.w + 7].x
            dp4 r8.w, r32.xyzw, r20.xyzw
            mov r32.xyz, cb9[r7.w + 7].yzwy
            mov r32.w, cb9[r7.w + 8].x
            dp4 r16.w, r32.xyzw, r20.xyzw
            lt r18.w, r16.w, r8.w
            if_z r18.w
              mov r32.xyz, cb9[r7.w + 4].yzwy
              mov r32.w, cb9[r7.w + 5].x
              dp4 r32.x, r32.xyzw, r20.xyzw
              mov r33.xyz, cb9[r7.w + 5].yzwy
              mov r33.w, cb9[r7.w + 6].x
              dp4 r32.y, r33.xyzw, r20.xyzw
              div r20.xy, r32.xyxx, r16.wwww
              mad r20.xy, r20.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r32.x, r20.x, cb9[r7.w + 9].w
              add r32.y, r20.y, cb9[r7.w + 10].x
              mul r20.xy, r32.xyxx, cb9[r7.w + 9].yzyy
              div r32.xy, cb9[r7.w + 3].yyyy, cb9[r7.w + 8].ywyy
              add r32.zw, -r32.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              ge r32.zw, r20.xxxy, r32.zzzw
              ge r32.xy, r32.xyxx, r20.xyxx
              or r32.xy, r32.xyxx, r32.zwzz
              or r20.z, r32.y, r32.x
              if_z r20.z
                mov_sat r20.xy, r20.xyxx
                mad r32.x, r20.x, cb9[r7.w + 8].y, cb9[r7.w + 8].z
                mad r32.y, r20.y, cb9[r7.w + 8].w, cb9[r7.w + 9].x
                mul r20.x, r16.w, cb9[r7.w + 10].z
                mad r8.w, cb9[r7.w + 10].y, r16.w, r8.w
                div r8.w, r8.w, r20.x
              endif 
            else 
              mov r20.z, l(-1)
            endif 
            or r16.w, r18.w, r20.z
            if_z r16.w
              max r8.w, r8.w, l(0.00006104)
              and r16.w, l(0x0000ffff), cb9[r7.w + 1].w
              if_nz cb2[58].y
                utof r20.z, r16.w
                mov r18.w, l(0)
                mov r21.w, l(0)
                loop 
                  ige r26.w, r21.w, l(8)
                  breakc_nz r26.w
                  dp2 r33.x, icb[r21.w + 0].yxyy, r19.xwxx
                  dp2 r33.y, icb[r21.w + 0].xyxx, r13.xyxx
                  mad r20.xy, r33.xyxx, cb9[r7.w + 3].yyyy, r32.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.x, r20.xyzx, t9.xxxx, s13, r8.w
                  mad r18.w, r20.x, l(0.125000), r18.w
                  iadd r21.w, r21.w, l(1)
                endloop 
              else 
                utof r32.z, r16.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r32.xyzx, t9.xxxx, s13, r8.w
              endif 
              mul r7.w, r18.w, r18.w
              mul r7.w, r18.w, r7.w
            else 
              mov r7.w, l(1.000000)
            endif 
            mul r11.w, r7.w, r11.w
          else 
            ubfe r7.w, l(4), l(20), cb9[r5.w + 1].w
            ult r8.w, l(0), r7.w
            and r8.w, r0.z, r8.w
            if_nz r8.w
              iadd r7.w, r7.w, cb2[0].x
              imad r7.w, r7.w, l(15), l(-15)
              mad r8.w, |r12.w|, l(-0.200000), l(0.400000)
              mad r22.xyz, r11.xyzx, r8.wwww, r10.xyzx
              mov r32.xyz, cb9[r7.w + 6].yzwy
              mov r32.w, cb9[r7.w + 7].x
              dp4 r8.w, r32.xyzw, r22.xyzw
              mov r32.xyz, cb9[r7.w + 7].yzwy
              mov r32.w, cb9[r7.w + 8].x
              dp4 r16.w, r32.xyzw, r22.xyzw
              lt r20.x, r16.w, r8.w
              if_z r20.x
                mov r32.xyz, cb9[r7.w + 4].yzwy
                mov r32.w, cb9[r7.w + 5].x
                dp4 r32.x, r32.xyzw, r22.xyzw
                mov r33.xyz, cb9[r7.w + 5].yzwy
                mov r33.w, cb9[r7.w + 6].x
                dp4 r32.y, r33.xyzw, r22.xyzw
                div r20.yz, r32.xxyx, r16.wwww
                mad r20.yz, r20.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r22.x, r20.y, cb9[r7.w + 9].w
                add r22.y, r20.z, cb9[r7.w + 10].x
                mul r20.yz, r22.xxyx, cb9[r7.w + 9].yyzy
                div r22.xy, cb9[r7.w + 3].yyyy, cb9[r7.w + 8].ywyy
                add r32.xy, -r22.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r32.xy, r20.yzyy, r32.xyxx
                ge r22.xy, r22.xyxx, r20.yzyy
                or r22.xy, r22.xyxx, r32.xyxx
                or r21.w, r22.y, r22.x
                if_z r21.w
                  mov_sat r20.yz, r20.yyzy
                  mad r22.x, r20.y, cb9[r7.w + 8].y, cb9[r7.w + 8].z
                  mad r22.y, r20.z, cb9[r7.w + 8].w, cb9[r7.w + 9].x
                  mul r20.y, r16.w, cb9[r7.w + 10].z
                  mad r8.w, cb9[r7.w + 10].y, r16.w, r8.w
                  div r8.w, r8.w, r20.y
                endif 
              else 
                mov r21.w, l(-1)
              endif 
              or r16.w, r20.x, r21.w
              if_z r16.w
                max r8.w, r8.w, l(0.00006104)
                and r16.w, l(0x0000ffff), cb9[r7.w + 1].w
                if_nz cb2[58].y
                  utof r20.z, r16.w
                  mov r21.w, l(0)
                  mov r26.w, l(0)
                  loop 
                    ige r27.w, r26.w, l(8)
                    breakc_nz r27.w
                    dp2 r32.x, icb[r26.w + 0].xyxx, r14.xyxx
                    dp2 r32.y, icb[r26.w + 0].yxyy, r14.xzxx
                    mad r20.xy, r32.xyxx, cb9[r7.w + 3].yyyy, r22.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.x, r20.xyzx, t9.xxxx, s13, r8.w
                    mad r21.w, r20.x, l(0.125000), r21.w
                    iadd r26.w, r26.w, l(1)
                  endloop 
                else 
                  utof r22.z, r16.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.w, r22.xyzx, t9.xxxx, s13, r8.w
                endif 
                mul r7.w, r21.w, r21.w
                mul r7.w, r21.w, r7.w
              else 
                mov r7.w, l(1.000000)
              endif 
              mul r11.w, r7.w, r11.w
            endif 
          endif 
          mad r7.w, -r13.z, r2.x, l(1.000000)
          mul r7.w, r7.w, r7.w
          mad r7.w, -r7.w, l(0.620000), l(0.620000)
          add r7.w, -r13.z, r7.w
          mad r7.w, r1.z, r7.w, r13.z
          mul r7.w, r11.w, r7.w
          mov r20.x, cb9[r5.w + 0].w
          mov r20.yz, cb9[r5.w + 1].xxyx
          lt r8.w, l(0.000000), r12.w
          mad r22.xyz, r7.wwww, r20.xyzx, r2.yzwy
          dp3_sat r7.w, r11.xyzx, r31.xyzx
          mad r15.yzw, r15.yyzw, r6.wwww, r12.xxyz
          dp3 r6.w, r15.yzwy, r15.yzwy
          rsq r6.w, r6.w
          mul r15.yzw, r6.wwww, r15.yyzw
          dp3 r6.w, r15.yzwy, r12.xyzx
          dp3 r12.w, r11.xyzx, r15.yzwy
          mad r13.z, |r12.w|, r0.w, -|r12.w|
          mad r12.w, |r12.w|, r13.z, l(1.000000)
          mad r13.z, r7.w, r0.y, r1.w
          mul r12.w, r12.w, r12.w
          mul r12.w, r13.z, r12.w
          rcp r12.w, r12.w
          mul r7.w, r14.w, r7.w
          mul r7.w, r7.w, r12.w
          mul r7.w, r11.w, r7.w
          mad r15.yzw, r7.wwww, r20.xxyz, r30.xxyz
          add_sat r6.w, -r6.w, l(1.000000)
          mul r11.w, r6.w, r6.w
          mul r11.w, r11.w, r11.w
          mul r6.w, r6.w, r11.w
          mul r6.w, r6.w, r7.w
          mad r20.xyz, r6.wwww, r20.xyzx, r29.xyzx
          movc r2.yzw, r8.wwww, r22.xxyz, r2.yyzw
          movc r29.xyz, r8.wwww, r20.xyzx, r29.xyzx
          movc r30.xyz, r8.wwww, r15.yzwy, r30.xyzx
        endif 
      endif 
    endif 
    break 
    case l(2)
    add r20.xy, -r10.xyxx, cb9[r5.w + 3].zwzz
    add r20.z, -r10.z, cb9[r5.w + 4].x
    dp3 r6.w, r20.xyzx, r20.xyzx
    rsq r6.w, r6.w
    mul r15.yzw, r6.wwww, r20.xxyz
    dp3 r7.w, r11.xyzx, r15.yzwy
    mov_sat r8.w, r7.w
    lt r11.w, l(0.000000), r8.w
    if_nz r11.w
      mov r31.xyz, cb9[r5.w + 7].yzwy
      mov r31.w, cb9[r5.w + 8].x
      dp4 r11.w, r31.xyzw, r10.xyzw
      lt r12.w, r11.w, l(1.000000)
      if_nz r12.w
        mov r15.yzw, l(0,1.000000,1.000000,1.000000)
        mov r12.w, l(0)
      else 
        add r22.xyz, -r10.xyzx, cb9[r5.w + 0].xyzx
        mul r13.z, cb9[r5.w + 3].x, cb9[r5.w + 3].x
        dp3 r14.w, r22.xyzx, r22.xyzx
        div r13.z, r13.z, r14.w
        min r13.z, r13.z, l(1.000000)
        mad_sat r22.xy, r11.wwww, cb9[r5.w + 2].xzxx, cb9[r5.w + 2].ywyy
        mul r32.xy, r22.xyxx, r22.xyxx
        mad r22.xy, r22.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r22.xy, r22.xyxx, r32.xyxx
        mul r13.z, r13.z, r22.x
        mul r13.z, r22.y, r13.z
        mov r32.xyz, cb9[r5.w + 4].yzwy
        mov r32.w, cb9[r5.w + 5].x
        dp4 r22.x, r32.xyzw, r10.xyzw
        mov r32.xyz, cb9[r5.w + 5].yzwy
        mov r32.w, cb9[r5.w + 6].x
        dp4 r22.y, r32.xyzw, r10.xyzw
        div r21.xy, r22.xyxx, r11.wwww
        lt r11.w, cb9[r5.w + 10].w, l(0.00048828)
        if_nz r11.w
          mad_sat r22.xy, |r21.xyxx|, cb9[r5.w + 12].xyxx, cb9[r5.w + 12].zwzz
          mul r32.xy, r22.xyxx, r22.xyxx
          mad r22.xy, r22.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r22.xy, r22.xyxx, r32.xyxx
          mul r11.w, r22.y, r22.x
        else 
          mul_sat r32.xyzw, |r21.yyxx|, cb9[r5.w + 11].xyzw
          log r32.xyzw, r32.xyzw
          mul r32.xyzw, r32.xyzw, cb9[r5.w + 12].zzzz
          exp r32.xyzw, r32.xyzw
          add r22.xy, r32.zwzz, r32.xyxx
          log r22.xy, r22.xyxx
          mul r22.xy, r22.xyxx, cb9[r5.w + 12].wwww
          exp r22.xy, r22.xyxx
          mul r14.w, r22.x, cb9[r5.w + 12].x
          mad r16.w, cb9[r5.w + 12].y, r22.y, l(-1.000000)
          mad r14.w, cb9[r5.w + 12].y, r22.y, -r14.w
          div_sat r14.w, r16.w, r14.w
          mul r16.w, r14.w, r14.w
          mad r14.w, r14.w, l(-2.000000), l(3.000000)
          mul r11.w, r14.w, r16.w
        endif 
        mul r12.w, r11.w, r13.z
        and r11.w, l(255), cb9[r5.w + 14].w
        if_nz r11.w
          dp3 r13.z, cb9[r5.w + 13].xyzx, r21.xyzx
          mov r22.x, cb9[r5.w + 13].w
          mov r22.yz, cb9[r5.w + 14].xxyx
          dp3 r14.w, r22.xyzx, r21.xyzx
          frc r22.x, r13.z
          frc r22.y, r14.w
          iadd r11.w, r11.w, l(-1)
          utof r22.z, r11.w
          sample_l_indexable(texture2darray)(float,float,float,float) r15.yzw, r22.xyzx, t20.wxyz, s2, l(0.000000)
        else 
          mov r15.yzw, l(0,1.000000,1.000000,1.000000)
        endif 
      endif 
      mov r22.x, cb9[r5.w + 0].w
      mov r22.yz, cb9[r5.w + 1].xxyx
      mul r15.yzw, r15.yyzw, r22.xxyz
      lt r11.w, l(0.000000), r12.w
      if_nz r11.w
        ubfe r11.w, l(3), l(27), cb9[r5.w + 1].w
        ine r11.w, r11.w, l(1)
        if_nz r11.w
          mad r11.w, |r7.w|, l(-0.200000), l(0.400000)
          mad r23.xyz, r11.xyzx, r11.wwww, r10.xyzx
          mov r32.xyz, cb9[r5.w + 6].yzwy
          mov r32.w, cb9[r5.w + 7].x
          dp4 r11.w, r32.xyzw, r23.xyzw
          dp4 r13.z, r31.xyzw, r23.xyzw
          ge r14.w, r13.z, r11.w
          if_nz r14.w
            mov r31.xyz, cb9[r5.w + 4].yzwy
            mov r31.w, cb9[r5.w + 5].x
            dp4 r21.x, r31.xyzw, r23.xyzw
            mov r31.xyz, cb9[r5.w + 5].yzwy
            mov r31.w, cb9[r5.w + 6].x
            dp4 r21.y, r31.xyzw, r23.xyzw
            div r21.xy, r21.xyxx, r13.zzzz
            mad_sat r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            mad r22.x, r21.x, cb9[r5.w + 8].y, cb9[r5.w + 8].z
            mad r22.y, r21.y, cb9[r5.w + 8].w, cb9[r5.w + 9].x
            div r11.w, r11.w, r13.z
            max r11.w, r11.w, l(0.00006104)
            and r13.z, l(0x0000ffff), cb9[r5.w + 1].w
            if_nz cb2[58].y
              utof r23.z, r13.z
              mov r14.w, l(0)
              mov r16.w, l(0)
              loop 
                ige r21.x, r16.w, l(8)
                breakc_nz r21.x
                dp2 r21.x, icb[r16.w + 0].xyxx, r26.xyxx
                dp2 r21.y, icb[r16.w + 0].yxyy, r26.xzxx
                mad r23.xy, r21.xyxx, cb9[r5.w + 3].yyyy, r22.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r23.xyzx, t9.xxxx, s13, r11.w
                mad r14.w, r21.x, l(0.125000), r14.w
                iadd r16.w, r16.w, l(1)
              endloop 
            else 
              utof r22.z, r13.z
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r22.xyzx, t9.xxxx, s13, r11.w
            endif 
            mul r11.w, r14.w, r14.w
            mul r11.w, r14.w, r11.w
          else 
            mov r11.w, l(1.000000)
          endif 
        else 
          mov r11.w, l(1.000000)
        endif 
        mul r11.w, r11.w, r12.w
        lt r12.w, l(0.000000), r11.w
        if_nz r12.w
          mul r12.w, r0.w, cb9[r5.w + 1].z
          mul r12.w, r8.w, r12.w
          ubfe r13.z, l(4), l(16), cb9[r5.w + 1].w
          ult r16.w, l(0), r13.z
          and r16.w, r9.z, r16.w
          if_nz r16.w
            iadd r13.z, r13.z, cb2[0].x
            imad r13.z, r13.z, l(15), l(-15)
            mad r16.w, |r7.w|, l(-0.200000), l(0.400000)
            mad r24.xyz, r11.xyzx, r16.wwww, r10.xyzx
            mov r31.xyz, cb9[r13.z + 6].yzwy
            mov r31.w, cb9[r13.z + 7].x
            dp4 r16.w, r31.xyzw, r24.xyzw
            mov r31.xyz, cb9[r13.z + 7].yzwy
            mov r31.w, cb9[r13.z + 8].x
            dp4 r21.x, r31.xyzw, r24.xyzw
            lt r21.y, r21.x, r16.w
            if_z r21.y
              mov r31.xyz, cb9[r13.z + 4].yzwy
              mov r31.w, cb9[r13.z + 5].x
              dp4 r22.x, r31.xyzw, r24.xyzw
              mov r31.xyz, cb9[r13.z + 5].yzwy
              mov r31.w, cb9[r13.z + 6].x
              dp4 r22.y, r31.xyzw, r24.xyzw
              div r22.xy, r22.xyxx, r21.xxxx
              mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r23.x, r22.x, cb9[r13.z + 9].w
              add r23.y, r22.y, cb9[r13.z + 10].x
              mul r22.xy, r23.xyxx, cb9[r13.z + 9].yzyy
              div r23.xy, cb9[r13.z + 3].yyyy, cb9[r13.z + 8].ywyy
              add r24.xy, -r23.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r24.xy, r22.xyxx, r24.xyxx
              ge r23.xy, r23.xyxx, r22.xyxx
              or r23.xy, r23.xyxx, r24.xyxx
              or r22.z, r23.y, r23.x
              if_z r22.z
                mov_sat r22.xy, r22.xyxx
                mad r23.x, r22.x, cb9[r13.z + 8].y, cb9[r13.z + 8].z
                mad r23.y, r22.y, cb9[r13.z + 8].w, cb9[r13.z + 9].x
                mul r22.x, r21.x, cb9[r13.z + 10].z
                mad r16.w, cb9[r13.z + 10].y, r21.x, r16.w
                div r16.w, r16.w, r22.x
              endif 
            else 
              mov r22.z, l(-1)
            endif 
            or r21.x, r21.y, r22.z
            if_z r21.x
              max r16.w, r16.w, l(0.00006104)
              and r21.x, l(0x0000ffff), cb9[r13.z + 1].w
              if_nz cb2[58].y
                utof r22.z, r21.x
                mov r21.y, l(0)
                mov r24.x, l(0)
                loop 
                  ige r24.y, r24.x, l(8)
                  breakc_nz r24.y
                  dp2 r31.x, icb[r24.x + 0].xyxx, r27.xyxx
                  dp2 r31.y, icb[r24.x + 0].yxyy, r27.xzxx
                  mad r22.xy, r31.xyxx, cb9[r13.z + 3].yyyy, r23.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r16.w
                  mad r21.y, r22.x, l(0.125000), r21.y
                  iadd r24.x, r24.x, l(1)
                endloop 
              else 
                utof r23.z, r21.x
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.y, r23.xyzx, t9.xxxx, s13, r16.w
              endif 
              mul r13.z, r21.y, r21.y
              mul r13.z, r21.y, r13.z
            else 
              mov r13.z, l(1.000000)
            endif 
            mul r11.w, r11.w, r13.z
          else 
            ubfe r5.w, l(4), l(20), cb9[r5.w + 1].w
            ult r13.z, l(0), r5.w
            and r13.z, r0.z, r13.z
            if_nz r13.z
              iadd r5.w, r5.w, cb2[0].x
              imad r5.w, r5.w, l(15), l(-15)
              mad r13.z, |r7.w|, l(-0.200000), l(0.400000)
              mad r25.xyz, r11.xyzx, r13.zzzz, r10.xyzx
              mov r31.xyz, cb9[r5.w + 6].yzwy
              mov r31.w, cb9[r5.w + 7].x
              dp4 r13.z, r31.xyzw, r25.xyzw
              mov r31.xyz, cb9[r5.w + 7].yzwy
              mov r31.w, cb9[r5.w + 8].x
              dp4 r16.w, r31.xyzw, r25.xyzw
              lt r21.x, r16.w, r13.z
              if_z r21.x
                mov r31.xyz, cb9[r5.w + 4].yzwy
                mov r31.w, cb9[r5.w + 5].x
                dp4 r22.x, r31.xyzw, r25.xyzw
                mov r31.xyz, cb9[r5.w + 5].yzwy
                mov r31.w, cb9[r5.w + 6].x
                dp4 r22.y, r31.xyzw, r25.xyzw
                div r22.xy, r22.xyxx, r16.wwww
                mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r23.x, r22.x, cb9[r5.w + 9].w
                add r23.y, r22.y, cb9[r5.w + 10].x
                mul r22.xy, r23.xyxx, cb9[r5.w + 9].yzyy
                div r23.xy, cb9[r5.w + 3].yyyy, cb9[r5.w + 8].ywyy
                add r24.xy, -r23.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r24.xy, r22.xyxx, r24.xyxx
                ge r23.xy, r23.xyxx, r22.xyxx
                or r23.xy, r23.xyxx, r24.xyxx
                or r22.z, r23.y, r23.x
                if_z r22.z
                  mov_sat r22.xy, r22.xyxx
                  mad r23.x, r22.x, cb9[r5.w + 8].y, cb9[r5.w + 8].z
                  mad r23.y, r22.y, cb9[r5.w + 8].w, cb9[r5.w + 9].x
                  mul r22.x, r16.w, cb9[r5.w + 10].z
                  mad r13.z, cb9[r5.w + 10].y, r16.w, r13.z
                  div r13.z, r13.z, r22.x
                endif 
              else 
                mov r22.z, l(-1)
              endif 
              or r16.w, r21.x, r22.z
              if_z r16.w
                max r13.z, r13.z, l(0.00006104)
                and r16.w, l(0x0000ffff), cb9[r5.w + 1].w
                if_nz cb2[58].y
                  utof r22.z, r16.w
                  mov r21.x, l(0)
                  mov r24.x, l(0)
                  loop 
                    ige r24.y, r24.x, l(8)
                    breakc_nz r24.y
                    dp2 r25.x, icb[r24.x + 0].xyxx, r28.xyxx
                    dp2 r25.y, icb[r24.x + 0].yxyy, r28.xzxx
                    mad r22.xy, r25.xyxx, cb9[r5.w + 3].yyyy, r23.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r13.z
                    mad r21.x, r22.x, l(0.125000), r21.x
                    iadd r24.x, r24.x, l(1)
                  endloop 
                else 
                  utof r23.z, r16.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r23.xyzx, t9.xxxx, s13, r13.z
                endif 
                mul r5.w, r21.x, r21.x
                mul r5.w, r21.x, r5.w
              else 
                mov r5.w, l(1.000000)
              endif 
              mul r11.w, r5.w, r11.w
            endif 
          endif 
          mad r5.w, -r8.w, r2.x, l(1.000000)
          mul r5.w, r5.w, r5.w
          mad r5.w, -r5.w, l(0.620000), l(0.620000)
          add r5.w, -r8.w, r5.w
          mad r5.w, r1.z, r5.w, r8.w
          mul r5.w, r11.w, r5.w
          lt r7.w, l(0.000000), r7.w
          mad r22.xyz, r5.wwww, r15.yzwy, r2.yzwy
          mad r20.xyz, r20.xyzx, r6.wwww, r12.xyzx
          dp3 r5.w, r20.xyzx, r20.xyzx
          rsq r5.w, r5.w
          mul r20.xyz, r5.wwww, r20.xyzx
          dp3 r5.w, r20.xyzx, r12.xyzx
          dp3 r6.w, r11.xyzx, r20.xyzx
          mad r13.z, |r6.w|, r0.w, -|r6.w|
          mad r6.w, |r6.w|, r13.z, l(1.000000)
          mad r8.w, r8.w, r0.y, r1.w
          mul r6.w, r6.w, r6.w
          mul r6.w, r8.w, r6.w
          rcp r6.w, r6.w
          mul r6.w, r12.w, r6.w
          mul r6.w, r6.w, r11.w
          mul r6.w, r6.w, l(0.250000)
          mad r20.xyz, r6.wwww, r15.yzwy, r30.xyzx
          add_sat r5.w, -r5.w, l(1.000000)
          mul r8.w, r5.w, r5.w
          mul r8.w, r8.w, r8.w
          mul r5.w, r5.w, r8.w
          mul r5.w, r5.w, r6.w
          mad r15.yzw, r5.wwww, r15.yyzw, r29.xxyz
          movc r2.yzw, r7.wwww, r22.xxyz, r2.yyzw
          movc r29.xyz, r7.wwww, r15.yzwy, r29.xyzx
          movc r30.xyz, r7.wwww, r20.xyzx, r30.xyzx
        endif 
      endif 
    endif 
    break 
    default 
    break 
  endswitch 
  iadd r4.z, r4.z, l(1)
endloop 
mad r0.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r1.z, r0.y
mad r4.xyz, r5.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r4.x
ieq r1.w, r1.z, r1.w
movc r4.xy, r1.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r5.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r1.w, r1.z, r1.w
movc r4.zw, r1.wwww, r5.yyyz, l(0,0,-1.000000,0)
mad r5.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r1.w, r1.z, r1.w
movc r5.xy, r1.wwww, r5.yzyy, l(-1.000000,0,0,0)
mad r6.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r6.x
ieq r1.z, r1.z, r1.w
movc r1.zw, r1.zzzz, r6.yyyz, l(0,0,-1.000000,0)
mov r6.xy, r4.xzxx
mov r6.z, r5.x
mov r6.w, r1.z
add r6.xyzw, -r0.xxxx, r6.xyzw
ge r6.xyzw, |r6.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r6.xyzw, r6.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r1.z, r6.y, r6.x
add r1.z, r6.z, r1.z
add r1.z, r6.w, r1.z
mul r2.x, r4.w, r6.y
mad r2.x, r6.x, r4.y, r2.x
mad r2.x, r6.z, r5.y, r2.x
mad r1.w, r6.w, r1.w, r2.x
div r0.w, r1.w, r1.z
ge r1.z, l(0.000000), r1.z
movc r0.yz, r1.zzzz, l(0,0,0,0), r0.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.w, r1.w, r1.z
movc r0.xyz, r0.wwww, r0.xyzx, r0.xzyx
mad r0.x, -r0.z, l(0.500000), r0.x
add r4.y, r0.x, r0.z
mad r4.z, -r0.y, l(0.500000), r0.x
add r4.x, r0.y, r4.z
add r0.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r29.xyzx
mad r0.xyz, r30.xyzx, r4.xyzx, r0.xyzx
mad r0.xyz, r2.yzwy, r3.yzwy, r0.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r10.xyzx, r10.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r10.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r10.z|
    mul r3.xy, r10.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r10.z|
    mul r2.w, r10.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r10.z, cb2[6].x
  mad r1.z, cb2[6].x, r10.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r10.xyzx, r10.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r10.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 1786 instruction slots used
