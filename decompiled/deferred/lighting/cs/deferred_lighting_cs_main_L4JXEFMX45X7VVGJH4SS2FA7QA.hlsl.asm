//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:37 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4 [unused]
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4
//   float probeDebugRadius;            // Offset:  868 Size:     4
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4 [unused]
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerPointClamp                 sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gDownsampledScene                 texture  float4          2d            t21      1 
// gMotionVectors                    texture  float4          2d            t22      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 42
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(17), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
utof r4.xy, r1.xyxx
add r4.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r4.zw, r4.xxxy, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r4.zwzz, t27.yzwx, s4, l(0.000000)
mul r0.w, r0.w, r3.z
if_nz cb2[55].x
  mul r3.z, r0.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r3.zzzz
  ret 
else 
  movc r3.z, cb2[54].w, r0.w, l(1.000000)
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r4.z, r1.xyww, t4.yzxw
ld_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
ge r1.z, r4.z, l(0.984375)
mul r1.w, r4.z, l(1.01587307)
mad r4.z, r4.z, l(64.000000), l(-63.000000)
movc r1.z, r1.z, r4.z, r1.w
max r1.z, r1.z, l(0.00000001)
rcp r1.z, r1.z
and r0.z, r0.z, r1.z
add r1.zw, r4.xxxy, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r4.x, r1.z, cb1[12].x
mul r4.y, r1.w, cb1[13].y
mov r4.z, l(1.000000)
mul r4.xyz, r0.zzzz, r4.xyzx
mul r10.xyz, r4.yyyy, cb1[17].xyzx
mad r4.xyw, r4.xxxx, cb1[16].xyxz, r10.xyxz
mad r4.xyz, r4.zzzz, cb1[18].xyzx, r4.xywx
mad r1.z, r2.w, l(3.000000), l(0.500000)
ftou r1.z, r1.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r10.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r10.z
mul r10.xy, r1.wwww, r2.xyxx
and r11.xyzw, r1.zzzz, l(2, 1, 2, 1)
movc r11.xyzw, r11.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.z, r11.w, r11.z
movc r11.z, r1.z, l(-1.000000), l(1.000000)
mul r2.xyw, r11.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r12.xyz, r11.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r10.xyz, r10.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r10.yyyy
mad r2.xyw, r12.xyxz, r10.xxxx, r2.xyxw
mad r10.xyz, r11.xyzx, r10.zzzz, r2.xywx
movc r1.z, r0.w, l(-0.500000), l(-0.00146628)
add r1.z, r1.z, r2.z
mul_sat r2.y, r1.z, l(2.00982332)
dp3 r1.z, -r4.xyzx, -r4.xyzx
rsq r1.z, r1.z
mul r11.xyz, r1.zzzz, -r4.xyzx
dp3_sat r2.x, r10.xyzx, r11.xyzx
dp3 r1.z, -r11.xyzx, r10.xyzx
add r1.z, r1.z, r1.z
mad r11.xyz, r10.xyzx, -r1.zzzz, -r11.xyzx
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.z, r1.z
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r12.xy, r2.zwzz
ieq r12.xy, r1.xyxx, r12.xyxx
and r1.w, r12.y, r12.x
lt r4.w, l(0.83333331), r2.y
lt r5.w, l(60.000000), r0.z
and r4.w, r4.w, r5.w
if_nz r4.w
  mul r12.xyz, r4.yyyy, cb1[9].xywx
  mad r12.xyz, r4.xxxx, cb1[8].xywx, r12.xyzx
  mad r12.xyz, r4.zzzz, cb1[10].xywx, r12.xyzx
  add r12.xyz, r12.xyzx, cb1[11].xywx
  mad r13.xyz, r11.xyzx, l(2000.000000, 2000.000000, 2000.000000, 0.000000), r4.xyzx
  mul r14.xyz, r13.yyyy, cb1[9].xywx
  mad r13.xyw, r13.xxxx, cb1[8].xyxw, r14.xyxz
  mad r13.xyz, r13.zzzz, cb1[10].xywx, r13.xywx
  add r13.xyz, r13.xyzx, cb1[11].xywx
  ge r4.w, r13.z, r12.z
  if_nz r4.w
    rcp r14.z, r12.z
    mul r14.xy, r12.xyxx, r14.zzzz
    rcp r15.z, r13.z
    mul r15.xy, r13.xyxx, r15.zzzz
    lt r12.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r15.xyxx
    mad r16.xyzw, r13.xxyy, r15.zzzz, l(-1.000000, 1.000000, -1.000000, 1.000000)
    mad r17.xyzw, r13.xxyy, r15.zzzz, -r14.xxyy
    lt r13.xy, r15.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
    div r16.xyzw, r16.xyzw, r17.xyzw
    and r13.xy, r13.xyxx, r16.ywyy
    movc r12.xy, r12.xyxx, r16.xzxx, r13.xyxx
    max r4.w, r12.y, r12.x
    add r12.xyw, r14.xyxz, -r15.xyxz
    mad r12.xyw, r4.wwww, r12.xyxw, r15.xyxz
    mad r13.xy, r14.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r15.xy, r12.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r13.xy, r13.xyxx, -r15.xyxx
    mul r13.xy, r2.zwzz, |r13.xyxx|
    max r4.w, r13.y, r13.x
    max r4.w, r4.w, l(1.000000)
    rcp r4.w, r4.w
    mad r13.xyw, r14.xyxz, l(0.500000, -0.500000, 0.000000, 1.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r14.xyz, r12.xywx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r16.xyz, -r13.xywx, r14.xyzx
    mad r13.xyw, r4.wwww, r16.xyxz, r13.xyxw
    add r14.xyz, -r13.xywx, r14.xyzx
    mul r16.xyz, r14.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000)
    mul r2.zw, r2.zzzw, |r16.xxxy|
    max r2.z, r2.w, r2.z
    log r2.z, r2.z
    round_pi r2.z, r2.z
    max r2.z, r2.z, l(0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r2.w, r13.xyxx, t28.yzwx, s1, r2.z
    mad r17.xyz, r14.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r2.w, |r2.w|, |r4.w|
    mul r2.w, r17.z, r2.w
    lt r2.w, r2.w, l(1.000000)
    and r5.w, r2.w, l(1)
    mad r17.xyz, r14.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    bfi r2.w, l(1), l(0), r2.w, l(2)
    movc r2.w, r4.w, r2.w, r5.w
    mad r17.xyz, r14.xyzx, l(0.093750, 0.093750, 0.093750, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r6.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(4)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.125000, 0.125000, 0.125000, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(8)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.156250, 0.156250, 0.156250, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(16)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.187500, 0.187500, 0.187500, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(32)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.218750, 0.218750, 0.218750, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(64)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(128)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.281250, 0.281250, 0.281250, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(256)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.312500, 0.312500, 0.312500, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(512)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.343750, 0.343750, 0.343750, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(1024)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.375000, 0.375000, 0.375000, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(2048)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.406250, 0.406250, 0.406250, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(4096)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.437500, 0.437500, 0.437500, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(8192)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.468750, 0.468750, 0.468750, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(0x00004000)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(0x00008000)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.531250, 0.531250, 0.531250, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(0x00010000)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.562500, 0.562500, 0.562500, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(0x00020000)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.593750, 0.593750, 0.593750, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(0x00040000)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.625000, 0.625000, 0.625000, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(0x00080000)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.656250, 0.656250, 0.656250, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(0x00100000)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.687500, 0.687500, 0.687500, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(0x00200000)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.718750, 0.718750, 0.718750, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(0x00400000)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(0x00800000)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.781250, 0.781250, 0.781250, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(0x01000000)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.812500, 0.812500, 0.812500, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(0x02000000)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.843750, 0.843750, 0.843750, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(0x04000000)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.875000, 0.875000, 0.875000, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(0x08000000)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.906250, 0.906250, 0.906250, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(0x10000000)
    movc r2.w, r5.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.937500, 0.937500, 0.937500, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r5.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r5.w|
    mul r4.w, r17.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r6.w, r2.w, l(0x20000000)
    movc r2.w, r4.w, r6.w, r2.w
    mad r17.xyz, r14.xyzx, l(0.968750, 0.968750, 0.968750, 0.000000), r13.xywx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r17.xyxx, t28.yzwx, s1, r2.z
    min r5.w, |r5.w|, |r4.w|
    mul r5.w, r17.z, r5.w
    lt r5.w, r5.w, l(1.000000)
    iadd r6.w, r2.w, l(0x40000000)
    movc r2.w, r5.w, r6.w, r2.w
    sample_l_indexable(texture2d)(float,float,float,float) r2.z, r15.xyxx, t28.yzxw, s1, r2.z
    min r2.z, |r4.w|, |r2.z|
    mul r2.z, r12.w, r2.z
    lt r2.z, r2.z, l(1.000000)
    iadd r4.w, r2.w, l(0x80000000)
    movc r2.z, r2.z, r4.w, r2.w
    mov r17.w, l(-1)
    mov r18.z, l(-1)
    mov r12.xy, l(0,0,0,0)
    mov r2.w, l(0)
    mov r4.w, r2.z
    mov r5.w, r15.z
    mov r19.yz, l(0,0,0,0)
    mov r17.z, l(0)
    mov r6.w, l(0)
    loop 
      breakc_z r4.w
      firstbit_lo r17.y, r4.w
      ishl r7.w, l(1), r17.y
      xor r17.x, r4.w, r7.w
      utof r8.w, r17.y
      mul r8.w, r8.w, l(0.031250)
      mad r15.xyw, r14.xyxz, r8.wwww, r13.xyxw
      sample_l_indexable(texture2d)(float,float,float,float) r8.w, r15.xyxx, t28.yzwx, s1, l(0.000000)
      mul r9.w, r15.w, |r8.w|
      lt r9.w, r9.w, l(1.000000)
      if_nz r9.w
        if_nz r17.z
          lt r9.w, r12.z, |r8.w|
          lt r12.w, r5.w, r15.w
          and r9.w, r9.w, r12.w
          movc r20.xy, r9.wwww, r15.xyxx, r12.xyxx
          mov r17.z, r15.w
          mov r19.x, r5.w
          movc r21.xyz, r9.wwww, r17.zxyz, r19.xyzx
          mov r4.w, r17.x
          mov r17.z, l(-1)
          mov r12.xy, r20.xyxx
          mov r5.w, r21.x
          mov r19.yz, r21.yyzy
          continue 
        endif 
        mov r9.w, r19.y
        mov r12.w, l(0)
      else 
        not r7.w, r7.w
        and r9.w, r7.w, r19.y
        mov r12.w, r17.z
      endif 
      if_nz r6.w
        mov r4.w, r17.x
        mov r19.y, r9.w
        mov r17.z, r12.w
        mov r6.w, l(-1)
        continue 
      endif 
      mov r20.xy, r12.xyxx
      mov r7.w, r2.w
      mov r14.w, r5.w
      mov r19.y, r9.w
      mov r19.x, r19.z
      mov r17.z, r12.w
      mov r18.w, r6.w
      mov r16.w, r15.w
      mov r19.w, |r8.w|
      mov r20.z, l(0)
      loop 
        ige r20.w, r20.z, l(4)
        breakc_nz r20.w
        itof r20.w, r20.z
        add r20.w, r20.w, l(1.000000)
        mul r20.w, r20.w, l(0.250000)
        mad r21.xyz, r16.xyzx, r20.wwww, r15.xywx
        sample_l_indexable(texture2d)(float,float,float,float) r20.w, r21.xyxx, t28.yzwx, s1, l(0.000000)
        mul r21.w, r21.z, |r20.w|
        lt r21.w, r21.w, l(1.000000)
        if_nz r21.w
          lt r21.w, r12.z, |r20.w|
          add r22.x, -r16.w, r21.z
          add r22.y, -r19.w, |r20.w|
          mul r22.z, r16.w, r21.z
          mul r22.y, r22.z, |r22.y|
          lt r22.x, r22.y, |r22.x|
          lt r22.z, r14.w, r21.z
          and r22.yw, r21.wwww, r22.xxxz
          movc r18.xy, r22.wwww, r17.xyxx, r19.yxyy
          or r22.x, r22.x, r22.z
          and r21.w, r21.w, r22.x
          movc r21.xy, r21.wwww, r21.xyxx, r20.xyxx
          movc r22.x, r22.y, l(1.000000), r7.w
          movc r21.w, r21.w, r21.z, r14.w
          movc r23.xyzw, r22.yyyy, r17.xyzw, r18.xyzw
          mov r7.w, r22.x
          mov r20.xy, r21.xyxx
          mov r14.w, r21.w
          mov r19.xy, r23.yxyy
          mov r17.z, r23.z
          mov r18.w, r23.w
          break 
        endif 
        mov r16.w, r21.z
        mov r19.w, |r20.w|
        iadd r20.z, r20.z, l(1)
      endloop 
      mov r12.xy, r20.xyxx
      mov r2.w, r7.w
      mov r5.w, r14.w
      mov r19.yz, r19.yyxy
      mov r6.w, r18.w
      mov r4.w, r17.x
    endloop 
    rcp r2.z, r5.w
    add r2.z, -r12.z, r2.z
    add r4.w, -r12.z, r13.z
    div r2.z, |r2.z|, |r4.w|
    min r13.x, r2.z, l(1.000000)
    countbits r2.z, r19.y
    utof r2.z, r2.z
    add r2.z, r2.z, l(1.000000)
    iadd r4.w, -r19.z, l(32)
    utof r4.w, r4.w
    div r2.z, r2.z, r4.w
    min r13.y, r2.z, l(1.000000)
  else 
    mov r13.xy, l(1.000000,0,0,0)
    mov r2.w, l(0)
  endif 
  add r2.z, r2.y, l(-0.83333331)
  mul r2.z, r2.z, l(5.99999952)
  max r2.z, r2.z, l(0.000000)
  mad r4.w, r2.z, l(-2.000000), l(3.000000)
  mul r2.z, r2.z, r2.z
  mul r2.z, r2.z, r4.w
  add r0.z, r0.z, l(-60.000000)
  mul_sat r0.z, r0.z, l(0.01666667)
  mad r4.w, r0.z, l(-2.000000), l(3.000000)
  mul r0.z, r0.z, r0.z
  mul r0.z, r0.z, r4.w
  mul r0.z, r0.z, r2.z
  mul r0.z, r13.y, r0.z
  mad r12.zw, r12.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
  add r12.zw, |r12.zzzw|, l(0.000000, 0.000000, -0.500000, -0.500000)
  add_sat r12.zw, r12.zzzw, r12.zzzw
  mad r13.yz, r12.zzwz, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
  mul r12.zw, r12.zzzw, r12.zzzw
  mad r12.zw, -r13.yyyz, r12.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
  mul r2.z, r12.w, r12.z
  mul r0.z, r0.z, r2.z
  mul r2.z, r13.x, l(10.000000)
  min r2.z, r2.z, l(1.000000)
  add r4.w, -r2.w, l(1.000000)
  mul r4.w, r0.z, r4.w
  add r2.z, r2.z, l(-1.000000)
  mad r2.z, r4.w, r2.z, l(1.000000)
  mul r0.z, r2.w, r0.z
  lt r2.w, l(0.000000), r0.z
  if_nz r2.w
    sample_l_indexable(texture2d)(float,float,float,float) r12.zw, r12.xyxx, t22.zwxy, s4, l(0.000000)
    add r13.xy, |r12.zwzz|, l(-0.500000, -0.500000, 0.000000, 0.000000)
    add_sat r13.xy, r13.xyxx, r13.xyxx
    add r13.zw, |r12.zzzw|, |r12.zzzw|
    min r13.zw, r13.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    mul r13.zw, r13.zzzw, l(0.000000, 0.000000, 10.000000, 10.000000)
    mad r13.xy, r13.xyxx, l(30.000000, 30.000000, 0.000000, 0.000000), r13.zwzz
    ge r12.zw, r12.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    movc r12.zw, r12.zzzw, r13.xxxy, -r13.xxxy
    mad r12.xy, -r12.zwzz, cb1[44].zwzz, r12.xyxx
    sample_l_indexable(texture2d)(float,float,float,float) r12.xyz, r12.xyxx, t21.xyzw, s4, l(0.000000)
    mul r12.xyz, r12.xyzx, cb1[85].xxxx
    mul r12.xyz, r0.zzzz, r12.xyzx
  else 
    mov r12.xyz, l(0,0,0,0)
    mov r0.z, l(0)
  endif 
else 
  mov r12.xyz, l(0,0,0,0)
  mov r2.z, l(1.000000)
  mov r0.z, l(0)
endif 
add r2.w, -r2.y, l(1.000000)
mul r4.w, r2.w, l(5.000000)
mad r5.w, r2.w, l(5.000000), l(-2.500000)
mul r5.w, r5.w, l(0.400000)
max r5.w, r5.w, l(0.000000)
mul r5.w, r5.w, l(100.000000)
mad r13.xy, -r2.wwww, l(10.000000, 5.000000, 0.000000, 0.000000), l(6.857410, 7.085000, 0.000000, 0.000000)
exp r6.w, r13.x
mul r6.w, r2.x, r6.w
mul r6.w, r6.w, l(9.136810)
mul r7.w, r2.w, r4.w
mad r7.w, -r7.w, l(2.015905), r13.y
exp r7.w, r7.w
mul r7.w, r2.x, r7.w
mul r7.w, r7.w, l(9.708090)
max r6.w, r6.w, r7.w
max r6.w, r6.w, l(1.268160)
if_nz cb2[54].x
  ftou r7.w, cb1[44].x
  iadd r7.w, r7.w, l(7)
  ushr r7.w, r7.w, l(3)
  imad r7.w, r0.y, r7.w, r0.x
  bfi r7.w, l(27), l(5), r7.w, l(16)
  mov r13.xyzw, l(0,0,0,0)
  mov r14.xyzw, l(0,0,0,0)
  mov r15.xyzw, l(0,0,0,0)
  mov r16.xyzw, l(0,0,0,0)
  mov r17.xyzw, l(0,0,0,0)
  mov r18.xyzw, l(0,0,0,0)
  mov r19.xyzw, l(0,0,0,0)
  mov r20.xyzw, l(0,0,0,0)
  mov r21.xyzw, l(0,0,0,0)
  mov r22.xyzw, l(0,0,0,0)
  mov r23.xyzw, l(0,0,0,0)
  mov r24.xyz, l(0,0,0,0)
  mov r25.xy, l(0,0,0,0)
  mov r8.w, l(0)
  mov r26.z, l(0)
  mov r27.z, l(0)
  mov r9.w, l(0)
  mov r12.w, l(0)
  loop 
    uge r24.w, r12.w, cb2[0].y
    breakc_nz r24.w
    ushr r24.w, r12.w, l(5)
    iadd r24.w, r7.w, r24.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r24.w, r24.w, l(0), t26.xxxx
    mov r28.xyzw, r13.yxzw
    mov r29.xyzw, r14.xyzw
    mov r30.xyzw, r15.yzwx
    mov r31.xyzw, r16.xyzw
    mov r32.xyzw, r17.xyzw
    mov r33.xyzw, r18.zwxy
    mov r34.xyzw, r19.zwxy
    mov r35.xyzw, r21.zwxy
    mov r36.xyzw, r22.zwxy
    mov r37.xyz, r24.xyzx
    mov r25.zw, r25.yyyx
    mov r26.w, r8.w
    mov r27.w, r26.z
    mov r37.w, r27.z
    mov r38.x, r9.w
    mov r39.xyzw, r20.zwxy
    mov r40.xyzw, r23.zwxy
    mov r38.y, r24.w
    loop 
      breakc_z r38.y
      firstbit_lo r38.z, r38.y
      ishl r38.w, l(1), r38.z
      not r38.w, r38.w
      and r38.y, r38.w, r38.y
      iadd r38.z, r12.w, r38.z
      imul null, r38.z, r38.z, l(14)
      add r41.xyz, r4.xyzx, -cb10[r38.z + 0].xyzx
      dp3 r38.w, r41.xyzx, r41.xyzx
      sqrt r38.w, r38.w
      ge r38.w, cb2[54].y, r38.w
      if_nz r38.w
        mov r28.yzw, cb10[r38.z + 1].xxyz
        mov r28.x, cb10[r38.z + 0].w
        mov r29.yzw, cb10[r38.z + 2].xxyz
        mov r29.x, cb10[r38.z + 1].w
        mov r30.xyz, cb10[r38.z + 3].xyzx
        mov r30.w, cb10[r38.z + 4].z
        mov r31.yz, cb10[r38.z + 4].xxyx
        mov r31.x, cb10[r38.z + 3].w
        mov r31.w, cb10[r38.z + 6].x
        mov r32.yzw, cb10[r38.z + 5].xxyz
        mov r32.x, cb10[r38.z + 4].w
        mov r33.yz, cb10[r38.z + 7].yywy
        mov r33.x, cb10[r38.z + 6].y
        mov r33.w, cb10[r38.z + 8].x
        mov r34.xyz, cb10[r38.z + 8].yzwy
        mov r34.w, cb10[r38.z + 9].x
        mov r35.xyz, cb10[r38.z + 10].yzwy
        mov r35.w, cb10[r38.z + 11].x
        mov r36.xyz, cb10[r38.z + 11].yzwy
        mov r36.w, cb10[r38.z + 12].x
        mov r37.xyz, cb10[r38.z + 0].xyzx
        mov r41.xy, cb10[r38.z + 13].yzyy
        mov r26.w, l(-1)
        mov r27.w, cb10[r38.z + 2].w
        mov r37.w, cb10[r38.z + 5].w
        mov r38.x, cb10[r38.z + 7].z
        mov r39.xyz, cb10[r38.z + 9].yzwy
        mov r39.w, cb10[r38.z + 10].x
        mov r40.xyz, cb10[r38.z + 12].yzwy
        mov r40.w, cb10[r38.z + 13].x
        mov r25.zw, r41.xxxy
        break 
      endif 
    endloop 
    if_nz r26.w
      mov r13.xyzw, r28.yxzw
      mov r14.xyzw, r29.xyzw
      mov r15.xyzw, r30.wxyz
      mov r16.xyzw, r31.xyzw
      mov r17.xyzw, r32.xyzw
      mov r18.xyzw, r33.zwxy
      mov r19.xyzw, r34.zwxy
      mov r20.xyzw, r39.zwxy
      mov r21.xyzw, r35.zwxy
      mov r22.xyzw, r36.zwxy
      mov r23.xyzw, r40.zwxy
      mov r24.xyz, r37.xyzx
      mov r25.xy, r25.wzww
      mov r8.w, l(-1)
      mov r26.z, r27.w
      mov r27.z, r37.w
      mov r9.w, r38.x
      break 
    endif 
    iadd r12.w, r12.w, l(32)
    mov r13.xyzw, r28.yxzw
    mov r14.xyzw, r29.xyzw
    mov r15.xyzw, r30.wxyz
    mov r16.xyzw, r31.xyzw
    mov r17.xyzw, r32.xyzw
    mov r18.xyzw, r33.zwxy
    mov r19.xyzw, r34.zwxy
    mov r21.xyzw, r35.zwxy
    mov r22.xyzw, r36.zwxy
    mov r24.xyz, r37.xyzx
    mov r25.xy, r25.wzww
    mov r8.w, r26.w
    mov r26.z, r27.w
    mov r27.z, r37.w
    mov r9.w, r38.x
    mov r20.xyzw, r39.zwxy
    mov r23.xyzw, r40.zwxy
  endloop 
  mov r28.xy, r13.ywyy
  mov r26.x, r13.z
  mov r13.yz, r14.xxwx
  mov r26.y, r14.y
  mov r28.z, r14.z
  mov r14.xyz, r15.yzwy
  mov r15.yz, r17.xxyx
  mov r27.xy, r17.zwzz
  mov r17.xy, r18.zwzz
  mov r18.z, r19.z
  mov r19.z, r20.z
  mov r20.z, r21.z
  mov r21.z, r22.z
  mov r22.z, r23.z
  mov r23.z, r25.y
else 
  mov r8.w, l(0)
endif 
if_nz r8.w
  if_nz r1.w
    add r29.yzw, r24.xxyz, cb1[24].xxyz
    mov r29.x, l(16)
    store_structured u2.xyzw, cb2[52].x, l(880), r29.xyzw
  endif 
  add r24.xyz, r4.xyzx, -r24.xyzx
  and r7.w, r9.w, l(0x0000ffff)
  ubfe r12.w, l(6), l(25), r9.w
  imul null, r13.w, r7.w, l(6)
  dp3 r14.w, cb11[r13.w + 0].xyzx, r24.xyzx
  add_sat r14.w, r14.w, cb11[r13.w + 0].w
  dp3 r15.w, cb11[r13.w + 1].xyzx, r24.xyzx
  add_sat r15.w, r15.w, cb11[r13.w + 1].w
  mul r14.w, r14.w, r15.w
  dp3 r15.w, cb11[r13.w + 2].xyzx, r24.xyzx
  add_sat r15.w, r15.w, cb11[r13.w + 2].w
  mul r14.w, r14.w, r15.w
  dp3 r15.w, cb11[r13.w + 3].xyzx, r24.xyzx
  add_sat r15.w, r15.w, cb11[r13.w + 3].w
  mul r14.w, r14.w, r15.w
  dp3 r15.w, cb11[r13.w + 4].xyzx, r24.xyzx
  add_sat r15.w, r15.w, cb11[r13.w + 4].w
  mul r14.w, r14.w, r15.w
  dp3 r15.w, cb11[r13.w + 5].xyzx, r24.xyzx
  add_sat r13.w, r15.w, cb11[r13.w + 5].w
  mul r29.x, r13.w, r14.w
  and r13.w, r16.w, l(1)
  mov r29.yz, l(0,0,1.000000,0)
  movc r17.zw, r13.wwww, r29.xxxy, r29.zzzx
  mov r29.x, l(1.000000)
  mov r13.w, r16.w
  mov r30.xy, r17.zwzz
  mov r14.w, l(1)
  loop 
    ige r15.w, r14.w, r12.w
    breakc_nz r15.w
    iadd r15.w, r7.w, r14.w
    imul null, r15.w, r15.w, l(6)
    dp3 r18.w, cb11[r15.w + 0].xyzx, r24.xyzx
    add_sat r18.w, r18.w, cb11[r15.w + 0].w
    mul r18.w, r18.w, r30.x
    dp3 r24.w, cb11[r15.w + 1].xyzx, r24.xyzx
    add_sat r24.w, r24.w, cb11[r15.w + 1].w
    mul r18.w, r18.w, r24.w
    dp3 r24.w, cb11[r15.w + 2].xyzx, r24.xyzx
    add_sat r24.w, r24.w, cb11[r15.w + 2].w
    mul r18.w, r18.w, r24.w
    dp3 r24.w, cb11[r15.w + 3].xyzx, r24.xyzx
    add_sat r24.w, r24.w, cb11[r15.w + 3].w
    mul r18.w, r18.w, r24.w
    dp3 r24.w, cb11[r15.w + 4].xyzx, r24.xyzx
    add_sat r24.w, r24.w, cb11[r15.w + 4].w
    mul r18.w, r18.w, r24.w
    dp3 r24.w, cb11[r15.w + 5].xyzx, r24.xyzx
    add_sat r15.w, r24.w, cb11[r15.w + 5].w
    mul r30.x, r15.w, r18.w
    ushr r24.w, r13.w, l(2)
    ubfe r25.y, l(1), l(2), r13.w
    and r25.z, r24.w, l(2)
    max r25.w, r30.x, r30.y
    mad r15.w, -r18.w, r15.w, l(1.000000)
    mul r15.w, r15.w, r30.y
    movc r29.y, r25.z, r15.w, r25.w
    movc r30.xy, r25.yyyy, r30.xyxx, r29.xyxx
    iadd r14.w, r14.w, l(1)
    mov r13.w, r24.w
  endloop 
  mov_sat r30.y, r30.y
  mul r29.w, r17.x, r30.y
  lt r7.w, l(0.000000), r29.w
  if_nz r7.w
    if_nz r1.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r7.w, cb2[52].x, l(880), u2.xxxx
      or r7.w, r7.w, l(32)
      store_structured u2.x, cb2[52].x, l(880), r7.w
      store_structured u2.x, cb2[52].x, l(896), r29.w
    endif 
    mul r7.w, r17.y, r29.w
    dp3 r12.w, r11.xyzx, r18.xyzx
    dp3 r13.w, r24.xyzx, r18.xyzx
    add r13.w, -r19.w, r13.w
    ge r14.w, r13.w, l(0.000000)
    max r13.w, r5.w, |r13.w|
    movc r13.w, r14.w, r13.w, -r13.w
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.w, r12.w
    min r12.w, |r12.w|, l(131072.000000)
    dp3 r13.w, r11.xyzx, r19.xyzx
    dp3 r14.w, r24.xyzx, r19.xyzx
    add r14.w, -r20.w, r14.w
    ge r15.w, r14.w, l(0.000000)
    max r14.w, r5.w, |r14.w|
    movc r14.w, r15.w, r14.w, -r14.w
    max r13.w, -r13.w, l(0.00000010)
    div r13.w, r14.w, r13.w
    min r12.w, r12.w, |r13.w|
    dp3 r13.w, r11.xyzx, r20.xyzx
    dp3 r14.w, r24.xyzx, r20.xyzx
    add r14.w, -r21.w, r14.w
    ge r15.w, r14.w, l(0.000000)
    max r14.w, r5.w, |r14.w|
    movc r14.w, r15.w, r14.w, -r14.w
    max r13.w, -r13.w, l(0.00000010)
    div r13.w, r14.w, r13.w
    min r12.w, r12.w, |r13.w|
    dp3 r13.w, r11.xyzx, r21.xyzx
    dp3 r14.w, r24.xyzx, r21.xyzx
    add r14.w, -r22.w, r14.w
    ge r15.w, r14.w, l(0.000000)
    max r14.w, r5.w, |r14.w|
    movc r14.w, r15.w, r14.w, -r14.w
    max r13.w, -r13.w, l(0.00000010)
    div r13.w, r14.w, r13.w
    min r12.w, r12.w, |r13.w|
    dp3 r13.w, r11.xyzx, r22.xyzx
    dp3 r14.w, r24.xyzx, r22.xyzx
    add r14.w, -r23.w, r14.w
    ge r15.w, r14.w, l(0.000000)
    max r14.w, r5.w, |r14.w|
    movc r14.w, r15.w, r14.w, -r14.w
    max r13.w, -r13.w, l(0.00000010)
    div r13.w, r14.w, r13.w
    min r12.w, r12.w, |r13.w|
    dp3 r13.w, r11.xyzx, r23.xyzx
    dp3 r14.w, r24.xyzx, r23.xyzx
    add r14.w, -r25.x, r14.w
    ge r15.w, r14.w, l(0.000000)
    max r14.w, r5.w, |r14.w|
    movc r14.w, r15.w, r14.w, -r14.w
    max r13.w, -r13.w, l(0.00000010)
    div r13.w, r14.w, r13.w
    min r12.w, r12.w, |r13.w|
    add r16.xyz, r16.xyzx, r24.xyzx
    mad r16.xyz, r11.xyzx, r12.wwww, r16.xyzx
    dp3 r13.w, r16.xyzx, r16.xyzx
    sqrt r13.w, r13.w
    div r12.w, r12.w, r13.w
    add r12.w, r12.w, r12.w
    sqrt r12.w, r12.w
    mad r12.w, r2.w, l(5.000000), r12.w
    add r12.w, r12.w, l(-0.844800)
    dp3 r17.x, r16.xyzx, r28.xyzx
    dp3 r17.y, r16.xyzx, r13.xyzx
    dp3 r17.z, r16.xyzx, r26.xyzx
    ubfe r9.w, l(9), l(16), r9.w
    utof r17.w, r9.w
    sample_l_indexable(texturecubearray)(float,float,float,float) r16.xyz, r17.xyzw, t8.xyzw, s2, r12.w
    and r18.xyz, r16.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r18.xyz, r18.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r9.w, r18.y, r18.x
    or r9.w, r18.z, r9.w
    movc r16.xyz, r9.wwww, l(1.000000,1.000000,0,0), r16.xyzx
    dp3 r18.x, r24.xyzx, r28.xyzx
    dp3 r18.y, r24.xyzx, r13.xyzx
    dp3 r18.z, r24.xyzx, r26.xyzx
    mad_sat r14.xyz, r18.xyzx, r14.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mad r14.xyz, r14.xyzx, r15.xyzx, r27.xyzx
    dp3 r17.x, r10.xyzx, r28.xyzx
    dp3 r17.y, r10.xyzx, r13.xyzx
    dp3 r17.z, r10.xyzx, r26.xyzx
    lt r13.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r17.xyzx
    movc r15.z, r13.x, l(0), l(0.500000)
    mov r15.xy, l(0,0,0,0)
    add r15.xyz, r14.xyzx, r15.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r15.xyz, r15.xyzx, t17.xyzw, s4, l(0.000000)
    mul r18.xyz, r17.xyzx, r17.xyzx
    mul r18.xyz, r7.wwww, r18.xyzx
    movc r19.z, r13.y, l(0), l(0.500000)
    mov r19.xy, l(0,0,0,0)
    add r13.xyw, r14.xyxz, r19.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r13.xyw, r13.xywx, t18.xywz, s4, l(0.000000)
    mul r13.xyw, r18.yyyy, r13.xyxw
    mad r13.xyw, r15.xyxz, r18.xxxx, r13.xyxw
    movc r15.z, r13.z, l(0), l(0.500000)
    mov r15.xy, l(0,0,0,0)
    add r14.xyz, r14.xyzx, r15.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r14.xyz, r14.xyzx, t19.xyzw, s4, l(0.000000)
    mad r13.xyz, r14.xyzx, r18.zzzz, r13.xywx
    sample_l_indexable(texturecubearray)(float,float,float,float) r14.xyz, r17.xyzw, t8.xyzw, s2, l(6.000000)
    and r15.xyz, r14.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r15.xyz, r15.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r9.w, r15.y, r15.x
    or r9.w, r15.z, r9.w
    movc r14.xyz, r9.wwww, l(1.000000,1.000000,0,0), r14.xyzx
    mul r13.xyz, r13.xyzx, r14.xyzx
    dp3 r9.w, r13.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r12.w, r6.w, r9.w
    mul r13.xyz, r7.wwww, r16.xyzx
    dp3 r7.w, r13.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r7.w, r6.w, r9.w, r7.w
    div r7.w, r12.w, r7.w
    mul r29.xyz, r7.wwww, r13.xyzx
    mov r7.w, l(257)
  else 
    mov r29.xyzw, l(0,0,0,0)
    mov r7.w, l(1)
  endif 
  mov r9.w, l(-1)
else 
  mov r29.xyzw, l(0,0,0,0)
  mov r7.w, l(0)
endif 
and r8.w, r8.w, r9.w
if_z r8.w
  iadd r8.w, cb2[0].y, -cb2[58].x
  ftou r9.w, cb1[44].x
  iadd r9.w, r9.w, l(7)
  ushr r9.w, r9.w, l(3)
  imad r9.w, r0.y, r9.w, r0.x
  bfi r9.w, l(27), l(5), r9.w, l(16)
  and r12.w, r8.w, l(-32)
  iadd r13.x, r8.w, -r12.w
  and r13.y, cb2[0].y, l(-32)
  iadd r13.z, -r13.y, cb2[0].y
  mov r14.x, l(16)
  mov r15.yz, l(0,0,1.000000,0)
  mov r16.xy, l(0,0,0,0)
  mov r17.xz, l(1.000000,0,1.000000,0)
  mov r18.xy, l(0,0,0,0)
  mov r19.xy, l(0,0,0,0)
  mov r20.xyz, l(0,0,0,0)
  mov r20.w, r29.x
  mov r21.xyz, r29.yzwy
  mov r21.w, r7.w
  mov r13.w, r12.w
  loop 
    uge r15.w, r13.w, cb2[0].y
    breakc_nz r15.w
    ushr r15.w, r13.w, l(5)
    iadd r15.w, r9.w, r15.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.w, r15.w, l(0), t26.xxxx
    ieq r16.w, r12.w, r13.w
    bfi r18.w, r13.x, l(0), l(0), r15.w
    movc r15.w, r16.w, r18.w, r15.w
    ieq r16.w, r13.y, r13.w
    ubfe r18.w, r13.z, l(0), r15.w
    movc r15.w, r16.w, r18.w, r15.w
    mov r22.xyzw, r20.xyzw
    mov r23.xyzw, r21.xyzw
    mov r16.w, r15.w
    loop 
      breakc_z r16.w
      firstbit_lo r18.w, r16.w
      ishl r19.w, l(1), r18.w
      not r19.w, r19.w
      and r16.w, r16.w, r19.w
      iadd r18.w, r13.w, r18.w
      imul null, r18.w, r18.w, l(14)
      and r19.w, r23.w, l(255)
      ult r24.x, r19.w, l(32)
      and r24.x, r1.w, r24.x
      if_nz r24.x
        imad r19.w, r19.w, l(20), l(880)
        add r14.yzw, cb1[24].xxyz, cb10[r18.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r19.w, r14.xyzw
      endif 
      iadd r24.w, r23.w, l(1)
      add r14.yzw, r4.xxyz, -cb10[r18.w + 0].xxyz
      and r19.w, l(0x0000ffff), cb10[r18.w + 7].z
      ubfe r25.x, l(6), l(25), cb10[r18.w + 7].z
      imul null, r25.y, r19.w, l(6)
      dp3 r25.z, cb11[r25.y + 0].xyzx, r14.yzwy
      add_sat r25.z, r25.z, cb11[r25.y + 0].w
      dp3 r25.w, cb11[r25.y + 1].xyzx, r14.yzwy
      add_sat r25.w, r25.w, cb11[r25.y + 1].w
      mul r25.z, r25.w, r25.z
      dp3 r25.w, cb11[r25.y + 2].xyzx, r14.yzwy
      add_sat r25.w, r25.w, cb11[r25.y + 2].w
      mul r25.z, r25.w, r25.z
      dp3 r25.w, cb11[r25.y + 3].xyzx, r14.yzwy
      add_sat r25.w, r25.w, cb11[r25.y + 3].w
      mul r25.z, r25.w, r25.z
      dp3 r25.w, cb11[r25.y + 4].xyzx, r14.yzwy
      add_sat r25.w, r25.w, cb11[r25.y + 4].w
      mul r25.z, r25.w, r25.z
      dp3 r25.w, cb11[r25.y + 5].xyzx, r14.yzwy
      add_sat r25.y, r25.w, cb11[r25.y + 5].w
      mul r15.x, r25.y, r25.z
      and r25.y, l(1), cb10[r18.w + 6].x
      movc r25.yz, r25.yyyy, r15.xxyx, r15.zzxz
      mov r15.x, cb10[r18.w + 6].x
      mov r26.xy, r25.yzyy
      mov r25.w, l(1)
      loop 
        ige r26.z, r25.w, r25.x
        breakc_nz r26.z
        iadd r26.z, r19.w, r25.w
        imul null, r26.z, r26.z, l(6)
        dp3 r26.w, cb11[r26.z + 0].xyzx, r14.yzwy
        add_sat r26.w, r26.w, cb11[r26.z + 0].w
        mul r26.w, r26.w, r26.x
        dp3 r27.x, cb11[r26.z + 1].xyzx, r14.yzwy
        add_sat r27.x, r27.x, cb11[r26.z + 1].w
        mul r26.w, r26.w, r27.x
        dp3 r27.x, cb11[r26.z + 2].xyzx, r14.yzwy
        add_sat r27.x, r27.x, cb11[r26.z + 2].w
        mul r26.w, r26.w, r27.x
        dp3 r27.x, cb11[r26.z + 3].xyzx, r14.yzwy
        add_sat r27.x, r27.x, cb11[r26.z + 3].w
        mul r26.w, r26.w, r27.x
        dp3 r27.x, cb11[r26.z + 4].xyzx, r14.yzwy
        add_sat r27.x, r27.x, cb11[r26.z + 4].w
        mul r26.w, r26.w, r27.x
        dp3 r27.x, cb11[r26.z + 5].xyzx, r14.yzwy
        add_sat r26.z, r27.x, cb11[r26.z + 5].w
        mul r26.x, r26.z, r26.w
        ushr r27.x, r15.x, l(2)
        ubfe r27.y, l(1), l(2), r15.x
        and r27.z, r27.x, l(2)
        max r27.w, r26.x, r26.y
        mad r26.z, -r26.w, r26.z, l(1.000000)
        mul r26.z, r26.z, r26.y
        movc r17.y, r27.z, r26.z, r27.w
        movc r26.xy, r27.yyyy, r26.xyxx, r17.xyxx
        iadd r25.w, r25.w, l(1)
        mov r15.x, r27.x
      endloop 
      mov_sat r26.y, r26.y
      mul r15.x, r26.y, cb10[r18.w + 6].y
      lt r17.y, l(0.000000), r15.x
      if_nz r17.y
        and r17.y, r24.w, l(255)
        iadd r19.w, r17.y, l(-1)
        ult r19.w, r19.w, l(32)
        and r19.w, r1.w, r19.w
        if_nz r19.w
          imad r25.xy, r17.yyyy, l(20, 20, 0, 0), l(860, 876, 0, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.y, cb2[52].x, r25.x, u2.xxxx
          or r17.y, r17.y, l(32)
          store_structured u2.x, cb2[52].x, r25.x, r17.y
          store_structured u2.x, cb2[52].x, r25.y, r15.x
        endif 
        iadd r23.w, r23.w, l(257)
        mad r23.z, r26.y, cb10[r18.w + 6].y, r23.z
        mul r15.x, r15.x, cb10[r18.w + 7].y
        mov r25.x, cb10[r18.w + 7].w
        mov r25.yz, cb10[r18.w + 8].xxyx
        dp3 r17.y, r11.xyzx, r25.xyzx
        dp3 r19.w, r14.yzwy, r25.xyzx
        add r19.w, r19.w, -cb10[r18.w + 8].z
        ge r25.x, r19.w, l(0.000000)
        max r19.w, r5.w, |r19.w|
        movc r19.w, r25.x, r19.w, -r19.w
        max r17.y, -r17.y, l(0.00000010)
        div r17.y, r19.w, r17.y
        min r17.y, |r17.y|, l(131072.000000)
        mov r25.x, cb10[r18.w + 8].w
        mov r25.yz, cb10[r18.w + 9].xxyx
        dp3 r19.w, r11.xyzx, r25.xyzx
        dp3 r25.x, r14.yzwy, r25.xyzx
        add r25.x, r25.x, -cb10[r18.w + 9].z
        ge r25.y, r25.x, l(0.000000)
        max r25.x, r5.w, |r25.x|
        movc r25.x, r25.y, r25.x, -r25.x
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r25.x, r19.w
        min r17.y, r17.y, |r19.w|
        mov r25.x, cb10[r18.w + 9].w
        mov r25.yz, cb10[r18.w + 10].xxyx
        dp3 r19.w, r11.xyzx, r25.xyzx
        dp3 r25.x, r14.yzwy, r25.xyzx
        add r25.x, r25.x, -cb10[r18.w + 10].z
        ge r25.y, r25.x, l(0.000000)
        max r25.x, r5.w, |r25.x|
        movc r25.x, r25.y, r25.x, -r25.x
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r25.x, r19.w
        min r17.y, r17.y, |r19.w|
        mov r25.x, cb10[r18.w + 10].w
        mov r25.yz, cb10[r18.w + 11].xxyx
        dp3 r19.w, r11.xyzx, r25.xyzx
        dp3 r25.x, r14.yzwy, r25.xyzx
        add r25.x, r25.x, -cb10[r18.w + 11].z
        ge r25.y, r25.x, l(0.000000)
        max r25.x, r5.w, |r25.x|
        movc r25.x, r25.y, r25.x, -r25.x
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r25.x, r19.w
        min r17.y, r17.y, |r19.w|
        mov r25.x, cb10[r18.w + 11].w
        mov r25.yz, cb10[r18.w + 12].xxyx
        dp3 r19.w, r11.xyzx, r25.xyzx
        dp3 r25.x, r14.yzwy, r25.xyzx
        add r25.x, r25.x, -cb10[r18.w + 12].z
        ge r25.y, r25.x, l(0.000000)
        max r25.x, r5.w, |r25.x|
        movc r25.x, r25.y, r25.x, -r25.x
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r25.x, r19.w
        min r17.y, r17.y, |r19.w|
        mov r25.x, cb10[r18.w + 12].w
        mov r25.yz, cb10[r18.w + 13].xxyx
        dp3 r19.w, r11.xyzx, r25.xyzx
        dp3 r25.x, r14.yzwy, r25.xyzx
        add r25.x, r25.x, -cb10[r18.w + 13].z
        ge r25.y, r25.x, l(0.000000)
        max r25.x, r5.w, |r25.x|
        movc r25.x, r25.y, r25.x, -r25.x
        max r19.w, -r19.w, l(0.00000010)
        div r19.w, r25.x, r19.w
        min r17.y, r17.y, |r19.w|
        add r25.x, r14.y, cb10[r18.w + 3].w
        add r25.yz, r14.zzwz, cb10[r18.w + 4].xxyx
        mad r25.xyz, r11.xyzx, r17.yyyy, r25.xyzx
        dp3 r19.w, r25.xyzx, r25.xyzx
        sqrt r19.w, r19.w
        div r17.y, r17.y, r19.w
        add r17.y, r17.y, r17.y
        sqrt r17.y, r17.y
        mad r17.y, r2.w, l(5.000000), r17.y
        add r17.y, r17.y, l(-0.844800)
        mov r27.x, cb10[r18.w + 0].w
        mov r27.y, cb10[r18.w + 1].z
        mov r27.z, cb10[r18.w + 2].y
        dp3 r28.x, r25.xyzx, r27.xyzx
        mov r30.xy, cb10[r18.w + 1].xwxx
        mov r30.z, cb10[r18.w + 2].z
        dp3 r28.y, r25.xyzx, r30.xyzx
        mov r31.x, cb10[r18.w + 1].y
        mov r31.yz, cb10[r18.w + 2].xxwx
        dp3 r28.z, r25.xyzx, r31.xyzx
        ubfe r19.w, l(9), l(16), cb10[r18.w + 7].z
        utof r28.w, r19.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r25.xyz, r28.xyzw, t8.xyzw, s2, r17.y
        and r26.xzw, r25.xxyz, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
        ieq r26.xzw, r26.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
        or r17.y, r26.z, r26.x
        or r17.y, r26.w, r17.y
        movc r25.xyz, r17.yyyy, l(1.000000,1.000000,0,0), r25.xyzx
        dp3 r32.x, r14.yzwy, r27.xyzx
        dp3 r32.y, r14.yzwy, r30.xyzx
        dp3 r32.z, r14.yzwy, r31.xyzx
        mad_sat r14.yzw, r32.xxyz, cb10[r18.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r32.xy, r14.yzyy, cb10[r18.w + 4].zwzz
        mul r32.z, r14.w, cb10[r18.w + 5].x
        add r14.yzw, r32.xxyz, cb10[r18.w + 5].yyzw
        dp3 r28.x, r10.xyzx, r27.xyzx
        dp3 r28.y, r10.xyzx, r30.xyzx
        dp3 r28.z, r10.xyzx, r31.xyzx
        lt r26.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r28.xxyz
        movc r16.z, r26.x, l(0), l(0.500000)
        add r27.xyz, r14.yzwy, r16.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r27.xyz, r27.xyzx, t17.xyzw, s4, l(0.000000)
        mul r30.xyz, r28.xyzx, r28.xyzx
        mul r30.xyz, r15.xxxx, r30.xyzx
        movc r18.z, r26.z, l(0), l(0.500000)
        add r31.xyz, r14.yzwy, r18.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r31.xyz, r31.xyzx, t18.xyzw, s4, l(0.000000)
        mul r31.xyz, r30.yyyy, r31.xyzx
        mad r27.xyz, r27.xyzx, r30.xxxx, r31.xyzx
        movc r19.z, r26.w, l(0), l(0.500000)
        add r14.yzw, r14.yyzw, r19.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r14.yzw, r14.yzwy, t19.wxyz, s4, l(0.000000)
        mad r14.yzw, r14.yyzw, r30.zzzz, r27.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r26.xzw, r28.xyzw, t8.xwyz, s2, l(6.000000)
        and r27.xyz, r26.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r27.xyz, r27.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r16.z, r27.y, r27.x
        or r16.z, r27.z, r16.z
        movc r26.xzw, r16.zzzz, l(1.000000,0,1.000000,0), r26.xxzw
        mul r27.xyz, r14.yzwy, r26.xzwx
        dp3 r16.z, r27.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r22.xyz, r14.yzwy, r26.xzwx, r22.xyzx
        mul r14.y, r6.w, r16.z
        mul r25.xyz, r15.xxxx, r25.xyzx
        dp3 r14.z, r25.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r14.z, r6.w, r16.z, r14.z
        div r14.y, r14.y, r14.z
        mov r27.x, r22.w
        mov r27.yz, r23.xxyx
        mad r14.yzw, r25.xxyz, r14.yyyy, r27.xxyz
        mov r22.w, r14.y
        mov r23.xy, r14.zwzz
      else 
        mov r24.xyz, r23.xyzx
        mov r23.xyzw, r24.xyzw
      endif 
    endloop 
    mov r20.xyzw, r22.xyzw
    mov r21.xyzw, r23.xyzw
    iadd r13.w, r13.w, l(32)
  endloop 
  mov r14.x, l(16)
  mov r15.yz, l(0,0,1.000000,0)
  mov r16.xy, l(0,0,0,0)
  mov r18.xy, l(0,0,0,0)
  mov r19.xy, l(0,0,0,0)
  mov r13.yzw, r20.xxyz
  mov r22.x, r20.w
  mov r22.yz, r21.xxyx
  mov r23.xyz, r21.zwzz
  mov r15.w, l(0)
  loop 
    uge r16.w, r15.w, r8.w
    breakc_nz r16.w
    ushr r16.w, r15.w, l(5)
    iadd r16.w, r9.w, r16.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.w, r16.w, l(0), t26.xxxx
    ieq r17.x, r12.w, r15.w
    ubfe r17.y, r13.x, l(0), r16.w
    movc r16.w, r17.x, r17.y, r16.w
    mov r24.xyz, r13.yzwy
    mov r25.xyz, r22.xyzx
    mov r26.xyz, r23.xzyx
    mov r17.x, r16.w
    loop 
      breakc_z r17.x
      firstbit_lo r17.y, r17.x
      ishl r18.w, l(1), r17.y
      not r18.w, r18.w
      and r17.x, r17.x, r18.w
      iadd r17.y, r15.w, r17.y
      imul null, r17.y, r17.y, l(14)
      and r18.w, r26.z, l(255)
      ult r19.w, r18.w, l(32)
      and r19.w, r1.w, r19.w
      if_nz r19.w
        imad r18.w, r18.w, l(20), l(880)
        add r14.yzw, cb1[24].xxyz, cb10[r17.y + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r18.w, r14.xyzw
      endif 
      iadd r27.y, r26.z, l(1)
      add r14.yzw, r4.xxyz, -cb10[r17.y + 0].xxyz
      and r18.w, l(0x0000ffff), cb10[r17.y + 7].z
      ubfe r19.w, l(6), l(25), cb10[r17.y + 7].z
      imul null, r22.w, r18.w, l(6)
      dp3 r23.w, cb11[r22.w + 0].xyzx, r14.yzwy
      add_sat r23.w, r23.w, cb11[r22.w + 0].w
      dp3 r24.w, cb11[r22.w + 1].xyzx, r14.yzwy
      add_sat r24.w, r24.w, cb11[r22.w + 1].w
      mul r23.w, r23.w, r24.w
      dp3 r24.w, cb11[r22.w + 2].xyzx, r14.yzwy
      add_sat r24.w, r24.w, cb11[r22.w + 2].w
      mul r23.w, r23.w, r24.w
      dp3 r24.w, cb11[r22.w + 3].xyzx, r14.yzwy
      add_sat r24.w, r24.w, cb11[r22.w + 3].w
      mul r23.w, r23.w, r24.w
      dp3 r24.w, cb11[r22.w + 4].xyzx, r14.yzwy
      add_sat r24.w, r24.w, cb11[r22.w + 4].w
      mul r23.w, r23.w, r24.w
      dp3 r24.w, cb11[r22.w + 5].xyzx, r14.yzwy
      add_sat r22.w, r24.w, cb11[r22.w + 5].w
      mul r15.x, r22.w, r23.w
      and r22.w, l(1), cb10[r17.y + 6].x
      movc r27.zw, r22.wwww, r15.xxxy, r15.zzzx
      mov r15.x, cb10[r17.y + 6].x
      mov r28.xy, r27.zwzz
      mov r22.w, l(1)
      loop 
        ige r23.w, r22.w, r19.w
        breakc_nz r23.w
        iadd r23.w, r18.w, r22.w
        imul null, r23.w, r23.w, l(6)
        dp3 r24.w, cb11[r23.w + 0].xyzx, r14.yzwy
        add_sat r24.w, r24.w, cb11[r23.w + 0].w
        mul r24.w, r24.w, r28.x
        dp3 r25.w, cb11[r23.w + 1].xyzx, r14.yzwy
        add_sat r25.w, r25.w, cb11[r23.w + 1].w
        mul r24.w, r24.w, r25.w
        dp3 r25.w, cb11[r23.w + 2].xyzx, r14.yzwy
        add_sat r25.w, r25.w, cb11[r23.w + 2].w
        mul r24.w, r24.w, r25.w
        dp3 r25.w, cb11[r23.w + 3].xyzx, r14.yzwy
        add_sat r25.w, r25.w, cb11[r23.w + 3].w
        mul r24.w, r24.w, r25.w
        dp3 r25.w, cb11[r23.w + 4].xyzx, r14.yzwy
        add_sat r25.w, r25.w, cb11[r23.w + 4].w
        mul r24.w, r24.w, r25.w
        dp3 r25.w, cb11[r23.w + 5].xyzx, r14.yzwy
        add_sat r23.w, r25.w, cb11[r23.w + 5].w
        mul r28.x, r23.w, r24.w
        ushr r25.w, r15.x, l(2)
        ubfe r26.w, l(1), l(2), r15.x
        and r28.z, r25.w, l(2)
        max r28.w, r28.x, r28.y
        mad r23.w, -r24.w, r23.w, l(1.000000)
        mul r23.w, r23.w, r28.y
        movc r17.w, r28.z, r23.w, r28.w
        movc r28.xy, r26.wwww, r28.xyxx, r17.zwzz
        iadd r22.w, r22.w, l(1)
        mov r15.x, r25.w
      endloop 
      add_sat r15.x, -r26.y, r28.y
      mul r17.w, r15.x, cb10[r17.y + 6].y
      lt r18.w, l(0.000000), r17.w
      if_nz r18.w
        and r18.w, r27.y, l(255)
        iadd r19.w, r18.w, l(-1)
        ult r19.w, r19.w, l(32)
        and r19.w, r1.w, r19.w
        if_nz r19.w
          imad r27.zw, r18.wwww, l(0, 0, 20, 20), l(0, 0, 860, 876)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r18.w, cb2[52].x, r27.z, u2.xxxx
          or r18.w, r18.w, l(32)
          store_structured u2.x, cb2[52].x, r27.z, r18.w
          store_structured u2.x, cb2[52].x, r27.w, r17.w
        endif 
        iadd r26.z, r26.z, l(257)
        mad r26.x, r15.x, cb10[r17.y + 6].y, r26.x
        mul r15.x, r17.w, cb10[r17.y + 7].y
        mov r30.x, cb10[r17.y + 7].w
        mov r30.yz, cb10[r17.y + 8].xxyx
        dp3 r17.w, r11.xyzx, r30.xyzx
        dp3 r18.w, r14.yzwy, r30.xyzx
        add r18.w, r18.w, -cb10[r17.y + 8].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r5.w, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.w, |r17.w|, l(131072.000000)
        mov r30.x, cb10[r17.y + 8].w
        mov r30.yz, cb10[r17.y + 9].xxyx
        dp3 r18.w, r11.xyzx, r30.xyzx
        dp3 r19.w, r14.yzwy, r30.xyzx
        add r19.w, r19.w, -cb10[r17.y + 9].z
        ge r22.w, r19.w, l(0.000000)
        max r19.w, r5.w, |r19.w|
        movc r19.w, r22.w, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r17.w, r17.w, |r18.w|
        mov r30.x, cb10[r17.y + 9].w
        mov r30.yz, cb10[r17.y + 10].xxyx
        dp3 r18.w, r11.xyzx, r30.xyzx
        dp3 r19.w, r14.yzwy, r30.xyzx
        add r19.w, r19.w, -cb10[r17.y + 10].z
        ge r22.w, r19.w, l(0.000000)
        max r19.w, r5.w, |r19.w|
        movc r19.w, r22.w, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r17.w, r17.w, |r18.w|
        mov r30.x, cb10[r17.y + 10].w
        mov r30.yz, cb10[r17.y + 11].xxyx
        dp3 r18.w, r11.xyzx, r30.xyzx
        dp3 r19.w, r14.yzwy, r30.xyzx
        add r19.w, r19.w, -cb10[r17.y + 11].z
        ge r22.w, r19.w, l(0.000000)
        max r19.w, r5.w, |r19.w|
        movc r19.w, r22.w, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r17.w, r17.w, |r18.w|
        mov r30.x, cb10[r17.y + 11].w
        mov r30.yz, cb10[r17.y + 12].xxyx
        dp3 r18.w, r11.xyzx, r30.xyzx
        dp3 r19.w, r14.yzwy, r30.xyzx
        add r19.w, r19.w, -cb10[r17.y + 12].z
        ge r22.w, r19.w, l(0.000000)
        max r19.w, r5.w, |r19.w|
        movc r19.w, r22.w, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r17.w, r17.w, |r18.w|
        mov r30.x, cb10[r17.y + 12].w
        mov r30.yz, cb10[r17.y + 13].xxyx
        dp3 r18.w, r11.xyzx, r30.xyzx
        dp3 r19.w, r14.yzwy, r30.xyzx
        add r19.w, r19.w, -cb10[r17.y + 13].z
        ge r22.w, r19.w, l(0.000000)
        max r19.w, r5.w, |r19.w|
        movc r19.w, r22.w, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r17.w, r17.w, |r18.w|
        add r30.x, r14.y, cb10[r17.y + 3].w
        add r30.yz, r14.zzwz, cb10[r17.y + 4].xxyx
        mad r28.xzw, r11.xxyz, r17.wwww, r30.xxyz
        dp3 r18.w, r28.xzwx, r28.xzwx
        sqrt r18.w, r18.w
        div r17.w, r17.w, r18.w
        add r17.w, r17.w, r17.w
        sqrt r17.w, r17.w
        mad r17.w, r2.w, l(5.000000), r17.w
        add r17.w, r17.w, l(-0.844800)
        mov r30.x, cb10[r17.y + 0].w
        mov r30.y, cb10[r17.y + 1].z
        mov r30.z, cb10[r17.y + 2].y
        dp3 r31.x, r28.xzwx, r30.xyzx
        mov r32.xy, cb10[r17.y + 1].xwxx
        mov r32.z, cb10[r17.y + 2].z
        dp3 r31.y, r28.xzwx, r32.xyzx
        mov r33.x, cb10[r17.y + 1].y
        mov r33.yz, cb10[r17.y + 2].xxwx
        dp3 r31.z, r28.xzwx, r33.xyzx
        ubfe r18.w, l(9), l(16), cb10[r17.y + 7].z
        utof r31.w, r18.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r28.xzw, r31.xyzw, t8.xwyz, s2, r17.w
        and r34.xyz, r28.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r34.xyz, r34.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r17.w, r34.y, r34.x
        or r17.w, r34.z, r17.w
        movc r28.xzw, r17.wwww, l(1.000000,0,1.000000,0), r28.xxzw
        dp3 r34.x, r14.yzwy, r30.xyzx
        dp3 r34.y, r14.yzwy, r32.xyzx
        dp3 r34.z, r14.yzwy, r33.xyzx
        mad_sat r14.yzw, r34.xxyz, cb10[r17.y + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r34.xy, r14.yzyy, cb10[r17.y + 4].zwzz
        mul r34.z, r14.w, cb10[r17.y + 5].x
        add r14.yzw, r34.xxyz, cb10[r17.y + 5].yyzw
        dp3 r31.x, r10.xyzx, r30.xyzx
        dp3 r31.y, r10.xyzx, r32.xyzx
        dp3 r31.z, r10.xyzx, r33.xyzx
        lt r30.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r31.xyzx
        movc r16.z, r30.x, l(0), l(0.500000)
        add r32.xyz, r14.yzwy, r16.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r32.xyz, r32.xyzx, t17.xyzw, s4, l(0.000000)
        mul r33.xyz, r31.xyzx, r31.xyzx
        mul r33.xyz, r15.xxxx, r33.xyzx
        movc r18.z, r30.y, l(0), l(0.500000)
        add r30.xyw, r14.yzyw, r18.xyxz
        sample_l_indexable(texture3d)(float,float,float,float) r30.xyw, r30.xywx, t18.xywz, s4, l(0.000000)
        mul r30.xyw, r33.yyyy, r30.xyxw
        mad r30.xyw, r32.xyxz, r33.xxxx, r30.xyxw
        movc r19.z, r30.z, l(0), l(0.500000)
        add r14.yzw, r14.yyzw, r19.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r14.yzw, r14.yzwy, t19.wxyz, s4, l(0.000000)
        mad r14.yzw, r14.yyzw, r33.zzzz, r30.xxyw
        sample_l_indexable(texturecubearray)(float,float,float,float) r30.xyz, r31.xyzw, t8.xyzw, s2, l(6.000000)
        and r31.xyz, r30.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r31.xyz, r31.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r16.z, r31.y, r31.x
        or r16.z, r31.z, r16.z
        movc r30.xyz, r16.zzzz, l(1.000000,1.000000,0,0), r30.xyzx
        mul r31.xyz, r14.yzwy, r30.xyzx
        dp3 r16.z, r31.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r24.xyz, r14.yzwy, r30.xyzx, r24.xyzx
        mul r14.y, r6.w, r16.z
        mul r28.xzw, r15.xxxx, r28.xxzw
        dp3 r14.z, r28.xzwx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r14.z, r6.w, r16.z, r14.z
        div r14.y, r14.y, r14.z
        mad r25.xyz, r28.xzwx, r14.yyyy, r25.xyzx
      else 
        mov r27.x, r26.x
        mov r26.xz, r27.xxyx
      endif 
    endloop 
    mov r13.yzw, r24.xxyz
    mov r22.xyz, r25.xyzx
    mov r23.xy, r26.xzxx
    iadd r15.w, r15.w, l(32)
  endloop 
  ge r2.w, r21.z, l(1.000000)
  and r5.w, r21.w, l(0x0000ff00)
  bfi r5.w, l(8), l(0), r23.y, r5.w
  movc r7.w, r2.w, r5.w, r23.y
  max r2.w, r23.x, l(1.000000)
  rcp r2.w, r2.w
  mov_sat r23.x, r23.x
  mul r14.xyz, r2.wwww, r13.yzwy
  mul r29.xyz, r2.wwww, r22.xyzx
  lt r5.w, r23.x, l(0.990000)
  if_nz r5.w
    iadd r7.w, r7.w, l(256)
    add r5.w, -r23.x, l(1.000000)
    mul r6.w, r5.w, cb2[19].x
    add r15.xyz, r4.xyzx, -cb2[35].xyzx
    mul r16.x, r15.x, cb2[35].w
    mul r16.yz, r15.yyzy, cb2[36].xxyx
    add_sat r15.xyz, r16.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r16.xy, r15.xyxx, cb2[36].zwzz
    mul r16.z, r15.z, cb2[37].x
    add r15.xyz, r16.xyzx, cb2[37].yzwy
    lt r16.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
    movc r16.xyz, r16.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
    mov r16.w, l(0)
    add r17.xyz, r15.xyzx, r16.wwxw
    sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t17.xyzw, s4, l(0.000000)
    mul r18.xyz, r10.xyzx, r10.xyzx
    mul r18.xyz, r6.wwww, r18.xyzx
    add r19.xyz, r15.xyzx, r16.wwyw
    sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t18.xyzw, s4, l(0.000000)
    mul r19.xyz, r18.yyyy, r19.xyzx
    mad r17.xyz, r17.xyzx, r18.xxxx, r19.xyzx
    add r15.xyz, r15.xyzx, r16.wwzw
    sample_l_indexable(texture3d)(float,float,float,float) r15.xyz, r15.xyzx, t19.xyzw, s4, l(0.000000)
    mad r15.xyz, r15.xyzx, r18.zzzz, r17.xyzx
    mov r10.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r10.xyz, r10.xyzw, t8.xyzw, s2, l(6.000000)
    mul r10.xyz, r10.xyzx, r15.xyzx
    dp3 r6.w, r10.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r14.xyz, r13.yzwy, r2.wwww, r10.xyzx
    mov r11.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r10.xyz, r11.xyzw, t8.xyzw, s2, r4.w
    mad r2.w, cb2[19].x, r5.w, -r6.w
    mad r2.w, r2.y, r2.w, r6.w
    mad r29.xyz, r10.xyzx, r2.wwww, r29.xyzx
  endif 
else 
  mov r14.xyz, l(0,0,0,0)
endif 
add r0.z, -r0.z, l(1.000000)
mad r10.xyz, r29.xyzx, r0.zzzz, r12.xyzx
add r0.z, r3.z, r2.x
log r0.z, |r0.z|
mul r0.z, r0.z, r1.z
exp r0.z, r0.z
add r0.z, r3.z, r0.z
add_sat r0.z, r0.z, l(-1.000000)
mul r0.z, r2.z, r0.z
mul r11.xyz, r3.zzzz, r14.xyzx
and r12.xyz, r0.wwww, r11.xyzx
mad r2.xy, r2.xyxx, l(0.984375, 0.984375, 0.000000, 0.000000), l(0.00781250, 0.00781250, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.xy, r2.xyxx, t5.xyzw, s2, l(0.000000)
mul r10.xyz, r0.zzzz, r10.xyzx
mul r2.xzw, r2.xxxx, r10.xxyz
mul r10.xyz, r2.yyyy, r10.xyzx
mad r3.xyz, r3.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.z, r3.y
mad r6.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r6.x
ieq r1.z, r0.z, r1.z
movc r6.xy, r1.zzzz, r6.yzyy, l(-1.000000,0,0,0)
mad r7.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r7.x
ieq r1.z, r0.z, r1.z
movc r6.zw, r1.zzzz, r7.yyyz, l(0,0,-1.000000,0)
mad r7.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r7.x
ieq r1.z, r0.z, r1.z
movc r7.xy, r1.zzzz, r7.yzyy, l(-1.000000,0,0,0)
mad r8.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r8.x
ieq r0.z, r0.z, r1.z
movc r8.xy, r0.zzzz, r8.yzyy, l(-1.000000,0,0,0)
mov r9.xy, r6.xzxx
mov r9.z, r7.x
mov r9.w, r8.x
add r9.xyzw, -r3.xxxx, r9.xyzw
ge r9.xyzw, |r9.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r9.xyzw, r9.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.z, r9.y, r9.x
add r0.z, r9.z, r0.z
add r0.z, r9.w, r0.z
mul r1.z, r6.w, r9.y
mad r1.z, r9.x, r6.y, r1.z
mad r1.z, r9.z, r7.y, r1.z
mad r1.z, r9.w, r8.y, r1.z
div r3.w, r1.z, r0.z
ge r0.z, l(0.000000), r0.z
movc r3.yz, r0.zzzz, l(0,0,0,0), r3.zzwz
and r6.xy, r1.xyxx, l(1, 1, 0, 0)
ieq r0.z, r6.y, r6.x
movc r3.xyz, r0.zzzz, r3.xyzx, r3.xzyx
mad r0.z, -r3.z, l(0.500000), r3.x
add r6.y, r0.z, r3.z
mad r6.z, -r3.y, l(0.500000), r0.z
add r6.x, r3.y, r6.z
mul r3.xyz, r5.xyzx, r11.xyzx
mad r3.xyz, r12.xyzx, r6.xyzx, r3.xyzx
mul r7.xyz, r2.xzwx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r7.xyz, r10.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000), r7.xyzx
add r3.xyz, r3.xyzx, r7.xyzx
add r7.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xzwx, r7.xyzx
mad r2.xyz, r10.xyzx, r6.xyzx, r2.xyzx
mad r2.xyz, r11.xyzx, r5.xyzx, r2.xyzx
movc r2.xyz, r0.wwww, r3.xyzx, r2.xyzx
lt r0.z, l(0.000000), cb2[9].z
if_nz r0.z
  dp3 r0.z, r4.xyzx, r4.xyzx
  rsq r0.w, r0.z
  mul r3.xyz, r0.wwww, r4.xyzx
  sqrt r0.z, r0.z
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r5.xy, r0.zzzz, cb2[15].xyxx, cb2[14].zwzz
    mul r5.xy, r5.xyxx, cb2[16].xyxx
    lt r0.w, l(0.010000), |r4.z|
    mul r5.zw, r4.zzzz, cb2[15].zzzw
    mul r6.xy, r5.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r6.xy, r6.xyxx
    add r6.xy, -r6.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r5.zw, r6.xxxy, r5.zzzw
    mul r5.zw, r5.zzzw, r5.xxxy
    movc r5.xy, r0.wwww, r5.zwzz, r5.xyxx
    mul r5.xzw, r5.xxxx, cb2[12].xxyz
    exp r5.xzw, r5.xxzw
    mul r6.xyz, r5.yyyy, cb2[12].xyzx
    exp r6.xyz, r6.xyzx
    add r6.xyz, -r5.xzwx, r6.xyzx
    mad r5.xyz, cb2[13].wwww, r6.xyzx, r5.xzwx
  else 
    mad r0.w, r0.z, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r4.z|
    mul r2.w, r4.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r0.w, r2.w
    movc r0.w, r1.z, r2.w, r0.w
    mul r6.xyz, r0.wwww, cb2[12].xyzx
    exp r5.xyz, r6.xyzx
  endif 
  mad r5.xyz, r5.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r5.xyz, r5.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xyzx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.w, cb2[8].w, -r0.w, l(1.000000)
  mul r2.w, r2.w, r2.w
  mul r2.w, r2.w, l(12.566371)
  div r1.z, r1.z, r2.w
  add r0.z, r0.z, -cb2[10].w
  mul_sat r0.z, r0.z, cb2[11].w
  mul r0.z, r0.z, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyz, r0.zzzz, cb2[11].xyzx
  mad r3.xyz, r0.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r6.xyz, -r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r6.xyzx
  mad r3.xyz, r2.xyzx, r5.xyzx, r3.xyzx
else 
  mul r0.z, r4.z, cb2[6].x
  mad r0.w, cb2[6].x, r4.z, cb2[5].x
  lt r1.z, |r0.z|, l(0.000100)
  min r2.w, r0.w, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.w, cb2[6].z
  lt r4.w, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r4.w, r2.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.z, r1.z, l(1.000000), r0.z
  div r0.z, r0.w, r0.z
  movc r0.z, r1.z, r3.w, r0.z
  mul r0.z, r0.z, cb2[5].z
  dp3 r0.w, r4.xyzx, r4.xyzx
  sqrt r1.z, r0.w
  mad r0.z, r0.z, r1.z, cb2[5].w
  exp r0.z, r0.z
  min r0.z, r0.z, l(1.000000)
  add r0.z, -r0.z, l(1.000000)
  rsq r0.w, r0.w
  mul r5.xyz, r0.wwww, r4.xyzx
  dp3 r0.w, cb2[7].yzwy, r5.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r5.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r5.xyzw, r0.wwww, r5.xyzw, cb2[4].xyzw
  mul r0.z, r0.z, r5.w
  add r5.xyz, -r2.xyzx, r5.xyzx
  mad r3.xyz, r0.zzzz, r5.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.z, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r3.xz, r3.xxzx, l(0, 0, 0, 0)
ieq r3.yw, r3.yyyw, l(0, 1, 0, 0)
and r3.xy, r3.ywyy, r3.xzxx
and r3.xy, r3.xyxx, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(16)
and r0.w, r0.w, r1.z
and r3.z, r0.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.zzzz, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      mov r0.z, l(0)
      break 
      case l(2)
      mov r0.z, l(0)
      break 
      case l(3)
      mov r0.z, l(0)
      break 
      case l(4)
      and r0.z, r7.w, l(255)
      break 
      case l(5)
      ubfe r0.z, l(8), l(8), r7.w
      break 
      default 
      mov r0.z, l(0)
      break 
    endswitch 
    utof r0.z, r0.z
    mul r0.z, r0.z, cb2[53].z
    mad r3.xyz, r0.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r1.w
  add r1.xyz, r4.xyzx, cb1[24].xyzx
  mov r1.w, l(0)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.z, r7.w, l(255)
  store_structured u2.x, cb2[52].x, l(108), r0.z
endif 
if_nz cb2[52].y
  atomic_iadd g1, l(0), l(0)
  atomic_iadd g1, l(4), l(0)
  atomic_iadd g1, l(8), l(0)
  and r0.z, r7.w, l(255)
  atomic_iadd g1, l(12), r0.z
  ubfe r0.w, l(8), l(8), r7.w
  atomic_iadd g1, l(16), r0.w
  atomic_umax g2, l(0), l(0)
  atomic_umax g2, l(4), l(0)
  atomic_umax g2, l(8), l(0)
  atomic_umax g2, l(12), r0.z
  atomic_umax g2, l(16), r0.w
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.z, r1.x, l(63)
  if_nz r0.z
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.z, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.z
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.z, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.z
    ieq r0.xy, r0.xyxx, cb2[52].zwzz
    and r0.x, r0.y, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.z
    endif 
  endif 
endif 
ret 
// Approximately 1763 instruction slots used
