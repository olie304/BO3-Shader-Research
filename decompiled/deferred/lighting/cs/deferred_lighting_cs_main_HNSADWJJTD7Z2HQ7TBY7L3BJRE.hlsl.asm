//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:28 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4 [unused]
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4 [unused]
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 30
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(29), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xz, r0.xxyx, l(4095, 0, 4095, 0)
imad r1.xy, r0.xzxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.yz, r1.xxyx
add r3.yz, r3.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
ge r3.w, r3.x, l(0.984375)
mul r5.x, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r3.w, r3.x, r5.x
max r3.x, r3.x, l(0.00000001)
rcp r3.x, r3.x
and r0.w, r0.w, r3.x
mul r3.xw, r3.yyyz, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r5.xyzw, r3.xwxx, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r3.xwxx, t28.xyzw, s4.x
mul r3.xw, r3.yyyz, l(0.500000, 0.000000, 0.000000, 0.500000)
frc r3.xw, r3.xxxw
add r7.xy, -r3.wxww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r8.y, r7.x, r7.y
mul r8.xz, r3.xxwx, r7.xxyx
mul r8.w, r3.w, r3.x
dp4 r3.x, r5.xyzw, r8.xyzw
add r6.xyzw, -r0.wwww, r6.xyzw
min r3.w, |r6.w|, |r6.z|
min r3.w, r3.w, |r6.y|
min r3.w, r3.w, |r6.x|
max r7.x, |r6.w|, |r6.z|
max r7.x, |r6.y|, r7.x
max r6.x, |r6.x|, r7.x
eq r6.yzw, r3.wwww, |r6.yyzw|
movc r3.w, r6.y, r5.y, r5.x
movc r3.w, r6.z, r5.z, r3.w
movc r3.w, r6.w, r5.w, r3.w
mul r5.x, r0.w, l(0.010000)
lt r5.x, r5.x, r6.x
movc r3.x, r5.x, r3.w, r3.x
mul r3.x, r3.x, r4.z
if_nz cb2[55].x
  mul r3.w, r3.x, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r3.wwww
  ret 
else 
  movc r3.w, cb2[54].w, r3.x, l(1.000000)
endif 
ge r3.x, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
add r1.zw, r3.yyyz, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r10.x, r1.z, cb1[12].x
mul r10.y, r1.w, cb1[13].y
mov r10.z, l(1.000000)
mul r10.xyz, r0.wwww, r10.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r1.zw, r2.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.850000, 0.850000)
dp2 r2.x, r1.zwzz, r1.zwzz
add r11.zw, -r2.xxxx, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.x, r11.z
mul r11.xy, r1.zwzz, r2.xxxx
and r12.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r12.w, r12.z
movc r12.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.w, r3.x, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r10.xyzx, -r10.xyzx
rsq r0.w, r0.w
mul r12.xyz, r0.wwww, -r10.xyzx
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r0.w, -r12.xyzx, r11.xyzx
add r0.w, r0.w, r0.w
mad r12.xyz, r11.xyzx, -r0.wwww, -r12.xyzx
mul r0.w, r2.y, l(17.000000)
exp r0.w, r0.w
add r0.w, r0.w, l(2.000000)
div r0.w, l(2.000000), r0.w
sqrt r0.w, r0.w
mul r1.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r1.zw, r1.zzzw
ieq r1.zw, r1.zzzw, r1.xxxy
and r1.z, r1.w, r1.z
add r1.w, -r2.y, l(1.000000)
mul r2.z, r1.w, l(5.000000)
mad r2.w, r1.w, l(5.000000), l(-2.500000)
mul r2.w, r2.w, l(0.400000)
max r2.w, r2.w, l(0.000000)
mul r2.w, r2.w, l(100.000000)
mad r3.yz, -r1.wwww, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r3.y, r3.y
mul r3.y, r2.x, r3.y
mul r4.z, r1.w, r2.z
mad r3.z, -r4.z, l(2.015905), r3.z
exp r3.z, r3.z
mul r3.z, r2.x, r3.z
mul r3.yz, r3.yyzy, l(0.000000, 9.136810, 9.708090, 0.000000)
max r3.y, r3.z, r3.y
max r3.y, r3.y, l(1.268160)
iadd r3.z, cb2[0].y, -cb2[58].x
ushr r4.z, r0.y, l(24)
ubfe r0.y, l(10), l(12), r0.y
mov r13.x, l(16)
mov r14.yz, l(0,0,1.000000,0)
mov r15.xy, l(0,0,0,0)
mov r16.xz, l(1.000000,0,1.000000,0)
mov r17.xy, l(0,0,0,0)
mov r18.xy, l(0,0,0,0)
mov r19.xyzw, l(0,0,0,0)
mov r20.xyzw, l(0,0,0,0)
mov r5.w, l(0)
loop 
  ieq r6.w, r5.w, l(2)
  breakc_nz r6.w
  movc r6.w, r5.w, r0.y, r4.z
  uge r7.w, r6.w, r3.z
  ult r8.w, r6.w, cb2[0].y
  and r7.w, r7.w, r8.w
  if_nz r7.w
    imul null, r6.w, r6.w, l(14)
    if_nz r1.z
      and r7.w, r20.w, l(3)
      imad r7.w, r7.w, l(20), l(880)
      add r13.yzw, cb1[24].xxyz, cb10[r6.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r7.w, r13.xyzw
    endif 
    iadd r21.w, r20.w, l(1)
    add r13.yzw, r10.xxyz, -cb10[r6.w + 0].xxyz
    and r7.w, l(0x0000ffff), cb10[r6.w + 7].z
    ubfe r8.w, l(6), l(25), cb10[r6.w + 7].z
    imul null, r9.w, r7.w, l(6)
    dp3 r10.w, cb11[r9.w + 0].xyzx, r13.yzwy
    add_sat r10.w, r10.w, cb11[r9.w + 0].w
    dp3 r14.w, cb11[r9.w + 1].xyzx, r13.yzwy
    add_sat r14.w, r14.w, cb11[r9.w + 1].w
    mul r10.w, r10.w, r14.w
    dp3 r14.w, cb11[r9.w + 2].xyzx, r13.yzwy
    add_sat r14.w, r14.w, cb11[r9.w + 2].w
    mul r10.w, r10.w, r14.w
    dp3 r14.w, cb11[r9.w + 3].xyzx, r13.yzwy
    add_sat r14.w, r14.w, cb11[r9.w + 3].w
    mul r10.w, r10.w, r14.w
    dp3 r14.w, cb11[r9.w + 4].xyzx, r13.yzwy
    add_sat r14.w, r14.w, cb11[r9.w + 4].w
    mul r10.w, r10.w, r14.w
    dp3 r14.w, cb11[r9.w + 5].xyzx, r13.yzwy
    add_sat r9.w, r14.w, cb11[r9.w + 5].w
    mul r14.x, r9.w, r10.w
    and r9.w, l(1), cb10[r6.w + 6].x
    movc r14.xw, r9.wwww, r14.xxxy, r14.zzzx
    mov r9.w, cb10[r6.w + 6].x
    mov r22.xy, r14.xwxx
    mov r10.w, l(1)
    loop 
      ige r15.w, r10.w, r8.w
      breakc_nz r15.w
      iadd r15.w, r7.w, r10.w
      imul null, r15.w, r15.w, l(6)
      dp3 r17.w, cb11[r15.w + 0].xyzx, r13.yzwy
      add_sat r17.w, r17.w, cb11[r15.w + 0].w
      mul r17.w, r17.w, r22.x
      dp3 r18.w, cb11[r15.w + 1].xyzx, r13.yzwy
      add_sat r18.w, r18.w, cb11[r15.w + 1].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r15.w + 2].xyzx, r13.yzwy
      add_sat r18.w, r18.w, cb11[r15.w + 2].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r15.w + 3].xyzx, r13.yzwy
      add_sat r18.w, r18.w, cb11[r15.w + 3].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r15.w + 4].xyzx, r13.yzwy
      add_sat r18.w, r18.w, cb11[r15.w + 4].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r15.w + 5].xyzx, r13.yzwy
      add_sat r15.w, r18.w, cb11[r15.w + 5].w
      mul r22.x, r15.w, r17.w
      ushr r18.w, r9.w, l(2)
      ubfe r22.z, l(1), l(2), r9.w
      and r22.w, r18.w, l(2)
      max r23.x, r22.x, r22.y
      mad r15.w, -r17.w, r15.w, l(1.000000)
      mul r15.w, r15.w, r22.y
      movc r16.y, r22.w, r15.w, r23.x
      movc r22.xy, r22.zzzz, r22.xyxx, r16.xyxx
      iadd r10.w, r10.w, l(1)
      mov r9.w, r18.w
    endloop 
    mov_sat r22.y, r22.y
    mul r7.w, r22.y, cb10[r6.w + 6].y
    lt r8.w, l(0.000000), r7.w
    if_nz r8.w
      and r8.w, r21.w, l(7)
      iadd r9.w, r8.w, l(-1)
      ult r9.w, r9.w, l(32)
      and r9.w, r1.z, r9.w
      if_nz r9.w
        imad r14.xw, r8.wwww, l(20, 0, 0, 20), l(860, 0, 0, 876)
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r8.w, cb2[52].x, r14.x, u2.xxxx
        or r8.w, r8.w, l(32)
        store_structured u2.x, cb2[52].x, r14.x, r8.w
        store_structured u2.x, cb2[52].x, r14.w, r7.w
      endif 
      iadd r20.w, r20.w, l(257)
      mad r20.z, r22.y, cb10[r6.w + 6].y, r20.z
      mul r7.w, r7.w, cb10[r6.w + 7].y
      mov r23.x, cb10[r6.w + 7].w
      mov r23.yz, cb10[r6.w + 8].xxyx
      dp3 r8.w, r12.xyzx, r23.xyzx
      dp3 r9.w, r13.yzwy, r23.xyzx
      add r9.w, r9.w, -cb10[r6.w + 8].z
      ge r10.w, r9.w, l(0.000000)
      max r9.w, r2.w, |r9.w|
      movc r9.w, r10.w, r9.w, -r9.w
      max r8.w, -r8.w, l(0.00000010)
      div r8.w, r9.w, r8.w
      min r8.w, |r8.w|, l(131072.000000)
      mov r23.x, cb10[r6.w + 8].w
      mov r23.yz, cb10[r6.w + 9].xxyx
      dp3 r9.w, r12.xyzx, r23.xyzx
      dp3 r10.w, r13.yzwy, r23.xyzx
      add r10.w, r10.w, -cb10[r6.w + 9].z
      ge r14.x, r10.w, l(0.000000)
      max r10.w, r2.w, |r10.w|
      movc r10.w, r14.x, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r8.w, r8.w, |r9.w|
      mov r23.x, cb10[r6.w + 9].w
      mov r23.yz, cb10[r6.w + 10].xxyx
      dp3 r9.w, r12.xyzx, r23.xyzx
      dp3 r10.w, r13.yzwy, r23.xyzx
      add r10.w, r10.w, -cb10[r6.w + 10].z
      ge r14.x, r10.w, l(0.000000)
      max r10.w, r2.w, |r10.w|
      movc r10.w, r14.x, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r8.w, r8.w, |r9.w|
      mov r23.x, cb10[r6.w + 10].w
      mov r23.yz, cb10[r6.w + 11].xxyx
      dp3 r9.w, r12.xyzx, r23.xyzx
      dp3 r10.w, r13.yzwy, r23.xyzx
      add r10.w, r10.w, -cb10[r6.w + 11].z
      ge r14.x, r10.w, l(0.000000)
      max r10.w, r2.w, |r10.w|
      movc r10.w, r14.x, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r8.w, r8.w, |r9.w|
      mov r23.x, cb10[r6.w + 11].w
      mov r23.yz, cb10[r6.w + 12].xxyx
      dp3 r9.w, r12.xyzx, r23.xyzx
      dp3 r10.w, r13.yzwy, r23.xyzx
      add r10.w, r10.w, -cb10[r6.w + 12].z
      ge r14.x, r10.w, l(0.000000)
      max r10.w, r2.w, |r10.w|
      movc r10.w, r14.x, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r8.w, r8.w, |r9.w|
      mov r23.x, cb10[r6.w + 12].w
      mov r23.yz, cb10[r6.w + 13].xxyx
      dp3 r9.w, r12.xyzx, r23.xyzx
      dp3 r10.w, r13.yzwy, r23.xyzx
      add r10.w, r10.w, -cb10[r6.w + 13].z
      ge r14.x, r10.w, l(0.000000)
      max r10.w, r2.w, |r10.w|
      movc r10.w, r14.x, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r8.w, r8.w, |r9.w|
      add r23.x, r13.y, cb10[r6.w + 3].w
      add r23.yz, r13.zzwz, cb10[r6.w + 4].xxyx
      mad r22.xzw, r12.xxyz, r8.wwww, r23.xxyz
      dp3 r9.w, r22.xzwx, r22.xzwx
      sqrt r9.w, r9.w
      div r8.w, r8.w, r9.w
      add r8.w, r8.w, r8.w
      sqrt r8.w, r8.w
      mad r8.w, r1.w, l(5.000000), r8.w
      add r8.w, r8.w, l(-0.844800)
      mov r23.x, cb10[r6.w + 0].w
      mov r23.y, cb10[r6.w + 1].z
      mov r23.z, cb10[r6.w + 2].y
      dp3 r24.x, r22.xzwx, r23.xyzx
      mov r25.xy, cb10[r6.w + 1].xwxx
      mov r25.z, cb10[r6.w + 2].z
      dp3 r24.y, r22.xzwx, r25.xyzx
      mov r26.x, cb10[r6.w + 1].y
      mov r26.yz, cb10[r6.w + 2].xxwx
      dp3 r24.z, r22.xzwx, r26.xyzx
      ubfe r9.w, l(9), l(16), cb10[r6.w + 7].z
      utof r24.w, r9.w
      sample_l_indexable(texturecubearray)(float,float,float,float) r22.xzw, r24.xyzw, t8.xwyz, s2, r8.w
      and r27.xyz, r22.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r27.xyz, r27.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r8.w, r27.y, r27.x
      or r8.w, r27.z, r8.w
      movc r22.xzw, r8.wwww, l(1.000000,0,1.000000,0), r22.xxzw
      dp3 r27.x, r13.yzwy, r23.xyzx
      dp3 r27.y, r13.yzwy, r25.xyzx
      dp3 r27.z, r13.yzwy, r26.xyzx
      mad_sat r13.yzw, r27.xxyz, cb10[r6.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r27.xy, r13.yzyy, cb10[r6.w + 4].zwzz
      mul r27.z, r13.w, cb10[r6.w + 5].x
      add r13.yzw, r27.xxyz, cb10[r6.w + 5].yyzw
      dp3 r24.x, r11.xyzx, r23.xyzx
      dp3 r24.y, r11.xyzx, r25.xyzx
      dp3 r24.z, r11.xyzx, r26.xyzx
      lt r23.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r24.xyzx
      movc r15.z, r23.x, l(0), l(0.500000)
      add r25.xyz, r13.yzwy, r15.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r25.xyz, r25.xyzx, t17.xyzw, s4, l(0.000000)
      mul r26.xyz, r24.xyzx, r24.xyzx
      mul r26.xyz, r7.wwww, r26.xyzx
      movc r17.z, r23.y, l(0), l(0.500000)
      add r23.xyw, r13.yzyw, r17.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r23.xyw, r23.xywx, t18.xywz, s4, l(0.000000)
      mul r23.xyw, r26.yyyy, r23.xyxw
      mad r23.xyw, r25.xyxz, r26.xxxx, r23.xyxw
      movc r18.z, r23.z, l(0), l(0.500000)
      add r13.yzw, r13.yyzw, r18.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r13.yzw, r13.yzwy, t19.wxyz, s4, l(0.000000)
      mad r13.yzw, r13.yyzw, r26.zzzz, r23.xxyw
      sample_l_indexable(texturecubearray)(float,float,float,float) r23.xyz, r24.xyzw, t8.xyzw, s2, l(6.000000)
      and r24.xyz, r23.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r24.xyz, r24.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r6.w, r24.y, r24.x
      or r6.w, r24.z, r6.w
      movc r23.xyz, r6.wwww, l(1.000000,1.000000,0,0), r23.xyzx
      mul r24.xyz, r13.yzwy, r23.xyzx
      dp3 r6.w, r24.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r19.xyz, r13.yzwy, r23.xyzx, r19.xyzx
      mul r8.w, r3.y, r6.w
      mul r13.yzw, r7.wwww, r22.xxzw
      dp3 r7.w, r13.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r6.w, r3.y, r6.w, r7.w
      div r6.w, r8.w, r6.w
      mov r23.x, r19.w
      mov r23.yz, r20.xxyx
      mad r13.yzw, r13.yyzw, r6.wwww, r23.xxyz
      mov r19.w, r13.y
      mov r20.xy, r13.zwzz
    else 
      mov r21.xyz, r20.xyzx
      mov r20.xyzw, r21.xyzw
    endif 
  endif 
  iadd r5.w, r5.w, l(1)
endloop 
mov r13.x, l(16)
mov r14.yz, l(0,0,1.000000,0)
mov r15.xy, l(0,0,0,0)
mov r17.xy, l(0,0,0,0)
mov r18.xy, l(0,0,0,0)
mov r21.xyz, r19.xyzx
mov r22.x, r19.w
mov r22.yz, r20.xxyx
mov r16.xy, r20.zwzz
mov r5.w, l(0)
loop 
  ieq r6.w, r5.w, l(2)
  breakc_nz r6.w
  movc r6.w, r5.w, r0.y, r4.z
  ult r7.w, r6.w, r3.z
  if_nz r7.w
    imul null, r6.w, r6.w, l(14)
    if_nz r1.z
      and r7.w, r16.y, l(15)
      imad r7.w, r7.w, l(20), l(880)
      add r13.yzw, cb1[24].xxyz, cb10[r6.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r7.w, r13.xyzw
    endif 
    iadd r23.y, r16.y, l(1)
    add r13.yzw, r10.xxyz, -cb10[r6.w + 0].xxyz
    and r7.w, l(0x0000ffff), cb10[r6.w + 7].z
    ubfe r8.w, l(6), l(25), cb10[r6.w + 7].z
    imul null, r9.w, r7.w, l(6)
    dp3 r10.w, cb11[r9.w + 0].xyzx, r13.yzwy
    add_sat r10.w, r10.w, cb11[r9.w + 0].w
    dp3 r14.w, cb11[r9.w + 1].xyzx, r13.yzwy
    add_sat r14.w, r14.w, cb11[r9.w + 1].w
    mul r10.w, r10.w, r14.w
    dp3 r14.w, cb11[r9.w + 2].xyzx, r13.yzwy
    add_sat r14.w, r14.w, cb11[r9.w + 2].w
    mul r10.w, r10.w, r14.w
    dp3 r14.w, cb11[r9.w + 3].xyzx, r13.yzwy
    add_sat r14.w, r14.w, cb11[r9.w + 3].w
    mul r10.w, r10.w, r14.w
    dp3 r14.w, cb11[r9.w + 4].xyzx, r13.yzwy
    add_sat r14.w, r14.w, cb11[r9.w + 4].w
    mul r10.w, r10.w, r14.w
    dp3 r14.w, cb11[r9.w + 5].xyzx, r13.yzwy
    add_sat r9.w, r14.w, cb11[r9.w + 5].w
    mul r14.x, r9.w, r10.w
    and r9.w, l(1), cb10[r6.w + 6].x
    movc r14.xw, r9.wwww, r14.xxxy, r14.zzzx
    mov r9.w, cb10[r6.w + 6].x
    mov r24.xy, r14.xwxx
    mov r10.w, l(1)
    loop 
      ige r15.w, r10.w, r8.w
      breakc_nz r15.w
      iadd r15.w, r7.w, r10.w
      imul null, r15.w, r15.w, l(6)
      dp3 r17.w, cb11[r15.w + 0].xyzx, r13.yzwy
      add_sat r17.w, r17.w, cb11[r15.w + 0].w
      mul r17.w, r17.w, r24.x
      dp3 r18.w, cb11[r15.w + 1].xyzx, r13.yzwy
      add_sat r18.w, r18.w, cb11[r15.w + 1].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r15.w + 2].xyzx, r13.yzwy
      add_sat r18.w, r18.w, cb11[r15.w + 2].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r15.w + 3].xyzx, r13.yzwy
      add_sat r18.w, r18.w, cb11[r15.w + 3].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r15.w + 4].xyzx, r13.yzwy
      add_sat r18.w, r18.w, cb11[r15.w + 4].w
      mul r17.w, r17.w, r18.w
      dp3 r18.w, cb11[r15.w + 5].xyzx, r13.yzwy
      add_sat r15.w, r18.w, cb11[r15.w + 5].w
      mul r24.x, r15.w, r17.w
      ushr r18.w, r9.w, l(2)
      ubfe r21.w, l(1), l(2), r9.w
      and r22.w, r18.w, l(2)
      max r23.z, r24.x, r24.y
      mad r15.w, -r17.w, r15.w, l(1.000000)
      mul r15.w, r15.w, r24.y
      movc r16.w, r22.w, r15.w, r23.z
      movc r24.xy, r21.wwww, r24.xyxx, r16.zwzz
      iadd r10.w, r10.w, l(1)
      mov r9.w, r18.w
    endloop 
    add_sat r7.w, -r20.z, r24.y
    mul r8.w, r7.w, cb10[r6.w + 6].y
    lt r9.w, l(0.000000), r8.w
    if_nz r9.w
      and r9.w, r23.y, l(31)
      iadd r10.w, r9.w, l(-1)
      ult r10.w, r10.w, l(32)
      and r10.w, r1.z, r10.w
      if_nz r10.w
        imad r14.xw, r9.wwww, l(20, 0, 0, 20), l(860, 0, 0, 876)
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r9.w, cb2[52].x, r14.x, u2.xxxx
        or r9.w, r9.w, l(32)
        store_structured u2.x, cb2[52].x, r14.x, r9.w
        store_structured u2.x, cb2[52].x, r14.w, r8.w
      endif 
      iadd r16.y, r16.y, l(257)
      mad r16.x, r7.w, cb10[r6.w + 6].y, r16.x
      mul r7.w, r8.w, cb10[r6.w + 7].y
      mov r25.x, cb10[r6.w + 7].w
      mov r25.yz, cb10[r6.w + 8].xxyx
      dp3 r8.w, r12.xyzx, r25.xyzx
      dp3 r9.w, r13.yzwy, r25.xyzx
      add r9.w, r9.w, -cb10[r6.w + 8].z
      ge r10.w, r9.w, l(0.000000)
      max r9.w, r2.w, |r9.w|
      movc r9.w, r10.w, r9.w, -r9.w
      max r8.w, -r8.w, l(0.00000010)
      div r8.w, r9.w, r8.w
      min r8.w, |r8.w|, l(131072.000000)
      mov r25.x, cb10[r6.w + 8].w
      mov r25.yz, cb10[r6.w + 9].xxyx
      dp3 r9.w, r12.xyzx, r25.xyzx
      dp3 r10.w, r13.yzwy, r25.xyzx
      add r10.w, r10.w, -cb10[r6.w + 9].z
      ge r14.x, r10.w, l(0.000000)
      max r10.w, r2.w, |r10.w|
      movc r10.w, r14.x, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r8.w, r8.w, |r9.w|
      mov r25.x, cb10[r6.w + 9].w
      mov r25.yz, cb10[r6.w + 10].xxyx
      dp3 r9.w, r12.xyzx, r25.xyzx
      dp3 r10.w, r13.yzwy, r25.xyzx
      add r10.w, r10.w, -cb10[r6.w + 10].z
      ge r14.x, r10.w, l(0.000000)
      max r10.w, r2.w, |r10.w|
      movc r10.w, r14.x, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r8.w, r8.w, |r9.w|
      mov r25.x, cb10[r6.w + 10].w
      mov r25.yz, cb10[r6.w + 11].xxyx
      dp3 r9.w, r12.xyzx, r25.xyzx
      dp3 r10.w, r13.yzwy, r25.xyzx
      add r10.w, r10.w, -cb10[r6.w + 11].z
      ge r14.x, r10.w, l(0.000000)
      max r10.w, r2.w, |r10.w|
      movc r10.w, r14.x, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r8.w, r8.w, |r9.w|
      mov r25.x, cb10[r6.w + 11].w
      mov r25.yz, cb10[r6.w + 12].xxyx
      dp3 r9.w, r12.xyzx, r25.xyzx
      dp3 r10.w, r13.yzwy, r25.xyzx
      add r10.w, r10.w, -cb10[r6.w + 12].z
      ge r14.x, r10.w, l(0.000000)
      max r10.w, r2.w, |r10.w|
      movc r10.w, r14.x, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r8.w, r8.w, |r9.w|
      mov r25.x, cb10[r6.w + 12].w
      mov r25.yz, cb10[r6.w + 13].xxyx
      dp3 r9.w, r12.xyzx, r25.xyzx
      dp3 r10.w, r13.yzwy, r25.xyzx
      add r10.w, r10.w, -cb10[r6.w + 13].z
      ge r14.x, r10.w, l(0.000000)
      max r10.w, r2.w, |r10.w|
      movc r10.w, r14.x, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r8.w, r8.w, |r9.w|
      add r25.x, r13.y, cb10[r6.w + 3].w
      add r25.yz, r13.zzwz, cb10[r6.w + 4].xxyx
      mad r24.xzw, r12.xxyz, r8.wwww, r25.xxyz
      dp3 r9.w, r24.xzwx, r24.xzwx
      sqrt r9.w, r9.w
      div r8.w, r8.w, r9.w
      add r8.w, r8.w, r8.w
      sqrt r8.w, r8.w
      mad r8.w, r1.w, l(5.000000), r8.w
      add r8.w, r8.w, l(-0.844800)
      mov r25.x, cb10[r6.w + 0].w
      mov r25.y, cb10[r6.w + 1].z
      mov r25.z, cb10[r6.w + 2].y
      dp3 r26.x, r24.xzwx, r25.xyzx
      mov r27.xy, cb10[r6.w + 1].xwxx
      mov r27.z, cb10[r6.w + 2].z
      dp3 r26.y, r24.xzwx, r27.xyzx
      mov r28.x, cb10[r6.w + 1].y
      mov r28.yz, cb10[r6.w + 2].xxwx
      dp3 r26.z, r24.xzwx, r28.xyzx
      ubfe r9.w, l(9), l(16), cb10[r6.w + 7].z
      utof r26.w, r9.w
      sample_l_indexable(texturecubearray)(float,float,float,float) r24.xzw, r26.xyzw, t8.xwyz, s2, r8.w
      and r29.xyz, r24.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r29.xyz, r29.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r8.w, r29.y, r29.x
      or r8.w, r29.z, r8.w
      movc r24.xzw, r8.wwww, l(1.000000,0,1.000000,0), r24.xxzw
      dp3 r29.x, r13.yzwy, r25.xyzx
      dp3 r29.y, r13.yzwy, r27.xyzx
      dp3 r29.z, r13.yzwy, r28.xyzx
      mad_sat r13.yzw, r29.xxyz, cb10[r6.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r29.xy, r13.yzyy, cb10[r6.w + 4].zwzz
      mul r29.z, r13.w, cb10[r6.w + 5].x
      add r13.yzw, r29.xxyz, cb10[r6.w + 5].yyzw
      dp3 r26.x, r11.xyzx, r25.xyzx
      dp3 r26.y, r11.xyzx, r27.xyzx
      dp3 r26.z, r11.xyzx, r28.xyzx
      lt r25.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r26.xyzx
      movc r15.z, r25.x, l(0), l(0.500000)
      add r27.xyz, r13.yzwy, r15.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r27.xyz, r27.xyzx, t17.xyzw, s4, l(0.000000)
      mul r28.xyz, r26.xyzx, r26.xyzx
      mul r28.xyz, r7.wwww, r28.xyzx
      movc r17.z, r25.y, l(0), l(0.500000)
      add r25.xyw, r13.yzyw, r17.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r25.xyw, r25.xywx, t18.xywz, s4, l(0.000000)
      mul r25.xyw, r28.yyyy, r25.xyxw
      mad r25.xyw, r27.xyxz, r28.xxxx, r25.xyxw
      movc r18.z, r25.z, l(0), l(0.500000)
      add r13.yzw, r13.yyzw, r18.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r13.yzw, r13.yzwy, t19.wxyz, s4, l(0.000000)
      mad r13.yzw, r13.yyzw, r28.zzzz, r25.xxyw
      sample_l_indexable(texturecubearray)(float,float,float,float) r25.xyz, r26.xyzw, t8.xyzw, s2, l(6.000000)
      and r26.xyz, r25.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r26.xyz, r26.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r6.w, r26.y, r26.x
      or r6.w, r26.z, r6.w
      movc r25.xyz, r6.wwww, l(1.000000,1.000000,0,0), r25.xyzx
      mul r26.xyz, r13.yzwy, r25.xyzx
      dp3 r6.w, r26.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r21.xyz, r13.yzwy, r25.xyzx, r21.xyzx
      mul r8.w, r3.y, r6.w
      mul r13.yzw, r7.wwww, r24.xxzw
      dp3 r7.w, r13.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r6.w, r3.y, r6.w, r7.w
      div r6.w, r8.w, r6.w
      mad r22.xyz, r13.yzwy, r6.wwww, r22.xyzx
    else 
      mov r23.x, r16.x
      mov r16.xy, r23.xyxx
    endif 
  endif 
  iadd r5.w, r5.w, l(1)
endloop 
ge r0.y, r20.z, l(1.000000)
bfi r1.w, l(8), l(0), r16.y, r20.w
movc r0.y, r0.y, r1.w, r16.y
max r1.w, r16.x, l(1.000000)
rcp r1.w, r1.w
mov_sat r16.x, r16.x
mul r13.xyz, r1.wwww, r21.xyzx
mul r14.xyz, r1.wwww, r22.xyzx
lt r2.w, r16.x, l(0.990000)
if_nz r2.w
  iadd r0.y, r0.y, l(256)
  add r2.w, -r16.x, l(1.000000)
  mul r3.y, r2.w, cb2[19].x
  add r15.xyz, r10.xyzx, -cb2[35].xyzx
  mul r16.x, r15.x, cb2[35].w
  mul r16.yz, r15.yyzy, cb2[36].xxyx
  add_sat r15.xyz, r16.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r16.xy, r15.xyxx, cb2[36].zwzz
  mul r16.z, r15.z, cb2[37].x
  add r15.xyz, r16.xyzx, cb2[37].yzwy
  lt r16.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r16.xyz, r16.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r16.w, l(0)
  add r17.xyz, r15.xyzx, r16.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t17.xyzw, s4, l(0.000000)
  mul r18.xyz, r11.xyzx, r11.xyzx
  mul r18.xyz, r3.yyyy, r18.xyzx
  add r19.xyz, r15.xyzx, r16.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t18.xyzw, s4, l(0.000000)
  mul r19.xyz, r18.yyyy, r19.xyzx
  mad r17.xyz, r17.xyzx, r18.xxxx, r19.xyzx
  add r15.xyz, r15.xyzx, r16.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r15.xyz, r15.xyzx, t19.xyzw, s4, l(0.000000)
  mad r15.xyz, r15.xyzx, r18.zzzz, r17.xyzx
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r11.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r11.xyz, r11.xyzx, r15.xyzx
  dp3 r3.y, r11.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r13.xyz, r21.xyzx, r1.wwww, r11.xyzx
  mov r12.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r11.xyz, r12.xyzw, t8.xyzw, s2, r2.z
  mad r1.w, cb2[19].x, r2.w, -r3.y
  mad r1.w, r2.y, r1.w, r3.y
  mad r14.xyz, r11.xyzx, r1.wwww, r14.xyzx
endif 
add r1.w, r3.w, r2.x
log r1.w, |r1.w|
mul r0.w, r0.w, r1.w
exp r0.w, r0.w
add r0.w, r3.w, r0.w
add_sat r0.w, r0.w, l(-1.000000)
mul r3.yzw, r3.wwww, r13.xxyz
and r11.xyz, r3.yzwy, r3.xxxx
mad r2.xy, r2.xyxx, l(0.984375, 0.984375, 0.000000, 0.000000), l(0.00781250, 0.00781250, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.xy, r2.xyxx, t5.xyzw, s2, l(0.000000)
mul r12.xyz, r0.wwww, r14.xyzx
mul r2.xzw, r2.xxxx, r12.xxyz
mul r12.xyz, r2.yyyy, r12.xyzx
mad r4.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.w, r4.y
mad r6.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r6.x
ieq r1.w, r0.w, r1.w
movc r6.xy, r1.wwww, r6.yzyy, l(-1.000000,0,0,0)
mad r7.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r7.x
ieq r1.w, r0.w, r1.w
movc r6.zw, r1.wwww, r7.yyyz, l(0,0,-1.000000,0)
mad r7.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r7.x
ieq r1.w, r0.w, r1.w
movc r7.xy, r1.wwww, r7.yzyy, l(-1.000000,0,0,0)
mad r8.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r8.x
ieq r0.w, r0.w, r1.w
movc r7.zw, r0.wwww, r8.yyyz, l(0,0,-1.000000,0)
mov r8.xy, r6.xzxx
mov r8.zw, r7.xxxz
add r8.xyzw, -r4.xxxx, r8.xyzw
ge r8.xyzw, |r8.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r8.xyzw, r8.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.w, r8.y, r8.x
add r0.w, r8.z, r0.w
add r0.w, r8.w, r0.w
mul r1.w, r6.w, r8.y
mad r1.w, r8.x, r6.y, r1.w
mad r1.w, r8.z, r7.y, r1.w
mad r1.w, r8.w, r7.w, r1.w
div r4.w, r1.w, r0.w
ge r0.w, l(0.000000), r0.w
movc r4.yz, r0.wwww, l(0,0,0,0), r4.zzwz
and r6.xy, r1.xyxx, l(1, 1, 0, 0)
ieq r0.w, r6.y, r6.x
movc r4.xyz, r0.wwww, r4.xyzx, r4.xzyx
mad r0.w, -r4.z, l(0.500000), r4.x
add r6.y, r0.w, r4.z
mad r6.z, -r4.y, l(0.500000), r0.w
add r6.x, r4.y, r6.z
mul r4.xyz, r5.xyzx, r3.yzwy
mad r4.xyz, r11.xyzx, r6.xyzx, r4.xyzx
mul r7.xyz, r2.xzwx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r7.xyz, r12.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000), r7.xyzx
add r4.xyz, r4.xyzx, r7.xyzx
add r7.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xzwx, r7.xyzx
mad r2.xyz, r12.xyzx, r6.xyzx, r2.xyzx
mad r2.xyz, r3.yzwy, r5.xyzx, r2.xyzx
movc r2.xyz, r3.xxxx, r4.xyzx, r2.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r10.xyzx, r10.xyzx
  rsq r1.w, r0.w
  mul r3.xyz, r1.wwww, r10.xyzx
  sqrt r0.w, r0.w
  lt r1.w, l(0.000000), cb2[13].w
  if_nz r1.w
    mad r4.xy, r0.wwww, cb2[15].xyxx, cb2[14].zwzz
    mul r4.xy, r4.xyxx, cb2[16].xyxx
    lt r1.w, l(0.010000), |r10.z|
    mul r4.zw, r10.zzzz, cb2[15].zzzw
    mul r5.xy, r4.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r5.xy, r5.xyxx
    add r5.xy, -r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r4.zw, r5.xxxy, r4.zzzw
    mul r4.zw, r4.zzzw, r4.xxxy
    movc r4.xy, r1.wwww, r4.zwzz, r4.xyxx
    mul r4.xzw, r4.xxxx, cb2[12].xxyz
    exp r4.xzw, r4.xxzw
    mul r5.xyz, r4.yyyy, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xzwx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xzwx
  else 
    mad r1.w, r0.w, cb2[15].x, cb2[14].z
    mul r1.w, r1.w, cb2[16].x
    lt r2.w, l(0.010000), |r10.z|
    mul r3.w, r10.z, cb2[15].z
    mul r4.w, r3.w, l(-1.442695)
    exp r4.w, r4.w
    add r4.w, -r4.w, l(1.000000)
    div r3.w, r4.w, r3.w
    mul r3.w, r1.w, r3.w
    movc r1.w, r2.w, r3.w, r1.w
    mul r5.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r1.w, cb2[7].yzwy, -r3.xyzx
  mad r2.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r3.x, cb2[8].w, -r1.w, l(1.000000)
  mul r3.x, r3.x, r3.x
  mul r3.x, r3.x, l(12.566371)
  div r2.w, r2.w, r3.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r2.w
  mov_sat r1.w, r1.w
  mad r1.w, r1.w, r1.w, l(1.000000)
  mad r1.w, r1.w, l(0.05968310), l(-1.000000)
  mad r1.w, cb2[8].z, r1.w, l(1.000000)
  mul r3.xyz, r0.wwww, cb2[11].xyzx
  mad r3.xyz, r1.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r5.xyzx
  mad r3.xyz, r2.xyzx, r4.xyzx, r3.xyzx
else 
  mul r0.w, r10.z, cb2[6].x
  mad r1.w, cb2[6].x, r10.z, cb2[5].x
  lt r2.w, |r0.w|, l(0.000100)
  min r3.w, r1.w, l(64.000000)
  mul r3.w, r3.w, l(1.442695)
  exp r3.w, r3.w
  mov_sat r4.x, cb2[6].z
  lt r4.y, r1.w, l(0.000000)
  add r1.w, r1.w, l(1.000000)
  movc r1.w, r4.y, r3.w, r1.w
  add r1.w, r1.w, -cb2[6].z
  movc r0.w, r2.w, l(1.000000), r0.w
  div r0.w, r1.w, r0.w
  movc r0.w, r2.w, r4.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.w, r10.xyzx, r10.xyzx
  sqrt r2.w, r1.w
  mad r0.w, r0.w, r2.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.w, r1.w
  mul r4.xyz, r1.wwww, r10.xyzx
  dp3 r1.w, cb2[7].yzwy, r4.xyzx
  mad_sat r1.w, cb2[8].y, r1.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r1.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyz, r0.wwww, r4.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.w, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r3.xz, r3.xxzx, l(0, 0, 0, 0)
ieq r3.yw, r3.yyyw, l(0, 1, 0, 12)
and r3.xy, r3.ywyy, r3.xzxx
and r3.xy, r3.xyxx, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r1.w, cb2[55].w, l(16)
ine r2.w, r1.w, l(0)
ieq r1.w, r1.w, l(16)
and r1.w, r1.w, r2.w
and r3.z, r1.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.wwww, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      mov r0.w, l(0)
      break 
      case l(2)
      mov r0.w, l(0)
      break 
      case l(3)
      mov r0.w, l(0)
      break 
      case l(4)
      and r0.w, r0.y, l(15)
      break 
      case l(5)
      ushr r0.w, r0.y, l(8)
      break 
      default 
      mov r0.w, l(0)
      break 
    endswitch 
    utof r0.w, r0.w
    mul r0.w, r0.w, cb2[53].z
    mad r3.xyz, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r1.z
  add r1.xyz, r10.xyzx, cb1[24].xyzx
  mov r1.w, l(0)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.w, r0.y, l(15)
  store_structured u2.x, cb2[52].x, l(108), r0.w
endif 
if_nz cb2[52].y
  atomic_iadd g1, l(0), l(0)
  atomic_iadd g1, l(4), l(0)
  atomic_iadd g1, l(8), l(0)
  and r0.w, r0.y, l(15)
  atomic_iadd g1, l(12), r0.w
  ushr r0.y, r0.y, l(8)
  atomic_iadd g1, l(16), r0.y
  atomic_umax g2, l(0), l(0)
  atomic_umax g2, l(4), l(0)
  atomic_umax g2, l(8), l(0)
  atomic_umax g2, l(12), r0.w
  atomic_umax g2, l(16), r0.y
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.y, r1.x, l(63)
  if_nz r0.y
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.y, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.y
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.y, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.y
    ieq r0.xz, r0.xxzx, cb2[52].zzwz
    and r0.x, r0.z, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.y
    endif 
  endif 
endif 
ret 
// Approximately 930 instruction slots used
