//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:23 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16 [unused]
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 33
dcl_thread_group 8, 8, 1
imad r0.x, cb2[57].x, l(50), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.yz, r0.xxyx, l(0, 4095, 4095, 0)
imad r1.xy, r0.yzyy, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ge r3.x, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r3.y, r1.xyww, t4.yxzw
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyww, t0.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.xxxy
add r3.zw, r1.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
ge r10.x, r3.y, l(0.984375)
mul r4.w, r3.y, l(1.01587307)
mad r3.y, r3.y, l(64.000000), l(-63.000000)
movc r3.y, r10.x, r3.y, r4.w
max r3.y, r3.y, l(0.00000001)
rcp r10.y, r3.y
and r10.xy, r0.wwww, r10.xyxx
add r10.zw, r3.zzzw, -cb1[71].xxxy
mul r10.zw, r10.zzzw, cb1[44].zzzw
mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r11.x, r10.z, cb1[12].x
mul r11.y, r10.w, cb1[13].y
mov r11.z, l(1.000000)
mul r10.yzw, r10.yyyy, r11.xxyz
mul r11.xyz, r10.zzzz, cb1[17].xyzx
mad r11.xyz, r10.yyyy, cb1[16].xyzx, r11.xyzx
mad r11.xyz, r10.wwww, cb1[18].xyzx, r11.xyzx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r12.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r12.z
mul r12.xy, r2.wwww, r2.xyxx
and r13.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r13.xyzw, r13.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r13.w, r13.z
movc r13.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r13.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r10.yzw, r13.xxyz, l(0.000000, 1.000000, -2.000000, 1.000000)
mul r12.xyz, r12.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r12.yyyy
mad r2.xyw, r10.yzyw, r12.xxxx, r2.xyxw
mad r12.xyz, r13.xyzx, r12.zzzz, r2.xywx
movc r0.w, r3.x, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r11.xyzx, -r11.xyzx
rsq r0.w, r0.w
mul r10.yzw, r0.wwww, -r11.xxyz
dp2 r0.w, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r3.x, r13.x, r0.w
dp3_sat r2.x, r12.xyzx, r10.yzwy
dp3 r0.w, -r10.yzwy, r12.xyzx
add r0.w, r0.w, r0.w
mad r14.xyz, r12.xyzx, -r0.wwww, -r10.yzwy
mul r0.w, r2.y, l(17.000000)
exp r0.w, r0.w
add r0.w, r0.w, l(2.000000)
div r0.w, l(2.000000), r0.w
sqrt r1.z, r0.w
mul r2.zw, r3.zzzw, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.zwzz, t27.yzwx, s4, l(0.000000)
mul r2.z, r1.w, r5.z
add r2.w, -r2.y, l(1.000000)
mul r3.y, r2.w, l(5.000000)
mad r3.z, r2.w, l(5.000000), l(-2.500000)
mul r3.z, r3.z, l(0.400000)
max r3.z, r3.z, l(0.000000)
mad r13.yz, -r2.wwww, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r3.w, r13.y
mul r3.w, r2.x, r3.w
mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 100.000000, 9.136810)
mul r4.w, r2.w, r3.y
mad r4.w, -r4.w, l(2.015905), r13.z
exp r4.w, r4.w
mul r4.w, r2.x, r4.w
mul r4.w, r4.w, l(9.708090)
max r3.w, r3.w, r4.w
max r3.w, r3.w, l(1.268160)
iadd r4.w, cb2[0].y, -cb2[58].x
ftou r6.w, cb1[44].x
iadd r6.w, r6.w, l(7)
ushr r6.w, r6.w, l(3)
imad r0.y, r0.z, r6.w, r0.y
bfi r0.y, l(27), l(5), r0.y, l(16)
and r0.z, r4.w, l(-32)
iadd r6.w, -r0.z, r4.w
and r7.w, cb2[0].y, l(-32)
iadd r8.w, -r7.w, cb2[0].y
mov r15.yz, l(0,0,1.000000,0)
mov r16.xy, l(0,0,0,0)
mov r17.x, l(1.000000)
mov r18.xy, l(0,0,0,0)
mov r19.xy, l(0,0,0,0)
mov r20.xyzw, l(0,0,0,0)
mov r21.yzw, l(0,0,0,0)
mov r9.w, r0.z
loop 
  uge r13.y, r9.w, cb2[0].y
  breakc_nz r13.y
  ushr r13.y, r9.w, l(5)
  iadd r13.y, r0.y, r13.y
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.y, r13.y, l(0), t26.xxxx
  ieq r13.z, r0.z, r9.w
  bfi r13.w, r6.w, l(0), l(0), r13.y
  movc r13.y, r13.z, r13.w, r13.y
  ieq r13.z, r7.w, r9.w
  ubfe r13.w, r8.w, l(0), r13.y
  movc r13.y, r13.z, r13.w, r13.y
  mov r22.xyzw, r20.xyzw
  mov r23.xyz, r21.yzwy
  mov r13.z, r13.y
  loop 
    breakc_z r13.z
    firstbit_lo r13.w, r13.z
    ishl r15.w, l(1), r13.w
    not r15.w, r15.w
    and r13.z, r13.z, r15.w
    iadd r13.w, r9.w, r13.w
    imul null, r13.w, r13.w, l(14)
    add r24.xyz, r11.xyzx, -cb10[r13.w + 0].xyzx
    and r15.w, l(0x0000ffff), cb10[r13.w + 7].z
    ubfe r16.w, l(6), l(25), cb10[r13.w + 7].z
    imul null, r17.z, r15.w, l(6)
    dp3 r17.w, cb11[r17.z + 0].xyzx, r24.xyzx
    add_sat r17.w, r17.w, cb11[r17.z + 0].w
    dp3 r18.w, cb11[r17.z + 1].xyzx, r24.xyzx
    add_sat r18.w, r18.w, cb11[r17.z + 1].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r17.z + 2].xyzx, r24.xyzx
    add_sat r18.w, r18.w, cb11[r17.z + 2].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r17.z + 3].xyzx, r24.xyzx
    add_sat r18.w, r18.w, cb11[r17.z + 3].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r17.z + 4].xyzx, r24.xyzx
    add_sat r18.w, r18.w, cb11[r17.z + 4].w
    mul r17.w, r17.w, r18.w
    dp3 r18.w, cb11[r17.z + 5].xyzx, r24.xyzx
    add_sat r17.z, r18.w, cb11[r17.z + 5].w
    mul r15.x, r17.z, r17.w
    and r17.z, l(1), cb10[r13.w + 6].x
    movc r17.zw, r17.zzzz, r15.xxxy, r15.zzzx
    mov r15.x, cb10[r13.w + 6].x
    mov r25.xy, r17.zwzz
    mov r18.w, l(1)
    loop 
      ige r19.w, r18.w, r16.w
      breakc_nz r19.w
      iadd r19.w, r15.w, r18.w
      imul null, r19.w, r19.w, l(6)
      dp3 r24.w, cb11[r19.w + 0].xyzx, r24.xyzx
      add_sat r24.w, r24.w, cb11[r19.w + 0].w
      mul r24.w, r24.w, r25.x
      dp3 r25.z, cb11[r19.w + 1].xyzx, r24.xyzx
      add_sat r25.z, r25.z, cb11[r19.w + 1].w
      mul r24.w, r24.w, r25.z
      dp3 r25.z, cb11[r19.w + 2].xyzx, r24.xyzx
      add_sat r25.z, r25.z, cb11[r19.w + 2].w
      mul r24.w, r24.w, r25.z
      dp3 r25.z, cb11[r19.w + 3].xyzx, r24.xyzx
      add_sat r25.z, r25.z, cb11[r19.w + 3].w
      mul r24.w, r24.w, r25.z
      dp3 r25.z, cb11[r19.w + 4].xyzx, r24.xyzx
      add_sat r25.z, r25.z, cb11[r19.w + 4].w
      mul r24.w, r24.w, r25.z
      dp3 r25.z, cb11[r19.w + 5].xyzx, r24.xyzx
      add_sat r19.w, r25.z, cb11[r19.w + 5].w
      mul r25.x, r19.w, r24.w
      ushr r25.z, r15.x, l(2)
      ubfe r25.w, l(1), l(2), r15.x
      and r26.x, r25.z, l(2)
      max r26.y, r25.x, r25.y
      mad r19.w, -r24.w, r19.w, l(1.000000)
      mul r19.w, r19.w, r25.y
      movc r17.y, r26.x, r19.w, r26.y
      movc r25.xy, r25.wwww, r25.xyxx, r17.xyxx
      iadd r18.w, r18.w, l(1)
      mov r15.x, r25.z
    endloop 
    mov_sat r25.y, r25.y
    mul r15.x, r25.y, cb10[r13.w + 6].y
    lt r15.w, l(0.000000), r15.x
    if_nz r15.w
      mad r23.z, r25.y, cb10[r13.w + 6].y, r23.z
      mul r15.x, r15.x, cb10[r13.w + 7].y
      mov r26.x, cb10[r13.w + 7].w
      mov r26.yz, cb10[r13.w + 8].xxyx
      dp3 r15.w, r14.xyzx, r26.xyzx
      dp3 r16.w, r24.xyzx, r26.xyzx
      add r16.w, r16.w, -cb10[r13.w + 8].z
      ge r17.y, r16.w, l(0.000000)
      max r16.w, r3.z, |r16.w|
      movc r16.w, r17.y, r16.w, -r16.w
      max r15.w, -r15.w, l(0.00000010)
      div r15.w, r16.w, r15.w
      min r15.w, |r15.w|, l(131072.000000)
      mov r26.x, cb10[r13.w + 8].w
      mov r26.yz, cb10[r13.w + 9].xxyx
      dp3 r16.w, r14.xyzx, r26.xyzx
      dp3 r17.y, r24.xyzx, r26.xyzx
      add r17.y, r17.y, -cb10[r13.w + 9].z
      ge r17.z, r17.y, l(0.000000)
      max r17.y, r3.z, |r17.y|
      movc r17.y, r17.z, r17.y, -r17.y
      max r16.w, -r16.w, l(0.00000010)
      div r16.w, r17.y, r16.w
      min r15.w, r15.w, |r16.w|
      mov r26.x, cb10[r13.w + 9].w
      mov r26.yz, cb10[r13.w + 10].xxyx
      dp3 r16.w, r14.xyzx, r26.xyzx
      dp3 r17.y, r24.xyzx, r26.xyzx
      add r17.y, r17.y, -cb10[r13.w + 10].z
      ge r17.z, r17.y, l(0.000000)
      max r17.y, r3.z, |r17.y|
      movc r17.y, r17.z, r17.y, -r17.y
      max r16.w, -r16.w, l(0.00000010)
      div r16.w, r17.y, r16.w
      min r15.w, r15.w, |r16.w|
      mov r26.x, cb10[r13.w + 10].w
      mov r26.yz, cb10[r13.w + 11].xxyx
      dp3 r16.w, r14.xyzx, r26.xyzx
      dp3 r17.y, r24.xyzx, r26.xyzx
      add r17.y, r17.y, -cb10[r13.w + 11].z
      ge r17.z, r17.y, l(0.000000)
      max r17.y, r3.z, |r17.y|
      movc r17.y, r17.z, r17.y, -r17.y
      max r16.w, -r16.w, l(0.00000010)
      div r16.w, r17.y, r16.w
      min r15.w, r15.w, |r16.w|
      mov r26.x, cb10[r13.w + 11].w
      mov r26.yz, cb10[r13.w + 12].xxyx
      dp3 r16.w, r14.xyzx, r26.xyzx
      dp3 r17.y, r24.xyzx, r26.xyzx
      add r17.y, r17.y, -cb10[r13.w + 12].z
      ge r17.z, r17.y, l(0.000000)
      max r17.y, r3.z, |r17.y|
      movc r17.y, r17.z, r17.y, -r17.y
      max r16.w, -r16.w, l(0.00000010)
      div r16.w, r17.y, r16.w
      min r15.w, r15.w, |r16.w|
      mov r26.x, cb10[r13.w + 12].w
      mov r26.yz, cb10[r13.w + 13].xxyx
      dp3 r16.w, r14.xyzx, r26.xyzx
      dp3 r17.y, r24.xyzx, r26.xyzx
      add r17.y, r17.y, -cb10[r13.w + 13].z
      ge r17.z, r17.y, l(0.000000)
      max r17.y, r3.z, |r17.y|
      movc r17.y, r17.z, r17.y, -r17.y
      max r16.w, -r16.w, l(0.00000010)
      div r16.w, r17.y, r16.w
      min r15.w, r15.w, |r16.w|
      add r26.x, r24.x, cb10[r13.w + 3].w
      add r26.yz, r24.yyzy, cb10[r13.w + 4].xxyx
      mad r17.yzw, r14.xxyz, r15.wwww, r26.xxyz
      dp3 r16.w, r17.yzwy, r17.yzwy
      sqrt r16.w, r16.w
      div r15.w, r15.w, r16.w
      add r15.w, r15.w, r15.w
      sqrt r15.w, r15.w
      mad r15.w, r2.w, l(5.000000), r15.w
      add r15.w, r15.w, l(-0.844800)
      mov r26.x, cb10[r13.w + 0].w
      mov r26.y, cb10[r13.w + 1].z
      mov r26.z, cb10[r13.w + 2].y
      dp3 r27.x, r17.yzwy, r26.xyzx
      mov r28.xy, cb10[r13.w + 1].xwxx
      mov r28.z, cb10[r13.w + 2].z
      dp3 r27.y, r17.yzwy, r28.xyzx
      mov r29.x, cb10[r13.w + 1].y
      mov r29.yz, cb10[r13.w + 2].xxwx
      dp3 r27.z, r17.yzwy, r29.xyzx
      ubfe r16.w, l(9), l(16), cb10[r13.w + 7].z
      utof r27.w, r16.w
      sample_l_indexable(texturecubearray)(float,float,float,float) r17.yzw, r27.xyzw, t8.wxyz, s2, r15.w
      dp3 r30.x, r24.xyzx, r26.xyzx
      dp3 r30.y, r24.xyzx, r28.xyzx
      dp3 r30.z, r24.xyzx, r29.xyzx
      mad_sat r24.xyz, r30.xyzx, cb10[r13.w + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      mul r30.xy, r24.xyxx, cb10[r13.w + 4].zwzz
      mul r30.z, r24.z, cb10[r13.w + 5].x
      add r24.xyz, r30.xyzx, cb10[r13.w + 5].yzwy
      dp3 r27.x, r12.xyzx, r26.xyzx
      dp3 r27.y, r12.xyzx, r28.xyzx
      dp3 r27.z, r12.xyzx, r29.xyzx
      lt r25.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r27.xxyz
      movc r16.z, r25.x, l(0), l(0.500000)
      add r26.xyz, r16.xyzx, r24.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t17.xyzw, s4, l(0.000000)
      mul r28.xyz, r27.xyzx, r27.xyzx
      mul r28.xyz, r15.xxxx, r28.xyzx
      movc r18.z, r25.z, l(0), l(0.500000)
      add r29.xyz, r18.xyzx, r24.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t18.xyzw, s4, l(0.000000)
      mul r29.xyz, r28.yyyy, r29.xyzx
      mad r26.xyz, r26.xyzx, r28.xxxx, r29.xyzx
      movc r19.z, r25.w, l(0), l(0.500000)
      add r24.xyz, r19.xyzx, r24.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r24.xyz, r24.xyzx, t19.xyzw, s4, l(0.000000)
      mad r24.xyz, r24.xyzx, r28.zzzz, r26.xyzx
      sample_l_indexable(texturecubearray)(float,float,float,float) r25.xzw, r27.xyzw, t8.xwyz, s2, l(6.000000)
      mul r26.xyz, r24.xyzx, r25.xzwx
      dp3 r13.w, r26.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r22.xyz, r24.xyzx, r25.xzwx, r22.xyzx
      mul r15.w, r3.w, r13.w
      mul r17.yzw, r15.xxxx, r17.yyzw
      dp3 r15.x, r17.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r13.w, r3.w, r13.w, r15.x
      div r13.w, r15.w, r13.w
      mov r24.x, r22.w
      mov r24.yz, r23.xxyx
      mad r23.xyw, r17.zwzy, r13.wwww, r24.yzyx
      mov r22.w, r23.w
    endif 
  endloop 
  mov r20.xyzw, r22.xyzw
  mov r21.yzw, r23.xxyz
  iadd r9.w, r9.w, l(32)
endloop 
lt r7.w, r21.w, l(1.000000)
if_nz r7.w
  mov r15.yz, l(0,0,1.000000,0)
  mov r16.xy, l(0,0,0,0)
  mov r17.x, l(1.000000)
  mov r18.xy, l(0,0,0,0)
  mov r19.xy, l(0,0,0,0)
  mov r22.x, r20.w
  mov r22.yzw, r21.yyzw
  mov r13.yzw, r20.xxyz
  mov r7.w, r21.w
  mov r8.w, l(0)
  loop 
    uge r9.w, r8.w, r4.w
    breakc_nz r9.w
    ushr r9.w, r8.w, l(5)
    iadd r9.w, r0.y, r9.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.w, r9.w, l(0), t26.xxxx
    ieq r15.w, r0.z, r8.w
    ubfe r16.w, r6.w, l(0), r9.w
    movc r9.w, r15.w, r16.w, r9.w
    mov r23.xyzw, r22.xyzw
    mov r24.xyz, r13.yzwy
    mov r15.w, r7.w
    mov r16.w, r9.w
    loop 
      breakc_z r16.w
      firstbit_lo r17.z, r16.w
      ishl r17.w, l(1), r17.z
      not r17.w, r17.w
      and r16.w, r16.w, r17.w
      iadd r17.z, r8.w, r17.z
      imul null, r17.z, r17.z, l(14)
      add r25.xyz, r11.xyzx, -cb10[r17.z + 0].xyzx
      and r17.w, l(0x0000ffff), cb10[r17.z + 7].z
      ubfe r18.w, l(6), l(25), cb10[r17.z + 7].z
      imul null, r19.w, r17.w, l(6)
      dp3 r24.w, cb11[r19.w + 0].xyzx, r25.xyzx
      add_sat r24.w, r24.w, cb11[r19.w + 0].w
      dp3 r25.w, cb11[r19.w + 1].xyzx, r25.xyzx
      add_sat r25.w, r25.w, cb11[r19.w + 1].w
      mul r24.w, r24.w, r25.w
      dp3 r25.w, cb11[r19.w + 2].xyzx, r25.xyzx
      add_sat r25.w, r25.w, cb11[r19.w + 2].w
      mul r24.w, r24.w, r25.w
      dp3 r25.w, cb11[r19.w + 3].xyzx, r25.xyzx
      add_sat r25.w, r25.w, cb11[r19.w + 3].w
      mul r24.w, r24.w, r25.w
      dp3 r25.w, cb11[r19.w + 4].xyzx, r25.xyzx
      add_sat r25.w, r25.w, cb11[r19.w + 4].w
      mul r24.w, r24.w, r25.w
      dp3 r25.w, cb11[r19.w + 5].xyzx, r25.xyzx
      add_sat r19.w, r25.w, cb11[r19.w + 5].w
      mul r15.x, r19.w, r24.w
      and r19.w, l(1), cb10[r17.z + 6].x
      movc r26.xy, r19.wwww, r15.xyxx, r15.zxzz
      mov r15.x, cb10[r17.z + 6].x
      mov r27.xy, r26.xyxx
      mov r19.w, l(1)
      loop 
        ige r24.w, r19.w, r18.w
        breakc_nz r24.w
        iadd r24.w, r17.w, r19.w
        imul null, r24.w, r24.w, l(6)
        dp3 r25.w, cb11[r24.w + 0].xyzx, r25.xyzx
        add_sat r25.w, r25.w, cb11[r24.w + 0].w
        mul r25.w, r25.w, r27.x
        dp3 r26.z, cb11[r24.w + 1].xyzx, r25.xyzx
        add_sat r26.z, r26.z, cb11[r24.w + 1].w
        mul r25.w, r25.w, r26.z
        dp3 r26.z, cb11[r24.w + 2].xyzx, r25.xyzx
        add_sat r26.z, r26.z, cb11[r24.w + 2].w
        mul r25.w, r25.w, r26.z
        dp3 r26.z, cb11[r24.w + 3].xyzx, r25.xyzx
        add_sat r26.z, r26.z, cb11[r24.w + 3].w
        mul r25.w, r25.w, r26.z
        dp3 r26.z, cb11[r24.w + 4].xyzx, r25.xyzx
        add_sat r26.z, r26.z, cb11[r24.w + 4].w
        mul r25.w, r25.w, r26.z
        dp3 r26.z, cb11[r24.w + 5].xyzx, r25.xyzx
        add_sat r24.w, r26.z, cb11[r24.w + 5].w
        mul r27.x, r24.w, r25.w
        ushr r26.z, r15.x, l(2)
        ubfe r26.w, l(1), l(2), r15.x
        and r27.z, r26.z, l(2)
        max r27.w, r27.x, r27.y
        mad r24.w, -r25.w, r24.w, l(1.000000)
        mul r24.w, r24.w, r27.y
        movc r17.y, r27.z, r24.w, r27.w
        movc r27.xy, r26.wwww, r27.xyxx, r17.xyxx
        iadd r19.w, r19.w, l(1)
        mov r15.x, r26.z
      endloop 
      add_sat r15.x, -r15.w, r27.y
      mul r17.y, r15.x, cb10[r17.z + 6].y
      lt r17.w, l(0.000000), r17.y
      if_nz r17.w
        mad r23.w, r15.x, cb10[r17.z + 6].y, r23.w
        mul r15.x, r17.y, cb10[r17.z + 7].y
        mov r26.x, cb10[r17.z + 7].w
        mov r26.yz, cb10[r17.z + 8].xxyx
        dp3 r17.y, r14.xyzx, r26.xyzx
        dp3 r17.w, r25.xyzx, r26.xyzx
        add r17.w, r17.w, -cb10[r17.z + 8].z
        ge r18.w, r17.w, l(0.000000)
        max r17.w, r3.z, |r17.w|
        movc r17.w, r18.w, r17.w, -r17.w
        max r17.y, -r17.y, l(0.00000010)
        div r17.y, r17.w, r17.y
        min r17.y, |r17.y|, l(131072.000000)
        mov r26.x, cb10[r17.z + 8].w
        mov r26.yz, cb10[r17.z + 9].xxyx
        dp3 r17.w, r14.xyzx, r26.xyzx
        dp3 r18.w, r25.xyzx, r26.xyzx
        add r18.w, r18.w, -cb10[r17.z + 9].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r3.z, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.y, |r17.w|, r17.y
        mov r26.x, cb10[r17.z + 9].w
        mov r26.yz, cb10[r17.z + 10].xxyx
        dp3 r17.w, r14.xyzx, r26.xyzx
        dp3 r18.w, r25.xyzx, r26.xyzx
        add r18.w, r18.w, -cb10[r17.z + 10].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r3.z, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.y, |r17.w|, r17.y
        mov r26.x, cb10[r17.z + 10].w
        mov r26.yz, cb10[r17.z + 11].xxyx
        dp3 r17.w, r14.xyzx, r26.xyzx
        dp3 r18.w, r25.xyzx, r26.xyzx
        add r18.w, r18.w, -cb10[r17.z + 11].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r3.z, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.y, |r17.w|, r17.y
        mov r26.x, cb10[r17.z + 11].w
        mov r26.yz, cb10[r17.z + 12].xxyx
        dp3 r17.w, r14.xyzx, r26.xyzx
        dp3 r18.w, r25.xyzx, r26.xyzx
        add r18.w, r18.w, -cb10[r17.z + 12].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r3.z, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.y, |r17.w|, r17.y
        mov r26.x, cb10[r17.z + 12].w
        mov r26.yz, cb10[r17.z + 13].xxyx
        dp3 r17.w, r14.xyzx, r26.xyzx
        dp3 r18.w, r25.xyzx, r26.xyzx
        add r18.w, r18.w, -cb10[r17.z + 13].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r3.z, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r17.w, -r17.w, l(0.00000010)
        div r17.w, r18.w, r17.w
        min r17.y, |r17.w|, r17.y
        add r26.x, r25.x, cb10[r17.z + 3].w
        add r26.yz, r25.yyzy, cb10[r17.z + 4].xxyx
        mad r26.xyz, r14.xyzx, r17.yyyy, r26.xyzx
        dp3 r17.w, r26.xyzx, r26.xyzx
        sqrt r17.w, r17.w
        div r17.y, r17.y, r17.w
        add r17.y, r17.y, r17.y
        sqrt r17.y, r17.y
        mad r17.y, r2.w, l(5.000000), r17.y
        add r17.y, r17.y, l(-0.844800)
        mov r28.x, cb10[r17.z + 0].w
        mov r28.y, cb10[r17.z + 1].z
        mov r28.z, cb10[r17.z + 2].y
        dp3 r29.x, r26.xyzx, r28.xyzx
        mov r30.xy, cb10[r17.z + 1].xwxx
        mov r30.z, cb10[r17.z + 2].z
        dp3 r29.y, r26.xyzx, r30.xyzx
        mov r31.x, cb10[r17.z + 1].y
        mov r31.yz, cb10[r17.z + 2].xxwx
        dp3 r29.z, r26.xyzx, r31.xyzx
        ubfe r17.w, l(9), l(16), cb10[r17.z + 7].z
        utof r29.w, r17.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r26.xyz, r29.xyzw, t8.xyzw, s2, r17.y
        dp3 r32.x, r25.xyzx, r28.xyzx
        dp3 r32.y, r25.xyzx, r30.xyzx
        dp3 r32.z, r25.xyzx, r31.xyzx
        mad_sat r25.xyz, r32.xyzx, cb10[r17.z + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
        mul r32.xy, r25.xyxx, cb10[r17.z + 4].zwzz
        mul r32.z, r25.z, cb10[r17.z + 5].x
        add r17.yzw, r32.xxyz, cb10[r17.z + 5].yyzw
        dp3 r29.x, r12.xyzx, r28.xyzx
        dp3 r29.y, r12.xyzx, r30.xyzx
        dp3 r29.z, r12.xyzx, r31.xyzx
        lt r25.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r29.xyzx
        movc r16.z, r25.x, l(0), l(0.500000)
        add r27.xzw, r16.xxyz, r17.yyzw
        sample_l_indexable(texture3d)(float,float,float,float) r27.xzw, r27.xzwx, t17.xwyz, s4, l(0.000000)
        mul r28.xyz, r29.xyzx, r29.xyzx
        mul r28.xyz, r15.xxxx, r28.xyzx
        movc r18.z, r25.y, l(0), l(0.500000)
        add r25.xyw, r17.yzyw, r18.xyxz
        sample_l_indexable(texture3d)(float,float,float,float) r25.xyw, r25.xywx, t18.xywz, s4, l(0.000000)
        mul r25.xyw, r28.yyyy, r25.xyxw
        mad r25.xyw, r27.xzxw, r28.xxxx, r25.xyxw
        movc r19.z, r25.z, l(0), l(0.500000)
        add r17.yzw, r17.yyzw, r19.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r17.yzw, r17.yzwy, t19.wxyz, s4, l(0.000000)
        mad r17.yzw, r17.yyzw, r28.zzzz, r25.xxyw
        sample_l_indexable(texturecubearray)(float,float,float,float) r25.xyz, r29.xyzw, t8.xyzw, s2, l(6.000000)
        mul r27.xzw, r17.yyzw, r25.xxyz
        dp3 r16.z, r27.xzwx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r24.xyz, r17.yzwy, r25.xyzx, r24.xyzx
        mul r17.y, r3.w, r16.z
        mul r25.xyz, r15.xxxx, r26.xyzx
        dp3 r15.x, r25.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r15.x, r3.w, r16.z, r15.x
        div r15.x, r17.y, r15.x
        mad r23.xyz, r25.xyzx, r15.xxxx, r23.xyzx
      endif 
    endloop 
    mov r22.xyzw, r23.xyzw
    mov r13.yzw, r24.xxyz
    iadd r8.w, r8.w, l(32)
  endloop 
  mov r21.xyzw, r22.zxyw
  mov r20.xyz, r13.yzwy
  mov r21.xyzw, r21.yzxw
else 
  mov r21.x, r20.w
endif 
max r0.y, r21.w, l(1.000000)
rcp r0.y, r0.y
mov_sat r21.w, r21.w
mul r13.yzw, r0.yyyy, r20.xxyz
mul r15.xyz, r0.yyyy, r21.xyzx
lt r0.z, r21.w, l(0.990000)
if_nz r0.z
  add r0.z, -r21.w, l(1.000000)
  mul r2.w, r0.z, cb2[19].x
  add r16.xyz, r11.xyzx, -cb2[35].xyzx
  mul r17.x, r16.x, cb2[35].w
  mul r17.yz, r16.yyzy, cb2[36].xxyx
  add_sat r16.xyz, r17.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r17.xy, r16.xyxx, cb2[36].zwzz
  mul r17.z, r16.z, cb2[37].x
  add r16.xyz, r17.xyzx, cb2[37].yzwy
  lt r17.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
  movc r17.xyz, r17.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r17.w, l(0)
  add r18.xyz, r16.xyzx, r17.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t17.xyzw, s4, l(0.000000)
  mul r19.xyz, r12.xyzx, r12.xyzx
  mul r19.xyz, r2.wwww, r19.xyzx
  add r21.xyz, r16.xyzx, r17.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t18.xyzw, s4, l(0.000000)
  mul r21.xyz, r19.yyyy, r21.xyzx
  mad r18.xyz, r18.xyzx, r19.xxxx, r21.xyzx
  add r16.xyz, r16.xyzx, r17.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r16.xyz, r16.xyzx, t19.xyzw, s4, l(0.000000)
  mad r16.xyz, r16.xyzx, r19.zzzz, r18.xyzx
  mov r12.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r12.xyzw, t8.xyzw, s2, l(6.000000)
  mul r16.xyz, r16.xyzx, r17.xyzx
  dp3 r2.w, r16.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r13.yzw, r20.xxyz, r0.yyyy, r16.xxyz
  mov r14.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r3.yzw, r14.xyzw, t8.wxyz, s2, r3.y
  mad r0.y, cb2[19].x, r0.z, -r2.w
  mad r0.y, r2.y, r0.y, r2.w
  mad r15.xyz, r3.yzwy, r0.yyyy, r15.xyzx
endif 
mad r0.y, r5.z, r1.w, r2.x
log r0.y, |r0.y|
mul r0.y, r0.y, r1.z
exp r0.y, r0.y
mad r0.y, r5.z, r1.w, r0.y
add_sat r0.y, r0.y, l(-1.000000)
mul r3.yzw, r2.zzzz, r13.yyzw
mad r2.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t5.zxyw, s2, l(0.000000)
mul r13.yzw, r0.yyyy, r15.xxyz
mul r15.xyz, r2.yyyy, r13.yzwy
mul r2.yzw, r2.zzzz, r13.yyzw
sqrt r0.y, r1.z
mad r0.y, r0.y, l(0.500000), l(0.500000)
mul r0.y, r0.y, r0.y
mul r0.z, r0.y, l(0.500000)
mad r0.y, -r0.y, l(0.500000), l(1.000000)
mad r1.w, r2.x, r0.y, r0.z
mul r0.yz, r0.yyzy, r1.wwww
ushr r0.x, r0.x, l(24)
imul null, r0.x, r0.x, l(15)
ubfe r1.w, l(3), l(24), cb9[r0.x + 1].w
switch r1.w
  case l(4)
  lt r1.w, l(0.000000), cb9[r0.x + 6].y
  mov r16.xy, cb9[r0.x + 5].zwzz
  mov r16.z, cb9[r0.x + 6].x
  mad r13.yzw, -r16.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r0.x + 0].xxyz
  add r17.xyz, -r11.xyzx, r13.yzwy
  dp3 r4.w, r16.xyzx, r17.xyzx
  div_sat r5.z, -r4.w, cb9[r0.x + 6].y
  mad r18.xyz, r5.zzzz, r16.xyzx, r13.yzwy
  movc r18.xyz, r1.wwww, r18.xyzx, cb9[r0.x + 0].xyzx
  add r18.xyz, -r11.xyzx, r18.xyzx
  dp3 r6.w, r18.xyzx, r18.xyzx
  rsq r7.w, r6.w
  mul r18.xyz, r7.wwww, r18.xyzx
  dp3 r7.w, r12.xyzx, r18.xyzx
  mov_sat r8.w, r7.w
  lt r9.w, l(0.000000), r8.w
  if_nz r9.w
    sqrt r9.w, r6.w
    mul r12.w, cb9[r0.x + 3].x, cb9[r0.x + 3].x
    div r6.w, r12.w, r6.w
    min r6.w, r6.w, l(1.000000)
    mad_sat r18.xy, r9.wwww, cb9[r0.x + 2].xzxx, cb9[r0.x + 2].ywyy
    mul r18.zw, r18.xxxy, r18.xxxy
    mad r18.xy, r18.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
    mul r18.xy, r18.xyxx, r18.zwzz
    mul r6.w, r6.w, r18.x
    mul r6.w, r18.y, r6.w
    lt r9.w, l(0.000000), r6.w
    if_nz r9.w
      ubfe r9.w, l(3), l(27), cb9[r0.x + 1].w
      ine r9.w, r9.w, l(1)
      if_nz r9.w
        utof r18.xy, r1.yxyy
        dp2 r9.w, r18.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
        frc r9.w, r9.w
        mul r9.w, r9.w, l(52.982918)
        frc r9.w, r9.w
        mad r9.w, r9.w, l(6.28318548), cb1[70].w
        sincos r18.x, r19.x, r9.w
        mad r9.w, |r7.w|, l(-0.200000), l(0.400000)
        mad r18.yzw, r12.xxyz, r9.wwww, r11.xxyz
        add r18.yzw, r18.yyzw, -cb9[r0.x + 4].yyzw
        max r9.w, |r18.w|, |r18.z|
        max r9.w, r9.w, |r18.y|
        div r9.w, cb9[r0.x + 5].x, r9.w
        add r9.w, r9.w, cb9[r0.x + 5].y
        dp3 r12.w, r18.yzwy, r18.yzwy
        rsq r12.w, r12.w
        max r9.w, r9.w, l(0.00006104)
        and r14.w, l(0x0000ffff), cb9[r0.x + 1].w
        mov r20.x, -r3.x
        utof r21.w, r14.w
        mov r20.y, r13.x
        mov r20.z, r3.x
        mov r14.w, l(0)
        mov r15.w, l(0)
        loop 
          ige r16.w, r15.w, l(8)
          breakc_nz r16.w
          dp2 r19.y, icb[r15.w + 0].yxyy, r20.xyxx
          dp2 r19.z, icb[r15.w + 0].yxyy, r20.yzyy
          mul r22.yz, r19.yyzy, cb9[r0.x + 3].yyyy
          mul r22.x, r19.x, r22.y
          mul r22.w, r18.x, r22.y
          mad r21.xyz, r18.yzwy, r12.wwww, r22.xzwx
          sample_c_lz_indexable(texturecubearray)(float,float,float,float) r16.w, r21.xyzw, t10.xxxx, s13, r9.w
          mad r14.w, r16.w, l(0.125000), r14.w
          iadd r15.w, r15.w, l(1)
        endloop 
      else 
        mov r14.w, l(1.000000)
      endif 
      mul r6.w, r6.w, r14.w
      lt r9.w, l(0.000000), r6.w
      if_nz r9.w
        mul r9.w, r0.w, cb9[r0.x + 1].z
        mul r9.w, r9.w, l(0.250000)
        dp3 r12.w, r16.xyzx, r14.xyzx
        dp3 r14.x, r14.xyzx, r17.xyzx
        mad r14.y, -r12.w, r12.w, cb9[r0.x + 6].y
        mad r4.w, r12.w, r14.x, -r4.w
        div_sat r4.w, r4.w, r14.y
        div r12.w, r14.y, cb9[r0.x + 6].y
        mul r12.w, r12.w, l(10.000000)
        min r12.w, r12.w, l(1.000000)
        add r4.w, -r5.z, r4.w
        mad r4.w, r12.w, r4.w, r5.z
        mad r13.yzw, r4.wwww, r16.xxyz, r13.yyzw
        movc r13.yzw, r1.wwww, r13.yyzw, cb9[r0.x + 0].xxyz
        add r13.yzw, -r11.xxyz, r13.yyzw
        dp3 r1.w, r13.yzwy, r13.yzwy
        rsq r1.w, r1.w
        mul r14.xyz, r1.wwww, r13.yzwy
        ubfe r4.w, l(4), l(16), cb9[r0.x + 1].w
        ult r5.z, l(0), r4.w
        and r5.z, r10.x, r5.z
        if_nz r5.z
          iadd r4.w, r4.w, cb2[0].x
          imad r4.w, r4.w, l(15), l(-15)
          mad r5.z, |r7.w|, l(-0.200000), l(0.400000)
          mad r16.xyz, r12.xyzx, r5.zzzz, r11.xyzx
          mov r17.xyz, cb9[r4.w + 6].yzwy
          mov r17.w, cb9[r4.w + 7].x
          mov r16.w, l(1.000000)
          dp4 r5.z, r17.xyzw, r16.xyzw
          mov r17.xyz, cb9[r4.w + 7].yzwy
          mov r17.w, cb9[r4.w + 8].x
          dp4 r12.w, r17.xyzw, r16.xyzw
          lt r14.w, r12.w, r5.z
          if_z r14.w
            mov r17.xyz, cb9[r4.w + 4].yzwy
            mov r17.w, cb9[r4.w + 5].x
            dp4 r17.x, r17.xyzw, r16.xyzw
            mov r18.xyz, cb9[r4.w + 5].yzwy
            mov r18.w, cb9[r4.w + 6].x
            dp4 r17.y, r18.xyzw, r16.xyzw
            div r16.xy, r17.xyxx, r12.wwww
            mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r17.x, r16.x, cb9[r4.w + 9].w
            add r17.y, r16.y, cb9[r4.w + 10].x
            mul r16.xy, r17.xyxx, cb9[r4.w + 9].yzyy
            div r16.zw, cb9[r4.w + 3].yyyy, cb9[r4.w + 8].yyyw
            add r17.xy, -r16.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r17.xy, r16.xyxx, r17.xyxx
            ge r16.zw, r16.zzzw, r16.xxxy
            or r16.zw, r16.zzzw, r17.xxxy
            or r15.w, r16.w, r16.z
            if_z r15.w
              mov_sat r16.xy, r16.xyxx
              mad r17.x, r16.x, cb9[r4.w + 8].y, cb9[r4.w + 8].z
              mad r17.y, r16.y, cb9[r4.w + 8].w, cb9[r4.w + 9].x
              mul r16.x, r12.w, cb9[r4.w + 10].z
              mad r5.z, cb9[r4.w + 10].y, r12.w, r5.z
              div r5.z, r5.z, r16.x
            endif 
          else 
            mov r15.w, l(-1)
          endif 
          or r12.w, r14.w, r15.w
          if_z r12.w
            max r5.z, r5.z, l(0.00006104)
            and r12.w, l(0x0000ffff), cb9[r4.w + 1].w
            if_nz cb2[58].y
              mov r16.x, -r3.x
              utof r18.z, r12.w
              mov r16.y, r13.x
              mov r16.z, r3.x
              mov r14.w, l(0)
              mov r15.w, l(0)
              loop 
                ige r16.w, r15.w, l(8)
                breakc_nz r16.w
                dp2 r19.x, icb[r15.w + 0].yxyy, r16.xyxx
                dp2 r19.y, icb[r15.w + 0].yxyy, r16.yzyy
                mad r18.xy, r19.xyxx, cb9[r4.w + 3].yyyy, r17.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r18.xyzx, t9.xxxx, s13, r5.z
                mad r14.w, r16.w, l(0.125000), r14.w
                iadd r15.w, r15.w, l(1)
              endloop 
            else 
              utof r17.z, r12.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r17.xyzx, t9.xxxx, s13, r5.z
            endif 
            mul r4.w, r14.w, r14.w
            mul r4.w, r14.w, r4.w
          else 
            mov r4.w, l(1.000000)
          endif 
          mul r6.w, r4.w, r6.w
        else 
          ubfe r4.w, l(4), l(20), cb9[r0.x + 1].w
          ult r5.z, l(0), r4.w
          not r12.w, r10.x
          and r5.z, r5.z, r12.w
          if_nz r5.z
            iadd r4.w, r4.w, cb2[0].x
            imad r4.w, r4.w, l(15), l(-15)
            mad r5.z, |r7.w|, l(-0.200000), l(0.400000)
            mad r16.xyz, r12.xyzx, r5.zzzz, r11.xyzx
            mov r17.xyz, cb9[r4.w + 6].yzwy
            mov r17.w, cb9[r4.w + 7].x
            mov r16.w, l(1.000000)
            dp4 r5.z, r17.xyzw, r16.xyzw
            mov r17.xyz, cb9[r4.w + 7].yzwy
            mov r17.w, cb9[r4.w + 8].x
            dp4 r12.w, r17.xyzw, r16.xyzw
            lt r14.w, r12.w, r5.z
            if_z r14.w
              mov r17.xyz, cb9[r4.w + 4].yzwy
              mov r17.w, cb9[r4.w + 5].x
              dp4 r17.x, r17.xyzw, r16.xyzw
              mov r18.xyz, cb9[r4.w + 5].yzwy
              mov r18.w, cb9[r4.w + 6].x
              dp4 r17.y, r18.xyzw, r16.xyzw
              div r16.xy, r17.xyxx, r12.wwww
              mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r17.x, r16.x, cb9[r4.w + 9].w
              add r17.y, r16.y, cb9[r4.w + 10].x
              mul r16.xy, r17.xyxx, cb9[r4.w + 9].yzyy
              div r16.zw, cb9[r4.w + 3].yyyy, cb9[r4.w + 8].yyyw
              add r17.xy, -r16.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r17.xy, r16.xyxx, r17.xyxx
              ge r16.zw, r16.zzzw, r16.xxxy
              or r16.zw, r16.zzzw, r17.xxxy
              or r15.w, r16.w, r16.z
              if_z r15.w
                mov_sat r16.xy, r16.xyxx
                mad r17.x, r16.x, cb9[r4.w + 8].y, cb9[r4.w + 8].z
                mad r17.y, r16.y, cb9[r4.w + 8].w, cb9[r4.w + 9].x
                mul r16.x, r12.w, cb9[r4.w + 10].z
                mad r5.z, cb9[r4.w + 10].y, r12.w, r5.z
                div r5.z, r5.z, r16.x
              endif 
            else 
              mov r15.w, l(-1)
            endif 
            or r12.w, r14.w, r15.w
            if_z r12.w
              max r5.z, r5.z, l(0.00006104)
              and r12.w, l(0x0000ffff), cb9[r4.w + 1].w
              if_nz cb2[58].y
                mov r16.x, -r3.x
                utof r18.z, r12.w
                mov r16.y, r13.x
                mov r16.z, r3.x
                mov r14.w, l(0)
                mov r15.w, l(0)
                loop 
                  ige r16.w, r15.w, l(8)
                  breakc_nz r16.w
                  dp2 r19.x, icb[r15.w + 0].yxyy, r16.xyxx
                  dp2 r19.y, icb[r15.w + 0].yxyy, r16.yzyy
                  mad r18.xy, r19.xyxx, cb9[r4.w + 3].yyyy, r17.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r18.xyzx, t9.xxxx, s13, r5.z
                  mad r14.w, r16.w, l(0.125000), r14.w
                  iadd r15.w, r15.w, l(1)
                endloop 
              else 
                utof r17.z, r12.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r17.xyzx, t9.xxxx, s13, r5.z
              endif 
              mul r4.w, r14.w, r14.w
              mul r4.w, r14.w, r4.w
            else 
              mov r4.w, l(1.000000)
            endif 
            mul r6.w, r4.w, r6.w
          endif 
        endif 
        mad r4.w, -r2.x, l(0.500000), l(1.000000)
        mad r4.w, -r8.w, r4.w, l(1.000000)
        mul r4.w, r4.w, r4.w
        mad r4.w, -r4.w, l(0.620000), l(0.620000)
        add r4.w, -r8.w, r4.w
        mad r4.w, r1.z, r4.w, r8.w
        mul r4.w, r6.w, r4.w
        mov r16.x, cb9[r0.x + 0].w
        mov r16.yz, cb9[r0.x + 1].xxyx
        lt r5.z, l(0.000000), r7.w
        mad r17.xyz, r4.wwww, r16.xyzx, r3.yzwy
        dp3_sat r4.w, r12.xyzx, r14.xyzx
        mad r13.yzw, r13.yyzw, r1.wwww, r10.yyzw
        dp3 r1.w, r13.yzwy, r13.yzwy
        rsq r1.w, r1.w
        mul r13.yzw, r1.wwww, r13.yyzw
        dp3 r1.w, r13.yzwy, r10.yzwy
        dp3 r7.w, r12.xyzx, r13.yzwy
        mad r8.w, |r7.w|, r0.w, -|r7.w|
        mad r7.w, |r7.w|, r8.w, l(1.000000)
        mad r8.w, r4.w, r0.y, r0.z
        mul r7.w, r7.w, r7.w
        mul r7.w, r8.w, r7.w
        rcp r7.w, r7.w
        mul r4.w, r9.w, r4.w
        mul r4.w, r4.w, r7.w
        mul r4.w, r6.w, r4.w
        mad r13.yzw, r4.wwww, r16.xxyz, r2.yyzw
        add_sat r1.w, -r1.w, l(1.000000)
        mul r6.w, r1.w, r1.w
        mul r6.w, r6.w, r6.w
        mul r1.w, r1.w, r6.w
        mul r1.w, r1.w, r4.w
        mad r14.xyz, r1.wwww, r16.xyzx, r15.xyzx
        movc r3.yzw, r5.zzzz, r17.xxyz, r3.yyzw
        movc r15.xyz, r5.zzzz, r14.xyzx, r15.xyzx
        movc r2.yzw, r5.zzzz, r13.yyzw, r2.yyzw
      endif 
    endif 
  endif 
  break 
  case l(2)
  add r14.xy, -r11.xyxx, cb9[r0.x + 3].zwzz
  add r14.z, -r11.z, cb9[r0.x + 4].x
  dp3 r1.w, r14.xyzx, r14.xyzx
  rsq r1.w, r1.w
  mul r13.yzw, r1.wwww, r14.xxyz
  dp3 r4.w, r12.xyzx, r13.yzwy
  mov_sat r5.z, r4.w
  lt r6.w, l(0.000000), r5.z
  if_nz r6.w
    mov r16.xyz, cb9[r0.x + 7].yzwy
    mov r16.w, cb9[r0.x + 8].x
    mov r11.w, l(1.000000)
    dp4 r6.w, r16.xyzw, r11.xyzw
    lt r7.w, r6.w, l(1.000000)
    if_nz r7.w
      mov r13.yzw, l(0,1.000000,1.000000,1.000000)
      mov r7.w, l(0)
    else 
      add r17.xyz, -r11.xyzx, cb9[r0.x + 0].xyzx
      mul r8.w, cb9[r0.x + 3].x, cb9[r0.x + 3].x
      dp3 r9.w, r17.xyzx, r17.xyzx
      div r8.w, r8.w, r9.w
      min r8.w, r8.w, l(1.000000)
      mad_sat r17.xy, r6.wwww, cb9[r0.x + 2].xzxx, cb9[r0.x + 2].ywyy
      mul r17.zw, r17.xxxy, r17.xxxy
      mad r17.xy, r17.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r17.xy, r17.xyxx, r17.zwzz
      mul r8.w, r8.w, r17.x
      mul r8.w, r17.y, r8.w
      mov r17.xyz, cb9[r0.x + 4].yzwy
      mov r17.w, cb9[r0.x + 5].x
      dp4 r17.x, r17.xyzw, r11.xyzw
      mov r18.xyz, cb9[r0.x + 5].yzwy
      mov r18.w, cb9[r0.x + 6].x
      dp4 r17.y, r18.xyzw, r11.xyzw
      div r17.xy, r17.xyxx, r6.wwww
      lt r6.w, cb9[r0.x + 10].w, l(0.00048828)
      if_nz r6.w
        mad_sat r18.xy, |r17.xyxx|, cb9[r0.x + 12].xyxx, cb9[r0.x + 12].zwzz
        mul r18.zw, r18.xxxy, r18.xxxy
        mad r18.xy, r18.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r18.xy, r18.xyxx, r18.zwzz
        mul r6.w, r18.y, r18.x
      else 
        mul_sat r18.xyzw, |r17.yyxx|, cb9[r0.x + 11].xyzw
        log r18.xyzw, r18.xyzw
        mul r18.xyzw, r18.xyzw, cb9[r0.x + 12].zzzz
        exp r18.xyzw, r18.xyzw
        add r18.xy, r18.zwzz, r18.xyxx
        log r18.xy, r18.xyxx
        mul r18.xy, r18.xyxx, cb9[r0.x + 12].wwww
        exp r18.xy, r18.xyxx
        mul r9.w, r18.x, cb9[r0.x + 12].x
        mad r11.w, cb9[r0.x + 12].y, r18.y, l(-1.000000)
        mad r9.w, cb9[r0.x + 12].y, r18.y, -r9.w
        div_sat r9.w, r11.w, r9.w
        mul r11.w, r9.w, r9.w
        mad r9.w, r9.w, l(-2.000000), l(3.000000)
        mul r6.w, r9.w, r11.w
      endif 
      mul r7.w, r6.w, r8.w
      and r6.w, l(255), cb9[r0.x + 14].w
      if_nz r6.w
        mov r17.z, l(1.000000)
        dp3 r8.w, cb9[r0.x + 13].xyzx, r17.xyzx
        mov r18.x, cb9[r0.x + 13].w
        mov r18.yz, cb9[r0.x + 14].xxyx
        dp3 r9.w, r18.xyzx, r17.xyzx
        frc r17.x, r8.w
        frc r17.y, r9.w
        iadd r6.w, r6.w, l(-1)
        utof r17.z, r6.w
        sample_l_indexable(texture2darray)(float,float,float,float) r13.yzw, r17.xyzx, t20.wxyz, s2, l(0.000000)
      else 
        mov r13.yzw, l(0,1.000000,1.000000,1.000000)
      endif 
    endif 
    mov r17.x, cb9[r0.x + 0].w
    mov r17.yz, cb9[r0.x + 1].xxyx
    mul r13.yzw, r13.yyzw, r17.xxyz
    lt r6.w, l(0.000000), r7.w
    if_nz r6.w
      ubfe r6.w, l(3), l(27), cb9[r0.x + 1].w
      ine r6.w, r6.w, l(1)
      if_nz r6.w
        mad r6.w, |r4.w|, l(-0.200000), l(0.400000)
        mad r17.xyz, r12.xyzx, r6.wwww, r11.xyzx
        mov r18.xyz, cb9[r0.x + 6].yzwy
        mov r18.w, cb9[r0.x + 7].x
        mov r17.w, l(1.000000)
        dp4 r6.w, r18.xyzw, r17.xyzw
        dp4 r8.w, r16.xyzw, r17.xyzw
        ge r9.w, r8.w, r6.w
        if_nz r9.w
          mov r16.xyz, cb9[r0.x + 4].yzwy
          mov r16.w, cb9[r0.x + 5].x
          dp4 r16.x, r16.xyzw, r17.xyzw
          mov r18.xyz, cb9[r0.x + 5].yzwy
          mov r18.w, cb9[r0.x + 6].x
          dp4 r16.y, r18.xyzw, r17.xyzw
          div r16.xy, r16.xyxx, r8.wwww
          mad_sat r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
          mad r17.x, r16.x, cb9[r0.x + 8].y, cb9[r0.x + 8].z
          mad r17.y, r16.y, cb9[r0.x + 8].w, cb9[r0.x + 9].x
          div r6.w, r6.w, r8.w
          max r6.w, r6.w, l(0.00006104)
          and r8.w, l(0x0000ffff), cb9[r0.x + 1].w
          if_nz cb2[58].y
            mov r16.x, -r3.x
            utof r18.z, r8.w
            mov r16.y, r13.x
            mov r16.z, r3.x
            mov r9.w, l(0)
            mov r11.w, l(0)
            loop 
              ige r12.w, r11.w, l(8)
              breakc_nz r12.w
              dp2 r19.x, icb[r11.w + 0].yxyy, r16.xyxx
              dp2 r19.y, icb[r11.w + 0].yxyy, r16.yzyy
              mad r18.xy, r19.xyxx, cb9[r0.x + 3].yyyy, r17.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r18.xyzx, t9.xxxx, s13, r6.w
              mad r9.w, r12.w, l(0.125000), r9.w
              iadd r11.w, r11.w, l(1)
            endloop 
          else 
            utof r17.z, r8.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r17.xyzx, t9.xxxx, s13, r6.w
          endif 
          mul r6.w, r9.w, r9.w
          mul r6.w, r9.w, r6.w
        else 
          mov r6.w, l(1.000000)
        endif 
      else 
        mov r6.w, l(1.000000)
      endif 
      mul r6.w, r6.w, r7.w
      lt r7.w, l(0.000000), r6.w
      if_nz r7.w
        mul r7.w, r0.w, cb9[r0.x + 1].z
        mul r7.w, r5.z, r7.w
        ubfe r8.w, l(4), l(16), cb9[r0.x + 1].w
        ult r9.w, l(0), r8.w
        and r9.w, r10.x, r9.w
        if_nz r9.w
          iadd r8.w, r8.w, cb2[0].x
          imad r8.w, r8.w, l(15), l(-15)
          mad r9.w, |r4.w|, l(-0.200000), l(0.400000)
          mad r16.xyz, r12.xyzx, r9.wwww, r11.xyzx
          mov r17.xyz, cb9[r8.w + 6].yzwy
          mov r17.w, cb9[r8.w + 7].x
          mov r16.w, l(1.000000)
          dp4 r9.w, r17.xyzw, r16.xyzw
          mov r17.xyz, cb9[r8.w + 7].yzwy
          mov r17.w, cb9[r8.w + 8].x
          dp4 r11.w, r17.xyzw, r16.xyzw
          lt r12.w, r11.w, r9.w
          if_z r12.w
            mov r17.xyz, cb9[r8.w + 4].yzwy
            mov r17.w, cb9[r8.w + 5].x
            dp4 r17.x, r17.xyzw, r16.xyzw
            mov r18.xyz, cb9[r8.w + 5].yzwy
            mov r18.w, cb9[r8.w + 6].x
            dp4 r17.y, r18.xyzw, r16.xyzw
            div r16.xy, r17.xyxx, r11.wwww
            mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r17.x, r16.x, cb9[r8.w + 9].w
            add r17.y, r16.y, cb9[r8.w + 10].x
            mul r16.xy, r17.xyxx, cb9[r8.w + 9].yzyy
            div r16.zw, cb9[r8.w + 3].yyyy, cb9[r8.w + 8].yyyw
            add r17.xy, -r16.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r17.xy, r16.xyxx, r17.xyxx
            ge r16.zw, r16.zzzw, r16.xxxy
            or r16.zw, r16.zzzw, r17.xxxy
            or r14.w, r16.w, r16.z
            if_z r14.w
              mov_sat r16.xy, r16.xyxx
              mad r17.x, r16.x, cb9[r8.w + 8].y, cb9[r8.w + 8].z
              mad r17.y, r16.y, cb9[r8.w + 8].w, cb9[r8.w + 9].x
              mul r15.w, r11.w, cb9[r8.w + 10].z
              mad r9.w, cb9[r8.w + 10].y, r11.w, r9.w
              div r9.w, r9.w, r15.w
            endif 
          else 
            mov r14.w, l(-1)
          endif 
          or r11.w, r12.w, r14.w
          if_z r11.w
            max r9.w, r9.w, l(0.00006104)
            and r11.w, l(0x0000ffff), cb9[r8.w + 1].w
            if_nz cb2[58].y
              mov r16.x, -r3.x
              utof r18.z, r11.w
              mov r16.y, r13.x
              mov r16.z, r3.x
              mov r12.w, l(0)
              mov r14.w, l(0)
              loop 
                ige r15.w, r14.w, l(8)
                breakc_nz r15.w
                dp2 r19.x, icb[r14.w + 0].yxyy, r16.xyxx
                dp2 r19.y, icb[r14.w + 0].yxyy, r16.yzyy
                mad r18.xy, r19.xyxx, cb9[r8.w + 3].yyyy, r17.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r18.xyzx, t9.xxxx, s13, r9.w
                mad r12.w, r15.w, l(0.125000), r12.w
                iadd r14.w, r14.w, l(1)
              endloop 
            else 
              utof r17.z, r11.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r17.xyzx, t9.xxxx, s13, r9.w
            endif 
            mul r8.w, r12.w, r12.w
            mul r8.w, r12.w, r8.w
          else 
            mov r8.w, l(1.000000)
          endif 
          mul r6.w, r6.w, r8.w
        else 
          ubfe r0.x, l(4), l(20), cb9[r0.x + 1].w
          ult r8.w, l(0), r0.x
          not r9.w, r10.x
          and r8.w, r8.w, r9.w
          if_nz r8.w
            iadd r0.x, r0.x, cb2[0].x
            imad r0.x, r0.x, l(15), l(-15)
            mad r8.w, |r4.w|, l(-0.200000), l(0.400000)
            mad r16.xyz, r12.xyzx, r8.wwww, r11.xyzx
            mov r17.xyz, cb9[r0.x + 6].yzwy
            mov r17.w, cb9[r0.x + 7].x
            mov r16.w, l(1.000000)
            dp4 r8.w, r17.xyzw, r16.xyzw
            mov r17.xyz, cb9[r0.x + 7].yzwy
            mov r17.w, cb9[r0.x + 8].x
            dp4 r9.w, r17.xyzw, r16.xyzw
            lt r10.x, r9.w, r8.w
            if_z r10.x
              mov r17.xyz, cb9[r0.x + 4].yzwy
              mov r17.w, cb9[r0.x + 5].x
              dp4 r17.x, r17.xyzw, r16.xyzw
              mov r18.xyz, cb9[r0.x + 5].yzwy
              mov r18.w, cb9[r0.x + 6].x
              dp4 r17.y, r18.xyzw, r16.xyzw
              div r16.xy, r17.xyxx, r9.wwww
              mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r17.x, r16.x, cb9[r0.x + 9].w
              add r17.y, r16.y, cb9[r0.x + 10].x
              mul r16.xy, r17.xyxx, cb9[r0.x + 9].yzyy
              div r16.zw, cb9[r0.x + 3].yyyy, cb9[r0.x + 8].yyyw
              add r17.xy, -r16.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r17.xy, r16.xyxx, r17.xyxx
              ge r16.zw, r16.zzzw, r16.xxxy
              or r16.zw, r16.zzzw, r17.xxxy
              or r11.w, r16.w, r16.z
              if_z r11.w
                mov_sat r16.xy, r16.xyxx
                mad r17.x, r16.x, cb9[r0.x + 8].y, cb9[r0.x + 8].z
                mad r17.y, r16.y, cb9[r0.x + 8].w, cb9[r0.x + 9].x
                mul r12.w, r9.w, cb9[r0.x + 10].z
                mad r8.w, cb9[r0.x + 10].y, r9.w, r8.w
                div r8.w, r8.w, r12.w
              endif 
            else 
              mov r11.w, l(-1)
            endif 
            or r9.w, r10.x, r11.w
            if_z r9.w
              max r8.w, r8.w, l(0.00006104)
              and r9.w, l(0x0000ffff), cb9[r0.x + 1].w
              if_nz cb2[58].y
                mov r16.x, -r3.x
                utof r18.z, r9.w
                mov r16.y, r13.x
                mov r16.z, r3.x
                mov r3.x, l(0)
                mov r10.x, l(0)
                loop 
                  ige r11.w, r10.x, l(8)
                  breakc_nz r11.w
                  dp2 r19.x, icb[r10.x + 0].yxyy, r16.xyxx
                  dp2 r19.y, icb[r10.x + 0].yxyy, r16.yzyy
                  mad r18.xy, r19.xyxx, cb9[r0.x + 3].yyyy, r17.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.w, r18.xyzx, t9.xxxx, s13, r8.w
                  mad r3.x, r11.w, l(0.125000), r3.x
                  iadd r10.x, r10.x, l(1)
                endloop 
              else 
                utof r17.z, r9.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r3.x, r17.xyzx, t9.xxxx, s13, r8.w
              endif 
              mul r0.x, r3.x, r3.x
              mul r0.x, r3.x, r0.x
            else 
              mov r0.x, l(1.000000)
            endif 
            mul r6.w, r0.x, r6.w
          endif 
        endif 
        mad r0.x, -r2.x, l(0.500000), l(1.000000)
        mad r0.x, -r5.z, r0.x, l(1.000000)
        mul r0.x, r0.x, r0.x
        mad r0.x, -r0.x, l(0.620000), l(0.620000)
        add r0.x, -r5.z, r0.x
        mad r0.x, r1.z, r0.x, r5.z
        mul r0.x, r6.w, r0.x
        lt r1.z, l(0.000000), r4.w
        mad r16.xyz, r0.xxxx, r13.yzwy, r3.yzwy
        mad r14.xyz, r14.xyzx, r1.wwww, r10.yzwy
        dp3 r0.x, r14.xyzx, r14.xyzx
        rsq r0.x, r0.x
        mul r14.xyz, r0.xxxx, r14.xyzx
        dp3 r0.x, r14.xyzx, r10.yzwy
        dp3 r1.w, r12.xyzx, r14.xyzx
        mad r0.w, |r1.w|, r0.w, -|r1.w|
        mad r0.w, |r1.w|, r0.w, l(1.000000)
        mad r0.y, r5.z, r0.y, r0.z
        mul r0.z, r0.w, r0.w
        mul r0.y, r0.y, r0.z
        rcp r0.y, r0.y
        mul r0.y, r7.w, r0.y
        mul r0.y, r0.y, r6.w
        mul r0.y, r0.y, l(0.250000)
        mad r10.xyz, r0.yyyy, r13.yzwy, r2.yzwy
        add_sat r0.x, -r0.x, l(1.000000)
        mul r0.z, r0.x, r0.x
        mul r0.z, r0.z, r0.z
        mul r0.x, r0.z, r0.x
        mul r0.x, r0.x, r0.y
        mad r0.xyz, r0.xxxx, r13.yzwy, r15.xyzx
        movc r3.yzw, r1.zzzz, r16.xxyz, r3.yyzw
        movc r15.xyz, r1.zzzz, r0.xyzx, r15.xyzx
        movc r2.yzw, r1.zzzz, r10.xxyz, r2.yyzw
      endif 
    endif 
  endif 
  break 
  default 
  break 
endswitch 
mad r0.xyz, r5.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r1.z, r0.y
mad r5.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r1.w, r1.z, r1.w
movc r5.xy, r1.wwww, r5.yzyy, l(-1.000000,0,0,0)
mad r6.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r6.x
ieq r1.w, r1.z, r1.w
movc r5.zw, r1.wwww, r6.yyyz, l(0,0,-1.000000,0)
mad r6.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r6.x
ieq r1.w, r1.z, r1.w
movc r6.xy, r1.wwww, r6.yzyy, l(-1.000000,0,0,0)
mad r7.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r7.x
ieq r1.z, r1.z, r1.w
movc r1.zw, r1.zzzz, r7.yyyz, l(0,0,-1.000000,0)
mov r7.xy, r5.xzxx
mov r7.z, r6.x
mov r7.w, r1.z
add r7.xyzw, -r0.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r1.z, r7.y, r7.x
add r1.z, r7.z, r1.z
add r1.z, r7.w, r1.z
mul r2.x, r5.w, r7.y
mad r2.x, r7.x, r5.y, r2.x
mad r2.x, r7.z, r6.y, r2.x
mad r1.w, r7.w, r1.w, r2.x
div r0.w, r1.w, r1.z
ge r1.z, l(0.000000), r1.z
movc r0.yz, r1.zzzz, l(0,0,0,0), r0.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.w, r1.w, r1.z
movc r0.xyz, r0.wwww, r0.xyzx, r0.xzyx
mad r0.x, -r0.z, l(0.500000), r0.x
add r5.y, r0.x, r0.z
mad r5.z, -r0.y, l(0.500000), r0.x
add r5.x, r0.y, r5.z
add r0.xyz, -r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r15.xyzx
mad r0.xyz, r2.yzwy, r5.xyzx, r0.xyzx
mad r0.xyz, r3.yzwy, r4.xyzx, r0.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r11.xyzx, r11.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r11.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r11.z|
    mul r3.xy, r11.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r11.z|
    mul r2.w, r11.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r11.z, cb2[6].x
  mad r1.z, cb2[6].x, r11.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r11.xyzx, r11.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r11.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 1410 instruction slots used
