//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:43:14 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16 [unused]
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16 [unused]
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16 [unused]
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// Resource bind info for gArtefactsStatic
// {
//
//   struct CoreLensFlareStaticPart
//   {
//       
//       float2 normalizedPos;          // Offset:    0
//       float4 normalizedOffset;       // Offset:    8
//       float4 modeRotation;           // Offset:   24
//       uint elemIdx;                  // Offset:   40
//       float2 scale;                  // Offset:   44
//       float3 tint;                   // Offset:   52
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
// Resource bind info for gArtefactsDynamic
// {
//
//   struct CoreLensFlareDynamicPart
//   {
//       
//       float2 xAxis;                  // Offset:    0
//       float2 yAxis;                  // Offset:    8
//       float sourceVisibility;        // Offset:   16
//       float2 clpPosOffset;           // Offset:   20
//       float2 clpFacingCtr;           // Offset:   28
//       float2 sourceClpPos;           // Offset:   36
//       float worldScale;              // Offset:   44
//       uint sourceIndex;              // Offset:   48
//       uint offscreenPixels;          // Offset:   52
//       uint totalPixels;              // Offset:   56
//       uint flags;                    // Offset:   60
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
// Resource bind info for gEmitterStatic
// {
//
//   struct CoreLensFlarePerElemStaticPart
//   {
//       
//       uint flags;                    // Offset:    0
//       float grimeIntensity;          // Offset:    4
//       float colorIntensity;          // Offset:    8
//       float maxTaperAngle;           // Offset:   12
//       float4 constrainedSelector;    // Offset:   16
//       
//       struct CoreLensFlareGradient
//       {
//           
//           uint modes;                // Offset:   32
//           float2 radialPosBegin;     // Offset:   36
//           float2 radialPosEnd;       // Offset:   44
//           float2 innerValue;         // Offset:   52
//           float2 outerValue;         // Offset:   60
//           float2 power;              // Offset:   68
//
//       } offsetGradient;              // Offset:   32
//       
//       struct CoreLensFlareGradient
//       {
//           
//           uint modes;                // Offset:   76
//           float2 radialPosBegin;     // Offset:   80
//           float2 radialPosEnd;       // Offset:   88
//           float2 innerValue;         // Offset:   96
//           float2 outerValue;         // Offset:  104
//           float2 power;              // Offset:  112
//
//       } scaleGradient;               // Offset:   76
//       
//       struct CoreLensFlareGradient
//       {
//           
//           uint modes;                // Offset:  120
//           float2 radialPosBegin;     // Offset:  124
//           float2 radialPosEnd;       // Offset:  132
//           float2 innerValue;         // Offset:  140
//           float2 outerValue;         // Offset:  148
//           float2 power;              // Offset:  156
//
//       } colorGradient;               // Offset:  120
//       
//       struct CoreLensFlareGradient
//       {
//           
//           uint modes;                // Offset:  164
//           float2 radialPosBegin;     // Offset:  168
//           float2 radialPosEnd;       // Offset:  176
//           float2 innerValue;         // Offset:  184
//           float2 outerValue;         // Offset:  192
//           float2 power;              // Offset:  200
//
//       } taperGradient;               // Offset:  164
//
//   } $Element;                        // Offset:    0 Size:   208
//
// }
//
// Resource bind info for lensFlareTotalAlpha
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lensFlarePixelCount
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gArtefactsStatic                  texture  struct         r/o             t6      1 
// gArtefactsDynamic                 texture  struct         r/o             t7      1 
// gEmitterStatic                    texture  struct         r/o             t9      1 
// lensFlareTotalAlpha               texture  struct         r/o            t10      1 
// lensFlarePixelCount               texture  struct         r/o            t11      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy  
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// SV_VertexID              0   x           3   VERTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 2     z         1     NONE   float     z 
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xy          3     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[46], immediateIndexed
dcl_resource_structured t6, 64
dcl_resource_structured t7, 64
dcl_resource_structured t9, 208
dcl_resource_structured t10, 4
dcl_resource_structured t11, 4
dcl_input v0.xy
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input_sgv v3.x, vertex_id
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.z
dcl_output o2.xyzw
dcl_output o3.xy
dcl_temps 25
ushr r0.x, v3.x, l(2)
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r1.xyzw, r0.x, l(32), t6.xyzw
utof r0.y, r1.z
mad r0.y, v1.w, l(255.000000), r0.y
ftou r0.y, r0.y
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(48), t7.xyzw
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.z, r2.x, l(0), t11.xxxx
utof r0.z, r0.z
and r0.w, r2.w, l(4)
utof r2.yz, r2.zzyz
add r2.z, r0.z, r2.z
movc r0.w, r0.w, r2.y, r2.z
ge r2.z, l(0.000000), r0.w
ge r3.x, l(0.000000), r2.y
or r2.z, r2.z, r3.x
if_nz r2.z
  mov o0.xyzw, l(0,0,0,0)
  mov o2.xyzw, l(0,0,0,0)
  mov o1.xyz, l(0,0,0,0)
  mov o3.xy, l(0,0,0,0)
  ret 
endif 
and r2.z, r2.w, l(8)
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r2.x, r2.x, l(0), t10.xxxx
utof r2.x, r2.x
mul r2.x, r2.x, l(0.00206186)
movc r2.x, r2.z, r0.z, r2.x
div r2.x, r2.x, r0.z
ge r0.z, l(0.000000), r0.z
movc r3.w, r0.z, l(1.000000), r2.x
ge r0.z, l(0.000000), r3.w
if_nz r0.z
  mov o0.xyzw, l(0,0,0,0)
  mov o2.xyzw, l(0,0,0,0)
  mov o1.xyz, l(0,0,0,0)
  mov o3.xy, l(0,0,0,0)
  ret 
endif 
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r4.xyzw, r0.x, l(0), t6.zwxy
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r5.xyzw, r0.x, l(16), t6.zwxy
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r6.y, r0.x, l(48), t6.xxxx
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r7.xyzw, r0.y, l(0), t7.xyzw
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r8.xyzw, r0.y, l(16), t7.wxyz
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r9.xyzw, r0.y, l(32), t7.yzxw
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r10.xyzw, r1.z, l(0), t9.xyzw
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r11.xyzw, r1.z, l(16), t9.xyzw
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r12.xyzw, r1.z, l(32), t9.xyzw
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r13.xyzw, r1.z, l(48), t9.xyzw
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r14.xyzw, r1.z, l(64), t9.xyzw
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r15.xyzw, r1.z, l(80), t9.xyzw
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r16.xyzw, r1.z, l(96), t9.xyzw
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r0.xy, r1.z, l(112), t9.xyxx
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r17.xyzw, r1.z, l(164), t9.xyzw
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r18.xyzw, r1.z, l(180), t9.xyzw
ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r2.xzw, r1.z, l(196), t9.xxyz
div r0.z, r0.w, r2.y
mul r0.z, r0.z, r8.y
mul r19.xyzw, r4.zzww, r7.xyzw
add r4.zw, r19.zzzw, r19.xxxy
add r19.xy, r8.zwzz, r4.zwzz
and r0.w, r12.x, l(7)
if_nz r0.w
  ieq r20.xyzw, r0.wwww, l(1, 2, 3, 4)
  add r21.xy, -r9.xyxx, r19.xyxx
  ieq r22.xyz, r0.wwww, l(5, 6, 7, 0)
  mov r23.xy, r9.xyxx
  mov r23.zw, l(0,0,1.000000,0)
  and r24.xyzw, r22.zzzz, r23.xywz
  movc r24.xyzw, r22.yyyy, r23.xyzw, r24.xyzw
  movc r22.xyzw, r22.xxxx, r23.xyzz, r24.xyzw
  mov r21.zw, l(0,0,1.000000,1.000000)
  movc r21.xyzw, r20.wwww, r21.xyzw, r22.xyzw
  mov r19.zw, l(0,0,1.000000,0)
  movc r21.xyzw, r20.zzzz, r19.xywz, r21.xyzw
  movc r21.xyzw, r20.yyyy, r19.xyzw, r21.xyzw
  movc r20.xyzw, r20.xxxx, r19.xyzz, r21.xyzw
  movc r20.xyzw, r0.wwww, r20.xyzw, l(0,0,0,0)
  mul r4.zw, r20.zzzw, r20.xxxy
  dp2 r1.z, r4.zwzz, r4.zwzz
  sqrt r1.z, r1.z
  add r1.z, -r12.y, r1.z
  add r2.y, -r12.y, r12.w
  div_sat r1.z, r1.z, r2.y
  add r2.y, -r13.y, r13.w
  mad r1.z, r1.z, r2.y, r13.y
  lt r2.y, l(0.000000), r1.z
  lt r4.z, r1.z, l(0.000000)
  iadd r2.y, -r2.y, r4.z
  itof r2.y, r2.y
  log r1.z, |r1.z|
  mul r1.z, r1.z, r14.y
  exp r1.z, r1.z
  mul r1.z, r1.z, r2.y
else 
  mov r1.z, l(1.000000)
endif 
movc r0.w, r0.w, r1.z, l(1.000000)
ubfe r4.zw, l(0, 0, 3, 2), l(0, 0, 3, 6), r12.xxxx
if_nz r4.z
  ieq r20.xyzw, r4.zzzz, l(1, 2, 3, 4)
  add r21.xy, -r9.xyxx, r19.xyxx
  ieq r12.xyw, r4.zzzz, l(5, 6, 0, 7)
  mov r22.xy, r9.xyxx
  mov r22.zw, l(0,0,1.000000,0)
  and r23.xyzw, r12.wwww, r22.xywz
  movc r23.xyzw, r12.yyyy, r22.xyzw, r23.xyzw
  movc r22.xyzw, r12.xxxx, r22.xyzz, r23.xyzw
  mov r21.zw, l(0,0,1.000000,1.000000)
  movc r21.xyzw, r20.wwww, r21.xyzw, r22.xyzw
  mov r19.zw, l(0,0,1.000000,0)
  movc r21.xyzw, r20.zzzz, r19.xywz, r21.xyzw
  movc r21.xyzw, r20.yyyy, r19.xyzw, r21.xyzw
  movc r20.xyzw, r20.xxxx, r19.xyzz, r21.xyzw
  movc r20.xyzw, r4.zzzz, r20.xyzw, l(0,0,0,0)
  mul r6.zw, r20.zzzw, r20.xxxy
  dp2 r1.z, r6.zwzz, r6.zwzz
  sqrt r1.z, r1.z
  add r1.z, -r12.z, r1.z
  add r2.y, -r12.z, r13.x
  div_sat r1.z, r1.z, r2.y
  add r2.y, -r13.z, r14.x
  mad r1.z, r1.z, r2.y, r13.z
  lt r2.y, l(0.000000), r1.z
  lt r6.z, r1.z, l(0.000000)
  iadd r2.y, -r2.y, r6.z
  itof r2.y, r2.y
  log r1.z, |r1.z|
  mul r1.z, r1.z, r14.z
  exp r1.z, r1.z
  mul r1.z, r1.z, r2.y
else 
  mov r1.z, l(1.000000)
endif 
movc r1.z, r4.z, r1.z, l(0)
add r2.y, r0.w, r1.z
mul r4.z, r0.w, r1.z
min r6.z, r0.w, r1.z
ieq r12.xyz, r4.wwww, l(1, 2, 3, 0)
max r1.z, r0.w, r1.z
movc r0.w, r12.z, r1.z, r0.w
movc r0.w, r12.y, r6.z, r0.w
movc r0.w, r4.w, r0.w, r4.z
movc r0.w, r12.x, r2.y, r0.w
mad r4.xy, r4.xyxx, r0.wwww, r19.xyxx
mad r12.xy, r5.zwzz, r0.wwww, r4.xyxx
and r0.w, r10.x, l(2)
mov r8.y, r9.z
add r4.xy, -r4.xyxx, r8.xyxx
mad r4.xy, r4.xyxx, r11.xyxx, r11.zwzz
dp2 r1.z, r4.xyxx, r4.xyxx
ne r1.z, r1.z, l(0.000000)
movc r4.xy, r1.zzzz, r4.xyxx, -r7.xwxx
div r4.z, r4.y, cb1[45].z
dp2 r1.z, r4.xzxx, r4.xzxx
rsq r1.z, r1.z
mul r4.xy, r1.zzzz, r4.xzxx
mov r5.zw, r1.xxxy
dp2 r7.x, r4.xyxx, r5.xzxx
dp2 r7.y, r4.xyxx, r5.ywyy
mov r4.zw, -r4.yyyy
dp2 r7.z, r4.zxzz, r5.xzxx
dp2 r7.w, r4.wxww, r5.ywyy
movc r4.xyzw, r0.wwww, r7.xyzw, r5.xyzw
mul r1.xyz, r0.zzzz, v1.xyzx
mul r3.xyz, r3.wwww, r1.xyzx
mov r6.x, r1.w
mul r0.zw, r6.xxxy, r9.wwww
and r1.x, r14.w, l(7)
if_nz r1.x
  ieq r5.xyzw, r1.xxxx, l(1, 2, 3, 4)
  add r6.xy, -r9.xyxx, r12.xyxx
  ieq r1.yzw, r1.xxxx, l(0, 5, 6, 7)
  mov r9.zw, l(0,0,1.000000,0)
  and r7.xyzw, r1.wwww, r9.xywz
  movc r7.xyzw, r1.zzzz, r9.xyzw, r7.xyzw
  movc r7.xyzw, r1.yyyy, r9.xyzz, r7.xyzw
  mov r6.zw, l(0,0,1.000000,1.000000)
  movc r6.xyzw, r5.wwww, r6.xyzw, r7.xyzw
  mov r12.zw, l(0,0,1.000000,0)
  movc r6.xyzw, r5.zzzz, r12.xywz, r6.xyzw
  movc r6.xyzw, r5.yyyy, r12.xyzw, r6.xyzw
  movc r5.xyzw, r5.xxxx, r12.xyzz, r6.xyzw
  movc r5.xyzw, r1.xxxx, r5.xyzw, l(0,0,0,0)
  mul r1.yz, r5.zzwz, r5.xxyx
  dp2 r1.y, r1.yzyy, r1.yzyy
  sqrt r1.y, r1.y
  add r1.y, -r15.x, r1.y
  add r1.z, -r15.x, r15.z
  div_sat r1.y, r1.y, r1.z
  add r1.z, -r16.x, r16.z
  mad r1.y, r1.y, r1.z, r16.x
  lt r1.z, l(0.000000), r1.y
  lt r1.w, r1.y, l(0.000000)
  iadd r1.z, -r1.z, r1.w
  itof r1.z, r1.z
  log r1.y, |r1.y|
  mul r0.x, r0.x, r1.y
  exp r0.x, r0.x
  mul r0.x, r0.x, r1.z
else 
  mov r0.x, l(1.000000)
endif 
movc r0.x, r1.x, r0.x, l(1.000000)
ubfe r1.xy, l(3, 2, 0, 0), l(3, 6, 0, 0), r14.wwww
if_nz r1.x
  ieq r5.xyzw, r1.xxxx, l(1, 2, 3, 4)
  add r6.xy, -r9.xyxx, r12.xyxx
  ieq r7.xyz, r1.xxxx, l(5, 6, 7, 0)
  mov r9.zw, l(0,0,1.000000,0)
  and r8.xyzw, r7.zzzz, r9.xywz
  movc r8.xyzw, r7.yyyy, r9.xyzw, r8.xyzw
  movc r7.xyzw, r7.xxxx, r9.xyzz, r8.xyzw
  mov r6.zw, l(0,0,1.000000,1.000000)
  movc r6.xyzw, r5.wwww, r6.xyzw, r7.xyzw
  mov r12.zw, l(0,0,1.000000,0)
  movc r6.xyzw, r5.zzzz, r12.xywz, r6.xyzw
  movc r6.xyzw, r5.yyyy, r12.xyzw, r6.xyzw
  movc r5.xyzw, r5.xxxx, r12.xyzz, r6.xyzw
  movc r5.xyzw, r1.xxxx, r5.xyzw, l(0,0,0,0)
  mul r1.zw, r5.zzzw, r5.xxxy
  dp2 r1.z, r1.zwzz, r1.zwzz
  sqrt r1.z, r1.z
  add r1.z, -r15.y, r1.z
  add r1.w, -r15.y, r15.w
  div_sat r1.z, r1.z, r1.w
  add r1.w, -r16.y, r16.w
  mad r1.z, r1.z, r1.w, r16.y
  lt r1.w, l(0.000000), r1.z
  lt r2.y, r1.z, l(0.000000)
  iadd r1.w, -r1.w, r2.y
  itof r1.w, r1.w
  log r1.z, |r1.z|
  mul r0.y, r0.y, r1.z
  exp r0.y, r0.y
  mul r0.y, r0.y, r1.w
else 
  mov r0.y, l(1.000000)
endif 
movc r0.y, r1.x, r0.y, l(0)
add r1.x, r0.y, r0.x
mul r1.z, r0.y, r0.x
min r1.w, r0.y, r0.x
ieq r5.xyz, r1.yyyy, l(1, 2, 3, 0)
max r0.y, r0.y, r0.x
movc r0.x, r5.z, r0.y, r0.x
movc r0.x, r5.y, r1.w, r0.x
movc r0.x, r1.y, r0.x, r1.z
movc r0.x, r5.x, r1.x, r0.x
mul r0.xy, r0.xxxx, r0.zwzz
mul r0.xy, r0.xyxx, v0.xyxx
dp2 r1.x, r0.xyxx, r4.xzxx
dp2 r0.x, r0.xyxx, r4.ywyy
mul r1.y, r0.x, cb1[45].z
and r0.x, r17.x, l(7)
if_nz r0.x
  ieq r4.xyzw, r0.xxxx, l(1, 2, 3, 4)
  add r5.xy, -r9.xyxx, r12.xyxx
  ieq r0.yzw, r0.xxxx, l(0, 5, 6, 7)
  mov r9.zw, l(0,0,1.000000,0)
  and r6.xyzw, r0.wwww, r9.xywz
  movc r6.xyzw, r0.zzzz, r9.xyzw, r6.xyzw
  movc r6.xyzw, r0.yyyy, r9.xyzz, r6.xyzw
  mov r5.zw, l(0,0,1.000000,1.000000)
  movc r5.xyzw, r4.wwww, r5.xyzw, r6.xyzw
  mov r12.zw, l(0,0,1.000000,0)
  movc r5.xyzw, r4.zzzz, r12.xywz, r5.xyzw
  movc r5.xyzw, r4.yyyy, r12.xyzw, r5.xyzw
  movc r4.xyzw, r4.xxxx, r12.xyzz, r5.xyzw
  movc r4.xyzw, r0.xxxx, r4.xyzw, l(0,0,0,0)
  mul r0.yz, r4.zzwz, r4.xxyx
  dp2 r0.y, r0.yzyy, r0.yzyy
  sqrt r0.y, r0.y
  add r0.y, -r17.y, r0.y
  add r0.z, -r17.y, r17.w
  div_sat r0.y, r0.y, r0.z
  add r0.z, -r18.y, r18.w
  mad r0.y, r0.y, r0.z, r18.y
  lt r0.z, l(0.000000), r0.y
  lt r0.w, r0.y, l(0.000000)
  iadd r0.z, -r0.z, r0.w
  itof r0.z, r0.z
  log r0.y, |r0.y|
  mul r0.y, r0.y, r2.z
  exp r0.y, r0.y
  mul r0.y, r0.y, r0.z
else 
  mov r0.y, l(0)
endif 
movc r0.x, r0.x, r0.y, l(0)
ubfe r0.yz, l(0, 3, 2, 0), l(0, 3, 6, 0), r17.xxxx
if_nz r0.y
  ieq r4.xyzw, r0.yyyy, l(1, 2, 3, 4)
  add r5.xy, -r9.xyxx, r12.xyxx
  ieq r6.xyz, r0.yyyy, l(5, 6, 7, 0)
  mov r9.zw, l(0,0,1.000000,0)
  and r7.xyzw, r6.zzzz, r9.xywz
  movc r7.xyzw, r6.yyyy, r9.xyzw, r7.xyzw
  movc r6.xyzw, r6.xxxx, r9.xyzz, r7.xyzw
  mov r5.zw, l(0,0,1.000000,1.000000)
  movc r5.xyzw, r4.wwww, r5.xyzw, r6.xyzw
  mov r12.zw, l(0,0,1.000000,0)
  movc r5.xyzw, r4.zzzz, r12.xywz, r5.xyzw
  movc r5.xyzw, r4.yyyy, r12.xyzw, r5.xyzw
  movc r4.xyzw, r4.xxxx, r12.xyzz, r5.xyzw
  movc r4.xyzw, r0.yyyy, r4.xyzw, l(0,0,0,0)
  mul r1.zw, r4.zzzw, r4.xxxy
  dp2 r0.w, r1.zwzz, r1.zwzz
  sqrt r0.w, r0.w
  add r0.w, -r17.z, r0.w
  add r1.z, -r17.z, r18.x
  div_sat r0.w, r0.w, r1.z
  add r1.z, -r18.z, r2.x
  mad r0.w, r0.w, r1.z, r18.z
  lt r1.z, l(0.000000), r0.w
  lt r1.w, r0.w, l(0.000000)
  iadd r1.z, -r1.z, r1.w
  itof r1.z, r1.z
  log r0.w, |r0.w|
  mul r0.w, r0.w, r2.w
  exp r0.w, r0.w
  mul r0.w, r0.w, r1.z
else 
  mov r0.w, l(0)
endif 
movc r0.y, r0.y, r0.w, l(0)
add r0.w, r0.y, r0.x
mul r1.z, r0.y, r0.x
min r1.w, r0.y, r0.x
ieq r2.xyz, r0.zzzz, l(1, 2, 3, 0)
max r0.y, r0.y, r0.x
movc r0.x, r2.z, r0.y, r0.x
movc r0.x, r2.y, r1.w, r0.x
movc r0.x, r0.z, r0.x, r1.z
movc r0.x, r2.x, r0.w, r0.x
mul r0.y, r10.w, -r12.y
mul r0.y, r0.x, r0.y
mul r0.z, r10.w, r12.x
mul r0.x, r0.x, r0.z
sincos r2.x, r4.x, r0.y
sincos r0.x, r5.x, r0.x
mul r5.y, r0.x, r2.x
mul r0.y, -r2.x, r5.x
dp2 r2.x, r1.xyxx, r5.xyxx
mul r2.y, r1.y, r4.x
dp2 r0.x, r1.xyxx, r0.xyxx
mov r0.y, l(1.000000)
dp2 r0.x, r0.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
div r0.yz, r2.xxyx, r0.xxxx
add o0.xy, r12.xyxx, r0.yzyy
div o1.xy, v2.xyxx, r0.xxxx
div o1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul o2.xyzw, r3.xyzw, l(32768.000000, 32768.000000, 32768.000000, 1.000000)
mov o0.zw, l(0,0,0,1.000000)
mov o3.xy, r10.zyzz
ret 
// Approximately 355 instruction slots used
