//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:24:10 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 37
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(55), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.yz, r0.xxyx, l(0, 4095, 4095, 0)
imad r1.xy, r0.yzyy, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.yz, r1.xxyx
add r5.xy, r3.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r6.x, r3.x, l(0.984375)
mul r3.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r6.x, r3.x, r3.w
max r3.x, r3.x, l(0.00000001)
rcp r6.y, r3.x
and r3.xw, r0.wwww, r6.xxxy
mul r5.zw, r5.xxxy, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r7.xyzw, r5.zwzz, t28.xyzw, s4.x
mul r5.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r5.zw, r5.zzzw
add r8.xy, -r5.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r9.y, r8.x, r8.y
mul r9.xz, r5.zzwz, r8.xxyx
mul r9.w, r5.w, r5.z
dp4 r0.w, r6.xyzw, r9.xyzw
add r7.xyzw, -r3.wwww, r7.xyzw
min r5.z, |r7.w|, |r7.z|
min r5.z, r5.z, |r7.y|
min r5.z, r5.z, |r7.x|
max r5.w, |r7.w|, |r7.z|
max r5.w, r5.w, |r7.y|
max r5.w, r5.w, |r7.x|
eq r7.xyz, r5.zzzz, |r7.yzwy|
movc r5.z, r7.x, r6.y, r6.x
movc r5.z, r7.y, r6.z, r5.z
movc r5.z, r7.z, r6.w, r5.z
mul r6.x, r3.w, l(0.010000)
lt r5.w, r6.x, r5.w
movc r0.w, r5.w, r5.z, r0.w
mul r0.w, r0.w, r4.z
if_nz cb2[55].x
  mul r4.z, r0.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r4.zzzz
  ret 
else 
  movc r4.z, cb2[54].w, r0.w, l(1.000000)
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
add r1.zw, r5.xxxy, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r5.x, r1.z, cb1[12].x
mul r5.y, r1.w, cb1[13].y
mov r5.z, l(1.000000)
mul r5.xyz, r3.wwww, r5.xyzx
mul r11.xyz, r5.yyyy, cb1[17].xyzx
mad r5.xyw, r5.xxxx, cb1[16].xyxz, r11.xyxz
mad r5.xyz, r5.zzzz, cb1[18].xyzx, r5.xywx
mad r1.z, r2.w, l(3.000000), l(0.500000)
ftou r1.z, r1.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r11.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r11.z
mul r11.xy, r1.wwww, r2.xyxx
and r12.xyzw, r1.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.z, r12.w, r12.z
movc r12.z, r1.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.w, r0.w, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r5.xyzx, -r5.xyzx
rsq r0.w, r0.w
mul r12.xyz, r0.wwww, -r5.xyzx
dp2 r0.w, r3.yzyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r0.w
utof r1.zw, r1.yyyx
dp2 r0.w, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r15.x, r16.x, r0.w
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r0.w, -r12.xyzx, r11.xyzx
add r0.w, r0.w, r0.w
mad r17.xyz, r11.xyzx, -r0.wwww, -r12.xyzx
mul r0.w, r2.y, l(17.000000)
exp r0.w, r0.w
add r0.w, r0.w, l(2.000000)
div r0.w, l(2.000000), r0.w
sqrt r1.z, r0.w
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r2.zw, r2.zzzw
ieq r2.zw, r1.xxxy, r2.zzzw
and r1.w, r2.w, r2.z
add r2.z, -r2.y, l(1.000000)
mul r2.z, r2.z, l(5.000000)
add r3.yzw, r5.xxyz, -cb2[35].xxyz
mul r18.x, r3.y, cb2[35].w
mul r18.yz, r3.zzwz, cb2[36].xxyx
add_sat r3.yzw, r18.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
mul r18.xy, r3.yzyy, cb2[36].zwzz
mul r18.z, r3.w, cb2[37].x
add r3.yzw, r18.xxyz, cb2[37].yyzw
lt r15.yzw, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xxyz
movc r18.xyz, r15.yzwy, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
mov r18.w, l(0)
add r15.yzw, r3.yyzw, r18.wwwx
sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t17.wxyz, s4, l(0.000000)
mul r16.yzw, r11.xxyz, r11.xxyz
mul r16.yzw, r16.yyzw, cb2[19].xxxx
add r19.xyz, r3.yzwy, r18.wwyw
sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t18.xyzw, s4, l(0.000000)
mul r19.xyz, r16.zzzz, r19.xyzx
mad r15.yzw, r15.yyzw, r16.yyyy, r19.xxyz
add r3.yzw, r3.yyzw, r18.wwwz
sample_l_indexable(texture3d)(float,float,float,float) r3.yzw, r3.yzwy, t19.wxyz, s4, l(0.000000)
mad r3.yzw, r3.yyzw, r16.wwww, r15.yyzw
mov r11.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r11.xyzw, t8.wxyz, s2, l(6.000000)
mul r3.yzw, r3.yyzw, r15.yyzw
dp3 r2.w, r3.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
mov r17.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r17.xyzw, t8.wxyz, s2, r2.z
add r2.z, -r2.w, cb2[19].x
mad r2.z, r2.y, r2.z, r2.w
mul r15.yzw, r2.zzzz, r15.yyzw
add r2.z, r4.z, r2.x
log r2.z, |r2.z|
mul r2.z, r1.z, r2.z
exp r2.z, r2.z
add r2.z, r4.z, r2.z
add_sat r2.z, r2.z, l(-1.000000)
mul r3.yzw, r4.zzzz, r3.yyzw
mad r2.yw, r2.xxxy, l(0.000000, 0.984375, 0.000000, 0.984375), l(0.000000, 0.00781250, 0.000000, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r2.yw, r2.ywyy, t5.zxwy, s2, l(0.000000)
mul r15.yzw, r2.zzzz, r15.yyzw
mul r16.yzw, r2.yyyy, r15.yyzw
mul r2.yzw, r2.wwww, r15.yyzw
sqrt r4.z, r1.z
mad r4.z, r4.z, l(0.500000), l(0.500000)
mul r4.z, r4.z, r4.z
mul r6.w, r4.z, l(0.500000)
mad r4.z, -r4.z, l(0.500000), l(1.000000)
mad r7.w, r2.x, r4.z, r6.w
mul r4.z, r4.z, r7.w
mul r6.w, r6.w, r7.w
ushr r7.w, r0.x, l(24)
ubfe r0.x, l(10), l(12), r0.x
mov r18.x, -r13.x
not r8.w, r3.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r19.x, l(2)
mov r20.x, l(2)
mov r5.w, l(1.000000)
mov r21.w, l(1.000000)
mov r18.z, r13.x
mov r22.w, l(1.000000)
mov r23.z, l(1.000000)
mov r24.w, l(1.000000)
mov r18.yw, r14.xxxx
mov r13.y, r18.w
mov r25.w, l(1.000000)
mov r14.y, r18.x
mov r14.z, r13.x
mov r26.w, l(1.000000)
mov r27.x, r14.x
mov r27.y, r18.x
mov r27.z, r13.x
mov r28.x, r14.x
mov r28.y, r18.x
mov r28.z, r13.x
mov r29.x, r14.x
mov r29.y, r18.x
mov r29.z, r13.x
mov r15.yzw, r3.yyzw
mov r30.xyz, r16.yzwy
mov r31.xyz, r2.yzwy
mov r9.w, l(0)
mov r10.w, l(0)
loop 
  ieq r11.w, r10.w, l(2)
  breakc_nz r11.w
  movc r11.w, r10.w, r0.x, r7.w
  imul null, r11.w, r11.w, l(15)
  ubfe r12.w, l(3), l(24), cb9[r11.w + 1].w
  switch r12.w
    case l(4)
    if_nz r1.w
      and r12.w, r9.w, l(3)
      imad r12.w, r12.w, l(24), l(112)
      add r19.yzw, cb1[24].xxyz, cb9[r11.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r12.w, r19.xyzw
    endif 
    iadd r12.w, r9.w, l(1)
    lt r13.z, l(0.000000), cb9[r11.w + 6].y
    mov r32.xy, cb9[r11.w + 5].zwzz
    mov r32.z, cb9[r11.w + 6].x
    mad r19.yzw, -r32.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r11.w + 0].xxyz
    add r33.xyz, -r5.xyzx, r19.yzwy
    dp3 r13.w, r32.xyzx, r33.xyzx
    div_sat r14.w, -r13.w, cb9[r11.w + 6].y
    mad r34.xyz, r14.wwww, r32.xyzx, r19.yzwy
    movc r34.xyz, r13.zzzz, r34.xyzx, cb9[r11.w + 0].xyzx
    add r34.xyz, -r5.xyzx, r34.xyzx
    dp3 r17.w, r34.xyzx, r34.xyzx
    rsq r23.w, r17.w
    mul r34.xyz, r23.wwww, r34.xyzx
    dp3 r23.w, r11.xyzx, r34.xyzx
    mov_sat r27.w, r23.w
    lt r28.w, l(0.000000), r27.w
    if_nz r28.w
      sqrt r28.w, r17.w
      mul r29.w, cb9[r11.w + 3].x, cb9[r11.w + 3].x
      div r17.w, r29.w, r17.w
      min r17.w, r17.w, l(1.000000)
      mad_sat r34.xy, r28.wwww, cb9[r11.w + 2].xzxx, cb9[r11.w + 2].ywyy
      mul r34.zw, r34.xxxy, r34.xxxy
      mad r34.xy, r34.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r34.xy, r34.xyxx, r34.zwzz
      mul r17.w, r17.w, r34.x
      mul r17.w, r34.y, r17.w
      lt r28.w, l(0.000000), r17.w
      if_nz r28.w
        ubfe r28.w, l(3), l(27), cb9[r11.w + 1].w
        and r29.w, r12.w, l(7)
        iadd r30.w, r29.w, l(-1)
        ult r30.w, r30.w, l(32)
        and r30.w, r1.w, r30.w
        if_nz r30.w
          imad r34.xy, r29.wwww, l(24, 24, 0, 0), l(88, 104, 0, 0)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r29.w, cb2[52].x, r34.x, u2.xxxx
          or r29.w, r29.w, l(4)
          store_structured u2.x, cb2[52].x, r34.x, r29.w
          store_structured u2.x, cb2[52].x, r34.y, r17.w
        endif 
        iadd r29.w, r9.w, l(257)
        ine r28.w, r28.w, l(1)
        if_nz r28.w
          mad r28.w, |r23.w|, l(-0.200000), l(0.400000)
          mad r34.xyz, r11.xyzx, r28.wwww, r5.xyzx
          add r34.xyz, r34.xyzx, -cb9[r11.w + 4].yzwy
          max r28.w, |r34.z|, |r34.y|
          max r28.w, r28.w, |r34.x|
          div r28.w, cb9[r11.w + 5].x, r28.w
          add r28.w, r28.w, cb9[r11.w + 5].y
          dp3 r30.w, r34.xyzx, r34.xyzx
          rsq r30.w, r30.w
          max r28.w, r28.w, l(0.00006104)
          and r31.w, l(0x0000ffff), cb9[r11.w + 1].w
          utof r35.w, r31.w
          mov r31.w, l(0)
          mov r32.w, l(0)
          loop 
            ige r33.w, r32.w, l(8)
            breakc_nz r33.w
            dp2 r36.y, icb[r32.w + 0].yxyy, r18.xyxx
            dp2 r36.z, icb[r32.w + 0].yxyy, r18.yzyy
            mul r36.yz, r36.yyzy, cb9[r11.w + 3].yyyy
            mul r36.x, r16.x, r36.y
            mul r36.w, r15.x, r36.y
            mad r35.xyz, r34.xyzx, r30.wwww, r36.xzwx
            sample_c_lz_indexable(texturecubearray)(float,float,float,float) r33.w, r35.xyzw, t10.xxxx, s13, r28.w
            mad r31.w, r33.w, l(0.125000), r31.w
            iadd r32.w, r32.w, l(1)
          endloop 
        else 
          mov r31.w, l(1.000000)
        endif 
        mul r17.w, r17.w, r31.w
        lt r28.w, l(0.000000), r17.w
        if_nz r28.w
          mul r28.w, r0.w, cb9[r11.w + 1].z
          mul r28.w, r28.w, l(0.250000)
          dp3 r30.w, r32.xyzx, r17.xyzx
          dp3 r32.w, r17.xyzx, r33.xyzx
          mad r33.x, -r30.w, r30.w, cb9[r11.w + 6].y
          mad r13.w, r30.w, r32.w, -r13.w
          div_sat r13.w, r13.w, r33.x
          div r30.w, r33.x, cb9[r11.w + 6].y
          mul r30.w, r30.w, l(10.000000)
          min r30.w, r30.w, l(1.000000)
          add r13.w, -r14.w, r13.w
          mad r13.w, r30.w, r13.w, r14.w
          mad r19.yzw, r13.wwww, r32.xxyz, r19.yyzw
          movc r19.yzw, r13.zzzz, r19.yyzw, cb9[r11.w + 0].xxyz
          add r19.yzw, -r5.xxyz, r19.yyzw
          dp3 r13.z, r19.yzwy, r19.yzwy
          rsq r13.z, r13.z
          mul r32.xyz, r13.zzzz, r19.yzwy
          ubfe r13.w, l(4), l(16), cb9[r11.w + 1].w
          ult r14.w, l(0), r13.w
          and r14.w, r3.x, r14.w
          if_nz r14.w
            iadd r13.w, r13.w, cb2[0].x
            imad r13.w, r13.w, l(15), l(-15)
            mad r14.w, |r23.w|, l(-0.200000), l(0.400000)
            mad r21.xyz, r11.xyzx, r14.wwww, r5.xyzx
            mov r33.xyz, cb9[r13.w + 6].yzwy
            mov r33.w, cb9[r13.w + 7].x
            dp4 r14.w, r33.xyzw, r21.xyzw
            mov r33.xyz, cb9[r13.w + 7].yzwy
            mov r33.w, cb9[r13.w + 8].x
            dp4 r30.w, r33.xyzw, r21.xyzw
            lt r32.w, r30.w, r14.w
            if_z r32.w
              mov r33.xyz, cb9[r13.w + 4].yzwy
              mov r33.w, cb9[r13.w + 5].x
              dp4 r33.x, r33.xyzw, r21.xyzw
              mov r34.xyz, cb9[r13.w + 5].yzwy
              mov r34.w, cb9[r13.w + 6].x
              dp4 r33.y, r34.xyzw, r21.xyzw
              div r21.xy, r33.xyxx, r30.wwww
              mad r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r33.x, r21.x, cb9[r13.w + 9].w
              add r33.y, r21.y, cb9[r13.w + 10].x
              mul r21.xy, r33.xyxx, cb9[r13.w + 9].yzyy
              div r33.xy, cb9[r13.w + 3].yyyy, cb9[r13.w + 8].ywyy
              add r33.zw, -r33.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              ge r33.zw, r21.xxxy, r33.zzzw
              ge r33.xy, r33.xyxx, r21.xyxx
              or r33.xy, r33.xyxx, r33.zwzz
              or r21.z, r33.y, r33.x
              if_z r21.z
                mov_sat r21.xy, r21.xyxx
                mad r33.x, r21.x, cb9[r13.w + 8].y, cb9[r13.w + 8].z
                mad r33.y, r21.y, cb9[r13.w + 8].w, cb9[r13.w + 9].x
                mul r21.x, r30.w, cb9[r13.w + 10].z
                mad r14.w, cb9[r13.w + 10].y, r30.w, r14.w
                div r14.w, r14.w, r21.x
              endif 
            else 
              mov r21.z, l(-1)
            endif 
            or r21.x, r32.w, r21.z
            if_z r21.x
              max r14.w, r14.w, l(0.00006104)
              and r21.x, l(0x0000ffff), cb9[r13.w + 1].w
              if_nz cb2[58].y
                utof r34.z, r21.x
                mov r21.yz, l(0,0,0,0)
                loop 
                  ige r30.w, r21.z, l(8)
                  breakc_nz r30.w
                  dp2 r35.x, icb[r21.z + 0].yxyy, r18.xwxx
                  dp2 r35.y, icb[r21.z + 0].xyxx, r13.xyxx
                  mad r34.xy, r35.xyxx, cb9[r13.w + 3].yyyy, r33.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r30.w, r34.xyzx, t9.xxxx, s13, r14.w
                  mad r21.y, r30.w, l(0.125000), r21.y
                  iadd r21.z, r21.z, l(1)
                endloop 
              else 
                utof r33.z, r21.x
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.y, r33.xyzx, t9.xxxx, s13, r14.w
              endif 
              mul r13.w, r21.y, r21.y
              mul r13.w, r21.y, r13.w
            else 
              mov r13.w, l(1.000000)
            endif 
            mul r17.w, r13.w, r17.w
          else 
            ubfe r13.w, l(4), l(20), cb9[r11.w + 1].w
            ult r14.w, l(0), r13.w
            and r14.w, r8.w, r14.w
            if_nz r14.w
              iadd r13.w, r13.w, cb2[0].x
              imad r13.w, r13.w, l(15), l(-15)
              mad r14.w, |r23.w|, l(-0.200000), l(0.400000)
              mad r22.xyz, r11.xyzx, r14.wwww, r5.xyzx
              mov r33.xyz, cb9[r13.w + 6].yzwy
              mov r33.w, cb9[r13.w + 7].x
              dp4 r14.w, r33.xyzw, r22.xyzw
              mov r33.xyz, cb9[r13.w + 7].yzwy
              mov r33.w, cb9[r13.w + 8].x
              dp4 r21.x, r33.xyzw, r22.xyzw
              lt r21.z, r21.x, r14.w
              if_z r21.z
                mov r33.xyz, cb9[r13.w + 4].yzwy
                mov r33.w, cb9[r13.w + 5].x
                dp4 r33.x, r33.xyzw, r22.xyzw
                mov r34.xyz, cb9[r13.w + 5].yzwy
                mov r34.w, cb9[r13.w + 6].x
                dp4 r33.y, r34.xyzw, r22.xyzw
                div r22.xy, r33.xyxx, r21.xxxx
                mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r33.x, r22.x, cb9[r13.w + 9].w
                add r33.y, r22.y, cb9[r13.w + 10].x
                mul r22.xy, r33.xyxx, cb9[r13.w + 9].yzyy
                div r33.xy, cb9[r13.w + 3].yyyy, cb9[r13.w + 8].ywyy
                add r33.zw, -r33.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r33.zw, r22.xxxy, r33.zzzw
                ge r33.xy, r33.xyxx, r22.xyxx
                or r33.xy, r33.xyxx, r33.zwzz
                or r22.z, r33.y, r33.x
                if_z r22.z
                  mov_sat r22.xy, r22.xyxx
                  mad r33.x, r22.x, cb9[r13.w + 8].y, cb9[r13.w + 8].z
                  mad r33.y, r22.y, cb9[r13.w + 8].w, cb9[r13.w + 9].x
                  mul r22.x, r21.x, cb9[r13.w + 10].z
                  mad r14.w, cb9[r13.w + 10].y, r21.x, r14.w
                  div r14.w, r14.w, r22.x
                endif 
              else 
                mov r22.z, l(-1)
              endif 
              or r21.x, r21.z, r22.z
              if_z r21.x
                max r14.w, r14.w, l(0.00006104)
                and r21.x, l(0x0000ffff), cb9[r13.w + 1].w
                if_nz cb2[58].y
                  utof r22.z, r21.x
                  mov r21.z, l(0)
                  mov r30.w, l(0)
                  loop 
                    ige r32.w, r30.w, l(8)
                    breakc_nz r32.w
                    dp2 r34.x, icb[r30.w + 0].xyxx, r14.xyxx
                    dp2 r34.y, icb[r30.w + 0].yxyy, r14.xzxx
                    mad r22.xy, r34.xyxx, cb9[r13.w + 3].yyyy, r33.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r14.w
                    mad r21.z, r22.x, l(0.125000), r21.z
                    iadd r30.w, r30.w, l(1)
                  endloop 
                else 
                  utof r33.z, r21.x
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.z, r33.xyzx, t9.xxxx, s13, r14.w
                endif 
                mul r13.w, r21.z, r21.z
                mul r13.w, r21.z, r13.w
              else 
                mov r13.w, l(1.000000)
              endif 
              mul r17.w, r13.w, r17.w
            endif 
          endif 
          mad r13.w, -r27.w, r2.x, l(1.000000)
          mul r13.w, r13.w, r13.w
          mad r13.w, -r13.w, l(0.620000), l(0.620000)
          add r13.w, -r27.w, r13.w
          mad r13.w, r1.z, r13.w, r27.w
          mul r13.w, r17.w, r13.w
          mov r22.x, cb9[r11.w + 0].w
          mov r22.yz, cb9[r11.w + 1].xxyx
          lt r14.w, l(0.000000), r23.w
          mad r33.xyz, r13.wwww, r22.xyzx, r15.yzwy
          dp3_sat r13.w, r11.xyzx, r32.xyzx
          mad r19.yzw, r19.yyzw, r13.zzzz, r12.xxyz
          dp3 r13.z, r19.yzwy, r19.yzwy
          rsq r13.z, r13.z
          mul r19.yzw, r13.zzzz, r19.yyzw
          dp3 r13.z, r19.yzwy, r12.xyzx
          dp3 r19.y, r11.xyzx, r19.yzwy
          mad r19.z, |r19.y|, r0.w, -|r19.y|
          mad r19.y, |r19.y|, r19.z, l(1.000000)
          mad r19.z, r13.w, r4.z, r6.w
          mul r19.y, r19.y, r19.y
          mul r19.y, r19.z, r19.y
          rcp r19.y, r19.y
          mul r13.w, r28.w, r13.w
          mul r13.w, r13.w, r19.y
          mul r13.w, r17.w, r13.w
          mad r19.yzw, r13.wwww, r22.xxyz, r31.xxyz
          add_sat r13.z, -r13.z, l(1.000000)
          mul r21.x, r13.z, r13.z
          mul r21.x, r21.x, r21.x
          mul r13.z, r13.z, r21.x
          mul r13.z, r13.z, r13.w
          mad r22.xyz, r13.zzzz, r22.xyzx, r30.xyzx
          movc r15.yzw, r14.wwww, r33.xxyz, r15.yyzw
          movc r30.xyz, r14.wwww, r22.xyzx, r30.xyzx
          movc r31.xyz, r14.wwww, r19.yzwy, r31.xyzx
          and r13.z, r29.w, l(7)
          iadd r13.w, r13.z, l(-1)
          ult r13.w, r13.w, l(32)
          and r13.w, r1.w, r13.w
          if_nz r13.w
            imad r13.zw, r13.zzzz, l(0, 0, 24, 24), l(0, 0, 88, 108)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r14.w, cb2[52].x, r13.z, u2.xxxx
            or r14.w, r14.w, l(8)
            store_structured u2.x, cb2[52].x, r13.z, r14.w
            store_structured u2.x, cb2[52].x, r13.w, r17.w
          endif 
          iadd r9.w, r9.w, l(0x00010101)
        else 
          mov r9.w, r29.w
        endif 
      else 
        mov r9.w, r12.w
      endif 
    else 
      mov r9.w, r12.w
    endif 
    break 
    case l(2)
    if_nz r1.w
      and r12.w, r9.w, l(3)
      imad r12.w, r12.w, l(24), l(112)
      add r20.yzw, cb1[24].xxyz, cb9[r11.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r12.w, r20.xyzw
    endif 
    iadd r12.w, r9.w, l(1)
    add r22.xy, -r5.xyxx, cb9[r11.w + 3].zwzz
    add r22.z, -r5.z, cb9[r11.w + 4].x
    dp3 r13.z, r22.xyzx, r22.xyzx
    rsq r13.z, r13.z
    mul r19.yzw, r13.zzzz, r22.xxyz
    dp3 r13.w, r11.xyzx, r19.yzwy
    mov_sat r14.w, r13.w
    lt r17.w, l(0.000000), r14.w
    if_nz r17.w
      mov r32.xyz, cb9[r11.w + 7].yzwy
      mov r32.w, cb9[r11.w + 8].x
      dp4 r17.w, r32.xyzw, r5.xyzw
      lt r19.y, r17.w, l(1.000000)
      if_nz r19.y
        mov r19.yzw, l(0,1.000000,1.000000,1.000000)
        mov r20.y, l(0)
      else 
        add r33.xyz, -r5.xyzx, cb9[r11.w + 0].xyzx
        mul r20.z, cb9[r11.w + 3].x, cb9[r11.w + 3].x
        dp3 r20.w, r33.xyzx, r33.xyzx
        div r20.z, r20.z, r20.w
        min r20.z, r20.z, l(1.000000)
        mad_sat r33.xy, r17.wwww, cb9[r11.w + 2].xzxx, cb9[r11.w + 2].ywyy
        mul r33.zw, r33.xxxy, r33.xxxy
        mad r33.xy, r33.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r33.xy, r33.xyxx, r33.zwzz
        mul r20.z, r20.z, r33.x
        mul r20.z, r33.y, r20.z
        mov r33.xyz, cb9[r11.w + 4].yzwy
        mov r33.w, cb9[r11.w + 5].x
        dp4 r33.x, r33.xyzw, r5.xyzw
        mov r34.xyz, cb9[r11.w + 5].yzwy
        mov r34.w, cb9[r11.w + 6].x
        dp4 r33.y, r34.xyzw, r5.xyzw
        div r23.xy, r33.xyxx, r17.wwww
        lt r17.w, cb9[r11.w + 10].w, l(0.00048828)
        if_nz r17.w
          mad_sat r33.xy, |r23.xyxx|, cb9[r11.w + 12].xyxx, cb9[r11.w + 12].zwzz
          mul r33.zw, r33.xxxy, r33.xxxy
          mad r33.xy, r33.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r33.xy, r33.xyxx, r33.zwzz
          mul r17.w, r33.y, r33.x
        else 
          mul_sat r33.xyzw, |r23.yyxx|, cb9[r11.w + 11].xyzw
          log r33.xyzw, r33.xyzw
          mul r33.xyzw, r33.xyzw, cb9[r11.w + 12].zzzz
          exp r33.xyzw, r33.xyzw
          add r33.xy, r33.zwzz, r33.xyxx
          log r33.xy, r33.xyxx
          mul r33.xy, r33.xyxx, cb9[r11.w + 12].wwww
          exp r33.xy, r33.xyxx
          mul r20.w, r33.x, cb9[r11.w + 12].x
          mad r21.x, cb9[r11.w + 12].y, r33.y, l(-1.000000)
          mad r20.w, cb9[r11.w + 12].y, r33.y, -r20.w
          div_sat r20.w, r21.x, r20.w
          mul r21.x, r20.w, r20.w
          mad r20.w, r20.w, l(-2.000000), l(3.000000)
          mul r17.w, r20.w, r21.x
        endif 
        mul r20.y, r17.w, r20.z
        and r17.w, l(255), cb9[r11.w + 14].w
        if_nz r17.w
          dp3 r20.z, cb9[r11.w + 13].xyzx, r23.xyzx
          mov r33.x, cb9[r11.w + 13].w
          mov r33.yz, cb9[r11.w + 14].xxyx
          dp3 r20.w, r33.xyzx, r23.xyzx
          frc r33.xy, r20.zwzz
          iadd r17.w, r17.w, l(-1)
          utof r33.z, r17.w
          sample_l_indexable(texture2darray)(float,float,float,float) r19.yzw, r33.xyzx, t20.wxyz, s2, l(0.000000)
        else 
          mov r19.yzw, l(0,1.000000,1.000000,1.000000)
        endif 
      endif 
      mov r33.x, cb9[r11.w + 0].w
      mov r33.yz, cb9[r11.w + 1].xxyx
      mul r19.yzw, r19.yyzw, r33.xxyz
      lt r17.w, l(0.000000), r20.y
      if_nz r17.w
        ubfe r17.w, l(3), l(27), cb9[r11.w + 1].w
        and r20.z, r12.w, l(7)
        iadd r20.w, r20.z, l(-1)
        ult r20.w, r20.w, l(32)
        and r20.w, r1.w, r20.w
        if_nz r20.w
          imad r20.zw, r20.zzzz, l(0, 0, 24, 24), l(0, 0, 88, 104)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r21.x, cb2[52].x, r20.z, u2.xxxx
          or r21.x, r21.x, l(4)
          store_structured u2.x, cb2[52].x, r20.z, r21.x
          store_structured u2.x, cb2[52].x, r20.w, r20.y
        endif 
        iadd r20.z, r9.w, l(257)
        ine r17.w, r17.w, l(1)
        if_nz r17.w
          mad r17.w, |r13.w|, l(-0.200000), l(0.400000)
          mad r24.xyz, r11.xyzx, r17.wwww, r5.xyzx
          mov r33.xyz, cb9[r11.w + 6].yzwy
          mov r33.w, cb9[r11.w + 7].x
          dp4 r17.w, r33.xyzw, r24.xyzw
          dp4 r20.w, r32.xyzw, r24.xyzw
          ge r21.x, r20.w, r17.w
          if_nz r21.x
            mov r32.xyz, cb9[r11.w + 4].yzwy
            mov r32.w, cb9[r11.w + 5].x
            dp4 r23.x, r32.xyzw, r24.xyzw
            mov r32.xyz, cb9[r11.w + 5].yzwy
            mov r32.w, cb9[r11.w + 6].x
            dp4 r23.y, r32.xyzw, r24.xyzw
            div r23.xy, r23.xyxx, r20.wwww
            mad_sat r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            mad r24.x, r23.x, cb9[r11.w + 8].y, cb9[r11.w + 8].z
            mad r24.y, r23.y, cb9[r11.w + 8].w, cb9[r11.w + 9].x
            div r17.w, r17.w, r20.w
            max r17.w, r17.w, l(0.00006104)
            and r20.w, l(0x0000ffff), cb9[r11.w + 1].w
            if_nz cb2[58].y
              utof r32.z, r20.w
              mov r21.x, l(0)
              mov r23.x, l(0)
              loop 
                ige r23.y, r23.x, l(8)
                breakc_nz r23.y
                dp2 r33.x, icb[r23.x + 0].xyxx, r27.xyxx
                dp2 r33.y, icb[r23.x + 0].yxyy, r27.xzxx
                mad r32.xy, r33.xyxx, cb9[r11.w + 3].yyyy, r24.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.y, r32.xyzx, t9.xxxx, s13, r17.w
                mad r21.x, r23.y, l(0.125000), r21.x
                iadd r23.x, r23.x, l(1)
              endloop 
            else 
              utof r24.z, r20.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r24.xyzx, t9.xxxx, s13, r17.w
            endif 
            mul r17.w, r21.x, r21.x
            mul r17.w, r21.x, r17.w
          else 
            mov r17.w, l(1.000000)
          endif 
        else 
          mov r17.w, l(1.000000)
        endif 
        mul r17.w, r17.w, r20.y
        lt r20.y, l(0.000000), r17.w
        if_nz r20.y
          mul r20.y, r0.w, cb9[r11.w + 1].z
          mul r20.y, r14.w, r20.y
          ubfe r20.w, l(4), l(16), cb9[r11.w + 1].w
          ult r23.x, l(0), r20.w
          and r23.x, r3.x, r23.x
          if_nz r23.x
            iadd r20.w, r20.w, cb2[0].x
            imad r20.w, r20.w, l(15), l(-15)
            mad r23.x, |r13.w|, l(-0.200000), l(0.400000)
            mad r25.xyz, r11.xyzx, r23.xxxx, r5.xyzx
            mov r32.xyz, cb9[r20.w + 6].yzwy
            mov r32.w, cb9[r20.w + 7].x
            dp4 r23.x, r32.xyzw, r25.xyzw
            mov r32.xyz, cb9[r20.w + 7].yzwy
            mov r32.w, cb9[r20.w + 8].x
            dp4 r23.y, r32.xyzw, r25.xyzw
            lt r23.w, r23.y, r23.x
            if_z r23.w
              mov r32.xyz, cb9[r20.w + 4].yzwy
              mov r32.w, cb9[r20.w + 5].x
              dp4 r24.x, r32.xyzw, r25.xyzw
              mov r32.xyz, cb9[r20.w + 5].yzwy
              mov r32.w, cb9[r20.w + 6].x
              dp4 r24.y, r32.xyzw, r25.xyzw
              div r24.xy, r24.xyxx, r23.yyyy
              mad r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r25.x, r24.x, cb9[r20.w + 9].w
              add r25.y, r24.y, cb9[r20.w + 10].x
              mul r24.xy, r25.xyxx, cb9[r20.w + 9].yzyy
              div r25.xy, cb9[r20.w + 3].yyyy, cb9[r20.w + 8].ywyy
              add r32.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r32.xy, r24.xyxx, r32.xyxx
              ge r25.xy, r25.xyxx, r24.xyxx
              or r25.xy, r25.xyxx, r32.xyxx
              or r24.z, r25.y, r25.x
              if_z r24.z
                mov_sat r24.xy, r24.xyxx
                mad r25.x, r24.x, cb9[r20.w + 8].y, cb9[r20.w + 8].z
                mad r25.y, r24.y, cb9[r20.w + 8].w, cb9[r20.w + 9].x
                mul r24.x, r23.y, cb9[r20.w + 10].z
                mad r23.x, cb9[r20.w + 10].y, r23.y, r23.x
                div r23.x, r23.x, r24.x
              endif 
            else 
              mov r24.z, l(-1)
            endif 
            or r23.y, r23.w, r24.z
            if_z r23.y
              max r23.x, r23.x, l(0.00006104)
              and r23.y, l(0x0000ffff), cb9[r20.w + 1].w
              if_nz cb2[58].y
                utof r24.z, r23.y
                mov r23.w, l(0)
                mov r27.w, l(0)
                loop 
                  ige r28.w, r27.w, l(8)
                  breakc_nz r28.w
                  dp2 r32.x, icb[r27.w + 0].xyxx, r28.xyxx
                  dp2 r32.y, icb[r27.w + 0].yxyy, r28.xzxx
                  mad r24.xy, r32.xyxx, cb9[r20.w + 3].yyyy, r25.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r23.x
                  mad r23.w, r24.x, l(0.125000), r23.w
                  iadd r27.w, r27.w, l(1)
                endloop 
              else 
                utof r25.z, r23.y
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.w, r25.xyzx, t9.xxxx, s13, r23.x
              endif 
              mul r20.w, r23.w, r23.w
              mul r20.w, r23.w, r20.w
            else 
              mov r20.w, l(1.000000)
            endif 
            mul r17.w, r17.w, r20.w
          else 
            ubfe r11.w, l(4), l(20), cb9[r11.w + 1].w
            ult r20.w, l(0), r11.w
            and r20.w, r8.w, r20.w
            if_nz r20.w
              iadd r11.w, r11.w, cb2[0].x
              imad r11.w, r11.w, l(15), l(-15)
              mad r20.w, |r13.w|, l(-0.200000), l(0.400000)
              mad r26.xyz, r11.xyzx, r20.wwww, r5.xyzx
              mov r32.xyz, cb9[r11.w + 6].yzwy
              mov r32.w, cb9[r11.w + 7].x
              dp4 r20.w, r32.xyzw, r26.xyzw
              mov r32.xyz, cb9[r11.w + 7].yzwy
              mov r32.w, cb9[r11.w + 8].x
              dp4 r23.x, r32.xyzw, r26.xyzw
              lt r23.y, r23.x, r20.w
              if_z r23.y
                mov r32.xyz, cb9[r11.w + 4].yzwy
                mov r32.w, cb9[r11.w + 5].x
                dp4 r24.x, r32.xyzw, r26.xyzw
                mov r32.xyz, cb9[r11.w + 5].yzwy
                mov r32.w, cb9[r11.w + 6].x
                dp4 r24.y, r32.xyzw, r26.xyzw
                div r24.xy, r24.xyxx, r23.xxxx
                mad r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r25.x, r24.x, cb9[r11.w + 9].w
                add r25.y, r24.y, cb9[r11.w + 10].x
                mul r24.xy, r25.xyxx, cb9[r11.w + 9].yzyy
                div r25.xy, cb9[r11.w + 3].yyyy, cb9[r11.w + 8].ywyy
                add r26.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r26.xy, r24.xyxx, r26.xyxx
                ge r25.xy, r25.xyxx, r24.xyxx
                or r25.xy, r25.xyxx, r26.xyxx
                or r24.z, r25.y, r25.x
                if_z r24.z
                  mov_sat r24.xy, r24.xyxx
                  mad r25.x, r24.x, cb9[r11.w + 8].y, cb9[r11.w + 8].z
                  mad r25.y, r24.y, cb9[r11.w + 8].w, cb9[r11.w + 9].x
                  mul r24.x, r23.x, cb9[r11.w + 10].z
                  mad r20.w, cb9[r11.w + 10].y, r23.x, r20.w
                  div r20.w, r20.w, r24.x
                endif 
              else 
                mov r24.z, l(-1)
              endif 
              or r23.x, r23.y, r24.z
              if_z r23.x
                max r20.w, r20.w, l(0.00006104)
                and r23.x, l(0x0000ffff), cb9[r11.w + 1].w
                if_nz cb2[58].y
                  utof r24.z, r23.x
                  mov r23.y, l(0)
                  mov r26.x, l(0)
                  loop 
                    ige r26.y, r26.x, l(8)
                    breakc_nz r26.y
                    dp2 r32.x, icb[r26.x + 0].xyxx, r29.xyxx
                    dp2 r32.y, icb[r26.x + 0].yxyy, r29.xzxx
                    mad r24.xy, r32.xyxx, cb9[r11.w + 3].yyyy, r25.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r20.w
                    mad r23.y, r24.x, l(0.125000), r23.y
                    iadd r26.x, r26.x, l(1)
                  endloop 
                else 
                  utof r25.z, r23.x
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.y, r25.xyzx, t9.xxxx, s13, r20.w
                endif 
                mul r11.w, r23.y, r23.y
                mul r11.w, r23.y, r11.w
              else 
                mov r11.w, l(1.000000)
              endif 
              mul r17.w, r11.w, r17.w
            endif 
          endif 
          mad r11.w, -r14.w, r2.x, l(1.000000)
          mul r11.w, r11.w, r11.w
          mad r11.w, -r11.w, l(0.620000), l(0.620000)
          add r11.w, -r14.w, r11.w
          mad r11.w, r1.z, r11.w, r14.w
          mul r11.w, r17.w, r11.w
          lt r13.w, l(0.000000), r13.w
          mad r24.xyz, r11.wwww, r19.yzwy, r15.yzwy
          mad r22.xyz, r22.xyzx, r13.zzzz, r12.xyzx
          dp3 r11.w, r22.xyzx, r22.xyzx
          rsq r11.w, r11.w
          mul r22.xyz, r11.wwww, r22.xyzx
          dp3 r11.w, r22.xyzx, r12.xyzx
          dp3 r13.z, r11.xyzx, r22.xyzx
          mad r20.w, |r13.z|, r0.w, -|r13.z|
          mad r13.z, |r13.z|, r20.w, l(1.000000)
          mad r14.w, r14.w, r4.z, r6.w
          mul r13.z, r13.z, r13.z
          mul r13.z, r14.w, r13.z
          rcp r13.z, r13.z
          mul r13.z, r20.y, r13.z
          mul r13.z, r13.z, r17.w
          mul r13.z, r13.z, l(0.250000)
          mad r22.xyz, r13.zzzz, r19.yzwy, r31.xyzx
          add_sat r11.w, -r11.w, l(1.000000)
          mul r14.w, r11.w, r11.w
          mul r14.w, r14.w, r14.w
          mul r11.w, r11.w, r14.w
          mul r11.w, r11.w, r13.z
          mad r19.yzw, r11.wwww, r19.yyzw, r30.xxyz
          movc r15.yzw, r13.wwww, r24.xxyz, r15.yyzw
          movc r30.xyz, r13.wwww, r19.yzwy, r30.xyzx
          movc r31.xyz, r13.wwww, r22.xyzx, r31.xyzx
          and r11.w, r20.z, l(7)
          iadd r13.z, r11.w, l(-1)
          ult r13.z, r13.z, l(32)
          and r13.z, r1.w, r13.z
          if_nz r13.z
            imad r13.zw, r11.wwww, l(0, 0, 24, 24), l(0, 0, 88, 108)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r11.w, cb2[52].x, r13.z, u2.xxxx
            or r11.w, r11.w, l(8)
            store_structured u2.x, cb2[52].x, r13.z, r11.w
            store_structured u2.x, cb2[52].x, r13.w, r17.w
          endif 
          iadd r9.w, r9.w, l(0x00010101)
        else 
          mov r9.w, r20.z
        endif 
      else 
        mov r9.w, r12.w
      endif 
    else 
      mov r9.w, r12.w
    endif 
    break 
    default 
    break 
  endswitch 
  iadd r10.w, r10.w, l(1)
endloop 
mad r2.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.x, r2.y
mad r3.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r3.x
ieq r0.w, r0.x, r0.w
movc r3.xy, r0.wwww, r3.yzyy, l(-1.000000,0,0,0)
mad r4.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r4.x
ieq r0.w, r0.x, r0.w
movc r3.zw, r0.wwww, r4.yyyz, l(0,0,-1.000000,0)
mad r4.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r4.x
ieq r0.w, r0.x, r0.w
movc r4.xy, r0.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r7.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r7.x
ieq r0.x, r0.x, r0.w
movc r0.xw, r0.xxxx, r7.yyyz, l(-1.000000,0,0,0)
mov r7.xy, r3.xzxx
mov r7.z, r4.x
mov r7.w, r0.x
add r7.xyzw, -r2.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.x, r7.y, r7.x
add r0.x, r7.z, r0.x
add r0.x, r7.w, r0.x
mul r1.z, r3.w, r7.y
mad r1.z, r7.x, r3.y, r1.z
mad r1.z, r7.z, r4.y, r1.z
mad r0.w, r7.w, r0.w, r1.z
div r2.w, r0.w, r0.x
ge r0.x, l(0.000000), r0.x
movc r2.yz, r0.xxxx, l(0,0,0,0), r2.zzwz
and r0.xw, r1.xxxy, l(1, 0, 0, 1)
ieq r0.x, r0.w, r0.x
movc r2.xyz, r0.xxxx, r2.xyzx, r2.xzyx
mad r0.x, -r2.z, l(0.500000), r2.x
add r3.y, r0.x, r2.z
mad r3.z, -r2.y, l(0.500000), r0.x
add r3.x, r2.y, r3.z
add r2.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, r30.xyzx
mad r2.xyz, r31.xyzx, r3.xyzx, r2.xyzx
mad r2.xyz, r15.yzwy, r6.xyzx, r2.xyzx
lt r0.x, l(0.000000), cb2[9].z
if_nz r0.x
  dp3 r0.x, r5.xyzx, r5.xyzx
  rsq r0.w, r0.x
  mul r3.xyz, r0.wwww, r5.xyzx
  sqrt r0.x, r0.x
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r4.xy, r0.xxxx, cb2[15].xyxx, cb2[14].zwzz
    mul r4.xy, r4.xyxx, cb2[16].xyxx
    lt r0.w, l(0.010000), |r5.z|
    mul r4.zw, r5.zzzz, cb2[15].zzzw
    mul r6.xy, r4.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r6.xy, r6.xyxx
    add r6.xy, -r6.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r4.zw, r6.xxxy, r4.zzzw
    mul r4.zw, r4.zzzw, r4.xxxy
    movc r4.xy, r0.wwww, r4.zwzz, r4.xyxx
    mul r4.xzw, r4.xxxx, cb2[12].xxyz
    exp r4.xzw, r4.xxzw
    mul r6.xyz, r4.yyyy, cb2[12].xyzx
    exp r6.xyz, r6.xyzx
    add r6.xyz, -r4.xzwx, r6.xyzx
    mad r4.xyz, cb2[13].wwww, r6.xyzx, r4.xzwx
  else 
    mad r0.w, r0.x, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r5.z|
    mul r2.w, r5.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r0.w, r2.w
    movc r0.w, r1.z, r2.w, r0.w
    mul r6.xyz, r0.wwww, cb2[12].xyzx
    exp r4.xyz, r6.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xyzx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.w, cb2[8].w, -r0.w, l(1.000000)
  mul r2.w, r2.w, r2.w
  mul r2.w, r2.w, l(12.566371)
  div r1.z, r1.z, r2.w
  add r0.x, r0.x, -cb2[10].w
  mul_sat r0.x, r0.x, cb2[11].w
  mul r0.x, r0.x, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyz, r0.xxxx, cb2[11].xyzx
  mad r3.xyz, r0.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r6.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r6.xyzx
  mad r3.xyz, r2.xyzx, r4.xyzx, r3.xyzx
else 
  mul r0.x, r5.z, cb2[6].x
  mad r0.w, cb2[6].x, r5.z, cb2[5].x
  lt r1.z, |r0.x|, l(0.000100)
  min r2.w, r0.w, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.w, cb2[6].z
  lt r4.x, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r4.x, r2.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.x, r1.z, l(1.000000), r0.x
  div r0.x, r0.w, r0.x
  movc r0.x, r1.z, r3.w, r0.x
  mul r0.x, r0.x, cb2[5].z
  dp3 r0.w, r5.xyzx, r5.xyzx
  sqrt r1.z, r0.w
  mad r0.x, r0.x, r1.z, cb2[5].w
  exp r0.x, r0.x
  min r0.x, r0.x, l(1.000000)
  add r0.x, -r0.x, l(1.000000)
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r5.xyzx
  dp3 r0.w, cb2[7].yzwy, r4.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r0.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.x, r0.x, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyz, r0.xxxx, r4.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.x, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r3.xz, r3.xxzx, l(0, 0, 0, 0)
ieq r3.yw, r3.yyyw, l(0, 3, 0, 4)
and r3.xy, r3.ywyy, r3.xzxx
and r3.xy, r3.xyxx, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(16)
and r0.w, r0.w, r1.z
and r3.z, r0.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.xxxx, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.x, r9.w, l(3)
      break 
      case l(2)
      ubfe r0.x, l(2), l(8), r9.w
      break 
      case l(3)
      ushr r0.x, r9.w, l(16)
      break 
      case l(4)
      mov r0.x, l(0)
      break 
      case l(5)
      mov r0.x, l(1)
      break 
      default 
      mov r0.x, l(0)
      break 
    endswitch 
    utof r0.x, r0.x
    mul r0.x, r0.x, cb2[53].z
    mad r3.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r1.w
  add r1.xyz, r5.xyzx, cb1[24].xyzx
  and r1.w, r9.w, l(3)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  store_structured u2.x, cb2[52].x, l(108), l(0)
endif 
if_nz cb2[52].y
  and r0.x, r9.w, l(3)
  atomic_iadd g1, l(0), r0.x
  ubfe r0.w, l(2), l(8), r9.w
  atomic_iadd g1, l(4), r0.w
  ushr r1.x, r9.w, l(16)
  atomic_iadd g1, l(8), r1.x
  atomic_iadd g1, l(12), l(0)
  atomic_iadd g1, l(16), l(1)
  atomic_umax g2, l(0), r0.x
  atomic_umax g2, l(4), r0.w
  atomic_umax g2, l(8), r1.x
  atomic_umax g2, l(12), l(0)
  atomic_umax g2, l(16), l(1)
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.x, r1.x, l(63)
  if_nz r0.x
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.x, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.x
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.x, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.x
    ieq r0.yz, r0.yyzy, cb2[52].zzwz
    and r0.y, r0.z, r0.y
    if_nz r0.y
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.x
    endif 
  endif 
endif 
ret 
// Approximately 1130 instruction slots used
