// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:40:10 2021

cbuffer _Globals : register(b0)
{
  float4 flagParams : packoffset(c0);
  float4 colorObjMin : packoffset(c1);
  float4 colorObjMax : packoffset(c2);
  float colorObjMinBaseBlend : packoffset(c3);
  float colorObjMaxBaseBlend : packoffset(c3.y);
  float2 uvScroll : packoffset(c3.z);
  float4 detailScale : packoffset(c4);
  float4 detailScale1 : packoffset(c5);
  float4 detailScale2 : packoffset(c6);
  float4 detailScale3 : packoffset(c7);
  float4 alphaRevealParms : packoffset(c8);
  float4 colorDetailScale : packoffset(c9);
  float alphaRevealSoftEdge : packoffset(c10);
  float alphaRevealRamp : packoffset(c10.y);
  float pulseWidth : packoffset(c10.z);
  float3 pulseColor : packoffset(c11);
  float glowBoost : packoffset(c11.w);
  float2 pulseScroll : packoffset(c12);
  float2 pulseTiling : packoffset(c12.z);
  float pulseCurvature : packoffset(c13);
  float2 distortionScroll : packoffset(c13.y);
  float2 distortionScale : packoffset(c14);
  float distortionAmt : packoffset(c14.z);
  float blurAmt : packoffset(c14.w);
}

cbuffer PostFxCBuffer : register(b8)
{
  float4 postFxControl0 : packoffset(c0);
  float4 postFxControl1 : packoffset(c1);
  float4 postFxControl2 : packoffset(c2);
  float4 postFxControl3 : packoffset(c3);
  float4 postFxControl4 : packoffset(c4);
  float4 postFxControl5 : packoffset(c5);
  float4 postFxControl6 : packoffset(c6);
  float4 postFxControl7 : packoffset(c7);
  float4 postFxControl8 : packoffset(c8);
  float4 postFxControl9 : packoffset(c9);
  float4 postFxControlA : packoffset(c10);
  float4 postFxControlB : packoffset(c11);
  float4 postFxControlC : packoffset(c12);
  float4 postFxControlD : packoffset(c13);
  float4 postFxControlE : packoffset(c14);
  float4 postFxControlF : packoffset(c15);
  float4 postFxConst00 : packoffset(c16);
  float4 postFxConst01 : packoffset(c17);
  float4 postFxConst02 : packoffset(c18);
  float4 postFxConst03 : packoffset(c19);
  float4 postFxConst04 : packoffset(c20);
  float4 postFxConst05 : packoffset(c21);
  float4 postFxConst06 : packoffset(c22);
  float4 postFxConst07 : packoffset(c23);
  float4 postFxConst08 : packoffset(c24);
  float4 postFxConst09 : packoffset(c25);
  float4 postFxConst10 : packoffset(c26);
  float4 postFxConst11 : packoffset(c27);
  float4 postFxConst12 : packoffset(c28);
  float4 postFxConst13 : packoffset(c29);
  float4 postFxConst14 : packoffset(c30);
  float4 postFxConst15 : packoffset(c31);
  float4 postFxConst16 : packoffset(c32);
  float4 postFxConst17 : packoffset(c33);
  float4 postFxConst18 : packoffset(c34);
  float4 postFxConst19 : packoffset(c35);
  float4 postFxConst20 : packoffset(c36);
  float4 postFxConst21 : packoffset(c37);
  float4 postFxConst22 : packoffset(c38);
  float4 postFxConst23 : packoffset(c39);
  float4 postFxConst24 : packoffset(c40);
  float4 postFxConst25 : packoffset(c41);
  float4 postFxConst26 : packoffset(c42);
  float4 postFxConst27 : packoffset(c43);
  float4 postFxConst28 : packoffset(c44);
  float4 postFxConst29 : packoffset(c45);
  float4 postFxConst30 : packoffset(c46);
  float4 postFxConst31 : packoffset(c47);
  float4 postFxConst32 : packoffset(c48);
  float4 postFxConst33 : packoffset(c49);
  float4 postFxConst34 : packoffset(c50);
  float4 postFxConst35 : packoffset(c51);
  float4 postFxConst36 : packoffset(c52);
  float4 postFxConst37 : packoffset(c53);
  float4 postFxConst38 : packoffset(c54);
  float4 postFxConst39 : packoffset(c55);
  float4 postFxConst40 : packoffset(c56);
  float4 postFxConst41 : packoffset(c57);
  float4 postFxConst42 : packoffset(c58);
  float4 postFxConst43 : packoffset(c59);
  float4 postFxConst44 : packoffset(c60);
  float4 postFxConst45 : packoffset(c61);
  float4 postFxConst46 : packoffset(c62);
  float4 postFxConst47 : packoffset(c63);
  float4 postFxConst48 : packoffset(c64);
  float4 postFxConst49 : packoffset(c65);
  float4 postFxConst50 : packoffset(c66);
  float4 postFxConst51 : packoffset(c67);
  float4 postFxConst52 : packoffset(c68);
  float4 postFxConst53 : packoffset(c69);
  float4 postFxConst54 : packoffset(c70);
  float4 postFxConst55 : packoffset(c71);
  float4 postFxConst56 : packoffset(c72);
  float4 postFxConst57 : packoffset(c73);
  float4 postFxConst58 : packoffset(c74);
  float4 postFxConst59 : packoffset(c75);
  float4 postFxConst60 : packoffset(c76);
  float4 postFxConst61 : packoffset(c77);
  float4 postFxConst62 : packoffset(c78);
  float4 postFxConst63 : packoffset(c79);
  float4 postFxBloom00 : packoffset(c80);
  float4 postFxBloom01 : packoffset(c81);
  float4 postFxBloom02 : packoffset(c82);
  float4 postFxBloom03 : packoffset(c83);
  float4 postFxBloom04 : packoffset(c84);
  float4 postFxBloom05 : packoffset(c85);
  float4 postFxBloom06 : packoffset(c86);
  float4 postFxBloom07 : packoffset(c87);
  float4 postFxBloom08 : packoffset(c88);
  float4 postFxBloom09 : packoffset(c89);
  float4 postFxBloom10 : packoffset(c90);
  float4 postFxBloom11 : packoffset(c91);
  float4 postFxBloom12 : packoffset(c92);
  float4 postFxBloom13 : packoffset(c93);
  float4 postFxBloom14 : packoffset(c94);
  float4 postFxBloom15 : packoffset(c95);
  float4 postFxBloom16 : packoffset(c96);
  float4 postFxBloom17 : packoffset(c97);
  float4 postFxBloom18 : packoffset(c98);
  float4 postFxBloom19 : packoffset(c99);
  float4 postFxBloom20 : packoffset(c100);
  float4 postFxBloom21 : packoffset(c101);
  float4 postFxBloom22 : packoffset(c102);
  float4 postFxBloom23 : packoffset(c103);
  float4 postFxBloom24 : packoffset(c104);
  float4 postFxBloom25 : packoffset(c105);
  float4 filterTap[8] : packoffset(c106);
  float4 postfxViewMatrix0 : packoffset(c114);
  float4 postfxViewMatrix1 : packoffset(c115);
  float4 postfxViewMatrix2 : packoffset(c116);
  float4 postfxViewMatrix3 : packoffset(c117);
  float4 postfxProjMatrix0 : packoffset(c118);
  float4 postfxProjMatrix1 : packoffset(c119);
  float4 postfxProjMatrix2 : packoffset(c120);
  float4 postfxProjMatrix3 : packoffset(c121);
  float4 postfxViewProjMatrix0 : packoffset(c122);
  float4 postfxViewProjMatrix1 : packoffset(c123);
  float4 postfxViewProjMatrix2 : packoffset(c124);
  float4 postfxViewProjMatrix3 : packoffset(c125);
}

cbuffer GenericsCBuffer : register(b3)
{
  float4 scriptVector0 : packoffset(c0);
  float4 scriptVector1 : packoffset(c1);
  float4 scriptVector2 : packoffset(c2);
  float4 scriptVector3 : packoffset(c3);
  float4 scriptVector4 : packoffset(c4);
  float4 scriptVector5 : packoffset(c5);
  float4 scriptVector6 : packoffset(c6);
  float4 scriptVector7 : packoffset(c7);
  float4 weaponParam0 : packoffset(c8);
  float4 weaponParam1 : packoffset(c9);
  float4 weaponParam2 : packoffset(c10);
  float4 weaponParam3 : packoffset(c11);
  float4 weaponParam4 : packoffset(c12);
  float4 weaponParam5 : packoffset(c13);
  float4 weaponParam6 : packoffset(c14);
  float4 weaponParam7 : packoffset(c15);
}

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}

SamplerState trilinearSampler_s : register(s1);
SamplerState bilinearClampler_s : register(s2);
SamplerState pointSampler_s : register(s3);
Texture2D<float4> frameBuffer : register(t0);
Texture2D<float4> floatzTexture : register(t6);
Texture2D<float4> pulseTexture : register(t7);
Texture2D<float4> irisTexture : register(t9);
Texture2D<float4> distortionMask : register(t10);
Texture2D<float4> distortionMap : register(t11);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = distortionMask.Sample(trilinearSampler_s, v1.xy).x;
  r0.y = scriptVector1.y * r0.x;
  r0.y = cmp(0 < r0.y);
  r1.xyzw = renderTargetSize.zwzw * distortionAmt;
  r1.xyzw = r1.xyzw * r0.xxxx;
  r1.xyzw = scriptVector1.yyyy * r1.xyzw;
  r0.xz = gameTime.ww * distortionScroll.xy;
  r0.xz = v1.xy * distortionScale.xy + r0.xz;
  r0.xz = distortionMap.Sample(trilinearSampler_s, r0.xz).xy;
  r2.xyzw = r0.xzxz * float4(1.9921875,1.9921875,1.9921875,1.9921875) + float4(-1,-1,-1,-1);
  r2.xyzw = r2.xyzw * r1.xyxy + v1.xyxy;
  r0.x = max(r1.z, r1.w);
  r1.xyzw = saturate(r0.xxxx * float4(-0.563089311,-0.268058598,-0.107148901,-0.652221084) + r2.zwzw);
  r3.xyzw = frameBuffer.Sample(bilinearClampler_s, r1.xy).xyzw;
  r1.xyzw = frameBuffer.Sample(bilinearClampler_s, r1.zw).xyzw;
  r4.xyzw = saturate(r0.xxxx * float4(-0.297493488,0.236788303,-0.940281689,0.287647098) + r2.zwzw);
  r5.xyzw = frameBuffer.Sample(bilinearClampler_s, r4.xy).xyzw;
  r4.xyzw = frameBuffer.Sample(bilinearClampler_s, r4.zw).xyzw;
  r6.xyzw = saturate(r0.xxxx * float4(0.374713004,-0.33693859,0.4578771,-0.749875307) + r2.zwzw);
  r7.xyzw = frameBuffer.Sample(bilinearClampler_s, r6.xy).xyzw;
  r6.xyzw = frameBuffer.Sample(bilinearClampler_s, r6.zw).xyzw;
  r8.xyzw = saturate(r0.xxxx * float4(-0.4427737,-0.886700988,0.788797915,-0.427877992) + r2.zwzw);
  r9.xyzw = frameBuffer.Sample(bilinearClampler_s, r8.xy).xyzw;
  r8.xyzw = frameBuffer.Sample(bilinearClampler_s, r8.zw).xyzw;
  r10.xyzw = saturate(r0.xxxx * float4(-0.0290644299,-0.2007249,0.427763313,0.165135205) + r2.zwzw);
  r11.xyzw = frameBuffer.Sample(bilinearClampler_s, r10.xy).xyzw;
  r10.xyzw = frameBuffer.Sample(bilinearClampler_s, r10.zw).xyzw;
  r12.xyzw = saturate(r0.xxxx * float4(-0.230788201,0.640438676,-0.657632113,0.674599111) + r2.zwzw);
  r13.xyzw = frameBuffer.Sample(bilinearClampler_s, r12.xy).xyzw;
  r12.xyzw = frameBuffer.Sample(bilinearClampler_s, r12.zw).xyzw;
  r14.xyzw = saturate(r0.xxxx * float4(0.869136691,0.00676916121,0.283670396,0.930419683) + r2.zwzw);
  r15.xyzw = frameBuffer.Sample(bilinearClampler_s, r14.xy).xyzw;
  r14.xyzw = frameBuffer.Sample(bilinearClampler_s, r14.zw).xyzw;
  r2.xyzw = saturate(r0.xxxx * float4(0.512029588,0.590522408,-0.968446076,-0.189363196) + r2.xyzw);
  r16.xyzw = frameBuffer.Sample(bilinearClampler_s, r2.xy).xyzw;
  r2.xyzw = frameBuffer.Sample(bilinearClampler_s, r2.zw).xyzw;
  if (r0.y != 0) {
    r0.xyzw = r3.xyzw + r1.xyzw;
    r0.xyzw = r0.xyzw + r5.xyzw;
    r0.xyzw = r0.xyzw + r4.xyzw;
    r0.xyzw = r0.xyzw + r7.xyzw;
    r0.xyzw = r0.xyzw + r6.xyzw;
    r0.xyzw = r0.xyzw + r9.xyzw;
    r0.xyzw = r0.xyzw + r8.xyzw;
    r0.xyzw = r0.xyzw + r11.xyzw;
    r0.xyzw = r0.xyzw + r10.xyzw;
    r0.xyzw = r0.xyzw + r13.xyzw;
    r0.xyzw = r0.xyzw + r12.xyzw;
    r0.xyzw = r0.xyzw + r15.xyzw;
    r0.xyzw = r0.xyzw + r14.xyzw;
    r0.xyzw = r0.xyzw + r16.xyzw;
    r0.xyzw = r0.xyzw + r2.xyzw;
    r0.xyzw = float4(0.0625,0.0625,0.0625,0.0625) * r0.xyzw;
  } else {
    r0.xyzw = frameBuffer.Sample(bilinearClampler_s, v1.xy).xyzw;
  }
  r1.x = v1.x * 2 + -1;
  r1.x = abs(r1.x) * abs(r1.x);
  r1.x = r1.x * -pulseCurvature + 1;
  r1.y = floatzTexture.Sample(bilinearClampler_s, v1.xy).x;
  r1.z = cmp(r1.y >= 0.984375);
  r1.w = 1.01587307 * r1.y;
  r2.x = r1.y * 64 + -63;
  r1.z = r1.z ? r2.x : r1.w;
  r1.xz = max(float2(0.00100000005,9.99999994e-09), r1.xz);
  r1.z = rcp(r1.z);
  r1.w = max(0.00100000005, scriptVector1.x);
  r2.x = r1.z / r1.w;
  r2.x = min(1, r2.x);
  r2.x = log2(r2.x);
  r1.x = r2.x * r1.x;
  r1.x = exp2(r1.x);
  r2.x = dot(r0.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.x = frac(r2.x);
  r2.yzw = r0.yzw;
  r0.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.y = frac(r0.w);
  r0.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.z = frac(r0.w);
  r0.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.w = frac(r0.w);
  r3.xyz = r2.xyz;
  r0.w = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.x = frac(r0.w);
  r0.w = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r0.w = frac(r0.w);
  r2.xy = float2(0.129999995,-0.699999988) * gameTime.ww;
  r2.x = cos(r2.x);
  r2.x = r2.x * 0.5 + 0.5;
  r0.w = r2.x * r0.w;
  r2.x = sin(r2.y);
  r2.x = r2.x * 0.5 + 0.5;
  r2.x = r3.x * r2.x;
  r2.y = 402.123871 * v1.x;
  r2.y = cos(r2.y);
  r2.y = r2.y * 0.5 + 0.5;
  r3.x = r2.y * r0.w;
  r0.w = 402.123871 * r1.x;
  r0.w = cos(r0.w);
  r0.w = r0.w * 0.5 + 0.5;
  r3.y = r0.w * r2.x;
  r2.xy = pulseTiling.xy * v1.xy;
  r3.zw = gameTime.ww * pulseScroll.xy;
  r4.xy = v1.xy * pulseTiling.xy + r3.zw;
  r0.w = pulseTexture.Sample(trilinearSampler_s, r4.xy).x;
  r3.zw = float2(-1.37,1.73000002) * r3.zw;
  r2.xy = r2.xy * float2(0.469999999,0.469999999) + r3.zw;
  r2.xy = r3.xy * float2(0.0900000036,0.0900000036) + r2.xy;
  r2.x = pulseTexture.Sample(trilinearSampler_s, r2.xy).x;
  r1.y = cmp(r1.y < 0.984375);
  if (r1.y != 0) {
    r0.w = r2.x * r0.w;
    r2.xy = -renderTargetSize.zw * float2(0.5,0.5) + v1.xy;
    r2.xyz = floatzTexture.Gather(pointSampler_s, r2.xy).xyz;
    r3.yz = renderTargetSize.zw * float2(0.5,0.5) + v1.xy;
    r3.yz = floatzTexture.Gather(pointSampler_s, r3.yz).xz;
    r1.y = cmp(r2.y >= 0.984375);
    r3.w = 1.01587307 * r2.y;
    r4.x = r2.y * 64 + -63;
    r1.y = r1.y ? r4.x : r3.w;
    r1.y = max(9.99999994e-09, r1.y);
    r4.y = rcp(r1.y);
    r5.xy = viewSpaceScaleBias.yx * v1.yx + -viewSpaceScaleBias.wz;
    r4.xz = r5.xy * r4.yy;
    r5.xyzw = r2.xxzz + -r2.yyyy;
    r6.xyzw = r3.zzyy + -r2.yyyy;
    r5.xyzw = cmp(abs(r5.xyzw) < abs(r6.xyzw));
    r6.xy = r5.yw ? float2(-1,-1) : float2(1,1);
    r5.xyzw = r5.xyzw ? r2.xxzz : r3.zzyy;
    r2.x = renderTargetSize.z * r6.x;
    r2.y = 0;
    r2.xy = v1.xy + r2.xy;
    r3.yz = cmp(r5.yw >= float2(0.984375,0.984375));
    r5.yw = float2(1.01587307,1.01587307) * r5.yw;
    r5.xz = r5.xz * float2(64,64) + float2(-63,-63);
    r3.yz = r3.yz ? r5.xz : r5.yw;
    r3.yz = max(float2(9.99999994e-09,9.99999994e-09), r3.yz);
    r5.zw = rcp(r3.yz);
    r2.xy = viewSpaceScaleBias.xy * r2.xy + -viewSpaceScaleBias.zw;
    r5.xy = r5.zz * r2.xy;
    r6.z = 0;
    r2.xy = r6.yz * renderTargetSize.wz + v1.yx;
    r2.xy = viewSpaceScaleBias.yx * r2.xy + -viewSpaceScaleBias.wz;
    r2.xz = r5.ww * r2.xy;
    r3.yzw = r5.zxy + -r4.yzx;
    r3.yzw = r6.xxx * r3.yzw;
    r2.y = r5.w;
    r2.xyz = r2.xyz + -r4.xyz;
    r2.xyz = r6.yyy * r2.xyz;
    r4.xyz = r3.yzw * r2.xyz;
    r2.xyz = r3.wyz * r2.yzx + -r4.xyz;
    r1.y = dot(r2.xyz, r2.xyz);
    r1.y = rsqrt(r1.y);
    r1.y = r2.y * r1.y;
    r1.y = cmp(r1.y >= 0.899999976);
    r2.x = rcp(postfxProjMatrix0.x);
    r2.y = rcp(postfxProjMatrix1.y);
    r3.yz = -subpixelOffset.xy + v0.xy;
    r3.yz = renderTargetSize.zw * r3.yz;
    r3.yz = r3.yz * float2(2,-2) + float2(-1,1);
    r2.xy = r3.yz * r2.xy;
    r2.z = 1;
    r2.xyz = r2.xyz * r1.zzz;
    r1.z = inverseViewMatrix._m11 * r2.y;
    r1.z = r2.x * inverseViewMatrix._m01 + r1.z;
    r1.z = r2.z * inverseViewMatrix._m21 + r1.z;
    r1.z = cmp(-r1.z >= 1);
    r1.w = saturate(scriptVector0.x / r1.w);
    r2.x = scriptVector0.y * pulseWidth;
    r2.y = saturate(-pulseWidth * scriptVector0.y + r1.w);
    r2.z = -r2.y + r1.w;
    r2.y = -r2.y + r1.x;
    r2.z = 1 / r2.z;
    r2.y = saturate(r2.y * r2.z);
    r2.z = r2.y * -2 + 3;
    r2.y = r2.y * r2.y;
    r2.y = r2.z * r2.y;
    r2.z = cmp(r1.x >= r1.w);
    r2.y = r2.z ? 0 : r2.y;
    r1.w = saturate(r2.x * scriptVector0.z + r1.w);
    r1.x = cmp(r1.x >= r1.w);
    r1.w = r2.z ? 1.000000 : 0;
    r1.x = r1.x ? 0 : r1.w;
    r1.w = r3.x * 0.200000003 + 0.800000012;
    r1.x = dot(r1.xx, r1.ww);
    r0.w = r2.y * r0.w + r1.x;
    r1.x = cmp(scriptVector1.x >= scriptVector0.x);
    r1.xyz = r1.xyz ? float3(1,1,1) : 0;
    r0.w = r1.x * r0.w;
    r0.w = glowBoost * r0.w;
    r0.w = r0.w * r1.y;
    r0.w = r0.w * r1.z;
  } else {
    r0.w = 0;
  }
  r1.xyzw = irisTexture.Sample(trilinearSampler_s, v1.xy).xyzw;
  r2.x = saturate(scriptVector0.w * 0.998000026 + 0.00100000005);
  r2.y = 1 + -r2.x;
  r2.z = saturate(alphaRevealRamp);
  r2.x = log2(r2.x);
  r2.x = r2.z * r2.x;
  r2.x = exp2(r2.x);
  r3.x = -r2.x;
  r2.x = log2(r2.y);
  r2.x = r2.z * r2.x;
  r3.y = exp2(r2.x);
  r2.xy = saturate(alphaRevealSoftEdge * r3.xy + r2.yy);
  r1.w = -r2.x + r1.w;
  r2.x = r2.y + -r2.x;
  r1.w = saturate(r1.w / r2.x);
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = pulseColor.xyz * r0.www + r1.xyz;
  r0.xyz = r0.xyz * float3(3.05175781e-05,3.05175781e-05,3.05175781e-05) + r1.xyz;
  o0.xyz = float3(32768,32768,32768) * r0.xyz;
  o0.w = r2.w;
  return;
}