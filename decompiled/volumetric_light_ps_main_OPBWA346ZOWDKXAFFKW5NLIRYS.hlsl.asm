//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:43:54 2021
//
//
// Buffer Definitions: 
//
// cbuffer PostFxCBuffer
// {
//
//   float4 postFxControl0;             // Offset:    0 Size:    16
//   float4 postFxControl1;             // Offset:   16 Size:    16
//   float4 postFxControl2;             // Offset:   32 Size:    16
//   float4 postFxControl3;             // Offset:   48 Size:    16
//   float4 postFxControl4;             // Offset:   64 Size:    16
//   float4 postFxControl5;             // Offset:   80 Size:    16
//   float4 postFxControl6;             // Offset:   96 Size:    16 [unused]
//   float4 postFxControl7;             // Offset:  112 Size:    16
//   float4 postFxControl8;             // Offset:  128 Size:    16 [unused]
//   float4 postFxControl9;             // Offset:  144 Size:    16 [unused]
//   float4 postFxControlA;             // Offset:  160 Size:    16 [unused]
//   float4 postFxControlB;             // Offset:  176 Size:    16 [unused]
//   float4 postFxControlC;             // Offset:  192 Size:    16 [unused]
//   float4 postFxControlD;             // Offset:  208 Size:    16 [unused]
//   float4 postFxControlE;             // Offset:  224 Size:    16 [unused]
//   float4 postFxControlF;             // Offset:  240 Size:    16 [unused]
//   float4 postFxConst00;              // Offset:  256 Size:    16 [unused]
//   float4 postFxConst01;              // Offset:  272 Size:    16 [unused]
//   float4 postFxConst02;              // Offset:  288 Size:    16 [unused]
//   float4 postFxConst03;              // Offset:  304 Size:    16 [unused]
//   float4 postFxConst04;              // Offset:  320 Size:    16 [unused]
//   float4 postFxConst05;              // Offset:  336 Size:    16 [unused]
//   float4 postFxConst06;              // Offset:  352 Size:    16 [unused]
//   float4 postFxConst07;              // Offset:  368 Size:    16 [unused]
//   float4 postFxConst08;              // Offset:  384 Size:    16 [unused]
//   float4 postFxConst09;              // Offset:  400 Size:    16 [unused]
//   float4 postFxConst10;              // Offset:  416 Size:    16 [unused]
//   float4 postFxConst11;              // Offset:  432 Size:    16 [unused]
//   float4 postFxConst12;              // Offset:  448 Size:    16 [unused]
//   float4 postFxConst13;              // Offset:  464 Size:    16 [unused]
//   float4 postFxConst14;              // Offset:  480 Size:    16 [unused]
//   float4 postFxConst15;              // Offset:  496 Size:    16 [unused]
//   float4 postFxConst16;              // Offset:  512 Size:    16 [unused]
//   float4 postFxConst17;              // Offset:  528 Size:    16 [unused]
//   float4 postFxConst18;              // Offset:  544 Size:    16 [unused]
//   float4 postFxConst19;              // Offset:  560 Size:    16 [unused]
//   float4 postFxConst20;              // Offset:  576 Size:    16 [unused]
//   float4 postFxConst21;              // Offset:  592 Size:    16 [unused]
//   float4 postFxConst22;              // Offset:  608 Size:    16 [unused]
//   float4 postFxConst23;              // Offset:  624 Size:    16 [unused]
//   float4 postFxConst24;              // Offset:  640 Size:    16 [unused]
//   float4 postFxConst25;              // Offset:  656 Size:    16 [unused]
//   float4 postFxConst26;              // Offset:  672 Size:    16 [unused]
//   float4 postFxConst27;              // Offset:  688 Size:    16 [unused]
//   float4 postFxConst28;              // Offset:  704 Size:    16 [unused]
//   float4 postFxConst29;              // Offset:  720 Size:    16 [unused]
//   float4 postFxConst30;              // Offset:  736 Size:    16 [unused]
//   float4 postFxConst31;              // Offset:  752 Size:    16 [unused]
//   float4 postFxConst32;              // Offset:  768 Size:    16 [unused]
//   float4 postFxConst33;              // Offset:  784 Size:    16 [unused]
//   float4 postFxConst34;              // Offset:  800 Size:    16 [unused]
//   float4 postFxConst35;              // Offset:  816 Size:    16 [unused]
//   float4 postFxConst36;              // Offset:  832 Size:    16 [unused]
//   float4 postFxConst37;              // Offset:  848 Size:    16 [unused]
//   float4 postFxConst38;              // Offset:  864 Size:    16 [unused]
//   float4 postFxConst39;              // Offset:  880 Size:    16 [unused]
//   float4 postFxConst40;              // Offset:  896 Size:    16 [unused]
//   float4 postFxConst41;              // Offset:  912 Size:    16 [unused]
//   float4 postFxConst42;              // Offset:  928 Size:    16 [unused]
//   float4 postFxConst43;              // Offset:  944 Size:    16 [unused]
//   float4 postFxConst44;              // Offset:  960 Size:    16 [unused]
//   float4 postFxConst45;              // Offset:  976 Size:    16 [unused]
//   float4 postFxConst46;              // Offset:  992 Size:    16 [unused]
//   float4 postFxConst47;              // Offset: 1008 Size:    16 [unused]
//   float4 postFxConst48;              // Offset: 1024 Size:    16 [unused]
//   float4 postFxConst49;              // Offset: 1040 Size:    16 [unused]
//   float4 postFxConst50;              // Offset: 1056 Size:    16 [unused]
//   float4 postFxConst51;              // Offset: 1072 Size:    16 [unused]
//   float4 postFxConst52;              // Offset: 1088 Size:    16 [unused]
//   float4 postFxConst53;              // Offset: 1104 Size:    16 [unused]
//   float4 postFxConst54;              // Offset: 1120 Size:    16 [unused]
//   float4 postFxConst55;              // Offset: 1136 Size:    16 [unused]
//   float4 postFxConst56;              // Offset: 1152 Size:    16 [unused]
//   float4 postFxConst57;              // Offset: 1168 Size:    16 [unused]
//   float4 postFxConst58;              // Offset: 1184 Size:    16 [unused]
//   float4 postFxConst59;              // Offset: 1200 Size:    16 [unused]
//   float4 postFxConst60;              // Offset: 1216 Size:    16 [unused]
//   float4 postFxConst61;              // Offset: 1232 Size:    16 [unused]
//   float4 postFxConst62;              // Offset: 1248 Size:    16 [unused]
//   float4 postFxConst63;              // Offset: 1264 Size:    16 [unused]
//   float4 postFxBloom00;              // Offset: 1280 Size:    16 [unused]
//   float4 postFxBloom01;              // Offset: 1296 Size:    16 [unused]
//   float4 postFxBloom02;              // Offset: 1312 Size:    16 [unused]
//   float4 postFxBloom03;              // Offset: 1328 Size:    16 [unused]
//   float4 postFxBloom04;              // Offset: 1344 Size:    16 [unused]
//   float4 postFxBloom05;              // Offset: 1360 Size:    16 [unused]
//   float4 postFxBloom06;              // Offset: 1376 Size:    16 [unused]
//   float4 postFxBloom07;              // Offset: 1392 Size:    16 [unused]
//   float4 postFxBloom08;              // Offset: 1408 Size:    16 [unused]
//   float4 postFxBloom09;              // Offset: 1424 Size:    16 [unused]
//   float4 postFxBloom10;              // Offset: 1440 Size:    16 [unused]
//   float4 postFxBloom11;              // Offset: 1456 Size:    16 [unused]
//   float4 postFxBloom12;              // Offset: 1472 Size:    16 [unused]
//   float4 postFxBloom13;              // Offset: 1488 Size:    16 [unused]
//   float4 postFxBloom14;              // Offset: 1504 Size:    16 [unused]
//   float4 postFxBloom15;              // Offset: 1520 Size:    16 [unused]
//   float4 postFxBloom16;              // Offset: 1536 Size:    16 [unused]
//   float4 postFxBloom17;              // Offset: 1552 Size:    16 [unused]
//   float4 postFxBloom18;              // Offset: 1568 Size:    16 [unused]
//   float4 postFxBloom19;              // Offset: 1584 Size:    16 [unused]
//   float4 postFxBloom20;              // Offset: 1600 Size:    16 [unused]
//   float4 postFxBloom21;              // Offset: 1616 Size:    16 [unused]
//   float4 postFxBloom22;              // Offset: 1632 Size:    16 [unused]
//   float4 postFxBloom23;              // Offset: 1648 Size:    16 [unused]
//   float4 postFxBloom24;              // Offset: 1664 Size:    16 [unused]
//   float4 postFxBloom25;              // Offset: 1680 Size:    16 [unused]
//   float4 filterTap[8];               // Offset: 1696 Size:   128 [unused]
//   float4 postfxViewMatrix0;          // Offset: 1824 Size:    16 [unused]
//   float4 postfxViewMatrix1;          // Offset: 1840 Size:    16 [unused]
//   float4 postfxViewMatrix2;          // Offset: 1856 Size:    16 [unused]
//   float4 postfxViewMatrix3;          // Offset: 1872 Size:    16 [unused]
//   float4 postfxProjMatrix0;          // Offset: 1888 Size:    16 [unused]
//   float4 postfxProjMatrix1;          // Offset: 1904 Size:    16 [unused]
//   float4 postfxProjMatrix2;          // Offset: 1920 Size:    16 [unused]
//   float4 postfxProjMatrix3;          // Offset: 1936 Size:    16 [unused]
//   float4 postfxViewProjMatrix0;      // Offset: 1952 Size:    16 [unused]
//   float4 postfxViewProjMatrix1;      // Offset: 1968 Size:    16 [unused]
//   float4 postfxViewProjMatrix2;      // Offset: 1984 Size:    16 [unused]
//   float4 postfxViewProjMatrix3;      // Offset: 2000 Size:    16 [unused]
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16 [unused]
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16 [unused]
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4 [unused]
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224 [unused]
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256 [unused]
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48 [unused]
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4 [unused]
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for gLitFogVolumes
// {
//
//   struct CoreLitFogConstantsPack
//   {
//       
//       uint4 data[13];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   208
//
// }
//
// Resource bind info for gCullConstants
// {
//
//   struct CoreCullConstantsPack
//   {
//       
//       uint4 data[5];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    80
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// downsampledDepth                  texture   float          2d             t0      1 
// gLitFogVolumes                    texture  struct         r/o             t1      1 
// visibleVolumetricSpotLights       texture    uint     2darray             t3      1 
// visibleVolumetricOmniLights       texture    uint     2darray             t4      1 
// downSampledDepthUV                texture    uint          2d             t5      1 
// adaptiveTransparencyDepth         texture  float4          2d             t7      1 
// adaptiveTransparencyTrans         texture  float4          2d             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// oitPixelAlpha                     texture   float          2d            t10      1 
// gCullConstants                    texture  struct         r/o            t11      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// PostFxCBuffer                     cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB8[8], immediateIndexed
dcl_constantbuffer CB1[45], immediateIndexed
dcl_constantbuffer CB2[51], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_structured t1, 208
dcl_resource_texture2darray (uint,uint,uint,uint) t3
dcl_resource_texture2darray (uint,uint,uint,uint) t4
dcl_resource_texture2d (uint,uint,uint,uint) t5
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_structured t11, 80
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t20
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 37
ftou r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyww, t0.xyzw
lt r1.y, r1.x, l(0.000000)
if_nz r1.y
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
div r1.yz, v0.xxyx, cb1[44].xxyx
mad r1.yz, r1.yyzy, l(0.000000, 2.000000, -2.000000, 0.000000), l(0.000000, -1.000000, 1.000000, 0.000000)
mul r2.xy, r1.yzyy, cb8[4].xyxx
mov r2.z, l(1.000000)
mul r1.xyz, r1.xxxx, r2.xyzx
mul r2.xyz, r1.yyyy, cb8[1].xyzx
mad r1.xyw, r1.xxxx, cb8[0].xyxz, r2.xyxz
mad r1.xyz, r1.zzzz, cb8[2].xyzx, r1.xywx
add r1.xyz, r1.xyzx, cb8[3].xyzx
add r1.xyz, r1.xyzx, -cb8[5].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r2.x, r1.w
max r2.y, cb1[41].x, l(1.000000)
min r2.x, r2.x, l(8000.000000)
ge r2.z, r2.y, r2.x
if_nz r2.z
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
ld_indexable(texture2d)(uint,uint,uint,uint) r0.z, r0.xyzw, t5.yzxw
ushr r0.w, r0.z, l(2)
and r0.z, r0.z, l(3)
round_ni r2.zw, v0.xxxy
utof r3.xy, r0.wzww
mad r0.zw, r2.zzzw, cb8[7].xxxx, r3.xxxy
ftou r3.xy, r0.zwzz
rsq r0.z, r1.w
mul r1.xyz, r0.zzzz, r1.xyzx
and r0.z, cb8[4].z, l(0x0000ffff)
ushr r0.w, cb8[4].w, l(16)
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.xyww, t7.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r3.xyww, t8.zwxy
ld_indexable(texture2d)(float,float,float,float) r1.w, r3.xyzw, t10.yzwx
mul r3.xyzw, r4.xyzw, l(2000.000000, 2000.000000, 2000.000000, 2000.000000)
lt r1.w, l(0.900000), r1.w
movc r2.zw, r1.wwww, l(0,0,2000.000000,2000.000000), r3.xxxy
movc r3.xy, r1.wwww, l(1.000000,1.000000,0,0), r5.xyxx
mov r5.xy, r3.zwzz
movc r4.xyzw, r1.wwww, l(2000.000000,2000.000000,1.000000,1.000000), r5.xyzw
utof r3.zw, r0.xxxy
mul r3.zw, r3.zzzw, cb8[7].xxxx
mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 0.015625, 0.015625)
ftou r5.xy, r3.zwzz
ushr r6.xyzw, cb2[50].xyzw, l(5, 5, 5, 5)
utof r0.w, r0.w
mov r5.w, l(0)
mov r7.xy, r5.xyxx
mov r7.w, l(0)
mov r8.w, l(1.000000)
mov r9.w, l(1.000000)
mov r10.y, l(0)
mov r11.z, l(1.000000)
mov r12.z, l(1.000000)
mov r13.xyzw, l(0,0,0,0)
loop 
  uge r1.w, r13.w, r0.z
  breakc_nz r1.w
  ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r14.xyzw, r13.w, l(132), t1.xyzw
  and r1.w, r14.w, l(2)
  if_nz r1.w
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r15.xyzw, r13.w, l(24), t1.xyzw
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r16.xyzw, r13.w, l(52), t1.xyzw
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r1.w, r13.w, l(68), t1.xxxx
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r17.xyzw, r13.w, l(84), t1.xyzw
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r3.z, r13.w, l(100), t1.xxxx
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r18.xyzw, r13.w, l(116), t1.xyzw
    dp3 r3.w, r1.xyzx, r15.xyzx
    max r10.z, |r3.w|, l(0.00000010)
    div r10.z, l(1.000000, 1.000000, 1.000000, 1.000000), r10.z
    mul r10.w, r10.z, r15.w
    mul r10.z, r10.z, r16.x
    lt r3.w, l(0.000000), -r3.w
    max r15.x, r10.w, l(-131072.000000)
    min r15.y, -r10.z, l(131072.000000)
    min r19.y, -r10.w, l(131072.000000)
    max r19.x, r10.z, l(-131072.000000)
    movc r10.zw, r3.wwww, r15.xxxy, r19.xxxy
    dp3 r3.w, r1.xyzx, r16.yzwy
    max r11.w, |r3.w|, l(0.00000010)
    div r11.w, l(1.000000, 1.000000, 1.000000, 1.000000), r11.w
    mul r1.w, r1.w, r11.w
    mul r11.w, r11.w, r17.x
    lt r3.w, l(0.000000), -r3.w
    max r15.x, r10.z, r1.w
    min r15.y, r10.w, -r11.w
    min r16.y, r10.w, -r1.w
    max r16.x, r10.z, r11.w
    movc r10.zw, r3.wwww, r15.xxxy, r16.xxxy
    dp3 r1.w, r1.xyzx, r17.yzwy
    max r3.w, |r1.w|, l(0.00000010)
    div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
    mul r3.z, r3.w, r3.z
    mul r3.w, r3.w, r18.x
    lt r1.w, l(0.000000), -r1.w
    max r15.y, r10.z, r3.z
    min r15.z, r10.w, -r3.w
    min r16.z, r10.w, -r3.z
    max r16.y, r10.z, r3.w
    movc r15.yz, r1.wwww, r15.yyzy, r16.yyzy
    lt r1.w, r15.y, r15.z
    if_nz r1.w
      max r15.x, r15.y, l(0.000000)
      max r3.zw, r2.yyyy, r15.xxxz
      min r3.zw, r2.xxxx, r3.zzzw
      add r1.w, -r3.z, r3.w
      ge r1.w, r1.w, l(1.000000)
      if_nz r1.w
        ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r1.w, r13.w, l(200), t1.xxxx
        max r3.z, r14.x, r3.z
        add r3.w, -r3.z, r3.w
        min r1.w, r1.w, r3.w
        ge r3.w, r1.w, l(1.000000)
        if_nz r3.w
          ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r15.xyz, r13.w, l(148), t1.xyzx
          ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r3.w, r13.w, l(184), t1.xxxx
          add r15.xyz, r14.zzzz, r15.xyzx
          add r1.w, r1.w, r3.z
          add r3.z, r14.x, r3.z
          min r3.z, r1.w, r3.z
          mul r10.z, r18.y, l(100.000000)
          mad r10.w, -r14.y, r14.y, l(1.000000)
          mul r10.w, r10.w, l(0.07957747)
          mov r16.xyz, l(0,0,0,0)
          mov r5.z, r6.x
          loop 
            ult r11.w, r6.y, r5.z
            breakc_nz r11.w
            ld_indexable(texture2darray)(uint,uint,uint,uint) r11.w, r5.xyzw, t3.yzwx
            ishl r12.w, r5.z, l(5)
            mov r17.xyz, r16.xyzx
            mov r17.w, r11.w
            loop 
              breakc_z r17.w
              firstbit_lo r14.x, r17.w
              ishl r14.w, l(1), r14.x
              and r15.w, r14.w, r17.w
              if_nz r15.w
                xor r17.w, r14.w, r17.w
                iadd r10.x, r12.w, r14.x
                ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r19.xyz, r10.x, l(12), t11.xyzx
                dp3 r14.x, r19.xyzx, r19.xyzx
                ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r19.xyz, r10.x, l(0), t11.xyzx
                dp3 r14.w, -r19.xyzx, r1.xyzx
                dp3 r15.w, -r19.xyzx, -r19.xyzx
                add r14.x, -r14.x, r15.w
                mad r14.x, r14.w, r14.w, -r14.x
                lt r15.w, l(0.000000), r14.x
                sqrt r14.x, r14.x
                add r16.w, -r14.x, -r14.w
                add r14.x, r14.x, -r14.w
                min r14.w, r14.x, r16.w
                max r14.x, r14.x, r16.w
                max r14.xw, r3.zzzz, r14.xxxw
                min r14.xw, r1.wwww, r14.xxxw
                add r16.w, r14.w, l(0.000001)
                lt r16.w, r16.w, r14.x
                and r15.w, r15.w, r16.w
                if_z r15.w
                  mov r19.xyz, l(0,0,0,0)
                endif 
                if_nz r15.w
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r20.xyzw, r10.x, l(68), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r21.xyzw, r10.x, l(84), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r22.xyzw, r10.x, l(116), t12.xyzw
                  mul r8.xyz, r1.xyzx, r14.wwww
                  mul r9.xyz, r1.xyzx, r14.xxxx
                  dp4 r23.x, r20.xyzw, r8.xyzw
                  dp4 r23.y, r21.xyzw, r8.xyzw
                  dp4 r23.w, r22.xyzw, r8.xyzw
                  dp4 r20.x, r20.xyzw, r9.xyzw
                  dp4 r20.y, r21.xyzw, r9.xyzw
                  dp4 r20.w, r22.xyzw, r9.xyzw
                  add r21.xy, r23.xyxx, r23.wwww
                  add r21.zw, -r23.xxxy, r23.wwww
                  add r22.xy, r20.xyxx, r20.wwww
                  add r22.zw, -r20.xxxy, r20.wwww
                  lt r24.xy, r21.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
                  add r24.zw, r21.xxxy, -r22.xxxy
                  div r24.zw, r21.xxxy, r24.zzzw
                  max r15.w, r24.z, l(0.000000)
                  and r15.w, r15.w, r24.x
                  lt r24.xz, r21.zzwz, l(0.000000, 0.000000, 0.000000, 0.000000)
                  add r25.xy, r21.zwzz, -r22.zwzz
                  div r25.xy, r21.zwzz, r25.xyxx
                  max r16.w, r15.w, r25.x
                  movc r15.w, r24.x, r16.w, r15.w
                  max r16.w, r24.w, r15.w
                  movc r15.w, r24.y, r16.w, r15.w
                  max r16.w, r25.y, r15.w
                  movc r15.w, r24.z, r16.w, r15.w
                  lt r24.xy, r22.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
                  add r21.xy, -r21.xyxx, r22.xyxx
                  div r21.xy, r22.xyxx, r21.xyxx
                  max r16.w, r21.x, l(0.000000)
                  and r16.w, r16.w, r24.x
                  lt r22.xy, r22.zwzz, l(0.000000, 0.000000, 0.000000, 0.000000)
                  add r21.xz, -r21.zzwz, r22.zzwz
                  div r21.xz, r22.zzwz, r21.xxzx
                  max r18.x, r16.w, r21.x
                  movc r16.w, r22.x, r18.x, r16.w
                  max r18.x, r21.y, r16.w
                  movc r16.w, r24.y, r18.x, r16.w
                  max r18.x, r21.z, r16.w
                  movc r16.w, r22.y, r18.x, r16.w
                  min r15.w, r15.w, l(1.000000)
                  min r16.w, r16.w, l(1.000000)
                  add r16.w, -r16.w, l(1.000000)
                  add r18.x, r15.w, l(0.000001)
                  lt r18.x, r18.x, r16.w
                  if_nz r18.x
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r21.xyzw, r10.x, l(0), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r22.xy, r10.x, l(16), t12.xyxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r24.xyzw, r10.x, l(28), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r25.xy, r10.x, l(44), t12.xyxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r26.xyzw, r10.x, l(100), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r27.xyzw, r10.x, l(132), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r28.xyzw, r10.x, l(172), t12.yzwx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r29.xyzw, r10.x, l(188), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r30.xyzw, r10.x, l(204), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r31.xyzw, r10.x, l(220), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r18.x, r10.x, l(236), t12.xxxx
                    iadd r25.zw, r0.xxxy, r10.xxxy
                    utof r25.zw, r25.zzzw
                    dp2 r10.x, r25.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
                    frc r10.x, r10.x
                    mul r10.x, r10.x, l(52.982918)
                    frc r10.x, r10.x
                    ubfe r19.w, l(3), l(27), r24.x
                    dp4 r23.z, r26.xyzw, r8.xyzw
                    dp4 r20.z, r26.xyzw, r9.xyzw
                    add r8.x, -r14.w, r14.x
                    mad r8.y, r15.w, r8.x, r14.w
                    add r8.y, r8.y, l(-1000.000000)
                    mul_sat r8.y, r8.y, l(0.000500)
                    add r8.y, -r8.y, l(1.000000)
                    mul r8.y, r0.w, r8.y
                    round_ni r8.y, r8.y
                    max r8.y, r8.y, l(2.000000)
                    ftou r8.y, r8.y
                    add r8.z, -r15.w, r16.w
                    utof r9.x, r8.y
                    div r8.z, r8.z, r9.x
                    mad r9.y, -r8.z, l(0.500000), r16.w
                    mad r8.z, r8.z, l(0.500000), r15.w
                    add r9.z, -r8.z, r9.y
                    div r9.z, r9.z, r9.x
                    add r10.x, r10.x, l(-0.500000)
                    mul r9.z, r9.z, r10.x
                    mad r8.z, r9.z, l(0.750000), r8.z
                    mad r9.y, r9.z, l(0.750000), r9.y
                    mad r9.z, r8.z, r8.x, r14.w
                    mad r8.x, r9.y, r8.x, r14.w
                    div r9.x, l(1.000000, 1.000000, 1.000000, 1.000000), r9.x
                    add r20.xyzw, -r23.xyzw, r20.xyzw
                    mad r26.xyzw, r20.xyzw, r9.yyyy, r23.xyzw
                    mad r20.xyzw, r20.xyzw, r8.zzzz, r23.xyzw
                    div r20.xyz, r20.xyzx, r20.wwww
                    div r26.xyz, r26.xyzx, r26.wwww
                    and r8.z, r24.x, l(0x0000ffff)
                    add r8.x, -r9.z, r8.x
                    mul r9.y, r9.x, r8.x
                    add r23.xyzw, -r20.xyzw, r26.xyzw
                    mad_sat r14.xw, r20.xxxy, l(0.500000, 0.000000, 0.000000, -0.500000), l(0.500000, 0.000000, 0.000000, 0.500000)
                    mad r26.xy, r14.xwxx, r27.xzxx, r27.ywyy
                    utof r26.z, r8.z
                    ine r8.z, r19.w, l(1)
                    if_nz r8.z
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.x, r26.xyzx, t9.xxxx, s13, r20.z
                    else 
                      mov r10.x, l(1.000000)
                    endif 
                    ge r14.xw, r2.zzzw, r9.zzzz
                    ge r25.zw, r4.xxxy, r9.zzzz
                    movc r15.w, r25.w, r3.x, r3.y
                    movc r15.w, r25.z, r4.w, r15.w
                    movc r14.w, r14.w, r4.z, r15.w
                    movc r14.x, r14.x, l(1.000000), r14.w
                    mul r10.x, r10.x, r14.x
                    lt r14.x, l(0.000100), r10.x
                    if_nz r14.x
                      and r14.x, r18.x, l(255)
                      ushr r14.w, r24.x, l(31)
                      ine r14.w, r14.w, l(0)
                      ult r15.w, l(0), r14.x
                      and r14.w, r14.w, r15.w
                      if_nz r14.w
                        mov r11.xy, r20.xyxx
                        dp3 r14.w, r30.yzwy, r11.xyzx
                        dp3 r11.x, r31.xyzx, r11.xyzx
                        frc r32.x, r14.w
                        frc r32.y, r11.x
                        iadd r11.x, r14.x, l(-1)
                        utof r32.z, r11.x
                        sample_l_indexable(texture2darray)(float,float,float,float) r32.xyz, r32.xyzx, t20.xyzw, s2, l(0.000000)
                      else 
                        mov r32.xyz, l(1.000000,1.000000,1.000000,0)
                      endif 
                      mad r11.x, r9.z, r1.z, r18.w
                      mul r11.x, r11.x, -r18.z
                      exp r11.x, r11.x
                      min r11.x, r11.x, l(1.000000)
                      mul r11.x, r11.x, r18.y
                      min r11.x, r10.z, r11.x
                      mad r33.xyz, -r9.zzzz, r1.xyzx, r21.xyzx
                      mul r11.y, r25.y, r25.y
                      dp3 r14.x, r33.xyzx, r33.xyzx
                      div r11.y, r11.y, r14.x
                      min r11.y, r11.y, l(1.000000)
                      mad_sat r14.w, r20.w, r24.y, r24.z
                      mad_sat r15.w, r20.w, r24.w, r25.x
                      mul r16.w, r14.w, r14.w
                      mad r14.w, r14.w, l(-2.000000), l(3.000000)
                      mul r14.w, r14.w, r16.w
                      mul r11.y, r11.y, r14.w
                      mul r14.w, r15.w, r15.w
                      mad r15.w, r15.w, l(-2.000000), l(3.000000)
                      mul r14.w, r14.w, r15.w
                      mul r11.y, r11.y, r14.w
                      lt r14.w, r28.w, l(0.00048828)
                      if_nz r14.w
                        mov r34.x, r29.w
                        mov r34.y, r30.x
                        mad_sat r25.zw, |r20.xxxy|, r29.yyyz, r34.xxxy
                        mul r34.xy, r25.zwzz, r25.zwzz
                        mad r25.zw, r25.zzzw, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
                        mul r25.zw, r25.zzzw, r34.xxxy
                        mul r14.w, r25.w, r25.z
                      else 
                        mov r34.xyz, r28.xyzx
                        mov r34.w, r29.x
                        mul_sat r34.xyzw, |r20.yyxx|, r34.xyzw
                        log r34.xyzw, r34.xyzw
                        mul r34.xyzw, r29.wwww, r34.xyzw
                        exp r34.xyzw, r34.xyzw
                        add r25.zw, r34.zzzw, r34.xxxy
                        log r25.zw, r25.zzzw
                        mul r25.zw, r25.zzzw, r30.xxxx
                        exp r25.zw, r25.zzzw
                        mul r15.w, r25.z, r29.y
                        mad r16.w, r29.z, r25.w, l(-1.000000)
                        mad r15.w, r29.z, r25.w, -r15.w
                        div_sat r15.w, r16.w, r15.w
                        mul r16.w, r15.w, r15.w
                        mad r15.w, r15.w, l(-2.000000), l(3.000000)
                        mul r14.w, r15.w, r16.w
                      endif 
                      mul r11.y, r11.y, r14.w
                      mul r10.x, r10.x, r11.y
                      mul r34.xyz, r11.xxxx, r15.xyzx
                      rsq r11.y, r14.x
                      mul r33.xyz, r11.yyyy, r33.xyzx
                      dp3 r11.y, -r1.xyzx, r33.xyzx
                      max r11.y, r11.y, l(-1.000000)
                      min r11.y, r11.y, l(1.000000)
                      mad r11.y, r14.y, r11.y, l(1.000000)
                      max r11.y, r11.y, l(0.000001)
                      min r11.y, r11.y, l(2.000000)
                      mul r11.y, r11.y, r11.y
                      rcp r11.y, r11.y
                      mul r11.y, r10.w, r11.y
                      max r11.y, r11.y, l(0.000000)
                      min r11.y, r11.y, l(10000.000000)
                      sqrt r14.x, r14.x
                      add r14.x, r9.z, r14.x
                      mul r33.xyz, -r14.xxxx, r34.xyzx
                      exp r33.xyz, r33.xyzx
                      min r33.xyz, r33.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                      mul r33.xyz, r11.xxxx, r33.xyzx
                      mul r33.xyz, r11.yyyy, r33.xyzx
                      mul r33.xyz, r10.xxxx, r33.xyzx
                      mul r32.xyz, r32.xyzx, r33.xyzx
                    else 
                      mov r32.xyz, l(0,0,0,0)
                    endif 
                    and r10.x, r18.x, l(255)
                    ushr r11.x, r24.x, l(31)
                    ine r11.x, r11.x, l(0)
                    ult r11.y, l(0), r10.x
                    and r11.x, r11.y, r11.x
                    iadd r10.x, r10.x, l(-1)
                    utof r33.z, r10.x
                    mul r10.x, r25.y, r25.y
                    lt r11.y, r28.w, l(0.00048828)
                    mov r34.x, r29.w
                    mov r34.y, r30.x
                    mov r28.w, r29.x
                    mov r35.xyzw, r20.xyzw
                    mov r25.yzw, r32.xxyz
                    mov r14.x, r9.z
                    mov r14.w, l(0)
                    loop 
                      uge r15.w, r14.w, r8.y
                      breakc_nz r15.w
                      mad r14.x, r8.x, r9.x, r14.x
                      mad r35.xyzw, r23.xyzw, r9.xxxx, r35.xyzw
                      if_nz r8.z
                        mad_sat r34.zw, r35.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
                        mad r26.xy, r34.zwzz, r27.xzxx, r27.ywyy
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r26.xyzx, t9.xxxx, s13, r35.z
                      else 
                        mov r15.w, l(1.000000)
                      endif 
                      ge r26.xy, r2.zwzz, r14.xxxx
                      ge r34.zw, r4.xxxy, r14.xxxx
                      movc r16.w, r34.w, r3.x, r3.y
                      movc r16.w, r34.z, r4.w, r16.w
                      movc r16.w, r26.y, r4.z, r16.w
                      movc r16.w, r26.x, l(1.000000), r16.w
                      mul r15.w, r15.w, r16.w
                      lt r16.w, l(0.000100), r15.w
                      if_nz r16.w
                        if_nz r11.x
                          mov r12.xy, r35.xyxx
                          dp3 r16.w, r30.yzwy, r12.xyzx
                          dp3 r12.x, r31.xyzx, r12.xyzx
                          frc r33.x, r16.w
                          frc r33.y, r12.x
                          sample_l_indexable(texture2darray)(float,float,float,float) r26.xyw, r33.xyzx, t20.xywz, s2, l(0.000000)
                        else 
                          mov r26.xyw, l(1.000000,1.000000,0,1.000000)
                        endif 
                        mad r12.x, r14.x, r1.z, r18.w
                        mul r12.x, r12.x, -r18.z
                        exp r12.x, r12.x
                        min r12.x, r12.x, l(1.000000)
                        mul r12.x, r12.x, r18.y
                        min r12.x, r10.z, r12.x
                        mad r33.xyw, -r14.xxxx, r1.xyxz, r21.xyxz
                        dp3 r12.y, r33.xywx, r33.xywx
                        div r16.w, r10.x, r12.y
                        min r16.w, r16.w, l(1.000000)
                        mad_sat r18.x, r35.w, r24.y, r24.z
                        mad_sat r19.w, r35.w, r24.w, r25.x
                        mul r22.w, r18.x, r18.x
                        mad r18.x, r18.x, l(-2.000000), l(3.000000)
                        mul r18.x, r18.x, r22.w
                        mul r16.w, r16.w, r18.x
                        mul r18.x, r19.w, r19.w
                        mad r19.w, r19.w, l(-2.000000), l(3.000000)
                        mul r18.x, r18.x, r19.w
                        mul r16.w, r16.w, r18.x
                        if_nz r11.y
                          mad_sat r34.zw, |r35.xxxy|, r29.yyyz, r34.xxxy
                          mul r36.xy, r34.zwzz, r34.zwzz
                          mad r34.zw, r34.zzzw, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
                          mul r34.zw, r34.zzzw, r36.xxxy
                          mul r18.x, r34.w, r34.z
                        else 
                          mul_sat r36.xyzw, r28.xyzw, |r35.yyxx|
                          log r36.xyzw, r36.xyzw
                          mul r36.xyzw, r29.wwww, r36.xyzw
                          exp r36.xyzw, r36.xyzw
                          add r34.zw, r36.zzzw, r36.xxxy
                          log r34.zw, r34.zzzw
                          mul r34.zw, r30.xxxx, r34.zzzw
                          exp r34.zw, r34.zzzw
                          mul r19.w, r29.y, r34.z
                          mad r22.w, r29.z, r34.w, l(-1.000000)
                          mad r19.w, r29.z, r34.w, -r19.w
                          div_sat r19.w, r22.w, r19.w
                          mul r22.w, r19.w, r19.w
                          mad r19.w, r19.w, l(-2.000000), l(3.000000)
                          mul r18.x, r19.w, r22.w
                        endif 
                        mul r16.w, r16.w, r18.x
                        mul r15.w, r15.w, r16.w
                        mul r36.xyz, r12.xxxx, r15.xyzx
                        rsq r16.w, r12.y
                        mul r33.xyw, r16.wwww, r33.xyxw
                        dp3 r16.w, -r1.xyzx, r33.xywx
                        max r16.w, r16.w, l(-1.000000)
                        min r16.w, r16.w, l(1.000000)
                        mad r16.w, r14.y, r16.w, l(1.000000)
                        max r16.w, r16.w, l(0.000001)
                        min r16.w, r16.w, l(2.000000)
                        mul r16.w, r16.w, r16.w
                        rcp r16.w, r16.w
                        mul r16.w, r10.w, r16.w
                        max r16.w, r16.w, l(0.000000)
                        min r16.w, r16.w, l(10000.000000)
                        sqrt r12.y, r12.y
                        add r12.y, r14.x, r12.y
                        mul r33.xyw, -r12.yyyy, r36.xyxz
                        exp r33.xyw, r33.xyxw
                        min r33.xyw, r33.xyxw, l(1.000000, 1.000000, 0.000000, 1.000000)
                        mul r33.xyw, r12.xxxx, r33.xyxw
                        mul r33.xyw, r16.wwww, r33.xyxw
                        mul r33.xyw, r15.wwww, r33.xyxw
                        mul r26.xyw, r26.xyxw, r33.xyxw
                      else 
                        mov r26.xyw, l(0,0,0,0)
                      endif 
                      add r25.yzw, r25.yyzw, r26.xxyw
                      iadd r14.w, r14.w, l(1)
                    endloop 
                    mul r8.x, r3.w, r9.y
                    mul r8.x, r14.z, r8.x
                    mul r8.xyz, r8.xxxx, r25.yzwy
                    mov r22.z, r21.w
                    mul r9.xyz, r22.zxyz, r31.wwww
                    mul r19.xyz, r8.xyzx, r9.xyzx
                  else 
                    mov r19.xyz, l(0,0,0,0)
                  endif 
                endif 
                add r17.xyz, r17.xyzx, r19.xyzx
              endif 
            endloop 
            mov r16.xyz, r17.xyzx
            iadd r5.z, r5.z, l(1)
          endloop 
          add r8.xyz, r13.xyzx, r16.xyzx
          mov r9.xyz, l(0,0,0,0)
          mov r7.z, r6.z
          loop 
            ult r5.z, r6.w, r7.z
            breakc_nz r5.z
            ld_indexable(texture2darray)(uint,uint,uint,uint) r5.z, r7.xyzw, t4.yzxw
            ishl r10.x, r7.z, l(5)
            mov r19.xyz, r9.xyzx
            mov r19.w, r5.z
            loop 
              breakc_z r19.w
              firstbit_lo r11.x, r19.w
              ishl r11.y, l(1), r11.x
              and r11.w, r11.y, r19.w
              if_nz r11.w
                xor r19.w, r11.y, r19.w
                iadd r11.x, r10.x, r11.x
                ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r12.xyw, r11.x, l(12), t11.xyxz
                max r11.y, r12.w, r12.y
                max r11.y, r11.y, r12.x
                ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r12.xyw, r11.x, l(0), t11.xyxz
                dp3 r11.w, -r12.xywx, r1.xyzx
                dp3 r12.x, -r12.xywx, -r12.xywx
                mad r11.y, -r11.y, r11.y, r12.x
                mad r11.y, r11.w, r11.w, -r11.y
                lt r12.x, l(0.000000), r11.y
                sqrt r11.y, r11.y
                add r12.y, -r11.y, -r11.w
                add r11.y, r11.y, -r11.w
                min r11.w, r11.y, r12.y
                max r11.y, r11.y, r12.y
                max r11.yw, r3.zzzz, r11.yyyw
                min r11.yw, r1.wwww, r11.yyyw
                add r12.y, r11.w, l(0.000001)
                lt r12.y, r12.y, r11.y
                and r12.x, r12.y, r12.x
                if_z r12.x
                  mov r20.xyz, l(0,0,0,0)
                endif 
                if_nz r12.x
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r21.xyzw, r11.x, l(0), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r22.xy, r11.x, l(16), t12.xyxx
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r23.xyzw, r11.x, l(32), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.x, r11.x, l(48), t12.xxxx
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.yw, r11.x, l(104), t12.xxxy
                  and r11.x, r12.w, l(31)
                  add r12.w, r11.w, l(-1000.000000)
                  mul_sat r12.w, r12.w, l(0.000500)
                  add r12.w, -r12.w, l(1.000000)
                  utof r11.x, r11.x
                  mul r11.x, r12.w, r11.x
                  round_ni r11.x, r11.x
                  max r11.x, r11.x, l(2.000000)
                  ftou r11.x, r11.x
                  utof r12.w, r11.x
                  div r12.w, l(1.000000, 1.000000, 1.000000, 1.000000), r12.w
                  add r14.x, -r11.w, r11.y
                  mul r14.x, r12.w, r14.x
                  mad r11.y, -r14.x, l(0.500000), r11.y
                  mad r11.w, r14.x, l(0.500000), r11.w
                  add r11.y, -r11.w, r11.y
                  mul r14.x, r12.w, r11.y
                  mul r12.x, r12.x, r12.x
                  mov r24.xyz, l(0,0,0,0)
                  mov r14.w, r11.w
                  mov r15.w, l(0)
                  loop 
                    uge r16.w, r15.w, r11.x
                    breakc_nz r16.w
                    mad r14.w, r11.y, r12.w, r14.w
                    mad r26.xyz, -r1.xyzx, r14.wwww, r21.xyzx
                    dp3 r16.w, r26.xyzx, r26.xyzx
                    sqrt r17.w, r16.w
                    div r18.x, r12.x, r16.w
                    min r18.x, r18.x, l(1.000000)
                    mad_sat r27.xy, r17.wwww, r23.xzxx, r23.ywyy
                    mul r27.zw, r27.xxxy, r27.xxxy
                    mad r27.xy, r27.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
                    mul r27.xy, r27.xyxx, r27.zwzz
                    mul r18.x, r18.x, r27.x
                    mul r18.x, r27.y, r18.x
                    lt r20.w, l(0.000000), r18.x
                    if_nz r20.w
                      mad r20.w, r1.z, r14.w, r18.w
                      mul r20.w, -r18.z, r20.w
                      exp r20.w, r20.w
                      min r20.w, r20.w, l(1.000000)
                      mul r20.w, r18.y, r20.w
                      min r20.w, r10.z, r20.w
                      ge r27.xy, r2.zwzz, r14.wwww
                      ge r27.zw, r4.xxxy, r14.wwww
                      movc r22.w, r27.w, r3.x, r3.y
                      movc r22.w, r27.z, r4.w, r22.w
                      movc r22.w, r27.y, r4.z, r22.w
                      movc r22.w, r27.x, l(1.000000), r22.w
                      mul r18.x, r18.x, r22.w
                      mul r27.xyz, r15.xyzx, r20.wwww
                      rsq r16.w, r16.w
                      mul r26.xyz, r16.wwww, r26.xyzx
                      dp3 r16.w, -r1.xyzx, r26.xyzx
                      max r16.w, r16.w, l(-1.000000)
                      min r16.w, r16.w, l(1.000000)
                      mad r16.w, r14.y, r16.w, l(1.000000)
                      max r16.w, r16.w, l(0.000001)
                      min r16.w, r16.w, l(2.000000)
                      mul r16.w, r16.w, r16.w
                      rcp r16.w, r16.w
                      mul r16.w, r10.w, r16.w
                      max r16.w, r16.w, l(0.000000)
                      min r16.w, r16.w, l(10000.000000)
                      add r17.w, r14.w, r17.w
                      mul r26.xyz, -r17.wwww, r27.xyzx
                      exp r26.xyz, r26.xyzx
                      min r26.xyz, r26.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                      mul r26.xyz, r20.wwww, r26.xyzx
                      mul r26.xyz, r16.wwww, r26.xyzx
                      mul r26.xyz, r18.xxxx, r26.xyzx
                    else 
                      mov r26.xyz, l(0,0,0,0)
                    endif 
                    add r24.xyz, r24.xyzx, r26.xyzx
                    iadd r15.w, r15.w, l(1)
                  endloop 
                  mul r11.x, r3.w, r14.x
                  mul r11.x, r14.z, r11.x
                  mul r11.xyw, r11.xxxx, r24.xyxz
                  mov r22.z, r21.w
                  mul r12.xyw, r12.yyyy, r22.zxzy
                  mul r20.xyz, r11.xywx, r12.xywx
                endif 
                add r19.xyz, r19.xyzx, r20.xyzx
              endif 
            endloop 
            mov r9.xyz, r19.xyzx
            iadd r7.z, r7.z, l(1)
          endloop 
          add r13.xyz, r8.xyzx, r9.xyzx
        endif 
      endif 
    endif 
  endif 
  iadd r13.w, r13.w, l(1)
endloop 
mov o0.xyz, r13.xyzx
mov o0.w, l(0)
ret 
// Approximately 667 instruction slots used
