//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:43:55 2021
//
//
// Buffer Definitions: 
//
// cbuffer PostFxCBuffer
// {
//
//   float4 postFxControl0;             // Offset:    0 Size:    16
//   float4 postFxControl1;             // Offset:   16 Size:    16
//   float4 postFxControl2;             // Offset:   32 Size:    16
//   float4 postFxControl3;             // Offset:   48 Size:    16
//   float4 postFxControl4;             // Offset:   64 Size:    16
//   float4 postFxControl5;             // Offset:   80 Size:    16
//   float4 postFxControl6;             // Offset:   96 Size:    16
//   float4 postFxControl7;             // Offset:  112 Size:    16
//   float4 postFxControl8;             // Offset:  128 Size:    16 [unused]
//   float4 postFxControl9;             // Offset:  144 Size:    16 [unused]
//   float4 postFxControlA;             // Offset:  160 Size:    16
//   float4 postFxControlB;             // Offset:  176 Size:    16 [unused]
//   float4 postFxControlC;             // Offset:  192 Size:    16 [unused]
//   float4 postFxControlD;             // Offset:  208 Size:    16 [unused]
//   float4 postFxControlE;             // Offset:  224 Size:    16 [unused]
//   float4 postFxControlF;             // Offset:  240 Size:    16 [unused]
//   float4 postFxConst00;              // Offset:  256 Size:    16 [unused]
//   float4 postFxConst01;              // Offset:  272 Size:    16 [unused]
//   float4 postFxConst02;              // Offset:  288 Size:    16 [unused]
//   float4 postFxConst03;              // Offset:  304 Size:    16 [unused]
//   float4 postFxConst04;              // Offset:  320 Size:    16 [unused]
//   float4 postFxConst05;              // Offset:  336 Size:    16 [unused]
//   float4 postFxConst06;              // Offset:  352 Size:    16 [unused]
//   float4 postFxConst07;              // Offset:  368 Size:    16 [unused]
//   float4 postFxConst08;              // Offset:  384 Size:    16 [unused]
//   float4 postFxConst09;              // Offset:  400 Size:    16 [unused]
//   float4 postFxConst10;              // Offset:  416 Size:    16 [unused]
//   float4 postFxConst11;              // Offset:  432 Size:    16 [unused]
//   float4 postFxConst12;              // Offset:  448 Size:    16 [unused]
//   float4 postFxConst13;              // Offset:  464 Size:    16 [unused]
//   float4 postFxConst14;              // Offset:  480 Size:    16 [unused]
//   float4 postFxConst15;              // Offset:  496 Size:    16 [unused]
//   float4 postFxConst16;              // Offset:  512 Size:    16 [unused]
//   float4 postFxConst17;              // Offset:  528 Size:    16 [unused]
//   float4 postFxConst18;              // Offset:  544 Size:    16 [unused]
//   float4 postFxConst19;              // Offset:  560 Size:    16 [unused]
//   float4 postFxConst20;              // Offset:  576 Size:    16 [unused]
//   float4 postFxConst21;              // Offset:  592 Size:    16 [unused]
//   float4 postFxConst22;              // Offset:  608 Size:    16 [unused]
//   float4 postFxConst23;              // Offset:  624 Size:    16 [unused]
//   float4 postFxConst24;              // Offset:  640 Size:    16 [unused]
//   float4 postFxConst25;              // Offset:  656 Size:    16 [unused]
//   float4 postFxConst26;              // Offset:  672 Size:    16 [unused]
//   float4 postFxConst27;              // Offset:  688 Size:    16 [unused]
//   float4 postFxConst28;              // Offset:  704 Size:    16 [unused]
//   float4 postFxConst29;              // Offset:  720 Size:    16 [unused]
//   float4 postFxConst30;              // Offset:  736 Size:    16 [unused]
//   float4 postFxConst31;              // Offset:  752 Size:    16 [unused]
//   float4 postFxConst32;              // Offset:  768 Size:    16 [unused]
//   float4 postFxConst33;              // Offset:  784 Size:    16 [unused]
//   float4 postFxConst34;              // Offset:  800 Size:    16 [unused]
//   float4 postFxConst35;              // Offset:  816 Size:    16 [unused]
//   float4 postFxConst36;              // Offset:  832 Size:    16 [unused]
//   float4 postFxConst37;              // Offset:  848 Size:    16 [unused]
//   float4 postFxConst38;              // Offset:  864 Size:    16 [unused]
//   float4 postFxConst39;              // Offset:  880 Size:    16 [unused]
//   float4 postFxConst40;              // Offset:  896 Size:    16 [unused]
//   float4 postFxConst41;              // Offset:  912 Size:    16 [unused]
//   float4 postFxConst42;              // Offset:  928 Size:    16 [unused]
//   float4 postFxConst43;              // Offset:  944 Size:    16 [unused]
//   float4 postFxConst44;              // Offset:  960 Size:    16 [unused]
//   float4 postFxConst45;              // Offset:  976 Size:    16 [unused]
//   float4 postFxConst46;              // Offset:  992 Size:    16 [unused]
//   float4 postFxConst47;              // Offset: 1008 Size:    16 [unused]
//   float4 postFxConst48;              // Offset: 1024 Size:    16 [unused]
//   float4 postFxConst49;              // Offset: 1040 Size:    16 [unused]
//   float4 postFxConst50;              // Offset: 1056 Size:    16 [unused]
//   float4 postFxConst51;              // Offset: 1072 Size:    16 [unused]
//   float4 postFxConst52;              // Offset: 1088 Size:    16 [unused]
//   float4 postFxConst53;              // Offset: 1104 Size:    16 [unused]
//   float4 postFxConst54;              // Offset: 1120 Size:    16 [unused]
//   float4 postFxConst55;              // Offset: 1136 Size:    16 [unused]
//   float4 postFxConst56;              // Offset: 1152 Size:    16 [unused]
//   float4 postFxConst57;              // Offset: 1168 Size:    16 [unused]
//   float4 postFxConst58;              // Offset: 1184 Size:    16 [unused]
//   float4 postFxConst59;              // Offset: 1200 Size:    16 [unused]
//   float4 postFxConst60;              // Offset: 1216 Size:    16 [unused]
//   float4 postFxConst61;              // Offset: 1232 Size:    16 [unused]
//   float4 postFxConst62;              // Offset: 1248 Size:    16 [unused]
//   float4 postFxConst63;              // Offset: 1264 Size:    16 [unused]
//   float4 postFxBloom00;              // Offset: 1280 Size:    16 [unused]
//   float4 postFxBloom01;              // Offset: 1296 Size:    16 [unused]
//   float4 postFxBloom02;              // Offset: 1312 Size:    16 [unused]
//   float4 postFxBloom03;              // Offset: 1328 Size:    16 [unused]
//   float4 postFxBloom04;              // Offset: 1344 Size:    16 [unused]
//   float4 postFxBloom05;              // Offset: 1360 Size:    16 [unused]
//   float4 postFxBloom06;              // Offset: 1376 Size:    16 [unused]
//   float4 postFxBloom07;              // Offset: 1392 Size:    16 [unused]
//   float4 postFxBloom08;              // Offset: 1408 Size:    16 [unused]
//   float4 postFxBloom09;              // Offset: 1424 Size:    16 [unused]
//   float4 postFxBloom10;              // Offset: 1440 Size:    16 [unused]
//   float4 postFxBloom11;              // Offset: 1456 Size:    16 [unused]
//   float4 postFxBloom12;              // Offset: 1472 Size:    16 [unused]
//   float4 postFxBloom13;              // Offset: 1488 Size:    16 [unused]
//   float4 postFxBloom14;              // Offset: 1504 Size:    16 [unused]
//   float4 postFxBloom15;              // Offset: 1520 Size:    16 [unused]
//   float4 postFxBloom16;              // Offset: 1536 Size:    16 [unused]
//   float4 postFxBloom17;              // Offset: 1552 Size:    16 [unused]
//   float4 postFxBloom18;              // Offset: 1568 Size:    16 [unused]
//   float4 postFxBloom19;              // Offset: 1584 Size:    16 [unused]
//   float4 postFxBloom20;              // Offset: 1600 Size:    16 [unused]
//   float4 postFxBloom21;              // Offset: 1616 Size:    16 [unused]
//   float4 postFxBloom22;              // Offset: 1632 Size:    16 [unused]
//   float4 postFxBloom23;              // Offset: 1648 Size:    16 [unused]
//   float4 postFxBloom24;              // Offset: 1664 Size:    16 [unused]
//   float4 postFxBloom25;              // Offset: 1680 Size:    16 [unused]
//   float4 filterTap[8];               // Offset: 1696 Size:   128 [unused]
//   float4 postfxViewMatrix0;          // Offset: 1824 Size:    16 [unused]
//   float4 postfxViewMatrix1;          // Offset: 1840 Size:    16 [unused]
//   float4 postfxViewMatrix2;          // Offset: 1856 Size:    16 [unused]
//   float4 postfxViewMatrix3;          // Offset: 1872 Size:    16 [unused]
//   float4 postfxProjMatrix0;          // Offset: 1888 Size:    16 [unused]
//   float4 postfxProjMatrix1;          // Offset: 1904 Size:    16 [unused]
//   float4 postfxProjMatrix2;          // Offset: 1920 Size:    16 [unused]
//   float4 postfxProjMatrix3;          // Offset: 1936 Size:    16 [unused]
//   float4 postfxViewProjMatrix0;      // Offset: 1952 Size:    16 [unused]
//   float4 postfxViewProjMatrix1;      // Offset: 1968 Size:    16 [unused]
//   float4 postfxViewProjMatrix2;      // Offset: 1984 Size:    16 [unused]
//   float4 postfxViewProjMatrix3;      // Offset: 2000 Size:    16 [unused]
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16 [unused]
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16 [unused]
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4 [unused]
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224 [unused]
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48 [unused]
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4 [unused]
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for gLitFogVolumes
// {
//
//   struct CoreLitFogConstantsPack
//   {
//       
//       uint4 data[13];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gTrilinearClampSampler            sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// downsampledDepth                  texture   float          2d             t0      1 
// gLitFogVolumes                    texture  struct         r/o             t1      1 
// volLightTexture                   texture  float3          3d             t2      1 
// adaptiveTransparencyDepth         texture  float4          2d             t4      1 
// adaptiveTransparencyTrans         texture  float4          2d             t5      1 
// downSampledDepthUV                texture    uint          2d             t6      1 
// oitPixelAlpha                     texture   float          2d             t7      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// PostFxCBuffer                     cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB8[11], immediateIndexed
dcl_constantbuffer CB1[45], immediateIndexed
dcl_constantbuffer CB2[32], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_structured t1, 208
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (uint,uint,uint,uint) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture2darray (float,float,float,float) t20
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 41
ftou r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyww, t0.xyzw
lt r1.y, r1.x, l(0.000000)
discard_nz r1.y
div r1.yz, v0.xxyx, cb1[44].xxyx
mad r1.yz, r1.yyzy, l(0.000000, 2.000000, -2.000000, 0.000000), l(0.000000, -1.000000, 1.000000, 0.000000)
mul r2.xy, r1.yzyy, cb8[4].xyxx
mov r2.z, l(1.000000)
mul r1.xyz, r1.xxxx, r2.xyzx
mul r2.xyz, r1.yyyy, cb8[1].xyzx
mad r1.xyw, r1.xxxx, cb8[0].xyxz, r2.xyxz
mad r1.xyz, r1.zzzz, cb8[2].xyzx, r1.xywx
add r1.xyz, r1.xyzx, cb8[3].xyzx
add r1.xyz, r1.xyzx, -cb8[5].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r2.x, r1.w
max r2.y, cb1[41].x, l(1.000000)
min r2.x, r2.x, l(8000.000000)
ge r2.z, r2.y, r2.x
discard_nz r2.z
ld_indexable(texture2d)(uint,uint,uint,uint) r0.z, r0.xyzw, t6.yzxw
ushr r0.w, r0.z, l(2)
and r0.z, r0.z, l(3)
round_ni r2.zw, v0.xxxy
utof r3.xy, r0.wzww
mad r0.zw, r2.zzzw, cb8[7].xxxx, r3.xxxy
ftou r3.xy, r0.zwzz
rsq r0.z, r1.w
mul r1.xyz, r0.zzzz, r1.xyzx
and r0.zw, cb8[4].zzzw, l(0, 0, 0x0000ffff, 0x0000ffff)
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r3.xyww, t5.xyzw
ld_indexable(texture2d)(float,float,float,float) r1.w, r3.xyzw, t7.yzwx
mul r3.xyzw, r4.xyzw, l(2000.000000, 2000.000000, 2000.000000, 2000.000000)
lt r1.w, l(0.900000), r1.w
movc r3.xyzw, r1.wwww, l(2000.000000,2000.000000,2000.000000,2000.000000), r3.xyzw
movc r4.xyzw, r1.wwww, l(1.000000,1.000000,1.000000,1.000000), r5.xyzw
max r1.w, r2.x, r2.y
utof r0.w, r0.w
utof r0.xy, r0.xyxx
dp2 r2.z, r0.yxyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r2.z, r2.z
mul r2.z, r2.z, l(52.982918)
frc r2.z, r2.z
add r2.z, r2.z, l(-0.500000)
resinfo_indexable(texture3d)(float,float,float,float)_uint r5.xy, l(0), t2.xyzw
add r0.xyw, r0.xyxw, l(0.500000, 0.500000, 0.000000, -1.000000)
utof r5.xy, r5.xyxx
div r2.w, l(16.000000), cb8[7].x
mul r5.xy, r2.wwww, r5.xyxx
div r5.yz, r0.xxyx, r5.xxyx
mov r6.w, l(1.000000)
mov r7.w, l(1.000000)
mov r8.w, l(1.000000)
mov r9.w, l(1.000000)
mov r10.w, l(1.000000)
mov r11.w, l(1.000000)
mov r12.w, l(1.000000)
mov r13.w, l(1.000000)
mov r14.w, l(1.000000)
mov r15.w, l(1.000000)
mov r16.w, l(1.000000)
mov r17.w, l(1.000000)
mov r18.xyzw, cb2[24].xyzw
mov r19.xyzw, cb2[25].xyzw
mov r20.xyz, cb2[17].xyzx
mov r21.xyz, cb2[21].xyzx
mov r22.xyz, cb2[22].xyzx
mov r23.xyz, l(0,0,0,0)
mov r0.x, cb2[17].w
mov r0.y, cb2[23].x
mov r2.w, cb2[23].y
mov r20.w, cb2[23].z
mov r21.w, cb2[26].y
mov r24.x, cb2[28].x
mov r25.x, cb2[28].y
mov r26.x, cb2[28].z
mov r24.y, cb2[29].x
mov r25.y, cb2[29].y
mov r26.y, cb2[29].z
mov r24.z, cb2[30].x
mov r25.z, cb2[30].y
mov r26.z, cb2[30].z
mov r24.w, cb2[31].x
mov r25.w, cb2[31].y
mov r26.w, cb2[31].z
mov r22.w, l(0)
loop 
  uge r23.w, r22.w, r0.z
  breakc_nz r23.w
  ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r27.xyzw, r22.w, l(132), t1.xyzw
  and r23.w, r27.w, l(21)
  if_nz r23.w
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r28.xyzw, r22.w, l(24), t1.xyzw
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r29.xyzw, r22.w, l(52), t1.xyzw
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r27.w, r22.w, l(68), t1.xxxx
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r30.xyzw, r22.w, l(84), t1.xyzw
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r31.x, r22.w, l(100), t1.xxxx
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r32.xyzw, r22.w, l(116), t1.xyzw
    dp3 r28.x, r1.xyzx, r28.xyzx
    max r28.y, |r28.x|, l(0.00000010)
    div r28.y, l(1.000000, 1.000000, 1.000000, 1.000000), r28.y
    mul r28.z, r28.y, r28.w
    mul r28.y, r28.y, r29.x
    lt r28.x, l(0.000000), -r28.x
    max r33.x, r28.z, l(-131072.000000)
    min r33.y, -r28.y, l(131072.000000)
    min r34.y, -r28.z, l(131072.000000)
    max r34.x, r28.y, l(-131072.000000)
    movc r28.xy, r28.xxxx, r33.xyxx, r34.xyxx
    dp3 r28.z, r1.xyzx, r29.yzwy
    max r28.w, |r28.z|, l(0.00000010)
    div r28.w, l(1.000000, 1.000000, 1.000000, 1.000000), r28.w
    mul r27.w, r27.w, r28.w
    mul r28.w, r28.w, r30.x
    lt r28.z, l(0.000000), -r28.z
    max r29.x, r28.x, r27.w
    min r29.y, r28.y, -r28.w
    min r33.y, r28.y, -r27.w
    max r33.x, r28.x, r28.w
    movc r28.xy, r28.zzzz, r29.xyxx, r33.xyxx
    dp3 r27.w, r1.xyzx, r30.yzwy
    max r28.z, |r27.w|, l(0.00000010)
    div r28.z, l(1.000000, 1.000000, 1.000000, 1.000000), r28.z
    mul r28.w, r28.z, r31.x
    mul r28.z, r28.z, r32.x
    lt r27.w, l(0.000000), -r27.w
    max r29.y, r28.x, r28.w
    min r29.z, r28.y, -r28.z
    min r30.z, r28.y, -r28.w
    max r30.y, r28.x, r28.z
    movc r28.yz, r27.wwww, r29.yyzy, r30.yyzy
    lt r27.w, r28.y, r28.z
    if_nz r27.w
      max r28.x, r28.y, l(0.000000)
      max r28.yw, r2.yyyy, r28.xxxz
      max r28.xz, r2.xxxx, r28.xxzx
      min r28.xz, r1.wwww, r28.xxzx
      min r28.xy, r28.xzxx, r28.ywyy
      add r27.w, -r28.x, r28.y
      ge r27.w, r27.w, l(1.000000)
      if_nz r27.w
        ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r27.w, r22.w, l(196), t1.xxxx
        max r28.x, r27.x, r28.x
        add r28.y, -r28.x, r28.y
        min r27.w, r27.w, r28.y
        ge r28.y, r27.w, l(1.000000)
        if_nz r28.y
          ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r29.xyzw, r22.w, l(148), t1.xyzw
          ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r30.xyzw, r22.w, l(164), t1.zxyw
          ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r31.xyzw, r22.w, l(180), t1.xyzw
          add r28.yzw, r27.zzzz, r29.xxyz
          add r27.w, r27.w, r28.x
          switch r23.w
            case l(16)
            add r23.w, r27.x, r28.x
            min r23.w, r27.w, r23.w
            add r29.x, -r23.w, r27.w
            div r29.y, r29.x, cb8[10].x
            min r29.y, r0.w, r29.y
            round_ni r29.y, r29.y
            add r29.y, r29.y, l(1.000000)
            ftou r29.y, r29.y
            iadd r29.y, r29.y, l(1)
            and r29.y, r29.y, l(-2)
            utof r29.z, r29.y
            div r29.z, l(1.000000, 1.000000, 1.000000, 1.000000), r29.z
            mul r29.x, r29.z, r29.x
            mad r32.x, -r29.x, l(0.500000), r27.w
            mad r23.w, r29.x, l(0.500000), r23.w
            add r29.x, -r23.w, r32.x
            mul r29.x, r29.z, r29.x
            mul r29.z, r2.z, r29.x
            mad r23.w, r29.z, l(0.750000), r23.w
            mul r29.z, r32.y, l(100.000000)
            mad r32.x, r1.z, r23.w, r32.w
            mul r32.x, r32.x, -r32.z
            exp r32.x, r32.x
            min r32.x, r32.x, l(1.000000)
            mul r32.x, r32.x, r32.y
            min r32.x, r29.z, r32.x
            mul r33.xyz, r28.yzwy, r32.xxxx
            mul r33.xyz, r23.wwww, -r33.xyzx
            exp r33.xyz, r33.xyzx
            mul r33.xyz, r31.yyyy, r33.xyzx
            ge r34.xyzw, r3.xyzw, r23.wwww
            movc r33.w, r34.w, r4.z, r4.w
            movc r33.w, r34.z, r4.y, r33.w
            movc r33.w, r34.y, r4.x, r33.w
            movc r33.w, r34.x, l(1.000000), r33.w
            mul r33.xyz, r32.xxxx, r33.xyzx
            mov r30.x, r29.w
            mul r33.xyz, r30.xyzx, r33.xyzx
            mul r33.xyz, r33.wwww, r33.xyzx
            mov r34.xyz, r33.xyzx
            mov r35.xyz, r33.xyzx
            mov r32.x, r23.w
            mov r33.w, l(0)
            loop 
              uge r34.w, r33.w, r29.y
              breakc_nz r34.w
              mad r32.x, r29.x, l(2.000000), r32.x
              mad r34.w, r1.z, r32.x, r32.w
              mul r34.w, -r32.z, r34.w
              exp r34.w, r34.w
              min r34.w, r34.w, l(1.000000)
              mul r34.w, r32.y, r34.w
              min r34.w, r29.z, r34.w
              mul r36.xyz, r28.yzwy, r34.wwww
              mul r36.xyz, r32.xxxx, -r36.xyzx
              exp r36.xyz, r36.xyzx
              mul r36.xyz, r31.yyyy, r36.xyzx
              ge r37.xyzw, r3.xyzw, r32.xxxx
              movc r35.w, r37.w, r4.z, r4.w
              movc r35.w, r37.z, r4.y, r35.w
              movc r35.w, r37.y, r4.x, r35.w
              movc r35.w, r37.x, l(1.000000), r35.w
              mul r36.xyz, r34.wwww, r36.xyzx
              mul r36.xyz, r30.xyzx, r36.xyzx
              mul r37.xyz, r35.wwww, r36.xyzx
              mad r38.xyz, r36.xyzx, r35.wwww, r34.xyzx
              dp3 r34.w, l(0.299000, 0.587000, 0.114000, 0.000000), r35.xyzx
              dp3 r36.w, l(0.299000, 0.587000, 0.114000, 0.000000), r37.xyzx
              max r37.w, r34.w, r36.w
              min r34.w, r34.w, r36.w
              div r34.w, r34.w, r37.w
              lt r34.w, r34.w, l(0.800000)
              if_nz r34.w
                mov r39.xyz, l(0,0,0,0)
              else 
                mad r36.xyz, r36.xyzx, r35.wwww, r35.xyzx
                mul r39.xyz, r36.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              endif 
              add r34.xyz, r38.xyzx, r39.xyzx
              iadd r33.w, r33.w, l(2)
              mov r35.xyz, r37.xyzx
            endloop 
            mul r23.w, r27.z, r29.x
            mul r29.xyz, r23.wwww, r34.xyzx
            mad r23.xyz, r29.xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.000000), r23.xyzx
            break 
            case l(1)
            add r23.w, r27.x, r28.x
            min r23.w, r27.w, r23.w
            add r29.x, -r23.w, r27.w
            div r29.y, r29.x, cb8[10].x
            min r29.y, r0.w, r29.y
            round_ni r29.y, r29.y
            add r29.y, r29.y, l(1.000000)
            ftou r29.y, r29.y
            iadd r29.y, r29.y, l(1)
            and r29.y, r29.y, l(-2)
            utof r29.z, r29.y
            div r29.z, l(1.000000, 1.000000, 1.000000, 1.000000), r29.z
            dp3 r32.x, r20.xyzx, -r1.xyzx
            mul r29.x, r29.z, r29.x
            mad r33.x, -r29.x, l(0.500000), r27.w
            mad r23.w, r29.x, l(0.500000), r23.w
            add r29.x, -r23.w, r33.x
            mul r33.x, r29.z, r29.x
            max r32.x, r32.x, l(-1.000000)
            min r32.x, r32.x, l(1.000000)
            mad r32.x, r27.y, r32.x, l(1.000000)
            max r32.x, r32.x, l(0.000001)
            min r32.x, r32.x, l(2.000000)
            mad r33.y, -r27.y, r27.y, l(1.000000)
            mul r33.y, r33.y, l(0.07957747)
            mul r32.x, r32.x, r32.x
            rcp r32.x, r32.x
            mul r32.x, r32.x, r33.y
            max r32.x, r32.x, l(0.000000)
            min r32.x, r32.x, l(10000.000000)
            mov r35.xy, r30.xwxx
            mov r35.z, r31.x
            mul r33.yzw, r32.xxxx, r35.xxyz
            mul r33.yzw, r31.wwww, r33.yyzw
            mul r33.yzw, r33.yyzw, l(0.000000, 12.566371, 12.566371, 12.566371)
            mul r32.x, r2.z, r33.x
            mad r23.w, r32.x, l(0.750000), r23.w
            mul r6.xyz, r1.xyzx, r23.wwww
            mul r32.x, r32.y, l(100.000000)
            mad r34.w, r1.z, r23.w, r32.w
            mul r34.w, -r32.z, r34.w
            exp r34.w, r34.w
            min r34.w, r34.w, l(1.000000)
            mul r34.w, r32.y, r34.w
            min r34.w, r32.x, r34.w
            mul r35.xyz, r28.yzwy, r34.wwww
            mul r35.xyz, r23.wwww, -r35.xyzx
            exp r35.xyz, r35.xyzx
            mul r35.xyz, r31.yyyy, r35.xyzx
            ge r36.xyzw, r3.xyzw, r23.wwww
            movc r35.w, r36.w, r4.z, r4.w
            movc r35.w, r36.z, r4.y, r35.w
            movc r35.w, r36.y, r4.x, r35.w
            movc r35.w, r36.x, l(1.000000), r35.w
            mad r8.xyz, r1.xyzx, r23.wwww, cb8[5].xyzx
            dp3 r36.x, r8.xyzx, cb8[6].xyzx
            add r36.x, r36.x, cb8[6].w
            mul r36.x, r36.x, l(0.003000)
            max r36.x, r36.x, l(1.000000)
            min r36.x, r36.x, l(2.000000)
            ftou r36.x, r36.x
            dp4 r36.y, r6.xyzw, r24.xyzw
            dp4 r36.z, r6.xyzw, r25.xyzw
            dp4 r6.x, r6.xyzw, r26.xyzw
            iadd r6.y, r36.x, l(-1)
            mul r37.xyz, r21.xyzx, icb[r6.y + 0].xxxx
            mad r37.xyz, icb[r6.y + 0].yyyy, r22.xyzx, r37.xyzx
            add r38.xy, r36.yzyy, -r37.xyxx
            mul r6.yz, r37.zzzz, r38.xxyx
            mad r37.xy, r6.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r6.x, -r0.x, r6.x
            mad r6.x, -r6.x, l(0.00006104), l(0.999500)
            iadd r6.y, r21.w, r36.x
            utof r37.z, r6.y
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r6.x, r37.xyzx, t13.xxxx, s13, r6.x
            mul r6.x, r35.w, r6.x
            lt r6.y, l(0.000000), r20.w
            ult r6.z, l(0), r0.y
            and r6.y, r6.z, r6.y
            if_nz r6.y
              dp4 r6.z, r18.xyzw, r8.xyzw
              dp4 r8.x, r19.xyzw, r8.xyzw
              frc r36.x, r6.z
              frc r36.y, r8.x
              iadd r6.z, r0.y, l(-1)
              utof r36.z, r6.z
              sample_l_indexable(texture2darray)(float,float,float,float) r8.xyz, r36.xyzx, t20.xyzw, s2, l(0.000000)
              mul r6.z, r2.w, r20.w
              add r8.xyz, r8.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
              mad r8.xyz, r6.zzzz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
              mul r36.xyz, r34.wwww, r35.xyzx
              mul r36.xyz, r6.xxxx, r36.xyzx
              mul r8.xyz, r8.xyzx, r36.xyzx
            else 
              mul r36.xyz, r34.wwww, r35.xyzx
              mul r8.xyz, r6.xxxx, r36.xyzx
            endif 
            mul r35.xyz, r34.wwww, r35.xyzx
            mov r30.x, r29.w
            mul r35.xyz, r30.xyzx, r35.xyzx
            mul r35.xyz, r35.wwww, r35.xyzx
            mad r8.xyz, r8.xyzx, r33.yzwy, r35.xyzx
            iadd r6.x, r0.y, l(-1)
            utof r35.z, r6.x
            mul r6.x, r2.w, r20.w
            mov r36.xyz, r8.xyzx
            mov r37.xyz, r8.xyzx
            mov r6.z, r23.w
            mov r29.w, l(0)
            loop 
              uge r34.w, r29.w, r29.y
              breakc_nz r34.w
              mad r34.w, r33.x, l(2.000000), r6.z
              mul r9.xyz, r1.xyzx, r34.wwww
              mad r35.w, r1.z, r34.w, r32.w
              mul r35.w, -r32.z, r35.w
              exp r35.w, r35.w
              min r35.w, r35.w, l(1.000000)
              mul r35.w, r32.y, r35.w
              min r35.w, r32.x, r35.w
              mul r38.xyz, r28.yzwy, r35.wwww
              mul r38.xyz, r34.wwww, -r38.xyzx
              exp r38.xyz, r38.xyzx
              mul r38.xyz, r31.yyyy, r38.xyzx
              ge r39.xyzw, r3.xyzw, r34.wwww
              movc r36.w, r39.w, r4.z, r4.w
              movc r36.w, r39.z, r4.y, r36.w
              movc r36.w, r39.y, r4.x, r36.w
              movc r36.w, r39.x, l(1.000000), r36.w
              mad r11.xyz, r1.xyzx, r34.wwww, cb8[5].xyzx
              dp3 r37.w, r11.xyzx, cb8[6].xyzx
              add r37.w, r37.w, cb8[6].w
              mul r37.w, r37.w, l(0.003000)
              max r37.w, r37.w, l(1.000000)
              min r37.w, r37.w, l(2.000000)
              ftou r37.w, r37.w
              dp4 r38.w, r9.xyzw, r24.xyzw
              dp4 r39.x, r9.xyzw, r25.xyzw
              dp4 r9.x, r9.xyzw, r26.xyzw
              iadd r9.y, r37.w, l(-1)
              mul r39.yzw, r21.xxyz, icb[r9.y + 0].xxxx
              mad r39.yzw, icb[r9.y + 0].yyyy, r22.xxyz, r39.yyzw
              add r40.x, r38.w, -r39.y
              add r40.y, -r39.z, r39.x
              mul r9.yz, r39.wwww, r40.xxyx
              mad r39.xy, r9.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r9.x, -r0.x, r9.x
              mad r9.x, -r9.x, l(0.00006104), l(0.999500)
              iadd r9.y, r21.w, r37.w
              utof r39.z, r9.y
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.x, r39.xyzx, t13.xxxx, s13, r9.x
              mul r9.x, r36.w, r9.x
              if_nz r6.y
                dp4 r9.y, r18.xyzw, r11.xyzw
                dp4 r9.z, r19.xyzw, r11.xyzw
                frc r35.xy, r9.yzyy
                sample_l_indexable(texture2darray)(float,float,float,float) r11.xyz, r35.xyzx, t20.xyzw, s2, l(0.000000)
                add r11.xyz, r11.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                mad r11.xyz, r6.xxxx, r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r39.xyz, r35.wwww, r38.xyzx
                mul r39.xyz, r9.xxxx, r39.xyzx
                mul r11.xyz, r11.xyzx, r39.xyzx
              else 
                mul r39.xyz, r35.wwww, r38.xyzx
                mul r11.xyz, r9.xxxx, r39.xyzx
              endif 
              mul r9.xyz, r35.wwww, r38.xyzx
              mul r9.xyz, r30.xyzx, r9.xyzx
              mul r9.xyz, r36.wwww, r9.xyzx
              mad r9.xyz, r11.xyzx, r33.yzwy, r9.xyzx
              add r11.xyz, r9.xyzx, r36.xyzx
              dp3 r35.w, l(0.299000, 0.587000, 0.114000, 0.000000), r37.xyzx
              dp3 r36.w, l(0.299000, 0.587000, 0.114000, 0.000000), r9.xyzx
              max r37.w, r35.w, r36.w
              min r35.w, r35.w, r36.w
              div r35.w, r35.w, r37.w
              lt r35.w, r35.w, l(0.800000)
              if_nz r35.w
                mad r35.w, r29.x, r29.z, r6.z
                mul r12.xyz, r1.xyzx, r35.wwww
                mad r36.w, r1.z, r35.w, r32.w
                mul r36.w, -r32.z, r36.w
                exp r36.w, r36.w
                min r36.w, r36.w, l(1.000000)
                mul r36.w, r32.y, r36.w
                min r36.w, r32.x, r36.w
                mul r38.xyz, r28.yzwy, r36.wwww
                mul r38.xyz, r35.wwww, -r38.xyzx
                exp r38.xyz, r38.xyzx
                mul r38.xyz, r31.yyyy, r38.xyzx
                ge r39.xyzw, r3.xyzw, r35.wwww
                movc r37.w, r39.w, r4.z, r4.w
                movc r37.w, r39.z, r4.y, r37.w
                movc r37.w, r39.y, r4.x, r37.w
                movc r37.w, r39.x, l(1.000000), r37.w
                mad r13.xyz, r1.xyzx, r35.wwww, cb8[5].xyzx
                dp3 r35.w, r13.xyzx, cb8[6].xyzx
                add r35.w, r35.w, cb8[6].w
                mul r35.w, r35.w, l(0.003000)
                max r35.w, r35.w, l(1.000000)
                min r35.w, r35.w, l(2.000000)
                ftou r35.w, r35.w
                dp4 r38.w, r12.xyzw, r24.xyzw
                dp4 r39.x, r12.xyzw, r25.xyzw
                dp4 r12.x, r12.xyzw, r26.xyzw
                iadd r12.y, r35.w, l(-1)
                mul r39.yzw, r21.xxyz, icb[r12.y + 0].xxxx
                mad r39.yzw, icb[r12.y + 0].yyyy, r22.xxyz, r39.yyzw
                add r40.x, r38.w, -r39.y
                add r40.y, -r39.z, r39.x
                mul r12.yz, r39.wwww, r40.xxyx
                mad r39.xy, r12.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r12.x, -r0.x, r12.x
                mad r12.x, -r12.x, l(0.00006104), l(0.999500)
                iadd r12.y, r21.w, r35.w
                utof r39.z, r12.y
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.x, r39.xyzx, t13.xxxx, s13, r12.x
                mul r12.x, r37.w, r12.x
                if_nz r6.y
                  dp4 r12.y, r18.xyzw, r13.xyzw
                  dp4 r12.z, r19.xyzw, r13.xyzw
                  frc r35.xy, r12.yzyy
                  sample_l_indexable(texture2darray)(float,float,float,float) r13.xyz, r35.xyzx, t20.xyzw, s2, l(0.000000)
                  add r13.xyz, r13.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                  mad r13.xyz, r6.xxxx, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r35.xyw, r36.wwww, r38.xyxz
                  mul r35.xyw, r12.xxxx, r35.xyxw
                  mul r13.xyz, r13.xyzx, r35.xywx
                else 
                  mul r35.xyw, r36.wwww, r38.xyxz
                  mul r13.xyz, r12.xxxx, r35.xywx
                endif 
                mul r12.xyz, r33.yzwy, r13.xyzx
              else 
                add r13.xyz, r9.xyzx, r37.xyzx
                mul r12.xyz, r13.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              endif 
              add r36.xyz, r11.xyzx, r12.xyzx
              iadd r29.w, r29.w, l(2)
              mov r37.xyz, r9.xyzx
              mov r6.z, r34.w
            endloop 
            mul r6.x, r27.z, r33.x
            mul r6.xyz, r6.xxxx, r36.xyzx
            mad r23.xyz, r6.xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.000000), r23.xyzx
            break 
            case l(4)
            add r6.x, r27.x, r28.x
            min r6.x, r27.w, r6.x
            add r6.y, -r6.x, r27.w
            div r6.z, r6.y, cb8[10].x
            min r6.z, r0.w, r6.z
            round_ni r6.z, r6.z
            add r6.z, r6.z, l(1.000000)
            ftou r6.z, r6.z
            iadd r6.z, r6.z, l(1)
            and r6.z, r6.z, l(-2)
            utof r8.x, r6.z
            div r8.x, l(1.000000, 1.000000, 1.000000, 1.000000), r8.x
            mul r6.y, r6.y, r8.x
            mad r8.y, -r6.y, l(0.500000), r27.w
            mad r6.x, r6.y, l(0.500000), r6.x
            add r6.y, -r6.x, r8.y
            mul r6.y, r8.x, r6.y
            mul r8.x, r2.z, r6.y
            mad r6.x, r8.x, l(0.750000), r6.x
            mul r8.x, r32.y, l(100.000000)
            mad r8.y, r1.z, r6.x, r32.w
            mul r8.y, r8.y, -r32.z
            exp r8.y, r8.y
            min r8.y, r8.y, l(1.000000)
            mul r8.y, r8.y, r32.y
            min r8.y, r8.x, r8.y
            mul r9.xyz, r8.yyyy, r28.yzwy
            mul r9.xyz, r6.xxxx, -r9.xyzx
            exp r9.xyz, r9.xyzx
            mul r9.xyz, r31.yyyy, r9.xyzx
            ge r29.xyzw, r3.xyzw, r6.xxxx
            movc r8.z, r29.w, r4.z, r4.w
            movc r8.z, r29.z, r4.y, r8.z
            movc r8.z, r29.y, r4.x, r8.z
            movc r8.z, r29.x, l(1.000000), r8.z
            mul_sat r5.x, r6.x, l(0.000500)
            sample_l_indexable(texture3d)(float,float,float,float) r11.xyz, r5.yzxy, t2.xyzw, s0, l(0.000000)
            mul r9.xyz, r9.xyzx, r11.xyzx
            mul r9.xyz, r8.yyyy, r9.xyzx
            mul r9.xyz, r31.zzzz, r9.xyzx
            mul r9.xyz, r8.zzzz, r9.xyzx
            mov r11.xyz, r9.xyzx
            mov r12.xyz, r9.xyzx
            mov r8.y, r6.x
            mov r8.z, l(0)
            loop 
              uge r13.x, r8.z, r6.z
              breakc_nz r13.x
              mad r8.y, r6.y, l(2.000000), r8.y
              mad r13.x, r1.z, r8.y, r32.w
              mul r13.x, r13.x, -r32.z
              exp r13.x, r13.x
              min r13.x, r13.x, l(1.000000)
              mul r13.x, r13.x, r32.y
              min r13.x, r8.x, r13.x
              mul r29.xyz, r13.xxxx, r28.yzwy
              mul r29.xyz, r8.yyyy, -r29.xyzx
              exp r29.xyz, r29.xyzx
              mul r29.xyz, r31.yyyy, r29.xyzx
              ge r33.xyzw, r3.xyzw, r8.yyyy
              movc r13.y, r33.w, r4.z, r4.w
              movc r13.y, r33.z, r4.y, r13.y
              movc r13.y, r33.y, r4.x, r13.y
              movc r13.y, r33.x, l(1.000000), r13.y
              mul_sat r5.w, r8.y, l(0.000500)
              sample_l_indexable(texture3d)(float,float,float,float) r33.xyz, r5.yzwy, t2.xyzw, s0, l(0.000000)
              mul r29.xyz, r29.xyzx, r33.xyzx
              mul r29.xyz, r13.xxxx, r29.xyzx
              mul r29.xyz, r31.zzzz, r29.xyzx
              mul r33.xyz, r13.yyyy, r29.xyzx
              mad r35.xyz, r29.xyzx, r13.yyyy, r11.xyzx
              dp3 r13.x, l(0.299000, 0.587000, 0.114000, 0.000000), r12.xyzx
              dp3 r13.z, l(0.299000, 0.587000, 0.114000, 0.000000), r33.xyzx
              max r23.w, r13.z, r13.x
              min r13.x, r13.z, r13.x
              div r13.x, r13.x, r23.w
              lt r13.x, r13.x, l(0.800000)
              if_nz r13.x
                mov r37.xyz, l(0,0,0,0)
              else 
                mad r13.xyz, r29.xyzx, r13.yyyy, r12.xyzx
                mul r37.xyz, r13.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              endif 
              add r11.xyz, r35.xyzx, r37.xyzx
              iadd r8.z, r8.z, l(2)
              mov r12.xyz, r33.xyzx
            endloop 
            mul r6.x, r6.y, r27.z
            mul r6.xyz, r6.xxxx, r11.xyzx
            mad r23.xyz, r6.xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.000000), r23.xyzx
            break 
            case l(5)
            add r6.x, r27.x, r28.x
            min r6.x, r27.w, r6.x
            add r6.y, -r6.x, r27.w
            div r6.z, r6.y, cb8[10].x
            min r6.z, r0.w, r6.z
            round_ni r6.z, r6.z
            add r6.z, r6.z, l(1.000000)
            ftou r6.z, r6.z
            iadd r6.z, r6.z, l(1)
            and r6.z, r6.z, l(-2)
            utof r8.x, r6.z
            div r8.x, l(1.000000, 1.000000, 1.000000, 1.000000), r8.x
            dp3 r8.y, r20.xyzx, -r1.xyzx
            mul r6.y, r6.y, r8.x
            mad r8.z, -r6.y, l(0.500000), r27.w
            mad r6.x, r6.y, l(0.500000), r6.x
            add r6.y, -r6.x, r8.z
            mul r8.z, r8.x, r6.y
            max r8.y, r8.y, l(-1.000000)
            min r8.y, r8.y, l(1.000000)
            mad r8.y, r27.y, r8.y, l(1.000000)
            max r8.y, r8.y, l(0.000001)
            min r8.y, r8.y, l(2.000000)
            mad r9.x, -r27.y, r27.y, l(1.000000)
            mul r9.x, r9.x, l(0.07957747)
            mul r8.y, r8.y, r8.y
            rcp r8.y, r8.y
            mul r8.y, r8.y, r9.x
            max r8.y, r8.y, l(0.000000)
            min r8.y, r8.y, l(10000.000000)
            mov r30.y, r31.x
            mul r9.xyz, r8.yyyy, r30.xwyx
            mul r9.xyz, r31.wwww, r9.xyzx
            mul r9.xyz, r9.xyzx, l(12.566371, 12.566371, 12.566371, 0.000000)
            mul r8.y, r2.z, r8.z
            mad r6.x, r8.y, l(0.750000), r6.x
            mul r7.xyz, r1.xyzx, r6.xxxx
            mul r8.y, r32.y, l(100.000000)
            mad r12.x, r1.z, r6.x, r32.w
            mul r12.x, r12.x, -r32.z
            exp r12.x, r12.x
            min r12.x, r12.x, l(1.000000)
            mul r12.x, r12.x, r32.y
            min r12.x, r8.y, r12.x
            mul r13.xyz, r12.xxxx, r28.yzwy
            mul r13.xyz, r6.xxxx, -r13.xyzx
            exp r13.xyz, r13.xyzx
            mul r13.xyz, r31.yyyy, r13.xyzx
            ge r29.xyzw, r3.xyzw, r6.xxxx
            movc r12.y, r29.w, r4.z, r4.w
            movc r12.y, r29.z, r4.y, r12.y
            movc r12.y, r29.y, r4.x, r12.y
            movc r12.y, r29.x, l(1.000000), r12.y
            mad r10.xyz, r1.xyzx, r6.xxxx, cb8[5].xyzx
            dp3 r12.z, r10.xyzx, cb8[6].xyzx
            add r12.z, r12.z, cb8[6].w
            mul r12.z, r12.z, l(0.003000)
            max r12.z, r12.z, l(1.000000)
            min r12.z, r12.z, l(2.000000)
            ftou r12.z, r12.z
            dp4 r23.w, r7.xyzw, r24.xyzw
            dp4 r27.x, r7.xyzw, r25.xyzw
            dp4 r7.x, r7.xyzw, r26.xyzw
            iadd r7.y, r12.z, l(-1)
            mul r29.xyz, r21.xyzx, icb[r7.y + 0].xxxx
            mad r29.xyz, icb[r7.y + 0].yyyy, r22.xyzx, r29.xyzx
            add r30.x, r23.w, -r29.x
            add r30.y, r27.x, -r29.y
            mul r7.yz, r29.zzzz, r30.xxyx
            mad r29.xy, r7.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r7.x, -r0.x, r7.x
            mad r7.x, -r7.x, l(0.00006104), l(0.999500)
            iadd r7.y, r21.w, r12.z
            utof r29.z, r7.y
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r7.x, r29.xyzx, t13.xxxx, s13, r7.x
            mul r7.x, r12.y, r7.x
            lt r7.y, l(0.000000), r20.w
            ult r7.z, l(0), r0.y
            and r7.y, r7.z, r7.y
            if_nz r7.y
              dp4 r7.z, r18.xyzw, r10.xyzw
              dp4 r10.x, r19.xyzw, r10.xyzw
              frc r29.x, r7.z
              frc r29.y, r10.x
              iadd r7.z, r0.y, l(-1)
              utof r29.z, r7.z
              sample_l_indexable(texture2darray)(float,float,float,float) r10.xyz, r29.xyzx, t20.xyzw, s2, l(0.000000)
              mul r7.z, r2.w, r20.w
              add r10.xyz, r10.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
              mad r10.xyz, r7.zzzz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
              mul r27.xyw, r12.xxxx, r13.xyxz
              mul r27.xyw, r7.xxxx, r27.xyxw
              mul r10.xyz, r10.xyzx, r27.xywx
            else 
              mul r27.xyw, r12.xxxx, r13.xyxz
              mul r10.xyz, r7.xxxx, r27.xywx
            endif 
            mul_sat r5.x, r6.x, l(0.000500)
            sample_l_indexable(texture3d)(float,float,float,float) r27.xyw, r5.yzxy, t2.xywz, s0, l(0.000000)
            mul r13.xyz, r13.xyzx, r27.xywx
            mul r13.xyz, r12.xxxx, r13.xyzx
            mul r13.xyz, r31.zzzz, r13.xyzx
            mul r12.xyz, r12.yyyy, r13.xyzx
            mad r10.xyz, r10.xyzx, r9.xyzx, r12.xyzx
            iadd r5.x, r0.y, l(-1)
            utof r12.z, r5.x
            mul r5.x, r2.w, r20.w
            mov r13.xyz, r10.xyzx
            mov r27.xyw, r10.xyxz
            mov r7.x, r6.x
            mov r7.z, l(0)
            loop 
              uge r23.w, r7.z, r6.z
              breakc_nz r23.w
              mad r23.w, r8.z, l(2.000000), r7.x
              mul r14.xyz, r1.xyzx, r23.wwww
              mad r28.x, r1.z, r23.w, r32.w
              mul r28.x, r28.x, -r32.z
              exp r28.x, r28.x
              min r28.x, r28.x, l(1.000000)
              mul r28.x, r28.x, r32.y
              min r28.x, r8.y, r28.x
              mul r29.xyz, r28.xxxx, r28.yzwy
              mul r29.xyz, r23.wwww, -r29.xyzx
              exp r29.xyz, r29.xyzx
              mul r29.xyz, r31.yyyy, r29.xyzx
              ge r30.xyzw, r3.xyzw, r23.wwww
              movc r29.w, r30.w, r4.z, r4.w
              movc r29.w, r30.z, r4.y, r29.w
              movc r29.w, r30.y, r4.x, r29.w
              movc r29.w, r30.x, l(1.000000), r29.w
              mad r15.xyz, r1.xyzx, r23.wwww, cb8[5].xyzx
              dp3 r30.x, r15.xyzx, cb8[6].xyzx
              add r30.x, r30.x, cb8[6].w
              mul r30.x, r30.x, l(0.003000)
              max r30.x, r30.x, l(1.000000)
              min r30.x, r30.x, l(2.000000)
              ftou r30.x, r30.x
              dp4 r30.y, r14.xyzw, r24.xyzw
              dp4 r30.z, r14.xyzw, r25.xyzw
              dp4 r14.x, r14.xyzw, r26.xyzw
              iadd r14.y, r30.x, l(-1)
              mul r33.xyz, r21.xyzx, icb[r14.y + 0].xxxx
              mad r33.xyz, icb[r14.y + 0].yyyy, r22.xyzx, r33.xyzx
              add r35.xy, r30.yzyy, -r33.xyxx
              mul r14.yz, r33.zzzz, r35.xxyx
              mad r33.xy, r14.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r14.x, -r0.x, r14.x
              mad r14.x, -r14.x, l(0.00006104), l(0.999500)
              iadd r14.y, r21.w, r30.x
              utof r33.z, r14.y
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.x, r33.xyzx, t13.xxxx, s13, r14.x
              mul r14.x, r29.w, r14.x
              if_nz r7.y
                dp4 r14.y, r18.xyzw, r15.xyzw
                dp4 r14.z, r19.xyzw, r15.xyzw
                frc r12.xy, r14.yzyy
                sample_l_indexable(texture2darray)(float,float,float,float) r15.xyz, r12.xyzx, t20.xyzw, s2, l(0.000000)
                add r15.xyz, r15.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                mad r15.xyz, r5.xxxx, r15.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r30.xyz, r28.xxxx, r29.xyzx
                mul r30.xyz, r14.xxxx, r30.xyzx
                mul r15.xyz, r15.xyzx, r30.xyzx
              else 
                mul r30.xyz, r28.xxxx, r29.xyzx
                mul r15.xyz, r14.xxxx, r30.xyzx
              endif 
              mul_sat r5.w, r23.w, l(0.000500)
              sample_l_indexable(texture3d)(float,float,float,float) r14.xyz, r5.yzwy, t2.xyzw, s0, l(0.000000)
              mul r14.xyz, r29.xyzx, r14.xyzx
              mul r14.xyz, r28.xxxx, r14.xyzx
              mul r14.xyz, r31.zzzz, r14.xyzx
              mul r14.xyz, r29.wwww, r14.xyzx
              mad r14.xyz, r15.xyzx, r9.xyzx, r14.xyzx
              add r15.xyz, r13.xyzx, r14.xyzx
              dp3 r5.w, l(0.299000, 0.587000, 0.114000, 0.000000), r27.xywx
              dp3 r28.x, l(0.299000, 0.587000, 0.114000, 0.000000), r14.xyzx
              max r29.x, r5.w, r28.x
              min r5.w, r5.w, r28.x
              div r5.w, r5.w, r29.x
              lt r5.w, r5.w, l(0.800000)
              if_nz r5.w
                mad r5.w, r6.y, r8.x, r7.x
                mul r16.xyz, r1.xyzx, r5.wwww
                mad r28.x, r1.z, r5.w, r32.w
                mul r28.x, r28.x, -r32.z
                exp r28.x, r28.x
                min r28.x, r28.x, l(1.000000)
                mul r28.x, r28.x, r32.y
                min r28.x, r8.y, r28.x
                mul r29.xyz, r28.xxxx, r28.yzwy
                mul r29.xyz, r5.wwww, -r29.xyzx
                exp r29.xyz, r29.xyzx
                mul r29.xyz, r31.yyyy, r29.xyzx
                ge r30.xyzw, r3.xyzw, r5.wwww
                movc r29.w, r30.w, r4.z, r4.w
                movc r29.w, r30.z, r4.y, r29.w
                movc r29.w, r30.y, r4.x, r29.w
                movc r29.w, r30.x, l(1.000000), r29.w
                mad r17.xyz, r1.xyzx, r5.wwww, cb8[5].xyzx
                dp3 r5.w, r17.xyzx, cb8[6].xyzx
                add r5.w, r5.w, cb8[6].w
                mul r5.w, r5.w, l(0.003000)
                max r5.w, r5.w, l(1.000000)
                min r5.w, r5.w, l(2.000000)
                ftou r5.w, r5.w
                dp4 r30.x, r16.xyzw, r24.xyzw
                dp4 r30.y, r16.xyzw, r25.xyzw
                dp4 r16.x, r16.xyzw, r26.xyzw
                iadd r16.y, r5.w, l(-1)
                mul r33.xyz, r21.xyzx, icb[r16.y + 0].xxxx
                mad r33.xyz, icb[r16.y + 0].yyyy, r22.xyzx, r33.xyzx
                add r35.xy, r30.xyxx, -r33.xyxx
                mul r16.yz, r33.zzzz, r35.xxyx
                mad r30.xy, r16.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r16.x, -r0.x, r16.x
                mad r16.x, -r16.x, l(0.00006104), l(0.999500)
                iadd r5.w, r21.w, r5.w
                utof r30.z, r5.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.w, r30.xyzx, t13.xxxx, s13, r16.x
                mul r5.w, r29.w, r5.w
                if_nz r7.y
                  dp4 r16.x, r18.xyzw, r17.xyzw
                  dp4 r16.y, r19.xyzw, r17.xyzw
                  frc r12.xy, r16.xyxx
                  sample_l_indexable(texture2darray)(float,float,float,float) r16.xyz, r12.xyzx, t20.xyzw, s2, l(0.000000)
                  add r16.xyz, r16.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                  mad r16.xyz, r5.xxxx, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r17.xyz, r28.xxxx, r29.xyzx
                  mul r17.xyz, r5.wwww, r17.xyzx
                  mul r16.xyz, r16.xyzx, r17.xyzx
                else 
                  mul r17.xyz, r28.xxxx, r29.xyzx
                  mul r16.xyz, r5.wwww, r17.xyzx
                endif 
                mul r16.xyz, r9.xyzx, r16.xyzx
              else 
                add r17.xyz, r14.xyzx, r27.xywx
                mul r16.xyz, r17.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              endif 
              add r13.xyz, r15.xyzx, r16.xyzx
              iadd r7.z, r7.z, l(2)
              mov r27.xyw, r14.xyxz
              mov r7.x, r23.w
            endloop 
            mul r5.x, r8.z, r27.z
            mul r6.xyz, r5.xxxx, r13.xyzx
            mad r23.xyz, r6.xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.000000), r23.xyzx
            break 
            default 
            break 
          endswitch 
        endif 
      endif 
    endif 
  endif 
  iadd r22.w, r22.w, l(1)
endloop 
mov o0.xyz, r23.xyzx
mov o0.w, l(0)
ret 
// Approximately 844 instruction slots used
