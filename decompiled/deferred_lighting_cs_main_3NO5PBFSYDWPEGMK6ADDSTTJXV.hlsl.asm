//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:22:57 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3584], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 45
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
ishl r0.x, cb2[57].x, l(3)
iadd r0.x, r0.x, vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xz, r0.xxyx, l(4095, 0, 4095, 0)
imad r1.xy, r0.xzxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.yz, r1.xxyx
add r5.xy, r3.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r6.x, r3.x, l(0.984375)
mul r3.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r6.x, r3.x, r3.w
max r3.x, r3.x, l(0.00000001)
rcp r6.y, r3.x
and r3.xw, r0.wwww, r6.xxxy
mul r5.zw, r5.xxxy, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r7.xyzw, r5.zwzz, t28.xyzw, s4.x
mul r5.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r5.zw, r5.zzzw
add r8.xy, -r5.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r9.y, r8.x, r8.y
mul r9.xz, r5.zzwz, r8.xxyx
mul r9.w, r5.w, r5.z
dp4 r0.w, r6.xyzw, r9.xyzw
add r7.xyzw, -r3.wwww, r7.xyzw
min r5.z, |r7.w|, |r7.z|
min r5.z, r5.z, |r7.y|
min r5.z, r5.z, |r7.x|
max r5.w, |r7.w|, |r7.z|
max r5.w, r5.w, |r7.y|
max r5.w, r5.w, |r7.x|
eq r7.xyz, r5.zzzz, |r7.yzwy|
movc r5.z, r7.x, r6.y, r6.x
movc r5.z, r7.y, r6.z, r5.z
movc r5.z, r7.z, r6.w, r5.z
mul r6.x, r3.w, l(0.010000)
lt r5.w, r6.x, r5.w
movc r0.w, r5.w, r5.z, r0.w
mul r0.w, r0.w, r4.z
if_nz cb2[55].x
  mul r4.z, r0.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r4.zzzz
  ret 
else 
  movc r4.z, cb2[54].w, r0.w, l(1.000000)
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
add r1.zw, r5.xxxy, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r5.x, r1.z, cb1[12].x
mul r5.y, r1.w, cb1[13].y
mov r5.z, l(1.000000)
mul r5.xyz, r3.wwww, r5.xyzx
mul r11.xyz, r5.yyyy, cb1[17].xyzx
mad r5.xyw, r5.xxxx, cb1[16].xyxz, r11.xyxz
mad r5.xyz, r5.zzzz, cb1[18].xyzx, r5.xywx
mad r1.z, r2.w, l(3.000000), l(0.500000)
ftou r1.z, r1.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r11.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r11.z
mul r11.xy, r1.wwww, r2.xyxx
and r12.xyzw, r1.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.z, r12.w, r12.z
movc r12.z, r1.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r1.z, r0.w, l(-0.500000), l(-0.00146628)
add r1.z, r1.z, r2.z
mul_sat r2.y, r1.z, l(2.00982332)
dp3 r1.z, -r5.xyzx, -r5.xyzx
rsq r1.z, r1.z
mul r12.xyz, r1.zzzz, -r5.xyzx
dp2 r1.w, r3.yzyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r1.w
utof r2.zw, r1.yyyx
dp2 r1.w, r2.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r15.x, r16.x, r1.w
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.w, -r12.xyzx, r11.xyzx
add r1.w, r1.w, r1.w
mad r17.xyz, r11.xyzx, -r1.wwww, -r12.xyzx
mul r1.w, r2.y, l(17.000000)
exp r1.w, r1.w
add r1.w, r1.w, l(2.000000)
div r1.w, l(2.000000), r1.w
sqrt r2.z, r1.w
mul r3.yz, cb1[44].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
ftou r3.yz, r3.yyzy
ieq r3.yz, r1.xxyx, r3.yyzy
and r2.w, r3.z, r3.y
dp3 r3.y, r11.xyzx, cb2[17].xyzx
mov_sat r3.z, r3.y
movc r3.w, r0.w, |r3.y|, r3.z
ge r6.w, l(0.000000), r3.w
if_nz r6.w
  mov r7.w, l(0)
endif 
if_z r6.w
  mul r15.yzw, r5.yyyy, cb2[29].xxyz
  mad r15.yzw, r5.xxxx, cb2[28].xxyz, r15.yyzw
  mad r15.yzw, r5.zzzz, cb2[30].xxyz, r15.yyzw
  add r15.yzw, r15.yyzw, cb2[31].xxyz
  add r6.w, r15.w, -cb2[17].w
  mad r6.w, -r6.w, l(0.00006104), l(1.000000)
  mov_sat r8.w, r6.w
  eq r8.w, r6.w, r8.w
  if_nz r8.w
    mov r8.w, l(0)
    mov r9.w, l(0)
    loop 
      ge r10.w, r8.w, l(3.000000)
      breakc_nz r10.w
      ftou r10.w, r8.w
      add r13.zw, r15.yyyz, -cb2[r10.w + 20].xxxy
      max r12.w, |r13.w|, |r13.z|
      mul r9.w, r12.w, cb2[r10.w + 20].z
      lt r10.w, r9.w, l(1.000000)
      if_nz r10.w
        break 
      endif 
      add r8.w, r8.w, l(1.000000)
      mov r9.w, l(0)
    endloop 
  else 
    mov r8.w, l(3.000000)
    mov r9.w, l(0)
  endif 
  ge r10.w, r8.w, l(3.000000)
  if_nz r10.w
    mul r16.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r18.xz, r16.yyyy
    mov r18.y, -r18.z
    mad r16.yzw, r15.yyzy, r18.xxyz, r16.zzwz
    add r18.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r16.yzw, r16.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r16.yzw, r18.xxyz, r16.yyzw
    mul r13.zw, r16.wwwz, cb2[32].xxxx
    round_ni r13.zw, r13.zzzw
    mul r12.w, r13.w, cb2[27].x
    mad r12.w, r12.w, cb2[32].x, r13.z
    ftou r12.w, r12.w
    iadd r12.w, r12.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.z, r12.w, l(0), t23.xxxx
    and r13.w, r13.z, l(0x40000000)
    ishl r14.w, r13.z, l(2)
    if_z r13.w
      and r13.w, r13.z, l(0x01ffffff)
      iadd r18.x, r12.w, r13.w
      ushr r12.w, r13.z, l(25)
      utof r12.w, r12.w
      mul r16.yzw, r12.wwww, r16.yyzw
      frc r16.yzw, r16.yyzw
      mul r16.yzw, r16.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r16.yzw, r16.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      ushr r13.zw, r16.wwwz, l(0, 0, 6, 6)
      and r12.w, r18.z, l(0xc0000000)
      iadd r18.w, r18.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.w, l(0), t23.xxxx
      movc r13.w, r13.w, r18.z, r18.w
      ushr r18.w, r13.w, l(13)
      movc r13.z, r13.z, r18.w, r13.w
      and r13.z, r13.z, l(8191)
      iadd r19.x, r13.z, r18.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      mov r18.y, l(0)
      mov r19.y, l(1)
      movc r19.xyz, r12.wwww, r18.xyzx, r19.xyzx
      movc r20.yz, r12.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r13.zw, r16.wwwz, r20.yyyy
      and r13.zw, r13.zzzw, l(0, 0, 1, 1)
      and r18.w, r19.z, l(0xc0000000)
      iadd r19.w, r19.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.w, l(0), t23.xxxx
      movc r13.w, r13.w, r19.z, r19.w
      ushr r19.w, r13.w, l(13)
      movc r13.z, r13.z, r19.w, r13.w
      and r13.z, r13.z, l(8191)
      iadd r20.x, r13.z, r19.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.w, r20.x, l(0), t23.xxxx
      movc r19.xyz, r18.wwww, r19.xyzx, r20.xzwx
      movc r18.xyz, r12.wwww, r18.xyzx, r19.xyzx
      and r12.w, r18.z, l(0xc0000000)
      if_z r12.w
        iadd r12.w, -r18.y, l(6)
        ushr r13.zw, r16.wwwz, r12.wwww
        or r12.w, r18.z, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r12.w, r12.w, r13.z
        and r12.w, r12.w, l(1023)
        iadd r19.x, r12.w, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
        iadd r19.yz, r18.yyyy, l(0, 1, 2, 0)
        iadd r12.w, -r19.y, l(6)
        ushr r13.zw, r16.wwwz, r12.wwww
        and r12.w, r19.w, l(0xc0000000)
        or r18.y, r19.w, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r18.y, r13.z
        and r13.z, r13.z, l(1023)
        iadd r20.x, r13.z, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
        mov r20.y, r19.z
        movc r20.xyz, r12.wwww, r19.xywx, r20.xyzx
        iadd r13.z, -r20.y, l(6)
        ushr r13.zw, r16.wwwz, r13.zzzz
        and r18.y, r20.z, l(0xc0000000)
        or r18.w, r20.z, l(0x40000000)
        bfi r13.w, l(1), l(1), r13.w, l(0)
        bfi r13.z, l(1), l(0), r13.z, r13.w
        imul null, r13.z, r13.z, l(10)
        ushr r13.z, r18.w, r13.z
        and r13.z, r13.z, l(1023)
        iadd r21.x, r13.z, r20.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r21.y, r21.x, l(0), t23.xxxx
        movc r13.zw, r18.yyyy, r20.xxxz, r21.xxxy
        movc r18.xz, r12.wwww, r19.xxwx, r13.zzwz
      endif 
      and r12.w, r18.z, l(0xc0000000)
      if_z r12.w
        ubfe r13.z, l(14), l(15), r18.z
        utof r13.z, r13.z
        mul r13.z, r13.z, cb2[27].w
        and r18.yw, r18.zzzz, l(0, 0x00007fff, 0, 0x20000000)
        utof r13.w, r18.y
        mul r13.w, r13.w, cb2[27].w
        mul r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.00006104, 0.00003052)
        and r18.y, r16.z, l(3)
        iadd r18.y, r18.y, r18.x
        iadd r18.y, r18.y, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.y, r18.y, l(0), t23.xxxx
        bfi r19.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r16.yzwy, l(0, 0, 0, 0)
        ushr r16.y, r18.y, r19.x
        and r16.y, r16.y, l(255)
        utof r16.y, r16.y
        mul r16.y, r13.w, r16.y
        mad r16.y, r16.y, l(0.00392157), r13.z
        iadd r16.z, r19.y, l(1)
        ubfe r16.w, l(1), l(1), r16.w
        iadd r16.z, r16.w, r16.z
        iadd r16.z, r16.z, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.z, r16.z, l(0), t23.xxxx
        ushr r16.z, r16.z, r19.z
        and r16.z, r16.z, l(0x0000ffff)
        utof r16.z, r16.z
        mul r13.w, r13.w, r16.z
        mad r13.z, r13.w, l(0.00001526), r13.z
        movc r14.w, r18.w, r16.y, r13.z
      else 
        and r13.z, r18.z, l(0x80000000)
        iadd r13.w, r18.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.w, l(0), t23.xxxx
        movc r13.z, r13.z, r13.w, l(0)
        ishl r13.w, r18.z, l(2)
        ushr r16.y, r13.z, l(16)
        f16tof32 r16.y, r16.y
        and r13.z, r13.z, l(0x0000ffff)
        f16tof32 r13.z, r13.z
        mad r13.w, r15.y, r16.y, r13.w
        mad r13.z, r15.z, r13.z, r13.w
        movc r14.w, r12.w, r13.z, r14.w
      endif 
    endif 
    mad r12.w, -cb2[27].z, l(2.000000), r15.w
    lt r12.w, r14.w, r12.w
    movc r7.w, r12.w, l(0), l(1.000000)
  endif 
  if_z r10.w
    if_z cb2[58].y
      ftou r10.w, r8.w
      add r13.zw, r15.yyyz, -cb2[r10.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r10.w + 20].zzzz
      mad r18.xy, r13.zwzz, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r10.w, cb2[26].y
      add r18.z, r8.w, r10.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r18.xyzx, t13.xxxx, s13, r6.w
      sample_l_indexable(texture2darray)(float,float,float,float) r12.w, r18.xyzx, t31.yzwx, s0, l(0.000000)
      add r10.w, r10.w, r12.w
      add_sat r10.w, r10.w, l(-1.000000)
      mul r12.w, r10.w, r10.w
      mul r7.w, r10.w, r12.w
    endif 
    if_nz cb2[58].y
      mov r18.x, -r13.x
      ftou r10.w, r8.w
      add r8.w, r8.w, l(1.000000)
      min r8.w, r8.w, l(2.000000)
      ftou r8.w, r8.w
      add r9.w, -r9.w, l(1.000000)
      mul r9.w, r9.w, l(28.000000)
      ftou r9.w, r9.w
      add r13.zw, r15.yyyz, -cb2[r10.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r10.w + 20].zzzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r15.yz, r15.yyzy, -cb2[r8.w + 20].xxyx
      mul r15.yz, r15.yyzy, cb2[r8.w + 20].zzzz
      mad r15.yz, r15.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r18.y, r14.x
      mov r18.z, r13.x
      mov r12.w, l(0)
      mov r14.w, l(0)
      loop 
        uge r15.w, r14.w, l(8)
        breakc_nz r15.w
        ult r15.w, r9.w, r14.w
        movc r16.yz, r15.wwww, r15.yyzy, r13.zzwz
        movc r16.w, r15.w, cb2[r8.w + 20].w, cb2[r10.w + 20].w
        movc r15.w, r15.w, r8.w, r10.w
        dp2 r19.x, icb[r14.w + 0].yxyy, r18.xyxx
        dp2 r19.y, icb[r14.w + 0].yxyy, r18.yzyy
        mad r19.xy, r19.xyxx, r16.wwww, r16.yzyy
        iadd r15.w, r15.w, cb2[26].y
        utof r19.z, r15.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r19.xyzx, t13.xxxx, s13, r6.w
        sample_l_indexable(texture2darray)(float,float,float,float) r16.y, r19.xyzx, t31.yxzw, s0, l(0.000000)
        add r15.w, r15.w, r16.y
        add_sat r15.w, r15.w, l(-1.000000)
        mad r12.w, r15.w, l(0.125000), r12.w
        iadd r14.w, r14.w, l(1)
      endloop 
      mul r6.w, r12.w, r12.w
      mul r7.w, r12.w, r6.w
    endif 
  endif 
endif 
add r6.w, -r2.y, l(1.000000)
mul r8.w, r6.w, l(5.000000)
mad r9.w, r6.w, l(5.000000), l(-2.500000)
mul r9.w, r9.w, l(0.400000)
max r9.w, r9.w, l(0.000000)
mul r9.w, r9.w, l(100.000000)
mad r13.zw, -r6.wwww, l(0.000000, 0.000000, 10.000000, 5.000000), l(0.000000, 0.000000, 6.857410, 7.085000)
exp r10.w, r13.z
mul r10.w, r2.x, r10.w
mul r10.w, r10.w, l(9.136810)
mul r12.w, r6.w, r8.w
mad r12.w, -r12.w, l(2.015905), r13.w
exp r12.w, r12.w
mul r12.w, r2.x, r12.w
mul r12.w, r12.w, l(9.708090)
max r10.w, r10.w, r12.w
max r10.w, r10.w, l(1.268160)
iadd r12.w, cb2[0].y, -cb2[58].x
ushr r0.y, r0.y, l(24)
uge r13.z, r0.y, r12.w
ult r13.w, r0.y, cb2[0].y
and r13.z, r13.w, r13.z
if_nz r13.z
  imul null, r13.z, r0.y, l(14)
  if_nz r2.w
    add r18.yzw, cb1[24].xxyz, cb10[r13.z + 0].xxyz
    mov r18.x, l(16)
    store_structured u2.xyzw, cb2[52].x, l(880), r18.xyzw
  endif 
  add r15.yzw, r5.xxyz, -cb10[r13.z + 0].xxyz
  and r13.w, l(0x0000ffff), cb10[r13.z + 7].z
  ubfe r14.w, l(6), l(25), cb10[r13.z + 7].z
  imul null, r16.y, r13.w, l(6)
  dp3 r16.z, cb11[r16.y + 0].xyzx, r15.yzwy
  add_sat r16.z, r16.z, cb11[r16.y + 0].w
  dp3 r16.w, cb11[r16.y + 1].xyzx, r15.yzwy
  add_sat r16.w, r16.w, cb11[r16.y + 1].w
  mul r16.z, r16.w, r16.z
  dp3 r16.w, cb11[r16.y + 2].xyzx, r15.yzwy
  add_sat r16.w, r16.w, cb11[r16.y + 2].w
  mul r16.z, r16.w, r16.z
  dp3 r16.w, cb11[r16.y + 3].xyzx, r15.yzwy
  add_sat r16.w, r16.w, cb11[r16.y + 3].w
  mul r16.z, r16.w, r16.z
  dp3 r16.w, cb11[r16.y + 4].xyzx, r15.yzwy
  add_sat r16.w, r16.w, cb11[r16.y + 4].w
  mul r16.z, r16.w, r16.z
  dp3 r16.w, cb11[r16.y + 5].xyzx, r15.yzwy
  add_sat r16.y, r16.w, cb11[r16.y + 5].w
  mul r18.x, r16.y, r16.z
  and r16.y, l(1), cb10[r13.z + 6].x
  mov r18.yz, l(0,0,1.000000,0)
  movc r16.yz, r16.yyyy, r18.xxyx, r18.zzxz
  mov r18.x, l(1.000000)
  mov r16.w, cb10[r13.z + 6].x
  mov r19.xy, r16.yzyy
  mov r18.z, l(1)
  loop 
    ige r18.w, r18.z, r14.w
    breakc_nz r18.w
    iadd r18.w, r13.w, r18.z
    imul null, r18.w, r18.w, l(6)
    dp3 r19.z, cb11[r18.w + 0].xyzx, r15.yzwy
    add_sat r19.z, r19.z, cb11[r18.w + 0].w
    mul r19.z, r19.z, r19.x
    dp3 r19.w, cb11[r18.w + 1].xyzx, r15.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 1].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 2].xyzx, r15.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 2].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 3].xyzx, r15.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 3].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 4].xyzx, r15.yzwy
    add_sat r19.w, r19.w, cb11[r18.w + 4].w
    mul r19.z, r19.w, r19.z
    dp3 r19.w, cb11[r18.w + 5].xyzx, r15.yzwy
    add_sat r18.w, r19.w, cb11[r18.w + 5].w
    mul r19.x, r18.w, r19.z
    ushr r19.w, r16.w, l(2)
    ubfe r20.x, l(1), l(2), r16.w
    and r20.y, r19.w, l(2)
    max r20.z, r19.x, r19.y
    mad r18.w, -r19.z, r18.w, l(1.000000)
    mul r18.w, r18.w, r19.y
    movc r18.y, r20.y, r18.w, r20.z
    movc r19.xy, r20.xxxx, r19.xyxx, r18.xyxx
    iadd r18.z, r18.z, l(1)
    mov r16.w, r19.w
  endloop 
  mov_sat r19.y, r19.y
  mul r13.w, r19.y, cb10[r13.z + 6].y
  lt r14.w, l(0.000000), r13.w
  if_nz r14.w
    if_nz r2.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r14.w, cb2[52].x, l(880), u2.xxxx
      or r14.w, r14.w, l(32)
      store_structured u2.x, cb2[52].x, l(880), r14.w
      store_structured u2.x, cb2[52].x, l(896), r13.w
    endif 
    mul r14.w, r13.w, cb10[r13.z + 7].y
    mov r18.x, cb10[r13.z + 7].w
    mov r18.yz, cb10[r13.z + 8].xxyx
    dp3 r16.y, r17.xyzx, r18.xyzx
    dp3 r16.z, r15.yzwy, r18.xyzx
    add r16.z, r16.z, -cb10[r13.z + 8].z
    ge r16.w, r16.z, l(0.000000)
    max r16.z, r9.w, |r16.z|
    movc r16.z, r16.w, r16.z, -r16.z
    max r16.y, -r16.y, l(0.00000010)
    div r16.y, r16.z, r16.y
    min r16.y, |r16.y|, l(131072.000000)
    mov r18.x, cb10[r13.z + 8].w
    mov r18.yz, cb10[r13.z + 9].xxyx
    dp3 r16.z, r17.xyzx, r18.xyzx
    dp3 r16.w, r15.yzwy, r18.xyzx
    add r16.w, r16.w, -cb10[r13.z + 9].z
    ge r18.x, r16.w, l(0.000000)
    max r16.w, r9.w, |r16.w|
    movc r16.w, r18.x, r16.w, -r16.w
    max r16.z, -r16.z, l(0.00000010)
    div r16.z, r16.w, r16.z
    min r16.y, |r16.z|, r16.y
    mov r18.x, cb10[r13.z + 9].w
    mov r18.yz, cb10[r13.z + 10].xxyx
    dp3 r16.z, r17.xyzx, r18.xyzx
    dp3 r16.w, r15.yzwy, r18.xyzx
    add r16.w, r16.w, -cb10[r13.z + 10].z
    ge r18.x, r16.w, l(0.000000)
    max r16.w, r9.w, |r16.w|
    movc r16.w, r18.x, r16.w, -r16.w
    max r16.z, -r16.z, l(0.00000010)
    div r16.z, r16.w, r16.z
    min r16.y, |r16.z|, r16.y
    mov r18.x, cb10[r13.z + 10].w
    mov r18.yz, cb10[r13.z + 11].xxyx
    dp3 r16.z, r17.xyzx, r18.xyzx
    dp3 r16.w, r15.yzwy, r18.xyzx
    add r16.w, r16.w, -cb10[r13.z + 11].z
    ge r18.x, r16.w, l(0.000000)
    max r16.w, r9.w, |r16.w|
    movc r16.w, r18.x, r16.w, -r16.w
    max r16.z, -r16.z, l(0.00000010)
    div r16.z, r16.w, r16.z
    min r16.y, |r16.z|, r16.y
    mov r18.x, cb10[r13.z + 11].w
    mov r18.yz, cb10[r13.z + 12].xxyx
    dp3 r16.z, r17.xyzx, r18.xyzx
    dp3 r16.w, r15.yzwy, r18.xyzx
    add r16.w, r16.w, -cb10[r13.z + 12].z
    ge r18.x, r16.w, l(0.000000)
    max r16.w, r9.w, |r16.w|
    movc r16.w, r18.x, r16.w, -r16.w
    max r16.z, -r16.z, l(0.00000010)
    div r16.z, r16.w, r16.z
    min r16.y, |r16.z|, r16.y
    mov r18.x, cb10[r13.z + 12].w
    mov r18.yz, cb10[r13.z + 13].xxyx
    dp3 r16.z, r17.xyzx, r18.xyzx
    dp3 r16.w, r15.yzwy, r18.xyzx
    add r16.w, r16.w, -cb10[r13.z + 13].z
    ge r18.x, r16.w, l(0.000000)
    max r16.w, r9.w, |r16.w|
    movc r16.w, r18.x, r16.w, -r16.w
    max r16.z, -r16.z, l(0.00000010)
    div r16.z, r16.w, r16.z
    min r16.y, |r16.z|, r16.y
    add r18.x, r15.y, cb10[r13.z + 3].w
    add r18.yz, r15.zzwz, cb10[r13.z + 4].xxyx
    mad r18.xyz, r17.xyzx, r16.yyyy, r18.xyzx
    dp3 r16.z, r18.xyzx, r18.xyzx
    sqrt r16.z, r16.z
    div r16.y, r16.y, r16.z
    add r16.y, r16.y, r16.y
    sqrt r16.y, r16.y
    mad r16.y, r6.w, l(5.000000), r16.y
    add r16.y, r16.y, l(-0.844800)
    mov r19.x, cb10[r13.z + 0].w
    mov r19.y, cb10[r13.z + 1].z
    mov r19.z, cb10[r13.z + 2].y
    dp3 r20.x, r18.xyzx, r19.xyzx
    mov r21.xy, cb10[r13.z + 1].xwxx
    mov r21.z, cb10[r13.z + 2].z
    dp3 r20.y, r18.xyzx, r21.xyzx
    mov r22.x, cb10[r13.z + 1].y
    mov r22.yz, cb10[r13.z + 2].xxwx
    dp3 r20.z, r18.xyzx, r22.xyzx
    ubfe r16.z, l(9), l(16), cb10[r13.z + 7].z
    utof r20.w, r16.z
    sample_l_indexable(texturecubearray)(float,float,float,float) r16.yzw, r20.xyzw, t8.wxyz, s2, r16.y
    and r18.xyz, r16.yzwy, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r18.xyz, r18.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r18.x, r18.y, r18.x
    or r18.x, r18.z, r18.x
    movc r16.yzw, r18.xxxx, l(0,1.000000,1.000000,0), r16.yyzw
    dp3 r18.x, r15.yzwy, r19.xyzx
    dp3 r18.y, r15.yzwy, r21.xyzx
    dp3 r18.z, r15.yzwy, r22.xyzx
    mad_sat r15.yzw, r18.xxyz, cb10[r13.z + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    mul r18.xy, r15.yzyy, cb10[r13.z + 4].zwzz
    mul r18.z, r15.w, cb10[r13.z + 5].x
    add r15.yzw, r18.xxyz, cb10[r13.z + 5].yyzw
    dp3 r20.x, r11.xyzx, r19.xyzx
    dp3 r20.y, r11.xyzx, r21.xyzx
    dp3 r20.z, r11.xyzx, r22.xyzx
    lt r18.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r20.xyzx
    movc r19.z, r18.x, l(0), l(0.500000)
    mov r19.xy, l(0,0,0,0)
    add r19.xyz, r15.yzwy, r19.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t17.xyzw, s4, l(0.000000)
    mul r21.xyz, r20.xyzx, r20.xyzx
    mul r21.xyz, r14.wwww, r21.xyzx
    movc r22.z, r18.y, l(0), l(0.500000)
    mov r22.xy, l(0,0,0,0)
    add r18.xyw, r15.yzyw, r22.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyw, r18.xywx, t18.xywz, s4, l(0.000000)
    mul r18.xyw, r21.yyyy, r18.xyxw
    mad r18.xyw, r19.xyxz, r21.xxxx, r18.xyxw
    movc r19.z, r18.z, l(0), l(0.500000)
    mov r19.xy, l(0,0,0,0)
    add r15.yzw, r15.yyzw, r19.xxyz
    sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t19.wxyz, s4, l(0.000000)
    mad r15.yzw, r15.yyzw, r21.zzzz, r18.xxyw
    sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r20.xyzw, t8.xyzw, s2, l(6.000000)
    and r19.xyz, r18.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r19.xyz, r19.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r13.z, r19.y, r19.x
    or r13.z, r19.z, r13.z
    movc r18.xyz, r13.zzzz, l(1.000000,1.000000,0,0), r18.xyzx
    mul r15.yzw, r15.yyzw, r18.xxyz
    dp3 r13.z, r15.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r18.x, r10.w, r13.z
    mul r16.yzw, r14.wwww, r16.yyzw
    dp3 r14.w, r16.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r13.z, r10.w, r13.z, r14.w
    div r13.z, r18.x, r13.z
    mul r16.yzw, r13.zzzz, r16.yyzw
    mov r13.z, l(257)
  else 
    mov r15.yzw, l(0,0,0,0)
    mov r16.yzw, l(0,0,0,0)
    mov r13.zw, l(0,0,1,0)
  endif 
else 
  mov r15.yzw, l(0,0,0,0)
  mov r16.yzw, l(0,0,0,0)
  mov r13.zw, l(0,0,0,0)
endif 
ult r12.w, r0.y, r12.w
if_nz r12.w
  imul null, r0.y, r0.y, l(14)
  if_nz r2.w
    and r12.w, r13.z, l(1)
    imad r12.w, r12.w, l(20), l(880)
    add r18.yzw, cb1[24].xxyz, cb10[r0.y + 0].xxyz
    mov r18.x, l(16)
    store_structured u2.xyzw, cb2[52].x, r12.w, r18.xyzw
  endif 
  iadd r12.w, r13.z, l(1)
  add r18.xyz, r5.xyzx, -cb10[r0.y + 0].xyzx
  and r14.w, l(0x0000ffff), cb10[r0.y + 7].z
  ubfe r18.w, l(6), l(25), cb10[r0.y + 7].z
  imul null, r19.x, r14.w, l(6)
  dp3 r19.y, cb11[r19.x + 0].xyzx, r18.xyzx
  add_sat r19.y, r19.y, cb11[r19.x + 0].w
  dp3 r19.z, cb11[r19.x + 1].xyzx, r18.xyzx
  add_sat r19.z, r19.z, cb11[r19.x + 1].w
  mul r19.y, r19.z, r19.y
  dp3 r19.z, cb11[r19.x + 2].xyzx, r18.xyzx
  add_sat r19.z, r19.z, cb11[r19.x + 2].w
  mul r19.y, r19.z, r19.y
  dp3 r19.z, cb11[r19.x + 3].xyzx, r18.xyzx
  add_sat r19.z, r19.z, cb11[r19.x + 3].w
  mul r19.y, r19.z, r19.y
  dp3 r19.z, cb11[r19.x + 4].xyzx, r18.xyzx
  add_sat r19.z, r19.z, cb11[r19.x + 4].w
  mul r19.y, r19.z, r19.y
  dp3 r19.z, cb11[r19.x + 5].xyzx, r18.xyzx
  add_sat r19.x, r19.z, cb11[r19.x + 5].w
  mul r19.x, r19.x, r19.y
  and r19.w, l(1), cb10[r0.y + 6].x
  mov r19.yz, l(0,0,1.000000,0)
  movc r19.xy, r19.wwww, r19.xyxx, r19.zxzz
  mov r20.x, l(1.000000)
  mov r19.z, cb10[r0.y + 6].x
  mov r21.xy, r19.xyxx
  mov r19.w, l(1)
  loop 
    ige r20.z, r19.w, r18.w
    breakc_nz r20.z
    iadd r20.z, r14.w, r19.w
    imul null, r20.z, r20.z, l(6)
    dp3 r20.w, cb11[r20.z + 0].xyzx, r18.xyzx
    add_sat r20.w, r20.w, cb11[r20.z + 0].w
    mul r20.w, r20.w, r21.x
    dp3 r21.z, cb11[r20.z + 1].xyzx, r18.xyzx
    add_sat r21.z, r21.z, cb11[r20.z + 1].w
    mul r20.w, r20.w, r21.z
    dp3 r21.z, cb11[r20.z + 2].xyzx, r18.xyzx
    add_sat r21.z, r21.z, cb11[r20.z + 2].w
    mul r20.w, r20.w, r21.z
    dp3 r21.z, cb11[r20.z + 3].xyzx, r18.xyzx
    add_sat r21.z, r21.z, cb11[r20.z + 3].w
    mul r20.w, r20.w, r21.z
    dp3 r21.z, cb11[r20.z + 4].xyzx, r18.xyzx
    add_sat r21.z, r21.z, cb11[r20.z + 4].w
    mul r20.w, r20.w, r21.z
    dp3 r21.z, cb11[r20.z + 5].xyzx, r18.xyzx
    add_sat r20.z, r21.z, cb11[r20.z + 5].w
    mul r21.x, r20.z, r20.w
    ushr r21.z, r19.z, l(2)
    ubfe r21.w, l(1), l(2), r19.z
    and r22.x, r21.z, l(2)
    max r22.y, r21.x, r21.y
    mad r20.z, -r20.w, r20.z, l(1.000000)
    mul r20.z, r20.z, r21.y
    movc r20.y, r22.x, r20.z, r22.y
    movc r21.xy, r21.wwww, r21.xyxx, r20.xyxx
    iadd r19.w, r19.w, l(1)
    mov r19.z, r21.z
  endloop 
  add_sat r14.w, -r13.w, r21.y
  mul r18.w, r14.w, cb10[r0.y + 6].y
  lt r19.x, l(0.000000), r18.w
  if_nz r19.x
    and r19.x, r12.w, l(3)
    iadd r19.y, r19.x, l(-1)
    ult r19.y, r19.y, l(32)
    and r19.y, r2.w, r19.y
    if_nz r19.y
      imad r19.xy, r19.xxxx, l(20, 20, 0, 0), l(860, 876, 0, 0)
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r19.z, cb2[52].x, r19.x, u2.xxxx
      or r19.z, r19.z, l(32)
      store_structured u2.x, cb2[52].x, r19.x, r19.z
      store_structured u2.x, cb2[52].x, r19.y, r18.w
    endif 
    iadd r12.w, r13.z, l(257)
    mad r14.w, r14.w, cb10[r0.y + 6].y, r13.w
    mul r18.w, r18.w, cb10[r0.y + 7].y
    mov r19.x, cb10[r0.y + 7].w
    mov r19.yz, cb10[r0.y + 8].xxyx
    dp3 r19.w, r17.xyzx, r19.xyzx
    dp3 r19.x, r18.xyzx, r19.xyzx
    add r19.x, r19.x, -cb10[r0.y + 8].z
    ge r19.y, r19.x, l(0.000000)
    max r19.x, r9.w, |r19.x|
    movc r19.x, r19.y, r19.x, -r19.x
    max r19.y, -r19.w, l(0.00000010)
    div r19.x, r19.x, r19.y
    min r19.x, |r19.x|, l(131072.000000)
    mov r20.x, cb10[r0.y + 8].w
    mov r20.yz, cb10[r0.y + 9].xxyx
    dp3 r19.y, r17.xyzx, r20.xyzx
    dp3 r19.z, r18.xyzx, r20.xyzx
    add r19.z, r19.z, -cb10[r0.y + 9].z
    ge r19.w, r19.z, l(0.000000)
    max r19.z, r9.w, |r19.z|
    movc r19.z, r19.w, r19.z, -r19.z
    max r19.y, -r19.y, l(0.00000010)
    div r19.y, r19.z, r19.y
    min r19.x, |r19.y|, r19.x
    mov r20.x, cb10[r0.y + 9].w
    mov r20.yz, cb10[r0.y + 10].xxyx
    dp3 r19.y, r17.xyzx, r20.xyzx
    dp3 r19.z, r18.xyzx, r20.xyzx
    add r19.z, r19.z, -cb10[r0.y + 10].z
    ge r19.w, r19.z, l(0.000000)
    max r19.z, r9.w, |r19.z|
    movc r19.z, r19.w, r19.z, -r19.z
    max r19.y, -r19.y, l(0.00000010)
    div r19.y, r19.z, r19.y
    min r19.x, |r19.y|, r19.x
    mov r20.x, cb10[r0.y + 10].w
    mov r20.yz, cb10[r0.y + 11].xxyx
    dp3 r19.y, r17.xyzx, r20.xyzx
    dp3 r19.z, r18.xyzx, r20.xyzx
    add r19.z, r19.z, -cb10[r0.y + 11].z
    ge r19.w, r19.z, l(0.000000)
    max r19.z, r9.w, |r19.z|
    movc r19.z, r19.w, r19.z, -r19.z
    max r19.y, -r19.y, l(0.00000010)
    div r19.y, r19.z, r19.y
    min r19.x, |r19.y|, r19.x
    mov r20.x, cb10[r0.y + 11].w
    mov r20.yz, cb10[r0.y + 12].xxyx
    dp3 r19.y, r17.xyzx, r20.xyzx
    dp3 r19.z, r18.xyzx, r20.xyzx
    add r19.z, r19.z, -cb10[r0.y + 12].z
    ge r19.w, r19.z, l(0.000000)
    max r19.z, r9.w, |r19.z|
    movc r19.z, r19.w, r19.z, -r19.z
    max r19.y, -r19.y, l(0.00000010)
    div r19.y, r19.z, r19.y
    min r19.x, |r19.y|, r19.x
    mov r20.x, cb10[r0.y + 12].w
    mov r20.yz, cb10[r0.y + 13].xxyx
    dp3 r19.y, r17.xyzx, r20.xyzx
    dp3 r19.z, r18.xyzx, r20.xyzx
    add r19.z, r19.z, -cb10[r0.y + 13].z
    ge r19.w, r19.z, l(0.000000)
    max r9.w, r9.w, |r19.z|
    movc r9.w, r19.w, r9.w, -r9.w
    max r19.y, -r19.y, l(0.00000010)
    div r9.w, r9.w, r19.y
    min r9.w, |r9.w|, r19.x
    add r19.x, r18.x, cb10[r0.y + 3].w
    add r19.yz, r18.yyzy, cb10[r0.y + 4].xxyx
    mad r19.xyz, r17.xyzx, r9.wwww, r19.xyzx
    dp3 r19.w, r19.xyzx, r19.xyzx
    sqrt r19.w, r19.w
    div r9.w, r9.w, r19.w
    add r9.w, r9.w, r9.w
    sqrt r9.w, r9.w
    mad r6.w, r6.w, l(5.000000), r9.w
    add r6.w, r6.w, l(-0.844800)
    mov r20.x, cb10[r0.y + 0].w
    mov r20.y, cb10[r0.y + 1].z
    mov r20.z, cb10[r0.y + 2].y
    dp3 r21.x, r19.xyzx, r20.xyzx
    mov r22.xy, cb10[r0.y + 1].xwxx
    mov r22.z, cb10[r0.y + 2].z
    dp3 r21.y, r19.xyzx, r22.xyzx
    mov r23.x, cb10[r0.y + 1].y
    mov r23.yz, cb10[r0.y + 2].xxwx
    dp3 r21.z, r19.xyzx, r23.xyzx
    ubfe r9.w, l(9), l(16), cb10[r0.y + 7].z
    utof r21.w, r9.w
    sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r21.xyzw, t8.xyzw, s2, r6.w
    and r24.xyz, r19.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r24.xyz, r24.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r6.w, r24.y, r24.x
    or r6.w, r24.z, r6.w
    movc r19.xyz, r6.wwww, l(1.000000,1.000000,0,0), r19.xyzx
    dp3 r24.x, r18.xyzx, r20.xyzx
    dp3 r24.y, r18.xyzx, r22.xyzx
    dp3 r24.z, r18.xyzx, r23.xyzx
    mad_sat r18.xyz, r24.xyzx, cb10[r0.y + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r24.xy, r18.xyxx, cb10[r0.y + 4].zwzz
    mul r24.z, r18.z, cb10[r0.y + 5].x
    add r18.xyz, r24.xyzx, cb10[r0.y + 5].yzwy
    dp3 r21.x, r11.xyzx, r20.xyzx
    dp3 r21.y, r11.xyzx, r22.xyzx
    dp3 r21.z, r11.xyzx, r23.xyzx
    lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r21.xyzx
    movc r22.z, r20.x, l(0), l(0.500000)
    mov r22.xy, l(0,0,0,0)
    add r22.xyz, r18.xyzx, r22.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t17.xyzw, s4, l(0.000000)
    mul r23.xyz, r21.xyzx, r21.xyzx
    mul r23.xyz, r18.wwww, r23.xyzx
    movc r24.z, r20.y, l(0), l(0.500000)
    mov r24.xy, l(0,0,0,0)
    add r20.xyw, r18.xyxz, r24.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r20.xyw, r20.xywx, t18.xywz, s4, l(0.000000)
    mul r20.xyw, r23.yyyy, r20.xyxw
    mad r20.xyw, r22.xyxz, r23.xxxx, r20.xyxw
    movc r22.z, r20.z, l(0), l(0.500000)
    mov r22.xy, l(0,0,0,0)
    add r18.xyz, r18.xyzx, r22.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t19.xyzw, s4, l(0.000000)
    mad r18.xyz, r18.xyzx, r23.zzzz, r20.xywx
    sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r21.xyzw, t8.xyzw, s2, l(6.000000)
    and r21.xyz, r20.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r21.xyz, r21.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r0.y, r21.y, r21.x
    or r0.y, r21.z, r0.y
    movc r20.xyz, r0.yyyy, l(1.000000,1.000000,0,0), r20.xyzx
    mul r21.xyz, r18.xyzx, r20.xyzx
    dp3 r0.y, r21.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r15.yzw, r18.xxyz, r20.xxyz, r15.yyzw
    mul r6.w, r0.y, r10.w
    mul r18.xyz, r18.wwww, r19.xyzx
    dp3 r9.w, r18.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r0.y, r10.w, r0.y, r9.w
    div r0.y, r6.w, r0.y
    mad r16.yzw, r18.xxyz, r0.yyyy, r16.yyzw
  else 
    mov r14.w, r13.w
  endif 
else 
  mov r14.w, r13.w
  mov r12.w, r13.z
endif 
ge r0.y, r13.w, l(1.000000)
bfi r6.w, l(8), l(0), r12.w, r13.z
movc r0.y, r0.y, r6.w, r12.w
max r6.w, r14.w, l(1.000000)
rcp r6.w, r6.w
mov_sat r14.w, r14.w
mul r18.xyz, r6.wwww, r15.yzwy
mul r16.yzw, r6.wwww, r16.yyzw
lt r9.w, r14.w, l(0.990000)
if_nz r9.w
  iadd r0.y, r0.y, l(256)
  add r9.w, -r14.w, l(1.000000)
  mul r10.w, r9.w, cb2[19].x
  add r19.xyz, r5.xyzx, -cb2[35].xyzx
  mul r20.x, r19.x, cb2[35].w
  mul r20.yz, r19.yyzy, cb2[36].xxyx
  add_sat r19.xyz, r20.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r20.xy, r19.xyxx, cb2[36].zwzz
  mul r20.z, r19.z, cb2[37].x
  add r19.xyz, r20.xyzx, cb2[37].yzwy
  lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r20.xyz, r20.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r20.w, l(0)
  add r21.xyz, r19.xyzx, r20.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t17.xyzw, s4, l(0.000000)
  mul r22.xyz, r11.xyzx, r11.xyzx
  mul r22.xyz, r10.wwww, r22.xyzx
  add r23.xyz, r19.xyzx, r20.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r23.xyz, r23.xyzx, t18.xyzw, s4, l(0.000000)
  mul r23.xyz, r22.yyyy, r23.xyzx
  mad r21.xyz, r21.xyzx, r22.xxxx, r23.xyzx
  add r19.xyz, r19.xyzx, r20.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t19.xyzw, s4, l(0.000000)
  mad r19.xyz, r19.xyzx, r22.zzzz, r21.xyzx
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r19.xyz, r19.xyzx, r20.xyzx
  dp3 r10.w, r19.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r18.xyz, r15.yzwy, r6.wwww, r19.xyzx
  mov r17.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r17.xyzw, t8.wxyz, s2, r8.w
  mad r6.w, cb2[19].x, r9.w, -r10.w
  mad r6.w, r2.y, r6.w, r10.w
  mad r16.yzw, r15.yyzw, r6.wwww, r16.yyzw
endif 
add r6.w, r4.z, r2.x
log r6.w, |r6.w|
mul r6.w, r2.z, r6.w
exp r6.w, r6.w
add r6.w, r4.z, r6.w
add_sat r6.w, r6.w, l(-1.000000)
mul r19.xyz, r4.zzzz, r18.xyzx
and r20.xyz, r0.wwww, r19.yzxy
mad r13.zw, r2.xxxy, l(0.000000, 0.000000, 0.984375, 0.984375), l(0.000000, 0.000000, 0.00781250, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r13.zw, r13.zwzz, t5.zwxy, s2, l(0.000000)
mul r15.yzw, r6.wwww, r16.yyzw
mul r16.yzw, r13.zzzz, r15.yyzw
mul r21.xyz, r13.wwww, r15.yzwy
sqrt r2.y, r2.z
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r6.w, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r8.w, r2.x, r2.y, r6.w
mul r2.y, r2.y, r8.w
mul r6.w, r6.w, r8.w
if_nz r2.w
  mov r22.x, l(3)
  mov r22.yzw, cb1[24].xxyz
  store_structured u2.xyzw, cb2[52].x, l(112), r22.xyzw
endif 
lt r8.w, l(0.000000), r3.w
if_nz r8.w
  if_nz r2.w
    ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r8.w, cb2[52].x, l(112), u2.xxxx
    or r8.w, r8.w, l(4)
    store_structured u2.x, cb2[52].x, l(112), r8.w
    store_structured u2.x, cb2[52].x, l(128), r7.w
  endif 
  lt r8.w, l(0.000000), r7.w
  if_nz r8.w
    mul r8.w, r1.w, cb2[18].w
    mul r8.w, r3.z, r8.w
    if_nz cb2[23].x
      add r22.xyz, r5.xyzx, cb1[24].xyzx
      mov r22.w, l(1.000000)
      dp4 r9.w, cb2[24].xyzw, r22.xyzw
      dp4 r10.w, cb2[25].xyzw, r22.xyzw
      frc r22.x, r9.w
      frc r22.y, r10.w
      iadd r9.w, l(-1), cb2[23].x
      utof r22.z, r9.w
      sample_l_indexable(texture2darray)(float,float,float,float) r15.yzw, r22.xyzx, t20.wxyz, s2, l(0.000000)
      add r15.yzw, r15.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
      mad r15.yzw, cb2[23].yyyy, r15.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      mul r15.yzw, r15.yyzw, cb2[18].xxyz
    else 
      mov r15.yzw, cb2[18].xxyz
    endif 
    ushr r9.w, cb2[53].x, l(16)
    ult r10.w, l(0), r9.w
    and r10.w, r3.x, r10.w
    if_nz r10.w
      iadd r9.w, r9.w, cb2[0].x
      imad r9.w, r9.w, l(15), l(-15)
      mad r10.w, |r3.y|, l(-0.200000), l(0.400000)
      lt r11.w, r3.y, l(0.000000)
      and r11.w, r0.w, r11.w
      movc r10.w, r11.w, -r10.w, r10.w
      mad r22.xyz, r11.xyzx, r10.wwww, r5.xyzx
      mov r23.xyz, cb9[r9.w + 4].yzwy
      mov r23.w, cb9[r9.w + 5].x
      mov r22.w, l(1.000000)
      dp4 r23.x, r23.xyzw, r22.xyzw
      mov r24.xyz, cb9[r9.w + 5].yzwy
      mov r24.w, cb9[r9.w + 6].x
      dp4 r23.y, r24.xyzw, r22.xyzw
      mad r13.zw, r23.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r23.x, r13.z, cb9[r9.w + 9].w
      add r23.y, r13.w, cb9[r9.w + 10].x
      mul r13.zw, r23.xxxy, cb9[r9.w + 9].yyyz
      div r23.xy, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].ywyy
      add r23.zw, -r23.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      ge r23.zw, r13.zzzw, r23.zzzw
      ge r23.xy, r23.xyxx, r13.zwzz
      or r23.xy, r23.xyxx, r23.zwzz
      or r10.w, r23.y, r23.x
      if_z r10.w
        mov r23.xyz, cb9[r9.w + 6].yzwy
        mov r23.w, cb9[r9.w + 7].x
        dp4 r10.w, r23.xyzw, r22.xyzw
        mov_sat r13.zw, r13.zzzw
        mad r22.x, r13.z, cb9[r9.w + 8].y, cb9[r9.w + 8].z
        mad r22.y, r13.w, cb9[r9.w + 8].w, cb9[r9.w + 9].x
        add r10.w, r10.w, cb9[r9.w + 10].y
        div r10.w, r10.w, cb9[r9.w + 10].z
        max r10.w, r10.w, l(0.00006104)
        and r11.w, l(0x0000ffff), cb9[r9.w + 1].w
        if_nz cb2[58].y
          mov r23.x, -r13.x
          utof r24.z, r11.w
          mov r23.y, r14.x
          mov r23.z, r13.x
          mov r12.w, l(0)
          mov r13.z, l(0)
          loop 
            ige r13.w, r13.z, l(8)
            breakc_nz r13.w
            dp2 r25.x, icb[r13.z + 0].yxyy, r23.xyxx
            dp2 r25.y, icb[r13.z + 0].yxyy, r23.yzyy
            mad r24.xy, r25.xyxx, cb9[r9.w + 3].yyyy, r22.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r24.xyzx, t9.xxxx, s13, r10.w
            mad r12.w, r13.w, l(0.125000), r12.w
            iadd r13.z, r13.z, l(1)
          endloop 
        else 
          utof r22.z, r11.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r22.xyzx, t9.xxxx, s13, r10.w
        endif 
        mul r9.w, r12.w, r12.w
        mul r9.w, r12.w, r9.w
      else 
        mov r9.w, l(1.000000)
      endif 
      mul r7.w, r7.w, r9.w
    else 
      and r9.w, cb2[53].x, l(0x0000ffff)
      ult r10.w, l(0), r9.w
      not r11.w, r3.x
      and r10.w, r10.w, r11.w
      if_nz r10.w
        iadd r9.w, r9.w, cb2[0].x
        imad r9.w, r9.w, l(15), l(-15)
        mad r10.w, |r3.y|, l(-0.200000), l(0.400000)
        lt r11.w, r3.y, l(0.000000)
        and r11.w, r0.w, r11.w
        movc r10.w, r11.w, -r10.w, r10.w
        mad r22.xyz, r11.xyzx, r10.wwww, r5.xyzx
        mov r23.xyz, cb9[r9.w + 4].yzwy
        mov r23.w, cb9[r9.w + 5].x
        mov r22.w, l(1.000000)
        dp4 r23.x, r23.xyzw, r22.xyzw
        mov r24.xyz, cb9[r9.w + 5].yzwy
        mov r24.w, cb9[r9.w + 6].x
        dp4 r23.y, r24.xyzw, r22.xyzw
        mad r13.zw, r23.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r23.x, r13.z, cb9[r9.w + 9].w
        add r23.y, r13.w, cb9[r9.w + 10].x
        mul r13.zw, r23.xxxy, cb9[r9.w + 9].yyyz
        div r23.xy, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].ywyy
        add r23.zw, -r23.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
        ge r23.zw, r13.zzzw, r23.zzzw
        ge r23.xy, r23.xyxx, r13.zwzz
        or r23.xy, r23.xyxx, r23.zwzz
        or r10.w, r23.y, r23.x
        if_z r10.w
          mov r23.xyz, cb9[r9.w + 6].yzwy
          mov r23.w, cb9[r9.w + 7].x
          dp4 r10.w, r23.xyzw, r22.xyzw
          mov_sat r13.zw, r13.zzzw
          mad r22.x, r13.z, cb9[r9.w + 8].y, cb9[r9.w + 8].z
          mad r22.y, r13.w, cb9[r9.w + 8].w, cb9[r9.w + 9].x
          add r10.w, r10.w, cb9[r9.w + 10].y
          div r10.w, r10.w, cb9[r9.w + 10].z
          max r10.w, r10.w, l(0.00006104)
          and r11.w, l(0x0000ffff), cb9[r9.w + 1].w
          if_nz cb2[58].y
            mov r23.x, -r13.x
            utof r24.z, r11.w
            mov r23.y, r14.x
            mov r23.z, r13.x
            mov r12.w, l(0)
            mov r13.z, l(0)
            loop 
              ige r13.w, r13.z, l(8)
              breakc_nz r13.w
              dp2 r25.x, icb[r13.z + 0].yxyy, r23.xyxx
              dp2 r25.y, icb[r13.z + 0].yxyy, r23.yzyy
              mad r24.xy, r25.xyxx, cb9[r9.w + 3].yyyy, r22.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r24.xyzx, t9.xxxx, s13, r10.w
              mad r12.w, r13.w, l(0.125000), r12.w
              iadd r13.z, r13.z, l(1)
            endloop 
          else 
            utof r22.z, r11.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r22.xyzx, t9.xxxx, s13, r10.w
          endif 
          mul r9.w, r12.w, r12.w
          mul r9.w, r12.w, r9.w
        else 
          mov r9.w, l(1.000000)
        endif 
        mul r7.w, r7.w, r9.w
      endif 
    endif 
    mad r9.w, -r2.x, l(0.500000), l(1.000000)
    mad r9.w, -r3.w, r9.w, l(1.000000)
    mul r9.w, r9.w, r9.w
    mad r9.w, -r9.w, l(0.620000), l(0.620000)
    add r9.w, -r3.w, r9.w
    mad r3.w, r2.z, r9.w, r3.w
    mul r3.w, r7.w, r3.w
    mul r22.xyz, r15.yzwy, r3.wwww
    lt r3.y, l(0.000000), r3.y
    mad r18.xyz, r18.xyzx, r4.zzzz, r22.xyzx
    mad r22.xyz, -r5.xyzx, r1.zzzz, cb2[17].xyzx
    dp3 r1.z, r22.xyzx, r22.xyzx
    rsq r1.z, r1.z
    mul r22.xyz, r1.zzzz, r22.xyzx
    dp3 r1.z, r22.xyzx, r12.xyzx
    dp3 r4.z, r11.xyzx, r22.xyzx
    mad r9.w, |r4.z|, r1.w, -|r4.z|
    mad r4.z, |r4.z|, r9.w, l(1.000000)
    mad r3.z, r3.z, r2.y, r6.w
    mul r4.z, r4.z, r4.z
    mul r3.z, r3.z, r4.z
    rcp r3.z, r3.z
    mul r3.z, r8.w, r3.z
    mul r3.z, r3.z, r7.w
    mul r3.z, r3.z, l(0.250000)
    mad r22.yzw, r3.zzzz, r15.yyzw, r21.xxyz
    add_sat r1.z, -r1.z, l(1.000000)
    mul r4.z, r1.z, r1.z
    mul r4.z, r4.z, r4.z
    mul r1.z, r1.z, r4.z
    mul r1.z, r1.z, r3.z
    mad r23.xyz, r1.zzzz, r15.yzwy, r16.yzwy
    mad r15.yzw, r3.wwww, r15.yyzw, r20.zzxy
    and r24.xyz, r0.wwww, r15.zwyz
    mov r18.w, r20.z
    mov r19.w, r24.z
    movc r19.xyzw, r3.yyyy, r18.xyzw, r19.xyzw
    mov r20.zw, r23.xxxy
    mov r24.zw, r16.yyyz
    movc r18.xyzw, r3.yyyy, r20.xyzw, r24.xyzw
    mov r22.x, r23.z
    mov r21.w, r16.w
    movc r21.xyzw, r3.yyyy, r22.yzwx, r21.xyzw
    if_nz r2.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r1.z, cb2[52].x, l(112), u2.xxxx
      or r1.z, r1.z, l(8)
      store_structured u2.x, cb2[52].x, l(112), r1.z
      store_structured u2.x, cb2[52].x, l(132), r7.w
    endif 
    mov r20.z, r19.w
    mov r20.xy, r18.xyxx
    mov r16.yz, r18.zzwz
    mov r16.w, r21.w
    mov r1.z, l(0x00010101)
  else 
    mov r1.z, l(257)
  endif 
else 
  mov r1.z, l(1)
endif 
ftou r3.y, cb1[44].x
iadd r3.y, r3.y, l(7)
ushr r3.y, r3.y, l(3)
imad r3.y, r0.z, r3.y, r0.x
ishl r3.y, r3.y, l(5)
not r3.z, r3.x
mov r18.x, -r13.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r22.x, l(2)
mov r5.w, l(1.000000)
mov r23.x, l(2)
mov r24.z, l(1.000000)
mov r25.w, l(1.000000)
mov r26.w, l(1.000000)
mov r27.w, l(1.000000)
mov r18.z, r13.x
mov r28.w, l(1.000000)
mov r18.yw, r14.xxxx
mov r13.y, r18.w
mov r14.y, r18.x
mov r29.x, r14.x
mov r29.y, r18.x
mov r29.z, r13.x
mov r14.z, r13.x
mov r30.w, l(1.000000)
mov r31.x, r14.x
mov r31.y, r18.x
mov r31.z, r13.x
mov r32.x, r14.x
mov r32.y, r18.x
mov r32.z, r13.x
mov r15.yzw, r19.xxyz
mov r33.xyz, r20.zxyz
mov r34.xyz, r16.yzwy
mov r35.xyz, r21.xyzx
mov r3.w, cb2[58].y
mov r4.z, r1.z
mov r7.w, l(0)
loop 
  uge r8.w, r7.w, cb2[0].x
  breakc_nz r8.w
  ushr r8.w, r7.w, l(5)
  iadd r8.w, r3.y, r8.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.w, r8.w, l(0), t26.xxxx
  mov r36.xyz, r15.yzwy
  mov r37.xyz, r33.xyzx
  mov r38.xyz, r34.xyzx
  mov r39.xyz, r35.xyzx
  mov r9.w, r3.w
  mov r10.w, r4.z
  mov r11.w, r8.w
  loop 
    breakc_z r11.w
    firstbit_lo r12.w, r11.w
    ishl r13.z, l(1), r12.w
    not r13.z, r13.z
    and r11.w, r11.w, r13.z
    iadd r12.w, r7.w, r12.w
    imul null, r12.w, r12.w, l(15)
    ubfe r13.z, l(3), l(24), cb9[r12.w + 1].w
    ieq r13.w, r13.z, l(2)
    if_nz r13.w
      ubfe r13.w, l(3), l(27), cb9[r12.w + 1].w
      and r14.w, r10.w, l(255)
      ult r17.w, r14.w, l(32)
      and r17.w, r2.w, r17.w
      if_nz r17.w
        imad r14.w, r14.w, l(24), l(112)
        add r22.yzw, cb1[24].xxyz, cb9[r12.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r14.w, r22.xyzw
      endif 
      iadd r14.w, r10.w, l(1)
      add r40.xy, -r5.xyxx, cb9[r12.w + 3].zwzz
      add r40.z, -r5.z, cb9[r12.w + 4].x
      dp3 r17.w, r40.xyzx, r40.xyzx
      rsq r17.w, r17.w
      mul r22.yzw, r17.wwww, r40.xxyz
      mul r19.w, r1.w, cb9[r12.w + 1].z
      mul r19.w, r19.w, l(0.250000)
      dp3 r20.w, r11.xyzx, r22.yzwy
      mov_sat r21.w, r20.w
      movc r22.y, r0.w, |r20.w|, r21.w
      lt r22.z, l(0.000000), r22.y
      if_nz r22.z
        mov r41.xyz, cb9[r12.w + 7].yzwy
        mov r41.w, cb9[r12.w + 8].x
        dp4 r22.z, r41.xyzw, r5.xyzw
        lt r22.w, r22.z, l(1.000000)
        if_nz r22.w
          mov r42.xyz, l(1.000000,1.000000,1.000000,0)
          mov r22.w, l(0)
        else 
          add r43.xyz, -r5.xyzx, cb9[r12.w + 0].xyzx
          mul r24.w, cb9[r12.w + 3].x, cb9[r12.w + 3].x
          dp3 r29.w, r43.xyzx, r43.xyzx
          div r24.w, r24.w, r29.w
          min r24.w, r24.w, l(1.000000)
          mad_sat r43.xy, r22.zzzz, cb9[r12.w + 2].xzxx, cb9[r12.w + 2].ywyy
          mul r43.zw, r43.xxxy, r43.xxxy
          mad r43.xy, r43.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r43.xy, r43.xyxx, r43.zwzz
          mul r24.w, r24.w, r43.x
          mul r24.w, r43.y, r24.w
          mov r43.xyz, cb9[r12.w + 4].yzwy
          mov r43.w, cb9[r12.w + 5].x
          dp4 r43.x, r43.xyzw, r5.xyzw
          mov r44.xyz, cb9[r12.w + 5].yzwy
          mov r44.w, cb9[r12.w + 6].x
          dp4 r43.y, r44.xyzw, r5.xyzw
          div r24.xy, r43.xyxx, r22.zzzz
          lt r22.z, cb9[r12.w + 10].w, l(0.00048828)
          if_nz r22.z
            mad_sat r43.xy, |r24.xyxx|, cb9[r12.w + 12].xyxx, cb9[r12.w + 12].zwzz
            mul r43.zw, r43.xxxy, r43.xxxy
            mad r43.xy, r43.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r43.xy, r43.xyxx, r43.zwzz
            mul r22.z, r43.y, r43.x
          else 
            mul_sat r43.xyzw, |r24.yyxx|, cb9[r12.w + 11].xyzw
            log r43.xyzw, r43.xyzw
            mul r43.xyzw, r43.xyzw, cb9[r12.w + 12].zzzz
            exp r43.xyzw, r43.xyzw
            add r43.xy, r43.zwzz, r43.xyxx
            log r43.xy, r43.xyxx
            mul r43.xy, r43.xyxx, cb9[r12.w + 12].wwww
            exp r43.xy, r43.xyxx
            mul r29.w, r43.x, cb9[r12.w + 12].x
            mad r31.w, cb9[r12.w + 12].y, r43.y, l(-1.000000)
            mad r29.w, cb9[r12.w + 12].y, r43.y, -r29.w
            div_sat r29.w, r31.w, r29.w
            mul r31.w, r29.w, r29.w
            mad r29.w, r29.w, l(-2.000000), l(3.000000)
            mul r22.z, r29.w, r31.w
          endif 
          mul r22.w, r22.z, r24.w
          and r22.z, l(255), cb9[r12.w + 14].w
          if_nz r22.z
            dp3 r24.w, cb9[r12.w + 13].xyzx, r24.xyzx
            mov r43.x, cb9[r12.w + 13].w
            mov r43.yz, cb9[r12.w + 14].xxyx
            dp3 r24.x, r43.xyzx, r24.xyzx
            frc r43.xy, r24.wxww
            iadd r22.z, r22.z, l(-1)
            utof r43.z, r22.z
            sample_l_indexable(texture2darray)(float,float,float,float) r42.xyz, r43.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r42.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r43.x, cb9[r12.w + 0].w
        mov r43.yz, cb9[r12.w + 1].xxyx
        mul r24.xyw, r42.xyxz, r43.xyxz
        lt r22.z, l(0.000000), r22.w
        if_nz r22.z
          and r22.z, r14.w, l(255)
          iadd r29.w, r22.z, l(-1)
          ult r29.w, r29.w, l(32)
          and r29.w, r2.w, r29.w
          if_nz r29.w
            imad r42.xy, r22.zzzz, l(24, 24, 0, 0), l(88, 104, 0, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r22.z, cb2[52].x, r42.x, u2.xxxx
            or r22.z, r22.z, l(4)
            store_structured u2.x, cb2[52].x, r42.x, r22.z
            store_structured u2.x, cb2[52].x, r42.y, r22.w
          endif 
          iadd r22.z, r10.w, l(257)
          ine r13.w, r13.w, l(1)
          if_nz r13.w
            mad r13.w, |r20.w|, l(-0.200000), l(0.400000)
            lt r29.w, r20.w, l(0.000000)
            and r29.w, r0.w, r29.w
            movc r13.w, r29.w, -r13.w, r13.w
            mad r25.xyz, r11.xyzx, r13.wwww, r5.xyzx
            mov r42.xyz, cb9[r12.w + 6].yzwy
            mov r42.w, cb9[r12.w + 7].x
            dp4 r13.w, r42.xyzw, r25.xyzw
            dp4 r29.w, r41.xyzw, r25.xyzw
            ge r31.w, r29.w, r13.w
            if_nz r31.w
              mov r41.xyz, cb9[r12.w + 4].yzwy
              mov r41.w, cb9[r12.w + 5].x
              dp4 r41.x, r41.xyzw, r25.xyzw
              mov r42.xyz, cb9[r12.w + 5].yzwy
              mov r42.w, cb9[r12.w + 6].x
              dp4 r41.y, r42.xyzw, r25.xyzw
              div r25.xy, r41.xyxx, r29.wwww
              mad_sat r25.xy, r25.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r41.x, r25.x, cb9[r12.w + 8].y, cb9[r12.w + 8].z
              mad r41.y, r25.y, cb9[r12.w + 8].w, cb9[r12.w + 9].x
              div r13.w, r13.w, r29.w
              max r13.w, r13.w, l(0.00006104)
              and r25.x, l(0x0000ffff), cb9[r12.w + 1].w
              if_nz r9.w
                utof r42.z, r25.x
                mov r25.yz, l(0,0,0,0)
                loop 
                  ige r29.w, r25.z, l(8)
                  breakc_nz r29.w
                  dp2 r43.x, icb[r25.z + 0].yxyy, r18.xyxx
                  dp2 r43.y, icb[r25.z + 0].yxyy, r18.yzyy
                  mad r42.xy, r43.xyxx, cb9[r12.w + 3].yyyy, r41.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r29.w, r42.xyzx, t9.xxxx, s13, r13.w
                  mad r25.y, r29.w, l(0.125000), r25.y
                  iadd r25.z, r25.z, l(1)
                endloop 
              else 
                utof r41.z, r25.x
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.y, r41.xyzx, t9.xxxx, s13, r13.w
              endif 
              mul r13.w, r25.y, r25.y
              mul r13.w, r25.y, r13.w
            else 
              mov r13.w, l(1.000000)
            endif 
          else 
            mov r13.w, l(1.000000)
          endif 
          mul r13.w, r13.w, r22.w
          lt r22.w, l(0.000000), r13.w
          if_nz r22.w
            ubfe r22.w, l(4), l(16), cb9[r12.w + 1].w
            ult r25.x, l(0), r22.w
            and r25.x, r3.x, r25.x
            if_nz r25.x
              iadd r22.w, r22.w, cb2[0].x
              imad r22.w, r22.w, l(15), l(-15)
              mad r25.x, |r20.w|, l(-0.200000), l(0.400000)
              lt r25.z, r20.w, l(0.000000)
              and r25.z, r0.w, r25.z
              movc r25.x, r25.z, -r25.x, r25.x
              mad r26.xyz, r11.xyzx, r25.xxxx, r5.xyzx
              mov r41.xyz, cb9[r22.w + 6].yzwy
              mov r41.w, cb9[r22.w + 7].x
              dp4 r25.x, r41.xyzw, r26.xyzw
              mov r41.xyz, cb9[r22.w + 7].yzwy
              mov r41.w, cb9[r22.w + 8].x
              dp4 r25.z, r41.xyzw, r26.xyzw
              lt r29.w, r25.z, r25.x
              if_z r29.w
                mov r41.xyz, cb9[r22.w + 4].yzwy
                mov r41.w, cb9[r22.w + 5].x
                dp4 r41.x, r41.xyzw, r26.xyzw
                mov r42.xyz, cb9[r22.w + 5].yzwy
                mov r42.w, cb9[r22.w + 6].x
                dp4 r41.y, r42.xyzw, r26.xyzw
                div r26.xy, r41.xyxx, r25.zzzz
                mad r26.xy, r26.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r41.x, r26.x, cb9[r22.w + 9].w
                add r41.y, r26.y, cb9[r22.w + 10].x
                mul r26.xy, r41.xyxx, cb9[r22.w + 9].yzyy
                div r41.xy, cb9[r22.w + 3].yyyy, cb9[r22.w + 8].ywyy
                add r41.zw, -r41.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r41.zw, r26.xxxy, r41.zzzw
                ge r41.xy, r41.xyxx, r26.xyxx
                or r41.xy, r41.xyxx, r41.zwzz
                or r26.z, r41.y, r41.x
                if_z r26.z
                  mov_sat r26.xy, r26.xyxx
                  mad r41.x, r26.x, cb9[r22.w + 8].y, cb9[r22.w + 8].z
                  mad r41.y, r26.y, cb9[r22.w + 8].w, cb9[r22.w + 9].x
                  mul r26.x, r25.z, cb9[r22.w + 10].z
                  mad r25.x, cb9[r22.w + 10].y, r25.z, r25.x
                  div r25.x, r25.x, r26.x
                endif 
              else 
                mov r26.z, l(-1)
              endif 
              or r25.z, r29.w, r26.z
              if_z r25.z
                max r25.x, r25.x, l(0.00006104)
                and r25.z, l(0x0000ffff), cb9[r22.w + 1].w
                if_nz r9.w
                  utof r26.z, r25.z
                  mov r29.w, l(0)
                  mov r31.w, l(0)
                  loop 
                    ige r32.w, r31.w, l(8)
                    breakc_nz r32.w
                    dp2 r42.x, icb[r31.w + 0].yxyy, r18.xwxx
                    dp2 r42.y, icb[r31.w + 0].xyxx, r13.xyxx
                    mad r26.xy, r42.xyxx, cb9[r22.w + 3].yyyy, r41.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r26.xyzx, t9.xxxx, s13, r25.x
                    mad r29.w, r26.x, l(0.125000), r29.w
                    iadd r31.w, r31.w, l(1)
                  endloop 
                else 
                  utof r41.z, r25.z
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r29.w, r41.xyzx, t9.xxxx, s13, r25.x
                endif 
                mul r22.w, r29.w, r29.w
                mul r22.w, r29.w, r22.w
              else 
                mov r22.w, l(1.000000)
              endif 
              mul r13.w, r13.w, r22.w
            else 
              ubfe r22.w, l(4), l(20), cb9[r12.w + 1].w
              ult r25.x, l(0), r22.w
              and r25.x, r3.z, r25.x
              if_nz r25.x
                iadd r22.w, r22.w, cb2[0].x
                imad r22.w, r22.w, l(15), l(-15)
                mad r25.x, |r20.w|, l(-0.200000), l(0.400000)
                lt r25.z, r20.w, l(0.000000)
                and r25.z, r0.w, r25.z
                movc r25.x, r25.z, -r25.x, r25.x
                mad r27.xyz, r11.xyzx, r25.xxxx, r5.xyzx
                mov r41.xyz, cb9[r22.w + 6].yzwy
                mov r41.w, cb9[r22.w + 7].x
                dp4 r25.x, r41.xyzw, r27.xyzw
                mov r41.xyz, cb9[r22.w + 7].yzwy
                mov r41.w, cb9[r22.w + 8].x
                dp4 r25.z, r41.xyzw, r27.xyzw
                lt r26.x, r25.z, r25.x
                if_z r26.x
                  mov r41.xyz, cb9[r22.w + 4].yzwy
                  mov r41.w, cb9[r22.w + 5].x
                  dp4 r41.x, r41.xyzw, r27.xyzw
                  mov r42.xyz, cb9[r22.w + 5].yzwy
                  mov r42.w, cb9[r22.w + 6].x
                  dp4 r41.y, r42.xyzw, r27.xyzw
                  div r26.yz, r41.xxyx, r25.zzzz
                  mad r26.yz, r26.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                  add r27.x, r26.y, cb9[r22.w + 9].w
                  add r27.y, r26.z, cb9[r22.w + 10].x
                  mul r26.yz, r27.xxyx, cb9[r22.w + 9].yyzy
                  div r27.xy, cb9[r22.w + 3].yyyy, cb9[r22.w + 8].ywyy
                  add r41.xy, -r27.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r41.xy, r26.yzyy, r41.xyxx
                  ge r27.xy, r27.xyxx, r26.yzyy
                  or r27.xy, r27.xyxx, r41.xyxx
                  or r27.x, r27.y, r27.x
                  if_z r27.x
                    mov_sat r26.yz, r26.yyzy
                    mad r41.x, r26.y, cb9[r22.w + 8].y, cb9[r22.w + 8].z
                    mad r41.y, r26.z, cb9[r22.w + 8].w, cb9[r22.w + 9].x
                    mul r26.y, r25.z, cb9[r22.w + 10].z
                    mad r25.x, cb9[r22.w + 10].y, r25.z, r25.x
                    div r25.x, r25.x, r26.y
                  endif 
                else 
                  mov r27.x, l(-1)
                endif 
                or r25.z, r26.x, r27.x
                if_z r25.z
                  max r25.x, r25.x, l(0.00006104)
                  and r25.z, l(0x0000ffff), cb9[r22.w + 1].w
                  if_nz r9.w
                    utof r26.z, r25.z
                    mov r27.xy, l(0,0,0,0)
                    loop 
                      ige r27.z, r27.y, l(8)
                      breakc_nz r27.z
                      dp2 r42.x, icb[r27.y + 0].xyxx, r29.xyxx
                      dp2 r42.y, icb[r27.y + 0].yxyy, r29.xzxx
                      mad r26.xy, r42.xyxx, cb9[r22.w + 3].yyyy, r41.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r26.xyzx, t9.xxxx, s13, r25.x
                      mad r27.x, r26.x, l(0.125000), r27.x
                      iadd r27.y, r27.y, l(1)
                    endloop 
                  else 
                    utof r41.z, r25.z
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r27.x, r41.xyzx, t9.xxxx, s13, r25.x
                  endif 
                  mul r22.w, r27.x, r27.x
                  mul r22.w, r27.x, r22.w
                else 
                  mov r22.w, l(1.000000)
                endif 
                mul r13.w, r13.w, r22.w
              endif 
            endif 
            mad r22.w, -r22.y, r2.x, l(1.000000)
            mul r22.w, r22.w, r22.w
            mad r22.w, -r22.w, l(0.620000), l(0.620000)
            add r22.w, -r22.y, r22.w
            mad r22.y, r2.z, r22.w, r22.y
            mul r22.y, r13.w, r22.y
            lt r20.w, l(0.000000), r20.w
            mad r26.xyz, r22.yyyy, r24.xywx, r36.xyzx
            mad r40.xyz, r40.xyzx, r17.wwww, r12.xyzx
            dp3 r17.w, r40.xyzx, r40.xyzx
            rsq r17.w, r17.w
            mul r40.xyz, r17.wwww, r40.xyzx
            dp3 r17.w, r40.xyzx, r12.xyzx
            dp3 r22.w, r11.xyzx, r40.xyzx
            mad r25.x, |r22.w|, r1.w, -|r22.w|
            mad r22.w, |r22.w|, r25.x, l(1.000000)
            mad r25.x, r21.w, r2.y, r6.w
            mul r22.w, r22.w, r22.w
            mul r22.w, r25.x, r22.w
            rcp r22.w, r22.w
            mul r19.w, r19.w, r21.w
            mul r19.w, r19.w, r22.w
            mul r19.w, r13.w, r19.w
            mad r40.xyz, r19.wwww, r24.xywx, r39.xyzx
            add_sat r17.w, -r17.w, l(1.000000)
            mul r21.w, r17.w, r17.w
            mul r21.w, r21.w, r21.w
            mul r17.w, r17.w, r21.w
            mul r17.w, r17.w, r19.w
            mad r41.xyz, r17.wwww, r24.xywx, r38.xyzx
            mad r24.xyw, r22.yyyy, r24.xyxw, r37.xyxz
            movc r24.xyw, r0.wwww, r24.xyxw, r37.xyxz
            movc r36.xyz, r20.wwww, r26.xyzx, r36.xyzx
            movc r37.xyz, r20.wwww, r37.xyzx, r24.xywx
            movc r38.xyz, r20.wwww, r41.xyzx, r38.xyzx
            movc r39.xyz, r20.wwww, r40.xyzx, r39.xyzx
            and r17.w, r22.z, l(255)
            iadd r19.w, r17.w, l(-1)
            ult r19.w, r19.w, l(32)
            and r19.w, r2.w, r19.w
            if_nz r19.w
              imad r22.yw, r17.wwww, l(0, 24, 0, 24), l(0, 88, 0, 108)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.w, cb2[52].x, r22.y, u2.xxxx
              or r17.w, r17.w, l(8)
              store_structured u2.x, cb2[52].x, r22.y, r17.w
              store_structured u2.x, cb2[52].x, r22.w, r13.w
            endif 
            iadd r10.w, r10.w, l(0x00010101)
          else 
            mov r10.w, r22.z
          endif 
        else 
          mov r10.w, r14.w
        endif 
      else 
        mov r10.w, r14.w
      endif 
    else 
      ieq r13.z, r13.z, l(4)
      if_nz r13.z
        ubfe r13.z, l(3), l(27), cb9[r12.w + 1].w
        and r13.w, r10.w, l(255)
        ult r14.w, r13.w, l(32)
        and r14.w, r2.w, r14.w
        if_nz r14.w
          imad r13.w, r13.w, l(24), l(112)
          add r23.yzw, cb1[24].xxyz, cb9[r12.w + 0].xxyz
          store_structured u2.xyzw, cb2[52].x, r13.w, r23.xyzw
        endif 
        iadd r13.w, r10.w, l(1)
        mul r14.w, r1.w, cb9[r12.w + 1].z
        mul r14.w, r14.w, l(0.250000)
        lt r17.w, l(0.000000), cb9[r12.w + 6].y
        mov r26.xy, cb9[r12.w + 5].zwzz
        mov r26.z, cb9[r12.w + 6].x
        mad r22.yzw, -r26.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r12.w + 0].xxyz
        add r23.yzw, -r5.xxyz, r22.yyzw
        dp3 r19.w, r26.xyzx, r17.xyzx
        dp3 r20.w, r26.xyzx, r23.yzwy
        dp3 r21.w, r17.xyzx, r23.yzwy
        mad r23.y, -r19.w, r19.w, cb9[r12.w + 6].y
        mad r19.w, r19.w, r21.w, -r20.w
        div_sat r20.w, -r20.w, cb9[r12.w + 6].y
        div_sat r19.w, r19.w, r23.y
        div r21.w, r23.y, cb9[r12.w + 6].y
        mul r21.w, r21.w, l(10.000000)
        min r21.w, r21.w, l(1.000000)
        add r19.w, -r20.w, r19.w
        mad r19.w, r21.w, r19.w, r20.w
        mad r23.yzw, r19.wwww, r26.xxyz, r22.yyzw
        mad r22.yzw, r20.wwww, r26.xxyz, r22.yyzw
        movc r22.yzw, r17.wwww, r22.yyzw, cb9[r12.w + 0].xxyz
        movc r23.yzw, r17.wwww, r23.yyzw, cb9[r12.w + 0].xxyz
        add r23.yzw, -r5.xxyz, r23.yyzw
        add r22.yzw, -r5.xxyz, r22.yyzw
        dp3 r17.w, r23.yzwy, r23.yzwy
        rsq r17.w, r17.w
        mul r24.xyw, r17.wwww, r23.yzyw
        dp3 r19.w, r22.yzwy, r22.yzwy
        rsq r20.w, r19.w
        mul r22.yzw, r20.wwww, r22.yyzw
        dp3 r20.w, r11.xyzx, r22.yzwy
        mov_sat r21.w, r20.w
        movc r21.w, r0.w, |r20.w|, r21.w
        lt r22.y, l(0.000000), r21.w
        if_nz r22.y
          sqrt r22.y, r19.w
          mul r22.z, cb9[r12.w + 3].x, cb9[r12.w + 3].x
          div r19.w, r22.z, r19.w
          min r19.w, r19.w, l(1.000000)
          mad_sat r22.yz, r22.yyyy, cb9[r12.w + 2].xxzx, cb9[r12.w + 2].yywy
          mul r25.xz, r22.yyzy, r22.yyzy
          mad r22.yz, r22.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
          mul r22.yz, r22.yyzy, r25.xxzx
          mul r19.w, r19.w, r22.y
          mul r19.w, r22.z, r19.w
          lt r22.y, l(0.000000), r19.w
          if_nz r22.y
            and r22.y, r13.w, l(255)
            iadd r22.z, r22.y, l(-1)
            ult r22.z, r22.z, l(32)
            and r22.z, r2.w, r22.z
            if_nz r22.z
              imad r22.yz, r22.yyyy, l(0, 24, 24, 0), l(0, 88, 104, 0)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r22.w, cb2[52].x, r22.y, u2.xxxx
              or r22.w, r22.w, l(4)
              store_structured u2.x, cb2[52].x, r22.y, r22.w
              store_structured u2.x, cb2[52].x, r22.z, r19.w
            endif 
            iadd r22.y, r10.w, l(257)
            ine r13.z, r13.z, l(1)
            if_nz r13.z
              mad r13.z, |r20.w|, l(-0.200000), l(0.400000)
              lt r22.z, r20.w, l(0.000000)
              and r22.z, r0.w, r22.z
              movc r13.z, r22.z, -r13.z, r13.z
              mad r26.xyz, r11.xyzx, r13.zzzz, r5.xyzx
              add r26.xyz, r26.xyzx, -cb9[r12.w + 4].yzwy
              max r13.z, |r26.z|, |r26.y|
              max r13.z, r13.z, |r26.x|
              div r13.z, cb9[r12.w + 5].x, r13.z
              add r13.z, r13.z, cb9[r12.w + 5].y
              dp3 r22.z, r26.xyzx, r26.xyzx
              rsq r22.z, r22.z
              max r13.z, r13.z, l(0.00006104)
              and r22.w, l(0x0000ffff), cb9[r12.w + 1].w
              utof r40.w, r22.w
              mov r22.w, l(0)
              mov r25.x, l(0)
              loop 
                ige r25.z, r25.x, l(8)
                breakc_nz r25.z
                dp2 r27.y, icb[r25.x + 0].xyxx, r14.xyxx
                dp2 r27.z, icb[r25.x + 0].yxyy, r14.xzxx
                mul r41.yz, r27.yyzy, cb9[r12.w + 3].yyyy
                mul r41.x, r16.x, r41.y
                mul r41.w, r15.x, r41.y
                mad r40.xyz, r26.xyzx, r22.zzzz, r41.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r25.z, r40.xyzw, t10.xxxx, s13, r13.z
                mad r22.w, r25.z, l(0.125000), r22.w
                iadd r25.x, r25.x, l(1)
              endloop 
            else 
              mov r22.w, l(1.000000)
            endif 
            mul r13.z, r19.w, r22.w
            lt r19.w, l(0.000000), r13.z
            if_nz r19.w
              ubfe r19.w, l(4), l(16), cb9[r12.w + 1].w
              ult r22.z, l(0), r19.w
              and r22.z, r3.x, r22.z
              if_nz r22.z
                iadd r19.w, r19.w, cb2[0].x
                imad r19.w, r19.w, l(15), l(-15)
                mad r22.z, |r20.w|, l(-0.200000), l(0.400000)
                lt r25.x, r20.w, l(0.000000)
                and r25.x, r0.w, r25.x
                movc r22.z, r25.x, -r22.z, r22.z
                mad r28.xyz, r11.xyzx, r22.zzzz, r5.xyzx
                mov r40.xyz, cb9[r19.w + 6].yzwy
                mov r40.w, cb9[r19.w + 7].x
                dp4 r22.z, r40.xyzw, r28.xyzw
                mov r40.xyz, cb9[r19.w + 7].yzwy
                mov r40.w, cb9[r19.w + 8].x
                dp4 r25.x, r40.xyzw, r28.xyzw
                lt r25.z, r25.x, r22.z
                if_z r25.z
                  mov r40.xyz, cb9[r19.w + 4].yzwy
                  mov r40.w, cb9[r19.w + 5].x
                  dp4 r26.x, r40.xyzw, r28.xyzw
                  mov r40.xyz, cb9[r19.w + 5].yzwy
                  mov r40.w, cb9[r19.w + 6].x
                  dp4 r26.y, r40.xyzw, r28.xyzw
                  div r26.xy, r26.xyxx, r25.xxxx
                  mad r26.xy, r26.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r28.x, r26.x, cb9[r19.w + 9].w
                  add r28.y, r26.y, cb9[r19.w + 10].x
                  mul r26.xy, r28.xyxx, cb9[r19.w + 9].yzyy
                  div r27.yz, cb9[r19.w + 3].yyyy, cb9[r19.w + 8].yywy
                  add r28.xy, -r27.yzyy, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r28.xy, r26.xyxx, r28.xyxx
                  ge r27.yz, r27.yyzy, r26.xxyx
                  or r27.yz, r27.yyzy, r28.xxyx
                  or r26.z, r27.z, r27.y
                  if_z r26.z
                    mov_sat r26.xy, r26.xyxx
                    mad r28.x, r26.x, cb9[r19.w + 8].y, cb9[r19.w + 8].z
                    mad r28.y, r26.y, cb9[r19.w + 8].w, cb9[r19.w + 9].x
                    mul r26.x, r25.x, cb9[r19.w + 10].z
                    mad r22.z, cb9[r19.w + 10].y, r25.x, r22.z
                    div r22.z, r22.z, r26.x
                  endif 
                else 
                  mov r26.z, l(-1)
                endif 
                or r25.x, r25.z, r26.z
                if_z r25.x
                  max r22.z, r22.z, l(0.00006104)
                  and r25.x, l(0x0000ffff), cb9[r19.w + 1].w
                  if_nz r9.w
                    utof r26.z, r25.x
                    mov r25.z, l(0)
                    mov r27.y, l(0)
                    loop 
                      ige r27.z, r27.y, l(8)
                      breakc_nz r27.z
                      dp2 r40.x, icb[r27.y + 0].xyxx, r31.xyxx
                      dp2 r40.y, icb[r27.y + 0].yxyy, r31.xzxx
                      mad r26.xy, r40.xyxx, cb9[r19.w + 3].yyyy, r28.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r26.xyzx, t9.xxxx, s13, r22.z
                      mad r25.z, r26.x, l(0.125000), r25.z
                      iadd r27.y, r27.y, l(1)
                    endloop 
                  else 
                    utof r28.z, r25.x
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.z, r28.xyzx, t9.xxxx, s13, r22.z
                  endif 
                  mul r19.w, r25.z, r25.z
                  mul r19.w, r25.z, r19.w
                else 
                  mov r19.w, l(1.000000)
                endif 
                mul r13.z, r13.z, r19.w
              else 
                ubfe r19.w, l(4), l(20), cb9[r12.w + 1].w
                ult r22.z, l(0), r19.w
                and r22.z, r3.z, r22.z
                if_nz r22.z
                  iadd r19.w, r19.w, cb2[0].x
                  imad r19.w, r19.w, l(15), l(-15)
                  mad r22.z, |r20.w|, l(-0.200000), l(0.400000)
                  lt r25.x, r20.w, l(0.000000)
                  and r25.x, r0.w, r25.x
                  movc r22.z, r25.x, -r22.z, r22.z
                  mad r30.xyz, r11.xyzx, r22.zzzz, r5.xyzx
                  mov r40.xyz, cb9[r19.w + 6].yzwy
                  mov r40.w, cb9[r19.w + 7].x
                  dp4 r22.z, r40.xyzw, r30.xyzw
                  mov r40.xyz, cb9[r19.w + 7].yzwy
                  mov r40.w, cb9[r19.w + 8].x
                  dp4 r25.x, r40.xyzw, r30.xyzw
                  lt r26.x, r25.x, r22.z
                  if_z r26.x
                    mov r40.xyz, cb9[r19.w + 4].yzwy
                    mov r40.w, cb9[r19.w + 5].x
                    dp4 r28.x, r40.xyzw, r30.xyzw
                    mov r40.xyz, cb9[r19.w + 5].yzwy
                    mov r40.w, cb9[r19.w + 6].x
                    dp4 r28.y, r40.xyzw, r30.xyzw
                    div r26.yz, r28.xxyx, r25.xxxx
                    mad r26.yz, r26.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                    add r28.x, r26.y, cb9[r19.w + 9].w
                    add r28.y, r26.z, cb9[r19.w + 10].x
                    mul r26.yz, r28.xxyx, cb9[r19.w + 9].yyzy
                    div r27.yz, cb9[r19.w + 3].yyyy, cb9[r19.w + 8].yywy
                    add r28.xy, -r27.yzyy, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r28.xy, r26.yzyy, r28.xyxx
                    ge r27.yz, r27.yyzy, r26.yyzy
                    or r27.yz, r27.yyzy, r28.xxyx
                    or r27.y, r27.z, r27.y
                    if_z r27.y
                      mov_sat r26.yz, r26.yyzy
                      mad r28.x, r26.y, cb9[r19.w + 8].y, cb9[r19.w + 8].z
                      mad r28.y, r26.z, cb9[r19.w + 8].w, cb9[r19.w + 9].x
                      mul r26.y, r25.x, cb9[r19.w + 10].z
                      mad r22.z, cb9[r19.w + 10].y, r25.x, r22.z
                      div r22.z, r22.z, r26.y
                    endif 
                  else 
                    mov r27.y, l(-1)
                  endif 
                  or r25.x, r26.x, r27.y
                  if_z r25.x
                    max r22.z, r22.z, l(0.00006104)
                    and r25.x, l(0x0000ffff), cb9[r19.w + 1].w
                    if_nz r9.w
                      utof r26.z, r25.x
                      mov r27.yz, l(0,0,0,0)
                      loop 
                        ige r30.x, r27.z, l(8)
                        breakc_nz r30.x
                        dp2 r30.x, icb[r27.z + 0].xyxx, r32.xyxx
                        dp2 r30.y, icb[r27.z + 0].yxyy, r32.xzxx
                        mad r26.xy, r30.xyxx, cb9[r19.w + 3].yyyy, r28.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r26.xyzx, t9.xxxx, s13, r22.z
                        mad r27.y, r26.x, l(0.125000), r27.y
                        iadd r27.z, r27.z, l(1)
                      endloop 
                    else 
                      utof r28.z, r25.x
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r27.y, r28.xyzx, t9.xxxx, s13, r22.z
                    endif 
                    mul r19.w, r27.y, r27.y
                    mul r19.w, r27.y, r19.w
                  else 
                    mov r19.w, l(1.000000)
                  endif 
                  mul r13.z, r13.z, r19.w
                endif 
              endif 
              mad r19.w, -r21.w, r2.x, l(1.000000)
              mul r19.w, r19.w, r19.w
              mad r19.w, -r19.w, l(0.620000), l(0.620000)
              add r19.w, -r21.w, r19.w
              mad r19.w, r2.z, r19.w, r21.w
              mul r19.w, r13.z, r19.w
              mov r26.x, cb9[r12.w + 0].w
              mov r26.yz, cb9[r12.w + 1].xxyx
              lt r12.w, l(0.000000), r20.w
              mad r28.xyz, r19.wwww, r26.xyzx, r36.xyzx
              dp3_sat r20.w, r11.xyzx, r24.xywx
              mad r23.yzw, r23.yyzw, r17.wwww, r12.xxyz
              dp3 r17.w, r23.yzwy, r23.yzwy
              rsq r17.w, r17.w
              mul r23.yzw, r17.wwww, r23.yyzw
              dp3 r17.w, r23.yzwy, r12.xyzx
              dp3 r21.w, r11.xyzx, r23.yzwy
              mad r22.z, |r21.w|, r1.w, -|r21.w|
              mad r21.w, |r21.w|, r22.z, l(1.000000)
              mad r22.z, r20.w, r2.y, r6.w
              mul r21.w, r21.w, r21.w
              mul r21.w, r22.z, r21.w
              rcp r21.w, r21.w
              mul r14.w, r14.w, r20.w
              mul r14.w, r14.w, r21.w
              mul r14.w, r13.z, r14.w
              mad r23.yzw, r14.wwww, r26.xxyz, r39.xxyz
              add_sat r17.w, -r17.w, l(1.000000)
              mul r20.w, r17.w, r17.w
              mul r20.w, r20.w, r20.w
              mul r17.w, r17.w, r20.w
              mul r14.w, r14.w, r17.w
              mad r24.xyw, r14.wwww, r26.xyxz, r38.xyxz
              mad r26.xyz, r19.wwww, r26.xyzx, r37.xyzx
              movc r26.xyz, r0.wwww, r26.xyzx, r37.xyzx
              movc r36.xyz, r12.wwww, r28.xyzx, r36.xyzx
              movc r37.xyz, r12.wwww, r37.xyzx, r26.xyzx
              movc r38.xyz, r12.wwww, r24.xywx, r38.xyzx
              movc r39.xyz, r12.wwww, r23.yzwy, r39.xyzx
              and r12.w, r22.y, l(255)
              iadd r14.w, r12.w, l(-1)
              ult r14.w, r14.w, l(32)
              and r14.w, r2.w, r14.w
              if_nz r14.w
                imad r23.yz, r12.wwww, l(0, 24, 24, 0), l(0, 88, 108, 0)
                ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r12.w, cb2[52].x, r23.y, u2.xxxx
                or r12.w, r12.w, l(8)
                store_structured u2.x, cb2[52].x, r23.y, r12.w
                store_structured u2.x, cb2[52].x, r23.z, r13.z
              endif 
              iadd r10.w, r10.w, l(0x00010101)
            else 
              mov r10.w, r22.y
            endif 
          else 
            mov r10.w, r13.w
          endif 
        else 
          mov r10.w, r13.w
        endif 
      endif 
    endif 
  endloop 
  mov r15.yzw, r36.xxyz
  mov r33.xyz, r37.xyzx
  mov r34.xyz, r38.xyzx
  mov r35.xyz, r39.xyzx
  mov r4.z, r10.w
  iadd r7.w, r7.w, l(32)
endloop 
mad r3.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r1.z, r3.y
mad r2.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r2.x
ieq r1.w, r1.z, r1.w
movc r2.xy, r1.wwww, r2.yzyy, l(-1.000000,0,0,0)
mad r4.xyw, r8.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r1.w, r4.x
ieq r1.w, r1.z, r1.w
movc r4.xy, r1.wwww, r4.ywyy, l(-1.000000,0,0,0)
mad r7.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r7.x
ieq r1.w, r1.z, r1.w
movc r7.xy, r1.wwww, r7.yzyy, l(-1.000000,0,0,0)
mad r8.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r8.x
ieq r1.z, r1.z, r1.w
movc r1.zw, r1.zzzz, r8.yyyz, l(0,0,-1.000000,0)
mov r8.x, r2.x
mov r8.y, r4.x
mov r8.z, r7.x
mov r8.w, r1.z
add r8.xyzw, -r3.xxxx, r8.xyzw
ge r8.xyzw, |r8.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r8.xyzw, r8.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r1.z, r8.y, r8.x
add r1.z, r8.z, r1.z
add r1.z, r8.w, r1.z
mul r2.x, r4.y, r8.y
mad r2.x, r8.x, r2.y, r2.x
mad r2.x, r8.z, r7.y, r2.x
mad r1.w, r8.w, r1.w, r2.x
div r3.w, r1.w, r1.z
ge r1.z, l(0.000000), r1.z
movc r3.yz, r1.zzzz, l(0,0,0,0), r3.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r1.z, r1.w, r1.z
movc r2.xyz, r1.zzzz, r3.xyzx, r3.xzyx
mad r1.z, -r2.z, l(0.500000), r2.x
add r3.y, r1.z, r2.z
mad r3.z, -r2.y, l(0.500000), r1.z
add r3.x, r2.y, r3.z
mul r2.xyz, r6.xyzx, r15.yzwy
mad r2.xyz, r33.xyzx, r3.xyzx, r2.xyzx
mul r4.xyw, r34.xyxz, l(0.960000, 0.960000, 0.000000, 0.960000)
mad r4.xyw, r35.xyxz, l(0.040000, 0.040000, 0.000000, 0.040000), r4.xyxw
add r2.xyz, r2.xyzx, r4.xywx
add r4.xyw, -r3.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
mul r4.xyw, r4.xyxw, r34.xyxz
mad r3.xyz, r35.xyzx, r3.xyzx, r4.xywx
mad r3.xyz, r15.yzwy, r6.xyzx, r3.xyzx
movc r2.xyz, r0.wwww, r2.xyzx, r3.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r5.xyzx, r5.xyzx
  rsq r1.z, r0.w
  mul r3.xyz, r1.zzzz, r5.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r3.w, l(0.010000), |r5.z|
    mul r4.xy, r5.zzzz, cb2[15].zwzz
    mul r6.xy, r4.xyxx, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r6.xy, r6.xyxx
    add r6.xy, -r6.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r4.xy, r6.xyxx, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r3.wwww, r4.xxxy, r1.zzzw
    mul r4.xyw, r1.zzzz, cb2[12].xyxz
    exp r4.xyw, r4.xyxw
    mul r6.xyz, r1.wwww, cb2[12].xyzx
    exp r6.xyz, r6.xyzx
    add r6.xyz, -r4.xywx, r6.xyzx
    mad r4.xyw, cb2[13].wwww, r6.xyxz, r4.xyxw
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r5.z|
    mul r3.w, r5.z, cb2[15].z
    mul r5.w, r3.w, l(-1.442695)
    exp r5.w, r5.w
    add r5.w, -r5.w, l(1.000000)
    div r3.w, r5.w, r3.w
    mul r3.w, r1.z, r3.w
    movc r1.z, r1.w, r3.w, r1.z
    mul r6.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyw, r6.xyxz
  endif 
  mad r4.xyw, r4.xyxw, cb2[9].zzzz, l(1.000000, 1.000000, 0.000000, 1.000000)
  add_sat r4.xyw, r4.xyxw, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r3.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r3.x, cb2[8].w, -r1.z, l(1.000000)
  mul r3.x, r3.x, r3.x
  mul r3.x, r3.x, l(12.566371)
  div r1.w, r1.w, r3.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r3.xyz, r0.wwww, cb2[11].xyzx
  mad r3.xyz, r1.zzzz, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r6.xyz, -r4.xywx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r6.xyzx
  mad r3.xyz, r2.xyzx, r4.xywx, r3.xyzx
else 
  mul r0.w, r5.z, cb2[6].x
  mad r1.z, cb2[6].x, r5.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r3.w, r1.z, l(64.000000)
  mul r3.w, r3.w, l(1.442695)
  exp r3.w, r3.w
  mov_sat r4.x, cb2[6].z
  lt r4.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r4.y, r3.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r4.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r5.xyzx, r5.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r4.xyw, r1.zzzz, r5.xyxz
  dp3 r1.z, cb2[7].yzwy, r4.xywx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r6.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r6.xyzw, r1.zzzz, r6.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r6.w
  add r4.xyw, -r2.xyxz, r6.xyxz
  mad r3.xyz, r0.wwww, r4.xywx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.w, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(0, 8, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r1.z, cb2[55].w, l(16)
ine r1.w, r1.z, l(0)
ieq r1.z, r1.z, l(0)
and r1.z, r1.z, r1.w
and r3.z, r1.z, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.wwww, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.w, r4.z, l(255)
      break 
      case l(2)
      ubfe r0.w, l(8), l(8), r4.z
      break 
      case l(3)
      ubfe r0.w, l(8), l(16), r4.z
      break 
      case l(4)
      and r0.w, r0.y, l(3)
      break 
      case l(5)
      ushr r0.w, r0.y, l(8)
      break 
      default 
      mov r0.w, l(0)
      break 
    endswitch 
    utof r0.w, r0.w
    mul r0.w, r0.w, cb2[53].z
    mad r3.xyz, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r2.w
  add r1.xyz, r5.xyzx, cb1[24].xyzx
  and r1.w, r4.z, l(255)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.w, r0.y, l(3)
  store_structured u2.x, cb2[52].x, l(108), r0.w
endif 
if_nz cb2[52].y
  and r0.w, r4.z, l(255)
  atomic_iadd g1, l(0), r0.w
  ubfe r1.xy, l(8, 8, 0, 0), l(8, 16, 0, 0), r4.zzzz
  atomic_iadd g1, l(4), r1.x
  atomic_iadd g1, l(8), r1.y
  and r1.z, r0.y, l(3)
  atomic_iadd g1, l(12), r1.z
  ushr r0.y, r0.y, l(8)
  atomic_iadd g1, l(16), r0.y
  atomic_umax g2, l(0), r0.w
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), r1.z
  atomic_umax g2, l(16), r0.y
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.y, r1.x, l(63)
  if_nz r0.y
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.y, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.y
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.y, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.y
    ieq r0.xz, r0.xxzx, cb2[52].zzwz
    and r0.x, r0.z, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.y
    endif 
  endif 
endif 
ret 
// Approximately 2160 instruction slots used
