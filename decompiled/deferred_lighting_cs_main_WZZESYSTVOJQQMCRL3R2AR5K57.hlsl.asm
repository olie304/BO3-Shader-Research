//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:24:07 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 32
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(46), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.zw, r0.xxxy, l(0, 0, 4095, 4095)
imad r1.xy, r0.zwzz, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r3.x, r3.y, r3.x
lt r3.y, l(0.000000), r2.z
and r3.x, r3.y, r3.x
if_z r3.x
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.y, r1.xyww, t4.yxzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.zw, r1.xxxy
add r5.xy, r3.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r6.x, r3.y, l(0.984375)
mul r5.z, r3.y, l(1.01587307)
mad r3.y, r3.y, l(64.000000), l(-63.000000)
movc r3.y, r6.x, r3.y, r5.z
max r3.y, r3.y, l(0.00000001)
rcp r6.y, r3.y
and r3.xy, r3.xxxx, r6.xyxx
mul r5.zw, r5.xxxy, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r7.xyzw, r5.zwzz, t28.xyzw, s4.x
mul r5.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r5.zw, r5.zzzw
add r8.xy, -r5.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r9.y, r8.x, r8.y
mul r9.xz, r5.zzwz, r8.xxyx
mul r9.w, r5.w, r5.z
dp4 r5.z, r6.xyzw, r9.xyzw
add r7.xyzw, -r3.yyyy, r7.xyzw
min r5.w, |r7.w|, |r7.z|
min r5.w, r5.w, |r7.y|
min r5.w, r5.w, |r7.x|
max r8.x, |r7.w|, |r7.z|
max r8.x, |r7.y|, r8.x
max r7.x, |r7.x|, r8.x
eq r7.yzw, r5.wwww, |r7.yyzw|
movc r5.w, r7.y, r6.y, r6.x
movc r5.w, r7.z, r6.z, r5.w
movc r5.w, r7.w, r6.w, r5.w
mul r6.x, r3.y, l(0.010000)
lt r6.x, r6.x, r7.x
movc r5.z, r6.x, r5.w, r5.z
mul r4.z, r4.z, r5.z
if_nz cb2[55].x
  mul r5.z, r4.z, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r5.zzzz
  ret 
else 
  movc r5.z, cb2[54].w, r4.z, l(1.000000)
endif 
ge r4.z, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
add r1.zw, r5.xxxy, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r11.x, r1.z, cb1[12].x
mul r11.y, r1.w, cb1[13].y
mov r11.z, l(1.000000)
mul r5.xyw, r3.yyyy, r11.xyxz
mul r11.xyz, r5.yyyy, cb1[17].xyzx
mad r11.xyz, r5.xxxx, cb1[16].xyzx, r11.xyzx
mad r11.xyz, r5.wwww, cb1[18].xyzx, r11.xyzx
mad r1.z, r2.w, l(3.000000), l(0.500000)
ftou r1.z, r1.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r12.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r12.z
mul r12.xy, r1.wwww, r2.xyxx
and r13.xyzw, r1.zzzz, l(2, 1, 2, 1)
movc r13.xyzw, r13.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.z, r13.w, r13.z
movc r13.z, r1.z, l(-1.000000), l(1.000000)
mul r2.xyw, r13.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r5.xyw, r13.xyxz, l(1.000000, -2.000000, 0.000000, 1.000000)
mul r12.xyz, r12.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r12.yyyy
mad r2.xyw, r5.xyxw, r12.xxxx, r2.xyxw
mad r12.xyz, r13.xyzx, r12.zzzz, r2.xywx
movc r1.z, r4.z, l(-0.500000), l(-0.00146628)
add r1.z, r1.z, r2.z
mul_sat r2.y, r1.z, l(2.00982332)
dp3 r1.z, -r11.xyzx, -r11.xyzx
rsq r1.z, r1.z
mul r5.xyw, r1.zzzz, -r11.xyxz
dp2 r1.w, r3.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r1.w
dp3_sat r2.x, r12.xyzx, r5.xywx
dp3 r1.w, -r5.xywx, r12.xyzx
add r1.w, r1.w, r1.w
mad r15.xyz, r12.xyzx, -r1.wwww, -r5.xywx
mul r1.w, r2.y, l(17.000000)
exp r1.w, r1.w
add r1.w, r1.w, l(2.000000)
div r1.w, l(2.000000), r1.w
sqrt r2.z, r1.w
mul r3.yz, cb1[44].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
ftou r3.yz, r3.yyzy
ieq r3.yz, r1.xxyx, r3.yyzy
and r2.w, r3.z, r3.y
dp3 r3.y, r12.xyzx, cb2[17].xyzx
mov_sat r3.z, r3.y
ge r3.w, l(0.000000), r3.z
if_nz r3.w
  mov r4.z, l(0)
endif 
if_z r3.w
  mul r13.yzw, r11.yyyy, cb2[29].xxyz
  mad r13.yzw, r11.xxxx, cb2[28].xxyz, r13.yyzw
  mad r13.yzw, r11.zzzz, cb2[30].xxyz, r13.yyzw
  add r13.yzw, r13.yyzw, cb2[31].xxyz
  add r3.w, r13.w, -cb2[17].w
  mad r3.w, -r3.w, l(0.00006104), l(1.000000)
  mov_sat r6.w, r3.w
  eq r6.w, r3.w, r6.w
  if_nz r6.w
    mov r6.w, l(0)
    mov r7.w, l(0)
    loop 
      ge r8.w, r6.w, l(3.000000)
      breakc_nz r8.w
      ftou r8.w, r6.w
      add r14.yz, r13.yyzy, -cb2[r8.w + 20].xxyx
      max r9.w, |r14.z|, |r14.y|
      mul r7.w, r9.w, cb2[r8.w + 20].z
      lt r8.w, r7.w, l(1.000000)
      if_nz r8.w
        break 
      endif 
      add r6.w, r6.w, l(1.000000)
      mov r7.w, l(0)
    endloop 
  else 
    mov r6.w, l(3.000000)
    mov r7.w, l(0)
  endif 
  ge r8.w, r6.w, l(3.000000)
  if_nz r8.w
    mul r14.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r16.xz, r14.yyyy
    mov r16.y, -r16.z
    mad r14.yzw, r13.yyzy, r16.xxyz, r14.zzwz
    add r16.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r14.yzw, r14.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r14.yzw, r16.xxyz, r14.yyzw
    mul r16.xy, r14.wzww, cb2[32].xxxx
    round_ni r16.xy, r16.xyxx
    mul r9.w, r16.y, cb2[27].x
    mad r9.w, r9.w, cb2[32].x, r16.x
    ftou r9.w, r9.w
    iadd r9.w, r9.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r9.w, l(0), t23.xxxx
    and r16.x, r10.w, l(0x40000000)
    ishl r16.y, r10.w, l(2)
    if_z r16.x
      and r16.x, r10.w, l(0x01ffffff)
      iadd r17.x, r9.w, r16.x
      ushr r9.w, r10.w, l(25)
      utof r9.w, r9.w
      mul r14.yzw, r9.wwww, r14.yyzw
      frc r14.yzw, r14.yyzw
      mul r14.yzw, r14.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r14.yzw, r14.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.z, r17.x, l(0), t23.xxxx
      ushr r16.xz, r14.wwzw, l(6, 0, 6, 0)
      and r9.w, r17.z, l(0xc0000000)
      iadd r10.w, r17.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r10.w, l(0), t23.xxxx
      movc r10.w, r16.z, r17.z, r10.w
      ushr r16.z, r10.w, l(13)
      movc r10.w, r16.x, r16.z, r10.w
      and r10.w, r10.w, l(8191)
      iadd r18.x, r10.w, r17.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      mov r17.y, l(0)
      mov r18.y, l(1)
      movc r16.xzw, r9.wwww, r17.xxyz, r18.xxyz
      movc r18.yz, r9.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r19.xy, r14.wzww, r18.yyyy
      and r19.xy, r19.xyxx, l(1, 1, 0, 0)
      and r10.w, r16.w, l(0xc0000000)
      iadd r17.w, r16.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.w, l(0), t23.xxxx
      movc r17.w, r19.y, r16.w, r17.w
      ushr r18.y, r17.w, l(13)
      movc r17.w, r19.x, r18.y, r17.w
      and r17.w, r17.w, l(8191)
      iadd r18.x, r16.x, r17.w
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.x, l(0), t23.xxxx
      movc r16.xzw, r10.wwww, r16.xxzw, r18.xxzw
      movc r16.xzw, r9.wwww, r17.xxyz, r16.xxzw
      and r9.w, r16.w, l(0xc0000000)
      if_z r9.w
        iadd r9.w, -r16.z, l(6)
        ushr r17.xy, r14.wzww, r9.wwww
        or r9.w, r16.w, l(0x40000000)
        bfi r10.w, l(1), l(1), r17.y, l(0)
        bfi r10.w, l(1), l(0), r17.x, r10.w
        imul null, r10.w, r10.w, l(10)
        ushr r9.w, r9.w, r10.w
        and r9.w, r9.w, l(1023)
        iadd r17.x, r9.w, r16.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.x, l(0), t23.xxxx
        iadd r17.yz, r16.zzzz, l(0, 1, 2, 0)
        iadd r9.w, -r17.y, l(6)
        ushr r18.xy, r14.wzww, r9.wwww
        and r9.w, r17.w, l(0xc0000000)
        or r10.w, r17.w, l(0x40000000)
        bfi r16.z, l(1), l(1), r18.y, l(0)
        bfi r16.z, l(1), l(0), r18.x, r16.z
        imul null, r16.z, r16.z, l(10)
        ushr r10.w, r10.w, r16.z
        and r10.w, r10.w, l(1023)
        iadd r18.x, r10.w, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
        mov r18.y, r17.z
        movc r18.xyz, r9.wwww, r17.xywx, r18.xyzx
        iadd r10.w, -r18.y, l(6)
        ushr r17.yz, r14.wwzw, r10.wwww
        and r10.w, r18.z, l(0xc0000000)
        or r16.z, r18.z, l(0x40000000)
        bfi r17.z, l(1), l(1), r17.z, l(0)
        bfi r17.y, l(1), l(0), r17.y, r17.z
        imul null, r17.y, r17.y, l(10)
        ushr r16.z, r16.z, r17.y
        and r16.z, r16.z, l(1023)
        iadd r19.x, r16.z, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.y, r19.x, l(0), t23.xxxx
        movc r17.yz, r10.wwww, r18.xxzx, r19.xxyx
        movc r16.xw, r9.wwww, r17.xxxw, r17.yyyz
      endif 
      and r9.w, r16.w, l(0xc0000000)
      if_z r9.w
        ubfe r10.w, l(14), l(15), r16.w
        utof r10.w, r10.w
        mul r10.w, r10.w, cb2[27].w
        mul r10.w, r10.w, l(0.00006104)
        and r17.xy, r16.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r16.z, r17.x
        mul r16.z, r16.z, cb2[27].w
        mul r16.z, r16.z, l(0.00003052)
        and r17.x, r14.z, l(3)
        iadd r17.x, r16.x, r17.x
        iadd r17.x, r17.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.x, r17.x, l(0), t23.xxxx
        bfi r18.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r14.yzwy, l(0, 0, 0, 0)
        ushr r14.y, r17.x, r18.x
        and r14.y, r14.y, l(255)
        utof r14.y, r14.y
        mul r14.y, r16.z, r14.y
        mad r14.y, r14.y, l(0.00392157), r10.w
        iadd r14.z, r18.y, l(1)
        ubfe r14.w, l(1), l(1), r14.w
        iadd r14.z, r14.w, r14.z
        iadd r14.z, r14.z, r16.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.z, r14.z, l(0), t23.xxxx
        ushr r14.z, r14.z, r18.z
        and r14.z, r14.z, l(0x0000ffff)
        utof r14.z, r14.z
        mul r14.z, r16.z, r14.z
        mad r10.w, r14.z, l(0.00001526), r10.w
        movc r16.y, r17.y, r14.y, r10.w
      else 
        and r10.w, r16.w, l(0x80000000)
        iadd r14.y, r16.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.y, r14.y, l(0), t23.xxxx
        movc r10.w, r10.w, r14.y, l(0)
        ishl r14.y, r16.w, l(2)
        ushr r14.z, r10.w, l(16)
        f16tof32 r14.z, r14.z
        and r10.w, r10.w, l(0x0000ffff)
        f16tof32 r10.w, r10.w
        mad r14.y, r13.y, r14.z, r14.y
        mad r10.w, r13.z, r10.w, r14.y
        movc r16.y, r9.w, r10.w, r16.y
      endif 
    endif 
    mad r9.w, -cb2[27].z, l(2.000000), r13.w
    lt r9.w, r16.y, r9.w
    movc r4.z, r9.w, l(0), l(1.000000)
  endif 
  if_z r8.w
    if_z cb2[58].y
      ftou r8.w, r6.w
      add r14.yz, r13.yyzy, -cb2[r8.w + 20].xxyx
      mul r14.yz, r14.yyzy, cb2[r8.w + 20].zzzz
      mad r16.xy, r14.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r8.w, cb2[26].y
      add r16.z, r6.w, r8.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r16.xyzx, t13.xxxx, s13, r3.w
      sample_l_indexable(texture2darray)(float,float,float,float) r9.w, r16.xyzx, t31.yzwx, s0, l(0.000000)
      add r8.w, r8.w, r9.w
      add_sat r8.w, r8.w, l(-1.000000)
      mul r9.w, r8.w, r8.w
      mul r4.z, r8.w, r9.w
    endif 
    if_nz cb2[58].y
      mov r16.x, -r13.x
      ftou r8.w, r6.w
      add r6.w, r6.w, l(1.000000)
      min r6.w, r6.w, l(2.000000)
      ftou r6.w, r6.w
      add r7.w, -r7.w, l(1.000000)
      mul r7.w, r7.w, l(28.000000)
      ftou r7.w, r7.w
      add r14.yz, r13.yyzy, -cb2[r8.w + 20].xxyx
      mul r14.yz, r14.yyzy, cb2[r8.w + 20].zzzz
      mad r14.yz, r14.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      add r13.yz, r13.yyzy, -cb2[r6.w + 20].xxyx
      mul r13.yz, r13.yyzy, cb2[r6.w + 20].zzzz
      mad r13.yz, r13.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r16.y, r14.x
      mov r16.z, r13.x
      mov r9.w, l(0)
      mov r10.w, l(0)
      loop 
        uge r13.w, r10.w, l(8)
        breakc_nz r13.w
        ult r13.w, r7.w, r10.w
        movc r17.xy, r13.wwww, r13.yzyy, r14.yzyy
        movc r14.w, r13.w, cb2[r6.w + 20].w, cb2[r8.w + 20].w
        movc r13.w, r13.w, r6.w, r8.w
        dp2 r18.x, icb[r10.w + 0].yxyy, r16.xyxx
        dp2 r18.y, icb[r10.w + 0].yxyy, r16.yzyy
        mad r17.xy, r18.xyxx, r14.wwww, r17.xyxx
        iadd r13.w, r13.w, cb2[26].y
        utof r17.z, r13.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r17.xyzx, t13.xxxx, s13, r3.w
        sample_l_indexable(texture2darray)(float,float,float,float) r14.w, r17.xyzx, t31.yzwx, s0, l(0.000000)
        add r13.w, r13.w, r14.w
        add_sat r13.w, r13.w, l(-1.000000)
        mad r9.w, r13.w, l(0.125000), r9.w
        iadd r10.w, r10.w, l(1)
      endloop 
      mul r3.w, r9.w, r9.w
      mul r4.z, r9.w, r3.w
    endif 
  endif 
endif 
add r3.w, -r2.y, l(1.000000)
mul r6.w, r3.w, l(5.000000)
mad r7.w, r3.w, l(5.000000), l(-2.500000)
mul r7.w, r7.w, l(0.400000)
max r7.w, r7.w, l(0.000000)
mul r7.w, r7.w, l(100.000000)
mad r13.yz, -r3.wwww, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r8.w, r13.y
mul r8.w, r2.x, r8.w
mul r8.w, r8.w, l(9.136810)
mul r9.w, r3.w, r6.w
mad r9.w, -r9.w, l(2.015905), r13.z
exp r9.w, r9.w
mul r9.w, r2.x, r9.w
mul r9.w, r9.w, l(9.708090)
max r8.w, r8.w, r9.w
max r8.w, r8.w, l(1.268160)
iadd r9.w, cb2[0].y, -cb2[58].x
ushr r13.yz, r0.yyxy, l(0, 24, 24, 0)
ubfe r0.x, l(10), l(12), r0.y
mov r16.x, l(16)
mov r17.yz, l(0,0,1.000000,0)
mov r18.xy, l(0,0,0,0)
mov r19.xz, l(1.000000,0,1.000000,0)
mov r20.xy, l(0,0,0,0)
mov r21.xy, l(0,0,0,0)
mov r22.xyzw, l(0,0,0,0)
mov r23.xyzw, l(0,0,0,0)
mov r0.y, l(0)
loop 
  ieq r10.w, r0.y, l(2)
  breakc_nz r10.w
  movc r10.w, r0.y, r0.x, r13.y
  uge r13.w, r10.w, r9.w
  ult r14.y, r10.w, cb2[0].y
  and r13.w, r13.w, r14.y
  if_nz r13.w
    imul null, r10.w, r10.w, l(14)
    if_nz r2.w
      and r13.w, r23.w, l(3)
      imad r13.w, r13.w, l(20), l(880)
      add r16.yzw, cb1[24].xxyz, cb10[r10.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r13.w, r16.xyzw
    endif 
    iadd r24.w, r23.w, l(1)
    add r14.yzw, r11.xxyz, -cb10[r10.w + 0].xxyz
    and r13.w, l(0x0000ffff), cb10[r10.w + 7].z
    ubfe r16.y, l(6), l(25), cb10[r10.w + 7].z
    imul null, r16.z, r13.w, l(6)
    dp3 r16.w, cb11[r16.z + 0].xyzx, r14.yzwy
    add_sat r16.w, r16.w, cb11[r16.z + 0].w
    dp3 r17.w, cb11[r16.z + 1].xyzx, r14.yzwy
    add_sat r17.w, r17.w, cb11[r16.z + 1].w
    mul r16.w, r16.w, r17.w
    dp3 r17.w, cb11[r16.z + 2].xyzx, r14.yzwy
    add_sat r17.w, r17.w, cb11[r16.z + 2].w
    mul r16.w, r16.w, r17.w
    dp3 r17.w, cb11[r16.z + 3].xyzx, r14.yzwy
    add_sat r17.w, r17.w, cb11[r16.z + 3].w
    mul r16.w, r16.w, r17.w
    dp3 r17.w, cb11[r16.z + 4].xyzx, r14.yzwy
    add_sat r17.w, r17.w, cb11[r16.z + 4].w
    mul r16.w, r16.w, r17.w
    dp3 r17.w, cb11[r16.z + 5].xyzx, r14.yzwy
    add_sat r16.z, r17.w, cb11[r16.z + 5].w
    mul r17.x, r16.z, r16.w
    and r16.z, l(1), cb10[r10.w + 6].x
    movc r16.zw, r16.zzzz, r17.xxxy, r17.zzzx
    mov r17.x, cb10[r10.w + 6].x
    mov r25.xy, r16.zwzz
    mov r17.w, l(1)
    loop 
      ige r18.w, r17.w, r16.y
      breakc_nz r18.w
      iadd r18.w, r13.w, r17.w
      imul null, r18.w, r18.w, l(6)
      dp3 r20.w, cb11[r18.w + 0].xyzx, r14.yzwy
      add_sat r20.w, r20.w, cb11[r18.w + 0].w
      mul r20.w, r20.w, r25.x
      dp3 r21.w, cb11[r18.w + 1].xyzx, r14.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 1].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 2].xyzx, r14.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 2].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 3].xyzx, r14.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 3].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 4].xyzx, r14.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 4].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 5].xyzx, r14.yzwy
      add_sat r18.w, r21.w, cb11[r18.w + 5].w
      mul r25.x, r18.w, r20.w
      ushr r21.w, r17.x, l(2)
      ubfe r25.z, l(1), l(2), r17.x
      and r25.w, r21.w, l(2)
      max r26.x, r25.x, r25.y
      mad r18.w, -r20.w, r18.w, l(1.000000)
      mul r18.w, r18.w, r25.y
      movc r19.y, r25.w, r18.w, r26.x
      movc r25.xy, r25.zzzz, r25.xyxx, r19.xyxx
      iadd r17.w, r17.w, l(1)
      mov r17.x, r21.w
    endloop 
    mov_sat r25.y, r25.y
    mul r13.w, r25.y, cb10[r10.w + 6].y
    lt r16.y, l(0.000000), r13.w
    if_nz r16.y
      and r16.y, r24.w, l(7)
      iadd r16.z, r16.y, l(-1)
      ult r16.z, r16.z, l(32)
      and r16.z, r2.w, r16.z
      if_nz r16.z
        imad r16.yz, r16.yyyy, l(0, 20, 20, 0), l(0, 860, 876, 0)
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r16.w, cb2[52].x, r16.y, u2.xxxx
        or r16.w, r16.w, l(32)
        store_structured u2.x, cb2[52].x, r16.y, r16.w
        store_structured u2.x, cb2[52].x, r16.z, r13.w
      endif 
      iadd r23.w, r23.w, l(257)
      mad r23.z, r25.y, cb10[r10.w + 6].y, r23.z
      mul r13.w, r13.w, cb10[r10.w + 7].y
      mov r26.x, cb10[r10.w + 7].w
      mov r26.yz, cb10[r10.w + 8].xxyx
      dp3 r16.y, r15.xyzx, r26.xyzx
      dp3 r16.z, r14.yzwy, r26.xyzx
      add r16.z, r16.z, -cb10[r10.w + 8].z
      ge r16.w, r16.z, l(0.000000)
      max r16.z, r7.w, |r16.z|
      movc r16.z, r16.w, r16.z, -r16.z
      max r16.y, -r16.y, l(0.00000010)
      div r16.y, r16.z, r16.y
      min r16.y, |r16.y|, l(131072.000000)
      mov r26.x, cb10[r10.w + 8].w
      mov r26.yz, cb10[r10.w + 9].xxyx
      dp3 r16.z, r15.xyzx, r26.xyzx
      dp3 r16.w, r14.yzwy, r26.xyzx
      add r16.w, r16.w, -cb10[r10.w + 9].z
      ge r17.x, r16.w, l(0.000000)
      max r16.w, r7.w, |r16.w|
      movc r16.w, r17.x, r16.w, -r16.w
      max r16.z, -r16.z, l(0.00000010)
      div r16.z, r16.w, r16.z
      min r16.y, |r16.z|, r16.y
      mov r26.x, cb10[r10.w + 9].w
      mov r26.yz, cb10[r10.w + 10].xxyx
      dp3 r16.z, r15.xyzx, r26.xyzx
      dp3 r16.w, r14.yzwy, r26.xyzx
      add r16.w, r16.w, -cb10[r10.w + 10].z
      ge r17.x, r16.w, l(0.000000)
      max r16.w, r7.w, |r16.w|
      movc r16.w, r17.x, r16.w, -r16.w
      max r16.z, -r16.z, l(0.00000010)
      div r16.z, r16.w, r16.z
      min r16.y, |r16.z|, r16.y
      mov r26.x, cb10[r10.w + 10].w
      mov r26.yz, cb10[r10.w + 11].xxyx
      dp3 r16.z, r15.xyzx, r26.xyzx
      dp3 r16.w, r14.yzwy, r26.xyzx
      add r16.w, r16.w, -cb10[r10.w + 11].z
      ge r17.x, r16.w, l(0.000000)
      max r16.w, r7.w, |r16.w|
      movc r16.w, r17.x, r16.w, -r16.w
      max r16.z, -r16.z, l(0.00000010)
      div r16.z, r16.w, r16.z
      min r16.y, |r16.z|, r16.y
      mov r26.x, cb10[r10.w + 11].w
      mov r26.yz, cb10[r10.w + 12].xxyx
      dp3 r16.z, r15.xyzx, r26.xyzx
      dp3 r16.w, r14.yzwy, r26.xyzx
      add r16.w, r16.w, -cb10[r10.w + 12].z
      ge r17.x, r16.w, l(0.000000)
      max r16.w, r7.w, |r16.w|
      movc r16.w, r17.x, r16.w, -r16.w
      max r16.z, -r16.z, l(0.00000010)
      div r16.z, r16.w, r16.z
      min r16.y, |r16.z|, r16.y
      mov r26.x, cb10[r10.w + 12].w
      mov r26.yz, cb10[r10.w + 13].xxyx
      dp3 r16.z, r15.xyzx, r26.xyzx
      dp3 r16.w, r14.yzwy, r26.xyzx
      add r16.w, r16.w, -cb10[r10.w + 13].z
      ge r17.x, r16.w, l(0.000000)
      max r16.w, r7.w, |r16.w|
      movc r16.w, r17.x, r16.w, -r16.w
      max r16.z, -r16.z, l(0.00000010)
      div r16.z, r16.w, r16.z
      min r16.y, |r16.z|, r16.y
      add r26.x, r14.y, cb10[r10.w + 3].w
      add r26.yz, r14.zzwz, cb10[r10.w + 4].xxyx
      mad r25.xzw, r15.xxyz, r16.yyyy, r26.xxyz
      dp3 r16.z, r25.xzwx, r25.xzwx
      sqrt r16.z, r16.z
      div r16.y, r16.y, r16.z
      add r16.y, r16.y, r16.y
      sqrt r16.y, r16.y
      mad r16.y, r3.w, l(5.000000), r16.y
      add r16.y, r16.y, l(-0.844800)
      mov r26.x, cb10[r10.w + 0].w
      mov r26.y, cb10[r10.w + 1].z
      mov r26.z, cb10[r10.w + 2].y
      dp3 r27.x, r25.xzwx, r26.xyzx
      mov r28.xy, cb10[r10.w + 1].xwxx
      mov r28.z, cb10[r10.w + 2].z
      dp3 r27.y, r25.xzwx, r28.xyzx
      mov r29.x, cb10[r10.w + 1].y
      mov r29.yz, cb10[r10.w + 2].xxwx
      dp3 r27.z, r25.xzwx, r29.xyzx
      ubfe r16.z, l(9), l(16), cb10[r10.w + 7].z
      utof r27.w, r16.z
      sample_l_indexable(texturecubearray)(float,float,float,float) r16.yzw, r27.xyzw, t8.wxyz, s2, r16.y
      and r25.xzw, r16.yyzw, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
      ieq r25.xzw, r25.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
      or r17.x, r25.z, r25.x
      or r17.x, r25.w, r17.x
      movc r16.yzw, r17.xxxx, l(0,1.000000,1.000000,0), r16.yyzw
      dp3 r30.x, r14.yzwy, r26.xyzx
      dp3 r30.y, r14.yzwy, r28.xyzx
      dp3 r30.z, r14.yzwy, r29.xyzx
      mad_sat r14.yzw, r30.xxyz, cb10[r10.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r30.xy, r14.yzyy, cb10[r10.w + 4].zwzz
      mul r30.z, r14.w, cb10[r10.w + 5].x
      add r14.yzw, r30.xxyz, cb10[r10.w + 5].yyzw
      dp3 r27.x, r12.xyzx, r26.xyzx
      dp3 r27.y, r12.xyzx, r28.xyzx
      dp3 r27.z, r12.xyzx, r29.xyzx
      lt r25.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r27.xxyz
      movc r18.z, r25.x, l(0), l(0.500000)
      add r26.xyz, r14.yzwy, r18.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t17.xyzw, s4, l(0.000000)
      mul r28.xyz, r27.xyzx, r27.xyzx
      mul r28.xyz, r13.wwww, r28.xyzx
      movc r20.z, r25.z, l(0), l(0.500000)
      add r29.xyz, r14.yzwy, r20.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t18.xyzw, s4, l(0.000000)
      mul r29.xyz, r28.yyyy, r29.xyzx
      mad r26.xyz, r26.xyzx, r28.xxxx, r29.xyzx
      movc r21.z, r25.w, l(0), l(0.500000)
      add r14.yzw, r14.yyzw, r21.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r14.yzw, r14.yzwy, t19.wxyz, s4, l(0.000000)
      mad r14.yzw, r14.yyzw, r28.zzzz, r26.xxyz
      sample_l_indexable(texturecubearray)(float,float,float,float) r25.xzw, r27.xyzw, t8.xwyz, s2, l(6.000000)
      and r26.xyz, r25.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r26.xyz, r26.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r10.w, r26.y, r26.x
      or r10.w, r26.z, r10.w
      movc r25.xzw, r10.wwww, l(1.000000,0,1.000000,0), r25.xxzw
      mul r26.xyz, r14.yzwy, r25.xzwx
      dp3 r10.w, r26.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r22.xyz, r14.yzwy, r25.xzwx, r22.xyzx
      mul r14.y, r8.w, r10.w
      mul r16.yzw, r13.wwww, r16.yyzw
      dp3 r13.w, r16.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r10.w, r8.w, r10.w, r13.w
      div r10.w, r14.y, r10.w
      mov r26.x, r22.w
      mov r26.yz, r23.xxyx
      mad r14.yzw, r16.yyzw, r10.wwww, r26.xxyz
      mov r22.w, r14.y
      mov r23.xy, r14.zwzz
    else 
      mov r24.xyz, r23.xyzx
      mov r23.xyzw, r24.xyzw
    endif 
  endif 
  iadd r0.y, r0.y, l(1)
endloop 
mov r16.x, l(16)
mov r17.yz, l(0,0,1.000000,0)
mov r18.xy, l(0,0,0,0)
mov r20.xy, l(0,0,0,0)
mov r21.xy, l(0,0,0,0)
mov r14.yzw, r22.xxyz
mov r24.x, r22.w
mov r24.yz, r23.xxyx
mov r19.xy, r23.zwzz
mov r0.y, l(0)
loop 
  ieq r10.w, r0.y, l(2)
  breakc_nz r10.w
  movc r10.w, r0.y, r0.x, r13.y
  ult r13.w, r10.w, r9.w
  if_nz r13.w
    imul null, r10.w, r10.w, l(14)
    if_nz r2.w
      and r13.w, r19.y, l(15)
      imad r13.w, r13.w, l(20), l(880)
      add r16.yzw, cb1[24].xxyz, cb10[r10.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r13.w, r16.xyzw
    endif 
    iadd r25.y, r19.y, l(1)
    add r16.yzw, r11.xxyz, -cb10[r10.w + 0].xxyz
    and r13.w, l(0x0000ffff), cb10[r10.w + 7].z
    ubfe r17.w, l(6), l(25), cb10[r10.w + 7].z
    imul null, r18.w, r13.w, l(6)
    dp3 r20.w, cb11[r18.w + 0].xyzx, r16.yzwy
    add_sat r20.w, r20.w, cb11[r18.w + 0].w
    dp3 r21.w, cb11[r18.w + 1].xyzx, r16.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 1].w
    mul r20.w, r20.w, r21.w
    dp3 r21.w, cb11[r18.w + 2].xyzx, r16.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 2].w
    mul r20.w, r20.w, r21.w
    dp3 r21.w, cb11[r18.w + 3].xyzx, r16.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 3].w
    mul r20.w, r20.w, r21.w
    dp3 r21.w, cb11[r18.w + 4].xyzx, r16.yzwy
    add_sat r21.w, r21.w, cb11[r18.w + 4].w
    mul r20.w, r20.w, r21.w
    dp3 r21.w, cb11[r18.w + 5].xyzx, r16.yzwy
    add_sat r18.w, r21.w, cb11[r18.w + 5].w
    mul r17.x, r18.w, r20.w
    and r18.w, l(1), cb10[r10.w + 6].x
    movc r25.zw, r18.wwww, r17.xxxy, r17.zzzx
    mov r17.x, cb10[r10.w + 6].x
    mov r26.xy, r25.zwzz
    mov r18.w, l(1)
    loop 
      ige r20.w, r18.w, r17.w
      breakc_nz r20.w
      iadd r20.w, r13.w, r18.w
      imul null, r20.w, r20.w, l(6)
      dp3 r21.w, cb11[r20.w + 0].xyzx, r16.yzwy
      add_sat r21.w, r21.w, cb11[r20.w + 0].w
      mul r21.w, r21.w, r26.x
      dp3 r24.w, cb11[r20.w + 1].xyzx, r16.yzwy
      add_sat r24.w, r24.w, cb11[r20.w + 1].w
      mul r21.w, r21.w, r24.w
      dp3 r24.w, cb11[r20.w + 2].xyzx, r16.yzwy
      add_sat r24.w, r24.w, cb11[r20.w + 2].w
      mul r21.w, r21.w, r24.w
      dp3 r24.w, cb11[r20.w + 3].xyzx, r16.yzwy
      add_sat r24.w, r24.w, cb11[r20.w + 3].w
      mul r21.w, r21.w, r24.w
      dp3 r24.w, cb11[r20.w + 4].xyzx, r16.yzwy
      add_sat r24.w, r24.w, cb11[r20.w + 4].w
      mul r21.w, r21.w, r24.w
      dp3 r24.w, cb11[r20.w + 5].xyzx, r16.yzwy
      add_sat r20.w, r24.w, cb11[r20.w + 5].w
      mul r26.x, r20.w, r21.w
      ushr r24.w, r17.x, l(2)
      ubfe r26.z, l(1), l(2), r17.x
      and r26.w, r24.w, l(2)
      max r27.x, r26.x, r26.y
      mad r20.w, -r21.w, r20.w, l(1.000000)
      mul r20.w, r20.w, r26.y
      movc r19.w, r26.w, r20.w, r27.x
      movc r26.xy, r26.zzzz, r26.xyxx, r19.zwzz
      iadd r18.w, r18.w, l(1)
      mov r17.x, r24.w
    endloop 
    add_sat r13.w, -r23.z, r26.y
    mul r17.x, r13.w, cb10[r10.w + 6].y
    lt r17.w, l(0.000000), r17.x
    if_nz r17.w
      and r17.w, r25.y, l(31)
      iadd r18.w, r17.w, l(-1)
      ult r18.w, r18.w, l(32)
      and r18.w, r2.w, r18.w
      if_nz r18.w
        imad r25.zw, r17.wwww, l(0, 0, 20, 20), l(0, 0, 860, 876)
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.w, cb2[52].x, r25.z, u2.xxxx
        or r17.w, r17.w, l(32)
        store_structured u2.x, cb2[52].x, r25.z, r17.w
        store_structured u2.x, cb2[52].x, r25.w, r17.x
      endif 
      iadd r19.y, r19.y, l(257)
      mad r19.x, r13.w, cb10[r10.w + 6].y, r19.x
      mul r13.w, r17.x, cb10[r10.w + 7].y
      mov r27.x, cb10[r10.w + 7].w
      mov r27.yz, cb10[r10.w + 8].xxyx
      dp3 r17.x, r15.xyzx, r27.xyzx
      dp3 r17.w, r16.yzwy, r27.xyzx
      add r17.w, r17.w, -cb10[r10.w + 8].z
      ge r18.w, r17.w, l(0.000000)
      max r17.w, r7.w, |r17.w|
      movc r17.w, r18.w, r17.w, -r17.w
      max r17.x, -r17.x, l(0.00000010)
      div r17.x, r17.w, r17.x
      min r17.x, |r17.x|, l(131072.000000)
      mov r27.x, cb10[r10.w + 8].w
      mov r27.yz, cb10[r10.w + 9].xxyx
      dp3 r17.w, r15.xyzx, r27.xyzx
      dp3 r18.w, r16.yzwy, r27.xyzx
      add r18.w, r18.w, -cb10[r10.w + 9].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r7.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r17.w, -r17.w, l(0.00000010)
      div r17.w, r18.w, r17.w
      min r17.x, |r17.w|, r17.x
      mov r27.x, cb10[r10.w + 9].w
      mov r27.yz, cb10[r10.w + 10].xxyx
      dp3 r17.w, r15.xyzx, r27.xyzx
      dp3 r18.w, r16.yzwy, r27.xyzx
      add r18.w, r18.w, -cb10[r10.w + 10].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r7.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r17.w, -r17.w, l(0.00000010)
      div r17.w, r18.w, r17.w
      min r17.x, |r17.w|, r17.x
      mov r27.x, cb10[r10.w + 10].w
      mov r27.yz, cb10[r10.w + 11].xxyx
      dp3 r17.w, r15.xyzx, r27.xyzx
      dp3 r18.w, r16.yzwy, r27.xyzx
      add r18.w, r18.w, -cb10[r10.w + 11].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r7.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r17.w, -r17.w, l(0.00000010)
      div r17.w, r18.w, r17.w
      min r17.x, |r17.w|, r17.x
      mov r27.x, cb10[r10.w + 11].w
      mov r27.yz, cb10[r10.w + 12].xxyx
      dp3 r17.w, r15.xyzx, r27.xyzx
      dp3 r18.w, r16.yzwy, r27.xyzx
      add r18.w, r18.w, -cb10[r10.w + 12].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r7.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r17.w, -r17.w, l(0.00000010)
      div r17.w, r18.w, r17.w
      min r17.x, |r17.w|, r17.x
      mov r27.x, cb10[r10.w + 12].w
      mov r27.yz, cb10[r10.w + 13].xxyx
      dp3 r17.w, r15.xyzx, r27.xyzx
      dp3 r18.w, r16.yzwy, r27.xyzx
      add r18.w, r18.w, -cb10[r10.w + 13].z
      ge r19.w, r18.w, l(0.000000)
      max r18.w, r7.w, |r18.w|
      movc r18.w, r19.w, r18.w, -r18.w
      max r17.w, -r17.w, l(0.00000010)
      div r17.w, r18.w, r17.w
      min r17.x, |r17.w|, r17.x
      add r27.x, r16.y, cb10[r10.w + 3].w
      add r27.yz, r16.zzwz, cb10[r10.w + 4].xxyx
      mad r26.xzw, r15.xxyz, r17.xxxx, r27.xxyz
      dp3 r17.w, r26.xzwx, r26.xzwx
      sqrt r17.w, r17.w
      div r17.x, r17.x, r17.w
      add r17.x, r17.x, r17.x
      sqrt r17.x, r17.x
      mad r17.x, r3.w, l(5.000000), r17.x
      add r17.x, r17.x, l(-0.844800)
      mov r27.x, cb10[r10.w + 0].w
      mov r27.y, cb10[r10.w + 1].z
      mov r27.z, cb10[r10.w + 2].y
      dp3 r28.x, r26.xzwx, r27.xyzx
      mov r29.xy, cb10[r10.w + 1].xwxx
      mov r29.z, cb10[r10.w + 2].z
      dp3 r28.y, r26.xzwx, r29.xyzx
      mov r30.x, cb10[r10.w + 1].y
      mov r30.yz, cb10[r10.w + 2].xxwx
      dp3 r28.z, r26.xzwx, r30.xyzx
      ubfe r17.w, l(9), l(16), cb10[r10.w + 7].z
      utof r28.w, r17.w
      sample_l_indexable(texturecubearray)(float,float,float,float) r26.xzw, r28.xyzw, t8.xwyz, s2, r17.x
      and r31.xyz, r26.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r31.xyz, r31.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r17.x, r31.y, r31.x
      or r17.x, r31.z, r17.x
      movc r26.xzw, r17.xxxx, l(1.000000,0,1.000000,0), r26.xxzw
      dp3 r31.x, r16.yzwy, r27.xyzx
      dp3 r31.y, r16.yzwy, r29.xyzx
      dp3 r31.z, r16.yzwy, r30.xyzx
      mad_sat r16.yzw, r31.xxyz, cb10[r10.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r31.xy, r16.yzyy, cb10[r10.w + 4].zwzz
      mul r31.z, r16.w, cb10[r10.w + 5].x
      add r16.yzw, r31.xxyz, cb10[r10.w + 5].yyzw
      dp3 r28.x, r12.xyzx, r27.xyzx
      dp3 r28.y, r12.xyzx, r29.xyzx
      dp3 r28.z, r12.xyzx, r30.xyzx
      lt r27.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r28.xyzx
      movc r18.z, r27.x, l(0), l(0.500000)
      add r29.xyz, r16.yzwy, r18.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t17.xyzw, s4, l(0.000000)
      mul r30.xyz, r28.xyzx, r28.xyzx
      mul r30.xyz, r13.wwww, r30.xyzx
      movc r20.z, r27.y, l(0), l(0.500000)
      add r27.xyw, r16.yzyw, r20.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r27.xyw, r27.xywx, t18.xywz, s4, l(0.000000)
      mul r27.xyw, r30.yyyy, r27.xyxw
      mad r27.xyw, r29.xyxz, r30.xxxx, r27.xyxw
      movc r21.z, r27.z, l(0), l(0.500000)
      add r16.yzw, r16.yyzw, r21.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r16.yzw, r16.yzwy, t19.wxyz, s4, l(0.000000)
      mad r16.yzw, r16.yyzw, r30.zzzz, r27.xxyw
      sample_l_indexable(texturecubearray)(float,float,float,float) r27.xyz, r28.xyzw, t8.xyzw, s2, l(6.000000)
      and r28.xyz, r27.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r28.xyz, r28.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r10.w, r28.y, r28.x
      or r10.w, r28.z, r10.w
      movc r27.xyz, r10.wwww, l(1.000000,1.000000,0,0), r27.xyzx
      mul r28.xyz, r16.yzwy, r27.xyzx
      dp3 r10.w, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r14.yzw, r16.yyzw, r27.xxyz, r14.yyzw
      mul r16.y, r8.w, r10.w
      mul r26.xzw, r13.wwww, r26.xxzw
      dp3 r13.w, r26.xzwx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r10.w, r8.w, r10.w, r13.w
      div r10.w, r16.y, r10.w
      mad r24.xyz, r26.xzwx, r10.wwww, r24.xyzx
    else 
      mov r25.x, r19.x
      mov r19.xy, r25.xyxx
    endif 
  endif 
  iadd r0.y, r0.y, l(1)
endloop 
ge r0.x, r23.z, l(1.000000)
bfi r0.y, l(8), l(0), r19.y, r23.w
movc r0.x, r0.x, r0.y, r19.y
max r0.y, r19.x, l(1.000000)
rcp r0.y, r0.y
mov_sat r19.x, r19.x
mul r16.xyz, r0.yyyy, r14.yzwy
mul r17.xyz, r0.yyyy, r24.xyzx
lt r3.w, r19.x, l(0.990000)
if_nz r3.w
  iadd r0.x, r0.x, l(256)
  add r3.w, -r19.x, l(1.000000)
  mul r7.w, r3.w, cb2[19].x
  add r18.xyz, r11.xyzx, -cb2[35].xyzx
  mul r19.x, r18.x, cb2[35].w
  mul r19.yz, r18.yyzy, cb2[36].xxyx
  add_sat r18.xyz, r19.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r19.xy, r18.xyxx, cb2[36].zwzz
  mul r19.z, r18.z, cb2[37].x
  add r18.xyz, r19.xyzx, cb2[37].yzwy
  lt r19.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
  movc r19.xyz, r19.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r19.w, l(0)
  add r20.xyz, r18.xyzx, r19.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
  mul r21.xyz, r12.xyzx, r12.xyzx
  mul r21.xyz, r7.wwww, r21.xyzx
  add r22.xyz, r18.xyzx, r19.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t18.xyzw, s4, l(0.000000)
  mul r22.xyz, r21.yyyy, r22.xyzx
  mad r20.xyz, r20.xyzx, r21.xxxx, r22.xyzx
  add r18.xyz, r18.xyzx, r19.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t19.xyzw, s4, l(0.000000)
  mad r18.xyz, r18.xyzx, r21.zzzz, r20.xyzx
  mov r12.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r12.xyzw, t8.xyzw, s2, l(6.000000)
  mul r18.xyz, r18.xyzx, r19.xyzx
  dp3 r7.w, r18.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r16.xyz, r14.yzwy, r0.yyyy, r18.xyzx
  mov r15.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r14.yzw, r15.xyzw, t8.wxyz, s2, r6.w
  mad r0.y, cb2[19].x, r3.w, -r7.w
  mad r0.y, r2.y, r0.y, r7.w
  mad r17.xyz, r14.yzwy, r0.yyyy, r17.xyzx
endif 
add r0.y, r5.z, r2.x
log r0.y, |r0.y|
mul r0.y, r0.y, r2.z
exp r0.y, r0.y
add r0.y, r5.z, r0.y
add_sat r0.y, r0.y, l(-1.000000)
mul r16.xyz, r5.zzzz, r16.xyzx
mad r13.yw, r2.xxxy, l(0.000000, 0.984375, 0.000000, 0.984375), l(0.000000, 0.00781250, 0.000000, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r13.yw, r13.ywyy, t5.zxwy, s2, l(0.000000)
mul r14.yzw, r0.yyyy, r17.xxyz
mul r17.xyz, r13.yyyy, r14.zwyz
mul r14.yzw, r13.wwww, r14.yyzw
sqrt r0.y, r2.z
mad r0.y, r0.y, l(0.500000), l(0.500000)
mul r0.y, r0.y, r0.y
mul r2.y, r0.y, l(0.500000)
mad r0.y, -r0.y, l(0.500000), l(1.000000)
mad r3.w, r2.x, r0.y, r2.y
mul r0.y, r0.y, r3.w
mul r2.y, r2.y, r3.w
if_nz r2.w
  mov r18.x, l(3)
  mov r18.yzw, cb1[24].xxyz
  store_structured u2.xyzw, cb2[52].x, l(112), r18.xyzw
endif 
lt r3.w, l(0.000000), r3.z
if_nz r3.w
  if_nz r2.w
    ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r3.w, cb2[52].x, l(112), u2.xxxx
    or r3.w, r3.w, l(4)
    store_structured u2.x, cb2[52].x, l(112), r3.w
    store_structured u2.x, cb2[52].x, l(128), r4.z
  endif 
  lt r3.w, l(0.000000), r4.z
  if_nz r3.w
    mul r3.w, r1.w, cb2[18].w
    mul r3.w, r3.z, r3.w
    if_nz cb2[23].x
      add r18.xyz, r11.xyzx, cb1[24].xyzx
      mov r18.w, l(1.000000)
      dp4 r5.z, cb2[24].xyzw, r18.xyzw
      dp4 r6.w, cb2[25].xyzw, r18.xyzw
      frc r18.x, r5.z
      frc r18.y, r6.w
      iadd r5.z, l(-1), cb2[23].x
      utof r18.z, r5.z
      sample_l_indexable(texture2darray)(float,float,float,float) r18.xyz, r18.xyzx, t20.xyzw, s2, l(0.000000)
      add r18.xyz, r18.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r18.xyz, cb2[23].yyyy, r18.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r18.xyz, r18.xyzx, cb2[18].xyzx
    else 
      mov r18.xyz, cb2[18].xyzx
    endif 
    ushr r5.z, cb2[53].x, l(16)
    ult r6.w, l(0), r5.z
    and r6.w, r3.x, r6.w
    if_nz r6.w
      iadd r5.z, r5.z, cb2[0].x
      imad r5.z, r5.z, l(15), l(-15)
      mad r6.w, |r3.y|, l(-0.200000), l(0.400000)
      mad r19.xyz, r12.xyzx, r6.wwww, r11.xyzx
      mov r20.xyz, cb9[r5.z + 4].yzwy
      mov r20.w, cb9[r5.z + 5].x
      mov r19.w, l(1.000000)
      dp4 r20.x, r20.xyzw, r19.xyzw
      mov r21.xyz, cb9[r5.z + 5].yzwy
      mov r21.w, cb9[r5.z + 6].x
      dp4 r20.y, r21.xyzw, r19.xyzw
      mad r13.yw, r20.xxxy, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
      add r20.x, r13.y, cb9[r5.z + 9].w
      add r20.y, r13.w, cb9[r5.z + 10].x
      mul r13.yw, r20.xxxy, cb9[r5.z + 9].yyyz
      div r20.xy, cb9[r5.z + 3].yyyy, cb9[r5.z + 8].ywyy
      add r20.zw, -r20.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      ge r20.zw, r13.yyyw, r20.zzzw
      ge r20.xy, r20.xyxx, r13.ywyy
      or r20.xy, r20.xyxx, r20.zwzz
      or r6.w, r20.y, r20.x
      if_z r6.w
        mov r20.xyz, cb9[r5.z + 6].yzwy
        mov r20.w, cb9[r5.z + 7].x
        dp4 r6.w, r20.xyzw, r19.xyzw
        mov_sat r13.yw, r13.yyyw
        mad r19.x, r13.y, cb9[r5.z + 8].y, cb9[r5.z + 8].z
        mad r19.y, r13.w, cb9[r5.z + 8].w, cb9[r5.z + 9].x
        add r6.w, r6.w, cb9[r5.z + 10].y
        div r6.w, r6.w, cb9[r5.z + 10].z
        max r6.w, r6.w, l(0.00006104)
        and r7.w, l(0x0000ffff), cb9[r5.z + 1].w
        if_nz cb2[58].y
          mov r20.x, -r13.x
          utof r21.z, r7.w
          mov r20.y, r14.x
          mov r20.z, r13.x
          mov r8.w, l(0)
          mov r9.w, l(0)
          loop 
            ige r10.w, r9.w, l(8)
            breakc_nz r10.w
            dp2 r22.x, icb[r9.w + 0].yxyy, r20.xyxx
            dp2 r22.y, icb[r9.w + 0].yxyy, r20.yzyy
            mad r21.xy, r22.xyxx, cb9[r5.z + 3].yyyy, r19.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r21.xyzx, t9.xxxx, s13, r6.w
            mad r8.w, r10.w, l(0.125000), r8.w
            iadd r9.w, r9.w, l(1)
          endloop 
        else 
          utof r19.z, r7.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r19.xyzx, t9.xxxx, s13, r6.w
        endif 
        mul r5.z, r8.w, r8.w
        mul r5.z, r8.w, r5.z
      else 
        mov r5.z, l(1.000000)
      endif 
      mul r4.z, r4.z, r5.z
    else 
      and r5.z, cb2[53].x, l(0x0000ffff)
      ult r6.w, l(0), r5.z
      not r7.w, r3.x
      and r6.w, r6.w, r7.w
      if_nz r6.w
        iadd r5.z, r5.z, cb2[0].x
        imad r5.z, r5.z, l(15), l(-15)
        mad r6.w, |r3.y|, l(-0.200000), l(0.400000)
        mad r19.xyz, r12.xyzx, r6.wwww, r11.xyzx
        mov r20.xyz, cb9[r5.z + 4].yzwy
        mov r20.w, cb9[r5.z + 5].x
        mov r19.w, l(1.000000)
        dp4 r20.x, r20.xyzw, r19.xyzw
        mov r21.xyz, cb9[r5.z + 5].yzwy
        mov r21.w, cb9[r5.z + 6].x
        dp4 r20.y, r21.xyzw, r19.xyzw
        mad r13.yw, r20.xxxy, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
        add r20.x, r13.y, cb9[r5.z + 9].w
        add r20.y, r13.w, cb9[r5.z + 10].x
        mul r13.yw, r20.xxxy, cb9[r5.z + 9].yyyz
        div r20.xy, cb9[r5.z + 3].yyyy, cb9[r5.z + 8].ywyy
        add r20.zw, -r20.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
        ge r20.zw, r13.yyyw, r20.zzzw
        ge r20.xy, r20.xyxx, r13.ywyy
        or r20.xy, r20.xyxx, r20.zwzz
        or r6.w, r20.y, r20.x
        if_z r6.w
          mov r20.xyz, cb9[r5.z + 6].yzwy
          mov r20.w, cb9[r5.z + 7].x
          dp4 r6.w, r20.xyzw, r19.xyzw
          mov_sat r13.yw, r13.yyyw
          mad r19.x, r13.y, cb9[r5.z + 8].y, cb9[r5.z + 8].z
          mad r19.y, r13.w, cb9[r5.z + 8].w, cb9[r5.z + 9].x
          add r6.w, r6.w, cb9[r5.z + 10].y
          div r6.w, r6.w, cb9[r5.z + 10].z
          max r6.w, r6.w, l(0.00006104)
          and r7.w, l(0x0000ffff), cb9[r5.z + 1].w
          if_nz cb2[58].y
            mov r20.x, -r13.x
            utof r21.z, r7.w
            mov r20.y, r14.x
            mov r20.z, r13.x
            mov r8.w, l(0)
            mov r9.w, l(0)
            loop 
              ige r10.w, r9.w, l(8)
              breakc_nz r10.w
              dp2 r22.x, icb[r9.w + 0].yxyy, r20.xyxx
              dp2 r22.y, icb[r9.w + 0].yxyy, r20.yzyy
              mad r21.xy, r22.xyxx, cb9[r5.z + 3].yyyy, r19.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r21.xyzx, t9.xxxx, s13, r6.w
              mad r8.w, r10.w, l(0.125000), r8.w
              iadd r9.w, r9.w, l(1)
            endloop 
          else 
            utof r19.z, r7.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r19.xyzx, t9.xxxx, s13, r6.w
          endif 
          mul r5.z, r8.w, r8.w
          mul r5.z, r8.w, r5.z
        else 
          mov r5.z, l(1.000000)
        endif 
        mul r4.z, r4.z, r5.z
      endif 
    endif 
    mad r5.z, -r2.x, l(0.500000), l(1.000000)
    mad r5.z, -r3.z, r5.z, l(1.000000)
    mul r5.z, r5.z, r5.z
    mad r5.z, -r5.z, l(0.620000), l(0.620000)
    add r5.z, -r3.z, r5.z
    mad r5.z, r2.z, r5.z, r3.z
    mul r5.z, r4.z, r5.z
    lt r3.y, l(0.000000), r3.y
    mad r19.xyz, r5.zzzz, r18.xyzx, r16.xyzx
    mad r20.xyz, -r11.xyzx, r1.zzzz, cb2[17].xyzx
    dp3 r1.z, r20.xyzx, r20.xyzx
    rsq r1.z, r1.z
    mul r20.xyz, r1.zzzz, r20.xyzx
    dp3 r1.z, r20.xyzx, r5.xywx
    dp3 r5.z, r12.xyzx, r20.xyzx
    mad r6.w, |r5.z|, r1.w, -|r5.z|
    mad r5.z, |r5.z|, r6.w, l(1.000000)
    mad r3.z, r3.z, r0.y, r2.y
    mul r5.z, r5.z, r5.z
    mul r3.z, r3.z, r5.z
    rcp r3.z, r3.z
    mul r3.z, r3.w, r3.z
    mul r3.z, r3.z, r4.z
    mul r3.z, r3.z, l(0.250000)
    mad r20.xyz, r3.zzzz, r18.xyzx, r14.yzwy
    add_sat r1.z, -r1.z, l(1.000000)
    mul r3.w, r1.z, r1.z
    mul r3.w, r3.w, r3.w
    mul r1.z, r1.z, r3.w
    mul r1.z, r1.z, r3.z
    mad r18.xyz, r1.zzzz, r18.yzxy, r17.xyzx
    mov r19.w, r18.z
    mov r16.w, r17.z
    movc r16.xyzw, r3.yyyy, r19.xyzw, r16.xyzw
    mov r18.zw, r20.xxxy
    mov r17.zw, r14.yyyz
    movc r18.xyzw, r3.yyyy, r18.xyzw, r17.xyzw
    movc r14.w, r3.y, r20.z, r14.w
    if_nz r2.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r1.z, cb2[52].x, l(112), u2.xxxx
      or r1.z, r1.z, l(8)
      store_structured u2.x, cb2[52].x, l(112), r1.z
      store_structured u2.x, cb2[52].x, l(132), r4.z
    endif 
    mov r17.z, r16.w
    mov r17.xy, r18.xyxx
    mov r14.yz, r18.zzwz
    mov r1.z, l(0x00010101)
  else 
    mov r1.z, l(257)
  endif 
else 
  mov r1.z, l(1)
endif 
imul null, r3.y, r13.z, l(15)
ubfe r3.z, l(3), l(24), cb9[r3.y + 1].w
switch r3.z
  case l(4)
  if_nz r2.w
    add r18.yzw, cb1[24].xxyz, cb9[r3.y + 0].xxyz
    mov r18.x, l(2)
    store_structured u2.xyzw, cb2[52].x, l(136), r18.xyzw
  endif 
  iadd r3.z, r1.z, l(1)
  lt r3.w, l(0.000000), cb9[r3.y + 6].y
  mov r18.xy, cb9[r3.y + 5].zwzz
  mov r18.z, cb9[r3.y + 6].x
  mad r13.yzw, -r18.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r3.y + 0].xxyz
  add r19.xyz, -r11.xyzx, r13.yzwy
  dp3 r4.z, r18.xyzx, r19.xyzx
  div_sat r5.z, -r4.z, cb9[r3.y + 6].y
  mad r20.xyz, r5.zzzz, r18.xyzx, r13.yzwy
  movc r20.xyz, r3.wwww, r20.xyzx, cb9[r3.y + 0].xyzx
  add r20.xyz, -r11.xyzx, r20.xyzx
  dp3 r6.w, r20.xyzx, r20.xyzx
  rsq r7.w, r6.w
  mul r20.xyz, r7.wwww, r20.xyzx
  dp3 r7.w, r12.xyzx, r20.xyzx
  mov_sat r8.w, r7.w
  lt r9.w, l(0.000000), r8.w
  if_nz r9.w
    sqrt r9.w, r6.w
    mul r10.w, cb9[r3.y + 3].x, cb9[r3.y + 3].x
    div r6.w, r10.w, r6.w
    min r6.w, r6.w, l(1.000000)
    mad_sat r20.xy, r9.wwww, cb9[r3.y + 2].xzxx, cb9[r3.y + 2].ywyy
    mul r20.zw, r20.xxxy, r20.xxxy
    mad r20.xy, r20.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
    mul r20.xy, r20.xyxx, r20.zwzz
    mul r6.w, r6.w, r20.x
    mul r6.w, r20.y, r6.w
    lt r9.w, l(0.000000), r6.w
    if_nz r9.w
      ubfe r9.w, l(3), l(27), cb9[r3.y + 1].w
      if_nz r2.w
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r10.w, cb2[52].x, l(136), u2.xxxx
        or r10.w, r10.w, l(4)
        store_structured u2.x, cb2[52].x, l(136), r10.w
        store_structured u2.x, cb2[52].x, l(152), r6.w
      endif 
      iadd r10.w, r1.z, l(257)
      ine r9.w, r9.w, l(1)
      if_nz r9.w
        utof r20.xy, r1.yxyy
        dp2 r9.w, r20.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
        frc r9.w, r9.w
        mul r9.w, r9.w, l(52.982918)
        frc r9.w, r9.w
        mad r9.w, r9.w, l(6.28318548), cb1[70].w
        sincos r20.x, r21.x, r9.w
        mad r9.w, |r7.w|, l(-0.200000), l(0.400000)
        mad r20.yzw, r12.xxyz, r9.wwww, r11.xxyz
        add r20.yzw, r20.yyzw, -cb9[r3.y + 4].yyzw
        max r9.w, |r20.w|, |r20.z|
        max r9.w, r9.w, |r20.y|
        div r9.w, cb9[r3.y + 5].x, r9.w
        add r9.w, r9.w, cb9[r3.y + 5].y
        dp3 r12.w, r20.yzwy, r20.yzwy
        rsq r12.w, r12.w
        max r9.w, r9.w, l(0.00006104)
        and r15.w, l(0x0000ffff), cb9[r3.y + 1].w
        mov r22.x, -r13.x
        utof r23.w, r15.w
        mov r22.y, r14.x
        mov r22.z, r13.x
        mov r15.w, l(0)
        mov r16.w, l(0)
        loop 
          ige r17.w, r16.w, l(8)
          breakc_nz r17.w
          dp2 r21.y, icb[r16.w + 0].yxyy, r22.xyxx
          dp2 r21.z, icb[r16.w + 0].yxyy, r22.yzyy
          mul r24.yz, r21.yyzy, cb9[r3.y + 3].yyyy
          mul r24.x, r21.x, r24.y
          mul r24.w, r20.x, r24.y
          mad r23.xyz, r20.yzwy, r12.wwww, r24.xzwx
          sample_c_lz_indexable(texturecubearray)(float,float,float,float) r17.w, r23.xyzw, t10.xxxx, s13, r9.w
          mad r15.w, r17.w, l(0.125000), r15.w
          iadd r16.w, r16.w, l(1)
        endloop 
      else 
        mov r15.w, l(1.000000)
      endif 
      mul r6.w, r6.w, r15.w
      lt r9.w, l(0.000000), r6.w
      if_nz r9.w
        mul r9.w, r1.w, cb9[r3.y + 1].z
        mul r9.w, r9.w, l(0.250000)
        dp3 r12.w, r18.xyzx, r15.xyzx
        dp3 r15.x, r15.xyzx, r19.xyzx
        mad r15.y, -r12.w, r12.w, cb9[r3.y + 6].y
        mad r4.z, r12.w, r15.x, -r4.z
        div_sat r4.z, r4.z, r15.y
        div r12.w, r15.y, cb9[r3.y + 6].y
        mul r12.w, r12.w, l(10.000000)
        min r12.w, r12.w, l(1.000000)
        add r4.z, -r5.z, r4.z
        mad r4.z, r12.w, r4.z, r5.z
        mad r13.yzw, r4.zzzz, r18.xxyz, r13.yyzw
        movc r13.yzw, r3.wwww, r13.yyzw, cb9[r3.y + 0].xxyz
        add r13.yzw, -r11.xxyz, r13.yyzw
        dp3 r3.w, r13.yzwy, r13.yzwy
        rsq r3.w, r3.w
        mul r15.xyz, r3.wwww, r13.yzwy
        ubfe r4.z, l(4), l(16), cb9[r3.y + 1].w
        ult r5.z, l(0), r4.z
        and r5.z, r3.x, r5.z
        if_nz r5.z
          iadd r4.z, r4.z, cb2[0].x
          imad r4.z, r4.z, l(15), l(-15)
          mad r5.z, |r7.w|, l(-0.200000), l(0.400000)
          mad r18.xyz, r12.xyzx, r5.zzzz, r11.xyzx
          mov r19.xyz, cb9[r4.z + 6].yzwy
          mov r19.w, cb9[r4.z + 7].x
          mov r18.w, l(1.000000)
          dp4 r5.z, r19.xyzw, r18.xyzw
          mov r19.xyz, cb9[r4.z + 7].yzwy
          mov r19.w, cb9[r4.z + 8].x
          dp4 r12.w, r19.xyzw, r18.xyzw
          lt r15.w, r12.w, r5.z
          if_z r15.w
            mov r19.xyz, cb9[r4.z + 4].yzwy
            mov r19.w, cb9[r4.z + 5].x
            dp4 r19.x, r19.xyzw, r18.xyzw
            mov r20.xyz, cb9[r4.z + 5].yzwy
            mov r20.w, cb9[r4.z + 6].x
            dp4 r19.y, r20.xyzw, r18.xyzw
            div r18.xy, r19.xyxx, r12.wwww
            mad r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r19.x, r18.x, cb9[r4.z + 9].w
            add r19.y, r18.y, cb9[r4.z + 10].x
            mul r18.xy, r19.xyxx, cb9[r4.z + 9].yzyy
            div r18.zw, cb9[r4.z + 3].yyyy, cb9[r4.z + 8].yyyw
            add r19.xy, -r18.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r19.xy, r18.xyxx, r19.xyxx
            ge r18.zw, r18.zzzw, r18.xxxy
            or r18.zw, r18.zzzw, r19.xxxy
            or r16.w, r18.w, r18.z
            if_z r16.w
              mov_sat r18.xy, r18.xyxx
              mad r19.x, r18.x, cb9[r4.z + 8].y, cb9[r4.z + 8].z
              mad r19.y, r18.y, cb9[r4.z + 8].w, cb9[r4.z + 9].x
              mul r17.w, r12.w, cb9[r4.z + 10].z
              mad r5.z, cb9[r4.z + 10].y, r12.w, r5.z
              div r5.z, r5.z, r17.w
            endif 
          else 
            mov r16.w, l(-1)
          endif 
          or r12.w, r15.w, r16.w
          if_z r12.w
            max r5.z, r5.z, l(0.00006104)
            and r12.w, l(0x0000ffff), cb9[r4.z + 1].w
            if_nz cb2[58].y
              mov r18.x, -r13.x
              utof r20.z, r12.w
              mov r18.y, r14.x
              mov r18.z, r13.x
              mov r15.w, l(0)
              mov r16.w, l(0)
              loop 
                ige r17.w, r16.w, l(8)
                breakc_nz r17.w
                dp2 r21.x, icb[r16.w + 0].yxyy, r18.xyxx
                dp2 r21.y, icb[r16.w + 0].yxyy, r18.yzyy
                mad r20.xy, r21.xyxx, cb9[r4.z + 3].yyyy, r19.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r20.xyzx, t9.xxxx, s13, r5.z
                mad r15.w, r17.w, l(0.125000), r15.w
                iadd r16.w, r16.w, l(1)
              endloop 
            else 
              utof r19.z, r12.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r19.xyzx, t9.xxxx, s13, r5.z
            endif 
            mul r4.z, r15.w, r15.w
            mul r4.z, r15.w, r4.z
          else 
            mov r4.z, l(1.000000)
          endif 
          mul r6.w, r4.z, r6.w
        else 
          ubfe r4.z, l(4), l(20), cb9[r3.y + 1].w
          ult r5.z, l(0), r4.z
          not r12.w, r3.x
          and r5.z, r5.z, r12.w
          if_nz r5.z
            iadd r4.z, r4.z, cb2[0].x
            imad r4.z, r4.z, l(15), l(-15)
            mad r5.z, |r7.w|, l(-0.200000), l(0.400000)
            mad r18.xyz, r12.xyzx, r5.zzzz, r11.xyzx
            mov r19.xyz, cb9[r4.z + 6].yzwy
            mov r19.w, cb9[r4.z + 7].x
            mov r18.w, l(1.000000)
            dp4 r5.z, r19.xyzw, r18.xyzw
            mov r19.xyz, cb9[r4.z + 7].yzwy
            mov r19.w, cb9[r4.z + 8].x
            dp4 r12.w, r19.xyzw, r18.xyzw
            lt r15.w, r12.w, r5.z
            if_z r15.w
              mov r19.xyz, cb9[r4.z + 4].yzwy
              mov r19.w, cb9[r4.z + 5].x
              dp4 r19.x, r19.xyzw, r18.xyzw
              mov r20.xyz, cb9[r4.z + 5].yzwy
              mov r20.w, cb9[r4.z + 6].x
              dp4 r19.y, r20.xyzw, r18.xyzw
              div r18.xy, r19.xyxx, r12.wwww
              mad r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r19.x, r18.x, cb9[r4.z + 9].w
              add r19.y, r18.y, cb9[r4.z + 10].x
              mul r18.xy, r19.xyxx, cb9[r4.z + 9].yzyy
              div r18.zw, cb9[r4.z + 3].yyyy, cb9[r4.z + 8].yyyw
              add r19.xy, -r18.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r19.xy, r18.xyxx, r19.xyxx
              ge r18.zw, r18.zzzw, r18.xxxy
              or r18.zw, r18.zzzw, r19.xxxy
              or r16.w, r18.w, r18.z
              if_z r16.w
                mov_sat r18.xy, r18.xyxx
                mad r19.x, r18.x, cb9[r4.z + 8].y, cb9[r4.z + 8].z
                mad r19.y, r18.y, cb9[r4.z + 8].w, cb9[r4.z + 9].x
                mul r17.w, r12.w, cb9[r4.z + 10].z
                mad r5.z, cb9[r4.z + 10].y, r12.w, r5.z
                div r5.z, r5.z, r17.w
              endif 
            else 
              mov r16.w, l(-1)
            endif 
            or r12.w, r15.w, r16.w
            if_z r12.w
              max r5.z, r5.z, l(0.00006104)
              and r12.w, l(0x0000ffff), cb9[r4.z + 1].w
              if_nz cb2[58].y
                mov r18.x, -r13.x
                utof r20.z, r12.w
                mov r18.y, r14.x
                mov r18.z, r13.x
                mov r15.w, l(0)
                mov r16.w, l(0)
                loop 
                  ige r17.w, r16.w, l(8)
                  breakc_nz r17.w
                  dp2 r21.x, icb[r16.w + 0].yxyy, r18.xyxx
                  dp2 r21.y, icb[r16.w + 0].yxyy, r18.yzyy
                  mad r20.xy, r21.xyxx, cb9[r4.z + 3].yyyy, r19.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r20.xyzx, t9.xxxx, s13, r5.z
                  mad r15.w, r17.w, l(0.125000), r15.w
                  iadd r16.w, r16.w, l(1)
                endloop 
              else 
                utof r19.z, r12.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r19.xyzx, t9.xxxx, s13, r5.z
              endif 
              mul r4.z, r15.w, r15.w
              mul r4.z, r15.w, r4.z
            else 
              mov r4.z, l(1.000000)
            endif 
            mul r6.w, r4.z, r6.w
          endif 
        endif 
        mad r4.z, -r2.x, l(0.500000), l(1.000000)
        mad r4.z, -r8.w, r4.z, l(1.000000)
        mul r4.z, r4.z, r4.z
        mad r4.z, -r4.z, l(0.620000), l(0.620000)
        add r4.z, -r8.w, r4.z
        mad r4.z, r2.z, r4.z, r8.w
        mul r4.z, r6.w, r4.z
        mov r18.x, cb9[r3.y + 0].w
        mov r18.yz, cb9[r3.y + 1].xxyx
        lt r5.z, l(0.000000), r7.w
        mad r19.xyz, r4.zzzz, r18.xyzx, r16.xyzx
        dp3_sat r4.z, r12.xyzx, r15.xyzx
        mad r13.yzw, r13.yyzw, r3.wwww, r5.xxyw
        dp3 r3.w, r13.yzwy, r13.yzwy
        rsq r3.w, r3.w
        mul r13.yzw, r3.wwww, r13.yyzw
        dp3 r3.w, r13.yzwy, r5.xywx
        dp3 r7.w, r12.xyzx, r13.yzwy
        mad r8.w, |r7.w|, r1.w, -|r7.w|
        mad r7.w, |r7.w|, r8.w, l(1.000000)
        mad r8.w, r4.z, r0.y, r2.y
        mul r7.w, r7.w, r7.w
        mul r7.w, r8.w, r7.w
        rcp r7.w, r7.w
        mul r4.z, r9.w, r4.z
        mul r4.z, r4.z, r7.w
        mul r4.z, r6.w, r4.z
        mad r13.yzw, r4.zzzz, r18.xxyz, r14.yyzw
        add_sat r3.w, -r3.w, l(1.000000)
        mul r7.w, r3.w, r3.w
        mul r7.w, r7.w, r7.w
        mul r3.w, r3.w, r7.w
        mul r3.w, r3.w, r4.z
        mad r15.xyz, r3.wwww, r18.xyzx, r17.zxyz
        movc r16.xyz, r5.zzzz, r19.xyzx, r16.xyzx
        movc r17.xyz, r5.zzzz, r15.yzxy, r17.xyzx
        movc r14.yzw, r5.zzzz, r13.yyzw, r14.yyzw
        if_nz r2.w
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r3.w, cb2[52].x, l(136), u2.xxxx
          or r3.w, r3.w, l(8)
          store_structured u2.x, cb2[52].x, l(136), r3.w
          store_structured u2.x, cb2[52].x, l(156), r6.w
        endif 
        iadd r1.z, r1.z, l(0x00010101)
      else 
        mov r1.z, r10.w
      endif 
    else 
      mov r1.z, r3.z
    endif 
  else 
    mov r1.z, r3.z
  endif 
  break 
  case l(2)
  if_nz r2.w
    add r15.yzw, cb1[24].xxyz, cb9[r3.y + 0].xxyz
    mov r15.x, l(2)
    store_structured u2.xyzw, cb2[52].x, l(136), r15.xyzw
  endif 
  iadd r3.z, r1.z, l(1)
  add r15.xy, -r11.xyxx, cb9[r3.y + 3].zwzz
  add r15.z, -r11.z, cb9[r3.y + 4].x
  dp3 r3.w, r15.xyzx, r15.xyzx
  rsq r3.w, r3.w
  mul r13.yzw, r3.wwww, r15.xxyz
  dp3 r4.z, r12.xyzx, r13.yzwy
  mov_sat r5.z, r4.z
  lt r6.w, l(0.000000), r5.z
  if_nz r6.w
    mov r18.xyz, cb9[r3.y + 7].yzwy
    mov r18.w, cb9[r3.y + 8].x
    mov r11.w, l(1.000000)
    dp4 r6.w, r18.xyzw, r11.xyzw
    lt r7.w, r6.w, l(1.000000)
    if_nz r7.w
      mov r13.yzw, l(0,1.000000,1.000000,1.000000)
      mov r7.w, l(0)
    else 
      add r19.xyz, -r11.xyzx, cb9[r3.y + 0].xyzx
      mul r8.w, cb9[r3.y + 3].x, cb9[r3.y + 3].x
      dp3 r9.w, r19.xyzx, r19.xyzx
      div r8.w, r8.w, r9.w
      min r8.w, r8.w, l(1.000000)
      mad_sat r19.xy, r6.wwww, cb9[r3.y + 2].xzxx, cb9[r3.y + 2].ywyy
      mul r19.zw, r19.xxxy, r19.xxxy
      mad r19.xy, r19.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r19.xy, r19.xyxx, r19.zwzz
      mul r8.w, r8.w, r19.x
      mul r8.w, r19.y, r8.w
      mov r19.xyz, cb9[r3.y + 4].yzwy
      mov r19.w, cb9[r3.y + 5].x
      dp4 r19.x, r19.xyzw, r11.xyzw
      mov r20.xyz, cb9[r3.y + 5].yzwy
      mov r20.w, cb9[r3.y + 6].x
      dp4 r19.y, r20.xyzw, r11.xyzw
      div r19.xy, r19.xyxx, r6.wwww
      lt r6.w, cb9[r3.y + 10].w, l(0.00048828)
      if_nz r6.w
        mad_sat r20.xy, |r19.xyxx|, cb9[r3.y + 12].xyxx, cb9[r3.y + 12].zwzz
        mul r20.zw, r20.xxxy, r20.xxxy
        mad r20.xy, r20.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r20.xy, r20.xyxx, r20.zwzz
        mul r6.w, r20.y, r20.x
      else 
        mul_sat r20.xyzw, |r19.yyxx|, cb9[r3.y + 11].xyzw
        log r20.xyzw, r20.xyzw
        mul r20.xyzw, r20.xyzw, cb9[r3.y + 12].zzzz
        exp r20.xyzw, r20.xyzw
        add r20.xy, r20.zwzz, r20.xyxx
        log r20.xy, r20.xyxx
        mul r20.xy, r20.xyxx, cb9[r3.y + 12].wwww
        exp r20.xy, r20.xyxx
        mul r9.w, r20.x, cb9[r3.y + 12].x
        mad r10.w, cb9[r3.y + 12].y, r20.y, l(-1.000000)
        mad r9.w, cb9[r3.y + 12].y, r20.y, -r9.w
        div_sat r9.w, r10.w, r9.w
        mul r10.w, r9.w, r9.w
        mad r9.w, r9.w, l(-2.000000), l(3.000000)
        mul r6.w, r9.w, r10.w
      endif 
      mul r7.w, r6.w, r8.w
      and r6.w, l(255), cb9[r3.y + 14].w
      if_nz r6.w
        mov r19.z, l(1.000000)
        dp3 r8.w, cb9[r3.y + 13].xyzx, r19.xyzx
        mov r20.x, cb9[r3.y + 13].w
        mov r20.yz, cb9[r3.y + 14].xxyx
        dp3 r9.w, r20.xyzx, r19.xyzx
        frc r19.x, r8.w
        frc r19.y, r9.w
        iadd r6.w, r6.w, l(-1)
        utof r19.z, r6.w
        sample_l_indexable(texture2darray)(float,float,float,float) r13.yzw, r19.xyzx, t20.wxyz, s2, l(0.000000)
      else 
        mov r13.yzw, l(0,1.000000,1.000000,1.000000)
      endif 
    endif 
    mov r19.x, cb9[r3.y + 0].w
    mov r19.yz, cb9[r3.y + 1].xxyx
    mul r13.yzw, r13.yyzw, r19.xxyz
    lt r6.w, l(0.000000), r7.w
    if_nz r6.w
      ubfe r6.w, l(3), l(27), cb9[r3.y + 1].w
      if_nz r2.w
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r8.w, cb2[52].x, l(136), u2.xxxx
        or r8.w, r8.w, l(4)
        store_structured u2.x, cb2[52].x, l(136), r8.w
        store_structured u2.x, cb2[52].x, l(152), r7.w
      endif 
      iadd r8.w, r1.z, l(257)
      ine r6.w, r6.w, l(1)
      if_nz r6.w
        mad r6.w, |r4.z|, l(-0.200000), l(0.400000)
        mad r19.xyz, r12.xyzx, r6.wwww, r11.xyzx
        mov r20.xyz, cb9[r3.y + 6].yzwy
        mov r20.w, cb9[r3.y + 7].x
        mov r19.w, l(1.000000)
        dp4 r6.w, r20.xyzw, r19.xyzw
        dp4 r9.w, r18.xyzw, r19.xyzw
        ge r10.w, r9.w, r6.w
        if_nz r10.w
          mov r18.xyz, cb9[r3.y + 4].yzwy
          mov r18.w, cb9[r3.y + 5].x
          dp4 r18.x, r18.xyzw, r19.xyzw
          mov r20.xyz, cb9[r3.y + 5].yzwy
          mov r20.w, cb9[r3.y + 6].x
          dp4 r18.y, r20.xyzw, r19.xyzw
          div r18.xy, r18.xyxx, r9.wwww
          mad_sat r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
          mad r19.x, r18.x, cb9[r3.y + 8].y, cb9[r3.y + 8].z
          mad r19.y, r18.y, cb9[r3.y + 8].w, cb9[r3.y + 9].x
          div r6.w, r6.w, r9.w
          max r6.w, r6.w, l(0.00006104)
          and r9.w, l(0x0000ffff), cb9[r3.y + 1].w
          if_nz cb2[58].y
            mov r18.x, -r13.x
            utof r20.z, r9.w
            mov r18.y, r14.x
            mov r18.z, r13.x
            mov r10.w, l(0)
            mov r11.w, l(0)
            loop 
              ige r12.w, r11.w, l(8)
              breakc_nz r12.w
              dp2 r21.x, icb[r11.w + 0].yxyy, r18.xyxx
              dp2 r21.y, icb[r11.w + 0].yxyy, r18.yzyy
              mad r20.xy, r21.xyxx, cb9[r3.y + 3].yyyy, r19.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r20.xyzx, t9.xxxx, s13, r6.w
              mad r10.w, r12.w, l(0.125000), r10.w
              iadd r11.w, r11.w, l(1)
            endloop 
          else 
            utof r19.z, r9.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r19.xyzx, t9.xxxx, s13, r6.w
          endif 
          mul r6.w, r10.w, r10.w
          mul r6.w, r10.w, r6.w
        else 
          mov r6.w, l(1.000000)
        endif 
      else 
        mov r6.w, l(1.000000)
      endif 
      mul r6.w, r6.w, r7.w
      lt r7.w, l(0.000000), r6.w
      if_nz r7.w
        mul r7.w, r1.w, cb9[r3.y + 1].z
        mul r7.w, r5.z, r7.w
        ubfe r9.w, l(4), l(16), cb9[r3.y + 1].w
        ult r10.w, l(0), r9.w
        and r10.w, r3.x, r10.w
        if_nz r10.w
          iadd r9.w, r9.w, cb2[0].x
          imad r9.w, r9.w, l(15), l(-15)
          mad r10.w, |r4.z|, l(-0.200000), l(0.400000)
          mad r18.xyz, r12.xyzx, r10.wwww, r11.xyzx
          mov r19.xyz, cb9[r9.w + 6].yzwy
          mov r19.w, cb9[r9.w + 7].x
          mov r18.w, l(1.000000)
          dp4 r10.w, r19.xyzw, r18.xyzw
          mov r19.xyz, cb9[r9.w + 7].yzwy
          mov r19.w, cb9[r9.w + 8].x
          dp4 r11.w, r19.xyzw, r18.xyzw
          lt r12.w, r11.w, r10.w
          if_z r12.w
            mov r19.xyz, cb9[r9.w + 4].yzwy
            mov r19.w, cb9[r9.w + 5].x
            dp4 r19.x, r19.xyzw, r18.xyzw
            mov r20.xyz, cb9[r9.w + 5].yzwy
            mov r20.w, cb9[r9.w + 6].x
            dp4 r19.y, r20.xyzw, r18.xyzw
            div r18.xy, r19.xyxx, r11.wwww
            mad r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r19.x, r18.x, cb9[r9.w + 9].w
            add r19.y, r18.y, cb9[r9.w + 10].x
            mul r18.xy, r19.xyxx, cb9[r9.w + 9].yzyy
            div r18.zw, cb9[r9.w + 3].yyyy, cb9[r9.w + 8].yyyw
            add r19.xy, -r18.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r19.xy, r18.xyxx, r19.xyxx
            ge r18.zw, r18.zzzw, r18.xxxy
            or r18.zw, r18.zzzw, r19.xxxy
            or r15.w, r18.w, r18.z
            if_z r15.w
              mov_sat r18.xy, r18.xyxx
              mad r19.x, r18.x, cb9[r9.w + 8].y, cb9[r9.w + 8].z
              mad r19.y, r18.y, cb9[r9.w + 8].w, cb9[r9.w + 9].x
              mul r16.w, r11.w, cb9[r9.w + 10].z
              mad r10.w, cb9[r9.w + 10].y, r11.w, r10.w
              div r10.w, r10.w, r16.w
            endif 
          else 
            mov r15.w, l(-1)
          endif 
          or r11.w, r12.w, r15.w
          if_z r11.w
            max r10.w, r10.w, l(0.00006104)
            and r11.w, l(0x0000ffff), cb9[r9.w + 1].w
            if_nz cb2[58].y
              mov r18.x, -r13.x
              utof r20.z, r11.w
              mov r18.y, r14.x
              mov r18.z, r13.x
              mov r12.w, l(0)
              mov r15.w, l(0)
              loop 
                ige r16.w, r15.w, l(8)
                breakc_nz r16.w
                dp2 r21.x, icb[r15.w + 0].yxyy, r18.xyxx
                dp2 r21.y, icb[r15.w + 0].yxyy, r18.yzyy
                mad r20.xy, r21.xyxx, cb9[r9.w + 3].yyyy, r19.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r20.xyzx, t9.xxxx, s13, r10.w
                mad r12.w, r16.w, l(0.125000), r12.w
                iadd r15.w, r15.w, l(1)
              endloop 
            else 
              utof r19.z, r11.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r19.xyzx, t9.xxxx, s13, r10.w
            endif 
            mul r9.w, r12.w, r12.w
            mul r9.w, r12.w, r9.w
          else 
            mov r9.w, l(1.000000)
          endif 
          mul r6.w, r6.w, r9.w
        else 
          ubfe r3.y, l(4), l(20), cb9[r3.y + 1].w
          ult r9.w, l(0), r3.y
          not r3.x, r3.x
          and r3.x, r3.x, r9.w
          if_nz r3.x
            iadd r3.x, r3.y, cb2[0].x
            imad r3.x, r3.x, l(15), l(-15)
            mad r3.y, |r4.z|, l(-0.200000), l(0.400000)
            mad r18.xyz, r12.xyzx, r3.yyyy, r11.xyzx
            mov r19.xyz, cb9[r3.x + 6].yzwy
            mov r19.w, cb9[r3.x + 7].x
            mov r18.w, l(1.000000)
            dp4 r3.y, r19.xyzw, r18.xyzw
            mov r19.xyz, cb9[r3.x + 7].yzwy
            mov r19.w, cb9[r3.x + 8].x
            dp4 r9.w, r19.xyzw, r18.xyzw
            lt r10.w, r9.w, r3.y
            if_z r10.w
              mov r19.xyz, cb9[r3.x + 4].yzwy
              mov r19.w, cb9[r3.x + 5].x
              dp4 r19.x, r19.xyzw, r18.xyzw
              mov r20.xyz, cb9[r3.x + 5].yzwy
              mov r20.w, cb9[r3.x + 6].x
              dp4 r19.y, r20.xyzw, r18.xyzw
              div r18.xy, r19.xyxx, r9.wwww
              mad r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r19.x, r18.x, cb9[r3.x + 9].w
              add r19.y, r18.y, cb9[r3.x + 10].x
              mul r18.xy, r19.xyxx, cb9[r3.x + 9].yzyy
              div r18.zw, cb9[r3.x + 3].yyyy, cb9[r3.x + 8].yyyw
              add r19.xy, -r18.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r19.xy, r18.xyxx, r19.xyxx
              ge r18.zw, r18.zzzw, r18.xxxy
              or r18.zw, r18.zzzw, r19.xxxy
              or r11.w, r18.w, r18.z
              if_z r11.w
                mov_sat r18.xy, r18.xyxx
                mad r19.x, r18.x, cb9[r3.x + 8].y, cb9[r3.x + 8].z
                mad r19.y, r18.y, cb9[r3.x + 8].w, cb9[r3.x + 9].x
                mul r12.w, r9.w, cb9[r3.x + 10].z
                mad r3.y, cb9[r3.x + 10].y, r9.w, r3.y
                div r3.y, r3.y, r12.w
              endif 
            else 
              mov r11.w, l(-1)
            endif 
            or r9.w, r10.w, r11.w
            if_z r9.w
              max r3.y, r3.y, l(0.00006104)
              and r9.w, l(0x0000ffff), cb9[r3.x + 1].w
              if_nz cb2[58].y
                mov r18.x, -r13.x
                utof r20.z, r9.w
                mov r18.y, r14.x
                mov r18.z, r13.x
                mov r10.w, l(0)
                mov r11.w, l(0)
                loop 
                  ige r12.w, r11.w, l(8)
                  breakc_nz r12.w
                  dp2 r21.x, icb[r11.w + 0].yxyy, r18.xyxx
                  dp2 r21.y, icb[r11.w + 0].yxyy, r18.yzyy
                  mad r20.xy, r21.xyxx, cb9[r3.x + 3].yyyy, r19.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r20.xyzx, t9.xxxx, s13, r3.y
                  mad r10.w, r12.w, l(0.125000), r10.w
                  iadd r11.w, r11.w, l(1)
                endloop 
              else 
                utof r19.z, r9.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r19.xyzx, t9.xxxx, s13, r3.y
              endif 
              mul r3.x, r10.w, r10.w
              mul r3.x, r10.w, r3.x
            else 
              mov r3.x, l(1.000000)
            endif 
            mul r6.w, r3.x, r6.w
          endif 
        endif 
        mad r2.x, -r2.x, l(0.500000), l(1.000000)
        mad r2.x, -r5.z, r2.x, l(1.000000)
        mul r2.x, r2.x, r2.x
        mad r2.x, -r2.x, l(0.620000), l(0.620000)
        add r2.x, -r5.z, r2.x
        mad r2.x, r2.z, r2.x, r5.z
        mul r2.x, r6.w, r2.x
        lt r2.z, l(0.000000), r4.z
        mad r18.xyz, r2.xxxx, r13.yzwy, r16.xyzx
        mad r3.xyw, r15.xyxz, r3.wwww, r5.xyxw
        dp3 r2.x, r3.xywx, r3.xywx
        rsq r2.x, r2.x
        mul r3.xyw, r2.xxxx, r3.xyxw
        dp3 r2.x, r3.xywx, r5.xywx
        dp3 r3.x, r12.xyzx, r3.xywx
        mad r1.w, |r3.x|, r1.w, -|r3.x|
        mad r1.w, |r3.x|, r1.w, l(1.000000)
        mad r0.y, r5.z, r0.y, r2.y
        mul r1.w, r1.w, r1.w
        mul r0.y, r0.y, r1.w
        rcp r0.y, r0.y
        mul r0.y, r7.w, r0.y
        mul r0.y, r0.y, r6.w
        mul r0.y, r0.y, l(0.250000)
        mad r3.xyw, r0.yyyy, r13.yzyw, r14.yzyw
        add_sat r1.w, -r2.x, l(1.000000)
        mul r2.x, r1.w, r1.w
        mul r2.x, r2.x, r2.x
        mul r1.w, r1.w, r2.x
        mul r0.y, r0.y, r1.w
        mad r5.xyz, r0.yyyy, r13.yzwy, r17.zxyz
        movc r16.xyz, r2.zzzz, r18.xyzx, r16.xyzx
        movc r17.xyz, r2.zzzz, r5.yzxy, r17.xyzx
        movc r14.yzw, r2.zzzz, r3.xxyw, r14.yyzw
        if_nz r2.w
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r0.y, cb2[52].x, l(136), u2.xxxx
          or r0.y, r0.y, l(8)
          store_structured u2.x, cb2[52].x, l(136), r0.y
          store_structured u2.x, cb2[52].x, l(156), r6.w
        endif 
        iadd r1.z, r1.z, l(0x00010101)
      else 
        mov r1.z, r8.w
      endif 
    else 
      mov r1.z, r3.z
    endif 
  else 
    mov r1.z, r3.z
  endif 
  break 
  default 
  break 
endswitch 
mad r3.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.y, r3.y
mad r2.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r2.x
ieq r1.w, r0.y, r1.w
movc r2.xy, r1.wwww, r2.yzyy, l(-1.000000,0,0,0)
mad r4.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r4.x
ieq r1.w, r0.y, r1.w
movc r4.xy, r1.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r5.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r1.w, r0.y, r1.w
movc r4.zw, r1.wwww, r5.yyyz, l(0,0,-1.000000,0)
mad r5.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r0.y, r0.y, r1.w
movc r5.xy, r0.yyyy, r5.yzyy, l(-1.000000,0,0,0)
mov r7.x, r2.x
mov r7.yz, r4.xxzx
mov r7.w, r5.x
add r7.xyzw, -r3.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.y, r7.y, r7.x
add r0.y, r7.z, r0.y
add r0.y, r7.w, r0.y
mul r1.w, r4.y, r7.y
mad r1.w, r7.x, r2.y, r1.w
mad r1.w, r7.z, r4.w, r1.w
mad r1.w, r7.w, r5.y, r1.w
div r3.w, r1.w, r0.y
ge r0.y, l(0.000000), r0.y
movc r3.yz, r0.yyyy, l(0,0,0,0), r3.zzwz
and r2.xy, r1.xyxx, l(1, 1, 0, 0)
ieq r0.y, r2.y, r2.x
movc r2.xyz, r0.yyyy, r3.xyzx, r3.xzyx
mad r0.y, -r2.z, l(0.500000), r2.x
add r3.y, r0.y, r2.z
mad r3.z, -r2.y, l(0.500000), r0.y
add r3.x, r2.y, r3.z
add r2.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, r17.zxyz
mad r2.xyz, r14.yzwy, r3.xyzx, r2.xyzx
mad r2.xyz, r16.xyzx, r6.xyzx, r2.xyzx
lt r0.y, l(0.000000), cb2[9].z
if_nz r0.y
  dp3 r0.y, r11.xyzx, r11.xyzx
  rsq r1.w, r0.y
  mul r3.xyz, r1.wwww, r11.xyzx
  sqrt r0.y, r0.y
  lt r1.w, l(0.000000), cb2[13].w
  if_nz r1.w
    mad r4.xy, r0.yyyy, cb2[15].xyxx, cb2[14].zwzz
    mul r4.xy, r4.xyxx, cb2[16].xyxx
    lt r1.w, l(0.010000), |r11.z|
    mul r4.zw, r11.zzzz, cb2[15].zzzw
    mul r5.xy, r4.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r5.xy, r5.xyxx
    add r5.xy, -r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r4.zw, r5.xxxy, r4.zzzw
    mul r4.zw, r4.zzzw, r4.xxxy
    movc r4.xy, r1.wwww, r4.zwzz, r4.xyxx
    mul r4.xzw, r4.xxxx, cb2[12].xxyz
    exp r4.xzw, r4.xxzw
    mul r5.xyz, r4.yyyy, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xzwx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xzwx
  else 
    mad r1.w, r0.y, cb2[15].x, cb2[14].z
    mul r1.w, r1.w, cb2[16].x
    lt r3.w, l(0.010000), |r11.z|
    mul r4.w, r11.z, cb2[15].z
    mul r5.x, r4.w, l(-1.442695)
    exp r5.x, r5.x
    add r5.x, -r5.x, l(1.000000)
    div r4.w, r5.x, r4.w
    mul r4.w, r1.w, r4.w
    movc r1.w, r3.w, r4.w, r1.w
    mul r5.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r1.w, cb2[7].yzwy, -r3.xyzx
  mad r3.x, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r3.y, cb2[8].w, -r1.w, l(1.000000)
  mul r3.y, r3.y, r3.y
  mul r3.y, r3.y, l(12.566371)
  div r3.x, r3.x, r3.y
  add r0.y, r0.y, -cb2[10].w
  mul_sat r0.y, r0.y, cb2[11].w
  mul r0.y, r0.y, r3.x
  mov_sat r1.w, r1.w
  mad r1.w, r1.w, r1.w, l(1.000000)
  mad r1.w, r1.w, l(0.05968310), l(-1.000000)
  mad r1.w, cb2[8].z, r1.w, l(1.000000)
  mul r3.xyz, r0.yyyy, cb2[11].xyzx
  mad r3.xyz, r1.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r5.xyzx
  mad r3.xyz, r2.xyzx, r4.xyzx, r3.xyzx
else 
  mul r0.y, r11.z, cb2[6].x
  mad r1.w, cb2[6].x, r11.z, cb2[5].x
  lt r3.w, |r0.y|, l(0.000100)
  min r4.x, r1.w, l(64.000000)
  mul r4.x, r4.x, l(1.442695)
  exp r4.x, r4.x
  mov_sat r4.y, cb2[6].z
  lt r4.z, r1.w, l(0.000000)
  add r1.w, r1.w, l(1.000000)
  movc r1.w, r4.z, r4.x, r1.w
  add r1.w, r1.w, -cb2[6].z
  movc r0.y, r3.w, l(1.000000), r0.y
  div r0.y, r1.w, r0.y
  movc r0.y, r3.w, r4.y, r0.y
  mul r0.y, r0.y, cb2[5].z
  dp3 r1.w, r11.xyzx, r11.xyzx
  sqrt r3.w, r1.w
  mad r0.y, r0.y, r3.w, cb2[5].w
  exp r0.y, r0.y
  min r0.y, r0.y, l(1.000000)
  add r0.y, -r0.y, l(1.000000)
  rsq r1.w, r1.w
  mul r4.xyz, r1.wwww, r11.xyzx
  dp3 r1.w, cb2[7].yzwy, r4.xyzx
  mad_sat r1.w, cb2[8].y, r1.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r1.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.y, r0.y, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyz, r0.yyyy, r4.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.y, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r3.xz, r3.xxzx, l(0, 0, 0, 0)
ieq r3.yw, r3.yyyw, l(0, 2, 0, 12)
and r3.xy, r3.ywyy, r3.xzxx
and r3.xy, r3.xyxx, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r1.w, cb2[55].w, l(16)
ine r3.w, r1.w, l(0)
ieq r1.w, r1.w, l(0)
and r1.w, r1.w, r3.w
and r3.z, r1.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.yyyy, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.y, r1.z, l(3)
      break 
      case l(2)
      ubfe r0.y, l(2), l(8), r1.z
      break 
      case l(3)
      ushr r0.y, r1.z, l(16)
      break 
      case l(4)
      and r0.y, r0.x, l(15)
      break 
      case l(5)
      ushr r0.y, r0.x, l(8)
      break 
      default 
      mov r0.y, l(0)
      break 
    endswitch 
    utof r0.y, r0.y
    mul r0.y, r0.y, cb2[53].z
    mad r3.xyz, r0.yyyy, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r2.w
  add r2.xyz, r11.xyzx, cb1[24].xyzx
  and r2.w, r1.z, l(3)
  store_structured u2.xyzw, cb2[52].x, l(92), r2.xyzw
  and r0.y, r0.x, l(15)
  store_structured u2.x, cb2[52].x, l(108), r0.y
endif 
if_nz cb2[52].y
  and r0.y, r1.z, l(3)
  atomic_iadd g1, l(0), r0.y
  ubfe r1.x, l(2), l(8), r1.z
  atomic_iadd g1, l(4), r1.x
  ushr r1.y, r1.z, l(16)
  atomic_iadd g1, l(8), r1.y
  and r1.z, r0.x, l(15)
  atomic_iadd g1, l(12), r1.z
  ushr r0.x, r0.x, l(8)
  atomic_iadd g1, l(16), r0.x
  atomic_umax g2, l(0), r0.y
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), r1.z
  atomic_umax g2, l(16), r0.x
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.x, r1.x, l(63)
  if_nz r0.x
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.x, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.x
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.x, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.x
    ieq r0.yz, r0.zzwz, cb2[52].zzwz
    and r0.y, r0.z, r0.y
    if_nz r0.y
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.x
    endif 
  endif 
endif 
ret 
// Approximately 2083 instruction slots used
