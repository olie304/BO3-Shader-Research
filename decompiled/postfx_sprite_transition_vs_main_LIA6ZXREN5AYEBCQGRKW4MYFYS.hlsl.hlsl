// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:40:25 2021

cbuffer _Globals : register(b0)
{
  float4 flagParams : packoffset(c0);
  float4 colorObjMin : packoffset(c1);
  float4 colorObjMax : packoffset(c2);
  float colorObjMinBaseBlend : packoffset(c3);
  float colorObjMaxBaseBlend : packoffset(c3.y);
  float2 uvScroll : packoffset(c3.z);
  float4 detailScale : packoffset(c4);
  float4 detailScale1 : packoffset(c5);
  float4 detailScale2 : packoffset(c6);
  float4 detailScale3 : packoffset(c7);
  float4 alphaRevealParms : packoffset(c8);
  float4 colorDetailScale : packoffset(c9);
  float alphaRevealSoftEdge : packoffset(c10);
  float alphaRevealRamp : packoffset(c10.y);
  float heightScale : packoffset(c10.z);
  float2 sprites : packoffset(c11);
  float2 source : packoffset(c11.z);
  float count : packoffset(c12);
  float seed : packoffset(c12.y);
  float2 scaleMin : packoffset(c12.z);
  float2 scaleMax : packoffset(c13);
  float2 lifeMaxMin : packoffset(c13.z);
  float2 fadeInMaxMin : packoffset(c14);
  float2 fadeOutMaxMin : packoffset(c14.z);
  float2 pauseMaxMin : packoffset(c15);
  float2 stretchMaxMin : packoffset(c15.z);
  float2 slideMaxMin : packoffset(c16);
  float2 heightMaxMin : packoffset(c16.z);
  float2 warpMaxMin : packoffset(c17);
  float2 jitterMaxMin : packoffset(c17.z);
  float2 rotationMaxMin : packoffset(c18);
  float blurPixels : packoffset(c18.z);
  float prevFrameBoost : packoffset(c18.w);
}

cbuffer GenericsCBuffer : register(b3)
{
  float4 scriptVector0 : packoffset(c0);
  float4 scriptVector1 : packoffset(c1);
  float4 scriptVector2 : packoffset(c2);
  float4 scriptVector3 : packoffset(c3);
  float4 scriptVector4 : packoffset(c4);
  float4 scriptVector5 : packoffset(c5);
  float4 scriptVector6 : packoffset(c6);
  float4 scriptVector7 : packoffset(c7);
  float4 weaponParam0 : packoffset(c8);
  float4 weaponParam1 : packoffset(c9);
  float4 weaponParam2 : packoffset(c10);
  float4 weaponParam3 : packoffset(c11);
  float4 weaponParam4 : packoffset(c12);
  float4 weaponParam5 : packoffset(c13);
  float4 weaponParam6 : packoffset(c14);
  float4 weaponParam7 : packoffset(c15);
}

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  uint v2 : TEXCOORD15,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float2 p1 : TEXCOORD3,
  out float4 o2 : TEXCOORD2)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = floor(v0.x);
  r0.y = cmp(r0.x >= count);
  r0.z = cmp(heightScale == 0.000000);
  r0.y = (int)r0.z | (int)r0.y;
  if (r0.y != 0) {
    o0.xyzw = float4(0,0,0,0);
    o1.xyzw = float4(0,0,0,0);
    o2.xyzw = float4(0,0,0,0);
    return;
  }
  r0.yz = v1.xy * float2(2,2) + float2(-1,-1);
  r0.w = 1.00000011e-06 * scriptVector7.x;
  r1.x = cmp(r0.w >= -r0.w);
  r0.w = frac(abs(r0.w));
  r0.w = r1.x ? r0.w : -r0.w;
  r1.x = 1000 * r0.w;
  r1.y = r1.x / lifeMaxMin.y;
  r1.y = floor(r1.y);
  r1.z = lifeMaxMin.y * r1.y;
  r0.w = r0.w * 1000 + -r1.z;
  r1.z = saturate(r0.w / lifeMaxMin.y);
  r1.y = r1.y * lifeMaxMin.y + seed;
  r1.y = scriptVector6.z + r1.y;
  r1.w = r0.x * 23.2474995 + r1.y;
  r2.xyzw = float4(33.1469994,1.54299998,74.3499985,87.3399963) + r1.wwww;
  r1.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.x = frac(r1.w);
  r1.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.y = frac(r1.w);
  r1.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.z = frac(r1.w);
  r1.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.w = frac(r1.w);
  r1.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.x = frac(r1.w);
  r1.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.y = frac(r1.w);
  r1.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.z = frac(r1.w);
  r1.w = dot(r2.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r1.w = frac(r1.w);
  r3.xyzw = r0.xxxx * float4(13.0072002,13.0072002,13.0072002,13.0072002) + float4(0.344999999,9.35000038,1.34500003,12.04);
  r3.xyzw = r1.yyyy * float4(3.34573007,3.34573007,3.34573007,3.34573007) + r3.xyzw;
  r2.x = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.x = frac(r2.x);
  r2.x = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.y = frac(r2.x);
  r2.x = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.z = frac(r2.x);
  r2.x = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.w = frac(r2.x);
  r2.x = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.x = frac(r2.x);
  r2.x = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.y = frac(r2.x);
  r2.x = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.z = frac(r2.x);
  r2.x = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.x = frac(r2.x);
  r4.xy = float2(1,1.77777779) * count;
  r4.xy = sqrt(r4.xy);
  r4.xy = floor(r4.xy);
  r2.w = r4.x * r0.x;
  r2.w = cmp(r2.w >= -r2.w);
  r2.w = r2.w ? r4.x : -r4.x;
  r3.w = 1 / r2.w;
  r3.w = r3.w * r0.x;
  r3.w = frac(r3.w);
  r2.w = r3.w * r2.w;
  r4.z = floor(r2.w);
  r2.w = r0.x / r4.x;
  r2.w = floor(r2.w);
  r3.w = r4.z + r4.z;
  r3.w = cmp(r3.w >= -r3.w);
  r5.xy = r3.ww ? float2(2,0.5) : float2(-2,-0.5);
  r3.w = r5.y * r4.z;
  r3.w = frac(r3.w);
  r3.w = r5.x * r3.w;
  r3.w = floor(r3.w);
  r3.w = cmp(r3.w != 0.000000);
  r3.w = r3.w ? 0.500000 : 0;
  r4.w = r3.w + r2.w;
  r4.xy = r4.zw / r4.xy;
  r4.xy = r4.xy * float2(2,2) + float2(-1,-1);
  r4.xy = float2(1,1.77777779) * r4.xy;
  r2.w = cmp(r1.x >= -r1.x);
  r1.x = frac(abs(r1.x));
  r1.x = r2.w ? r1.x : -r1.x;
  r0.x = r0.x * 13.0072002 + r1.x;
  r0.x = r1.y * 3.34573007 + r0.x;
  r5.xyzw = float4(0.233999997,2.1099999,5.56449986,2.25399995) + r0.xxxx;
  r0.x = dot(r5.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r5.x = frac(r0.x);
  r0.x = dot(r5.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r5.y = frac(r0.x);
  r0.x = dot(r5.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r5.z = frac(r0.x);
  r0.x = dot(r5.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r5.w = frac(r0.x);
  r0.x = dot(r5.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r5.x = frac(r0.x);
  r0.x = dot(r5.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r5.y = frac(r0.x);
  r0.x = dot(r5.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r5.z = frac(r0.x);
  r0.x = dot(r5.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r0.x = frac(r0.x);
  r1.xy = scaleMax.xy + -scaleMin.xy;
  r1.xy = r1.zz * r1.xy + scaleMin.xy;
  r4.zw = fadeInMaxMin.xz + -fadeInMaxMin.yw;
  r1.z = r2.z * r4.z + fadeInMaxMin.y;
  r1.w = r1.w * r4.w + fadeOutMaxMin.y;
  r2.zw = jitterMaxMin.x + -jitterMaxMin.y;
  r2.y = r2.y * r2.z + jitterMaxMin.y;
  o2.w = r3.x * r2.w + warpMaxMin.y;
  r2.z = heightMaxMin.x + -heightMaxMin.y;
  r2.z = r3.y * r2.z + heightMaxMin.y;
  r2.z = heightScale * r2.z;
  r2.z = 30 * r2.z;
  r3.xy = pauseMaxMin.xz + -pauseMaxMin.yw;
  r2.w = r3.z * r3.x + pauseMaxMin.y;
  r3.x = r2.x * r3.y + stretchMaxMin.y;
  r3.zw = -source.xy * float2(1,1.77777779) + r4.xy;
  r2.x = dot(r3.zw, r3.zw);
  r2.x = rsqrt(r2.x);
  r3.zw = r3.zw * r2.xx;
  r4.zw = max(float2(0,0), scriptVector6.xy);
  r5.xy = renderTargetSize.xy * r4.xy;
  r2.x = dot(r5.xy, r5.xy);
  r2.x = sqrt(r2.x);
  r4.w = r4.w + -r4.z;
  r2.x = r2.x + -r4.z;
  r4.z = 1 / r4.w;
  r2.x = saturate(r4.z * r2.x);
  r4.z = r2.x * -2 + 3;
  r2.x = r2.x * r2.x;
  r2.x = -r4.z * r2.x + 1;
  r3.zw = r3.zw * r2.xx;
  r0.yz = r1.xy * r0.yz;
  r1.x = max(9.99999975e-05, r3.x);
  r3.y = 1 / r1.x;
  r1.x = -r2.w + r0.w;
  r1.y = saturate(r1.x / lifeMaxMin.y);
  r3.xy = float2(-1,-1) + r3.xy;
  r3.xy = r1.yy * r3.xy + float2(1,1);
  r1.y = r2.z / r3.x;
  r2.x = cmp(r1.z == 0.000000);
  r1.z = saturate(r0.w / r1.z);
  r2.z = r1.z * -2 + 3;
  r1.z = r1.z * r1.z;
  r1.z = r2.z * r1.z;
  r1.z = r2.x ? 1 : r1.z;
  r1.xy = r1.xy * r1.xz;
  r1.z = cmp(r1.w == 0.000000);
  r2.x = -lifeMaxMin.y + r0.w;
  r2.x = r2.x + r1.w;
  r1.w = saturate(r2.x / r1.w);
  r2.x = r1.w * -2 + 3;
  r1.w = r1.w * r1.w;
  r1.w = -r2.x * r1.w + 1;
  r1.z = r1.z ? 1 : r1.w;
  o2.z = r1.y * r1.z;
  r1.y = cmp(r2.w < r0.w);
  r1.xz = r3.zw * r1.xx;
  r1.xz = slideMaxMin.yy * r1.xz;
  r1.xz = r1.xz * float2(0.00999999978,0.00999999978) + r4.xy;
  r1.xy = r1.yy ? r1.xz : r4.xy;
  r1.zw = r0.yz * r3.xy + r4.xy;
  p1.xy = saturate(r1.zw * float2(0.5,0.5) + float2(0.5,0.5));
  r0.yz = r0.yz * r3.xy + r1.xy;
  r0.w = cmp(r0.w < r2.w);
  r1.x = 0.00999999978 * r2.y;
  r1.yz = r3.zw * r0.xx;
  r1.xy = r1.xx * r1.yz + r0.yz;
  r0.xy = r0.ww ? r1.xy : r0.yz;
  r0.z = sprites.y * sprites.x;
  r0.z = 0.5 * r0.z;
  r0.z = floor(r0.z);
  r1.xy = v1.xy / sprites.xy;
  r0.z = r0.z / sprites.x;
  r0.w = cmp(r0.z >= -r0.z);
  r1.z = frac(abs(r0.z));
  r0.w = r0.w ? r1.z : -r1.z;
  r2.x = sprites.x * r0.w;
  r2.y = floor(r0.z);
  r0.zw = r2.xy / sprites.xy;
  o1.xy = r1.xy + r0.zw;
  o0.y = -r0.y;
  o0.x = r0.x;
  o0.zw = float2(1,1);
  o2.xy = float2(0,1);
  return;
}