//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:37:49 2021
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float3 specColorTint;              // Offset:  160 Size:    12
//   float baseNormalHeight;            // Offset:  172 Size:     4
//   float2 glossRange;                 // Offset:  176 Size:     8
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16 [unused]
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for gCullConstants
// {
//
//   struct CoreCullConstantsPack
//   {
//       
//       uint4 data[5];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    80
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
// Resource bind info for refProbeConstants
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   224
//
// }
//
// Resource bind info for refProbeAttenuationConstants
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// colorSampler                      sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// specColorSampler                  sampler      NA          NA             s3      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// normalSampler                     sampler      NA          NA             s5      1 
// aoSampler                         sampler      NA          NA             s6      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// colorMap                          texture  float4          2d             t0      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// visibleLights                     texture    uint     2darray             t6      1 
// visibleProbes                     texture    uint     2darray             t7      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gCullConstants                    texture  struct         r/o            t11      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// refProbeConstants                 texture  struct         r/o            t15      1 
// refProbeAttenuationConstants      texture  struct         r/o            t16      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// specColorMap                      texture  float4          2d            t21      1 
// normalMap                         texture  float4          2d            t22      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// glossMap                          texture  float4          2d            t24      1 
// aoMap                             texture  float4          2d            t25      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyz 
// COLOR                    1   x           1     NONE   float   x   
// TEXCOORD                 0    yz         1     NONE   float    yz 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// OFFPOSITION              0   xyz         5     NONE   float   xyz 
// SV_IsFrontFace           0   x           6    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB0[12], immediateIndexed
dcl_constantbuffer CB1[93], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2darray (uint,uint,uint,uint) t6
dcl_resource_texture2darray (uint,uint,uint,uint) t7
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_structured t11, 80
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_structured t15, 224
dcl_resource_structured t16, 96
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t23, 4
dcl_resource_texture2d (float,float,float,float) t24
dcl_resource_texture2d (float,float,float,float) t25
dcl_resource_texture2darray (float,float,float,float) t31
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.x
dcl_input_ps linear v1.yz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps_sgv constant v6.x, is_front_face
dcl_output o0.xyzw
dcl_temps 45
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.yzyy, t0.xyzw, s1
mul o0.w, r0.w, v1.x
sample_indexable(texture2d)(float,float,float,float) r0.w, v1.yzyy, t21.yzwx, s3
add r1.xyz, cb0[10].xyzx, l(-0.040000, -0.040000, -0.040000, 0.000000)
mad r1.xyz, r0.wwww, r1.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000)
add_sat r0.w, -r0.w, l(1.000000)
mul r0.xyz, r0.wwww, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, v1.yzyy, t25.yzwx, s6
sample_indexable(texture2d)(float,float,float,float) r1.w, v1.yzyy, t24.yzwx, s3
add r2.x, -cb0[11].x, cb0[11].y
mad r1.w, r1.w, r2.x, cb0[11].x
mul_sat r1.w, r1.w, l(0.05882353)
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.yzyy, t22.xyzw, s5
add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.000000, 0.000000)
mad r2.xyz, cb0[10].wwww, r2.xyzx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r2.xy, r2.xyxx, l(1.99218750, 1.99218750, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r2.w, -r2.w, l(1.000000)
max r2.w, r2.w, l(0.000000)
sqrt r2.w, r2.w
mul r2.z, r2.z, r2.z
mul r2.z, r2.z, l(0.33333334)
min r2.z, r2.z, l(1.000000)
movc r3.x, v6.x, l(1.000000), l(-1.000000)
dp3 r3.y, v2.xyzx, v2.xyzx
rsq r3.y, r3.y
mul r3.yzw, r3.yyyy, v2.xxyz
mul r3.yzw, r3.xxxx, r3.yyzw
dp3 r4.x, v3.xyzx, v3.xyzx
rsq r4.x, r4.x
mul r4.xyz, r4.xxxx, v3.xyzx
mul r4.xyz, r3.xxxx, r4.xyzx
dp3 r4.w, v4.xyzx, v4.xyzx
rsq r4.w, r4.w
mul r5.xyz, r4.wwww, v4.xyzx
mul r5.xyz, r3.xxxx, r5.xyzx
mul r1.w, r1.w, l(-17.000000)
exp r1.w, r1.w
add r1.w, r1.w, r2.z
log r1.w, r1.w
mul r1.w, r1.w, l(-0.05882353)
max r6.y, r1.w, l(0.000000)
mul r5.xyz, r2.yyyy, r5.xyzx
mad r2.xyz, r4.xyzx, r2.xxxx, r5.xyzx
mad r2.xyz, r3.yzwy, r2.wwww, r2.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
ftou r3.xy, v0.xyxx
ge r1.w, v0.z, l(0.984375)
mul r3.z, v0.z, l(1.01587307)
mad r3.w, v0.z, l(64.000000), l(-63.000000)
movc r1.w, r1.w, r3.w, r3.z
max r1.w, r1.w, l(0.00000001)
rcp r1.w, r1.w
dp3 r3.z, -v5.xyzx, -v5.xyzx
rsq r3.z, r3.z
mul r4.xyz, r3.zzzz, -v5.xyzx
ine r3.w, cb1[92].x, l(0)
utof r5.xy, r3.yxyy
dp2 r4.w, r5.yxyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r4.w, r4.w
mul r4.w, r4.w, l(52.982918)
frc r4.w, r4.w
mad r4.w, r4.w, l(6.28318548), cb1[70].w
sincos r7.x, r8.x, r4.w
dp2 r4.w, r5.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r4.w, r4.w
mul r4.w, r4.w, l(52.982918)
frc r4.w, r4.w
mad r4.w, r4.w, l(6.28318548), cb1[70].w
sincos r5.x, r9.x, r4.w
dp3_sat r6.x, r2.xyzx, r4.xyzx
dp3 r4.w, -r4.xyzx, r2.xyzx
add r4.w, r4.w, r4.w
mad r10.xyz, r2.xyzx, -r4.wwww, -r4.xyzx
mul r4.w, r6.y, l(17.000000)
exp r4.w, r4.w
add r4.w, r4.w, l(2.000000)
div r4.w, l(2.000000), r4.w
sqrt r5.y, r4.w
add r5.z, -r6.y, l(1.000000)
mul r5.w, r5.z, l(5.000000)
mad r6.z, r5.z, l(5.000000), l(-2.500000)
mul r6.z, r6.z, l(0.400000)
max r6.z, r6.z, l(0.000000)
mad r7.zw, -r5.zzzz, l(0.000000, 0.000000, 10.000000, 5.000000), l(0.000000, 0.000000, 6.857410, 7.085000)
exp r6.w, r7.z
mul r6.w, r6.w, r6.x
mul r6.zw, r6.zzzw, l(0.000000, 0.000000, 100.000000, 9.136810)
mul r7.z, r5.z, r5.w
mad r7.z, -r7.z, l(2.015905), r7.w
exp r7.z, r7.z
mul r7.z, r6.x, r7.z
mul r7.z, r7.z, l(9.708090)
max r6.w, r6.w, r7.z
max r6.w, r6.w, l(1.268160)
iadd r7.z, cb2[0].y, -cb2[58].x
mul r1.w, r1.w, l(0.00781250)
min r1.w, r1.w, l(15.000000)
ftou r1.w, r1.w
ushr r11.xy, r3.xyxx, l(6, 6, 0, 0)
ishl r11.z, r1.w, l(4)
and r1.w, r7.z, l(-32)
iadd r3.x, -r1.w, r7.z
and r3.y, cb2[0].y, l(-32)
iadd r7.w, -r3.y, cb2[0].y
mov r12.xy, l(0,0,0,0)
mov r13.w, l(0)
mov r14.yz, l(0,0,1.000000,0)
mov r15.xy, l(0,0,0,0)
mov r16.x, l(1.000000)
mov r17.xy, l(0,0,0,0)
mov r18.xy, l(0,0,0,0)
mov r19.xyzw, l(0,0,0,0)
mov r20.yzw, l(0,0,0,0)
mov r8.w, r1.w
loop 
  uge r9.y, r8.w, cb2[0].y
  breakc_nz r9.y
  ushr r12.z, r8.w, l(5)
  iadd r13.xyz, r11.xyzx, r12.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r9.y, r13.xyzw, t7.yxzw
  ieq r9.z, r1.w, r8.w
  bfi r9.w, r3.x, l(0), l(0), r9.y
  movc r9.y, r9.z, r9.w, r9.y
  ieq r9.z, r3.y, r8.w
  ubfe r9.w, r7.w, l(0), r9.y
  movc r9.y, r9.z, r9.w, r9.y
  iadd r9.z, r8.w, cb2[0].x
  mov r21.xyzw, r19.xyzw
  mov r22.xyz, r20.yzwy
  mov r9.w, r9.y
  loop 
    breakc_z r9.w
    firstbit_lo r11.w, r9.w
    ishl r12.z, l(1), r11.w
    and r12.w, r9.w, r12.z
    if_nz r12.w
      xor r9.w, r9.w, r12.z
      iadd r12.z, r9.z, r11.w
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r23.xyzw, r12.z, l(0), t11.xyzw
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r13.xy, r12.z, l(16), t11.xyxx
      add r23.xyz, r23.xyzx, -v5.xyzx
      mov r13.z, r23.w
      lt r13.xyz, |r23.xyzx|, r13.zxyz
      and r12.z, r13.y, r13.x
      and r12.z, r13.z, r12.z
      if_nz r12.z
        iadd r11.w, r8.w, r11.w
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r23.xyzw, r11.w, l(0), t15.wxyz
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r12.zw, r11.w, l(96), t15.xxxy
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r24.xyzw, r11.w, l(116), t15.zwxy
        add r13.xyz, -r23.yzwy, v5.xyzx
        and r14.w, r24.w, l(0x0000ffff)
        ubfe r15.w, l(6), l(25), r24.w
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r25.xyzw, r14.w, l(0), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r26.xyzw, r14.w, l(16), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r27.xyzw, r14.w, l(32), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r28.xyzw, r14.w, l(48), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r29.xyzw, r14.w, l(64), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r30.xyzw, r14.w, l(80), t16.xyzw
        dp3 r16.z, r25.xyzx, r13.xyzx
        add_sat r16.z, r25.w, r16.z
        dp3 r16.w, r26.xyzx, r13.xyzx
        add_sat r16.w, r26.w, r16.w
        mul r16.z, r16.w, r16.z
        dp3 r16.w, r27.xyzx, r13.xyzx
        add_sat r16.w, r27.w, r16.w
        mul r16.z, r16.w, r16.z
        dp3 r16.w, r28.xyzx, r13.xyzx
        add_sat r16.w, r28.w, r16.w
        mul r16.z, r16.w, r16.z
        dp3 r16.w, r29.xyzx, r13.xyzx
        add_sat r16.w, r29.w, r16.w
        mul r16.z, r16.w, r16.z
        dp3 r16.w, r30.xyzx, r13.xyzx
        add_sat r16.w, r30.w, r16.w
        mul r14.x, r16.w, r16.z
        and r16.z, r12.z, l(1)
        movc r16.zw, r16.zzzz, r14.xxxy, r14.zzzx
        mov r14.x, r12.z
        mov r25.xy, r16.zwzz
        mov r17.w, l(1)
        loop 
          ige r18.w, r17.w, r15.w
          breakc_nz r18.w
          iadd r18.w, r14.w, r17.w
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r26.xyzw, r18.w, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r27.xyzw, r18.w, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r28.xyzw, r18.w, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r29.xyzw, r18.w, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r30.xyzw, r18.w, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r18.w, l(80), t16.xyzw
          dp3 r18.w, r26.xyzx, r13.xyzx
          add_sat r18.w, r26.w, r18.w
          mul r18.w, r18.w, r25.x
          dp3 r23.w, r27.xyzx, r13.xyzx
          add_sat r23.w, r27.w, r23.w
          mul r18.w, r18.w, r23.w
          dp3 r23.w, r28.xyzx, r13.xyzx
          add_sat r23.w, r28.w, r23.w
          mul r18.w, r18.w, r23.w
          dp3 r23.w, r29.xyzx, r13.xyzx
          add_sat r23.w, r29.w, r23.w
          mul r18.w, r18.w, r23.w
          dp3 r23.w, r30.xyzx, r13.xyzx
          add_sat r23.w, r30.w, r23.w
          mul r18.w, r18.w, r23.w
          dp3 r23.w, r31.xyzx, r13.xyzx
          add_sat r23.w, r31.w, r23.w
          mul r25.x, r18.w, r23.w
          ushr r25.z, r14.x, l(2)
          ubfe r25.w, l(1), l(2), r14.x
          and r26.x, r25.z, l(2)
          max r26.y, r25.x, r25.y
          mad r18.w, -r18.w, r23.w, l(1.000000)
          mul r18.w, r18.w, r25.y
          movc r16.y, r26.x, r18.w, r26.y
          movc r25.xy, r25.wwww, r25.xyxx, r16.xyxx
          iadd r17.w, r17.w, l(1)
          mov r14.x, r25.z
        endloop 
        mov_sat r25.y, r25.y
        mul r12.z, r12.w, r25.y
        lt r14.x, l(0.000000), r12.z
        if_nz r14.x
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r26.xyzw, r11.w, l(16), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r27.xyzw, r11.w, l(32), t15.yxwz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r28.xyzw, r11.w, l(48), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r29.xyzw, r11.w, l(64), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r30.xyzw, r11.w, l(80), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r31.xyzw, r11.w, l(132), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r32.xyzw, r11.w, l(148), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r33.xyzw, r11.w, l(164), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r34.xyzw, r11.w, l(180), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r35.xyzw, r11.w, l(196), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r36.xy, r11.w, l(212), t15.xyxx
          mad r22.z, r25.y, r12.w, r22.z
          mul r11.w, r24.z, r12.z
          mov r24.z, r31.z
          dp3 r12.z, r10.xyzx, r24.xyzx
          dp3 r12.w, r13.xyzx, r24.xyzx
          add r12.w, -r31.w, r12.w
          ge r14.x, r12.w, l(0.000000)
          max r12.w, r6.z, |r12.w|
          movc r12.w, r14.x, r12.w, -r12.w
          max r12.z, -r12.z, l(0.00000010)
          div r12.z, r12.w, r12.z
          min r12.z, |r12.z|, l(131072.000000)
          mov r31.z, r32.z
          dp3 r12.w, r10.xyzx, r31.xyzx
          dp3 r14.x, r13.xyzx, r31.xyzx
          add r14.x, -r32.w, r14.x
          ge r14.w, r14.x, l(0.000000)
          max r14.x, r6.z, |r14.x|
          movc r14.x, r14.w, r14.x, -r14.x
          max r12.w, -r12.w, l(0.00000010)
          div r12.w, r14.x, r12.w
          min r12.z, |r12.w|, r12.z
          mov r32.z, r33.z
          dp3 r12.w, r10.xyzx, r32.xyzx
          dp3 r14.x, r13.xyzx, r32.xyzx
          add r14.x, -r33.w, r14.x
          ge r14.w, r14.x, l(0.000000)
          max r14.x, r6.z, |r14.x|
          movc r14.x, r14.w, r14.x, -r14.x
          max r12.w, -r12.w, l(0.00000010)
          div r12.w, r14.x, r12.w
          min r12.z, |r12.w|, r12.z
          mov r33.z, r34.z
          dp3 r12.w, r10.xyzx, r33.xyzx
          dp3 r14.x, r13.xyzx, r33.xyzx
          add r14.x, -r34.w, r14.x
          ge r14.w, r14.x, l(0.000000)
          max r14.x, r6.z, |r14.x|
          movc r14.x, r14.w, r14.x, -r14.x
          max r12.w, -r12.w, l(0.00000010)
          div r12.w, r14.x, r12.w
          min r12.z, |r12.w|, r12.z
          mov r34.z, r35.x
          dp3 r12.w, r10.xyzx, r34.xyzx
          dp3 r14.x, r13.xyzx, r34.xyzx
          add r14.x, -r35.y, r14.x
          ge r14.w, r14.x, l(0.000000)
          max r14.x, r6.z, |r14.x|
          movc r14.x, r14.w, r14.x, -r14.x
          max r12.w, -r12.w, l(0.00000010)
          div r12.w, r14.x, r12.w
          min r12.z, |r12.w|, r12.z
          mov r36.zw, r35.zzzw
          dp3 r12.w, r10.zxyz, r36.xzwx
          dp3 r14.x, r13.zxyz, r36.xzwx
          add r14.x, -r36.y, r14.x
          ge r14.w, r14.x, l(0.000000)
          max r14.x, r6.z, |r14.x|
          movc r14.x, r14.w, r14.x, -r14.x
          max r12.w, -r12.w, l(0.00000010)
          div r12.w, r14.x, r12.w
          min r12.z, |r12.w|, r12.z
          mov r24.x, r28.w
          mov r24.yz, r29.zzwz
          add r16.yzw, r13.xxyz, r24.xxyz
          mad r16.yzw, r10.xxyz, r12.zzzz, r16.yyzw
          dp3 r12.w, r16.yzwy, r16.yzwy
          sqrt r12.w, r12.w
          div r12.z, r12.z, r12.w
          add r12.z, r12.z, r12.z
          sqrt r12.z, r12.z
          mad r12.z, r5.z, l(5.000000), r12.z
          add r12.z, r12.z, l(-0.844800)
          mov r23.y, r26.z
          mov r23.z, r27.x
          dp3 r31.x, r16.yzwy, r23.xyzx
          mov r24.xy, r26.xwxx
          mov r24.z, r27.w
          dp3 r31.y, r16.yzwy, r24.xyzx
          mov r27.x, r26.y
          dp3 r31.z, r16.yzwy, r27.xyzx
          ubfe r12.w, l(9), l(16), r24.w
          utof r31.w, r12.w
          sample_l_indexable(texturecubearray)(float,float,float,float) r16.yzw, r31.xyzw, t8.wxyz, s2, r12.z
          dp3 r26.x, r13.xyzx, r23.xyzx
          dp3 r26.y, r13.xyzx, r24.xyzx
          dp3 r26.z, r13.xyzx, r27.xyzx
          mad_sat r13.xyz, r26.xyzx, r28.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
          mov r29.z, r30.x
          mad r13.xyz, r13.xyzx, r29.xyzx, r30.yzwy
          dp3 r31.x, r2.xyzx, r23.xyzx
          dp3 r31.y, r2.xyzx, r24.xyzx
          dp3 r31.z, r2.xyzx, r27.xyzx
          lt r23.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r31.xyzx
          movc r15.z, r23.x, l(0), l(0.500000)
          add r24.xyz, r13.xyzx, r15.xyzx
          sample_l_indexable(texture3d)(float,float,float,float) r24.xyz, r24.xyzx, t17.xyzw, s4, l(0.000000)
          mul r25.xzw, r31.xxyz, r31.xxyz
          mul r25.xzw, r11.wwww, r25.xxzw
          movc r17.z, r23.y, l(0), l(0.500000)
          add r23.xyw, r13.xyxz, r17.xyxz
          sample_l_indexable(texture3d)(float,float,float,float) r23.xyw, r23.xywx, t18.xywz, s4, l(0.000000)
          mul r23.xyw, r25.zzzz, r23.xyxw
          mad r23.xyw, r24.xyxz, r25.xxxx, r23.xyxw
          movc r18.z, r23.z, l(0), l(0.500000)
          add r13.xyz, r13.xyzx, r18.xyzx
          sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r13.xyzx, t19.xyzw, s4, l(0.000000)
          mad r13.xyz, r13.xyzx, r25.wwww, r23.xywx
          sample_l_indexable(texturecubearray)(float,float,float,float) r23.xyz, r31.xyzw, t8.xyzw, s2, l(6.000000)
          mul r24.xyz, r13.xyzx, r23.xyzx
          dp3 r12.z, r24.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
          mad r21.xyz, r13.xyzx, r23.xyzx, r21.xyzx
          mul r12.w, r6.w, r12.z
          mul r13.xyz, r11.wwww, r16.yzwy
          dp3 r11.w, r13.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
          mad r11.w, r6.w, r12.z, r11.w
          div r11.w, r12.w, r11.w
          mov r23.x, r21.w
          mov r23.yz, r22.xxyx
          mad r22.xyw, r13.yzyx, r11.wwww, r23.yzyx
          mov r21.w, r22.w
        endif 
      endif 
    endif 
  endloop 
  mov r19.xyzw, r21.xyzw
  mov r20.yzw, r22.xxyz
  iadd r8.w, r8.w, l(32)
endloop 
lt r3.y, r20.w, l(1.000000)
if_nz r3.y
  mov r12.xy, l(0,0,0,0)
  mov r13.w, l(0)
  mov r14.yz, l(0,0,1.000000,0)
  mov r15.xy, l(0,0,0,0)
  mov r16.x, l(1.000000)
  mov r17.xy, l(0,0,0,0)
  mov r18.xy, l(0,0,0,0)
  mov r21.x, r19.w
  mov r21.yzw, r20.yyzw
  mov r9.yzw, r19.xxyz
  mov r3.y, r20.w
  mov r7.w, l(0)
  loop 
    uge r8.w, r7.w, r7.z
    breakc_nz r8.w
    ushr r12.z, r7.w, l(5)
    iadd r13.xyz, r11.xyzx, r12.xyzx
    ld_indexable(texture2darray)(uint,uint,uint,uint) r8.w, r13.xyzw, t7.yzwx
    ieq r11.w, r1.w, r7.w
    ubfe r12.z, r3.x, l(0), r8.w
    movc r8.w, r11.w, r12.z, r8.w
    iadd r11.w, r7.w, cb2[0].x
    mov r22.xyzw, r21.xyzw
    mov r13.xyz, r9.yzwy
    mov r12.z, r3.y
    mov r12.w, r8.w
    loop 
      breakc_z r12.w
      firstbit_lo r14.w, r12.w
      ishl r15.w, l(1), r14.w
      and r16.z, r12.w, r15.w
      if_nz r16.z
        xor r12.w, r12.w, r15.w
        iadd r15.w, r11.w, r14.w
        ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r23.xyzw, r15.w, l(0), t11.xyzw
        ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r24.xy, r15.w, l(16), t11.xyxx
        add r23.xyz, r23.xyzx, -v5.xyzx
        mov r24.z, r23.w
        lt r23.xyz, |r23.xyzx|, r24.zxyz
        and r15.w, r23.y, r23.x
        and r15.w, r23.z, r15.w
        if_nz r15.w
          iadd r14.w, r7.w, r14.w
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r23.xyzw, r14.w, l(0), t15.wxyz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r16.zw, r14.w, l(96), t15.xxxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r24.xyzw, r14.w, l(116), t15.zwxy
          add r25.xyz, -r23.yzwy, v5.xyzx
          and r15.w, r24.w, l(0x0000ffff)
          ubfe r17.w, l(6), l(25), r24.w
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r26.xyzw, r15.w, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r27.xyzw, r15.w, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r28.xyzw, r15.w, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r29.xyzw, r15.w, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r30.xyzw, r15.w, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r15.w, l(80), t16.xyzw
          dp3 r18.w, r26.xyzx, r25.xyzx
          add_sat r18.w, r26.w, r18.w
          dp3 r23.w, r27.xyzx, r25.xyzx
          add_sat r23.w, r27.w, r23.w
          mul r18.w, r18.w, r23.w
          dp3 r23.w, r28.xyzx, r25.xyzx
          add_sat r23.w, r28.w, r23.w
          mul r18.w, r18.w, r23.w
          dp3 r23.w, r29.xyzx, r25.xyzx
          add_sat r23.w, r29.w, r23.w
          mul r18.w, r18.w, r23.w
          dp3 r23.w, r30.xyzx, r25.xyzx
          add_sat r23.w, r30.w, r23.w
          mul r18.w, r18.w, r23.w
          dp3 r23.w, r31.xyzx, r25.xyzx
          add_sat r23.w, r31.w, r23.w
          mul r14.x, r18.w, r23.w
          and r18.w, r16.z, l(1)
          movc r26.xy, r18.wwww, r14.xyxx, r14.zxzz
          mov r14.x, r16.z
          mov r27.xy, r26.xyxx
          mov r18.w, l(1)
          loop 
            ige r23.w, r18.w, r17.w
            breakc_nz r23.w
            iadd r23.w, r15.w, r18.w
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r28.xyzw, r23.w, l(0), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r29.xyzw, r23.w, l(16), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r30.xyzw, r23.w, l(32), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r23.w, l(48), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r32.xyzw, r23.w, l(64), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r33.xyzw, r23.w, l(80), t16.xyzw
            dp3 r23.w, r28.xyzx, r25.xyzx
            add_sat r23.w, r28.w, r23.w
            mul r23.w, r23.w, r27.x
            dp3 r25.w, r29.xyzx, r25.xyzx
            add_sat r25.w, r29.w, r25.w
            mul r23.w, r23.w, r25.w
            dp3 r25.w, r30.xyzx, r25.xyzx
            add_sat r25.w, r30.w, r25.w
            mul r23.w, r23.w, r25.w
            dp3 r25.w, r31.xyzx, r25.xyzx
            add_sat r25.w, r31.w, r25.w
            mul r23.w, r23.w, r25.w
            dp3 r25.w, r32.xyzx, r25.xyzx
            add_sat r25.w, r32.w, r25.w
            mul r23.w, r23.w, r25.w
            dp3 r25.w, r33.xyzx, r25.xyzx
            add_sat r25.w, r33.w, r25.w
            mul r27.x, r23.w, r25.w
            ushr r26.z, r14.x, l(2)
            ubfe r26.w, l(1), l(2), r14.x
            and r27.z, r26.z, l(2)
            max r27.w, r27.x, r27.y
            mad r23.w, -r23.w, r25.w, l(1.000000)
            mul r23.w, r23.w, r27.y
            movc r16.y, r27.z, r23.w, r27.w
            movc r27.xy, r26.wwww, r27.xyxx, r16.xyxx
            iadd r18.w, r18.w, l(1)
            mov r14.x, r26.z
          endloop 
          add_sat r14.x, -r12.z, r27.y
          mul r15.w, r16.w, r14.x
          lt r16.y, l(0.000000), r15.w
          if_nz r16.y
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r26.xyzw, r14.w, l(16), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r28.xyzw, r14.w, l(32), t15.yxwz
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r29.xyzw, r14.w, l(48), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r30.xyzw, r14.w, l(64), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r31.xyzw, r14.w, l(80), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r32.xyzw, r14.w, l(132), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r33.xyzw, r14.w, l(148), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r34.xyzw, r14.w, l(164), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r35.xyzw, r14.w, l(180), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r36.xyzw, r14.w, l(196), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r37.xy, r14.w, l(212), t15.xyxx
            mad r22.w, r14.x, r16.w, r22.w
            mul r14.x, r24.z, r15.w
            mov r24.z, r32.z
            dp3 r14.w, r10.xyzx, r24.xyzx
            dp3 r15.w, r25.xyzx, r24.xyzx
            add r15.w, -r32.w, r15.w
            ge r16.y, r15.w, l(0.000000)
            max r15.w, r6.z, |r15.w|
            movc r15.w, r16.y, r15.w, -r15.w
            max r14.w, -r14.w, l(0.00000010)
            div r14.w, r15.w, r14.w
            min r14.w, |r14.w|, l(131072.000000)
            mov r32.z, r33.z
            dp3 r15.w, r10.xyzx, r32.xyzx
            dp3 r16.y, r25.xyzx, r32.xyzx
            add r16.y, -r33.w, r16.y
            ge r16.z, r16.y, l(0.000000)
            max r16.y, r6.z, |r16.y|
            movc r16.y, r16.z, r16.y, -r16.y
            max r15.w, -r15.w, l(0.00000010)
            div r15.w, r16.y, r15.w
            min r14.w, r14.w, |r15.w|
            mov r33.z, r34.z
            dp3 r15.w, r10.xyzx, r33.xyzx
            dp3 r16.y, r25.xyzx, r33.xyzx
            add r16.y, -r34.w, r16.y
            ge r16.z, r16.y, l(0.000000)
            max r16.y, r6.z, |r16.y|
            movc r16.y, r16.z, r16.y, -r16.y
            max r15.w, -r15.w, l(0.00000010)
            div r15.w, r16.y, r15.w
            min r14.w, r14.w, |r15.w|
            mov r34.z, r35.z
            dp3 r15.w, r10.xyzx, r34.xyzx
            dp3 r16.y, r25.xyzx, r34.xyzx
            add r16.y, -r35.w, r16.y
            ge r16.z, r16.y, l(0.000000)
            max r16.y, r6.z, |r16.y|
            movc r16.y, r16.z, r16.y, -r16.y
            max r15.w, -r15.w, l(0.00000010)
            div r15.w, r16.y, r15.w
            min r14.w, r14.w, |r15.w|
            mov r35.z, r36.x
            dp3 r15.w, r10.xyzx, r35.xyzx
            dp3 r16.y, r25.xyzx, r35.xyzx
            add r16.y, -r36.y, r16.y
            ge r16.z, r16.y, l(0.000000)
            max r16.y, r6.z, |r16.y|
            movc r16.y, r16.z, r16.y, -r16.y
            max r15.w, -r15.w, l(0.00000010)
            div r15.w, r16.y, r15.w
            min r14.w, r14.w, |r15.w|
            mov r37.zw, r36.zzzw
            dp3 r15.w, r10.zxyz, r37.xzwx
            dp3 r16.y, r25.zxyz, r37.xzwx
            add r16.y, -r37.y, r16.y
            ge r16.z, r16.y, l(0.000000)
            max r16.y, r6.z, |r16.y|
            movc r16.y, r16.z, r16.y, -r16.y
            max r15.w, -r15.w, l(0.00000010)
            div r15.w, r16.y, r15.w
            min r14.w, r14.w, |r15.w|
            mov r24.x, r29.w
            mov r24.yz, r30.zzwz
            add r16.yzw, r25.xxyz, r24.xxyz
            mad r16.yzw, r10.xxyz, r14.wwww, r16.yyzw
            dp3 r15.w, r16.yzwy, r16.yzwy
            sqrt r15.w, r15.w
            div r14.w, r14.w, r15.w
            add r14.w, r14.w, r14.w
            sqrt r14.w, r14.w
            mad r14.w, r5.z, l(5.000000), r14.w
            add r14.w, r14.w, l(-0.844800)
            mov r23.y, r26.z
            mov r23.z, r28.x
            dp3 r32.x, r16.yzwy, r23.xyzx
            mov r24.xy, r26.xwxx
            mov r24.z, r28.w
            dp3 r32.y, r16.yzwy, r24.xyzx
            mov r28.x, r26.y
            dp3 r32.z, r16.yzwy, r28.xyzx
            ubfe r15.w, l(9), l(16), r24.w
            utof r32.w, r15.w
            sample_l_indexable(texturecubearray)(float,float,float,float) r16.yzw, r32.xyzw, t8.wxyz, s2, r14.w
            dp3 r26.x, r25.xyzx, r23.xyzx
            dp3 r26.y, r25.xyzx, r24.xyzx
            dp3 r26.z, r25.xyzx, r28.xyzx
            mad_sat r25.xyz, r26.xyzx, r29.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
            mov r30.z, r31.x
            mad r25.xyz, r25.xyzx, r30.xyzx, r31.yzwy
            dp3 r32.x, r2.xyzx, r23.xyzx
            dp3 r32.y, r2.xyzx, r24.xyzx
            dp3 r32.z, r2.xyzx, r28.xyzx
            lt r23.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r32.xyzx
            movc r15.z, r23.x, l(0), l(0.500000)
            add r24.xyz, r15.xyzx, r25.xyzx
            sample_l_indexable(texture3d)(float,float,float,float) r24.xyz, r24.xyzx, t17.xyzw, s4, l(0.000000)
            mul r26.xyz, r32.xyzx, r32.xyzx
            mul r26.xyz, r14.xxxx, r26.xyzx
            movc r17.z, r23.y, l(0), l(0.500000)
            add r23.xyw, r17.xyxz, r25.xyxz
            sample_l_indexable(texture3d)(float,float,float,float) r23.xyw, r23.xywx, t18.xywz, s4, l(0.000000)
            mul r23.xyw, r26.yyyy, r23.xyxw
            mad r23.xyw, r24.xyxz, r26.xxxx, r23.xyxw
            movc r18.z, r23.z, l(0), l(0.500000)
            add r24.xyz, r18.xyzx, r25.xyzx
            sample_l_indexable(texture3d)(float,float,float,float) r24.xyz, r24.xyzx, t19.xyzw, s4, l(0.000000)
            mad r23.xyz, r24.xyzx, r26.zzzz, r23.xywx
            sample_l_indexable(texturecubearray)(float,float,float,float) r24.xyz, r32.xyzw, t8.xyzw, s2, l(6.000000)
            mul r25.xyz, r23.xyzx, r24.xyzx
            dp3 r14.w, r25.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
            mad r13.xyz, r23.xyzx, r24.xyzx, r13.xyzx
            mul r15.z, r6.w, r14.w
            mul r16.yzw, r14.xxxx, r16.yyzw
            dp3 r14.x, r16.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
            mad r14.x, r6.w, r14.w, r14.x
            div r14.x, r15.z, r14.x
            mad r22.xyz, r16.yzwy, r14.xxxx, r22.xyzx
          endif 
        endif 
      endif 
    endloop 
    mov r21.xyzw, r22.xyzw
    mov r9.yzw, r13.xxyz
    iadd r7.w, r7.w, l(32)
  endloop 
  mov r20.xyzw, r21.zxyw
  mov r19.xyz, r9.yzwy
  mov r20.xyzw, r20.yzxw
else 
  mov r20.x, r19.w
endif 
max r1.w, r20.w, l(1.000000)
rcp r1.w, r1.w
mov_sat r20.w, r20.w
mul r9.yzw, r1.wwww, r19.xxyz
mul r12.xyz, r1.wwww, r20.xyzx
lt r3.x, r20.w, l(0.990000)
if_nz r3.x
  add r3.x, -r20.w, l(1.000000)
  mul r3.y, r3.x, cb2[19].x
  add r13.xyz, v5.xyzx, -cb2[35].xyzx
  mul r14.x, r13.x, cb2[35].w
  mul r14.yz, r13.yyzy, cb2[36].xxyx
  add_sat r13.xyz, r14.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r14.xy, r13.xyxx, cb2[36].zwzz
  mul r14.z, r13.z, cb2[37].x
  add r13.xyz, r14.xyzx, cb2[37].yzwy
  lt r14.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r2.xyzx
  movc r14.xyz, r14.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r14.w, l(0)
  add r15.xyz, r13.xyzx, r14.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r15.xyz, r15.xyzx, t17.xyzw, s4, l(0.000000)
  mul r16.xyz, r2.xyzx, r2.xyzx
  mul r16.xyz, r3.yyyy, r16.xyzx
  add r17.xyz, r13.xyzx, r14.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t18.xyzw, s4, l(0.000000)
  mul r17.xyz, r16.yyyy, r17.xyzx
  mad r15.xyz, r15.xyzx, r16.xxxx, r17.xyzx
  add r13.xyz, r13.xyzx, r14.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r13.xyzx, t19.xyzw, s4, l(0.000000)
  mad r13.xyz, r13.xyzx, r16.zzzz, r15.xyzx
  mov r2.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r14.xyz, r2.xyzw, t8.xyzw, s2, l(6.000000)
  mul r13.xyz, r13.xyzx, r14.xyzx
  dp3 r2.w, r13.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r9.yzw, r19.xxyz, r1.wwww, r13.xxyz
  mov r10.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r13.xyz, r10.xyzw, t8.xyzw, s2, r5.w
  mad r1.w, cb2[19].x, r3.x, -r2.w
  mad r1.w, r6.y, r1.w, r2.w
  mad r12.xyz, r13.xyzx, r1.wwww, r12.xyzx
endif 
add r1.w, r0.w, r6.x
log r1.w, |r1.w|
mul r1.w, r1.w, r5.y
exp r1.w, r1.w
add r1.w, r0.w, r1.w
add_sat r1.w, r1.w, l(-1.000000)
mul r13.xyz, r0.wwww, r9.yzwy
mad r3.xy, r6.xyxx, l(0.984375, 0.984375, 0.000000, 0.000000), l(0.00781250, 0.00781250, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t5.xyzw, s2, l(0.000000)
mul r6.yzw, r1.wwww, r12.xxyz
mul r12.xyz, r3.xxxx, r6.zwyz
mul r6.yzw, r3.yyyy, r6.yyzw
sqrt r0.w, r5.y
mad r0.w, r0.w, l(0.500000), l(0.500000)
mul r0.w, r0.w, r0.w
mul r1.w, r0.w, l(0.500000)
mad r0.w, -r0.w, l(0.500000), l(1.000000)
mad r2.w, r6.x, r0.w, r1.w
mul r0.w, r0.w, r2.w
mul r1.w, r1.w, r2.w
dp3 r2.w, r2.xyzx, cb2[17].xyzx
mov_sat r3.x, r2.w
ge r3.y, l(0.000000), r3.x
if_nz r3.y
  mov r5.z, l(0)
endif 
if_z r3.y
  mul r9.yzw, v5.yyyy, cb2[29].xxyz
  mad r9.yzw, v5.xxxx, cb2[28].xxyz, r9.yyzw
  mad r9.yzw, v5.zzzz, cb2[30].xxyz, r9.yyzw
  add r9.yzw, r9.yyzw, cb2[31].xxyz
  add r3.y, r9.w, -cb2[17].w
  mad r3.y, -r3.y, l(0.00006104), l(1.000000)
  mov_sat r5.w, r3.y
  eq r5.w, r3.y, r5.w
  if_nz r5.w
    mov r5.w, l(0)
    mov r7.z, l(0)
    loop 
      ge r7.w, r5.w, l(3.000000)
      breakc_nz r7.w
      ftou r7.w, r5.w
      add r14.xy, r9.yzyy, -cb2[r7.w + 20].xyxx
      max r8.w, |r14.y|, |r14.x|
      mul r7.z, r8.w, cb2[r7.w + 20].z
      lt r7.w, r7.z, l(1.000000)
      if_nz r7.w
        break 
      endif 
      add r5.w, r5.w, l(1.000000)
      mov r7.z, l(0)
    endloop 
  else 
    mov r5.w, l(3.000000)
    mov r7.z, l(0)
  endif 
  ge r7.w, r5.w, l(3.000000)
  if_nz r7.w
    mul r14.xyz, l(128.000000, 0.500000, 0.500000, 0.000000), cb2[27].zxyz
    rcp r15.xz, r14.xxxx
    mov r15.y, -r15.z
    mad r14.xyz, r9.yzyy, r15.xyzx, r14.yzyy
    add r15.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r14.xyz, r15.xyzx, r14.xyzx
    mul r15.xy, r14.zyzz, cb2[32].xxxx
    round_ni r15.xy, r15.xyxx
    mul r8.w, r15.y, cb2[27].x
    mad r8.w, r8.w, cb2[32].x, r15.x
    ftou r8.w, r8.w
    iadd r8.w, r8.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r8.w, l(0), t23.xxxx
    and r11.w, r10.w, l(0x40000000)
    ishl r14.w, r10.w, l(2)
    if_z r11.w
      and r11.w, r10.w, l(0x01ffffff)
      iadd r15.x, r8.w, r11.w
      ushr r8.w, r10.w, l(25)
      utof r8.w, r8.w
      mul r14.xyz, r8.wwww, r14.xyzx
      frc r14.xyz, r14.xyzx
      mul r14.xyz, r14.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
      ftou r14.xyz, r14.xyzx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.z, r15.x, l(0), t23.xxxx
      ushr r16.xy, r14.zyzz, l(6, 6, 0, 0)
      and r8.w, r15.z, l(0xc0000000)
      iadd r10.w, r15.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r10.w, l(0), t23.xxxx
      movc r10.w, r16.y, r15.z, r10.w
      ushr r11.w, r10.w, l(13)
      movc r10.w, r16.x, r11.w, r10.w
      and r10.w, r10.w, l(8191)
      iadd r16.x, r10.w, r15.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.z, r16.x, l(0), t23.xxxx
      mov r15.y, l(0)
      mov r16.y, l(1)
      movc r16.xyz, r8.wwww, r15.xyzx, r16.xyzx
      movc r17.yz, r8.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r18.xy, r14.zyzz, r17.yyyy
      and r18.xy, r18.xyxx, l(1, 1, 0, 0)
      and r10.w, r16.z, l(0xc0000000)
      iadd r11.w, r16.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r11.w, l(0), t23.xxxx
      movc r11.w, r18.y, r16.z, r11.w
      ushr r15.w, r11.w, l(13)
      movc r11.w, r18.x, r15.w, r11.w
      and r11.w, r11.w, l(8191)
      iadd r17.x, r11.w, r16.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.x, l(0), t23.xxxx
      movc r16.xyz, r10.wwww, r16.xyzx, r17.xzwx
      movc r15.xyz, r8.wwww, r15.xyzx, r16.xyzx
      and r8.w, r15.z, l(0xc0000000)
      if_z r8.w
        iadd r8.w, -r15.y, l(6)
        ushr r16.xy, r14.zyzz, r8.wwww
        or r8.w, r15.z, l(0x40000000)
        bfi r10.w, l(1), l(1), r16.y, l(0)
        bfi r10.w, l(1), l(0), r16.x, r10.w
        imul null, r10.w, r10.w, l(10)
        ushr r8.w, r8.w, r10.w
        and r8.w, r8.w, l(1023)
        iadd r16.x, r8.w, r15.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.w, r16.x, l(0), t23.xxxx
        iadd r16.yz, r15.yyyy, l(0, 1, 2, 0)
        iadd r8.w, -r16.y, l(6)
        ushr r15.yw, r14.zzzy, r8.wwww
        and r8.w, r16.w, l(0xc0000000)
        or r10.w, r16.w, l(0x40000000)
        bfi r11.w, l(1), l(1), r15.w, l(0)
        bfi r11.w, l(1), l(0), r15.y, r11.w
        imul null, r11.w, r11.w, l(10)
        ushr r10.w, r10.w, r11.w
        and r10.w, r10.w, l(1023)
        iadd r17.x, r10.w, r16.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.z, r17.x, l(0), t23.xxxx
        mov r17.y, r16.z
        movc r17.xyz, r8.wwww, r16.xywx, r17.xyzx
        iadd r10.w, -r17.y, l(6)
        ushr r15.yw, r14.zzzy, r10.wwww
        and r10.w, r17.z, l(0xc0000000)
        or r11.w, r17.z, l(0x40000000)
        bfi r15.w, l(1), l(1), r15.w, l(0)
        bfi r15.y, l(1), l(0), r15.y, r15.w
        imul null, r15.y, r15.y, l(10)
        ushr r11.w, r11.w, r15.y
        and r11.w, r11.w, l(1023)
        iadd r18.x, r11.w, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.y, r18.x, l(0), t23.xxxx
        movc r15.yw, r10.wwww, r17.xxxz, r18.xxxy
        movc r15.xz, r8.wwww, r16.xxwx, r15.yywy
      endif 
      and r8.w, r15.z, l(0xc0000000)
      if_z r8.w
        ubfe r10.w, l(14), l(15), r15.z
        utof r10.w, r10.w
        mul r10.w, r10.w, cb2[27].w
        mul r10.w, r10.w, l(0.00006104)
        and r15.yw, r15.zzzz, l(0, 0x00007fff, 0, 0x20000000)
        utof r11.w, r15.y
        mul r11.w, r11.w, cb2[27].w
        mul r11.w, r11.w, l(0.00003052)
        and r15.y, r14.y, l(3)
        iadd r15.y, r15.y, r15.x
        iadd r15.y, r15.y, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.y, r15.y, l(0), t23.xxxx
        bfi r16.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r14.xyzx, l(0, 0, 0, 0)
        ushr r14.x, r15.y, r16.x
        and r14.x, r14.x, l(255)
        utof r14.x, r14.x
        mul r14.x, r11.w, r14.x
        mad r14.x, r14.x, l(0.00392157), r10.w
        iadd r14.y, r16.y, l(1)
        ubfe r14.z, l(1), l(1), r14.z
        iadd r14.y, r14.z, r14.y
        iadd r14.y, r14.y, r15.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.y, r14.y, l(0), t23.xxxx
        ushr r14.y, r14.y, r16.z
        and r14.y, r14.y, l(0x0000ffff)
        utof r14.y, r14.y
        mul r11.w, r11.w, r14.y
        mad r10.w, r11.w, l(0.00001526), r10.w
        movc r14.w, r15.w, r14.x, r10.w
      else 
        and r10.w, r15.z, l(0x80000000)
        iadd r11.w, r15.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r11.w, l(0), t23.xxxx
        movc r10.w, r10.w, r11.w, l(0)
        ishl r11.w, r15.z, l(2)
        ushr r14.x, r10.w, l(16)
        f16tof32 r14.x, r14.x
        and r10.w, r10.w, l(0x0000ffff)
        f16tof32 r10.w, r10.w
        mad r11.w, r9.y, r14.x, r11.w
        mad r10.w, r9.z, r10.w, r11.w
        movc r14.w, r8.w, r10.w, r14.w
      endif 
    endif 
    mad r8.w, -cb2[27].z, l(2.000000), r9.w
    lt r8.w, r14.w, r8.w
    movc r5.z, r8.w, l(0), l(1.000000)
  endif 
  if_z r7.w
    if_z cb2[58].y
      ftou r7.w, r5.w
      add r14.xy, r9.yzyy, -cb2[r7.w + 20].xyxx
      mul r14.xy, r14.xyxx, cb2[r7.w + 20].zzzz
      mad r14.xy, r14.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r7.w, cb2[26].y
      add r14.z, r5.w, r7.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r7.w, r14.xyzx, t13.xxxx, s13, r3.y
      sample_l_indexable(texture2darray)(float,float,float,float) r8.w, r14.xyzx, t31.yzwx, s0, l(0.000000)
      add r7.w, r7.w, r8.w
      add_sat r7.w, r7.w, l(-1.000000)
      mul r8.w, r7.w, r7.w
      mul r5.z, r7.w, r8.w
    endif 
    if_nz cb2[58].y
      mov r14.x, -r7.x
      ftou r7.w, r5.w
      add r5.w, r5.w, l(1.000000)
      min r5.w, r5.w, l(2.000000)
      ftou r5.w, r5.w
      add r7.z, -r7.z, l(1.000000)
      mul r7.z, r7.z, l(28.000000)
      ftou r7.z, r7.z
      add r15.xy, r9.yzyy, -cb2[r7.w + 20].xyxx
      mul r15.xy, r15.xyxx, cb2[r7.w + 20].zzzz
      mad r15.xy, r15.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r9.yz, r9.yyzy, -cb2[r5.w + 20].xxyx
      mul r9.yz, r9.yyzy, cb2[r5.w + 20].zzzz
      mad r9.yz, r9.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r14.y, r8.x
      mov r14.z, r7.x
      mov r8.w, l(0)
      mov r9.w, l(0)
      loop 
        uge r10.w, r9.w, l(8)
        breakc_nz r10.w
        ult r10.w, r7.z, r9.w
        movc r15.zw, r10.wwww, r9.yyyz, r15.xxxy
        movc r11.w, r10.w, cb2[r5.w + 20].w, cb2[r7.w + 20].w
        movc r10.w, r10.w, r5.w, r7.w
        dp2 r16.x, icb[r9.w + 0].yxyy, r14.xyxx
        dp2 r16.y, icb[r9.w + 0].yxyy, r14.yzyy
        mad r16.xy, r16.xyxx, r11.wwww, r15.zwzz
        iadd r10.w, r10.w, cb2[26].y
        utof r16.z, r10.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r16.xyzx, t13.xxxx, s13, r3.y
        sample_l_indexable(texture2darray)(float,float,float,float) r11.w, r16.xyzx, t31.yzwx, s0, l(0.000000)
        add r10.w, r10.w, r11.w
        add_sat r10.w, r10.w, l(-1.000000)
        mad r8.w, r10.w, l(0.125000), r8.w
        iadd r9.w, r9.w, l(1)
      endloop 
      mul r3.y, r8.w, r8.w
      mul r5.z, r8.w, r3.y
    endif 
  endif 
endif 
lt r3.y, l(0.000000), r3.x
if_nz r3.y
  lt r3.y, l(0.000000), r5.z
  if_nz r3.y
    mul r3.y, r4.w, cb2[18].w
    mul r3.y, r3.x, r3.y
    if_nz cb2[23].x
      add r14.xyz, v5.xyzx, cb1[24].xyzx
      mov r14.w, l(1.000000)
      dp4 r5.w, cb2[24].xyzw, r14.xyzw
      dp4 r7.z, cb2[25].xyzw, r14.xyzw
      frc r14.x, r5.w
      frc r14.y, r7.z
      iadd r5.w, l(-1), cb2[23].x
      utof r14.z, r5.w
      sample_l_indexable(texture2darray)(float,float,float,float) r9.yzw, r14.xyzx, t20.wxyz, s2, l(0.000000)
      add r9.yzw, r9.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
      mad r9.yzw, cb2[23].yyyy, r9.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      mul r9.yzw, r9.yyzw, cb2[18].xxyz
    else 
      mov r9.yzw, cb2[18].xxyz
    endif 
    ushr r5.w, cb2[53].x, l(16)
    ult r7.z, l(0), r5.w
    and r7.z, r3.w, r7.z
    if_nz r7.z
      iadd r5.w, r5.w, cb2[0].x
      iadd r5.w, r5.w, l(-1)
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r7.z, r5.w, l(52), t12.xxxx
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r5.w, l(68), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r5.w, l(84), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r16.xyzw, r5.w, l(132), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r17.xyzw, r5.w, l(148), t12.xyzw
      mad r7.w, |r2.w|, l(-0.200000), l(0.400000)
      mad r18.xyz, r2.xyzx, r7.wwww, v5.xyzx
      mov r18.w, l(1.000000)
      dp4 r14.x, r14.xyzw, r18.xyzw
      dp4 r14.y, r15.xyzw, r18.xyzw
      mad r14.xy, r14.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r14.xy, r17.zwzz, r14.xyxx
      mul r14.xy, r17.xyxx, r14.xyxx
      div r14.zw, r7.zzzz, r16.xxxz
      add r15.xy, -r14.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r15.xy, r14.xyxx, r15.xyxx
      ge r14.zw, r14.zzzw, r14.xxxy
      or r14.zw, r14.zzzw, r15.xxxy
      or r7.w, r14.w, r14.z
      if_z r7.w
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r7.w, r5.w, l(28), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r5.w, l(100), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.zw, r5.w, l(164), t12.xxxy
        dp4 r5.w, r15.xyzw, r18.xyzw
        mov_sat r14.xy, r14.xyxx
        mad r15.xy, r14.xyxx, r16.xzxx, r16.ywyy
        add r5.w, r14.z, r5.w
        div r5.w, r5.w, r14.w
        max r5.w, r5.w, l(0.00006104)
        and r7.w, r7.w, l(0x0000ffff)
        if_nz cb2[58].y
          mov r14.x, -r7.x
          utof r16.z, r7.w
          mov r14.y, r8.x
          mov r14.z, r7.x
          mov r8.w, l(0)
          mov r10.w, l(0)
          loop 
            ige r11.w, r10.w, l(8)
            breakc_nz r11.w
            dp2 r17.x, icb[r10.w + 0].yxyy, r14.xyxx
            dp2 r17.y, icb[r10.w + 0].yxyy, r14.yzyy
            mad r16.xy, r17.xyxx, r7.zzzz, r15.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.w, r16.xyzx, t9.xxxx, s13, r5.w
            mad r8.w, r11.w, l(0.125000), r8.w
            iadd r10.w, r10.w, l(1)
          endloop 
        else 
          utof r15.z, r7.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r15.xyzx, t9.xxxx, s13, r5.w
        endif 
        mul r5.w, r8.w, r8.w
        mul r5.w, r8.w, r5.w
      else 
        mov r5.w, l(1.000000)
      endif 
      mul r5.z, r5.w, r5.z
    else 
      and r5.w, cb2[53].x, l(0x0000ffff)
      ult r7.z, l(0), r5.w
      not r7.w, r3.w
      and r7.z, r7.w, r7.z
      if_nz r7.z
        iadd r5.w, r5.w, cb2[0].x
        iadd r5.w, r5.w, l(-1)
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r7.z, r5.w, l(52), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r5.w, l(68), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r5.w, l(84), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r16.xyzw, r5.w, l(132), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r17.xyzw, r5.w, l(148), t12.xyzw
        mad r7.w, |r2.w|, l(-0.200000), l(0.400000)
        mad r18.xyz, r2.xyzx, r7.wwww, v5.xyzx
        mov r18.w, l(1.000000)
        dp4 r14.x, r14.xyzw, r18.xyzw
        dp4 r14.y, r15.xyzw, r18.xyzw
        mad r14.xy, r14.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r14.xy, r17.zwzz, r14.xyxx
        mul r14.xy, r17.xyxx, r14.xyxx
        div r14.zw, r7.zzzz, r16.xxxz
        add r15.xy, -r14.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r15.xy, r14.xyxx, r15.xyxx
        ge r14.zw, r14.zzzw, r14.xxxy
        or r14.zw, r14.zzzw, r15.xxxy
        or r7.w, r14.w, r14.z
        if_z r7.w
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r7.w, r5.w, l(28), t12.xxxx
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r5.w, l(100), t12.xyzw
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.zw, r5.w, l(164), t12.xxxy
          dp4 r5.w, r15.xyzw, r18.xyzw
          mov_sat r14.xy, r14.xyxx
          mad r15.xy, r14.xyxx, r16.xzxx, r16.ywyy
          add r5.w, r14.z, r5.w
          div r5.w, r5.w, r14.w
          max r5.w, r5.w, l(0.00006104)
          and r7.w, r7.w, l(0x0000ffff)
          if_nz cb2[58].y
            mov r14.x, -r7.x
            utof r16.z, r7.w
            mov r14.y, r8.x
            mov r14.z, r7.x
            mov r8.w, l(0)
            mov r10.w, l(0)
            loop 
              ige r11.w, r10.w, l(8)
              breakc_nz r11.w
              dp2 r17.x, icb[r10.w + 0].yxyy, r14.xyxx
              dp2 r17.y, icb[r10.w + 0].yxyy, r14.yzyy
              mad r16.xy, r17.xyxx, r7.zzzz, r15.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.w, r16.xyzx, t9.xxxx, s13, r5.w
              mad r8.w, r11.w, l(0.125000), r8.w
              iadd r10.w, r10.w, l(1)
            endloop 
          else 
            utof r15.z, r7.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r15.xyzx, t9.xxxx, s13, r5.w
          endif 
          mul r5.w, r8.w, r8.w
          mul r5.w, r8.w, r5.w
        else 
          mov r5.w, l(1.000000)
        endif 
        mul r5.z, r5.w, r5.z
      endif 
    endif 
    mad r5.w, -r6.x, l(0.500000), l(1.000000)
    mad r5.w, -r3.x, r5.w, l(1.000000)
    mul r5.w, r5.w, r5.w
    mad r5.w, -r5.w, l(0.620000), l(0.620000)
    add r5.w, -r3.x, r5.w
    mad r5.w, r5.y, r5.w, r3.x
    mul r5.w, r5.z, r5.w
    lt r2.w, l(0.000000), r2.w
    mad r14.xyz, r5.wwww, r9.yzwy, r13.xyzx
    mad r15.xyz, -v5.xyzx, r3.zzzz, cb2[17].xyzx
    dp3 r3.z, r15.xyzx, r15.xyzx
    rsq r3.z, r3.z
    mul r15.xyz, r3.zzzz, r15.xyzx
    dp3 r3.z, r15.xyzx, r4.xyzx
    dp3 r5.w, r2.xyzx, r15.xyzx
    mad r7.z, |r5.w|, r4.w, -|r5.w|
    mad r5.w, |r5.w|, r7.z, l(1.000000)
    mad r3.x, r3.x, r0.w, r1.w
    mul r5.w, r5.w, r5.w
    mul r3.x, r3.x, r5.w
    rcp r3.x, r3.x
    mul r3.x, r3.y, r3.x
    mul r3.x, r3.x, r5.z
    mul r3.x, r3.x, l(0.250000)
    mad r15.xyz, r3.xxxx, r9.yzwy, r6.yzwy
    add_sat r3.y, -r3.z, l(1.000000)
    mul r3.z, r3.y, r3.y
    mul r3.z, r3.z, r3.z
    mul r3.y, r3.z, r3.y
    mul r3.x, r3.y, r3.x
    mad r16.xyz, r3.xxxx, r9.zwyz, r12.xyzx
    mov r14.w, r16.z
    mov r13.w, r12.z
    movc r13.xyzw, r2.wwww, r14.xyzw, r13.xyzw
    mov r16.zw, r15.xxxy
    mov r12.zw, r6.yyyz
    movc r14.xyzw, r2.wwww, r16.xyzw, r12.xyzw
    movc r6.w, r2.w, r15.z, r6.w
    mov r12.z, r13.w
    mov r12.xy, r14.xyxx
    mov r6.yz, r14.zzwz
  endif 
endif 
mov r14.x, -r7.x
not r2.w, r3.w
mad r3.x, -r6.x, l(0.500000), l(1.000000)
mov r15.xy, l(0,0,0,0)
mov r16.w, l(0)
mov r17.xyz, v5.xyzx
mov r17.w, l(1.000000)
mov r18.w, l(1.000000)
mov r14.z, r7.x
mov r19.w, l(1.000000)
mov r20.z, l(1.000000)
mov r21.w, l(1.000000)
mov r14.yw, r8.xxxx
mov r7.y, r14.w
mov r22.w, l(1.000000)
mov r8.y, r14.x
mov r8.z, r7.x
mov r23.w, l(1.000000)
mov r24.x, r8.x
mov r24.y, r14.x
mov r24.z, r7.x
mov r25.x, r8.x
mov r25.y, r14.x
mov r25.z, r7.x
mov r26.x, r8.x
mov r26.y, r14.x
mov r26.z, r7.x
mov r9.yzw, r13.xxyz
mov r27.xyz, r12.zxyz
mov r28.xyz, r6.yzwy
mov r3.y, cb2[58].y
mov r3.z, l(0)
loop 
  uge r5.z, r3.z, cb2[0].x
  breakc_nz r5.z
  ushr r15.z, r3.z, l(5)
  iadd r16.xyz, r11.xyzx, r15.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r5.z, r16.xyzw, t6.yzxw
  mov r16.xyz, r9.yzwy
  mov r29.xyz, r27.xyzx
  mov r30.xyz, r28.xyzx
  mov r5.w, r3.y
  mov r6.x, r5.z
  loop 
    breakc_z r6.x
    firstbit_lo r7.z, r6.x
    ishl r7.w, l(1), r7.z
    and r8.w, r6.x, r7.w
    if_nz r8.w
      xor r6.x, r6.x, r7.w
      iadd r7.z, r3.z, r7.z
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r31.xyzw, r7.z, l(0), t11.xyzw
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r32.xy, r7.z, l(16), t11.xyxx
      add r31.xyz, r31.xyzx, -v5.xyzx
      mov r32.z, r31.w
      lt r31.xyz, |r31.xyzx|, r32.zxyz
      and r7.w, r31.y, r31.x
      and r7.w, r31.z, r7.w
      if_nz r7.w
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r31.xyzw, r7.z, l(0), t12.wxyz
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r32.xyzw, r7.z, l(16), t12.zxyw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r33.xyzw, r7.z, l(32), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r34.xyzw, r7.z, l(48), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r35.xyzw, r7.z, l(64), t12.yzwx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r36.xyzw, r7.z, l(80), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r37.xyzw, r7.z, l(96), t12.yzwx
        ubfe r7.w, l(3), l(24), r32.w
        switch r7.w
          case l(4)
          lt r7.w, l(0.000000), r37.x
          mov r38.xy, r36.zwzz
          mov r38.z, r37.w
          mad r39.xyz, -r38.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r31.yzwy
          add r40.xyz, r39.xyzx, -v5.xyzx
          dp3 r8.w, r38.xyzx, r40.xyzx
          div_sat r10.w, -r8.w, r37.x
          mad r41.xyz, r10.wwww, r38.xyzx, r39.xyzx
          movc r41.xyz, r7.wwww, r41.xyzx, r31.yzwy
          add r41.xyz, r41.xyzx, -v5.xyzx
          dp3 r11.w, r41.xyzx, r41.xyzx
          rsq r12.w, r11.w
          mul r41.xyz, r12.wwww, r41.xyzx
          dp3 r12.w, r2.xyzx, r41.xyzx
          mov_sat r13.w, r12.w
          lt r15.z, l(0.000000), r13.w
          if_nz r15.z
            sqrt r15.z, r11.w
            mul r15.w, r34.x, r34.x
            div r11.w, r15.w, r11.w
            min r11.w, r11.w, l(1.000000)
            mad_sat r15.zw, r15.zzzz, r33.xxxz, r33.yyyw
            mul r41.xy, r15.zwzz, r15.zwzz
            mad r15.zw, r15.zzzw, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
            mul r15.zw, r15.zzzw, r41.xxxy
            mul r11.w, r11.w, r15.z
            mul r11.w, r15.w, r11.w
            lt r15.z, l(0.000000), r11.w
            if_nz r15.z
              ubfe r15.z, l(3), l(27), r32.w
              ine r15.z, r15.z, l(1)
              if_nz r15.z
                mad r15.z, |r12.w|, l(-0.200000), l(0.400000)
                mad r41.xyz, r2.xyzx, r15.zzzz, v5.xyzx
                add r41.xyz, -r35.xyzx, r41.xyzx
                max r15.z, |r41.z|, |r41.y|
                max r15.z, r15.z, |r41.x|
                div r15.z, r36.x, r15.z
                add r15.z, r36.y, r15.z
                dp3 r15.w, r41.xyzx, r41.xyzx
                rsq r15.w, r15.w
                max r15.z, r15.z, l(0.00006104)
                and r20.w, r32.w, l(0x0000ffff)
                utof r42.w, r20.w
                mov r20.w, l(0)
                mov r24.w, l(0)
                loop 
                  ige r25.w, r24.w, l(8)
                  breakc_nz r25.w
                  dp2 r43.y, icb[r24.w + 0].yxyy, r14.xyxx
                  dp2 r43.z, icb[r24.w + 0].yxyy, r14.yzyy
                  mul r43.yz, r34.yyyy, r43.yyzy
                  mul r43.x, r9.x, r43.y
                  mul r43.w, r5.x, r43.y
                  mad r42.xyz, r41.xyzx, r15.wwww, r43.xzwx
                  sample_c_lz_indexable(texturecubearray)(float,float,float,float) r25.w, r42.xyzw, t10.xxxx, s13, r15.z
                  mad r20.w, r25.w, l(0.125000), r20.w
                  iadd r24.w, r24.w, l(1)
                endloop 
              else 
                mov r20.w, l(1.000000)
              endif 
              mul r11.w, r11.w, r20.w
              lt r15.z, l(0.000000), r11.w
              if_nz r15.z
                mul r15.z, r4.w, r32.x
                dp3 r15.w, r38.xyzx, r10.xyzx
                dp3 r24.w, r10.xyzx, r40.xyzx
                mad r25.w, -r15.w, r15.w, r37.x
                mad r8.w, r15.w, r24.w, -r8.w
                div_sat r8.w, r8.w, r25.w
                div r15.w, r25.w, r37.x
                mul r15.zw, r15.zzzw, l(0.000000, 0.000000, 0.250000, 10.000000)
                min r15.w, r15.w, l(1.000000)
                add r8.w, -r10.w, r8.w
                mad r8.w, r15.w, r8.w, r10.w
                mad r38.xyz, r8.wwww, r38.xyzx, r39.xyzx
                movc r38.xyz, r7.wwww, r38.xyzx, r31.yzwy
                add r38.xyz, r38.xyzx, -v5.xyzx
                dp3 r7.w, r38.xyzx, r38.xyzx
                rsq r7.w, r7.w
                mul r39.xyz, r7.wwww, r38.xyzx
                ubfe r8.w, l(4), l(16), r32.w
                ult r10.w, l(0), r8.w
                and r10.w, r3.w, r10.w
                if_nz r10.w
                  iadd r8.w, r8.w, cb2[0].x
                  iadd r8.w, r8.w, l(-1)
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.w, r8.w, l(52), t12.xxxx
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r40.xyzw, r8.w, l(100), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r8.w, l(116), t12.xyzw
                  mad r15.w, |r12.w|, l(-0.200000), l(0.400000)
                  mad r18.xyz, r2.xyzx, r15.wwww, v5.xyzx
                  dp4 r15.w, r40.xyzw, r18.xyzw
                  dp4 r24.w, r41.xyzw, r18.xyzw
                  lt r25.w, r24.w, r15.w
                  if_z r25.w
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r40.xyzw, r8.w, l(68), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r8.w, l(84), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.xyzw, r8.w, l(132), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r8.w, l(148), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r44.xy, r8.w, l(164), t12.xyxx
                    dp4 r40.x, r40.xyzw, r18.xyzw
                    dp4 r40.y, r41.xyzw, r18.xyzw
                    div r18.xy, r40.xyxx, r24.wwww
                    mad r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                    add r18.xy, r43.zwzz, r18.xyxx
                    mul r18.xy, r43.xyxx, r18.xyxx
                    div r40.xy, r10.wwww, r42.xzxx
                    add r40.zw, -r40.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                    ge r40.zw, r18.xxxy, r40.zzzw
                    ge r40.xy, r40.xyxx, r18.xyxx
                    or r40.xy, r40.xyxx, r40.zwzz
                    or r18.z, r40.y, r40.x
                    mov_sat r18.xy, r18.xyxx
                    mad r40.xy, r18.xyxx, r42.xzxx, r42.ywyy
                    mul r18.x, r24.w, r44.y
                    mad r15.w, r44.x, r24.w, r15.w
                    div r15.w, r15.w, r18.x
                  else 
                    mov r18.z, l(-1)
                  endif 
                  or r18.x, r25.w, r18.z
                  if_z r18.x
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r8.w, r8.w, l(28), t12.xxxx
                    max r15.w, r15.w, l(0.00006104)
                    and r8.w, r8.w, l(0x0000ffff)
                    if_nz r5.w
                      utof r18.z, r8.w
                      mov r24.w, l(0)
                      mov r25.w, l(0)
                      loop 
                        ige r26.w, r25.w, l(8)
                        breakc_nz r26.w
                        dp2 r41.x, icb[r25.w + 0].yxyy, r14.xwxx
                        dp2 r41.y, icb[r25.w + 0].xyxx, r7.xyxx
                        mad r18.xy, r41.xyxx, r10.wwww, r40.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.x, r18.xyzx, t9.xxxx, s13, r15.w
                        mad r24.w, r18.x, l(0.125000), r24.w
                        iadd r25.w, r25.w, l(1)
                      endloop 
                    else 
                      utof r40.z, r8.w
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.w, r40.xyzx, t9.xxxx, s13, r15.w
                    endif 
                    mul r8.w, r24.w, r24.w
                    mul r8.w, r24.w, r8.w
                  else 
                    mov r8.w, l(1.000000)
                  endif 
                  mul r11.w, r8.w, r11.w
                else 
                  ubfe r8.w, l(4), l(20), r32.w
                  ult r10.w, l(0), r8.w
                  and r10.w, r2.w, r10.w
                  if_nz r10.w
                    iadd r8.w, r8.w, cb2[0].x
                    iadd r8.w, r8.w, l(-1)
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.w, r8.w, l(52), t12.xxxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r40.xyzw, r8.w, l(100), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r8.w, l(116), t12.xyzw
                    mad r15.w, |r12.w|, l(-0.200000), l(0.400000)
                    mad r19.xyz, r2.xyzx, r15.wwww, v5.xyzx
                    dp4 r15.w, r40.xyzw, r19.xyzw
                    dp4 r18.x, r41.xyzw, r19.xyzw
                    lt r18.y, r18.x, r15.w
                    if_z r18.y
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r40.xyzw, r8.w, l(68), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r8.w, l(84), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.xyzw, r8.w, l(132), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r8.w, l(148), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r44.xy, r8.w, l(164), t12.xyxx
                      dp4 r40.x, r40.xyzw, r19.xyzw
                      dp4 r40.y, r41.xyzw, r19.xyzw
                      div r19.xy, r40.xyxx, r18.xxxx
                      mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                      add r19.xy, r43.zwzz, r19.xyxx
                      mul r19.xy, r43.xyxx, r19.xyxx
                      div r40.xy, r10.wwww, r42.xzxx
                      add r40.zw, -r40.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                      ge r40.zw, r19.xxxy, r40.zzzw
                      ge r40.xy, r40.xyxx, r19.xyxx
                      or r40.xy, r40.xyxx, r40.zwzz
                      or r18.z, r40.y, r40.x
                      mov_sat r19.xy, r19.xyxx
                      mad r19.xy, r19.xyxx, r42.xzxx, r42.ywyy
                      mul r25.w, r18.x, r44.y
                      mad r15.w, r44.x, r18.x, r15.w
                      div r15.w, r15.w, r25.w
                    else 
                      mov r18.z, l(-1)
                    endif 
                    or r18.x, r18.y, r18.z
                    if_z r18.x
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r8.w, r8.w, l(28), t12.xxxx
                      max r15.w, r15.w, l(0.00006104)
                      and r8.w, r8.w, l(0x0000ffff)
                      if_nz r5.w
                        utof r18.z, r8.w
                        mov r25.w, l(0)
                        mov r26.w, l(0)
                        loop 
                          ige r27.w, r26.w, l(8)
                          breakc_nz r27.w
                          dp2 r40.x, icb[r26.w + 0].xyxx, r8.xyxx
                          dp2 r40.y, icb[r26.w + 0].yxyy, r8.xzxx
                          mad r18.xy, r40.xyxx, r10.wwww, r19.xyxx
                          sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.x, r18.xyzx, t9.xxxx, s13, r15.w
                          mad r25.w, r18.x, l(0.125000), r25.w
                          iadd r26.w, r26.w, l(1)
                        endloop 
                      else 
                        utof r19.z, r8.w
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.w, r19.xyzx, t9.xxxx, s13, r15.w
                      endif 
                      mul r8.w, r25.w, r25.w
                      mul r8.w, r25.w, r8.w
                    else 
                      mov r8.w, l(1.000000)
                    endif 
                    mul r11.w, r8.w, r11.w
                  endif 
                endif 
                mad r8.w, -r13.w, r3.x, l(1.000000)
                mul r8.w, r8.w, r8.w
                mad r8.w, -r8.w, l(0.620000), l(0.620000)
                add r8.w, -r13.w, r8.w
                mad r8.w, r5.y, r8.w, r13.w
                mul r8.w, r11.w, r8.w
                mov r32.x, r31.x
                lt r10.w, l(0.000000), r12.w
                mad r18.xyz, r8.wwww, r32.xyzx, r16.xyzx
                dp3_sat r8.w, r2.xyzx, r39.xyzx
                mad r19.xyz, r38.xyzx, r7.wwww, r4.xyzx
                dp3 r7.w, r19.xyzx, r19.xyzx
                rsq r7.w, r7.w
                mul r19.xyz, r7.wwww, r19.xyzx
                dp3 r7.w, r19.xyzx, r4.xyzx
                dp3 r12.w, r2.xyzx, r19.xyzx
                mad r13.w, |r12.w|, r4.w, -|r12.w|
                mad r12.w, |r12.w|, r13.w, l(1.000000)
                mad r13.w, r8.w, r0.w, r1.w
                mul r12.w, r12.w, r12.w
                mul r12.w, r13.w, r12.w
                rcp r12.w, r12.w
                mul r8.w, r15.z, r8.w
                mul r8.w, r8.w, r12.w
                mul r8.w, r11.w, r8.w
                mad r19.xyz, r8.wwww, r32.xyzx, r30.xyzx
                add_sat r7.w, -r7.w, l(1.000000)
                mul r11.w, r7.w, r7.w
                mul r11.w, r11.w, r11.w
                mul r7.w, r7.w, r11.w
                mul r7.w, r7.w, r8.w
                mad r38.xyz, r7.wwww, r32.xyzx, r29.xyzx
                movc r16.xyz, r10.wwww, r18.xyzx, r16.xyzx
                movc r29.xyz, r10.wwww, r38.xyzx, r29.xyzx
                movc r30.xyz, r10.wwww, r19.xyzx, r30.xyzx
              endif 
            endif 
          endif 
          break 
          case l(2)
          mov r18.xy, r34.zwzz
          mov r18.z, r35.w
          add r18.xyz, r18.xyzx, -v5.xyzx
          dp3 r7.w, r18.xyzx, r18.xyzx
          rsq r7.w, r7.w
          mul r19.xyz, r7.wwww, r18.xyzx
          dp3 r8.w, r2.xyzx, r19.xyzx
          mov_sat r10.w, r8.w
          lt r11.w, l(0.000000), r10.w
          if_nz r11.w
            ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r38.xyzw, r7.z, l(112), t12.yzwx
            ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r39.xyzw, r7.z, l(128), t12.zxyw
            mov r40.xyz, r38.xyzx
            mov r40.w, r39.y
            dp4 r11.w, r40.xyzw, r17.xyzw
            lt r12.w, r11.w, l(1.000000)
            if_nz r12.w
              mov r19.xyz, l(1.000000,1.000000,1.000000,0)
              mov r12.w, l(0)
            else 
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r7.z, l(172), t12.yzwx
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.xyzw, r7.z, l(188), t12.wxyz
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r7.z, l(204), t12.xyzw
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.w, r7.z, l(236), t12.xxxx
              add r44.xyz, r31.yzwy, -v5.xyzx
              mul r15.z, r34.x, r34.x
              dp3 r15.w, r44.xyzx, r44.xyzx
              div r15.z, r15.z, r15.w
              min r15.z, r15.z, l(1.000000)
              mad_sat r33.xy, r11.wwww, r33.xzxx, r33.ywyy
              mul r33.zw, r33.xxxy, r33.xxxy
              mad r33.xy, r33.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
              mul r33.xy, r33.xyxx, r33.zwzz
              mul r15.z, r15.z, r33.x
              mul r15.z, r33.y, r15.z
              mov r35.w, r36.x
              dp4 r33.x, r35.xyzw, r17.xyzw
              mov r44.xyz, r36.yzwy
              mov r44.w, r37.w
              dp4 r33.y, r44.xyzw, r17.xyzw
              div r20.xy, r33.xyxx, r11.wwww
              lt r11.w, r41.w, l(0.00048828)
              if_nz r11.w
                mov r42.y, r43.x
                mad_sat r33.xy, |r20.xyxx|, r42.zwzz, r42.xyxx
                mul r33.zw, r33.xxxy, r33.xxxy
                mad r33.xy, r33.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
                mul r33.xy, r33.xyxx, r33.zwzz
                mul r11.w, r33.y, r33.x
              else 
                mov r41.w, r42.y
                mul_sat r33.xyzw, |r20.yyxx|, r41.xyzw
                log r33.xyzw, r33.xyzw
                mul r33.xyzw, r33.xyzw, r42.xxxx
                exp r33.xyzw, r33.xyzw
                add r33.xy, r33.zwzz, r33.xyxx
                log r33.xy, r33.xyxx
                mul r33.xy, r33.xyxx, r43.xxxx
                exp r33.xy, r33.xyxx
                mul r15.w, r33.x, r42.z
                mad r26.w, r42.w, r33.y, l(-1.000000)
                mad r15.w, r42.w, r33.y, -r15.w
                div_sat r15.w, r26.w, r15.w
                mul r26.w, r15.w, r15.w
                mad r15.w, r15.w, l(-2.000000), l(3.000000)
                mul r11.w, r15.w, r26.w
              endif 
              mul r12.w, r11.w, r15.z
              and r11.w, r13.w, l(255)
              if_nz r11.w
                ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r33.xyz, r7.z, l(220), t12.xyzx
                dp3 r13.w, r43.yzwy, r20.xyzx
                dp3 r15.z, r33.xyzx, r20.xyzx
                frc r33.x, r13.w
                frc r33.y, r15.z
                iadd r11.w, r11.w, l(-1)
                utof r33.z, r11.w
                sample_l_indexable(texture2darray)(float,float,float,float) r19.xyz, r33.xyzx, t20.xyzw, s2, l(0.000000)
              else 
                mov r19.xyz, l(1.000000,1.000000,1.000000,0)
              endif 
            endif 
            mov r31.yz, r32.yyzy
            mul r19.xyz, r19.xyzx, r31.xyzx
            lt r11.w, l(0.000000), r12.w
            if_nz r11.w
              ubfe r11.w, l(3), l(27), r32.w
              ine r11.w, r11.w, l(1)
              if_nz r11.w
                mad r11.w, |r8.w|, l(-0.200000), l(0.400000)
                mad r21.xyz, r2.xyzx, r11.wwww, v5.xyzx
                mov r38.xyz, r37.xyzx
                dp4 r11.w, r38.xyzw, r21.xyzw
                dp4 r13.w, r40.xyzw, r21.xyzw
                ge r15.z, r13.w, r11.w
                if_nz r15.z
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r39.y, r7.z, l(144), t12.xxxx
                  mov r35.w, r36.x
                  dp4 r20.x, r35.xyzw, r21.xyzw
                  mov r37.xyz, r36.yzwy
                  dp4 r20.y, r37.xyzw, r21.xyzw
                  div r15.zw, r20.xxxy, r13.wwww
                  mad_sat r15.zw, r15.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
                  mad r21.xy, r15.zwzz, r39.zwzz, r39.xyxx
                  div r7.z, r11.w, r13.w
                  max r7.z, r7.z, l(0.00006104)
                  and r11.w, r32.w, l(0x0000ffff)
                  if_nz r5.w
                    utof r31.z, r11.w
                    mov r13.w, l(0)
                    mov r15.z, l(0)
                    loop 
                      ige r15.w, r15.z, l(8)
                      breakc_nz r15.w
                      dp2 r20.x, icb[r15.z + 0].xyxx, r24.xyxx
                      dp2 r20.y, icb[r15.z + 0].yxyy, r24.xzxx
                      mad r31.xy, r20.xyxx, r34.yyyy, r21.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r31.xyzx, t9.xxxx, s13, r7.z
                      mad r13.w, r15.w, l(0.125000), r13.w
                      iadd r15.z, r15.z, l(1)
                    endloop 
                  else 
                    utof r21.z, r11.w
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r21.xyzx, t9.xxxx, s13, r7.z
                  endif 
                  mul r7.z, r13.w, r13.w
                  mul r7.z, r13.w, r7.z
                else 
                  mov r7.z, l(1.000000)
                endif 
              else 
                mov r7.z, l(1.000000)
              endif 
              mul r7.z, r7.z, r12.w
              lt r11.w, l(0.000000), r7.z
              if_nz r11.w
                mul r11.w, r4.w, r32.x
                mul r11.w, r10.w, r11.w
                ubfe r12.w, l(4), l(16), r32.w
                ult r15.z, l(0), r12.w
                and r15.z, r3.w, r15.z
                if_nz r15.z
                  iadd r12.w, r12.w, cb2[0].x
                  iadd r12.w, r12.w, l(-1)
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.z, r12.w, l(52), t12.xxxx
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r31.xyzw, r12.w, l(68), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r33.xyzw, r12.w, l(84), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r34.xyzw, r12.w, l(100), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r35.xyzw, r12.w, l(116), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r36.xyzw, r12.w, l(132), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r37.xyzw, r12.w, l(148), t12.xyzw
                  mad r15.w, |r8.w|, l(-0.200000), l(0.400000)
                  mad r22.xyz, r2.xyzx, r15.wwww, v5.xyzx
                  dp4 r20.x, r31.xyzw, r22.xyzw
                  dp4 r20.y, r33.xyzw, r22.xyzw
                  dp4 r15.w, r34.xyzw, r22.xyzw
                  dp4 r21.x, r35.xyzw, r22.xyzw
                  lt r21.y, r21.x, r15.w
                  div r20.xy, r20.xyxx, r21.xxxx
                  mad r20.xy, r20.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r20.xy, r37.zwzz, r20.xyxx
                  mul r20.xy, r37.xyxx, r20.xyxx
                  div r22.xy, r15.zzzz, r36.xzxx
                  add r31.xy, -r22.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r31.xy, r20.xyxx, r31.xyxx
                  ge r22.xy, r22.xyxx, r20.xyxx
                  or r22.xy, r22.xyxx, r31.xyxx
                  or r21.z, r22.y, r22.x
                  or r21.y, r21.y, r21.z
                  if_z r21.y
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r21.y, r12.w, l(28), t12.xxxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r22.xy, r12.w, l(164), t12.xyxx
                    mov_sat r20.xy, r20.xyxx
                    mad r31.xy, r20.xyxx, r36.xzxx, r36.ywyy
                    mul r12.w, r21.x, r22.y
                    mad r15.w, r22.x, r21.x, r15.w
                    div r12.w, r15.w, r12.w
                    max r12.w, r12.w, l(0.00006104)
                    and r15.w, r21.y, l(0x0000ffff)
                    if_nz r5.w
                      utof r21.z, r15.w
                      mov r20.xy, l(0,0,0,0)
                      loop 
                        ige r22.x, r20.y, l(8)
                        breakc_nz r22.x
                        dp2 r22.x, icb[r20.y + 0].xyxx, r25.xyxx
                        dp2 r22.y, icb[r20.y + 0].yxyy, r25.xzxx
                        mad r21.xy, r22.xyxx, r15.zzzz, r31.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r12.w
                        mad r20.x, r21.x, l(0.125000), r20.x
                        iadd r20.y, r20.y, l(1)
                      endloop 
                    else 
                      utof r31.z, r15.w
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.x, r31.xyzx, t9.xxxx, s13, r12.w
                    endif 
                    mul r12.w, r20.x, r20.x
                    mul r12.w, r20.x, r12.w
                  else 
                    mov r12.w, l(1.000000)
                  endif 
                  mul r7.z, r7.z, r12.w
                else 
                  ubfe r12.w, l(4), l(20), r32.w
                  ult r15.z, l(0), r12.w
                  and r15.z, r2.w, r15.z
                  if_nz r15.z
                    iadd r12.w, r12.w, cb2[0].x
                    iadd r12.w, r12.w, l(-1)
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.z, r12.w, l(52), t12.xxxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r31.xyzw, r12.w, l(68), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r32.xyzw, r12.w, l(84), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r33.xyzw, r12.w, l(100), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r34.xyzw, r12.w, l(116), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r35.xyzw, r12.w, l(132), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r36.xyzw, r12.w, l(148), t12.xyzw
                    mad r15.w, |r8.w|, l(-0.200000), l(0.400000)
                    mad r23.xyz, r2.xyzx, r15.wwww, v5.xyzx
                    dp4 r21.x, r31.xyzw, r23.xyzw
                    dp4 r21.y, r32.xyzw, r23.xyzw
                    dp4 r15.w, r33.xyzw, r23.xyzw
                    dp4 r20.y, r34.xyzw, r23.xyzw
                    lt r21.z, r20.y, r15.w
                    div r21.xy, r21.xyxx, r20.yyyy
                    mad r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                    add r21.xy, r36.zwzz, r21.xyxx
                    mul r21.xy, r36.xyxx, r21.xyxx
                    div r22.xy, r15.zzzz, r35.xzxx
                    add r23.xy, -r22.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r23.xy, r21.xyxx, r23.xyxx
                    ge r22.xy, r22.xyxx, r21.xyxx
                    or r22.xy, r22.xyxx, r23.xyxx
                    or r22.x, r22.y, r22.x
                    or r21.z, r21.z, r22.x
                    if_z r21.z
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r21.z, r12.w, l(28), t12.xxxx
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r22.xy, r12.w, l(164), t12.xyxx
                      mov_sat r21.xy, r21.xyxx
                      mad r23.xy, r21.xyxx, r35.xzxx, r35.ywyy
                      mul r12.w, r20.y, r22.y
                      mad r15.w, r22.x, r20.y, r15.w
                      div r12.w, r15.w, r12.w
                      max r12.w, r12.w, l(0.00006104)
                      and r15.w, r21.z, l(0x0000ffff)
                      if_nz r5.w
                        utof r21.z, r15.w
                        mov r20.y, l(0)
                        mov r22.x, l(0)
                        loop 
                          ige r22.y, r22.x, l(8)
                          breakc_nz r22.y
                          dp2 r31.x, icb[r22.x + 0].xyxx, r26.xyxx
                          dp2 r31.y, icb[r22.x + 0].yxyy, r26.xzxx
                          mad r21.xy, r31.xyxx, r15.zzzz, r23.xyxx
                          sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r12.w
                          mad r20.y, r21.x, l(0.125000), r20.y
                          iadd r22.x, r22.x, l(1)
                        endloop 
                      else 
                        utof r23.z, r15.w
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.y, r23.xyzx, t9.xxxx, s13, r12.w
                      endif 
                      mul r12.w, r20.y, r20.y
                      mul r12.w, r20.y, r12.w
                    else 
                      mov r12.w, l(1.000000)
                    endif 
                    mul r7.z, r7.z, r12.w
                  endif 
                endif 
                mad r12.w, -r10.w, r3.x, l(1.000000)
                mul r12.w, r12.w, r12.w
                mad r12.w, -r12.w, l(0.620000), l(0.620000)
                add r12.w, -r10.w, r12.w
                mad r12.w, r5.y, r12.w, r10.w
                mul r12.w, r7.z, r12.w
                lt r8.w, l(0.000000), r8.w
                mad r21.xyz, r12.wwww, r19.xyzx, r16.xyzx
                mad r18.xyz, r18.xyzx, r7.wwww, r4.xyzx
                dp3 r7.w, r18.xyzx, r18.xyzx
                rsq r7.w, r7.w
                mul r18.xyz, r7.wwww, r18.xyzx
                dp3 r7.w, r18.xyzx, r4.xyzx
                dp3 r12.w, r2.xyzx, r18.xyzx
                mad r15.z, |r12.w|, r4.w, -|r12.w|
                mad r12.w, |r12.w|, r15.z, l(1.000000)
                mad r10.w, r10.w, r0.w, r1.w
                mul r12.w, r12.w, r12.w
                mul r10.w, r10.w, r12.w
                rcp r10.w, r10.w
                mul r10.w, r11.w, r10.w
                mul r7.z, r7.z, r10.w
                mul r7.z, r7.z, l(0.250000)
                mad r18.xyz, r7.zzzz, r19.xyzx, r30.xyzx
                add_sat r7.w, -r7.w, l(1.000000)
                mul r10.w, r7.w, r7.w
                mul r10.w, r10.w, r10.w
                mul r7.w, r7.w, r10.w
                mul r7.z, r7.w, r7.z
                mad r19.xyz, r7.zzzz, r19.xyzx, r29.xyzx
                movc r16.xyz, r8.wwww, r21.xyzx, r16.xyzx
                movc r29.xyz, r8.wwww, r19.xyzx, r29.xyzx
                movc r30.xyz, r8.wwww, r18.xyzx, r30.xyzx
              endif 
            endif 
          endif 
          break 
          default 
          break 
        endswitch 
      endif 
    endif 
  endloop 
  mov r9.yzw, r16.xxyz
  mov r27.xyz, r29.xyzx
  mov r28.xyz, r30.xyzx
  iadd r3.z, r3.z, l(32)
endloop 
add r2.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, r27.xyzx
mad r1.xyz, r28.xyzx, r1.xyzx, r2.xyzx
mad r0.xyz, r9.yzwy, r0.xyzx, r1.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, v5.xyzx, v5.xyzx
  rsq r1.x, r0.w
  mul r1.xyz, r1.xxxx, v5.xyzx
  sqrt r0.w, r0.w
  lt r1.w, l(0.000000), cb2[13].w
  if_nz r1.w
    mad r2.xy, r0.wwww, cb2[15].xyxx, cb2[14].zwzz
    mul r2.xy, r2.xyxx, cb2[16].xyxx
    lt r1.w, l(0.010000), |v5.z|
    mul r2.zw, v5.zzzz, cb2[15].zzzw
    mul r3.xy, r2.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r3.xy, r3.xyxx
    add r3.xy, -r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r2.zw, r3.xxxy, r2.zzzw
    mul r2.zw, r2.zzzw, r2.xxxy
    movc r2.xy, r1.wwww, r2.zwzz, r2.xyxx
    mul r2.xzw, r2.xxxx, cb2[12].xxyz
    exp r2.xzw, r2.xxzw
    mul r3.xyz, r2.yyyy, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    add r3.xyz, -r2.xzwx, r3.xyzx
    mad r2.xyz, cb2[13].wwww, r3.xyzx, r2.xzwx
  else 
    mad r1.w, r0.w, cb2[15].x, cb2[14].z
    mul r1.w, r1.w, cb2[16].x
    lt r2.w, l(0.010000), |v5.z|
    mul r3.x, v5.z, cb2[15].z
    mul r3.y, r3.x, l(-1.442695)
    exp r3.y, r3.y
    add r3.y, -r3.y, l(1.000000)
    div r3.x, r3.y, r3.x
    mul r3.x, r1.w, r3.x
    movc r1.w, r2.w, r3.x, r1.w
    mul r3.xyz, r1.wwww, cb2[12].xyzx
    exp r2.xyz, r3.xyzx
  endif 
  mad r2.xyz, r2.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r2.xyz, r2.xyzx, -cb2[9].zzzz
  dp3 r1.x, cb2[7].yzwy, -r1.xyzx
  mad r1.y, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r1.z, cb2[8].w, -r1.x, l(1.000000)
  mul r1.z, r1.z, r1.z
  mul r1.z, r1.z, l(12.566371)
  div r1.y, r1.y, r1.z
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.y
  mov_sat r1.x, r1.x
  mad r1.x, r1.x, r1.x, l(1.000000)
  mad r1.x, r1.x, l(0.05968310), l(-1.000000)
  mad r1.x, cb2[8].z, r1.x, l(1.000000)
  mul r1.yzw, r0.wwww, cb2[11].xxyz
  mad r1.xyz, r1.xxxx, cb2[10].xyzx, r1.yzwy
  mul r1.xyz, r1.xyzx, cb2[9].wwww
  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r1.xyz, r1.xyzx, r3.xyzx
  mad r1.xyz, r0.xyzx, r2.xyzx, r1.xyzx
else 
  mul r0.w, v5.z, cb2[6].x
  mad r1.w, cb2[6].x, v5.z, cb2[5].x
  lt r2.x, |r0.w|, l(0.000100)
  min r2.y, r1.w, l(64.000000)
  mul r2.y, r2.y, l(1.442695)
  exp r2.y, r2.y
  mov_sat r2.z, cb2[6].z
  lt r2.w, r1.w, l(0.000000)
  add r1.w, r1.w, l(1.000000)
  movc r1.w, r2.w, r2.y, r1.w
  add r1.w, r1.w, -cb2[6].z
  movc r0.w, r2.x, l(1.000000), r0.w
  div r0.w, r1.w, r0.w
  movc r0.w, r2.x, r2.z, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.w, v5.xyzx, v5.xyzx
  sqrt r2.x, r1.w
  mad r0.w, r0.w, r2.x, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, v5.xyzx
  dp3 r1.w, cb2[7].yzwy, r2.xyzx
  mad_sat r1.w, cb2[8].y, r1.w, cb2[8].x
  add r2.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r2.xyzw, r1.wwww, r2.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r2.w
  add r2.xyz, -r0.xyzx, r2.xyzx
  mad r1.xyz, r0.wwww, r2.xyzx, r0.xyzx
endif 
mul r0.xyz, r1.xyzx, cb1[85].yyyy
ge r1.xyz, r0.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r0.xyz, r0.xyzx, r1.xyzx
min o0.xyz, r0.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ret 
// Approximately 1877 instruction slots used
