//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:40:36 2021
//
//
// Buffer Definitions: 
//
// cbuffer GenericsCBuffer
// {
//
//   float4 scriptVector0;              // Offset:    0 Size:    16
//   float4 scriptVector1;              // Offset:   16 Size:    16
//   float4 scriptVector2;              // Offset:   32 Size:    16
//   float4 scriptVector3;              // Offset:   48 Size:    16
//   float4 scriptVector4;              // Offset:   64 Size:    16 [unused]
//   float4 scriptVector5;              // Offset:   80 Size:    16
//   float4 scriptVector6;              // Offset:   96 Size:    16 [unused]
//   float4 scriptVector7;              // Offset:  112 Size:    16 [unused]
//   float4 weaponParam0;               // Offset:  128 Size:    16 [unused]
//   float4 weaponParam1;               // Offset:  144 Size:    16 [unused]
//   float4 weaponParam2;               // Offset:  160 Size:    16 [unused]
//   float4 weaponParam3;               // Offset:  176 Size:    16 [unused]
//   float4 weaponParam4;               // Offset:  192 Size:    16 [unused]
//   float4 weaponParam5;               // Offset:  208 Size:    16 [unused]
//   float4 weaponParam6;               // Offset:  224 Size:    16 [unused]
//   float4 weaponParam7;               // Offset:  240 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// FontTextutre_Sampler              sampler      NA          NA             s1      1 
// FontTextutre                      texture  float4          2d             t0      1 
// GenericsCBuffer                   cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float      w
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[6], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.x, v2.xyxx, t0.wxyz, s1
add r0.xy, -r0.xxxx, l(1.000000, 0.500000, 0.000000, 0.000000)
div r0.y, r0.y, cb3[0].x
add_sat r0.y, -r0.y, l(1.000000)
ge r0.z, cb3[0].y, l(0.000000)
if_nz r0.z
  add r0.z, -cb3[0].y, l(1.000000)
  add r0.w, -r0.z, l(1.000000)
  mul r0.w, r0.w, l(0.250000)
  add r1.xyzw, v2.xyxy, l(0.010000, 0.010000, -0.010000, -0.010000)
  sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t0.wxyz, s1
  add r1.x, -r1.x, l(1.000000)
  mul r1.x, r0.w, r1.x
  mad r0.z, r0.x, r0.z, r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.x, r1.zwzz, t0.wxyz, s1
  add r1.x, -r1.x, l(1.000000)
  mad r0.z, r1.x, r0.w, r0.z
  add r1.xyzw, v2.xyxy, l(-0.010000, 0.010000, 0.010000, -0.010000)
  sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t0.wxyz, s1
  add r1.x, -r1.x, l(1.000000)
  mad r0.z, r1.x, r0.w, r0.z
  sample_indexable(texture2d)(float,float,float,float) r1.x, r1.zwzz, t0.wxyz, s1
  add r1.x, -r1.x, l(1.000000)
  mad r0.z, r1.x, r0.w, r0.z
  mad r0.z, -cb3[3].w, cb3[0].w, r0.z
  mad r0.w, -cb3[3].w, cb3[0].w, cb3[0].w
  max r0.w, r0.w, l(0.001000)
  div_sat r0.z, r0.z, r0.w
  add r0.z, -r0.z, l(1.000000)
  mul r1.w, r0.z, cb3[2].w
  ge r0.z, cb3[3].z, l(0.000000)
  mad r0.w, cb3[3].z, l(0.500000), l(0.500000)
  add r0.w, -r0.w, r0.x
  div_sat r0.w, r0.w, cb3[0].x
  add r0.w, -r0.w, l(1.000000)
  mov r1.xyz, cb3[2].xyzx
  add r2.xyzw, -r1.xyzw, cb3[5].xyzw
  mad r2.xyzw, r0.wwww, r2.xyzw, r1.xyzw
  movc r1.xyzw, r0.zzzz, r2.xyzw, r1.xyzw
  add r2.xyzw, -r1.xyzw, cb3[1].xyzw
  mad r1.xyzw, r0.yyyy, r2.wxyz, r1.wxyz
  mov o0.xyz, r1.yzwy
else 
  ge r0.z, cb3[3].z, l(0.000000)
  mad r0.w, cb3[3].z, l(0.500000), l(0.500000)
  add r0.x, -r0.w, r0.x
  div_sat r0.x, r0.x, cb3[0].x
  add r0.x, -r0.x, l(1.000000)
  mul r2.w, r0.x, cb3[5].w
  mov r2.xyz, cb3[5].xyzx
  add r3.xyzw, -r2.xyzw, cb3[1].xyzw
  mad r2.xyzw, r0.yyyy, r3.xyzw, r2.xyzw
  mul r3.w, r0.y, cb3[1].w
  mov r3.xyz, cb3[1].xyzx
  movc r1.xyzw, r0.zzzz, r2.wxyz, r3.wxyz
  mov o0.xyz, r1.yzwy
endif 
mul o0.w, r1.x, v1.w
ret 
// Approximately 59 instruction slots used
