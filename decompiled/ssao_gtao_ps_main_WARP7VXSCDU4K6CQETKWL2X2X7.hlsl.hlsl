// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:43:01 2021

cbuffer PostFxCBuffer : register(b8)
{
  float4 postFxControl0 : packoffset(c0);
  float4 postFxControl1 : packoffset(c1);
  float4 postFxControl2 : packoffset(c2);
  float4 postFxControl3 : packoffset(c3);
  float4 postFxControl4 : packoffset(c4);
  float4 postFxControl5 : packoffset(c5);
  float4 postFxControl6 : packoffset(c6);
  float4 postFxControl7 : packoffset(c7);
  float4 postFxControl8 : packoffset(c8);
  float4 postFxControl9 : packoffset(c9);
  float4 postFxControlA : packoffset(c10);
  float4 postFxControlB : packoffset(c11);
  float4 postFxControlC : packoffset(c12);
  float4 postFxControlD : packoffset(c13);
  float4 postFxControlE : packoffset(c14);
  float4 postFxControlF : packoffset(c15);
  float4 postFxConst00 : packoffset(c16);
  float4 postFxConst01 : packoffset(c17);
  float4 postFxConst02 : packoffset(c18);
  float4 postFxConst03 : packoffset(c19);
  float4 postFxConst04 : packoffset(c20);
  float4 postFxConst05 : packoffset(c21);
  float4 postFxConst06 : packoffset(c22);
  float4 postFxConst07 : packoffset(c23);
  float4 postFxConst08 : packoffset(c24);
  float4 postFxConst09 : packoffset(c25);
  float4 postFxConst10 : packoffset(c26);
  float4 postFxConst11 : packoffset(c27);
  float4 postFxConst12 : packoffset(c28);
  float4 postFxConst13 : packoffset(c29);
  float4 postFxConst14 : packoffset(c30);
  float4 postFxConst15 : packoffset(c31);
  float4 postFxConst16 : packoffset(c32);
  float4 postFxConst17 : packoffset(c33);
  float4 postFxConst18 : packoffset(c34);
  float4 postFxConst19 : packoffset(c35);
  float4 postFxConst20 : packoffset(c36);
  float4 postFxConst21 : packoffset(c37);
  float4 postFxConst22 : packoffset(c38);
  float4 postFxConst23 : packoffset(c39);
  float4 postFxConst24 : packoffset(c40);
  float4 postFxConst25 : packoffset(c41);
  float4 postFxConst26 : packoffset(c42);
  float4 postFxConst27 : packoffset(c43);
  float4 postFxConst28 : packoffset(c44);
  float4 postFxConst29 : packoffset(c45);
  float4 postFxConst30 : packoffset(c46);
  float4 postFxConst31 : packoffset(c47);
  float4 postFxConst32 : packoffset(c48);
  float4 postFxConst33 : packoffset(c49);
  float4 postFxConst34 : packoffset(c50);
  float4 postFxConst35 : packoffset(c51);
  float4 postFxConst36 : packoffset(c52);
  float4 postFxConst37 : packoffset(c53);
  float4 postFxConst38 : packoffset(c54);
  float4 postFxConst39 : packoffset(c55);
  float4 postFxConst40 : packoffset(c56);
  float4 postFxConst41 : packoffset(c57);
  float4 postFxConst42 : packoffset(c58);
  float4 postFxConst43 : packoffset(c59);
  float4 postFxConst44 : packoffset(c60);
  float4 postFxConst45 : packoffset(c61);
  float4 postFxConst46 : packoffset(c62);
  float4 postFxConst47 : packoffset(c63);
  float4 postFxConst48 : packoffset(c64);
  float4 postFxConst49 : packoffset(c65);
  float4 postFxConst50 : packoffset(c66);
  float4 postFxConst51 : packoffset(c67);
  float4 postFxConst52 : packoffset(c68);
  float4 postFxConst53 : packoffset(c69);
  float4 postFxConst54 : packoffset(c70);
  float4 postFxConst55 : packoffset(c71);
  float4 postFxConst56 : packoffset(c72);
  float4 postFxConst57 : packoffset(c73);
  float4 postFxConst58 : packoffset(c74);
  float4 postFxConst59 : packoffset(c75);
  float4 postFxConst60 : packoffset(c76);
  float4 postFxConst61 : packoffset(c77);
  float4 postFxConst62 : packoffset(c78);
  float4 postFxConst63 : packoffset(c79);
  float4 postFxBloom00 : packoffset(c80);
  float4 postFxBloom01 : packoffset(c81);
  float4 postFxBloom02 : packoffset(c82);
  float4 postFxBloom03 : packoffset(c83);
  float4 postFxBloom04 : packoffset(c84);
  float4 postFxBloom05 : packoffset(c85);
  float4 postFxBloom06 : packoffset(c86);
  float4 postFxBloom07 : packoffset(c87);
  float4 postFxBloom08 : packoffset(c88);
  float4 postFxBloom09 : packoffset(c89);
  float4 postFxBloom10 : packoffset(c90);
  float4 postFxBloom11 : packoffset(c91);
  float4 postFxBloom12 : packoffset(c92);
  float4 postFxBloom13 : packoffset(c93);
  float4 postFxBloom14 : packoffset(c94);
  float4 postFxBloom15 : packoffset(c95);
  float4 postFxBloom16 : packoffset(c96);
  float4 postFxBloom17 : packoffset(c97);
  float4 postFxBloom18 : packoffset(c98);
  float4 postFxBloom19 : packoffset(c99);
  float4 postFxBloom20 : packoffset(c100);
  float4 postFxBloom21 : packoffset(c101);
  float4 postFxBloom22 : packoffset(c102);
  float4 postFxBloom23 : packoffset(c103);
  float4 postFxBloom24 : packoffset(c104);
  float4 postFxBloom25 : packoffset(c105);
  float4 filterTap[8] : packoffset(c106);
  float4 postfxViewMatrix0 : packoffset(c114);
  float4 postfxViewMatrix1 : packoffset(c115);
  float4 postfxViewMatrix2 : packoffset(c116);
  float4 postfxViewMatrix3 : packoffset(c117);
  float4 postfxProjMatrix0 : packoffset(c118);
  float4 postfxProjMatrix1 : packoffset(c119);
  float4 postfxProjMatrix2 : packoffset(c120);
  float4 postfxProjMatrix3 : packoffset(c121);
  float4 postfxViewProjMatrix0 : packoffset(c122);
  float4 postfxViewProjMatrix1 : packoffset(c123);
  float4 postfxViewProjMatrix2 : packoffset(c124);
  float4 postfxViewProjMatrix3 : packoffset(c125);
}

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}

SamplerState pointSampler_s : register(s0);
Texture2D<float4> GBufferNormalAndGloss : register(t1);
Texture2D<float4> depthTex : register(t2);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0,0);
  r1.z = depthTex.Load(r0.xyz).x;
  r0.z = cmp(r1.z >= 65504);
  if (r0.z != 0) {
    o0.x = 1;
    return;
  }
  r2.xy = (uint2)r0.xy << int2(1,1);
  r2.zw = float2(0,0);
  r2.xyz = GBufferNormalAndGloss.Load(r2.xyz).xyw;
  r0.z = r2.z * 3 + 0.5;
  r0.z = (uint)r0.z;
  r2.xy = r2.xy * float2(2,2) + float2(-1,-1);
  r2.xy = float2(0.850000024,0.850000024) * r2.xy;
  r0.w = dot(r2.xy, r2.xy);
  r3.zw = float2(2,1) + -r0.ww;
  r0.w = sqrt(r3.z);
  r3.xy = r2.xy * r0.ww;
  r2.xyzw = (int4)r0.zzzz & int4(2,1,2,1);
  r2.xyzw = r2.zwxy ? float4(-1,-1,1.40129846e-45,1.40129846e-45) : float4(1,1,0,0);
  r0.z = (int)r2.w ^ (int)r2.z;
  r2.z = r0.z ? -1 : 1;
  r4.xyz = float3(-1,0,1) * r2.xyz;
  r5.xyz = float3(1,-2,1) * r2.xyz;
  r3.xyz = float3(0.408248305,0.707106769,0.577350259) * r3.xyw;
  r4.xyz = r4.xyz * r3.yyy;
  r3.xyw = r5.xyz * r3.xxx + r4.xyz;
  r2.xyz = r2.xyz * r3.zzz + r3.xyw;
  r3.xyz = viewMatrix._m10_m11_m12 * r2.yyy;
  r2.xyw = r2.xxx * viewMatrix._m00_m01_m02 + r3.xyz;
  r2.xyz = r2.zzz * viewMatrix._m20_m21_m22 + r2.xyw;
  bitmask.z = ((~(-1 << 2)) << 2) & 0xffffffff;  r0.z = (((uint)r0.y << 2) & bitmask.z) | ((uint)0 & ~bitmask.z);
  bitmask.w = ((~(-1 << 2)) << 2) & 0xffffffff;  r0.w = (((uint)r0.x << 2) & bitmask.w) | ((uint)0 & ~bitmask.w);
  r0.z = (int)r0.w + (int)r0.z;
  bitmask.z = ((~(-1 << 2)) << 0) & 0xffffffff;  r0.z = (((uint)r0.x << 0) & bitmask.z) | ((uint)r0.z & ~bitmask.z);
  r0.z = (int)r0.z & 15;
  r0.z = (uint)r0.z;
  r0.x = (int)-r0.y + (int)r0.x;
  r0.x = (int)r0.x & 3;
  r0.x = (uint)r0.x;
  r3.xy = float2(0.0625,0.25) * r0.zx;
  r0.xy = postFxControl0.zw + r3.xy;
  r0.y = frac(r0.y);
  r0.zw = renderTargetSize.zw * v0.xy;
  r3.xy = float2(100,100) * renderTargetSize.zw;
  r2.w = 100 / r1.z;
  r3.zw = postFxControl0.xy * r2.ww;
  r3.xy = min(r3.xy, r3.zw);
  r3.zw = viewSpaceScaleBias.xy * r0.zw + -viewSpaceScaleBias.zw;
  r1.xy = r3.zw * r1.zz;
  r2.w = dot(-r1.xyz, -r1.xyz);
  r2.w = rsqrt(r2.w);
  r4.xyz = r2.www * -r1.xyz;
  r2.w = 0.00249999994 * r1.z;
  r3.z = 1 + r2.z;
  r1.w = -r2.w * r3.z + r1.z;
  r0.xy = float2(3.14159989,0.5) * r0.xy;
  sincos(r0.x, r0.x, r5.x);
  r5.xz = r5.xx;
  r5.yw = r0.xx;
  r0.x = -1;
  r1.z = -200;
  r2.w = 0;
  while (true) {
    r3.z = cmp((int)r2.w >= 2);
    if (r3.z != 0) break;
    r3.z = (int)r2.w;
    r3.z = r3.z * 0.5 + r0.y;
    r3.z = r3.z * r3.z;
    r6.xy = r3.zz * r3.xy;
    r6.xy = r6.xy * r5.xy + r0.zw;
    r3.z = 5 * r3.z;
    r7.z = depthTex.SampleLevel(pointSampler_s, r6.xy, r3.z).x;
    r3.zw = viewSpaceScaleBias.xy * r6.xy + -viewSpaceScaleBias.zw;
    r7.xy = r7.zz * r3.zw;
    r6.xyz = r7.xyz + -r1.xyw;
    r3.z = dot(r6.xyz, r6.xyz);
    r3.w = rsqrt(r3.z);
    r4.w = dot(r6.xyz, r4.xyz);
    r6.w = r4.w * r3.w;
    r3.z = (uint)r3.z >> 1;
    r3.z = (int)r3.z + 0x1fbd1df5;
    r7.xy = saturate(r3.zz * float2(0.0333333351,0.00666666683) + float2(-0.333333343,-0.333333343));
    r3.z = saturate(r7.z * 0.00666666683 + -0.333333343);
    r7.y = r7.y + -r7.x;
    r3.z = r3.z * r7.y + r7.x;
    r3.z = -r3.z * 2 + r6.w;
    r6.x = dot(r6.xyz, r2.xyz);
    r6.y = cmp(r0.x < r3.z);
    r1.z = r6.y ? r6.x : r1.z;
    r3.z = max(r3.z, r0.x);
    r6.x = r1.z + -r6.x;
    r6.x = saturate(r6.x * 0.100000001 + -1);
    r6.x = min(0.135335281, r6.x);
    r3.w = r3.w * r4.w + -r3.z;
    r0.x = r6.x * r3.w + r3.z;
    r2.w = (int)r2.w + 1;
  }
  r1.z = -1;
  r2.w = -200;
  r3.z = 0;
  while (true) {
    r3.w = cmp((int)r3.z >= 2);
    if (r3.w != 0) break;
    r3.w = (int)r3.z;
    r3.w = r3.w * 0.5 + r0.y;
    r3.w = r3.w * r3.w;
    r5.xy = r3.ww * r3.xy;
    r5.xy = r5.xy * -r5.zw + r0.zw;
    r3.w = 5 * r3.w;
    r6.z = depthTex.SampleLevel(pointSampler_s, r5.xy, r3.w).x;
    r5.xy = viewSpaceScaleBias.xy * r5.xy + -viewSpaceScaleBias.zw;
    r6.xy = r6.zz * r5.xy;
    r6.xyw = r6.xyz + -r1.xyw;
    r3.w = dot(r6.xyw, r6.xyw);
    r4.w = rsqrt(r3.w);
    r5.x = dot(r6.xyw, r4.xyz);
    r5.y = r5.x * r4.w;
    r3.w = (uint)r3.w >> 1;
    r3.w = (int)r3.w + 0x1fbd1df5;
    r7.xy = saturate(r3.ww * float2(0.0333333351,0.00666666683) + float2(-0.333333343,-0.333333343));
    r3.w = saturate(r6.z * 0.00666666683 + -0.333333343);
    r6.z = r7.y + -r7.x;
    r3.w = r3.w * r6.z + r7.x;
    r3.w = -r3.w * 2 + r5.y;
    r5.y = dot(r6.xyw, r2.xyz);
    r6.x = cmp(r1.z < r3.w);
    r2.w = r6.x ? r5.y : r2.w;
    r3.w = max(r3.w, r1.z);
    r5.y = r2.w + -r5.y;
    r5.y = saturate(r5.y * 0.100000001 + -1);
    r5.y = min(0.135335281, r5.y);
    r4.w = r4.w * r5.x + -r3.w;
    r1.z = r5.y * r4.w + r3.w;
    r3.z = (int)r3.z + 1;
  }
  r0.yz = viewSpaceScaleBias.xy * r5.zw;
  r0.w = dot(r0.yz, r0.yz);
  r0.w = rsqrt(r0.w);
  r3.xy = r0.yz * r0.ww;
  r3.z = 0;
  r3.w = -r3.y;
  r0.yzw = r4.zxy * r3.xzw;
  r0.yzw = r4.yzx * r3.zwx + -r0.yzw;
  r1.xyw = r0.wyz * r4.yzx;
  r1.xyw = r0.zwy * r4.zxy + -r1.xyw;
  r2.w = dot(r2.xyz, r1.xyw);
  r1.xyw = -r1.xyw * r2.www + r2.xyz;
  r2.x = dot(r1.xyw, r1.xyw);
  r2.x = rsqrt(r2.x);
  r0.y = dot(r0.yzw, r1.xyw);
  r0.y = cmp(r0.y >= 0);
  r0.y = r0.y ? -1 : 1;
  r0.z = dot(r1.xyw, r4.xyz);
  r0.z = saturate(r2.x * r0.z);
  r0.w = r0.z * -0.156582996 + 1.57079995;
  r1.x = 1 + -r0.z;
  r1.x = (uint)r1.x >> 1;
  r1.x = (int)r1.x + 0x1fbd1df5;
  r0.w = r1.x * r0.w;
  r1.x = r0.y * r0.w;
  r1.y = abs(r0.x) * -0.156582996 + 1.57079995;
  r1.w = 1 + -abs(r0.x);
  r1.w = (uint)r1.w >> 1;
  r1.w = (int)r1.w + 0x1fbd1df5;
  r2.x = r1.y * r1.w;
  r0.x = cmp(r0.x >= 0);
  r1.y = -r1.y * r1.w + 3.14159989;
  r0.x = r0.x ? r2.x : r1.y;
  r1.y = abs(r1.z) * -0.156582996 + 1.57079995;
  r1.w = 1 + -abs(r1.z);
  r1.w = (uint)r1.w >> 1;
  r1.w = (int)r1.w + 0x1fbd1df5;
  r2.x = r1.y * r1.w;
  r1.z = cmp(r1.z >= 0);
  r1.y = -r1.y * r1.w + 3.14159989;
  r1.y = r1.z ? r2.x : r1.y;
  r0.x = -r0.y * r0.w + -r0.x;
  r0.x = max(-1.57079995, r0.x);
  r0.x = min(1.57079995, r0.x);
  r0.x = r0.y * r0.w + r0.x;
  r1.y = -r0.y * r0.w + r1.y;
  r1.y = max(-1.57079995, r1.y);
  r1.y = min(1.57079995, r1.y);
  r1.y = r0.y * r0.w + r1.y;
  r1.z = -r0.z * r0.z + 1;
  r1.z = (uint)r1.z >> 1;
  r1.z = (int)r1.z + 0x1fbd1df5;
  r1.z = r1.z * r0.y;
  r0.x = r0.x + r0.x;
  r1.w = r0.x * r1.z + r0.z;
  r0.x = -r0.y * r0.w + r0.x;
  r0.x = cos(r0.x);
  r0.x = r1.w + -r0.x;
  r1.y = r1.y + r1.y;
  r1.w = r1.y * r1.z + r0.z;
  r0.y = -r0.y * r0.w + r1.y;
  r0.y = cos(r0.y);
  r0.y = r1.w + -r0.y;
  r0.y = 0.25 * r0.y;
  r0.x = r0.x * 0.25 + r0.y;
  r0.y = r1.x * r1.z + r0.z;
  r0.x = r0.x / r0.y;
  r0.y = r0.x * 0.949999988 + -1.95000005;
  r0.y = r0.y * r0.x + 2;
  r0.y = r0.y * r0.x;
  o0.x = max(r0.x, r0.y);
  return;
}