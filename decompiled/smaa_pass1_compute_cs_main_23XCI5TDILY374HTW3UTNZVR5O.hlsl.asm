//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:40:46 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16 [unused]
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16 [unused]
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// Resource bind info for morphologicalWorkQueueRWBufferH
// {
//
//   uint3 $Element;                    // Offset:    0 Size:    12
//
// }
//
// Resource bind info for morphologicalWorkQueueRWBufferV
// {
//
//   uint3 $Element;                    // Offset:    0 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// bilinearSampler                   sampler      NA          NA             s0      1 
// lumaTex                           texture  float4          2d             t1      1 
// colorTex                          texture  float4          2d             t2      1 
// edgesRWTex                            UAV  float2          2d             u1      1 
// morphologicalWorkQueueRWBufferH        UAV  struct     r/w+cnt             u4      1 
// morphologicalWorkQueueRWBufferV        UAV  struct     r/w+cnt             u5      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[45], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_uav_typed_texture2d (float,float,float,float) u1
dcl_uav_structured_opc u4, 12
dcl_uav_structured_opc u5, 12
dcl_input vThreadIDInGroup.xy
dcl_input vThreadID.xy
dcl_temps 11
dcl_tgsm_structured g0, 48, 12
dcl_thread_group 8, 8, 1
ishl r0.xyz, vThreadIDInGroup.xyyx, l(1, 1, 2, 0)
umax r0.w, r0.y, r0.x
ult r0.w, r0.w, l(12)
if_nz r0.w
  iadd r1.xy, vThreadIDInGroup.xyxx, vThreadID.xyxx
  iadd r1.xy, r1.xyxx, l(-1, -1, 0, 0)
  utof r1.xy, r1.xyxx
  mul r1.xy, r1.xyxx, cb1[44].zwzz
  gather4_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t1.xyzw, s0.x
  ishl r0.y, r0.y, l(2)
  store_structured g0.x, r0.x, r0.y, r1.w
  imad r0.w, vThreadIDInGroup.x, l(2), l(1)
  store_structured g0.x, r0.w, r0.y, r1.z
  iadd r1.z, r0.y, l(4)
  store_structured g0.x, r0.x, r1.z, r1.x
  store_structured g0.x, r0.w, r1.z, r1.y
endif 
sync_g_t
store_uav_typed u1.xyzw, vThreadID.xyyy, l(0,0,0,0)
iadd r0.xyw, vThreadIDInGroup.xyxx, l(2, 2, 0, 1)
iadd r1.x, r0.z, l(8)
ld_structured r1.y, r0.x, r1.x, g0.xxxx
ishl r0.y, r0.y, l(2)
iadd r1.z, r0.y, l(-4)
ld_structured r1.w, r0.x, r1.z, g0.xxxx
ld_structured r2.x, r0.w, r1.x, g0.xxxx
add r2.y, r1.y, -r2.x
mov r3.xzw, |r2.yyyy|
add r2.y, -r1.w, r1.y
mov r3.y, |r2.y|
ge r4.xyzw, r3.wyww, l(0.100000, 0.100000, 0.100000, 0.100000)
and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
max r2.y, r4.y, r4.w
ne r2.y, l(0.000000, 0.000000, 0.000000, 0.000000), r2.y
if_nz r2.y
  itof r5.xyzw, vThreadID.xyxx
  add r5.xyzw, r5.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
  mul r5.xyzw, r5.xyzw, cb1[44].zwzz
  iadd r0.yz, r0.yyzy, l(0, -8, 12, 0)
  ld_structured r2.y, r0.x, r0.z, g0.xxxx
  iadd r2.z, vThreadIDInGroup.x, l(3)
  ld_structured r6.xy, r2.z, r1.x, g0.xyxx
  add r2.w, r1.y, -r6.x
  mov r7.y, |r2.w|
  add r2.w, r1.y, -r2.y
  mov r7.xzw, |r2.wwww|
  ld_structured r2.w, r0.w, r1.z, g0.xxxx
  ld_structured r0.z, r0.w, r0.z, g0.xxxx
  ld_structured r6.z, r2.z, r1.z, g0.xxxx
  ld_structured r0.x, r0.x, r0.y, g0.xxxx
  ld_structured r8.xy, vThreadIDInGroup.x, r1.x, g0.xyxx
  add r1.x, r2.x, -r8.x
  mov r9.xzw, |r1.xxxx|
  add r1.x, -r0.x, r1.w
  mov r9.y, |r1.x|
  max r9.xyzw, r7.ywyy, r9.xyzw
  mul r10.xyzw, r3.wyww, l(1.500000, 1.500000, 1.500000, 1.500000)
  ge r9.xyzw, r10.xyzw, r9.xyzw
  and r9.xyzw, r9.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  mul r4.xyzw, r4.xyzw, r9.xyzw
  max r7.xyzw, r3.ywyy, r7.xyzw
  add r1.x, -r2.w, r2.x
  mov r9.xzw, |r1.xxxx|
  add r1.x, -r0.z, r2.x
  mov r10.xzw, |r1.xxxx|
  add r1.x, r1.w, -r2.w
  mov r9.y, |r1.x|
  add r1.x, r1.w, -r6.z
  mov r10.y, |r1.x|
  max r9.xyzw, r9.xyzw, r10.xyzw
  max r7.xyzw, r7.xyzw, r9.xyzw
  add r3.xyzw, r3.xyzw, r3.xyzw
  ge r3.xyzw, r3.xyzw, r7.xyzw
  and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  mul r3.xyzw, r3.xyzw, r4.xyzw
  ge r4.xyzw, r5.xyzw, cb1[44].zwzz
  and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
  mul r3.xyzw, r3.xyzw, r4.xyzw
  mad r1.x, r1.w, l(2.000000), r2.w
  add r1.x, r6.z, r1.x
  mad r1.x, r1.y, l(4.000000), -r1.x
  mad r2.w, r2.x, l(2.000000), r2.w
  add r2.w, r0.z, r2.w
  mad r2.w, r1.y, l(4.000000), -r2.w
  mad r0.z, r2.y, l(2.000000), r0.z
  add r0.z, r6.y, r0.z
  mad r0.z, r1.y, l(4.000000), -r0.z
  mad r2.y, r6.x, l(2.000000), r6.z
  add r2.y, r6.y, r2.y
  mad r1.y, r1.y, l(4.000000), -r2.y
  ld_structured r0.w, r0.w, r0.y, g0.xxxx
  ld_structured r0.y, r2.z, r0.y, g0.xxxx
  ld_structured r1.z, vThreadIDInGroup.x, r1.z, g0.xxxx
  mad r0.x, r0.x, l(2.000000), r0.w
  add r0.x, r0.y, r0.x
  mad r0.x, r1.w, l(4.000000), -r0.x
  mov r0.y, |r0.x|
  mad r0.w, r8.x, l(2.000000), r1.z
  add r0.w, r8.y, r0.w
  mad r0.w, r2.x, l(4.000000), -r0.w
  mov r0.x, |r0.w|
  max r0.z, |r0.z|, |r1.x|
  max r0.w, |r1.y|, |r2.w|
  max r0.w, r0.w, r0.z
  max r0.xw, r0.xxxy, r0.wwww
  max r0.y, r0.y, r0.z
  eq r0.yz, |r1.xxxx|, r0.yywy
  and r0.yz, r0.yyzy, l(0, 32, 2, 0)
  eq r0.x, |r2.w|, r0.x
  movc r0.x, r0.x, l(8), r0.z
  iadd r0.y, r0.y, r0.x
  itof r0.y, r0.y
  store_uav_typed u1.xyzw, vThreadID.xyyy, r3.xyzw
  mov r1.xy, vThreadID.xyxx
  mov r1.zw, l(0,0,0,0)
  ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t2.xyzw
  and r2.xyz, r1.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
  ine r2.xyz, r2.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
  ftou r0.z, r0.y
  ishl r0.z, r0.z, l(24)
  ishl r0.w, vThreadID.y, l(12)
  or r0.z, r0.w, r0.z
  or r3.x, r0.z, vThreadID.x
  f32tof16 r1.xyz, r1.xyzx
  movc r1.xyz, r2.xyzx, r1.xyzx, l(0x00007bff,0x00007bff,0x00007bff,0)
  ubfe r0.z, l(11), l(4), r1.x
  ishl r1.xy, r1.yzyy, l(7, 17, 0, 0)
  and r0.w, r1.x, l(0x003ff800)
  iadd r0.z, r0.w, r0.z
  bfi r3.y, l(22), l(0), r0.z, r1.y
  add r0.y, r0.y, l(0.500000)
  ftoi r0.y, r0.y
  and r0.yz, r0.yyyy, l(0, 8, 34, 0)
  if_nz r0.y
    ubfe r0.y, l(1), l(1), r0.x
    ishr r0.x, r0.x, l(3)
    ineg r1.xy, r0.xyxx
    iadd r1.xy, r1.xyxx, vThreadID.xyxx
    mov r1.zw, l(0,0,0,0)
    ld_indexable(texture2d)(float,float,float,float) r0.xyw, r1.xyzw, t2.xywz
    and r1.xyz, r0.xywx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    ine r1.xyz, r1.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    f32tof16 r0.xyw, r0.xyxw
    movc r0.xyw, r1.xyxz, r0.xyxw, l(0x00007bff,0x00007bff,0,0x00007bff)
    ubfe r0.x, l(11), l(4), r0.x
    ishl r0.yw, r0.yyyw, l(0, 7, 0, 17)
    and r0.y, r0.y, l(0x003ff800)
    iadd r0.x, r0.y, r0.x
    bfi r3.z, l(22), l(0), r0.x, r0.w
    imm_atomic_alloc r1.x, u5
    store_structured u5.xyz, r1.x, l(0), r3.xyzx
  endif 
  if_nz r0.z
    iadd r0.xy, vThreadID.xyxx, l(0, -1, 0, 0)
    mov r0.zw, l(0,0,0,0)
    ld_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyzw, t2.xyzw
    and r1.xyz, r0.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    ine r1.xyz, r1.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    f32tof16 r0.xyz, r0.xyzx
    movc r0.xyz, r1.xyzx, r0.xyzx, l(0x00007bff,0x00007bff,0x00007bff,0)
    ubfe r0.x, l(11), l(4), r0.x
    ishl r0.yz, r0.yyzy, l(0, 7, 17, 0)
    and r0.y, r0.y, l(0x003ff800)
    iadd r0.x, r0.y, r0.x
    bfi r3.w, l(22), l(0), r0.x, r0.z
    imm_atomic_alloc r0.x, u4
    store_structured u4.xyz, r0.x, l(0), r3.xywx
  endif 
endif 
ret 
// Approximately 170 instruction slots used
