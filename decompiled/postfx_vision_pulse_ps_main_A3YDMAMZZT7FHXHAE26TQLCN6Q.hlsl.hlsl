// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:40:26 2021

cbuffer _Globals : register(b0)
{
  float4 flagParams : packoffset(c0);
  float4 colorObjMin : packoffset(c1);
  float4 colorObjMax : packoffset(c2);
  float colorObjMinBaseBlend : packoffset(c3);
  float colorObjMaxBaseBlend : packoffset(c3.y);
  float2 uvScroll : packoffset(c3.z);
  float4 detailScale : packoffset(c4);
  float4 detailScale1 : packoffset(c5);
  float4 detailScale2 : packoffset(c6);
  float4 detailScale3 : packoffset(c7);
  float4 alphaRevealParms : packoffset(c8);
  float4 colorDetailScale : packoffset(c9);
  float alphaRevealSoftEdge : packoffset(c10);
  float alphaRevealRamp : packoffset(c10.y);
  float pulseWidth : packoffset(c10.z);
  float3 pulseColor : packoffset(c11);
  float glowBoost : packoffset(c11.w);
  float2 pulseScroll : packoffset(c12);
  float2 pulseTiling : packoffset(c12.z);
  float2 viewPulseScroll : packoffset(c13);
  float viewOutlineWidth : packoffset(c13.z);
  float viewOutlineBold : packoffset(c13.w);
  float2 gridScale : packoffset(c14);
  float2 gridScroll : packoffset(c14.z);
}

cbuffer PostFxCBuffer : register(b8)
{
  float4 postFxControl0 : packoffset(c0);
  float4 postFxControl1 : packoffset(c1);
  float4 postFxControl2 : packoffset(c2);
  float4 postFxControl3 : packoffset(c3);
  float4 postFxControl4 : packoffset(c4);
  float4 postFxControl5 : packoffset(c5);
  float4 postFxControl6 : packoffset(c6);
  float4 postFxControl7 : packoffset(c7);
  float4 postFxControl8 : packoffset(c8);
  float4 postFxControl9 : packoffset(c9);
  float4 postFxControlA : packoffset(c10);
  float4 postFxControlB : packoffset(c11);
  float4 postFxControlC : packoffset(c12);
  float4 postFxControlD : packoffset(c13);
  float4 postFxControlE : packoffset(c14);
  float4 postFxControlF : packoffset(c15);
  float4 postFxConst00 : packoffset(c16);
  float4 postFxConst01 : packoffset(c17);
  float4 postFxConst02 : packoffset(c18);
  float4 postFxConst03 : packoffset(c19);
  float4 postFxConst04 : packoffset(c20);
  float4 postFxConst05 : packoffset(c21);
  float4 postFxConst06 : packoffset(c22);
  float4 postFxConst07 : packoffset(c23);
  float4 postFxConst08 : packoffset(c24);
  float4 postFxConst09 : packoffset(c25);
  float4 postFxConst10 : packoffset(c26);
  float4 postFxConst11 : packoffset(c27);
  float4 postFxConst12 : packoffset(c28);
  float4 postFxConst13 : packoffset(c29);
  float4 postFxConst14 : packoffset(c30);
  float4 postFxConst15 : packoffset(c31);
  float4 postFxConst16 : packoffset(c32);
  float4 postFxConst17 : packoffset(c33);
  float4 postFxConst18 : packoffset(c34);
  float4 postFxConst19 : packoffset(c35);
  float4 postFxConst20 : packoffset(c36);
  float4 postFxConst21 : packoffset(c37);
  float4 postFxConst22 : packoffset(c38);
  float4 postFxConst23 : packoffset(c39);
  float4 postFxConst24 : packoffset(c40);
  float4 postFxConst25 : packoffset(c41);
  float4 postFxConst26 : packoffset(c42);
  float4 postFxConst27 : packoffset(c43);
  float4 postFxConst28 : packoffset(c44);
  float4 postFxConst29 : packoffset(c45);
  float4 postFxConst30 : packoffset(c46);
  float4 postFxConst31 : packoffset(c47);
  float4 postFxConst32 : packoffset(c48);
  float4 postFxConst33 : packoffset(c49);
  float4 postFxConst34 : packoffset(c50);
  float4 postFxConst35 : packoffset(c51);
  float4 postFxConst36 : packoffset(c52);
  float4 postFxConst37 : packoffset(c53);
  float4 postFxConst38 : packoffset(c54);
  float4 postFxConst39 : packoffset(c55);
  float4 postFxConst40 : packoffset(c56);
  float4 postFxConst41 : packoffset(c57);
  float4 postFxConst42 : packoffset(c58);
  float4 postFxConst43 : packoffset(c59);
  float4 postFxConst44 : packoffset(c60);
  float4 postFxConst45 : packoffset(c61);
  float4 postFxConst46 : packoffset(c62);
  float4 postFxConst47 : packoffset(c63);
  float4 postFxConst48 : packoffset(c64);
  float4 postFxConst49 : packoffset(c65);
  float4 postFxConst50 : packoffset(c66);
  float4 postFxConst51 : packoffset(c67);
  float4 postFxConst52 : packoffset(c68);
  float4 postFxConst53 : packoffset(c69);
  float4 postFxConst54 : packoffset(c70);
  float4 postFxConst55 : packoffset(c71);
  float4 postFxConst56 : packoffset(c72);
  float4 postFxConst57 : packoffset(c73);
  float4 postFxConst58 : packoffset(c74);
  float4 postFxConst59 : packoffset(c75);
  float4 postFxConst60 : packoffset(c76);
  float4 postFxConst61 : packoffset(c77);
  float4 postFxConst62 : packoffset(c78);
  float4 postFxConst63 : packoffset(c79);
  float4 postFxBloom00 : packoffset(c80);
  float4 postFxBloom01 : packoffset(c81);
  float4 postFxBloom02 : packoffset(c82);
  float4 postFxBloom03 : packoffset(c83);
  float4 postFxBloom04 : packoffset(c84);
  float4 postFxBloom05 : packoffset(c85);
  float4 postFxBloom06 : packoffset(c86);
  float4 postFxBloom07 : packoffset(c87);
  float4 postFxBloom08 : packoffset(c88);
  float4 postFxBloom09 : packoffset(c89);
  float4 postFxBloom10 : packoffset(c90);
  float4 postFxBloom11 : packoffset(c91);
  float4 postFxBloom12 : packoffset(c92);
  float4 postFxBloom13 : packoffset(c93);
  float4 postFxBloom14 : packoffset(c94);
  float4 postFxBloom15 : packoffset(c95);
  float4 postFxBloom16 : packoffset(c96);
  float4 postFxBloom17 : packoffset(c97);
  float4 postFxBloom18 : packoffset(c98);
  float4 postFxBloom19 : packoffset(c99);
  float4 postFxBloom20 : packoffset(c100);
  float4 postFxBloom21 : packoffset(c101);
  float4 postFxBloom22 : packoffset(c102);
  float4 postFxBloom23 : packoffset(c103);
  float4 postFxBloom24 : packoffset(c104);
  float4 postFxBloom25 : packoffset(c105);
  float4 filterTap[8] : packoffset(c106);
  float4 postfxViewMatrix0 : packoffset(c114);
  float4 postfxViewMatrix1 : packoffset(c115);
  float4 postfxViewMatrix2 : packoffset(c116);
  float4 postfxViewMatrix3 : packoffset(c117);
  float4 postfxProjMatrix0 : packoffset(c118);
  float4 postfxProjMatrix1 : packoffset(c119);
  float4 postfxProjMatrix2 : packoffset(c120);
  float4 postfxProjMatrix3 : packoffset(c121);
  float4 postfxViewProjMatrix0 : packoffset(c122);
  float4 postfxViewProjMatrix1 : packoffset(c123);
  float4 postfxViewProjMatrix2 : packoffset(c124);
  float4 postfxViewProjMatrix3 : packoffset(c125);
}

cbuffer GenericsCBuffer : register(b3)
{
  float4 scriptVector0 : packoffset(c0);
  float4 scriptVector1 : packoffset(c1);
  float4 scriptVector2 : packoffset(c2);
  float4 scriptVector3 : packoffset(c3);
  float4 scriptVector4 : packoffset(c4);
  float4 scriptVector5 : packoffset(c5);
  float4 scriptVector6 : packoffset(c6);
  float4 scriptVector7 : packoffset(c7);
  float4 weaponParam0 : packoffset(c8);
  float4 weaponParam1 : packoffset(c9);
  float4 weaponParam2 : packoffset(c10);
  float4 weaponParam3 : packoffset(c11);
  float4 weaponParam4 : packoffset(c12);
  float4 weaponParam5 : packoffset(c13);
  float4 weaponParam6 : packoffset(c14);
  float4 weaponParam7 : packoffset(c15);
}

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}

SamplerState trilinearSampler_s : register(s1);
Texture2D<float4> frameBuffer : register(t0);
Texture2D<float4> floatzTexture : register(t6);
Texture2D<float4> sonarDepthTexture : register(t7);
Texture2D<float4> sonarColorTexture : register(t9);
Texture2D<float4> pulseTexture : register(t10);
Texture2D<float4> irisTexture : register(t11);
Texture2D<float4> gridTexture : register(t12);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = frameBuffer.Sample(trilinearSampler_s, v1.xy).xyzw;
  r1.x = floatzTexture.Sample(trilinearSampler_s, v1.xy).x;
  r1.y = cmp(r1.x >= 0.984375);
  r1.z = 1.01587307 * r1.x;
  r1.w = r1.x * 64 + -63;
  r1.z = r1.y ? r1.w : r1.z;
  r1.z = max(9.99999994e-09, r1.z);
  r1.z = rcp(r1.z);
  r2.x = max(0.00100000005, scriptVector2.w);
  r1.z = r1.z / r2.x;
  r1.z = min(1, r1.z);
  r2.y = dot(r0.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.x = frac(r2.y);
  r3.yzw = r0.yzw;
  r0.w = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.y = frac(r0.w);
  r0.w = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r3.z = frac(r0.w);
  r0.w = dot(r3.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r4.w = frac(r0.w);
  r4.xyz = r3.xyz;
  r0.w = dot(r4.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r4.x = frac(r0.w);
  r0.w = dot(r4.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r0.w = frac(r0.w);
  r2.yz = float2(0.129999995,-0.699999988) * gameTime.ww;
  r2.y = cos(r2.y);
  r2.y = r2.y * 0.5 + 0.5;
  r0.w = r2.y * r0.w;
  r2.y = sin(r2.z);
  r2.y = r2.y * 0.5 + 0.5;
  r2.y = r4.x * r2.y;
  r2.z = 402.123871 * v1.x;
  r2.z = cos(r2.z);
  r2.z = r2.z * 0.5 + 0.5;
  r3.x = r2.z * r0.w;
  r0.w = 402.123871 * r1.z;
  r0.w = cos(r0.w);
  r0.w = r0.w * 0.5 + 0.5;
  r3.y = r0.w * r2.y;
  r4.xyzw = pulseTiling.xyxy * v1.xyxy;
  r2.yz = gameTime.ww * pulseScroll.xy;
  r5.xy = v1.xy * pulseTiling.xy + r2.yz;
  r0.w = pulseTexture.Sample(trilinearSampler_s, r5.xy).x;
  r4.xy = float2(0.469999999,0.469999999) * r4.xy;
  r4.xy = r2.yz * float2(-1.37,1.73000002) + r4.xy;
  r4.xy = r3.xy * float2(0.0900000036,0.0900000036) + r4.xy;
  r2.w = pulseTexture.Sample(trilinearSampler_s, r4.xy).x;
  r2.yz = r4.zw * float2(0.109999999,0.109999999) + -r2.yz;
  r2.yz = -r3.xy * float2(0.129999995,0.129999995) + r2.yz;
  r2.y = gridTexture.Sample(trilinearSampler_s, r2.yz).x;
  r2.y = 0.0700000003 * r2.y;
  r0.w = r0.w * r2.w + r2.y;
  r0.w = saturate(4 * r0.w);
  r4.xy = renderTargetSize.zw * viewOutlineWidth;
  r1.x = cmp(r1.x < 0.984375);
  r5.x = -r4.y;
  r5.z = 0;
  r2.yz = v1.xy + r5.zx;
  r2.w = sonarDepthTexture.Sample(trilinearSampler_s, r2.yz).x;
  r4.z = 0;
  r5.xyzw = v1.xyxy + r4.zyxz;
  r3.y = sonarDepthTexture.Sample(trilinearSampler_s, r5.xy).x;
  r4.w = -r4.x;
  r4.xy = v1.xy + r4.wz;
  r3.z = sonarDepthTexture.Sample(trilinearSampler_s, r4.xy).x;
  r4.z = sonarDepthTexture.Sample(trilinearSampler_s, r5.zw).x;
  r6.xy = gameTime.ww * gridScroll.xy;
  r6.xy = v1.xy * gridScale.xy + r6.xy;
  r4.w = gridTexture.Sample(trilinearSampler_s, r6.xy).x;
  if (r1.x != 0) {
    r1.x = saturate(scriptVector0.x / r2.x);
    r2.x = scriptVector0.y * pulseWidth;
    r6.x = saturate(-pulseWidth * scriptVector0.y + r1.x);
    r6.y = -r6.x + r1.x;
    r6.x = -r6.x + r1.z;
    r6.y = 1 / r6.y;
    r6.x = saturate(r6.x * r6.y);
    r6.y = r6.x * -2 + 3;
    r6.x = r6.x * r6.x;
    r6.x = r6.y * r6.x;
    r6.y = cmp(r1.z >= r1.x);
    r1.x = saturate(r2.x * scriptVector1.z + r1.x);
    r1.x = cmp(r1.z >= r1.x);
    r1.z = r6.y ? 1.000000 : 0;
    r1.x = r1.x ? 0 : r1.z;
    r1.z = r3.x * 0.200000003 + 0.800000012;
    r2.x = sonarDepthTexture.Sample(trilinearSampler_s, v1.xy).x;
    r3.x = cmp(r2.x >= 0.984375);
    r6.z = 1.01587307 * r2.x;
    r2.x = r2.x * 64 + -63;
    r2.x = r3.x ? r2.x : r6.z;
    r2.x = max(9.99999994e-09, r2.x);
    r2.x = rcp(r2.x);
    r3.x = cmp(r2.x < scriptVector0.x);
    r6.z = cmp(scriptVector0.x >= scriptVector2.w);
    r6.w = scriptVector2.w + scriptVector2.w;
    r6.w = cmp(r2.x < r6.w);
    r3.x = (int)r3.x | (int)r6.z;
    r3.x = r3.x ? r6.w : 0;
    if (r3.x != 0) {
      r3.x = cmp(r2.w >= 0.984375);
      r6.z = 1.01587307 * r2.w;
      r2.w = r2.w * 64 + -63;
      r2.w = r3.x ? r2.w : r6.z;
      r2.w = max(9.99999994e-09, r2.w);
      r7.x = rcp(r2.w);
      r2.w = cmp(r3.y >= 0.984375);
      r3.x = 1.01587307 * r3.y;
      r3.y = r3.y * 64 + -63;
      r2.w = r2.w ? r3.y : r3.x;
      r2.w = max(9.99999994e-09, r2.w);
      r7.y = rcp(r2.w);
      r2.w = cmp(r3.z >= 0.984375);
      r3.x = 1.01587307 * r3.z;
      r3.y = r3.z * 64 + -63;
      r2.w = r2.w ? r3.y : r3.x;
      r2.w = max(9.99999994e-09, r2.w);
      r7.z = rcp(r2.w);
      r2.w = cmp(r4.z >= 0.984375);
      r3.x = 1.01587307 * r4.z;
      r3.y = r4.z * 64 + -63;
      r2.w = r2.w ? r3.y : r3.x;
      r2.w = max(9.99999994e-09, r2.w);
      r7.w = rcp(r2.w);
      r7.xyzw = -r7.xyzw + r2.xxxx;
      r7.xyzw = cmp(abs(r7.xyzw) >= viewOutlineBold);
      r7.xyzw = r7.xyzw ? float4(1,1,1,1) : 0;
      r2.x = dot(r7.xyzw, float4(1,1,1,1));
      r2.w = dot(r4.ww, scriptVector1.xx);
      r2.x = r2.x + r2.w;
      r2.x = glowBoost * r2.x;
      r2.w = sonarColorTexture.Sample(trilinearSampler_s, v1.xy).x;
      r3.z = r2.x * r2.w;
    } else {
      r3.z = 0;
    }
    r2.x = r6.x * r0.w;
    r2.x = r6.y ? 0 : r2.x;
    r1.x = dot(r1.xx, r1.zz);
    r1.x = r2.x + r1.x;
    r1.z = cmp(scriptVector2.w >= scriptVector0.x);
    r1.z = r1.z ? 1.000000 : 0;
    r1.x = r1.x * r1.z;
    r3.x = glowBoost * r1.x;
    r3.y = 0;
  } else {
    r6.x = rcp(postfxProjMatrix0.x);
    r6.y = rcp(postfxProjMatrix1.y);
    r1.x = max(9.99999994e-09, r1.w);
    r1.x = rcp(r1.x);
    r2.xw = -subpixelOffset.xy + v0.xy;
    r2.xw = renderTargetSize.zw * r2.xw;
    r2.xw = r2.xw * float2(2,-2) + float2(-1,1);
    r6.xy = r2.xw * r6.xy;
    r6.z = 1;
    r7.xyz = eyeOffset.yyy * postfxViewProjMatrix1.xyz;
    r7.xyz = eyeOffset.xxx * postfxViewProjMatrix0.xyz + r7.xyz;
    r7.xyz = eyeOffset.zzz * postfxViewProjMatrix2.xyz + r7.xyz;
    r7.xyz = postfxViewProjMatrix3.xyz + r7.xyz;
    r8.xyz = scriptVector2.yyy * postfxViewProjMatrix1.xyz;
    r8.xyz = scriptVector2.xxx * postfxViewProjMatrix0.xyz + r8.xyz;
    r8.xyz = eyeOffset.zzz * postfxViewProjMatrix2.xyz + r8.xyz;
    r7.xyz = r8.xyz + r7.xyz;
    r6.xyz = -r6.xyz * r1.xxx + r7.xyz;
    r1.x = dot(r6.xyz, r6.xyz);
    r1.x = sqrt(r1.x);
    r1.z = max(9.99999975e-05, scriptVector2.w);
    r1.x = r1.x / r1.z;
    r1.x = min(1, r1.x);
    r1.z = saturate(scriptVector2.z / r1.z);
    r2.x = scriptVector1.y * pulseWidth;
    r2.w = saturate(-pulseWidth * scriptVector1.y + r1.z);
    r4.z = -r2.w + r1.z;
    r2.w = -r2.w + r1.x;
    r4.z = 1 / r4.z;
    r2.w = saturate(r4.z * r2.w);
    r4.z = r2.w * -2 + 3;
    r2.w = r2.w * r2.w;
    r2.w = r4.z * r2.w;
    r4.z = cmp(r1.x >= r1.z);
    r1.z = saturate(r2.x * scriptVector1.z + r1.z);
    r1.x = cmp(r1.x >= r1.z);
    r1.z = r4.z ? 1.000000 : 0;
    r1.x = r1.x ? 0 : r1.z;
    r0.w = r2.w * r0.w;
    r0.w = r4.z ? 0 : r0.w;
    r3.y = r1.x * 2 + r0.w;
    r3.xz = float2(0,0);
  }
  r0.w = cmp(0 < scriptVector1.w);
  r0.w = r0.w ? r1.y : 0;
  r1.x = floatzTexture.Sample(trilinearSampler_s, r2.yz).x;
  r1.y = floatzTexture.Sample(trilinearSampler_s, r5.xy).x;
  r1.z = floatzTexture.Sample(trilinearSampler_s, r4.xy).x;
  r2.x = floatzTexture.Sample(trilinearSampler_s, r5.zw).x;
  r2.yz = float2(-0.5,-0.5) + v1.xy;
  r2.yz = pulseTiling.xy * r2.yz;
  r4.xy = gameTime.ww * viewPulseScroll.xy;
  r2.w = viewPulseScroll.y * gameTime.w + 1;
  r2.w = viewPulseScroll.x * r2.w;
  r2.yzw = float3(0.5,0.5,0.0174532924) * r2.yzw;
  sincos(r2.w, r5.x, r6.x);
  r6.y = r6.x;
  r6.z = r5.x;
  r7.x = dot(r6.yz, r2.yz);
  r6.x = -r5.x;
  r7.y = dot(r6.xy, r2.yz);
  r2.y = pulseTexture.Sample(trilinearSampler_s, r7.xy).x;
  r2.zw = r4.xy * float2(0.0769230798,0.0769230798) + v1.xy;
  r2.z = pulseTexture.Sample(trilinearSampler_s, r2.zw).x;
  if (r0.w != 0) {
    r0.w = cmp(r1.x >= 0.984375);
    r2.w = 1.01587307 * r1.x;
    r1.x = r1.x * 64 + -63;
    r0.w = r0.w ? r1.x : r2.w;
    r0.w = max(9.99999994e-09, r0.w);
    r5.x = rcp(r0.w);
    r0.w = cmp(r1.y >= 0.984375);
    r1.x = 1.01587307 * r1.y;
    r1.y = r1.y * 64 + -63;
    r0.w = r0.w ? r1.y : r1.x;
    r0.w = max(9.99999994e-09, r0.w);
    r5.y = rcp(r0.w);
    r0.w = cmp(r1.z >= 0.984375);
    r1.x = 1.01587307 * r1.z;
    r1.y = r1.z * 64 + -63;
    r0.w = r0.w ? r1.y : r1.x;
    r0.w = max(9.99999994e-09, r0.w);
    r5.z = rcp(r0.w);
    r0.w = cmp(r2.x >= 0.984375);
    r1.x = 1.01587307 * r2.x;
    r1.y = r2.x * 64 + -63;
    r0.w = r0.w ? r1.y : r1.x;
    r0.w = max(9.99999994e-09, r0.w);
    r5.w = rcp(r0.w);
    r0.w = max(9.99999994e-09, r1.w);
    r0.w = rcp(r0.w);
    r1.xyzw = r0.wwww + -r5.xyzw;
    r1.xyzw = cmp(abs(r1.xyzw) >= viewOutlineBold);
    r1.xyzw = r1.xyzw ? float4(1,1,1,1) : 0;
    r0.w = dot(r1.xyzw, float4(1,1,1,1));
    r1.x = r2.y * 0.25 + r4.w;
    r1.x = r2.z * 0.5 + r1.x;
    r1.x = 0.25 * r1.x;
    r1.y = saturate(scriptVector1.w);
    r1.x = r1.x * r1.y;
    r0.w = r0.w * 0.5 + r1.x;
  } else {
    r0.w = 0;
  }
  r1.x = irisTexture.Sample(trilinearSampler_s, v1.xy).x;
  r1.y = r3.x + r3.y;
  r1.x = r1.x * scriptVector0.w + r1.y;
  r1.x = r1.x + r3.z;
  r0.w = r1.x + r0.w;
  r1.xyz = pulseColor.xyz * r0.www;
  r0.xyz = r0.xyz * float3(3.05175781e-05,3.05175781e-05,3.05175781e-05) + r1.xyz;
  o0.xyz = float3(32768,32768,32768) * r0.xyz;
  o0.w = r3.w;
  return;
}