//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:07 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 38
dcl_thread_group 8, 8, 1
ishl r0.x, cb2[57].x, l(5)
iadd r0.x, r0.x, vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r3.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.yzw, r1.xyww, t0.wxyz
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r5.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.yyyx
add r9.xy, r1.wzww, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r10.x, r3.x, l(0.984375)
mul r5.w, r3.x, l(1.01587307)
mad r3.x, r3.x, l(64.000000), l(-63.000000)
movc r3.x, r10.x, r3.x, r5.w
max r3.x, r3.x, l(0.00000001)
rcp r10.y, r3.x
and r9.zw, r0.zzzz, r10.xxxy
add r10.xy, r9.xyxx, -cb1[71].xyxx
mul r10.xy, r10.xyxx, cb1[44].zwzz
mad r10.xy, r10.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r11.x, r10.x, cb1[12].x
mul r11.y, r10.y, cb1[13].y
mov r11.z, l(1.000000)
mul r10.xyz, r9.wwww, r11.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.z, r2.w, l(3.000000), l(0.500000)
ftou r0.z, r0.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r11.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r11.z
mul r11.xy, r2.wwww, r2.xyxx
and r12.xyzw, r0.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.z, r12.w, r12.z
movc r12.z, r0.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.z, r0.w, l(-0.500000), l(-0.00146628)
add r0.z, r0.z, r2.z
mul_sat r2.y, r0.z, l(2.00982332)
dp3 r0.z, -r10.xyzx, -r10.xyzx
rsq r0.z, r0.z
mul r12.xyz, r0.zzzz, -r10.xyzx
dp2 r0.w, r1.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r0.w
dp2 r0.w, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r3.x, r15.x, r0.w
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r0.w, -r12.xyzx, r11.xyzx
add r0.w, r0.w, r0.w
mad r16.xyz, r11.xyzx, -r0.wwww, -r12.xyzx
mul r0.w, r2.y, l(17.000000)
exp r0.w, r0.w
add r0.w, r0.w, l(2.000000)
div r0.w, l(2.000000), r0.w
sqrt r1.z, r0.w
mul r2.zw, r9.xxxy, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r1.w, r2.zwzz, t27.yzwx, s4, l(0.000000)
mul r2.z, r1.w, r4.z
dp3 r2.w, r11.xyzx, cb2[17].xyzx
mov_sat r5.w, r2.w
ge r6.w, l(0.000000), r5.w
if_nz r6.w
  mov r7.w, l(0)
endif 
if_z r6.w
  mul r9.xyw, r10.yyyy, cb2[29].xyxz
  mad r9.xyw, r10.xxxx, cb2[28].xyxz, r9.xyxw
  mad r9.xyw, r10.zzzz, cb2[30].xyxz, r9.xyxw
  add r9.xyw, r9.xyxw, cb2[31].xyxz
  add r6.w, r9.w, -cb2[17].w
  mad r6.w, -r6.w, l(0.00006104), l(1.000000)
  mov_sat r8.w, r6.w
  eq r8.w, r6.w, r8.w
  if_nz r8.w
    mov r8.w, l(0)
    mov r12.w, l(0)
    loop 
      ge r13.z, r8.w, l(3.000000)
      breakc_nz r13.z
      ftou r13.z, r8.w
      add r15.yz, r9.xxyx, -cb2[r13.z + 20].xxyx
      max r13.w, |r15.z|, |r15.y|
      mul r12.w, r13.w, cb2[r13.z + 20].z
      lt r13.z, r12.w, l(1.000000)
      if_nz r13.z
        break 
      endif 
      add r8.w, r8.w, l(1.000000)
      mov r12.w, l(0)
    endloop 
  else 
    mov r8.w, l(3.000000)
    mov r12.w, l(0)
  endif 
  ge r13.z, r8.w, l(3.000000)
  if_nz r13.z
    mul r15.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r17.xz, r15.yyyy
    mov r17.y, -r17.z
    mad r15.yzw, r9.xxyx, r17.xxyz, r15.zzwz
    add r17.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r15.yzw, r15.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r15.yzw, r17.xxyz, r15.yyzw
    mul r17.xy, r15.wzww, cb2[32].xxxx
    round_ni r17.xy, r17.xyxx
    mul r13.w, r17.y, cb2[27].x
    mad r13.w, r13.w, cb2[32].x, r17.x
    ftou r13.w, r13.w
    iadd r13.w, r13.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r13.w, l(0), t23.xxxx
    and r17.x, r14.w, l(0x40000000)
    ishl r17.y, r14.w, l(2)
    if_z r17.x
      and r17.x, r14.w, l(0x01ffffff)
      iadd r18.x, r13.w, r17.x
      ushr r13.w, r14.w, l(25)
      utof r13.w, r13.w
      mul r15.yzw, r13.wwww, r15.yyzw
      frc r15.yzw, r15.yyzw
      mul r15.yzw, r15.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r15.yzw, r15.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      ushr r17.xz, r15.wwzw, l(6, 0, 6, 0)
      and r13.w, r18.z, l(0xc0000000)
      iadd r14.w, r18.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t23.xxxx
      movc r14.w, r17.z, r18.z, r14.w
      ushr r17.z, r14.w, l(13)
      movc r14.w, r17.x, r17.z, r14.w
      and r14.w, r14.w, l(8191)
      iadd r19.x, r14.w, r18.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      mov r18.y, l(0)
      mov r19.y, l(1)
      movc r17.xzw, r13.wwww, r18.xxyz, r19.xxyz
      movc r19.yz, r13.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r20.xy, r15.wzww, r19.yyyy
      and r20.xy, r20.xyxx, l(1, 1, 0, 0)
      and r14.w, r17.w, l(0xc0000000)
      iadd r18.w, r17.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.w, l(0), t23.xxxx
      movc r18.w, r20.y, r17.w, r18.w
      ushr r19.y, r18.w, l(13)
      movc r18.w, r20.x, r19.y, r18.w
      and r18.w, r18.w, l(8191)
      iadd r19.x, r17.x, r18.w
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
      movc r17.xzw, r14.wwww, r17.xxzw, r19.xxzw
      movc r17.xzw, r13.wwww, r18.xxyz, r17.xxzw
      and r13.w, r17.w, l(0xc0000000)
      if_z r13.w
        iadd r13.w, -r17.z, l(6)
        ushr r18.xy, r15.wzww, r13.wwww
        or r13.w, r17.w, l(0x40000000)
        bfi r14.w, l(1), l(1), r18.y, l(0)
        bfi r14.w, l(1), l(0), r18.x, r14.w
        imul null, r14.w, r14.w, l(10)
        ushr r13.w, r13.w, r14.w
        and r13.w, r13.w, l(1023)
        iadd r18.x, r13.w, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.x, l(0), t23.xxxx
        iadd r18.yz, r17.zzzz, l(0, 1, 2, 0)
        iadd r13.w, -r18.y, l(6)
        ushr r19.xy, r15.wzww, r13.wwww
        and r13.w, r18.w, l(0xc0000000)
        or r14.w, r18.w, l(0x40000000)
        bfi r17.z, l(1), l(1), r19.y, l(0)
        bfi r17.z, l(1), l(0), r19.x, r17.z
        imul null, r17.z, r17.z, l(10)
        ushr r14.w, r14.w, r17.z
        and r14.w, r14.w, l(1023)
        iadd r19.x, r14.w, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
        mov r19.y, r18.z
        movc r19.xyz, r13.wwww, r18.xywx, r19.xyzx
        iadd r14.w, -r19.y, l(6)
        ushr r18.yz, r15.wwzw, r14.wwww
        and r14.w, r19.z, l(0xc0000000)
        or r17.z, r19.z, l(0x40000000)
        bfi r18.z, l(1), l(1), r18.z, l(0)
        bfi r18.y, l(1), l(0), r18.y, r18.z
        imul null, r18.y, r18.y, l(10)
        ushr r17.z, r17.z, r18.y
        and r17.z, r17.z, l(1023)
        iadd r20.x, r17.z, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.y, r20.x, l(0), t23.xxxx
        movc r18.yz, r14.wwww, r19.xxzx, r20.xxyx
        movc r17.xw, r13.wwww, r18.xxxw, r18.yyyz
      endif 
      and r13.w, r17.w, l(0xc0000000)
      if_z r13.w
        ubfe r14.w, l(14), l(15), r17.w
        utof r14.w, r14.w
        mul r14.w, r14.w, cb2[27].w
        mul r14.w, r14.w, l(0.00006104)
        and r18.xy, r17.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r17.z, r18.x
        mul r17.z, r17.z, cb2[27].w
        mul r17.z, r17.z, l(0.00003052)
        and r18.x, r15.z, l(3)
        iadd r18.x, r17.x, r18.x
        iadd r18.x, r18.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.x, r18.x, l(0), t23.xxxx
        bfi r19.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r15.yzwy, l(0, 0, 0, 0)
        ushr r15.y, r18.x, r19.x
        and r15.y, r15.y, l(255)
        utof r15.y, r15.y
        mul r15.y, r17.z, r15.y
        mad r15.y, r15.y, l(0.00392157), r14.w
        iadd r15.z, r19.y, l(1)
        ubfe r15.w, l(1), l(1), r15.w
        iadd r15.z, r15.w, r15.z
        iadd r15.z, r15.z, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.z, r15.z, l(0), t23.xxxx
        ushr r15.z, r15.z, r19.z
        and r15.z, r15.z, l(0x0000ffff)
        utof r15.z, r15.z
        mul r15.z, r17.z, r15.z
        mad r14.w, r15.z, l(0.00001526), r14.w
        movc r17.y, r18.y, r15.y, r14.w
      else 
        and r14.w, r17.w, l(0x80000000)
        iadd r15.y, r17.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.y, r15.y, l(0), t23.xxxx
        movc r14.w, r14.w, r15.y, l(0)
        ishl r15.y, r17.w, l(2)
        ushr r15.z, r14.w, l(16)
        f16tof32 r15.z, r15.z
        and r14.w, r14.w, l(0x0000ffff)
        f16tof32 r14.w, r14.w
        mad r15.y, r9.x, r15.z, r15.y
        mad r14.w, r9.y, r14.w, r15.y
        movc r17.y, r13.w, r14.w, r17.y
      endif 
    endif 
    mad r9.w, -cb2[27].z, l(2.000000), r9.w
    lt r9.w, r17.y, r9.w
    movc r7.w, r9.w, l(0), l(1.000000)
  endif 
  if_z r13.z
    if_z cb2[58].y
      ftou r9.w, r8.w
      add r13.zw, r9.xxxy, -cb2[r9.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r9.w + 20].zzzz
      mad r17.xy, r13.zwzz, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r9.w, cb2[26].y
      add r17.z, r8.w, r9.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r17.xyzx, t13.xxxx, s13, r6.w
      sample_l_indexable(texture2darray)(float,float,float,float) r13.z, r17.xyzx, t31.yzxw, s0, l(0.000000)
      add r9.w, r9.w, r13.z
      add_sat r9.w, r9.w, l(-1.000000)
      mul r13.z, r9.w, r9.w
      mul r7.w, r9.w, r13.z
    endif 
    if_nz cb2[58].y
      mov r17.x, -r13.x
      ftou r9.w, r8.w
      add r8.w, r8.w, l(1.000000)
      min r8.w, r8.w, l(2.000000)
      ftou r8.w, r8.w
      add r12.w, -r12.w, l(1.000000)
      mul r12.w, r12.w, l(28.000000)
      ftou r12.w, r12.w
      add r13.zw, r9.xxxy, -cb2[r9.w + 20].xxxy
      mul r13.zw, r13.zzzw, cb2[r9.w + 20].zzzz
      mad r13.zw, r13.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r9.xy, r9.xyxx, -cb2[r8.w + 20].xyxx
      mul r9.xy, r9.xyxx, cb2[r8.w + 20].zzzz
      mad r9.xy, r9.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mov r17.y, r14.x
      mov r17.z, r13.x
      mov r14.w, l(0)
      mov r15.y, l(0)
      loop 
        uge r15.z, r15.y, l(8)
        breakc_nz r15.z
        ult r15.z, r12.w, r15.y
        movc r18.xy, r15.zzzz, r9.xyxx, r13.zwzz
        movc r15.w, r15.z, cb2[r8.w + 20].w, cb2[r9.w + 20].w
        movc r15.z, r15.z, r8.w, r9.w
        dp2 r19.x, icb[r15.y + 0].yxyy, r17.xyxx
        dp2 r19.y, icb[r15.y + 0].yxyy, r17.yzyy
        mad r18.xy, r19.xyxx, r15.wwww, r18.xyxx
        iadd r15.z, r15.z, cb2[26].y
        utof r18.z, r15.z
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.z, r18.xyzx, t13.xxxx, s13, r6.w
        sample_l_indexable(texture2darray)(float,float,float,float) r15.w, r18.xyzx, t31.yzwx, s0, l(0.000000)
        add r15.z, r15.w, r15.z
        add_sat r15.z, r15.z, l(-1.000000)
        mad r14.w, r15.z, l(0.125000), r14.w
        iadd r15.y, r15.y, l(1)
      endloop 
      mul r6.w, r14.w, r14.w
      mul r7.w, r14.w, r6.w
    endif 
  endif 
endif 
add r6.w, -r2.y, l(1.000000)
mul r8.w, r6.w, l(5.000000)
mad r9.x, r6.w, l(5.000000), l(-2.500000)
mul r9.x, r9.x, l(0.400000)
max r9.x, r9.x, l(0.000000)
mad r9.yw, -r6.wwww, l(0.000000, 10.000000, 0.000000, 5.000000), l(0.000000, 6.857410, 0.000000, 7.085000)
exp r9.y, r9.y
mul r9.y, r2.x, r9.y
mul r12.w, r6.w, r8.w
mad r9.w, -r12.w, l(2.015905), r9.w
exp r9.w, r9.w
mul r9.w, r2.x, r9.w
mul r9.xyw, r9.xyxw, l(100.000000, 9.136810, 0.000000, 9.708090)
max r9.y, r9.w, r9.y
max r9.y, r9.y, l(1.268160)
iadd r9.w, cb2[0].y, -cb2[58].x
ftou r12.w, cb1[44].x
iadd r12.w, r12.w, l(7)
ushr r12.w, r12.w, l(3)
imad r0.x, r0.y, r12.w, r0.x
ishl r0.y, r0.x, l(5)
bfi r0.x, l(27), l(5), r0.x, l(16)
and r12.w, r9.w, l(-32)
iadd r13.z, r9.w, -r12.w
and r13.w, cb2[0].y, l(-32)
iadd r14.w, -r13.w, cb2[0].y
mov r17.yz, l(0,0,1.000000,0)
mov r18.xy, l(0,0,0,0)
mov r19.x, l(1.000000)
mov r20.xy, l(0,0,0,0)
mov r21.xy, l(0,0,0,0)
mov r22.xyzw, l(0,0,0,0)
mov r23.yzw, l(0,0,0,0)
mov r15.y, r12.w
loop 
  uge r15.z, r15.y, cb2[0].y
  breakc_nz r15.z
  ushr r15.z, r15.y, l(5)
  iadd r15.z, r0.x, r15.z
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.z, r15.z, l(0), t26.xxxx
  ieq r15.w, r12.w, r15.y
  bfi r17.w, r13.z, l(0), l(0), r15.z
  movc r15.z, r15.w, r17.w, r15.z
  ieq r15.w, r13.w, r15.y
  ubfe r17.w, r14.w, l(0), r15.z
  movc r15.z, r15.w, r17.w, r15.z
  mov r24.xyzw, r22.xyzw
  mov r25.xyz, r23.yzwy
  mov r15.w, r15.z
  loop 
    breakc_z r15.w
    firstbit_lo r17.w, r15.w
    ishl r18.w, l(1), r17.w
    not r18.w, r18.w
    and r15.w, r15.w, r18.w
    iadd r17.w, r15.y, r17.w
    imul null, r17.w, r17.w, l(14)
    add r26.xyz, r10.xyzx, -cb10[r17.w + 0].xyzx
    and r18.w, l(0x0000ffff), cb10[r17.w + 7].z
    ubfe r19.z, l(6), l(25), cb10[r17.w + 7].z
    imul null, r19.w, r18.w, l(6)
    dp3 r20.w, cb11[r19.w + 0].xyzx, r26.xyzx
    add_sat r20.w, r20.w, cb11[r19.w + 0].w
    dp3 r21.w, cb11[r19.w + 1].xyzx, r26.xyzx
    add_sat r21.w, r21.w, cb11[r19.w + 1].w
    mul r20.w, r20.w, r21.w
    dp3 r21.w, cb11[r19.w + 2].xyzx, r26.xyzx
    add_sat r21.w, r21.w, cb11[r19.w + 2].w
    mul r20.w, r20.w, r21.w
    dp3 r21.w, cb11[r19.w + 3].xyzx, r26.xyzx
    add_sat r21.w, r21.w, cb11[r19.w + 3].w
    mul r20.w, r20.w, r21.w
    dp3 r21.w, cb11[r19.w + 4].xyzx, r26.xyzx
    add_sat r21.w, r21.w, cb11[r19.w + 4].w
    mul r20.w, r20.w, r21.w
    dp3 r21.w, cb11[r19.w + 5].xyzx, r26.xyzx
    add_sat r19.w, r21.w, cb11[r19.w + 5].w
    mul r17.x, r19.w, r20.w
    and r19.w, l(1), cb10[r17.w + 6].x
    movc r27.xy, r19.wwww, r17.xyxx, r17.zxzz
    mov r17.x, cb10[r17.w + 6].x
    mov r28.xy, r27.xyxx
    mov r19.w, l(1)
    loop 
      ige r20.w, r19.w, r19.z
      breakc_nz r20.w
      iadd r20.w, r18.w, r19.w
      imul null, r20.w, r20.w, l(6)
      dp3 r21.w, cb11[r20.w + 0].xyzx, r26.xyzx
      add_sat r21.w, r21.w, cb11[r20.w + 0].w
      mul r21.w, r21.w, r28.x
      dp3 r26.w, cb11[r20.w + 1].xyzx, r26.xyzx
      add_sat r26.w, r26.w, cb11[r20.w + 1].w
      mul r21.w, r21.w, r26.w
      dp3 r26.w, cb11[r20.w + 2].xyzx, r26.xyzx
      add_sat r26.w, r26.w, cb11[r20.w + 2].w
      mul r21.w, r21.w, r26.w
      dp3 r26.w, cb11[r20.w + 3].xyzx, r26.xyzx
      add_sat r26.w, r26.w, cb11[r20.w + 3].w
      mul r21.w, r21.w, r26.w
      dp3 r26.w, cb11[r20.w + 4].xyzx, r26.xyzx
      add_sat r26.w, r26.w, cb11[r20.w + 4].w
      mul r21.w, r21.w, r26.w
      dp3 r26.w, cb11[r20.w + 5].xyzx, r26.xyzx
      add_sat r20.w, r26.w, cb11[r20.w + 5].w
      mul r28.x, r20.w, r21.w
      ushr r26.w, r17.x, l(2)
      ubfe r27.z, l(1), l(2), r17.x
      and r27.w, r26.w, l(2)
      max r28.z, r28.x, r28.y
      mad r20.w, -r21.w, r20.w, l(1.000000)
      mul r20.w, r20.w, r28.y
      movc r19.y, r27.w, r20.w, r28.z
      movc r28.xy, r27.zzzz, r28.xyxx, r19.xyxx
      iadd r19.w, r19.w, l(1)
      mov r17.x, r26.w
    endloop 
    mov_sat r28.y, r28.y
    mul r17.x, r28.y, cb10[r17.w + 6].y
    lt r18.w, l(0.000000), r17.x
    if_nz r18.w
      mad r25.z, r28.y, cb10[r17.w + 6].y, r25.z
      mul r17.x, r17.x, cb10[r17.w + 7].y
      mov r27.x, cb10[r17.w + 7].w
      mov r27.yz, cb10[r17.w + 8].xxyx
      dp3 r18.w, r16.xyzx, r27.xyzx
      dp3 r19.y, r26.xyzx, r27.xyzx
      add r19.y, r19.y, -cb10[r17.w + 8].z
      ge r19.z, r19.y, l(0.000000)
      max r19.y, r9.x, |r19.y|
      movc r19.y, r19.z, r19.y, -r19.y
      max r18.w, -r18.w, l(0.00000010)
      div r18.w, r19.y, r18.w
      min r18.w, |r18.w|, l(131072.000000)
      mov r27.x, cb10[r17.w + 8].w
      mov r27.yz, cb10[r17.w + 9].xxyx
      dp3 r19.y, r16.xyzx, r27.xyzx
      dp3 r19.z, r26.xyzx, r27.xyzx
      add r19.z, r19.z, -cb10[r17.w + 9].z
      ge r19.w, r19.z, l(0.000000)
      max r19.z, r9.x, |r19.z|
      movc r19.z, r19.w, r19.z, -r19.z
      max r19.y, -r19.y, l(0.00000010)
      div r19.y, r19.z, r19.y
      min r18.w, r18.w, |r19.y|
      mov r27.x, cb10[r17.w + 9].w
      mov r27.yz, cb10[r17.w + 10].xxyx
      dp3 r19.y, r16.xyzx, r27.xyzx
      dp3 r19.z, r26.xyzx, r27.xyzx
      add r19.z, r19.z, -cb10[r17.w + 10].z
      ge r19.w, r19.z, l(0.000000)
      max r19.z, r9.x, |r19.z|
      movc r19.z, r19.w, r19.z, -r19.z
      max r19.y, -r19.y, l(0.00000010)
      div r19.y, r19.z, r19.y
      min r18.w, r18.w, |r19.y|
      mov r27.x, cb10[r17.w + 10].w
      mov r27.yz, cb10[r17.w + 11].xxyx
      dp3 r19.y, r16.xyzx, r27.xyzx
      dp3 r19.z, r26.xyzx, r27.xyzx
      add r19.z, r19.z, -cb10[r17.w + 11].z
      ge r19.w, r19.z, l(0.000000)
      max r19.z, r9.x, |r19.z|
      movc r19.z, r19.w, r19.z, -r19.z
      max r19.y, -r19.y, l(0.00000010)
      div r19.y, r19.z, r19.y
      min r18.w, r18.w, |r19.y|
      mov r27.x, cb10[r17.w + 11].w
      mov r27.yz, cb10[r17.w + 12].xxyx
      dp3 r19.y, r16.xyzx, r27.xyzx
      dp3 r19.z, r26.xyzx, r27.xyzx
      add r19.z, r19.z, -cb10[r17.w + 12].z
      ge r19.w, r19.z, l(0.000000)
      max r19.z, r9.x, |r19.z|
      movc r19.z, r19.w, r19.z, -r19.z
      max r19.y, -r19.y, l(0.00000010)
      div r19.y, r19.z, r19.y
      min r18.w, r18.w, |r19.y|
      mov r27.x, cb10[r17.w + 12].w
      mov r27.yz, cb10[r17.w + 13].xxyx
      dp3 r19.y, r16.xyzx, r27.xyzx
      dp3 r19.z, r26.xyzx, r27.xyzx
      add r19.z, r19.z, -cb10[r17.w + 13].z
      ge r19.w, r19.z, l(0.000000)
      max r19.z, r9.x, |r19.z|
      movc r19.z, r19.w, r19.z, -r19.z
      max r19.y, -r19.y, l(0.00000010)
      div r19.y, r19.z, r19.y
      min r18.w, r18.w, |r19.y|
      add r27.x, r26.x, cb10[r17.w + 3].w
      add r27.yz, r26.yyzy, cb10[r17.w + 4].xxyx
      mad r19.yzw, r16.xxyz, r18.wwww, r27.xxyz
      dp3 r20.w, r19.yzwy, r19.yzwy
      sqrt r20.w, r20.w
      div r18.w, r18.w, r20.w
      add r18.w, r18.w, r18.w
      sqrt r18.w, r18.w
      mad r18.w, r6.w, l(5.000000), r18.w
      add r18.w, r18.w, l(-0.844800)
      mov r27.x, cb10[r17.w + 0].w
      mov r27.y, cb10[r17.w + 1].z
      mov r27.z, cb10[r17.w + 2].y
      dp3 r29.x, r19.yzwy, r27.xyzx
      mov r30.xy, cb10[r17.w + 1].xwxx
      mov r30.z, cb10[r17.w + 2].z
      dp3 r29.y, r19.yzwy, r30.xyzx
      mov r31.x, cb10[r17.w + 1].y
      mov r31.yz, cb10[r17.w + 2].xxwx
      dp3 r29.z, r19.yzwy, r31.xyzx
      ubfe r19.y, l(9), l(16), cb10[r17.w + 7].z
      utof r29.w, r19.y
      sample_l_indexable(texturecubearray)(float,float,float,float) r19.yzw, r29.xyzw, t8.wxyz, s2, r18.w
      dp3 r32.x, r26.xyzx, r27.xyzx
      dp3 r32.y, r26.xyzx, r30.xyzx
      dp3 r32.z, r26.xyzx, r31.xyzx
      mad_sat r26.xyz, r32.xyzx, cb10[r17.w + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
      mul r32.xy, r26.xyxx, cb10[r17.w + 4].zwzz
      mul r32.z, r26.z, cb10[r17.w + 5].x
      add r26.xyz, r32.xyzx, cb10[r17.w + 5].yzwy
      dp3 r29.x, r11.xyzx, r27.xyzx
      dp3 r29.y, r11.xyzx, r30.xyzx
      dp3 r29.z, r11.xyzx, r31.xyzx
      lt r27.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r29.xyzx
      movc r18.z, r27.x, l(0), l(0.500000)
      add r28.xzw, r18.xxyz, r26.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r28.xzw, r28.xzwx, t17.xwyz, s4, l(0.000000)
      mul r30.xyz, r29.xyzx, r29.xyzx
      mul r30.xyz, r17.xxxx, r30.xyzx
      movc r20.z, r27.y, l(0), l(0.500000)
      add r27.xyw, r20.xyxz, r26.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r27.xyw, r27.xywx, t18.xywz, s4, l(0.000000)
      mul r27.xyw, r30.yyyy, r27.xyxw
      mad r27.xyw, r28.xzxw, r30.xxxx, r27.xyxw
      movc r21.z, r27.z, l(0), l(0.500000)
      add r26.xyz, r21.xyzx, r26.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t19.xyzw, s4, l(0.000000)
      mad r26.xyz, r26.xyzx, r30.zzzz, r27.xywx
      sample_l_indexable(texturecubearray)(float,float,float,float) r27.xyz, r29.xyzw, t8.xyzw, s2, l(6.000000)
      mul r28.xzw, r26.xxyz, r27.xxyz
      dp3 r17.w, r28.xzwx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r24.xyz, r26.xyzx, r27.xyzx, r24.xyzx
      mul r18.z, r9.y, r17.w
      mul r19.yzw, r17.xxxx, r19.yyzw
      dp3 r17.x, r19.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r17.x, r9.y, r17.w, r17.x
      div r17.x, r18.z, r17.x
      mov r26.x, r24.w
      mov r26.yz, r25.xxyx
      mad r25.xyw, r19.zwzy, r17.xxxx, r26.yzyx
      mov r24.w, r25.w
    endif 
  endloop 
  mov r22.xyzw, r24.xyzw
  mov r23.yzw, r25.xxyz
  iadd r15.y, r15.y, l(32)
endloop 
lt r13.w, r23.w, l(1.000000)
if_nz r13.w
  mov r17.yz, l(0,0,1.000000,0)
  mov r18.xy, l(0,0,0,0)
  mov r19.x, l(1.000000)
  mov r20.xy, l(0,0,0,0)
  mov r21.xy, l(0,0,0,0)
  mov r24.x, r22.w
  mov r24.yzw, r23.yyzw
  mov r15.yzw, r22.xxyz
  mov r13.w, r23.w
  mov r14.w, l(0)
  loop 
    uge r17.w, r14.w, r9.w
    breakc_nz r17.w
    ushr r17.w, r14.w, l(5)
    iadd r17.w, r0.x, r17.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.w, l(0), t26.xxxx
    ieq r18.w, r12.w, r14.w
    ubfe r19.z, r13.z, l(0), r17.w
    movc r17.w, r18.w, r19.z, r17.w
    mov r25.xyzw, r24.xyzw
    mov r26.xyz, r15.yzwy
    mov r18.w, r13.w
    mov r19.z, r17.w
    loop 
      breakc_z r19.z
      firstbit_lo r19.w, r19.z
      ishl r20.w, l(1), r19.w
      not r20.w, r20.w
      and r19.z, r19.z, r20.w
      iadd r19.w, r14.w, r19.w
      imul null, r19.w, r19.w, l(14)
      add r27.xyz, r10.xyzx, -cb10[r19.w + 0].xyzx
      and r20.w, l(0x0000ffff), cb10[r19.w + 7].z
      ubfe r21.w, l(6), l(25), cb10[r19.w + 7].z
      imul null, r26.w, r20.w, l(6)
      dp3 r27.w, cb11[r26.w + 0].xyzx, r27.xyzx
      add_sat r27.w, r27.w, cb11[r26.w + 0].w
      dp3 r28.x, cb11[r26.w + 1].xyzx, r27.xyzx
      add_sat r28.x, r28.x, cb11[r26.w + 1].w
      mul r27.w, r27.w, r28.x
      dp3 r28.x, cb11[r26.w + 2].xyzx, r27.xyzx
      add_sat r28.x, r28.x, cb11[r26.w + 2].w
      mul r27.w, r27.w, r28.x
      dp3 r28.x, cb11[r26.w + 3].xyzx, r27.xyzx
      add_sat r28.x, r28.x, cb11[r26.w + 3].w
      mul r27.w, r27.w, r28.x
      dp3 r28.x, cb11[r26.w + 4].xyzx, r27.xyzx
      add_sat r28.x, r28.x, cb11[r26.w + 4].w
      mul r27.w, r27.w, r28.x
      dp3 r28.x, cb11[r26.w + 5].xyzx, r27.xyzx
      add_sat r26.w, r28.x, cb11[r26.w + 5].w
      mul r17.x, r26.w, r27.w
      and r26.w, l(1), cb10[r19.w + 6].x
      movc r28.xy, r26.wwww, r17.xyxx, r17.zxzz
      mov r17.x, cb10[r19.w + 6].x
      mov r29.xy, r28.xyxx
      mov r26.w, l(1)
      loop 
        ige r27.w, r26.w, r21.w
        breakc_nz r27.w
        iadd r27.w, r20.w, r26.w
        imul null, r27.w, r27.w, l(6)
        dp3 r28.z, cb11[r27.w + 0].xyzx, r27.xyzx
        add_sat r28.z, r28.z, cb11[r27.w + 0].w
        mul r28.z, r28.z, r29.x
        dp3 r28.w, cb11[r27.w + 1].xyzx, r27.xyzx
        add_sat r28.w, r28.w, cb11[r27.w + 1].w
        mul r28.z, r28.w, r28.z
        dp3 r28.w, cb11[r27.w + 2].xyzx, r27.xyzx
        add_sat r28.w, r28.w, cb11[r27.w + 2].w
        mul r28.z, r28.w, r28.z
        dp3 r28.w, cb11[r27.w + 3].xyzx, r27.xyzx
        add_sat r28.w, r28.w, cb11[r27.w + 3].w
        mul r28.z, r28.w, r28.z
        dp3 r28.w, cb11[r27.w + 4].xyzx, r27.xyzx
        add_sat r28.w, r28.w, cb11[r27.w + 4].w
        mul r28.z, r28.w, r28.z
        dp3 r28.w, cb11[r27.w + 5].xyzx, r27.xyzx
        add_sat r27.w, r28.w, cb11[r27.w + 5].w
        mul r29.x, r27.w, r28.z
        ushr r28.w, r17.x, l(2)
        ubfe r29.z, l(1), l(2), r17.x
        and r29.w, r28.w, l(2)
        max r30.x, r29.x, r29.y
        mad r27.w, -r28.z, r27.w, l(1.000000)
        mul r27.w, r27.w, r29.y
        movc r19.y, r29.w, r27.w, r30.x
        movc r29.xy, r29.zzzz, r29.xyxx, r19.xyxx
        iadd r26.w, r26.w, l(1)
        mov r17.x, r28.w
      endloop 
      add_sat r17.x, -r18.w, r29.y
      mul r19.y, r17.x, cb10[r19.w + 6].y
      lt r20.w, l(0.000000), r19.y
      if_nz r20.w
        mad r25.w, r17.x, cb10[r19.w + 6].y, r25.w
        mul r17.x, r19.y, cb10[r19.w + 7].y
        mov r28.x, cb10[r19.w + 7].w
        mov r28.yz, cb10[r19.w + 8].xxyx
        dp3 r19.y, r16.xyzx, r28.xyzx
        dp3 r20.w, r27.xyzx, r28.xyzx
        add r20.w, r20.w, -cb10[r19.w + 8].z
        ge r21.w, r20.w, l(0.000000)
        max r20.w, r9.x, |r20.w|
        movc r20.w, r21.w, r20.w, -r20.w
        max r19.y, -r19.y, l(0.00000010)
        div r19.y, r20.w, r19.y
        min r19.y, |r19.y|, l(131072.000000)
        mov r28.x, cb10[r19.w + 8].w
        mov r28.yz, cb10[r19.w + 9].xxyx
        dp3 r20.w, r16.xyzx, r28.xyzx
        dp3 r21.w, r27.xyzx, r28.xyzx
        add r21.w, r21.w, -cb10[r19.w + 9].z
        ge r26.w, r21.w, l(0.000000)
        max r21.w, r9.x, |r21.w|
        movc r21.w, r26.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r19.y, r19.y, |r20.w|
        mov r28.x, cb10[r19.w + 9].w
        mov r28.yz, cb10[r19.w + 10].xxyx
        dp3 r20.w, r16.xyzx, r28.xyzx
        dp3 r21.w, r27.xyzx, r28.xyzx
        add r21.w, r21.w, -cb10[r19.w + 10].z
        ge r26.w, r21.w, l(0.000000)
        max r21.w, r9.x, |r21.w|
        movc r21.w, r26.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r19.y, r19.y, |r20.w|
        mov r28.x, cb10[r19.w + 10].w
        mov r28.yz, cb10[r19.w + 11].xxyx
        dp3 r20.w, r16.xyzx, r28.xyzx
        dp3 r21.w, r27.xyzx, r28.xyzx
        add r21.w, r21.w, -cb10[r19.w + 11].z
        ge r26.w, r21.w, l(0.000000)
        max r21.w, r9.x, |r21.w|
        movc r21.w, r26.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r19.y, r19.y, |r20.w|
        mov r28.x, cb10[r19.w + 11].w
        mov r28.yz, cb10[r19.w + 12].xxyx
        dp3 r20.w, r16.xyzx, r28.xyzx
        dp3 r21.w, r27.xyzx, r28.xyzx
        add r21.w, r21.w, -cb10[r19.w + 12].z
        ge r26.w, r21.w, l(0.000000)
        max r21.w, r9.x, |r21.w|
        movc r21.w, r26.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r19.y, r19.y, |r20.w|
        mov r28.x, cb10[r19.w + 12].w
        mov r28.yz, cb10[r19.w + 13].xxyx
        dp3 r20.w, r16.xyzx, r28.xyzx
        dp3 r21.w, r27.xyzx, r28.xyzx
        add r21.w, r21.w, -cb10[r19.w + 13].z
        ge r26.w, r21.w, l(0.000000)
        max r21.w, r9.x, |r21.w|
        movc r21.w, r26.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r19.y, r19.y, |r20.w|
        add r28.x, r27.x, cb10[r19.w + 3].w
        add r28.yz, r27.yyzy, cb10[r19.w + 4].xxyx
        mad r28.xyz, r16.xyzx, r19.yyyy, r28.xyzx
        dp3 r20.w, r28.xyzx, r28.xyzx
        sqrt r20.w, r20.w
        div r19.y, r19.y, r20.w
        add r19.y, r19.y, r19.y
        sqrt r19.y, r19.y
        mad r19.y, r6.w, l(5.000000), r19.y
        add r19.y, r19.y, l(-0.844800)
        mov r30.x, cb10[r19.w + 0].w
        mov r30.y, cb10[r19.w + 1].z
        mov r30.z, cb10[r19.w + 2].y
        dp3 r31.x, r28.xyzx, r30.xyzx
        mov r32.xy, cb10[r19.w + 1].xwxx
        mov r32.z, cb10[r19.w + 2].z
        dp3 r31.y, r28.xyzx, r32.xyzx
        mov r33.x, cb10[r19.w + 1].y
        mov r33.yz, cb10[r19.w + 2].xxwx
        dp3 r31.z, r28.xyzx, r33.xyzx
        ubfe r20.w, l(9), l(16), cb10[r19.w + 7].z
        utof r31.w, r20.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r28.xyz, r31.xyzw, t8.xyzw, s2, r19.y
        dp3 r34.x, r27.xyzx, r30.xyzx
        dp3 r34.y, r27.xyzx, r32.xyzx
        dp3 r34.z, r27.xyzx, r33.xyzx
        mad_sat r27.xyz, r34.xyzx, cb10[r19.w + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
        mul r34.xy, r27.xyxx, cb10[r19.w + 4].zwzz
        mul r34.z, r27.z, cb10[r19.w + 5].x
        add r27.xyz, r34.xyzx, cb10[r19.w + 5].yzwy
        dp3 r31.x, r11.xyzx, r30.xyzx
        dp3 r31.y, r11.xyzx, r32.xyzx
        dp3 r31.z, r11.xyzx, r33.xyzx
        lt r29.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r31.xxyz
        movc r18.z, r29.x, l(0), l(0.500000)
        add r30.xyz, r18.xyzx, r27.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r30.xyz, r30.xyzx, t17.xyzw, s4, l(0.000000)
        mul r32.xyz, r31.xyzx, r31.xyzx
        mul r32.xyz, r17.xxxx, r32.xyzx
        movc r20.z, r29.z, l(0), l(0.500000)
        add r33.xyz, r20.xyzx, r27.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r33.xyz, r33.xyzx, t18.xyzw, s4, l(0.000000)
        mul r33.xyz, r32.yyyy, r33.xyzx
        mad r30.xyz, r30.xyzx, r32.xxxx, r33.xyzx
        movc r21.z, r29.w, l(0), l(0.500000)
        add r27.xyz, r21.xyzx, r27.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r27.xyz, r27.xyzx, t19.xyzw, s4, l(0.000000)
        mad r27.xyz, r27.xyzx, r32.zzzz, r30.xyzx
        sample_l_indexable(texturecubearray)(float,float,float,float) r29.xzw, r31.xyzw, t8.xwyz, s2, l(6.000000)
        mul r30.xyz, r27.xyzx, r29.xzwx
        dp3 r18.z, r30.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r26.xyz, r27.xyzx, r29.xzwx, r26.xyzx
        mul r19.y, r9.y, r18.z
        mul r27.xyz, r17.xxxx, r28.xyzx
        dp3 r17.x, r27.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r17.x, r9.y, r18.z, r17.x
        div r17.x, r19.y, r17.x
        mad r25.xyz, r27.xyzx, r17.xxxx, r25.xyzx
      endif 
    endloop 
    mov r24.xyzw, r25.xyzw
    mov r15.yzw, r26.xxyz
    iadd r14.w, r14.w, l(32)
  endloop 
  mov r23.xyzw, r24.zxyw
  mov r22.xyz, r15.yzwy
  mov r23.xyzw, r23.yzxw
else 
  mov r23.x, r22.w
endif 
max r0.x, r23.w, l(1.000000)
rcp r0.x, r0.x
mov_sat r23.w, r23.w
mul r9.xyw, r0.xxxx, r22.xyxz
mul r15.yzw, r0.xxxx, r23.xxyz
lt r6.w, r23.w, l(0.990000)
if_nz r6.w
  add r6.w, -r23.w, l(1.000000)
  mul r12.w, r6.w, cb2[19].x
  add r17.xyz, r10.xyzx, -cb2[35].xyzx
  mul r18.x, r17.x, cb2[35].w
  mul r18.yz, r17.yyzy, cb2[36].xxyx
  add_sat r17.xyz, r18.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r18.xy, r17.xyxx, cb2[36].zwzz
  mul r18.z, r17.z, cb2[37].x
  add r17.xyz, r18.xyzx, cb2[37].yzwy
  lt r18.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
  movc r18.xyz, r18.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r18.w, l(0)
  add r19.xyz, r17.xyzx, r18.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t17.xyzw, s4, l(0.000000)
  mul r20.xyz, r11.xyzx, r11.xyzx
  mul r20.xyz, r12.wwww, r20.xyzx
  add r21.xyz, r17.xyzx, r18.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t18.xyzw, s4, l(0.000000)
  mul r21.xyz, r20.yyyy, r21.xyzx
  mad r19.xyz, r19.xyzx, r20.xxxx, r21.xyzx
  add r17.xyz, r17.xyzx, r18.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t19.xyzw, s4, l(0.000000)
  mad r17.xyz, r17.xyzx, r20.zzzz, r19.xyzx
  mov r11.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
  mul r17.xyz, r17.xyzx, r18.xyzx
  dp3 r11.w, r17.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r9.xyw, r22.xyxz, r0.xxxx, r17.xyxz
  mov r16.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r16.xyzw, t8.xyzw, s2, r8.w
  mad r0.x, cb2[19].x, r6.w, -r11.w
  mad r0.x, r2.y, r0.x, r11.w
  mad r15.yzw, r17.xxyz, r0.xxxx, r15.yyzw
endif 
mad r0.x, r4.z, r1.w, r2.x
log r0.x, |r0.x|
mul r0.x, r0.x, r1.z
exp r0.x, r0.x
mad r0.x, r4.z, r1.w, r0.x
add_sat r0.x, r0.x, l(-1.000000)
mul r17.xyz, r2.zzzz, r9.xywx
mad r2.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t5.zxyw, s2, l(0.000000)
mul r9.xyw, r0.xxxx, r15.yzyw
mul r18.xyz, r2.yyyy, r9.ywxy
mul r9.xyw, r2.zzzz, r9.xyxw
sqrt r0.x, r1.z
mad r0.x, r0.x, l(0.500000), l(0.500000)
mul r0.x, r0.x, r0.x
mul r1.w, r0.x, l(0.500000)
mad r0.x, -r0.x, l(0.500000), l(1.000000)
mad r2.y, r2.x, r0.x, r1.w
mul r0.x, r0.x, r2.y
mul r1.w, r1.w, r2.y
lt r2.y, l(0.000000), r5.w
if_nz r2.y
  lt r2.y, l(0.000000), r7.w
  if_nz r2.y
    mul r2.y, r0.w, cb2[18].w
    mul r2.y, r5.w, r2.y
    if_nz cb2[23].x
      add r19.xyz, r10.xyzx, cb1[24].xyzx
      mov r19.w, l(1.000000)
      dp4 r2.z, cb2[24].xyzw, r19.xyzw
      dp4 r4.z, cb2[25].xyzw, r19.xyzw
      frc r19.x, r2.z
      frc r19.y, r4.z
      iadd r2.z, l(-1), cb2[23].x
      utof r19.z, r2.z
      sample_l_indexable(texture2darray)(float,float,float,float) r15.yzw, r19.xyzx, t20.wxyz, s2, l(0.000000)
      add r15.yzw, r15.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
      mad r15.yzw, cb2[23].yyyy, r15.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      mul r15.yzw, r15.yyzw, cb2[18].xxyz
    else 
      mov r15.yzw, cb2[18].xxyz
    endif 
    ushr r2.z, cb2[53].x, l(16)
    ult r4.z, l(0), r2.z
    and r4.z, r9.z, r4.z
    if_nz r4.z
      iadd r2.z, r2.z, cb2[0].x
      imad r2.z, r2.z, l(15), l(-15)
      mad r4.z, |r2.w|, l(-0.200000), l(0.400000)
      mad r19.xyz, r11.xyzx, r4.zzzz, r10.xyzx
      mov r20.xyz, cb9[r2.z + 4].yzwy
      mov r20.w, cb9[r2.z + 5].x
      mov r19.w, l(1.000000)
      dp4 r20.x, r20.xyzw, r19.xyzw
      mov r21.xyz, cb9[r2.z + 5].yzwy
      mov r21.w, cb9[r2.z + 6].x
      dp4 r20.y, r21.xyzw, r19.xyzw
      mad r13.zw, r20.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r20.x, r13.z, cb9[r2.z + 9].w
      add r20.y, r13.w, cb9[r2.z + 10].x
      mul r13.zw, r20.xxxy, cb9[r2.z + 9].yyyz
      div r20.xy, cb9[r2.z + 3].yyyy, cb9[r2.z + 8].ywyy
      add r20.zw, -r20.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      ge r20.zw, r13.zzzw, r20.zzzw
      ge r20.xy, r20.xyxx, r13.zwzz
      or r20.xy, r20.xyxx, r20.zwzz
      or r4.z, r20.y, r20.x
      if_z r4.z
        mov r20.xyz, cb9[r2.z + 6].yzwy
        mov r20.w, cb9[r2.z + 7].x
        dp4 r4.z, r20.xyzw, r19.xyzw
        mov_sat r13.zw, r13.zzzw
        mad r19.x, r13.z, cb9[r2.z + 8].y, cb9[r2.z + 8].z
        mad r19.y, r13.w, cb9[r2.z + 8].w, cb9[r2.z + 9].x
        add r4.z, r4.z, cb9[r2.z + 10].y
        div r4.z, r4.z, cb9[r2.z + 10].z
        max r4.z, r4.z, l(0.00006104)
        and r6.w, l(0x0000ffff), cb9[r2.z + 1].w
        if_nz cb2[58].y
          mov r20.x, -r13.x
          utof r21.z, r6.w
          mov r20.y, r14.x
          mov r20.z, r13.x
          mov r8.w, l(0)
          mov r11.w, l(0)
          loop 
            ige r12.w, r11.w, l(8)
            breakc_nz r12.w
            dp2 r22.x, icb[r11.w + 0].yxyy, r20.xyxx
            dp2 r22.y, icb[r11.w + 0].yxyy, r20.yzyy
            mad r21.xy, r22.xyxx, cb9[r2.z + 3].yyyy, r19.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r21.xyzx, t9.xxxx, s13, r4.z
            mad r8.w, r12.w, l(0.125000), r8.w
            iadd r11.w, r11.w, l(1)
          endloop 
        else 
          utof r19.z, r6.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r19.xyzx, t9.xxxx, s13, r4.z
        endif 
        mul r2.z, r8.w, r8.w
        mul r2.z, r8.w, r2.z
      else 
        mov r2.z, l(1.000000)
      endif 
      mul r7.w, r2.z, r7.w
    else 
      and r2.z, cb2[53].x, l(0x0000ffff)
      ult r4.z, l(0), r2.z
      not r6.w, r9.z
      and r4.z, r4.z, r6.w
      if_nz r4.z
        iadd r2.z, r2.z, cb2[0].x
        imad r2.z, r2.z, l(15), l(-15)
        mad r4.z, |r2.w|, l(-0.200000), l(0.400000)
        mad r19.xyz, r11.xyzx, r4.zzzz, r10.xyzx
        mov r20.xyz, cb9[r2.z + 4].yzwy
        mov r20.w, cb9[r2.z + 5].x
        mov r19.w, l(1.000000)
        dp4 r20.x, r20.xyzw, r19.xyzw
        mov r21.xyz, cb9[r2.z + 5].yzwy
        mov r21.w, cb9[r2.z + 6].x
        dp4 r20.y, r21.xyzw, r19.xyzw
        mad r13.zw, r20.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r20.x, r13.z, cb9[r2.z + 9].w
        add r20.y, r13.w, cb9[r2.z + 10].x
        mul r13.zw, r20.xxxy, cb9[r2.z + 9].yyyz
        div r20.xy, cb9[r2.z + 3].yyyy, cb9[r2.z + 8].ywyy
        add r20.zw, -r20.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
        ge r20.zw, r13.zzzw, r20.zzzw
        ge r20.xy, r20.xyxx, r13.zwzz
        or r20.xy, r20.xyxx, r20.zwzz
        or r4.z, r20.y, r20.x
        if_z r4.z
          mov r20.xyz, cb9[r2.z + 6].yzwy
          mov r20.w, cb9[r2.z + 7].x
          dp4 r4.z, r20.xyzw, r19.xyzw
          mov_sat r13.zw, r13.zzzw
          mad r19.x, r13.z, cb9[r2.z + 8].y, cb9[r2.z + 8].z
          mad r19.y, r13.w, cb9[r2.z + 8].w, cb9[r2.z + 9].x
          add r4.z, r4.z, cb9[r2.z + 10].y
          div r4.z, r4.z, cb9[r2.z + 10].z
          max r4.z, r4.z, l(0.00006104)
          and r6.w, l(0x0000ffff), cb9[r2.z + 1].w
          if_nz cb2[58].y
            mov r20.x, -r13.x
            utof r21.z, r6.w
            mov r20.y, r14.x
            mov r20.z, r13.x
            mov r8.w, l(0)
            mov r11.w, l(0)
            loop 
              ige r12.w, r11.w, l(8)
              breakc_nz r12.w
              dp2 r22.x, icb[r11.w + 0].yxyy, r20.xyxx
              dp2 r22.y, icb[r11.w + 0].yxyy, r20.yzyy
              mad r21.xy, r22.xyxx, cb9[r2.z + 3].yyyy, r19.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r21.xyzx, t9.xxxx, s13, r4.z
              mad r8.w, r12.w, l(0.125000), r8.w
              iadd r11.w, r11.w, l(1)
            endloop 
          else 
            utof r19.z, r6.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r19.xyzx, t9.xxxx, s13, r4.z
          endif 
          mul r2.z, r8.w, r8.w
          mul r2.z, r8.w, r2.z
        else 
          mov r2.z, l(1.000000)
        endif 
        mul r7.w, r2.z, r7.w
      endif 
    endif 
    mad r2.z, -r2.x, l(0.500000), l(1.000000)
    mad r2.z, -r5.w, r2.z, l(1.000000)
    mul r2.z, r2.z, r2.z
    mad r2.z, -r2.z, l(0.620000), l(0.620000)
    add r2.z, -r5.w, r2.z
    mad r2.z, r1.z, r2.z, r5.w
    mul r2.z, r7.w, r2.z
    lt r2.w, l(0.000000), r2.w
    mad r19.xyz, r2.zzzz, r15.yzwy, r17.xyzx
    mad r20.xyz, -r10.xyzx, r0.zzzz, cb2[17].xyzx
    dp3 r0.z, r20.xyzx, r20.xyzx
    rsq r0.z, r0.z
    mul r20.xyz, r0.zzzz, r20.xyzx
    dp3 r0.z, r20.xyzx, r12.xyzx
    dp3 r2.z, r11.xyzx, r20.xyzx
    mad r4.z, |r2.z|, r0.w, -|r2.z|
    mad r2.z, |r2.z|, r4.z, l(1.000000)
    mad r4.z, r5.w, r0.x, r1.w
    mul r2.z, r2.z, r2.z
    mul r2.z, r4.z, r2.z
    rcp r2.z, r2.z
    mul r2.y, r2.y, r2.z
    mul r2.y, r2.y, r7.w
    mul r2.y, r2.y, l(0.250000)
    mad r20.xyz, r2.yyyy, r15.yzwy, r9.xywx
    add_sat r0.z, -r0.z, l(1.000000)
    mul r2.z, r0.z, r0.z
    mul r2.z, r2.z, r2.z
    mul r0.z, r0.z, r2.z
    mul r0.z, r0.z, r2.y
    mad r21.xyz, r0.zzzz, r15.zwyz, r18.xyzx
    mov r19.w, r21.z
    mov r17.w, r18.z
    movc r17.xyzw, r2.wwww, r19.xyzw, r17.xyzw
    mov r21.zw, r20.xxxy
    mov r18.zw, r9.xxxy
    movc r19.xyzw, r2.wwww, r21.xyzw, r18.xyzw
    movc r9.w, r2.w, r20.z, r9.w
    mov r18.z, r17.w
    mov r18.xy, r19.xyxx
    mov r9.xy, r19.zwzz
  endif 
endif 
not r0.z, r9.z
mov r19.x, -r13.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r10.w, l(1.000000)
mov r20.z, l(1.000000)
mov r21.w, l(1.000000)
mov r22.w, l(1.000000)
mov r23.w, l(1.000000)
mov r19.z, r13.x
mov r24.w, l(1.000000)
mov r19.yw, r14.xxxx
mov r13.y, r19.w
mov r14.y, r19.x
mov r14.z, r13.x
mov r25.x, r14.x
mov r25.y, r19.x
mov r25.z, r13.x
mov r26.w, l(1.000000)
mov r27.x, r14.x
mov r27.y, r19.x
mov r27.z, r13.x
mov r28.x, r14.x
mov r28.y, r19.x
mov r28.z, r13.x
mov r2.yzw, r17.xxyz
mov r29.xyz, r18.zxyz
mov r30.xyz, r9.xywx
mov r4.z, cb2[58].y
mov r5.w, l(0)
loop 
  uge r6.w, r5.w, cb2[0].x
  breakc_nz r6.w
  ushr r6.w, r5.w, l(5)
  iadd r6.w, r0.y, r6.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.w, r6.w, l(0), t26.xxxx
  mov r15.yzw, r2.yyzw
  mov r31.xyz, r29.xyzx
  mov r32.xyz, r30.xyzx
  mov r7.w, r4.z
  mov r8.w, r6.w
  loop 
    breakc_z r8.w
    firstbit_lo r11.w, r8.w
    ishl r12.w, l(1), r11.w
    not r12.w, r12.w
    and r8.w, r8.w, r12.w
    iadd r11.w, r5.w, r11.w
    imul null, r11.w, r11.w, l(15)
    ubfe r12.w, l(3), l(24), cb9[r11.w + 1].w
    ieq r13.z, r12.w, l(2)
    if_nz r13.z
      ubfe r13.z, l(3), l(27), cb9[r11.w + 1].w
      add r33.xy, -r10.xyxx, cb9[r11.w + 3].zwzz
      add r33.z, -r10.z, cb9[r11.w + 4].x
      dp3 r13.w, r33.xyzx, r33.xyzx
      rsq r13.w, r13.w
      mul r34.xyz, r13.wwww, r33.xyzx
      mul r14.w, r0.w, cb9[r11.w + 1].z
      mul r14.w, r14.w, l(0.250000)
      dp3 r16.w, r11.xyzx, r34.xyzx
      mov_sat r17.w, r16.w
      lt r18.w, l(0.000000), r17.w
      if_nz r18.w
        mov r34.xyz, cb9[r11.w + 7].yzwy
        mov r34.w, cb9[r11.w + 8].x
        dp4 r18.w, r34.xyzw, r10.xyzw
        lt r20.w, r18.w, l(1.000000)
        if_nz r20.w
          mov r35.xyz, l(1.000000,1.000000,1.000000,0)
          mov r20.w, l(0)
        else 
          add r36.xyz, -r10.xyzx, cb9[r11.w + 0].xyzx
          mul r25.w, cb9[r11.w + 3].x, cb9[r11.w + 3].x
          dp3 r27.w, r36.xyzx, r36.xyzx
          div r25.w, r25.w, r27.w
          min r25.w, r25.w, l(1.000000)
          mad_sat r36.xy, r18.wwww, cb9[r11.w + 2].xzxx, cb9[r11.w + 2].ywyy
          mul r36.zw, r36.xxxy, r36.xxxy
          mad r36.xy, r36.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r36.xy, r36.xyxx, r36.zwzz
          mul r25.w, r25.w, r36.x
          mul r25.w, r36.y, r25.w
          mov r36.xyz, cb9[r11.w + 4].yzwy
          mov r36.w, cb9[r11.w + 5].x
          dp4 r36.x, r36.xyzw, r10.xyzw
          mov r37.xyz, cb9[r11.w + 5].yzwy
          mov r37.w, cb9[r11.w + 6].x
          dp4 r36.y, r37.xyzw, r10.xyzw
          div r20.xy, r36.xyxx, r18.wwww
          lt r18.w, cb9[r11.w + 10].w, l(0.00048828)
          if_nz r18.w
            mad_sat r36.xy, |r20.xyxx|, cb9[r11.w + 12].xyxx, cb9[r11.w + 12].zwzz
            mul r36.zw, r36.xxxy, r36.xxxy
            mad r36.xy, r36.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r36.xy, r36.xyxx, r36.zwzz
            mul r18.w, r36.y, r36.x
          else 
            mul_sat r36.xyzw, |r20.yyxx|, cb9[r11.w + 11].xyzw
            log r36.xyzw, r36.xyzw
            mul r36.xyzw, r36.xyzw, cb9[r11.w + 12].zzzz
            exp r36.xyzw, r36.xyzw
            add r36.xy, r36.zwzz, r36.xyxx
            log r36.xy, r36.xyxx
            mul r36.xy, r36.xyxx, cb9[r11.w + 12].wwww
            exp r36.xy, r36.xyxx
            mul r27.w, r36.x, cb9[r11.w + 12].x
            mad r28.w, cb9[r11.w + 12].y, r36.y, l(-1.000000)
            mad r27.w, cb9[r11.w + 12].y, r36.y, -r27.w
            div_sat r27.w, r28.w, r27.w
            mul r28.w, r27.w, r27.w
            mad r27.w, r27.w, l(-2.000000), l(3.000000)
            mul r18.w, r27.w, r28.w
          endif 
          mul r20.w, r18.w, r25.w
          and r18.w, l(255), cb9[r11.w + 14].w
          if_nz r18.w
            dp3 r25.w, cb9[r11.w + 13].xyzx, r20.xyzx
            mov r36.x, cb9[r11.w + 13].w
            mov r36.yz, cb9[r11.w + 14].xxyx
            dp3 r20.x, r36.xyzx, r20.xyzx
            frc r36.x, r25.w
            frc r36.y, r20.x
            iadd r18.w, r18.w, l(-1)
            utof r36.z, r18.w
            sample_l_indexable(texture2darray)(float,float,float,float) r35.xyz, r36.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r35.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r36.x, cb9[r11.w + 0].w
        mov r36.yz, cb9[r11.w + 1].xxyx
        mul r35.xyz, r35.xyzx, r36.xyzx
        lt r18.w, l(0.000000), r20.w
        if_nz r18.w
          ine r13.z, r13.z, l(1)
          if_nz r13.z
            mad r13.z, |r16.w|, l(-0.200000), l(0.400000)
            mad r21.xyz, r11.xyzx, r13.zzzz, r10.xyzx
            mov r36.xyz, cb9[r11.w + 6].yzwy
            mov r36.w, cb9[r11.w + 7].x
            dp4 r13.z, r36.xyzw, r21.xyzw
            dp4 r18.w, r34.xyzw, r21.xyzw
            ge r20.x, r18.w, r13.z
            if_nz r20.x
              mov r34.xyz, cb9[r11.w + 4].yzwy
              mov r34.w, cb9[r11.w + 5].x
              dp4 r20.x, r34.xyzw, r21.xyzw
              mov r34.xyz, cb9[r11.w + 5].yzwy
              mov r34.w, cb9[r11.w + 6].x
              dp4 r20.y, r34.xyzw, r21.xyzw
              div r20.xy, r20.xyxx, r18.wwww
              mad_sat r20.xy, r20.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r21.x, r20.x, cb9[r11.w + 8].y, cb9[r11.w + 8].z
              mad r21.y, r20.y, cb9[r11.w + 8].w, cb9[r11.w + 9].x
              div r13.z, r13.z, r18.w
              max r13.z, r13.z, l(0.00006104)
              and r18.w, l(0x0000ffff), cb9[r11.w + 1].w
              if_nz r7.w
                utof r34.z, r18.w
                mov r20.xy, l(0,0,0,0)
                loop 
                  ige r25.w, r20.y, l(8)
                  breakc_nz r25.w
                  dp2 r36.x, icb[r20.y + 0].yxyy, r19.xyxx
                  dp2 r36.y, icb[r20.y + 0].yxyy, r19.yzyy
                  mad r34.xy, r36.xyxx, cb9[r11.w + 3].yyyy, r21.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.w, r34.xyzx, t9.xxxx, s13, r13.z
                  mad r20.x, r25.w, l(0.125000), r20.x
                  iadd r20.y, r20.y, l(1)
                endloop 
              else 
                utof r21.z, r18.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.x, r21.xyzx, t9.xxxx, s13, r13.z
              endif 
              mul r13.z, r20.x, r20.x
              mul r13.z, r20.x, r13.z
            else 
              mov r13.z, l(1.000000)
            endif 
          else 
            mov r13.z, l(1.000000)
          endif 
          mul r13.z, r13.z, r20.w
          lt r18.w, l(0.000000), r13.z
          if_nz r18.w
            ubfe r18.w, l(4), l(16), cb9[r11.w + 1].w
            ult r20.y, l(0), r18.w
            and r20.y, r9.z, r20.y
            if_nz r20.y
              iadd r18.w, r18.w, cb2[0].x
              imad r18.w, r18.w, l(15), l(-15)
              mad r20.y, |r16.w|, l(-0.200000), l(0.400000)
              mad r22.xyz, r11.xyzx, r20.yyyy, r10.xyzx
              mov r34.xyz, cb9[r18.w + 6].yzwy
              mov r34.w, cb9[r18.w + 7].x
              dp4 r20.y, r34.xyzw, r22.xyzw
              mov r34.xyz, cb9[r18.w + 7].yzwy
              mov r34.w, cb9[r18.w + 8].x
              dp4 r20.w, r34.xyzw, r22.xyzw
              lt r21.x, r20.w, r20.y
              if_z r21.x
                mov r34.xyz, cb9[r18.w + 4].yzwy
                mov r34.w, cb9[r18.w + 5].x
                dp4 r34.x, r34.xyzw, r22.xyzw
                mov r36.xyz, cb9[r18.w + 5].yzwy
                mov r36.w, cb9[r18.w + 6].x
                dp4 r34.y, r36.xyzw, r22.xyzw
                div r21.yz, r34.xxyx, r20.wwww
                mad r21.yz, r21.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r22.x, r21.y, cb9[r18.w + 9].w
                add r22.y, r21.z, cb9[r18.w + 10].x
                mul r21.yz, r22.xxyx, cb9[r18.w + 9].yyzy
                div r22.xy, cb9[r18.w + 3].yyyy, cb9[r18.w + 8].ywyy
                add r34.xy, -r22.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r34.xy, r21.yzyy, r34.xyxx
                ge r22.xy, r22.xyxx, r21.yzyy
                or r22.xy, r22.xyxx, r34.xyxx
                or r22.x, r22.y, r22.x
                if_z r22.x
                  mov_sat r21.yz, r21.yyzy
                  mad r34.x, r21.y, cb9[r18.w + 8].y, cb9[r18.w + 8].z
                  mad r34.y, r21.z, cb9[r18.w + 8].w, cb9[r18.w + 9].x
                  mul r21.y, r20.w, cb9[r18.w + 10].z
                  mad r20.y, cb9[r18.w + 10].y, r20.w, r20.y
                  div r20.y, r20.y, r21.y
                endif 
              else 
                mov r22.x, l(-1)
              endif 
              or r20.w, r21.x, r22.x
              if_z r20.w
                max r20.y, r20.y, l(0.00006104)
                and r20.w, l(0x0000ffff), cb9[r18.w + 1].w
                if_nz r7.w
                  utof r21.z, r20.w
                  mov r22.xy, l(0,0,0,0)
                  loop 
                    ige r22.z, r22.y, l(8)
                    breakc_nz r22.z
                    dp2 r36.x, icb[r22.y + 0].yxyy, r19.xwxx
                    dp2 r36.y, icb[r22.y + 0].xyxx, r13.xyxx
                    mad r21.xy, r36.xyxx, cb9[r18.w + 3].yyyy, r34.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r20.y
                    mad r22.x, r21.x, l(0.125000), r22.x
                    iadd r22.y, r22.y, l(1)
                  endloop 
                else 
                  utof r34.z, r20.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r34.xyzx, t9.xxxx, s13, r20.y
                endif 
                mul r18.w, r22.x, r22.x
                mul r18.w, r22.x, r18.w
              else 
                mov r18.w, l(1.000000)
              endif 
              mul r13.z, r13.z, r18.w
            else 
              ubfe r18.w, l(4), l(20), cb9[r11.w + 1].w
              ult r20.y, l(0), r18.w
              and r20.y, r0.z, r20.y
              if_nz r20.y
                iadd r18.w, r18.w, cb2[0].x
                imad r18.w, r18.w, l(15), l(-15)
                mad r20.y, |r16.w|, l(-0.200000), l(0.400000)
                mad r23.xyz, r11.xyzx, r20.yyyy, r10.xyzx
                mov r34.xyz, cb9[r18.w + 6].yzwy
                mov r34.w, cb9[r18.w + 7].x
                dp4 r20.y, r34.xyzw, r23.xyzw
                mov r34.xyz, cb9[r18.w + 7].yzwy
                mov r34.w, cb9[r18.w + 8].x
                dp4 r20.w, r34.xyzw, r23.xyzw
                lt r21.x, r20.w, r20.y
                if_z r21.x
                  mov r34.xyz, cb9[r18.w + 4].yzwy
                  mov r34.w, cb9[r18.w + 5].x
                  dp4 r34.x, r34.xyzw, r23.xyzw
                  mov r36.xyz, cb9[r18.w + 5].yzwy
                  mov r36.w, cb9[r18.w + 6].x
                  dp4 r34.y, r36.xyzw, r23.xyzw
                  div r21.yz, r34.xxyx, r20.wwww
                  mad r21.yz, r21.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                  add r23.x, r21.y, cb9[r18.w + 9].w
                  add r23.y, r21.z, cb9[r18.w + 10].x
                  mul r21.yz, r23.xxyx, cb9[r18.w + 9].yyzy
                  div r22.yz, cb9[r18.w + 3].yyyy, cb9[r18.w + 8].yywy
                  add r23.xy, -r22.yzyy, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r23.xy, r21.yzyy, r23.xyxx
                  ge r22.yz, r22.yyzy, r21.yyzy
                  or r22.yz, r22.yyzy, r23.xxyx
                  or r22.y, r22.z, r22.y
                  if_z r22.y
                    mov_sat r21.yz, r21.yyzy
                    mad r23.x, r21.y, cb9[r18.w + 8].y, cb9[r18.w + 8].z
                    mad r23.y, r21.z, cb9[r18.w + 8].w, cb9[r18.w + 9].x
                    mul r21.y, r20.w, cb9[r18.w + 10].z
                    mad r20.y, cb9[r18.w + 10].y, r20.w, r20.y
                    div r20.y, r20.y, r21.y
                  endif 
                else 
                  mov r22.y, l(-1)
                endif 
                or r20.w, r21.x, r22.y
                if_z r20.w
                  max r20.y, r20.y, l(0.00006104)
                  and r20.w, l(0x0000ffff), cb9[r18.w + 1].w
                  if_nz r7.w
                    utof r21.z, r20.w
                    mov r22.yz, l(0,0,0,0)
                    loop 
                      ige r25.w, r22.z, l(8)
                      breakc_nz r25.w
                      dp2 r34.x, icb[r22.z + 0].xyxx, r25.xyxx
                      dp2 r34.y, icb[r22.z + 0].yxyy, r25.xzxx
                      mad r21.xy, r34.xyxx, cb9[r18.w + 3].yyyy, r23.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r20.y
                      mad r22.y, r21.x, l(0.125000), r22.y
                      iadd r22.z, r22.z, l(1)
                    endloop 
                  else 
                    utof r23.z, r20.w
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.y, r23.xyzx, t9.xxxx, s13, r20.y
                  endif 
                  mul r18.w, r22.y, r22.y
                  mul r18.w, r22.y, r18.w
                else 
                  mov r18.w, l(1.000000)
                endif 
                mul r13.z, r13.z, r18.w
              endif 
            endif 
            mad r18.w, -r17.w, r2.x, l(1.000000)
            mul r18.w, r18.w, r18.w
            mad r18.w, -r18.w, l(0.620000), l(0.620000)
            add r18.w, -r17.w, r18.w
            mad r18.w, r1.z, r18.w, r17.w
            mul r18.w, r13.z, r18.w
            lt r16.w, l(0.000000), r16.w
            mad r21.xyz, r18.wwww, r35.xyzx, r15.yzwy
            mad r23.xyz, r33.xyzx, r13.wwww, r12.xyzx
            dp3 r13.w, r23.xyzx, r23.xyzx
            rsq r13.w, r13.w
            mul r23.xyz, r13.wwww, r23.xyzx
            dp3 r13.w, r23.xyzx, r12.xyzx
            dp3 r18.w, r11.xyzx, r23.xyzx
            mad r20.y, |r18.w|, r0.w, -|r18.w|
            mad r18.w, |r18.w|, r20.y, l(1.000000)
            mad r20.y, r17.w, r0.x, r1.w
            mul r18.w, r18.w, r18.w
            mul r18.w, r20.y, r18.w
            rcp r18.w, r18.w
            mul r14.w, r14.w, r17.w
            mul r14.w, r14.w, r18.w
            mul r13.z, r13.z, r14.w
            mad r23.xyz, r13.zzzz, r35.xyzx, r32.xyzx
            add_sat r13.w, -r13.w, l(1.000000)
            mul r14.w, r13.w, r13.w
            mul r14.w, r14.w, r14.w
            mul r13.w, r13.w, r14.w
            mul r13.z, r13.w, r13.z
            mad r33.xyz, r13.zzzz, r35.xyzx, r31.xyzx
            movc r15.yzw, r16.wwww, r21.xxyz, r15.yyzw
            movc r31.xyz, r16.wwww, r33.xyzx, r31.xyzx
            movc r32.xyz, r16.wwww, r23.xyzx, r32.xyzx
          endif 
        endif 
      endif 
    else 
      ieq r12.w, r12.w, l(4)
      if_nz r12.w
        ubfe r12.w, l(3), l(27), cb9[r11.w + 1].w
        mul r13.z, r0.w, cb9[r11.w + 1].z
        mul r13.z, r13.z, l(0.250000)
        lt r13.w, l(0.000000), cb9[r11.w + 6].y
        mov r21.xy, cb9[r11.w + 5].zwzz
        mov r21.z, cb9[r11.w + 6].x
        mad r23.xyz, -r21.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), cb9[r11.w + 0].xyzx
        add r33.xyz, -r10.xyzx, r23.xyzx
        dp3 r14.w, r21.xyzx, r16.xyzx
        dp3 r16.w, r21.xyzx, r33.xyzx
        dp3 r17.w, r16.xyzx, r33.xyzx
        mad r18.w, -r14.w, r14.w, cb9[r11.w + 6].y
        mad r14.w, r14.w, r17.w, -r16.w
        div_sat r16.w, -r16.w, cb9[r11.w + 6].y
        div_sat r14.w, r14.w, r18.w
        div r17.w, r18.w, cb9[r11.w + 6].y
        mul r17.w, r17.w, l(10.000000)
        min r17.w, r17.w, l(1.000000)
        add r14.w, -r16.w, r14.w
        mad r14.w, r17.w, r14.w, r16.w
        mad r33.xyz, r14.wwww, r21.xyzx, r23.xyzx
        mad r21.xyz, r16.wwww, r21.xyzx, r23.xyzx
        movc r21.xyz, r13.wwww, r21.xyzx, cb9[r11.w + 0].xyzx
        movc r23.xyz, r13.wwww, r33.xyzx, cb9[r11.w + 0].xyzx
        add r23.xyz, -r10.xyzx, r23.xyzx
        add r21.xyz, -r10.xyzx, r21.xyzx
        dp3 r13.w, r23.xyzx, r23.xyzx
        rsq r13.w, r13.w
        mul r33.xyz, r13.wwww, r23.xyzx
        dp3 r14.w, r21.xyzx, r21.xyzx
        rsq r16.w, r14.w
        mul r21.xyz, r16.wwww, r21.xyzx
        dp3 r16.w, r11.xyzx, r21.xyzx
        mov_sat r17.w, r16.w
        lt r18.w, l(0.000000), r17.w
        if_nz r18.w
          sqrt r18.w, r14.w
          mul r20.y, cb9[r11.w + 3].x, cb9[r11.w + 3].x
          div r14.w, r20.y, r14.w
          min r14.w, r14.w, l(1.000000)
          mad_sat r20.yw, r18.wwww, cb9[r11.w + 2].xxxz, cb9[r11.w + 2].yyyw
          mul r21.xy, r20.ywyy, r20.ywyy
          mad r20.yw, r20.yyyw, l(0.000000, -2.000000, 0.000000, -2.000000), l(0.000000, 3.000000, 0.000000, 3.000000)
          mul r20.yw, r20.yyyw, r21.xxxy
          mul r14.w, r14.w, r20.y
          mul r14.w, r20.w, r14.w
          lt r18.w, l(0.000000), r14.w
          if_nz r18.w
            ine r12.w, r12.w, l(1)
            if_nz r12.w
              mad r12.w, |r16.w|, l(-0.200000), l(0.400000)
              mad r21.xyz, r11.xyzx, r12.wwww, r10.xyzx
              add r21.xyz, r21.xyzx, -cb9[r11.w + 4].yzwy
              max r12.w, |r21.z|, |r21.y|
              max r12.w, r12.w, |r21.x|
              div r12.w, cb9[r11.w + 5].x, r12.w
              add r12.w, r12.w, cb9[r11.w + 5].y
              dp3 r18.w, r21.xyzx, r21.xyzx
              rsq r18.w, r18.w
              max r12.w, r12.w, l(0.00006104)
              and r20.y, l(0x0000ffff), cb9[r11.w + 1].w
              utof r34.w, r20.y
              mov r20.yw, l(0,0,0,0)
              loop 
                ige r22.z, r20.w, l(8)
                breakc_nz r22.z
                dp2 r35.y, icb[r20.w + 0].xyxx, r14.xyxx
                dp2 r35.z, icb[r20.w + 0].yxyy, r14.xzxx
                mul r35.yz, r35.yyzy, cb9[r11.w + 3].yyyy
                mul r35.x, r15.x, r35.y
                mul r35.w, r3.x, r35.y
                mad r34.xyz, r21.xyzx, r18.wwww, r35.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r22.z, r34.xyzw, t10.xxxx, s13, r12.w
                mad r20.y, r22.z, l(0.125000), r20.y
                iadd r20.w, r20.w, l(1)
              endloop 
            else 
              mov r20.y, l(1.000000)
            endif 
            mul r12.w, r14.w, r20.y
            lt r14.w, l(0.000000), r12.w
            if_nz r14.w
              ubfe r14.w, l(4), l(16), cb9[r11.w + 1].w
              ult r18.w, l(0), r14.w
              and r18.w, r9.z, r18.w
              if_nz r18.w
                iadd r14.w, r14.w, cb2[0].x
                imad r14.w, r14.w, l(15), l(-15)
                mad r18.w, |r16.w|, l(-0.200000), l(0.400000)
                mad r24.xyz, r11.xyzx, r18.wwww, r10.xyzx
                mov r34.xyz, cb9[r14.w + 6].yzwy
                mov r34.w, cb9[r14.w + 7].x
                dp4 r18.w, r34.xyzw, r24.xyzw
                mov r34.xyz, cb9[r14.w + 7].yzwy
                mov r34.w, cb9[r14.w + 8].x
                dp4 r20.w, r34.xyzw, r24.xyzw
                lt r21.x, r20.w, r18.w
                if_z r21.x
                  mov r34.xyz, cb9[r14.w + 4].yzwy
                  mov r34.w, cb9[r14.w + 5].x
                  dp4 r34.x, r34.xyzw, r24.xyzw
                  mov r35.xyz, cb9[r14.w + 5].yzwy
                  mov r35.w, cb9[r14.w + 6].x
                  dp4 r34.y, r35.xyzw, r24.xyzw
                  div r21.yz, r34.xxyx, r20.wwww
                  mad r21.yz, r21.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                  add r24.x, r21.y, cb9[r14.w + 9].w
                  add r24.y, r21.z, cb9[r14.w + 10].x
                  mul r21.yz, r24.xxyx, cb9[r14.w + 9].yyzy
                  div r24.xy, cb9[r14.w + 3].yyyy, cb9[r14.w + 8].ywyy
                  add r34.xy, -r24.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r34.xy, r21.yzyy, r34.xyxx
                  ge r24.xy, r24.xyxx, r21.yzyy
                  or r24.xy, r24.xyxx, r34.xyxx
                  or r22.z, r24.y, r24.x
                  if_z r22.z
                    mov_sat r21.yz, r21.yyzy
                    mad r24.x, r21.y, cb9[r14.w + 8].y, cb9[r14.w + 8].z
                    mad r24.y, r21.z, cb9[r14.w + 8].w, cb9[r14.w + 9].x
                    mul r21.y, r20.w, cb9[r14.w + 10].z
                    mad r18.w, cb9[r14.w + 10].y, r20.w, r18.w
                    div r18.w, r18.w, r21.y
                  endif 
                else 
                  mov r22.z, l(-1)
                endif 
                or r20.w, r21.x, r22.z
                if_z r20.w
                  max r18.w, r18.w, l(0.00006104)
                  and r20.w, l(0x0000ffff), cb9[r14.w + 1].w
                  if_nz r7.w
                    utof r21.z, r20.w
                    mov r22.z, l(0)
                    mov r25.w, l(0)
                    loop 
                      ige r27.w, r25.w, l(8)
                      breakc_nz r27.w
                      dp2 r34.x, icb[r25.w + 0].xyxx, r27.xyxx
                      dp2 r34.y, icb[r25.w + 0].yxyy, r27.xzxx
                      mad r21.xy, r34.xyxx, cb9[r14.w + 3].yyyy, r24.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r18.w
                      mad r22.z, r21.x, l(0.125000), r22.z
                      iadd r25.w, r25.w, l(1)
                    endloop 
                  else 
                    utof r24.z, r20.w
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.z, r24.xyzx, t9.xxxx, s13, r18.w
                  endif 
                  mul r14.w, r22.z, r22.z
                  mul r14.w, r22.z, r14.w
                else 
                  mov r14.w, l(1.000000)
                endif 
                mul r12.w, r12.w, r14.w
              else 
                ubfe r14.w, l(4), l(20), cb9[r11.w + 1].w
                ult r18.w, l(0), r14.w
                and r18.w, r0.z, r18.w
                if_nz r18.w
                  iadd r14.w, r14.w, cb2[0].x
                  imad r14.w, r14.w, l(15), l(-15)
                  mad r18.w, |r16.w|, l(-0.200000), l(0.400000)
                  mad r26.xyz, r11.xyzx, r18.wwww, r10.xyzx
                  mov r34.xyz, cb9[r14.w + 6].yzwy
                  mov r34.w, cb9[r14.w + 7].x
                  dp4 r18.w, r34.xyzw, r26.xyzw
                  mov r34.xyz, cb9[r14.w + 7].yzwy
                  mov r34.w, cb9[r14.w + 8].x
                  dp4 r20.w, r34.xyzw, r26.xyzw
                  lt r21.x, r20.w, r18.w
                  if_z r21.x
                    mov r34.xyz, cb9[r14.w + 4].yzwy
                    mov r34.w, cb9[r14.w + 5].x
                    dp4 r24.x, r34.xyzw, r26.xyzw
                    mov r34.xyz, cb9[r14.w + 5].yzwy
                    mov r34.w, cb9[r14.w + 6].x
                    dp4 r24.y, r34.xyzw, r26.xyzw
                    div r21.yz, r24.xxyx, r20.wwww
                    mad r21.yz, r21.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                    add r24.x, r21.y, cb9[r14.w + 9].w
                    add r24.y, r21.z, cb9[r14.w + 10].x
                    mul r21.yz, r24.xxyx, cb9[r14.w + 9].yyzy
                    div r24.xy, cb9[r14.w + 3].yyyy, cb9[r14.w + 8].ywyy
                    add r26.xy, -r24.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r26.xy, r21.yzyy, r26.xyxx
                    ge r24.xy, r24.xyxx, r21.yzyy
                    or r24.xy, r24.xyxx, r26.xyxx
                    or r24.x, r24.y, r24.x
                    if_z r24.x
                      mov_sat r21.yz, r21.yyzy
                      mad r26.x, r21.y, cb9[r14.w + 8].y, cb9[r14.w + 8].z
                      mad r26.y, r21.z, cb9[r14.w + 8].w, cb9[r14.w + 9].x
                      mul r21.y, r20.w, cb9[r14.w + 10].z
                      mad r18.w, cb9[r14.w + 10].y, r20.w, r18.w
                      div r18.w, r18.w, r21.y
                    endif 
                  else 
                    mov r24.x, l(-1)
                  endif 
                  or r20.w, r21.x, r24.x
                  if_z r20.w
                    max r18.w, r18.w, l(0.00006104)
                    and r20.w, l(0x0000ffff), cb9[r14.w + 1].w
                    if_nz r7.w
                      utof r21.z, r20.w
                      mov r24.xy, l(0,0,0,0)
                      loop 
                        ige r24.z, r24.y, l(8)
                        breakc_nz r24.z
                        dp2 r34.x, icb[r24.y + 0].xyxx, r28.xyxx
                        dp2 r34.y, icb[r24.y + 0].yxyy, r28.xzxx
                        mad r21.xy, r34.xyxx, cb9[r14.w + 3].yyyy, r26.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r21.xyzx, t9.xxxx, s13, r18.w
                        mad r24.x, r21.x, l(0.125000), r24.x
                        iadd r24.y, r24.y, l(1)
                      endloop 
                    else 
                      utof r26.z, r20.w
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r26.xyzx, t9.xxxx, s13, r18.w
                    endif 
                    mul r14.w, r24.x, r24.x
                    mul r14.w, r24.x, r14.w
                  else 
                    mov r14.w, l(1.000000)
                  endif 
                  mul r12.w, r12.w, r14.w
                endif 
              endif 
              mad r14.w, -r17.w, r2.x, l(1.000000)
              mul r14.w, r14.w, r14.w
              mad r14.w, -r14.w, l(0.620000), l(0.620000)
              add r14.w, -r17.w, r14.w
              mad r14.w, r1.z, r14.w, r17.w
              mul r14.w, r12.w, r14.w
              mov r21.x, cb9[r11.w + 0].w
              mov r21.yz, cb9[r11.w + 1].xxyx
              lt r11.w, l(0.000000), r16.w
              mad r26.xyz, r14.wwww, r21.xyzx, r15.yzwy
              dp3_sat r14.w, r11.xyzx, r33.xyzx
              mad r23.xyz, r23.xyzx, r13.wwww, r12.xyzx
              dp3 r13.w, r23.xyzx, r23.xyzx
              rsq r13.w, r13.w
              mul r23.xyz, r13.wwww, r23.xyzx
              dp3 r13.w, r23.xyzx, r12.xyzx
              dp3 r16.w, r11.xyzx, r23.xyzx
              mad r17.w, |r16.w|, r0.w, -|r16.w|
              mad r16.w, |r16.w|, r17.w, l(1.000000)
              mad r17.w, r14.w, r0.x, r1.w
              mul r16.w, r16.w, r16.w
              mul r16.w, r17.w, r16.w
              rcp r16.w, r16.w
              mul r13.z, r13.z, r14.w
              mul r13.z, r13.z, r16.w
              mul r12.w, r12.w, r13.z
              mad r23.xyz, r12.wwww, r21.xyzx, r32.xyzx
              add_sat r13.z, -r13.w, l(1.000000)
              mul r13.w, r13.z, r13.z
              mul r13.w, r13.w, r13.w
              mul r13.z, r13.w, r13.z
              mul r12.w, r12.w, r13.z
              mad r21.xyz, r12.wwww, r21.xyzx, r31.xyzx
              movc r15.yzw, r11.wwww, r26.xxyz, r15.yyzw
              movc r31.xyz, r11.wwww, r21.xyzx, r31.xyzx
              movc r32.xyz, r11.wwww, r23.xyzx, r32.xyzx
            endif 
          endif 
        endif 
      endif 
    endif 
  endloop 
  mov r2.yzw, r15.yyzw
  mov r29.xyz, r31.xyzx
  mov r30.xyz, r32.xyzx
  iadd r5.w, r5.w, l(32)
endloop 
mad r0.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r1.z, r0.y
mad r4.xyz, r5.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r4.x
ieq r1.w, r1.z, r1.w
movc r4.xy, r1.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r5.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r1.w, r1.z, r1.w
movc r4.zw, r1.wwww, r5.yyyz, l(0,0,-1.000000,0)
mad r5.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r1.w, r1.z, r1.w
movc r5.xy, r1.wwww, r5.yzyy, l(-1.000000,0,0,0)
mad r6.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r6.x
ieq r1.z, r1.z, r1.w
movc r1.zw, r1.zzzz, r6.yyyz, l(0,0,-1.000000,0)
mov r6.xy, r4.xzxx
mov r6.z, r5.x
mov r6.w, r1.z
add r6.xyzw, -r0.xxxx, r6.xyzw
ge r6.xyzw, |r6.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r6.xyzw, r6.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r1.z, r6.y, r6.x
add r1.z, r6.z, r1.z
add r1.z, r6.w, r1.z
mul r2.x, r4.w, r6.y
mad r2.x, r6.x, r4.y, r2.x
mad r2.x, r6.z, r5.y, r2.x
mad r1.w, r6.w, r1.w, r2.x
div r0.w, r1.w, r1.z
ge r1.z, l(0.000000), r1.z
movc r0.yz, r1.zzzz, l(0,0,0,0), r0.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.w, r1.w, r1.z
movc r0.xyz, r0.wwww, r0.xyzx, r0.xzyx
mad r0.x, -r0.z, l(0.500000), r0.x
add r4.y, r0.x, r0.z
mad r4.z, -r0.y, l(0.500000), r0.x
add r4.x, r0.y, r4.z
add r0.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r29.xyzx
mad r0.xyz, r30.xyzx, r4.xyzx, r0.xyzx
mad r0.xyz, r2.yzwy, r3.yzwy, r0.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r10.xyzx, r10.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r10.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r10.z|
    mul r3.xy, r10.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r10.z|
    mul r2.w, r10.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r10.z, cb2[6].x
  mad r1.z, cb2[6].x, r10.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r10.xyzx, r10.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r10.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 1862 instruction slots used
