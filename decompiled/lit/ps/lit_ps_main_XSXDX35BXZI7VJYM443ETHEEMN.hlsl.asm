//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:38:27 2021
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float3 colorTint;                  // Offset:  160 Size:    12
//   float baseNormalHeight;            // Offset:  172 Size:     4
//   float2 glossRange;                 // Offset:  176 Size:     8
//   bool useUVOffsets;                 // Offset:  184 Size:     4 [unused]
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16 [unused]
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// colorSampler                      sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// normalSampler                     sampler      NA          NA             s3      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// colorMap                          texture  float4          2d             t0      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// tintMask                          texture  float4          2d            t21      1 
// normalMap                         texture  float4          2d            t22      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// COLOR                    1   x           1     NONE   float   x   
// TEXCOORD                 0    yz         1     NONE   float    yz 
// UVOFFSETS                0   xyz         2     NONE   float       
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
// TEXCOORD                 3   xyz         5     NONE   float   xyz 
// OFFPOSITION              0   xyz         6     NONE   float   xyz 
// SV_IsFrontFace           0   x           7    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB0[12], immediateIndexed
dcl_constantbuffer CB1[93], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t23, 4
dcl_resource_texture2darray (float,float,float,float) t31
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.x
dcl_input_ps linear v1.yz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps_sgv constant v7.x, is_front_face
dcl_output o0.xyzw
dcl_temps 14
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.yzyy, t0.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.x, v1.yzyy, t21.xyzw, s1
add r1.yzw, cb0[10].xxyz, l(0.000000, -1.000000, -1.000000, -1.000000)
mad r1.xyz, r1.xxxx, r1.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r1.xyzx
mul o0.w, r0.w, v1.x
mul_sat r0.w, cb0[11].y, l(0.05882353)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.yzyy, t22.xyzw, s3
add r1.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.000000, 0.000000)
mad r1.xyz, cb0[10].wwww, r1.xyzx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, l(1.99218750, 1.99218750, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r1.xyxx, r1.xyxx
add r1.w, -r1.w, l(1.000000)
max r1.w, r1.w, l(0.000000)
sqrt r1.w, r1.w
mul r1.z, r1.z, r1.z
mul r1.z, r1.z, l(0.33333334)
min r1.z, r1.z, l(1.000000)
movc r2.x, v7.x, l(1.000000), l(-1.000000)
dp3 r2.y, v3.xyzx, v3.xyzx
rsq r2.y, r2.y
mul r2.yzw, r2.yyyy, v3.xxyz
mul r2.yzw, r2.xxxx, r2.yyzw
dp3 r3.x, v4.xyzx, v4.xyzx
rsq r3.x, r3.x
mul r3.xyz, r3.xxxx, v4.xyzx
mul r3.xyz, r2.xxxx, r3.xyzx
dp3 r3.w, v5.xyzx, v5.xyzx
rsq r3.w, r3.w
mul r4.xyz, r3.wwww, v5.xyzx
mul r4.xyz, r2.xxxx, r4.xyzx
mul r0.w, r0.w, l(-17.000000)
exp r0.w, r0.w
add r0.w, r0.w, r1.z
log r0.w, r0.w
mul r0.w, r0.w, l(-0.05882353)
max r5.y, r0.w, l(0.000000)
mul r4.xyz, r1.yyyy, r4.xyzx
mad r1.xyz, r3.xyzx, r1.xxxx, r4.xyzx
mad r1.xyz, r2.yzwy, r1.wwww, r1.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
ftou r2.xy, v0.xyxx
dp3 r0.w, -v6.xyzx, -v6.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, -v6.xyzx
utof r2.xy, r2.xyxx
dp2 r2.x, r2.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r2.x, r2.x
mul r2.x, r2.x, l(52.982918)
frc r2.x, r2.x
mad r2.x, r2.x, l(6.28318548), cb1[70].w
sincos r2.x, r4.x, r2.x
dp3_sat r5.x, r1.xyzx, r3.xyzx
dp3 r2.y, -r3.xyzx, r1.xyzx
add r2.y, r2.y, r2.y
mad r6.xyz, r1.xyzx, -r2.yyyy, -r3.xyzx
add r2.y, -r5.y, l(1.000000)
mul r2.y, r2.y, l(5.000000)
add r4.yzw, v6.xxyz, -cb2[35].xxyz
mul r7.x, r4.y, cb2[35].w
mul r7.yz, r4.zzwz, cb2[36].xxyx
add_sat r4.yzw, r7.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
mul r7.xy, r4.yzyy, cb2[36].zwzz
mul r7.z, r4.w, cb2[37].x
add r4.yzw, r7.xxyz, cb2[37].yyzw
lt r7.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xyzx
movc r7.xyz, r7.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
mov r7.w, l(0)
add r8.xyz, r4.yzwy, r7.wwxw
sample_l_indexable(texture3d)(float,float,float,float) r8.xyz, r8.xyzx, t17.xyzw, s4, l(0.000000)
mul r9.xyz, r1.xyzx, r1.xyzx
mul r9.xyz, r9.xyzx, cb2[19].xxxx
add r10.xyz, r4.yzwy, r7.wwyw
sample_l_indexable(texture3d)(float,float,float,float) r10.xyz, r10.xyzx, t18.xyzw, s4, l(0.000000)
mul r10.xyz, r9.yyyy, r10.xyzx
mad r8.xyz, r8.xyzx, r9.xxxx, r10.xyzx
add r4.yzw, r4.yyzw, r7.wwwz
sample_l_indexable(texture3d)(float,float,float,float) r4.yzw, r4.yzwy, t19.wxyz, s4, l(0.000000)
mad r4.yzw, r4.yyzw, r9.zzzz, r8.xxyz
mov r1.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r7.xyz, r1.xyzw, t8.xyzw, s2, l(6.000000)
mul r4.yzw, r4.yyzw, r7.xxyz
dp3 r1.w, r4.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
mov r6.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r2.yzw, r6.xyzw, t8.wxyz, s2, r2.y
add r3.w, -r1.w, cb2[19].x
mad r1.w, r5.y, r3.w, r1.w
mul r2.yzw, r1.wwww, r2.yyzw
mad r5.zw, r5.xxxy, l(0.000000, 0.000000, 0.984375, 0.984375), l(0.000000, 0.000000, 0.00781250, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r5.zw, r5.zwzz, t5.zwxy, s2, l(0.000000)
mul r6.xyz, r2.yzwy, r5.zzzz
mul r2.yzw, r2.yyzw, r5.wwww
dp3 r1.w, r1.xyzx, cb2[17].xyzx
mov_sat r3.w, r1.w
ge r5.z, l(0.000000), r3.w
if_nz r5.z
  mov r5.w, l(0)
endif 
if_z r5.z
  mul r7.xyz, v6.yyyy, cb2[29].xyzx
  mad r7.xyz, v6.xxxx, cb2[28].xyzx, r7.xyzx
  mad r7.xyz, v6.zzzz, cb2[30].xyzx, r7.xyzx
  add r7.xyz, r7.xyzx, cb2[31].xyzx
  add r5.z, r7.z, -cb2[17].w
  mad r5.z, -r5.z, l(0.00006104), l(1.000000)
  mov_sat r6.w, r5.z
  eq r6.w, r5.z, r6.w
  if_nz r6.w
    mov r6.w, l(0)
    mov r7.w, l(0)
    loop 
      ge r8.x, r6.w, l(3.000000)
      breakc_nz r8.x
      ftou r8.x, r6.w
      add r8.yz, r7.xxyx, -cb2[r8.x + 20].xxyx
      max r8.y, |r8.z|, |r8.y|
      mul r7.w, r8.y, cb2[r8.x + 20].z
      lt r8.x, r7.w, l(1.000000)
      if_nz r8.x
        break 
      endif 
      add r6.w, r6.w, l(1.000000)
      mov r7.w, l(0)
    endloop 
  else 
    mov r6.w, l(3.000000)
    mov r7.w, l(0)
  endif 
  ge r8.x, r6.w, l(3.000000)
  if_nz r8.x
    mul r8.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r9.xz, r8.yyyy
    mov r9.y, -r9.z
    mad r8.yzw, r7.xxyx, r9.xxyz, r8.zzwz
    add r9.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r8.yzw, r8.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r8.yzw, r9.xxyz, r8.yyzw
    mul r9.xy, r8.wzww, cb2[32].xxxx
    round_ni r9.xy, r9.xyxx
    mul r9.y, r9.y, cb2[27].x
    mad r9.x, r9.y, cb2[32].x, r9.x
    ftou r9.x, r9.x
    iadd r9.x, r9.x, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.y, r9.x, l(0), t23.xxxx
    and r9.z, r9.y, l(0x40000000)
    ishl r9.w, r9.y, l(2)
    if_z r9.z
      and r9.z, r9.y, l(0x01ffffff)
      iadd r10.x, r9.z, r9.x
      ushr r9.x, r9.y, l(25)
      utof r9.x, r9.x
      mul r8.yzw, r8.yyzw, r9.xxxx
      frc r8.yzw, r8.yyzw
      mul r8.yzw, r8.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r8.yzw, r8.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.z, r10.x, l(0), t23.xxxx
      ushr r9.xy, r8.wzww, l(6, 6, 0, 0)
      and r9.z, r10.z, l(0xc0000000)
      iadd r10.w, r10.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r10.w, l(0), t23.xxxx
      movc r9.y, r9.y, r10.z, r10.w
      ushr r10.w, r9.y, l(13)
      movc r9.x, r9.x, r10.w, r9.y
      and r9.x, r9.x, l(8191)
      iadd r11.x, r9.x, r10.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.z, r11.x, l(0), t23.xxxx
      mov r10.y, l(0)
      mov r11.y, l(1)
      movc r11.xyz, r9.zzzz, r10.xyzx, r11.xyzx
      movc r12.yz, r9.zzzz, l(0,6,1,0), l(0,5,2,0)
      ushr r9.xy, r8.wzww, r12.yyyy
      and r9.xy, r9.xyxx, l(1, 1, 0, 0)
      and r10.w, r11.z, l(0xc0000000)
      iadd r11.w, r11.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r11.w, l(0), t23.xxxx
      movc r9.y, r9.y, r11.z, r11.w
      ushr r11.w, r9.y, l(13)
      movc r9.x, r9.x, r11.w, r9.y
      and r9.x, r9.x, l(8191)
      iadd r12.x, r9.x, r11.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.w, r12.x, l(0), t23.xxxx
      movc r11.xyz, r10.wwww, r11.xyzx, r12.xzwx
      movc r9.xyz, r9.zzzz, r10.xyzx, r11.xyzx
      and r10.x, r9.z, l(0xc0000000)
      if_z r10.x
        iadd r10.x, -r9.y, l(6)
        ushr r10.xy, r8.wzww, r10.xxxx
        or r10.z, r9.z, l(0x40000000)
        bfi r10.y, l(1), l(1), r10.y, l(0)
        bfi r10.x, l(1), l(0), r10.x, r10.y
        imul null, r10.x, r10.x, l(10)
        ushr r10.x, r10.z, r10.x
        and r10.x, r10.x, l(1023)
        iadd r10.x, r9.x, r10.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r10.x, l(0), t23.xxxx
        iadd r10.yz, r9.yyyy, l(0, 1, 2, 0)
        iadd r9.y, -r10.y, l(6)
        ushr r11.xy, r8.wzww, r9.yyyy
        and r9.y, r10.w, l(0xc0000000)
        or r11.z, r10.w, l(0x40000000)
        bfi r11.y, l(1), l(1), r11.y, l(0)
        bfi r11.x, l(1), l(0), r11.x, r11.y
        imul null, r11.x, r11.x, l(10)
        ushr r11.x, r11.z, r11.x
        and r11.x, r11.x, l(1023)
        iadd r11.x, r10.x, r11.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.z, r11.x, l(0), t23.xxxx
        mov r11.y, r10.z
        movc r11.xyz, r9.yyyy, r10.xywx, r11.xyzx
        iadd r10.y, -r11.y, l(6)
        ushr r10.yz, r8.wwzw, r10.yyyy
        and r11.y, r11.z, l(0xc0000000)
        or r11.w, r11.z, l(0x40000000)
        bfi r10.z, l(1), l(1), r10.z, l(0)
        bfi r10.y, l(1), l(0), r10.y, r10.z
        imul null, r10.y, r10.y, l(10)
        ushr r10.y, r11.w, r10.y
        and r10.y, r10.y, l(1023)
        iadd r12.x, r10.y, r11.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.y, r12.x, l(0), t23.xxxx
        movc r10.yz, r11.yyyy, r11.xxzx, r12.xxyx
        movc r9.xz, r9.yyyy, r10.xxwx, r10.yyzy
      endif 
      and r9.y, r9.z, l(0xc0000000)
      if_z r9.y
        ubfe r10.x, l(14), l(15), r9.z
        utof r10.x, r10.x
        mul r10.x, r10.x, cb2[27].w
        and r10.yz, r9.zzzz, l(0, 0x00007fff, 0x20000000, 0)
        utof r10.y, r10.y
        mul r10.y, r10.y, cb2[27].w
        mul r10.xy, r10.xyxx, l(0.00006104, 0.00003052, 0.000000, 0.000000)
        and r10.w, r8.z, l(3)
        iadd r10.w, r9.x, r10.w
        iadd r10.w, r10.w, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r10.w, l(0), t23.xxxx
        bfi r11.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r8.yzwy, l(0, 0, 0, 0)
        ushr r8.y, r10.w, r11.x
        and r8.y, r8.y, l(255)
        utof r8.y, r8.y
        mul r8.y, r10.y, r8.y
        mad r8.y, r8.y, l(0.00392157), r10.x
        iadd r8.z, r11.y, l(1)
        ubfe r8.w, l(1), l(1), r8.w
        iadd r8.z, r8.w, r8.z
        iadd r8.z, r8.z, r9.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.z, r8.z, l(0), t23.xxxx
        ushr r8.z, r8.z, r11.z
        and r8.z, r8.z, l(0x0000ffff)
        utof r8.z, r8.z
        mul r8.z, r10.y, r8.z
        mad r8.z, r8.z, l(0.00001526), r10.x
        movc r9.w, r10.z, r8.y, r8.z
      else 
        and r8.y, r9.z, l(0x80000000)
        iadd r8.z, r9.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.z, r8.z, l(0), t23.xxxx
        movc r8.y, r8.y, r8.z, l(0)
        ishl r8.z, r9.z, l(2)
        ushr r8.w, r8.y, l(16)
        and r8.y, r8.y, l(0x0000ffff)
        f16tof32 r8.yw, r8.yyyw
        mad r8.z, r7.x, r8.w, r8.z
        mad r8.y, r7.y, r8.y, r8.z
        movc r9.w, r9.y, r8.y, r9.w
      endif 
    endif 
    mad r7.z, -cb2[27].z, l(2.000000), r7.z
    lt r7.z, r9.w, r7.z
    movc r5.w, r7.z, l(0), l(1.000000)
  endif 
  if_z r8.x
    if_z cb2[58].y
      ftou r7.z, r6.w
      add r8.xy, r7.xyxx, -cb2[r7.z + 20].xyxx
      mul r8.xy, r8.xyxx, cb2[r7.z + 20].zzzz
      mad r8.xy, r8.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r7.z, cb2[26].y
      add r8.z, r6.w, r7.z
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r7.z, r8.xyzx, t13.xxxx, s13, r5.z
      sample_l_indexable(texture2darray)(float,float,float,float) r8.x, r8.xyzx, t31.xyzw, s0, l(0.000000)
      add r7.z, r7.z, r8.x
      add_sat r7.z, r7.z, l(-1.000000)
      mul r8.x, r7.z, r7.z
      mul r5.w, r7.z, r8.x
    endif 
    if_nz cb2[58].y
      mov r8.x, -r2.x
      ftou r7.z, r6.w
      add r6.w, r6.w, l(1.000000)
      min r6.w, r6.w, l(2.000000)
      ftou r6.w, r6.w
      add r7.w, -r7.w, l(1.000000)
      mul r7.w, r7.w, l(28.000000)
      ftou r7.w, r7.w
      add r9.xy, r7.xyxx, -cb2[r7.z + 20].xyxx
      mul r9.xy, r9.xyxx, cb2[r7.z + 20].zzzz
      mad r9.xy, r9.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r7.xy, r7.xyxx, -cb2[r6.w + 20].xyxx
      mul r7.xy, r7.xyxx, cb2[r6.w + 20].zzzz
      mad r7.xy, r7.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mov r8.y, r4.x
      mov r8.z, r2.x
      mov r8.w, l(0)
      mov r9.z, l(0)
      loop 
        uge r9.w, r9.z, l(8)
        breakc_nz r9.w
        ult r9.w, r7.w, r9.z
        movc r10.xy, r9.wwww, r7.xyxx, r9.xyxx
        movc r10.z, r9.w, cb2[r6.w + 20].w, cb2[r7.z + 20].w
        movc r9.w, r9.w, r6.w, r7.z
        dp2 r11.x, icb[r9.z + 0].yxyy, r8.xyxx
        dp2 r11.y, icb[r9.z + 0].yxyy, r8.yzyy
        mad r10.xy, r11.xyxx, r10.zzzz, r10.xyxx
        iadd r9.w, r9.w, cb2[26].y
        utof r10.z, r9.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r10.xyzx, t13.xxxx, s13, r5.z
        sample_l_indexable(texture2darray)(float,float,float,float) r10.x, r10.xyzx, t31.xyzw, s0, l(0.000000)
        add r9.w, r9.w, r10.x
        add_sat r9.w, r9.w, l(-1.000000)
        mad r8.w, r9.w, l(0.125000), r8.w
        iadd r9.z, r9.z, l(1)
      endloop 
      mul r5.z, r8.w, r8.w
      mul r5.w, r8.w, r5.z
    endif 
  endif 
endif 
lt r5.z, l(0.000000), r3.w
if_nz r5.z
  lt r5.z, l(0.000000), r5.w
  if_nz r5.z
    ine r5.z, cb1[92].x, l(0)
    mul r5.y, r5.y, l(17.000000)
    exp r5.y, r5.y
    add r5.y, r5.y, l(2.000000)
    div r5.y, l(2.000000), r5.y
    sqrt r6.w, r5.y
    sqrt r7.x, r6.w
    mad r7.x, r7.x, l(0.500000), l(0.500000)
    mul r7.x, r7.x, r7.x
    mul r7.y, r7.x, l(0.500000)
    mad r7.x, -r7.x, l(0.500000), l(1.000000)
    mad r7.z, r5.x, r7.x, r7.y
    mul r7.xy, r7.zzzz, r7.xyxx
    mul r7.z, r5.y, cb2[18].w
    mul r7.z, r3.w, r7.z
    if_nz cb2[23].x
      add r8.xyz, v6.xyzx, cb1[24].xyzx
      mov r8.w, l(1.000000)
      dp4 r7.w, cb2[24].xyzw, r8.xyzw
      dp4 r8.x, cb2[25].xyzw, r8.xyzw
      frc r9.x, r7.w
      frc r9.y, r8.x
      iadd r7.w, l(-1), cb2[23].x
      utof r9.z, r7.w
      sample_l_indexable(texture2darray)(float,float,float,float) r8.xyz, r9.xyzx, t20.xyzw, s2, l(0.000000)
      add r8.xyz, r8.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r8.xyz, cb2[23].yyyy, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r8.xyz, r8.xyzx, cb2[18].xyzx
    else 
      mov r8.xyz, cb2[18].xyzx
    endif 
    ushr r7.w, cb2[53].x, l(16)
    ult r8.w, l(0), r7.w
    and r8.w, r5.z, r8.w
    if_nz r8.w
      iadd r7.w, r7.w, cb2[0].x
      iadd r7.w, r7.w, l(-1)
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r8.w, r7.w, l(52), t12.xxxx
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r9.xyzw, r7.w, l(68), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.xyzw, r7.w, l(84), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.xyzw, r7.w, l(132), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r7.w, l(148), t12.xyzw
      mad r13.x, |r1.w|, l(-0.200000), l(0.400000)
      mad r13.xyz, r1.xyzx, r13.xxxx, v6.xyzx
      mov r13.w, l(1.000000)
      dp4 r9.x, r9.xyzw, r13.xyzw
      dp4 r9.y, r10.xyzw, r13.xyzw
      mad r9.xy, r9.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r9.xy, r12.zwzz, r9.xyxx
      mul r9.xy, r12.xyxx, r9.xyxx
      div r9.zw, r8.wwww, r11.xxxz
      add r10.xy, -r9.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r10.xy, r9.xyxx, r10.xyxx
      ge r9.zw, r9.zzzw, r9.xxxy
      or r9.zw, r9.zzzw, r10.xxxy
      or r9.z, r9.w, r9.z
      if_z r9.z
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r9.z, r7.w, l(28), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.xyzw, r7.w, l(100), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xy, r7.w, l(164), t12.xyxx
        dp4 r7.w, r10.xyzw, r13.xyzw
        mov_sat r9.xy, r9.xyxx
        mad r10.xy, r9.xyxx, r11.xzxx, r11.ywyy
        add r7.w, r12.x, r7.w
        div r7.w, r7.w, r12.y
        max r7.w, r7.w, l(0.00006104)
        and r9.x, r9.z, l(0x0000ffff)
        if_nz cb2[58].y
          mov r11.x, -r2.x
          utof r12.z, r9.x
          mov r11.y, r4.x
          mov r11.z, r2.x
          mov r9.yz, l(0,0,0,0)
          loop 
            ige r9.w, r9.z, l(8)
            breakc_nz r9.w
            dp2 r13.x, icb[r9.z + 0].yxyy, r11.xyxx
            dp2 r13.y, icb[r9.z + 0].yxyy, r11.yzyy
            mad r12.xy, r13.xyxx, r8.wwww, r10.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r12.xyzx, t9.xxxx, s13, r7.w
            mad r9.y, r9.w, l(0.125000), r9.y
            iadd r9.z, r9.z, l(1)
          endloop 
        else 
          utof r10.z, r9.x
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.y, r10.xyzx, t9.xxxx, s13, r7.w
        endif 
        mul r7.w, r9.y, r9.y
        mul r7.w, r9.y, r7.w
      else 
        mov r7.w, l(1.000000)
      endif 
      mul r5.w, r5.w, r7.w
    else 
      and r7.w, cb2[53].x, l(0x0000ffff)
      ult r8.w, l(0), r7.w
      not r5.z, r5.z
      and r5.z, r5.z, r8.w
      if_nz r5.z
        iadd r5.z, r7.w, cb2[0].x
        iadd r5.z, r5.z, l(-1)
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r7.w, r5.z, l(52), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r9.xyzw, r5.z, l(68), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.xyzw, r5.z, l(84), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.xyzw, r5.z, l(132), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r5.z, l(148), t12.xyzw
        mad r8.w, |r1.w|, l(-0.200000), l(0.400000)
        mad r13.xyz, r1.xyzx, r8.wwww, v6.xyzx
        mov r13.w, l(1.000000)
        dp4 r9.x, r9.xyzw, r13.xyzw
        dp4 r9.y, r10.xyzw, r13.xyzw
        mad r9.xy, r9.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r9.xy, r12.zwzz, r9.xyxx
        mul r9.xy, r12.xyxx, r9.xyxx
        div r9.zw, r7.wwww, r11.xxxz
        add r10.xy, -r9.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r10.xy, r9.xyxx, r10.xyxx
        ge r9.zw, r9.zzzw, r9.xxxy
        or r9.zw, r9.zzzw, r10.xxxy
        or r8.w, r9.w, r9.z
        if_z r8.w
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r8.w, r5.z, l(28), t12.xxxx
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.xyzw, r5.z, l(100), t12.xyzw
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r9.zw, r5.z, l(164), t12.xxxy
          dp4 r5.z, r10.xyzw, r13.xyzw
          mov_sat r9.xy, r9.xyxx
          mad r10.xy, r9.xyxx, r11.xzxx, r11.ywyy
          add r5.z, r9.z, r5.z
          div r5.z, r5.z, r9.w
          max r5.z, r5.z, l(0.00006104)
          and r8.w, r8.w, l(0x0000ffff)
          if_nz cb2[58].y
            mov r9.x, -r2.x
            utof r11.z, r8.w
            mov r9.y, r4.x
            mov r9.z, r2.x
            mov r2.x, l(0)
            mov r4.x, l(0)
            loop 
              ige r9.w, r4.x, l(8)
              breakc_nz r9.w
              dp2 r12.x, icb[r4.x + 0].yxyy, r9.xyxx
              dp2 r12.y, icb[r4.x + 0].yxyy, r9.yzyy
              mad r11.xy, r12.xyxx, r7.wwww, r10.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r11.xyzx, t9.xxxx, s13, r5.z
              mad r2.x, r9.w, l(0.125000), r2.x
              iadd r4.x, r4.x, l(1)
            endloop 
          else 
            utof r10.z, r8.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r2.x, r10.xyzx, t9.xxxx, s13, r5.z
          endif 
          mul r4.x, r2.x, r2.x
          mul r2.x, r2.x, r4.x
        else 
          mov r2.x, l(1.000000)
        endif 
        mul r5.w, r2.x, r5.w
      endif 
    endif 
    mad r2.x, -r5.x, l(0.500000), l(1.000000)
    mad r2.x, -r3.w, r2.x, l(1.000000)
    mul r2.x, r2.x, r2.x
    mad r2.x, -r2.x, l(0.620000), l(0.620000)
    add r2.x, -r3.w, r2.x
    mad r2.x, r6.w, r2.x, r3.w
    mul r2.x, r5.w, r2.x
    lt r1.w, l(0.000000), r1.w
    mad r9.xyz, r2.xxxx, r8.xyzx, r4.yzwy
    mad r10.xyz, -v6.xyzx, r0.wwww, cb2[17].xyzx
    dp3 r0.w, r10.xyzx, r10.xyzx
    rsq r0.w, r0.w
    mul r10.xyz, r0.wwww, r10.xyzx
    dp3 r0.w, r10.xyzx, r3.xyzx
    dp3 r1.x, r1.xyzx, r10.xyzx
    mad r1.y, |r1.x|, r5.y, -|r1.x|
    mad r1.x, |r1.x|, r1.y, l(1.000000)
    mad r1.y, r3.w, r7.x, r7.y
    mul r1.x, r1.x, r1.x
    mul r1.x, r1.y, r1.x
    rcp r1.x, r1.x
    mul r1.x, r7.z, r1.x
    mul r1.x, r1.x, r5.w
    mul r1.x, r1.x, l(0.250000)
    mad r3.xyz, r1.xxxx, r8.xyzx, r2.yzwy
    add_sat r0.w, -r0.w, l(1.000000)
    mul r1.y, r0.w, r0.w
    mul r1.y, r1.y, r1.y
    mul r0.w, r0.w, r1.y
    mul r0.w, r0.w, r1.x
    mad r1.xyz, r0.wwww, r8.xyzx, r6.xyzx
    movc r4.yzw, r1.wwww, r9.xxyz, r4.yyzw
    movc r6.xyz, r1.wwww, r1.xyzx, r6.xyzx
    movc r2.yzw, r1.wwww, r3.xxyz, r2.yyzw
  endif 
endif 
mul r1.xyz, r6.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r1.xyz, r2.yzwy, l(0.040000, 0.040000, 0.040000, 0.000000), r1.xyzx
mad r0.xyz, r4.yzwy, r0.xyzx, r1.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, v6.xyzx, v6.xyzx
  rsq r1.x, r0.w
  mul r1.xyz, r1.xxxx, v6.xyzx
  sqrt r0.w, r0.w
  lt r1.w, l(0.000000), cb2[13].w
  if_nz r1.w
    mad r2.xy, r0.wwww, cb2[15].xyxx, cb2[14].zwzz
    mul r2.xy, r2.xyxx, cb2[16].xyxx
    lt r1.w, l(0.010000), |v6.z|
    mul r2.zw, v6.zzzz, cb2[15].zzzw
    mul r3.xy, r2.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r3.xy, r3.xyxx
    add r3.xy, -r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r2.zw, r3.xxxy, r2.zzzw
    mul r2.zw, r2.zzzw, r2.xxxy
    movc r2.xy, r1.wwww, r2.zwzz, r2.xyxx
    mul r2.xzw, r2.xxxx, cb2[12].xxyz
    exp r2.xzw, r2.xxzw
    mul r3.xyz, r2.yyyy, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    add r3.xyz, -r2.xzwx, r3.xyzx
    mad r2.xyz, cb2[13].wwww, r3.xyzx, r2.xzwx
  else 
    mad r1.w, r0.w, cb2[15].x, cb2[14].z
    mul r1.w, r1.w, cb2[16].x
    lt r2.w, l(0.010000), |v6.z|
    mul r3.x, v6.z, cb2[15].z
    mul r3.y, r3.x, l(-1.442695)
    exp r3.y, r3.y
    add r3.y, -r3.y, l(1.000000)
    div r3.x, r3.y, r3.x
    mul r3.x, r1.w, r3.x
    movc r1.w, r2.w, r3.x, r1.w
    mul r3.xyz, r1.wwww, cb2[12].xyzx
    exp r2.xyz, r3.xyzx
  endif 
  mad r2.xyz, r2.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r2.xyz, r2.xyzx, -cb2[9].zzzz
  dp3 r1.x, cb2[7].yzwy, -r1.xyzx
  mad r1.y, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r1.z, cb2[8].w, -r1.x, l(1.000000)
  mul r1.z, r1.z, r1.z
  mul r1.z, r1.z, l(12.566371)
  div r1.y, r1.y, r1.z
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.y
  mov_sat r1.x, r1.x
  mad r1.x, r1.x, r1.x, l(1.000000)
  mad r1.x, r1.x, l(0.05968310), l(-1.000000)
  mad r1.x, cb2[8].z, r1.x, l(1.000000)
  mul r1.yzw, r0.wwww, cb2[11].xxyz
  mad r1.xyz, r1.xxxx, cb2[10].xyzx, r1.yzwy
  mul r1.xyz, r1.xyzx, cb2[9].wwww
  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r1.xyz, r1.xyzx, r3.xyzx
  mad r1.xyz, r0.xyzx, r2.xyzx, r1.xyzx
else 
  mul r0.w, v6.z, cb2[6].x
  mad r1.w, cb2[6].x, v6.z, cb2[5].x
  lt r2.x, |r0.w|, l(0.000100)
  min r2.y, r1.w, l(64.000000)
  mul r2.y, r2.y, l(1.442695)
  exp r2.y, r2.y
  mov_sat r2.z, cb2[6].z
  lt r2.w, r1.w, l(0.000000)
  add r1.w, r1.w, l(1.000000)
  movc r1.w, r2.w, r2.y, r1.w
  add r1.w, r1.w, -cb2[6].z
  movc r0.w, r2.x, l(1.000000), r0.w
  div r0.w, r1.w, r0.w
  movc r0.w, r2.x, r2.z, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.w, v6.xyzx, v6.xyzx
  sqrt r2.x, r1.w
  mad r0.w, r0.w, r2.x, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, v6.xyzx
  dp3 r1.w, cb2[7].yzwy, r2.xyzx
  mad_sat r1.w, cb2[8].y, r1.w, cb2[8].x
  add r2.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r2.xyzw, r1.wwww, r2.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r2.w
  add r2.xyz, -r0.xyzx, r2.xyzx
  mad r1.xyz, r0.wwww, r2.xyzx, r0.xyzx
endif 
mul r0.xyz, r1.xyzx, cb1[85].yyyy
ge r1.xyz, r0.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r0.xyz, r0.xyzx, r1.xyzx
min o0.xyz, r0.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ret 
// Approximately 630 instruction slots used
