//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:38:28 2021
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float3 colorTint;                  // Offset:  160 Size:    12
//   float baseNormalHeight;            // Offset:  172 Size:     4
//   float2 glossRange;                 // Offset:  176 Size:     8
//   bool useUVOffsets;                 // Offset:  184 Size:     4 [unused]
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16 [unused]
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16
//   float4 debugNormalOverride;        // Offset:  960 Size:    16
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16
//   float4 debugGlossOverride;         // Offset:  992 Size:    16
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
// Resource bind info for refProbeConstants
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   224
//
// }
//
// Resource bind info for refProbeAttenuationConstants
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// colorSampler                      sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// normalSampler                     sampler      NA          NA             s3      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// colorMap                          texture  float4          2d             t0      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// visibleProbes                     texture    uint     2darray             t7      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// refProbeConstants                 texture  struct         r/o            t15      1 
// refProbeAttenuationConstants      texture  struct         r/o            t16      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// tintMask                          texture  float4          2d            t21      1 
// normalMap                         texture  float4          2d            t22      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// gOit_Pixels                           UAV    uint          2d             u6      1 
// gOit_Nodes                            UAV   uint2     2darray             u7      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyz 
// COLOR                    0   xyz         1     NONE   float   xyz 
// COLOR                    1      w        1     NONE   float      w
// TEXCOORD                 0   xy          2     NONE   float   xy  
// UVOFFSETS                0   xyz         3     NONE   float       
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
// TEXCOORD                 2   xyz         5     NONE   float   xyz 
// TEXCOORD                 3   xyz         6     NONE   float   xyz 
// OFFPOSITION              0   xyz         7     NONE   float   xyz 
// SV_IsFrontFace           0   x           8    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB0[12], immediateIndexed
dcl_constantbuffer CB1[93], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2darray (uint,uint,uint,uint) t7
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_structured t15, 224
dcl_resource_structured t16, 96
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t23, 4
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (uint,uint,uint,uint) u6
dcl_uav_typed_texture2darray (uint,uint,uint,uint) u7
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xy
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps_sgv constant v8.x, is_front_face
dcl_output o0.xyzw
dcl_temps 38
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.x, v2.xyxx, t21.xyzw, s1
add r1.yzw, cb0[10].xxyz, l(0.000000, -1.000000, -1.000000, -1.000000)
mad r1.xyz, r1.xxxx, r1.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r1.xyzx
mul r0.xyz, r0.xyzx, v1.xyzx
mul r1.x, r0.w, v1.w
lt r1.y, l(0.000000), cb1[64].w
if_nz r1.y
  ftoi r1.y, cb1[64].w
  lod r1.z, v2.xyxx, t0.y, s1
  lod r1.w, v2.xyxx, t0.x, s1
  lt r1.z, r1.z, r1.w
  lt r1.w, l(0.000000), r1.w
  and r2.xyz, r1.yyyy, l(1, 2, 4, 0)
  movc r3.xyz, r2.xxxx, l(1.000000,0,1.000000,0), r0.xyzx
  movc r2.xyw, r2.yyyy, l(0,1.000000,0,1.000000), r0.xyxz
  movc r2.xyw, r1.wwww, r3.xyxz, r2.xyxw
  movc r3.xyz, r2.zzzz, l(0,1.000000,0,0), r0.xyzx
  movc r0.xyz, r1.zzzz, r2.xywx, r3.xyzx
endif 
mad r0.w, -r0.w, v1.w, cb1[59].x
mad r1.w, cb1[59].w, r0.w, r1.x
eq r0.w, r1.w, l(0.000000)
if_nz r0.w
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v2.xyxx, t22.xyzw, s3
add r0.w, -cb0[11].x, cb0[11].y
mul_sat r2.w, cb0[11].y, l(0.05882353)
add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.000000, 0.000000)
mad r2.xyz, cb0[10].wwww, r2.xyzx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r2.xy, r2.xyxx, l(1.99218750, 1.99218750, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r3.x, r2.xyxx, r2.xyxx
add r3.x, -r3.x, l(1.000000)
max r3.x, r3.x, l(0.000000)
sqrt r3.x, r3.x
mul r2.z, r2.z, r2.z
mul r2.z, r2.z, l(0.33333334)
min r2.z, r2.z, l(1.000000)
movc r3.y, v8.x, l(1.000000), l(-1.000000)
dp3 r3.z, v4.xyzx, v4.xyzx
rsq r3.z, r3.z
mul r4.xyz, r3.zzzz, v4.xyzx
mul r4.xyz, r3.yyyy, r4.xyzx
dp3 r3.z, v5.xyzx, v5.xyzx
rsq r3.z, r3.z
mul r5.xyz, r3.zzzz, v5.xyzx
mul r5.xyz, r3.yyyy, r5.xyzx
dp3 r3.z, v6.xyzx, v6.xyzx
rsq r3.z, r3.z
mul r6.xyz, r3.zzzz, v6.xyzx
mul r3.yzw, r3.yyyy, r6.xxyz
mul r2.w, r2.w, l(-17.000000)
exp r2.w, r2.w
add r2.w, r2.w, r2.z
log r2.w, r2.w
mul r2.w, r2.w, l(-0.05882353)
max r2.w, r2.w, l(0.000000)
mul r3.yzw, r2.yyyy, r3.yyzw
mad r3.yzw, r5.xxyz, r2.xxxx, r3.yyzw
mad r3.xyz, r4.xyzx, r3.xxxx, r3.yzwy
dp3 r2.x, r3.xyzx, r3.xyzx
rsq r2.x, r2.x
mul r3.xyz, r2.xxxx, r3.xyzx
mad r0.w, cb1[62].x, r0.w, cb0[11].x
mul_sat r0.w, r0.w, l(0.05882353)
mul r0.w, r0.w, l(-17.000000)
exp r0.w, r0.w
add r0.w, r0.w, r2.z
log r0.w, r0.w
mul r0.w, r0.w, l(-0.05882353)
max r0.w, r0.w, l(0.000000)
add r2.xyz, -r0.xyzx, cb1[58].xyzx
mad r0.xyz, cb1[58].wwww, r2.xyzx, r0.xyzx
add r2.xyz, cb1[61].xyzx, l(-0.040000, -0.040000, -0.040000, 0.000000)
mad r2.xyz, cb1[61].wwww, r2.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000)
add r0.w, -r2.w, r0.w
mad r4.y, cb1[62].w, r0.w, r2.w
add r0.w, cb1[63].x, l(-1.000000)
mad r0.w, cb1[63].w, r0.w, l(1.000000)
movc r5.xyz, v8.xxxx, v4.xyzx, -v4.xyzx
dp3 r2.w, r5.xyzx, r5.xyzx
rsq r2.w, r2.w
mad r5.xyz, r5.xyzx, r2.wwww, -r3.xyzx
mad r3.xyz, cb1[60].wwww, r5.xyzx, r3.xyzx
ftou r4.zw, v0.xxxy
ge r2.w, v0.z, l(0.984375)
mul r5.x, v0.z, l(1.01587307)
mad r5.y, v0.z, l(64.000000), l(-63.000000)
movc r2.w, r2.w, r5.y, r5.x
max r2.w, r2.w, l(0.00000001)
rcp r2.w, r2.w
dp3 r5.x, -v7.xyzx, -v7.xyzx
rsq r5.x, r5.x
mul r5.yzw, r5.xxxx, -v7.xxyz
utof r6.xy, r4.zwzz
dp2 r6.x, r6.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r6.x, r6.x
mul r6.x, r6.x, l(52.982918)
frc r6.x, r6.x
mad r6.x, r6.x, l(6.28318548), cb1[70].w
sincos r6.x, r7.x, r6.x
dp3_sat r4.x, r3.xyzx, r5.yzwy
dp3 r6.y, -r5.yzwy, r3.xyzx
add r6.y, r6.y, r6.y
mad r8.xyz, r3.xyzx, -r6.yyyy, -r5.yzwy
mul r6.y, r4.y, l(17.000000)
exp r6.y, r6.y
add r6.y, r6.y, l(2.000000)
div r6.y, l(2.000000), r6.y
sqrt r6.z, r6.y
add r6.w, -r4.y, l(1.000000)
mul r7.y, r6.w, l(5.000000)
mad r7.z, r6.w, l(5.000000), l(-2.500000)
mul_sat r7.z, r7.z, l(0.400000)
mul r7.z, r7.z, l(100.000000)
mad r9.xy, -r6.wwww, l(10.000000, 5.000000, 0.000000, 0.000000), l(6.857410, 7.085000, 0.000000, 0.000000)
exp r7.w, r9.x
mul r7.w, r4.x, r7.w
mul r7.w, r7.w, l(9.136810)
mul r9.x, r6.w, r7.y
mad r9.x, -r9.x, l(2.015905), r9.y
exp r9.x, r9.x
mul r9.x, r4.x, r9.x
mul r9.x, r9.x, l(9.708090)
max r7.w, r7.w, r9.x
max r7.w, r7.w, l(1.268160)
mul r2.w, r2.w, l(0.00781250)
min r2.w, r2.w, l(15.000000)
ftou r2.w, r2.w
ushr r9.xy, r4.zwzz, l(6, 6, 0, 0)
ishl r9.z, r2.w, l(4)
mov r10.xy, l(0,0,0,0)
mov r11.w, l(0)
mov r12.yz, l(0,0,1.000000,0)
mov r13.xy, l(0,0,0,0)
mov r14.xy, l(0,0,0,0)
mov r15.xy, l(0,0,0,0)
mov r16.x, l(1.000000)
mov r17.xyzw, l(0,0,0,0)
mov r18.xyz, l(0,0,0,0)
mov r2.w, l(0)
mov r4.z, l(0)
loop 
  uge r4.w, r4.z, cb2[0].y
  breakc_nz r4.w
  ushr r10.z, r4.z, l(5)
  iadd r11.xyz, r9.xyzx, r10.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r4.w, r11.xyzw, t7.yzwx
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r19.xyzw, r4.z, l(0), t15.wxyz
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r20.xyzw, r4.z, l(16), t15.xyzw
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r21.xyzw, r4.z, l(32), t15.yxwz
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r22.xyzw, r4.z, l(48), t15.xyzw
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r23.xyzw, r4.z, l(64), t15.zwxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r24.xyzw, r4.z, l(80), t15.xyzw
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r10.zw, r4.z, l(96), t15.xxxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r25.xyzw, r4.z, l(116), t15.xyzw
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r26.xyzw, r4.z, l(132), t15.zwxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r27.xyzw, r4.z, l(148), t15.zwxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r28.xyzw, r4.z, l(164), t15.zwxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r29.xyzw, r4.z, l(180), t15.zwxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r30.xyzw, r4.z, l(196), t15.xyzw
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r31.xy, r4.z, l(212), t15.xyxx
  add r11.xyz, -r19.yzwy, v7.xyzx
  dp3 r9.w, r11.xyzx, r11.xyzx
  sqrt r9.w, r9.w
  ge r9.w, cb2[54].y, r9.w
  and r12.w, r25.y, l(0x0000ffff)
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r32.xyzw, r12.w, l(0), t16.xyzw
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r33.xyzw, r12.w, l(16), t16.xyzw
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r34.xyzw, r12.w, l(32), t16.xyzw
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r35.xyzw, r12.w, l(48), t16.xyzw
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r36.xyzw, r12.w, l(64), t16.xyzw
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r37.xyzw, r12.w, l(80), t16.xyzw
  dp3 r13.w, r32.xyzx, r11.xyzx
  add_sat r13.w, r32.w, r13.w
  dp3 r14.w, r33.xyzx, r11.xyzx
  add_sat r14.w, r33.w, r14.w
  mul r13.w, r13.w, r14.w
  dp3 r14.w, r34.xyzx, r11.xyzx
  add_sat r14.w, r34.w, r14.w
  mul r13.w, r13.w, r14.w
  dp3 r14.w, r35.xyzx, r11.xyzx
  add_sat r14.w, r35.w, r14.w
  mul r13.w, r13.w, r14.w
  dp3 r14.w, r36.xyzx, r11.xyzx
  add_sat r14.w, r36.w, r14.w
  mul r13.w, r13.w, r14.w
  dp3 r14.w, r37.xyzx, r11.xyzx
  add_sat r14.w, r37.w, r14.w
  mul r12.x, r13.w, r14.w
  and r13.w, r10.z, l(1)
  movc r16.zw, r13.wwww, r12.xxxy, r12.zzzx
  mov r32.xy, r25.zwzz
  mov r32.z, r26.z
  dp3 r12.x, r8.xyzx, r32.xyzx
  dp3 r13.w, r11.xyzx, r32.xyzx
  add r13.w, -r26.w, r13.w
  ge r14.w, r13.w, l(0.000000)
  max r13.w, r7.z, |r13.w|
  movc r13.w, r14.w, r13.w, -r13.w
  max r12.x, -r12.x, l(0.00000010)
  div r12.x, r13.w, r12.x
  min r12.x, |r12.x|, l(131072.000000)
  mov r26.z, r27.z
  dp3 r13.w, r8.xyzx, r26.xyzx
  dp3 r14.w, r11.xyzx, r26.xyzx
  add r14.w, -r27.w, r14.w
  ge r15.w, r14.w, l(0.000000)
  max r14.w, r7.z, |r14.w|
  movc r14.w, r15.w, r14.w, -r14.w
  max r13.w, -r13.w, l(0.00000010)
  div r13.w, r14.w, r13.w
  min r12.x, r12.x, |r13.w|
  mov r27.z, r28.z
  dp3 r13.w, r8.xyzx, r27.xyzx
  dp3 r14.w, r11.xyzx, r27.xyzx
  add r14.w, -r28.w, r14.w
  ge r15.w, r14.w, l(0.000000)
  max r14.w, r7.z, |r14.w|
  movc r14.w, r15.w, r14.w, -r14.w
  max r13.w, -r13.w, l(0.00000010)
  div r13.w, r14.w, r13.w
  min r12.x, r12.x, |r13.w|
  mov r28.z, r29.z
  dp3 r13.w, r8.xyzx, r28.xyzx
  dp3 r14.w, r11.xyzx, r28.xyzx
  add r14.w, -r29.w, r14.w
  ge r15.w, r14.w, l(0.000000)
  max r14.w, r7.z, |r14.w|
  movc r14.w, r15.w, r14.w, -r14.w
  max r13.w, -r13.w, l(0.00000010)
  div r13.w, r14.w, r13.w
  min r12.x, r12.x, |r13.w|
  mov r29.z, r30.x
  dp3 r13.w, r8.xyzx, r29.xyzx
  dp3 r14.w, r11.xyzx, r29.xyzx
  add r14.w, -r30.y, r14.w
  ge r15.w, r14.w, l(0.000000)
  max r14.w, r7.z, |r14.w|
  movc r14.w, r15.w, r14.w, -r14.w
  max r13.w, -r13.w, l(0.00000010)
  div r13.w, r14.w, r13.w
  min r12.x, r12.x, |r13.w|
  mov r31.zw, r30.zzzw
  dp3 r13.w, r8.zxyz, r31.xzwx
  dp3 r14.w, r11.zxyz, r31.xzwx
  add r14.w, -r31.y, r14.w
  ge r15.w, r14.w, l(0.000000)
  max r14.w, r7.z, |r14.w|
  movc r14.w, r15.w, r14.w, -r14.w
  max r13.w, -r13.w, l(0.00000010)
  div r13.w, r14.w, r13.w
  min r12.x, r12.x, |r13.w|
  mov r26.x, r22.w
  mov r26.yz, r23.zzwz
  add r26.xyz, r11.xyzx, r26.xyzx
  mad r26.xyz, r8.xyzx, r12.xxxx, r26.xyzx
  dp3 r13.w, r26.xyzx, r26.xyzx
  sqrt r13.w, r13.w
  div r12.x, r12.x, r13.w
  add r12.x, r12.x, r12.x
  sqrt r12.x, r12.x
  mad r12.x, r6.w, l(5.000000), r12.x
  add r12.x, r12.x, l(-0.844800)
  mov r19.y, r20.z
  mov r19.z, r21.x
  dp3 r27.x, r26.xyzx, r19.xyzx
  mov r28.xy, r20.xwxx
  mov r28.z, r21.w
  dp3 r27.y, r26.xyzx, r28.xyzx
  mov r21.x, r20.y
  dp3 r27.z, r26.xyzx, r21.xyzx
  ubfe r20.xy, l(6, 9, 0, 0), l(25, 16, 0, 0), r25.yyyy
  utof r27.w, r20.y
  sample_l_indexable(texturecubearray)(float,float,float,float) r20.yzw, r27.xyzw, t8.wxyz, s2, r12.x
  and r25.yzw, r20.yyzw, l(0, 0x7fffffff, 0x7fffffff, 0x7fffffff)
  ieq r25.yzw, r25.yyzw, l(0, 0x7f800000, 0x7f800000, 0x7f800000)
  or r12.x, r25.z, r25.y
  or r12.x, r25.w, r12.x
  movc r20.yzw, r12.xxxx, l(0,1.000000,1.000000,0), r20.yyzw
  dp3 r26.x, r11.xyzx, r19.xyzx
  dp3 r26.y, r11.xyzx, r28.xyzx
  dp3 r26.z, r11.xyzx, r21.xyzx
  mad_sat r22.xyz, r26.xyzx, r22.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mov r23.z, r24.x
  mad r22.xyz, r22.xyzx, r23.xyzx, r24.yzwy
  dp3 r27.x, r3.xyzx, r19.xyzx
  dp3 r27.y, r3.xyzx, r28.xyzx
  dp3 r27.z, r3.xyzx, r21.xyzx
  lt r19.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r27.xyzx
  movc r13.z, r19.x, l(0), l(0.500000)
  add r21.xyz, r13.xyzx, r22.xyzx
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t17.xyzw, s4, l(0.000000)
  movc r14.z, r19.y, l(0), l(0.500000)
  add r19.xyw, r14.xyxz, r22.xyxz
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyw, r19.xywx, t18.xywz, s4, l(0.000000)
  movc r15.z, r19.z, l(0), l(0.500000)
  add r22.xyz, r15.xyzx, r22.xyzx
  sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t19.xyzw, s4, l(0.000000)
  mul r23.xyz, r27.xyzx, r27.xyzx
  sample_l_indexable(texturecubearray)(float,float,float,float) r24.xyz, r27.xyzw, t8.xyzw, s2, l(6.000000)
  and r25.yzw, r24.xxyz, l(0, 0x7fffffff, 0x7fffffff, 0x7fffffff)
  ieq r25.yzw, r25.yyzw, l(0, 0x7f800000, 0x7f800000, 0x7f800000)
  or r12.x, r25.z, r25.y
  or r12.x, r25.w, r12.x
  movc r24.xyz, r12.xxxx, l(1.000000,1.000000,0,0), r24.xyzx
  mov r26.xyzw, r17.yzwx
  mov r25.yzw, r18.xxyz
  mov r12.x, r2.w
  mov r13.z, r4.w
  loop 
    breakc_z r13.z
    firstbit_lo r13.w, r13.z
    ishl r13.w, l(1), r13.w
    and r14.z, r13.w, r13.z
    if_nz r14.z
      not r13.w, r13.w
      and r13.z, r13.w, r13.z
      if_nz r9.w
        mov r13.w, r10.z
        mov r27.xy, r16.zwzz
        mov r14.z, l(1)
        loop 
          ige r14.w, r14.z, r20.x
          breakc_nz r14.w
          iadd r14.w, r12.w, r14.z
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r28.xyzw, r14.w, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r29.xyzw, r14.w, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r30.xyzw, r14.w, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r14.w, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r32.xyzw, r14.w, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r33.xyzw, r14.w, l(80), t16.xyzw
          dp3 r14.w, r28.xyzx, r11.xyzx
          add_sat r14.w, r28.w, r14.w
          mul r14.w, r14.w, r27.x
          dp3 r15.z, r29.xyzx, r11.xyzx
          add_sat r15.z, r29.w, r15.z
          mul r14.w, r14.w, r15.z
          dp3 r15.z, r30.xyzx, r11.xyzx
          add_sat r15.z, r30.w, r15.z
          mul r14.w, r14.w, r15.z
          dp3 r15.z, r31.xyzx, r11.xyzx
          add_sat r15.z, r31.w, r15.z
          mul r14.w, r14.w, r15.z
          dp3 r15.z, r32.xyzx, r11.xyzx
          add_sat r15.z, r32.w, r15.z
          mul r14.w, r14.w, r15.z
          dp3 r15.z, r33.xyzx, r11.xyzx
          add_sat r15.z, r33.w, r15.z
          mul r27.x, r14.w, r15.z
          ushr r15.w, r13.w, l(2)
          ubfe r18.w, l(1), l(2), r13.w
          and r19.z, r15.w, l(2)
          max r21.w, r27.x, r27.y
          mad r14.w, -r14.w, r15.z, l(1.000000)
          mul r14.w, r14.w, r27.y
          movc r16.y, r19.z, r14.w, r21.w
          movc r27.xy, r18.wwww, r27.xyxx, r16.xyxx
          iadd r14.z, r14.z, l(1)
          mov r13.w, r15.w
        endloop 
        mov_sat r27.y, r27.y
        mul r13.w, r10.w, r27.y
        lt r14.z, l(0.000000), r13.w
        if_nz r14.z
          mad r28.w, r27.y, r10.w, r26.w
          mul r13.w, r25.x, r13.w
          mul r27.xzw, r13.wwww, r23.xxyz
          mul r29.xyz, r19.xywx, r27.zzzz
          mad r29.xyz, r21.xyzx, r27.xxxx, r29.xyzx
          mad r27.xzw, r22.xxyz, r27.wwww, r29.xxyz
          mul r29.xyz, r24.xyzx, r27.xzwx
          dp3 r14.z, r29.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
          mad r27.xzw, r27.xxzw, r24.xxyz, r25.yyzw
          mul r14.w, r7.w, r14.z
          mul r29.xyz, r13.wwww, r20.yzwy
          dp3 r13.w, r29.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
          mad r13.w, r7.w, r14.z, r13.w
          div r13.w, r14.w, r13.w
          mad r28.xyz, r29.xyzx, r13.wwww, r26.xyzx
        else 
          mov r28.xyzw, r26.xyzw
          mov r27.xzw, r25.yyzw
        endif 
        mov r12.x, l(-1)
        mov r25.yzw, r27.xxzw
        mov r26.xyzw, r28.xyzw
        break 
      endif 
    endif 
  endloop 
  if_nz r12.x
    mov r17.xyzw, r26.wxyz
    mov r18.xyz, r25.yzwy
    mov r2.w, l(-1)
    break 
  endif 
  iadd r4.z, r4.z, l(32)
  mov r17.xyzw, r26.wxyz
  mov r18.xyz, r25.yzwy
  mov r2.w, r12.x
endloop 
if_z r2.w
  max r2.w, r17.x, l(1.000000)
  rcp r2.w, r2.w
  mov_sat r17.x, r17.x
  mul r9.xyz, r2.wwww, r18.xyzx
  mul r17.yzw, r2.wwww, r17.yyzw
  lt r4.z, r17.x, l(0.990000)
  if_nz r4.z
    add r4.z, -r17.x, l(1.000000)
    mul r4.w, r4.z, cb2[19].x
    add r10.xyz, v7.xyzx, -cb2[35].xyzx
    mul r11.x, r10.x, cb2[35].w
    mul r11.yz, r10.yyzy, cb2[36].xxyx
    add_sat r10.xyz, r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r11.xy, r10.xyxx, cb2[36].zwzz
    mul r11.z, r10.z, cb2[37].x
    add r10.xyz, r11.xyzx, cb2[37].yzwy
    lt r11.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r3.xyzx
    movc r11.xyz, r11.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
    mov r11.w, l(0)
    add r12.xyz, r10.xyzx, r11.wwxw
    sample_l_indexable(texture3d)(float,float,float,float) r12.xyz, r12.xyzx, t17.xyzw, s4, l(0.000000)
    mul r13.xyz, r3.xyzx, r3.xyzx
    mul r13.xyz, r4.wwww, r13.xyzx
    add r14.xyz, r10.xyzx, r11.wwyw
    sample_l_indexable(texture3d)(float,float,float,float) r14.xyz, r14.xyzx, t18.xyzw, s4, l(0.000000)
    mul r14.xyz, r13.yyyy, r14.xyzx
    mad r12.xyz, r12.xyzx, r13.xxxx, r14.xyzx
    add r10.xyz, r10.xyzx, r11.wwzw
    sample_l_indexable(texture3d)(float,float,float,float) r10.xyz, r10.xyzx, t19.xyzw, s4, l(0.000000)
    mad r10.xyz, r10.xyzx, r13.zzzz, r12.xyzx
    mov r3.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r11.xyz, r3.xyzw, t8.xyzw, s2, l(6.000000)
    mul r10.xyz, r10.xyzx, r11.xyzx
    dp3 r3.w, r10.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r18.xyz, r18.xyzx, r2.wwww, r10.xyzx
    mov r8.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r7.yzw, r8.xyzw, t8.wxyz, s2, r7.y
    mad r2.w, cb2[19].x, r4.z, -r3.w
    mad r2.w, r4.y, r2.w, r3.w
    mad r17.yzw, r7.yyzw, r2.wwww, r17.yyzw
  else 
    mov r18.xyz, r9.xyzx
  endif 
endif 
add r2.w, r0.w, r4.x
log r2.w, |r2.w|
mul r2.w, r2.w, r6.z
exp r2.w, r2.w
add r2.w, r0.w, r2.w
add_sat r2.w, r2.w, l(-1.000000)
mul r7.yzw, r0.wwww, r18.xxyz
mad r4.yz, r4.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r4.yz, r4.yzyy, t5.zxyw, s2, l(0.000000)
mul r8.xyz, r2.wwww, r17.yzwy
mul r9.xyz, r4.yyyy, r8.xyzx
mul r4.yzw, r4.zzzz, r8.xxyz
dp3 r0.w, r3.xyzx, cb2[17].xyzx
mov_sat r2.w, r0.w
ge r3.w, l(0.000000), r2.w
if_nz r3.w
  mov r6.w, l(0)
endif 
if_z r3.w
  mul r8.xyz, v7.yyyy, cb2[29].xyzx
  mad r8.xyz, v7.xxxx, cb2[28].xyzx, r8.xyzx
  mad r8.xyz, v7.zzzz, cb2[30].xyzx, r8.xyzx
  add r8.xyz, r8.xyzx, cb2[31].xyzx
  add r3.w, r8.z, -cb2[17].w
  mad r3.w, -r3.w, l(0.00006104), l(1.000000)
  mov_sat r8.w, r3.w
  eq r8.w, r3.w, r8.w
  if_nz r8.w
    mov r8.w, l(0)
    mov r9.w, l(0)
    loop 
      ge r10.x, r8.w, l(3.000000)
      breakc_nz r10.x
      ftou r10.x, r8.w
      add r10.yz, r8.xxyx, -cb2[r10.x + 20].xxyx
      max r10.y, |r10.z|, |r10.y|
      mul r9.w, r10.y, cb2[r10.x + 20].z
      lt r10.x, r9.w, l(1.000000)
      if_nz r10.x
        break 
      endif 
      add r8.w, r8.w, l(1.000000)
      mov r9.w, l(0)
    endloop 
  else 
    mov r8.w, l(3.000000)
    mov r9.w, l(0)
  endif 
  ge r10.x, r8.w, l(3.000000)
  if_nz r10.x
    mul r10.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r11.xz, r10.yyyy
    mov r11.y, -r11.z
    mad r10.yzw, r8.xxyx, r11.xxyz, r10.zzwz
    add r11.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r10.yzw, r10.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r10.yzw, r11.xxyz, r10.yyzw
    mul r11.xy, r10.wzww, cb2[32].xxxx
    round_ni r11.xy, r11.xyxx
    mul r11.y, r11.y, cb2[27].x
    mad r11.x, r11.y, cb2[32].x, r11.x
    ftou r11.x, r11.x
    iadd r11.x, r11.x, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.y, r11.x, l(0), t23.xxxx
    and r11.z, r11.y, l(0x40000000)
    ishl r11.w, r11.y, l(2)
    if_z r11.z
      and r11.z, r11.y, l(0x01ffffff)
      iadd r12.x, r11.z, r11.x
      ushr r11.x, r11.y, l(25)
      utof r11.x, r11.x
      mul r10.yzw, r10.yyzw, r11.xxxx
      frc r10.yzw, r10.yyzw
      mul r10.yzw, r10.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r10.yzw, r10.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.z, r12.x, l(0), t23.xxxx
      ushr r11.xy, r10.wzww, l(6, 6, 0, 0)
      and r11.z, r12.z, l(0xc0000000)
      iadd r12.w, r12.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.w, r12.w, l(0), t23.xxxx
      movc r11.y, r11.y, r12.z, r12.w
      ushr r12.w, r11.y, l(13)
      movc r11.x, r11.x, r12.w, r11.y
      and r11.x, r11.x, l(8191)
      iadd r13.x, r11.x, r12.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.z, r13.x, l(0), t23.xxxx
      mov r12.y, l(0)
      mov r13.y, l(1)
      movc r13.xyz, r11.zzzz, r12.xyzx, r13.xyzx
      movc r14.yz, r11.zzzz, l(0,6,1,0), l(0,5,2,0)
      ushr r11.xy, r10.wzww, r14.yyyy
      and r11.xy, r11.xyxx, l(1, 1, 0, 0)
      and r12.w, r13.z, l(0xc0000000)
      iadd r13.w, r13.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.w, l(0), t23.xxxx
      movc r11.y, r11.y, r13.z, r13.w
      ushr r13.w, r11.y, l(13)
      movc r11.x, r11.x, r13.w, r11.y
      and r11.x, r11.x, l(8191)
      iadd r14.x, r11.x, r13.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.x, l(0), t23.xxxx
      movc r13.xyz, r12.wwww, r13.xyzx, r14.xzwx
      movc r11.xyz, r11.zzzz, r12.xyzx, r13.xyzx
      and r12.x, r11.z, l(0xc0000000)
      if_z r12.x
        iadd r12.x, -r11.y, l(6)
        ushr r12.xy, r10.wzww, r12.xxxx
        or r12.z, r11.z, l(0x40000000)
        bfi r12.y, l(1), l(1), r12.y, l(0)
        bfi r12.x, l(1), l(0), r12.x, r12.y
        imul null, r12.x, r12.x, l(10)
        ushr r12.x, r12.z, r12.x
        and r12.x, r12.x, l(1023)
        iadd r12.x, r11.x, r12.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.w, r12.x, l(0), t23.xxxx
        iadd r12.yz, r11.yyyy, l(0, 1, 2, 0)
        iadd r11.y, -r12.y, l(6)
        ushr r13.xy, r10.wzww, r11.yyyy
        and r11.y, r12.w, l(0xc0000000)
        or r13.z, r12.w, l(0x40000000)
        bfi r13.y, l(1), l(1), r13.y, l(0)
        bfi r13.x, l(1), l(0), r13.x, r13.y
        imul null, r13.x, r13.x, l(10)
        ushr r13.x, r13.z, r13.x
        and r13.x, r13.x, l(1023)
        iadd r13.x, r12.x, r13.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.z, r13.x, l(0), t23.xxxx
        mov r13.y, r12.z
        movc r13.xyz, r11.yyyy, r12.xywx, r13.xyzx
        iadd r12.y, -r13.y, l(6)
        ushr r12.yz, r10.wwzw, r12.yyyy
        and r13.y, r13.z, l(0xc0000000)
        or r13.w, r13.z, l(0x40000000)
        bfi r12.z, l(1), l(1), r12.z, l(0)
        bfi r12.y, l(1), l(0), r12.y, r12.z
        imul null, r12.y, r12.y, l(10)
        ushr r12.y, r13.w, r12.y
        and r12.y, r12.y, l(1023)
        iadd r14.x, r12.y, r13.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.y, r14.x, l(0), t23.xxxx
        movc r12.yz, r13.yyyy, r13.xxzx, r14.xxyx
        movc r11.xz, r11.yyyy, r12.xxwx, r12.yyzy
      endif 
      and r11.y, r11.z, l(0xc0000000)
      if_z r11.y
        ubfe r12.x, l(14), l(15), r11.z
        utof r12.x, r12.x
        mul r12.x, r12.x, cb2[27].w
        and r12.yz, r11.zzzz, l(0, 0x00007fff, 0x20000000, 0)
        utof r12.y, r12.y
        mul r12.y, r12.y, cb2[27].w
        mul r12.xy, r12.xyxx, l(0.00006104, 0.00003052, 0.000000, 0.000000)
        and r12.w, r10.z, l(3)
        iadd r12.w, r11.x, r12.w
        iadd r12.w, r12.w, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.w, r12.w, l(0), t23.xxxx
        bfi r13.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r10.yzwy, l(0, 0, 0, 0)
        ushr r10.y, r12.w, r13.x
        and r10.y, r10.y, l(255)
        utof r10.y, r10.y
        mul r10.y, r12.y, r10.y
        mad r10.y, r10.y, l(0.00392157), r12.x
        iadd r10.z, r13.y, l(1)
        ubfe r10.w, l(1), l(1), r10.w
        iadd r10.z, r10.w, r10.z
        iadd r10.z, r10.z, r11.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.z, r10.z, l(0), t23.xxxx
        ushr r10.z, r10.z, r13.z
        and r10.z, r10.z, l(0x0000ffff)
        utof r10.z, r10.z
        mul r10.z, r12.y, r10.z
        mad r10.z, r10.z, l(0.00001526), r12.x
        movc r11.w, r12.z, r10.y, r10.z
      else 
        and r10.y, r11.z, l(0x80000000)
        iadd r10.z, r11.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.z, r10.z, l(0), t23.xxxx
        movc r10.y, r10.y, r10.z, l(0)
        ishl r10.z, r11.z, l(2)
        ushr r10.w, r10.y, l(16)
        and r10.y, r10.y, l(0x0000ffff)
        f16tof32 r10.yw, r10.yyyw
        mad r10.z, r8.x, r10.w, r10.z
        mad r10.y, r8.y, r10.y, r10.z
        movc r11.w, r11.y, r10.y, r11.w
      endif 
    endif 
    mad r8.z, -cb2[27].z, l(2.000000), r8.z
    lt r8.z, r11.w, r8.z
    movc r6.w, r8.z, l(0), l(1.000000)
  endif 
  if_z r10.x
    if_z cb2[58].y
      ftou r8.z, r8.w
      add r10.xy, r8.xyxx, -cb2[r8.z + 20].xyxx
      mul r10.xy, r10.xyxx, cb2[r8.z + 20].zzzz
      mad r10.xy, r10.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r8.z, cb2[26].y
      add r10.z, r8.z, r8.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.z, r10.xyzx, t13.xxxx, s13, r3.w
      sample_l_indexable(texture2darray)(float,float,float,float) r10.x, r10.xyzx, t31.xyzw, s0, l(0.000000)
      add r8.z, r8.z, r10.x
      add_sat r8.z, r8.z, l(-1.000000)
      mul r10.x, r8.z, r8.z
      mul r6.w, r8.z, r10.x
    endif 
    if_nz cb2[58].y
      mov r10.x, -r6.x
      ftou r8.z, r8.w
      add r8.w, r8.w, l(1.000000)
      min r8.w, r8.w, l(2.000000)
      ftou r8.w, r8.w
      add r9.w, -r9.w, l(1.000000)
      mul r9.w, r9.w, l(28.000000)
      ftou r9.w, r9.w
      add r11.xy, r8.xyxx, -cb2[r8.z + 20].xyxx
      mul r11.xy, r11.xyxx, cb2[r8.z + 20].zzzz
      mad r11.xy, r11.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r8.xy, r8.xyxx, -cb2[r8.w + 20].xyxx
      mul r8.xy, r8.xyxx, cb2[r8.w + 20].zzzz
      mad r8.xy, r8.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mov r10.y, r7.x
      mov r10.z, r6.x
      mov r10.w, l(0)
      mov r11.z, l(0)
      loop 
        uge r11.w, r11.z, l(8)
        breakc_nz r11.w
        ult r11.w, r9.w, r11.z
        movc r12.xy, r11.wwww, r8.xyxx, r11.xyxx
        movc r12.z, r11.w, cb2[r8.w + 20].w, cb2[r8.z + 20].w
        movc r11.w, r11.w, r8.w, r8.z
        dp2 r13.x, icb[r11.z + 0].yxyy, r10.xyxx
        dp2 r13.y, icb[r11.z + 0].yxyy, r10.yzyy
        mad r12.xy, r13.xyxx, r12.zzzz, r12.xyxx
        iadd r11.w, r11.w, cb2[26].y
        utof r12.z, r11.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.w, r12.xyzx, t13.xxxx, s13, r3.w
        sample_l_indexable(texture2darray)(float,float,float,float) r12.x, r12.xyzx, t31.xyzw, s0, l(0.000000)
        add r11.w, r11.w, r12.x
        add_sat r11.w, r11.w, l(-1.000000)
        mad r10.w, r11.w, l(0.125000), r10.w
        iadd r11.z, r11.z, l(1)
      endloop 
      mul r3.w, r10.w, r10.w
      mul r6.w, r10.w, r3.w
    endif 
  endif 
endif 
lt r3.w, l(0.000000), r2.w
if_nz r3.w
  lt r3.w, l(0.000000), r6.w
  if_nz r3.w
    ine r3.w, cb1[92].x, l(0)
    sqrt r8.x, r6.z
    mad r8.x, r8.x, l(0.500000), l(0.500000)
    mul r8.x, r8.x, r8.x
    mul r8.y, r8.x, l(0.500000)
    mad r8.x, -r8.x, l(0.500000), l(1.000000)
    mad r8.z, r4.x, r8.x, r8.y
    mul r8.xy, r8.zzzz, r8.xyxx
    mul r8.z, r6.y, cb2[18].w
    mul r8.z, r2.w, r8.z
    if_nz cb2[23].x
      add r10.xyz, v7.xyzx, cb1[24].xyzx
      mov r10.w, l(1.000000)
      dp4 r8.w, cb2[24].xyzw, r10.xyzw
      dp4 r9.w, cb2[25].xyzw, r10.xyzw
      frc r10.x, r8.w
      frc r10.y, r9.w
      iadd r8.w, l(-1), cb2[23].x
      utof r10.z, r8.w
      sample_l_indexable(texture2darray)(float,float,float,float) r10.xyz, r10.xyzx, t20.xyzw, s2, l(0.000000)
      add r10.xyz, r10.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r10.xyz, cb2[23].yyyy, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r10.xyz, r10.xyzx, cb2[18].xyzx
    else 
      mov r10.xyz, cb2[18].xyzx
    endif 
    ushr r8.w, cb2[53].x, l(16)
    ult r9.w, l(0), r8.w
    and r9.w, r3.w, r9.w
    if_nz r9.w
      iadd r8.w, r8.w, cb2[0].x
      iadd r8.w, r8.w, l(-1)
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r9.w, r8.w, l(52), t12.xxxx
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.xyzw, r8.w, l(68), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r8.w, l(84), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.xyzw, r8.w, l(132), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r8.w, l(148), t12.xyzw
      mad r10.w, |r0.w|, l(-0.200000), l(0.400000)
      mad r15.xyz, r3.xyzx, r10.wwww, v7.xyzx
      mov r15.w, l(1.000000)
      dp4 r11.x, r11.xyzw, r15.xyzw
      dp4 r11.y, r12.xyzw, r15.xyzw
      mad r11.xy, r11.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r11.xy, r14.zwzz, r11.xyxx
      mul r11.xy, r14.xyxx, r11.xyxx
      div r11.zw, r9.wwww, r13.xxxz
      add r12.xy, -r11.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r12.xy, r11.xyxx, r12.xyxx
      ge r11.zw, r11.zzzw, r11.xxxy
      or r11.zw, r11.zzzw, r12.xxxy
      or r10.w, r11.w, r11.z
      if_z r10.w
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.w, r8.w, l(28), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r8.w, l(100), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.zw, r8.w, l(164), t12.xxxy
        dp4 r8.w, r12.xyzw, r15.xyzw
        mov_sat r11.xy, r11.xyxx
        mad r12.xy, r11.xyxx, r13.xzxx, r13.ywyy
        add r8.w, r11.z, r8.w
        div r8.w, r8.w, r11.w
        max r8.w, r8.w, l(0.00006104)
        and r10.w, r10.w, l(0x0000ffff)
        if_nz cb2[58].y
          mov r11.x, -r6.x
          utof r13.z, r10.w
          mov r11.y, r7.x
          mov r11.z, r6.x
          mov r11.w, l(0)
          mov r12.w, l(0)
          loop 
            ige r13.w, r12.w, l(8)
            breakc_nz r13.w
            dp2 r14.x, icb[r12.w + 0].yxyy, r11.xyxx
            dp2 r14.y, icb[r12.w + 0].yxyy, r11.yzyy
            mad r13.xy, r14.xyxx, r9.wwww, r12.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.x, r13.xyzx, t9.xxxx, s13, r8.w
            mad r11.w, r13.x, l(0.125000), r11.w
            iadd r12.w, r12.w, l(1)
          endloop 
        else 
          utof r12.z, r10.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.w, r12.xyzx, t9.xxxx, s13, r8.w
        endif 
        mul r8.w, r11.w, r11.w
        mul r8.w, r11.w, r8.w
      else 
        mov r8.w, l(1.000000)
      endif 
      mul r6.w, r6.w, r8.w
    else 
      and r8.w, cb2[53].x, l(0x0000ffff)
      ult r9.w, l(0), r8.w
      not r3.w, r3.w
      and r3.w, r3.w, r9.w
      if_nz r3.w
        iadd r3.w, r8.w, cb2[0].x
        iadd r3.w, r3.w, l(-1)
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r8.w, r3.w, l(52), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.xyzw, r3.w, l(68), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r3.w, l(84), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.xyzw, r3.w, l(132), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r3.w, l(148), t12.xyzw
        mad r9.w, |r0.w|, l(-0.200000), l(0.400000)
        mad r15.xyz, r3.xyzx, r9.wwww, v7.xyzx
        mov r15.w, l(1.000000)
        dp4 r11.x, r11.xyzw, r15.xyzw
        dp4 r11.y, r12.xyzw, r15.xyzw
        mad r11.xy, r11.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r11.xy, r14.zwzz, r11.xyxx
        mul r11.xy, r14.xyxx, r11.xyxx
        div r11.zw, r8.wwww, r13.xxxz
        add r12.xy, -r11.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r12.xy, r11.xyxx, r12.xyxx
        ge r11.zw, r11.zzzw, r11.xxxy
        or r11.zw, r11.zzzw, r12.xxxy
        or r9.w, r11.w, r11.z
        if_z r9.w
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r9.w, r3.w, l(28), t12.xxxx
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r3.w, l(100), t12.xyzw
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.zw, r3.w, l(164), t12.xxxy
          dp4 r3.w, r12.xyzw, r15.xyzw
          mov_sat r11.xy, r11.xyxx
          mad r12.xy, r11.xyxx, r13.xzxx, r13.ywyy
          add r3.w, r11.z, r3.w
          div r3.w, r3.w, r11.w
          max r3.w, r3.w, l(0.00006104)
          and r9.w, r9.w, l(0x0000ffff)
          if_nz cb2[58].y
            mov r11.x, -r6.x
            utof r13.z, r9.w
            mov r11.y, r7.x
            mov r11.z, r6.x
            mov r6.x, l(0)
            mov r7.x, l(0)
            loop 
              ige r10.w, r7.x, l(8)
              breakc_nz r10.w
              dp2 r14.x, icb[r7.x + 0].yxyy, r11.xyxx
              dp2 r14.y, icb[r7.x + 0].yxyy, r11.yzyy
              mad r13.xy, r14.xyxx, r8.wwww, r12.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r13.xyzx, t9.xxxx, s13, r3.w
              mad r6.x, r10.w, l(0.125000), r6.x
              iadd r7.x, r7.x, l(1)
            endloop 
          else 
            utof r12.z, r9.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r6.x, r12.xyzx, t9.xxxx, s13, r3.w
          endif 
          mul r3.w, r6.x, r6.x
          mul r3.w, r6.x, r3.w
        else 
          mov r3.w, l(1.000000)
        endif 
        mul r6.w, r3.w, r6.w
      endif 
    endif 
    mad r3.w, -r4.x, l(0.500000), l(1.000000)
    mad r3.w, -r2.w, r3.w, l(1.000000)
    mul r3.w, r3.w, r3.w
    mad r3.w, -r3.w, l(0.620000), l(0.620000)
    add r3.w, -r2.w, r3.w
    mad r3.w, r6.z, r3.w, r2.w
    mul r3.w, r6.w, r3.w
    lt r0.w, l(0.000000), r0.w
    mad r11.xyz, r3.wwww, r10.xyzx, r7.yzwy
    mad r12.xyz, -v7.xyzx, r5.xxxx, cb2[17].xyzx
    dp3 r3.w, r12.xyzx, r12.xyzx
    rsq r3.w, r3.w
    mul r12.xyz, r3.wwww, r12.xyzx
    dp3 r3.w, r12.xyzx, r5.yzwy
    dp3 r3.x, r3.xyzx, r12.xyzx
    mad r3.y, |r3.x|, r6.y, -|r3.x|
    mad r3.x, |r3.x|, r3.y, l(1.000000)
    mad r2.w, r2.w, r8.x, r8.y
    mul r3.x, r3.x, r3.x
    mul r2.w, r2.w, r3.x
    rcp r2.w, r2.w
    mul r2.w, r8.z, r2.w
    mul r2.w, r2.w, r6.w
    mul r2.w, r2.w, l(0.250000)
    mad r3.xyz, r2.wwww, r10.xyzx, r4.yzwy
    add_sat r3.w, -r3.w, l(1.000000)
    mul r4.x, r3.w, r3.w
    mul r4.x, r4.x, r4.x
    mul r3.w, r3.w, r4.x
    mul r2.w, r2.w, r3.w
    mad r5.xyz, r2.wwww, r10.xyzx, r9.xyzx
    movc r7.yzw, r0.wwww, r11.xxyz, r7.yyzw
    movc r9.xyz, r0.wwww, r5.xyzx, r9.xyzx
    movc r4.yzw, r0.wwww, r3.xxyz, r4.yyzw
  endif 
endif 
add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r3.xyz, r3.xyzx, r9.xyzx
mad r2.xyz, r4.yzwy, r2.xyzx, r3.xyzx
mad r0.xyz, r7.yzwy, r0.xyzx, r2.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, v7.xyzx, v7.xyzx
  rsq r2.x, r0.w
  mul r2.xyz, r2.xxxx, v7.xyzx
  sqrt r0.w, r0.w
  lt r2.w, l(0.000000), cb2[13].w
  if_nz r2.w
    mad r3.xy, r0.wwww, cb2[15].xyxx, cb2[14].zwzz
    mul r3.xy, r3.xyxx, cb2[16].xyxx
    lt r2.w, l(0.010000), |v7.z|
    mul r3.zw, v7.zzzz, cb2[15].zzzw
    mul r4.xy, r3.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r4.xy, r4.xyxx
    add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r3.zw, r4.xxxy, r3.zzzw
    mul r3.zw, r3.zzzw, r3.xxxy
    movc r3.xy, r2.wwww, r3.zwzz, r3.xyxx
    mul r3.xzw, r3.xxxx, cb2[12].xxyz
    exp r3.xzw, r3.xxzw
    mul r4.xyz, r3.yyyy, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xzwx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xzwx
  else 
    mad r2.w, r0.w, cb2[15].x, cb2[14].z
    mul r2.w, r2.w, cb2[16].x
    lt r3.w, l(0.010000), |v7.z|
    mul r4.x, v7.z, cb2[15].z
    mul r4.y, r4.x, l(-1.442695)
    exp r4.y, r4.y
    add r4.y, -r4.y, l(1.000000)
    div r4.x, r4.y, r4.x
    mul r4.x, r2.w, r4.x
    movc r2.w, r3.w, r4.x, r2.w
    mul r4.xyz, r2.wwww, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r2.x, cb2[7].yzwy, -r2.xyzx
  mad r2.y, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.z, cb2[8].w, -r2.x, l(1.000000)
  mul r2.z, r2.z, r2.z
  mul r2.z, r2.z, l(12.566371)
  div r2.y, r2.y, r2.z
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r2.y
  mov_sat r2.x, r2.x
  mad r2.x, r2.x, r2.x, l(1.000000)
  mad r2.x, r2.x, l(0.05968310), l(-1.000000)
  mad r2.x, cb2[8].z, r2.x, l(1.000000)
  mul r2.yzw, r0.wwww, cb2[11].xxyz
  mad r2.xyz, r2.xxxx, cb2[10].xyzx, r2.yzwy
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, v7.z, cb2[6].x
  mad r2.w, cb2[6].x, v7.z, cb2[5].x
  lt r3.x, |r0.w|, l(0.000100)
  min r3.y, r2.w, l(64.000000)
  mul r3.y, r3.y, l(1.442695)
  exp r3.y, r3.y
  mov_sat r3.z, cb2[6].z
  lt r3.w, r2.w, l(0.000000)
  add r2.w, r2.w, l(1.000000)
  movc r2.w, r3.w, r3.y, r2.w
  add r2.w, r2.w, -cb2[6].z
  movc r0.w, r3.x, l(1.000000), r0.w
  div r0.w, r2.w, r0.w
  movc r0.w, r3.x, r3.z, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r2.w, v7.xyzx, v7.xyzx
  sqrt r3.x, r2.w
  mad r0.w, r0.w, r3.x, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r2.w, r2.w
  mul r3.xyz, r2.wwww, v7.xyzx
  dp3 r2.w, cb2[7].yzwy, r3.xyzx
  mad_sat r2.w, cb2[8].y, r2.w, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r2.wwww, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyz, r2.xyzx, cb1[85].yyyy
ge r2.xyz, r0.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r0.xyz, r0.xyzx, r2.xyzx
min r0.xyz, r0.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
max r2.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r1.xyz, r1.wwww, r2.xyzx
and r0.w, r1.w, l(0x7f800000)
ieq r0.w, r0.w, l(0x7f800000)
eq r3.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
and r3.xy, r3.zwzz, r3.xyxx
and r2.w, r3.y, r3.x
or r0.w, r0.w, r2.w
if_z r0.w
  ftou r3.xy, v0.xyxx
  imm_atomic_iadd r3.z, u6, r3.xyxx, l(1)
  ult r0.w, r3.z, cb2[58].z
  if_nz r0.w
    max r0.w, r1.z, r1.y
    max r0.w, r0.w, r1.x
    mov r0.w, |r0.w|
    and r0.w, r0.w, l(0x7f800000)
    iadd r0.w, r0.w, l(0x00800000)
    mad r2.xyz, r2.xyzx, r1.wwww, r0.wwww
    ubfe r2.x, l(8), l(15), r2.x
    ushr r2.yz, r2.yyzy, l(0, 15, 15, 0)
    bfi r2.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r2.yyzy, l(0, 0, 0, 0)
    iadd r2.x, r2.y, r2.x
    iadd r2.x, r2.z, r2.x
    ishl r0.w, r0.w, l(1)
    iadd r2.xzw, r0.wwww, r2.xxxx
    mov_sat r0.w, r1.w
    mul r0.w, r0.w, l(2046.000000)
    ftou r0.w, r0.w
    ishl r3.w, v0.z, l(2)
    and r0.w, r0.w, l(2046)
    bfi r2.y, l(11), l(0), r0.w, r3.w
    store_uav_typed u7.xyzw, r3.xyzz, r2.xyzw
    mov r0.w, l(-1)
  else 
    mov r0.w, l(0)
  endif 
else 
  mov r0.w, l(-1)
endif 
mul r1.xyz, r1.wwww, r0.xyzx
movc o0.xyzw, r0.wwww, l(0,0,0,0), r1.xyzw
ret 
// Approximately 1037 instruction slots used
