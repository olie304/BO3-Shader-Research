// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:40:47 2021

cbuffer PostFxCBuffer : register(b8)
{
  float4 postFxControl0 : packoffset(c0);
  float4 postFxControl1 : packoffset(c1);
  float4 postFxControl2 : packoffset(c2);
  float4 postFxControl3 : packoffset(c3);
  float4 postFxControl4 : packoffset(c4);
  float4 postFxControl5 : packoffset(c5);
  float4 postFxControl6 : packoffset(c6);
  float4 postFxControl7 : packoffset(c7);
  float4 postFxControl8 : packoffset(c8);
  float4 postFxControl9 : packoffset(c9);
  float4 postFxControlA : packoffset(c10);
  float4 postFxControlB : packoffset(c11);
  float4 postFxControlC : packoffset(c12);
  float4 postFxControlD : packoffset(c13);
  float4 postFxControlE : packoffset(c14);
  float4 postFxControlF : packoffset(c15);
  float4 postFxConst00 : packoffset(c16);
  float4 postFxConst01 : packoffset(c17);
  float4 postFxConst02 : packoffset(c18);
  float4 postFxConst03 : packoffset(c19);
  float4 postFxConst04 : packoffset(c20);
  float4 postFxConst05 : packoffset(c21);
  float4 postFxConst06 : packoffset(c22);
  float4 postFxConst07 : packoffset(c23);
  float4 postFxConst08 : packoffset(c24);
  float4 postFxConst09 : packoffset(c25);
  float4 postFxConst10 : packoffset(c26);
  float4 postFxConst11 : packoffset(c27);
  float4 postFxConst12 : packoffset(c28);
  float4 postFxConst13 : packoffset(c29);
  float4 postFxConst14 : packoffset(c30);
  float4 postFxConst15 : packoffset(c31);
  float4 postFxConst16 : packoffset(c32);
  float4 postFxConst17 : packoffset(c33);
  float4 postFxConst18 : packoffset(c34);
  float4 postFxConst19 : packoffset(c35);
  float4 postFxConst20 : packoffset(c36);
  float4 postFxConst21 : packoffset(c37);
  float4 postFxConst22 : packoffset(c38);
  float4 postFxConst23 : packoffset(c39);
  float4 postFxConst24 : packoffset(c40);
  float4 postFxConst25 : packoffset(c41);
  float4 postFxConst26 : packoffset(c42);
  float4 postFxConst27 : packoffset(c43);
  float4 postFxConst28 : packoffset(c44);
  float4 postFxConst29 : packoffset(c45);
  float4 postFxConst30 : packoffset(c46);
  float4 postFxConst31 : packoffset(c47);
  float4 postFxConst32 : packoffset(c48);
  float4 postFxConst33 : packoffset(c49);
  float4 postFxConst34 : packoffset(c50);
  float4 postFxConst35 : packoffset(c51);
  float4 postFxConst36 : packoffset(c52);
  float4 postFxConst37 : packoffset(c53);
  float4 postFxConst38 : packoffset(c54);
  float4 postFxConst39 : packoffset(c55);
  float4 postFxConst40 : packoffset(c56);
  float4 postFxConst41 : packoffset(c57);
  float4 postFxConst42 : packoffset(c58);
  float4 postFxConst43 : packoffset(c59);
  float4 postFxConst44 : packoffset(c60);
  float4 postFxConst45 : packoffset(c61);
  float4 postFxConst46 : packoffset(c62);
  float4 postFxConst47 : packoffset(c63);
  float4 postFxConst48 : packoffset(c64);
  float4 postFxConst49 : packoffset(c65);
  float4 postFxConst50 : packoffset(c66);
  float4 postFxConst51 : packoffset(c67);
  float4 postFxConst52 : packoffset(c68);
  float4 postFxConst53 : packoffset(c69);
  float4 postFxConst54 : packoffset(c70);
  float4 postFxConst55 : packoffset(c71);
  float4 postFxConst56 : packoffset(c72);
  float4 postFxConst57 : packoffset(c73);
  float4 postFxConst58 : packoffset(c74);
  float4 postFxConst59 : packoffset(c75);
  float4 postFxConst60 : packoffset(c76);
  float4 postFxConst61 : packoffset(c77);
  float4 postFxConst62 : packoffset(c78);
  float4 postFxConst63 : packoffset(c79);
  float4 postFxBloom00 : packoffset(c80);
  float4 postFxBloom01 : packoffset(c81);
  float4 postFxBloom02 : packoffset(c82);
  float4 postFxBloom03 : packoffset(c83);
  float4 postFxBloom04 : packoffset(c84);
  float4 postFxBloom05 : packoffset(c85);
  float4 postFxBloom06 : packoffset(c86);
  float4 postFxBloom07 : packoffset(c87);
  float4 postFxBloom08 : packoffset(c88);
  float4 postFxBloom09 : packoffset(c89);
  float4 postFxBloom10 : packoffset(c90);
  float4 postFxBloom11 : packoffset(c91);
  float4 postFxBloom12 : packoffset(c92);
  float4 postFxBloom13 : packoffset(c93);
  float4 postFxBloom14 : packoffset(c94);
  float4 postFxBloom15 : packoffset(c95);
  float4 postFxBloom16 : packoffset(c96);
  float4 postFxBloom17 : packoffset(c97);
  float4 postFxBloom18 : packoffset(c98);
  float4 postFxBloom19 : packoffset(c99);
  float4 postFxBloom20 : packoffset(c100);
  float4 postFxBloom21 : packoffset(c101);
  float4 postFxBloom22 : packoffset(c102);
  float4 postFxBloom23 : packoffset(c103);
  float4 postFxBloom24 : packoffset(c104);
  float4 postFxBloom25 : packoffset(c105);
  float4 filterTap[8] : packoffset(c106);
  float4 postfxViewMatrix0 : packoffset(c114);
  float4 postfxViewMatrix1 : packoffset(c115);
  float4 postfxViewMatrix2 : packoffset(c116);
  float4 postfxViewMatrix3 : packoffset(c117);
  float4 postfxProjMatrix0 : packoffset(c118);
  float4 postfxProjMatrix1 : packoffset(c119);
  float4 postfxProjMatrix2 : packoffset(c120);
  float4 postfxProjMatrix3 : packoffset(c121);
  float4 postfxViewProjMatrix0 : packoffset(c122);
  float4 postfxViewProjMatrix1 : packoffset(c123);
  float4 postfxViewProjMatrix2 : packoffset(c124);
  float4 postfxViewProjMatrix3 : packoffset(c125);
}

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}

SamplerState bilinearSampler_s : register(s0);
Texture2D<float4> colorTex : register(t0);
Texture2D<float4> temporalHistoryTex1 : register(t6);
Texture2D<float4> temporalHistoryLumaTex1 : register(t7);
Texture2D<float4> temporalHistoryLumaTex3 : register(t9);
Texture2D<float4> velocityTex0 : register(t10);
Texture2D<float4> velocityTex1 : register(t11);
Texture2D<float4> filmicHistoryTex1 : register(t12);
Texture2D<float4> depthTex : register(t14);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float3 o0 : SV_TARGET0,
  out float o1 : SV_TARGET1,
  out float3 o2 : SV_TARGET2)
{
// Needs manual fix for instruction: 
// unknown dcl_: dcl_uav_structured_opc u6, 8
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = renderTargetSize.zw * float2(2,2) + v1.xy;
  r0.x = depthTex.SampleLevel(bilinearSampler_s, r0.xy, 0).x;
  r0.yz = renderTargetSize.zw * float2(-2,-2) + v1.xy;
  r0.y = depthTex.SampleLevel(bilinearSampler_s, r0.yz, 0).x;
  r0.x = max(r0.x, r0.y);
  r0.x = cmp(r0.x == r0.y);
  r0.x = r0.x ? -2 : 2;
  r0.xy = renderTargetSize.zw * r0.xx + v1.xy;
  r0.xy = velocityTex0.SampleLevel(bilinearSampler_s, r0.xy, 0).xy;
  r0.zw = float2(-0.5,-0.5) + abs(r0.xy);
  r0.zw = saturate(r0.zw + r0.zw);
  r1.xy = abs(r0.xy) + abs(r0.xy);
  r1.xy = min(float2(1,1), r1.xy);
  r1.xy = float2(10,10) * r1.xy;
  r0.zw = r0.zw * float2(30,30) + r1.xy;
  r0.xy = cmp(r0.xy >= float2(0,0));
  r0.xy = r0.xy ? r0.zw : -r0.zw;
  r0.zw = renderTargetSize.zw * r0.xy;
  r1.xy = -renderTargetSize.zw * r0.xy + v1.xy;
  r1.zw = velocityTex1.SampleLevel(bilinearSampler_s, r1.xy, 0).xy;
  r2.xy = float2(-0.5,-0.5) + abs(r1.zw);
  r2.xy = saturate(r2.xy + r2.xy);
  r2.zw = abs(r1.zw) + abs(r1.zw);
  r2.zw = min(float2(1,1), r2.zw);
  r2.zw = float2(10,10) * r2.zw;
  r2.xy = r2.xy * float2(30,30) + r2.zw;
  r1.zw = cmp(r1.zw >= float2(0,0));
  r1.zw = r1.zw ? r2.xy : -r2.xy;
  r2.xy = postFxControl0.xy + v1.xy;
  r2.xyz = colorTex.SampleLevel(bilinearSampler_s, r2.xy, 0).xyz;
  r3.xy = postFxControl0.zw + r1.xy;
  r3.xyz = temporalHistoryTex1.SampleLevel(bilinearSampler_s, r3.xy, 0).xyz;
  r4.xyz = float3(3.05175781e-05,3.05175781e-05,3.05175781e-05) * r2.xyz;
  r4.xyz = (uint3)r4.xyz >> int3(1,1,1);
  r4.xyz = (int3)r4.xyz + int3(532487680,532487680,532487680);
  r4.x = dot(r4.xyz, float3(0.212599993,0.715200007,0.0722000003));
  r5.xyz = float3(3.05175781e-05,3.05175781e-05,3.05175781e-05) * r3.xyz;
  r5.xyz = (uint3)r5.xyz >> int3(1,1,1);
  r5.xyz = (int3)r5.xyz + int3(532487680,532487680,532487680);
  r4.y = dot(r5.xyz, float3(0.212599993,0.715200007,0.0722000003));
  r2.w = r4.x + -r4.y;
  r2.w = cmp(0.0250000004 < abs(r2.w));
  if (r2.w != 0) {
    r4.zw = renderTargetSize.zw * r1.zw + -r0.zw;
    r4.zw = r4.zw * float2(2,2) + r0.zw;
    r5.xyzw = temporalHistoryLumaTex1.Gather(bilinearSampler_s, r1.xy, int2(0, 0)).xyzw;
    r6.xy = -renderTargetSize.zw * r1.zw + r1.xy;
    r4.zw = r6.xy + -r4.zw;
    r6.xyzw = temporalHistoryLumaTex3.Gather(bilinearSampler_s, r4.zw, int2(0, 0)).xyzw;
    r5.xyzw = -r6.xyzw + r5.xyzw;
    r2.w = dot(abs(r5.xyzw), float4(10,10,10,10));
    r2.w = 1 + -r2.w;
    r2.w = max(0, r2.w);
  } else {
    r2.w = 1;
  }
  r3.w = dot(r0.xy, r0.xy);
  r4.z = dot(r1.zw, r1.zw);
  r3.w = max(r4.z, r3.w);
  r3.w = (uint)r3.w >> 1;
  r3.w = (int)r3.w + 0x1fbd1df5;
  r3.w = saturate(40 + -r3.w);
  r0.xy = -r1.zw + r0.xy;
  r0.x = dot(r0.xy, r0.xy);
  r0.x = (uint)r0.x >> 1;
  r0.x = (int)r0.x + 0x1fbd1df5;
  r0.x = saturate(-r0.x * 0.25 + 1);
  r0.x = r0.x * r0.x;
  r0.x = min(r0.x, r3.w);
  r0.x = min(r2.w, r0.x);
  r0.x = 0.5 * r0.x;
  r3.xyz = r3.xyz + -r2.xyz;
  r2.xyz = r0.xxx * r3.xyz + r2.xyz;
  r0.xy = v1.xy * float2(1.5,1.10000002) + float2(-0.75,-0.495000005);
  r0.x = dot(r0.xy, r0.xy);
  r0.x = (uint)r0.x >> 1;
  r0.x = (int)r0.x + 0x1fbd1df5;
  r0.x = saturate(1 + -r0.x);
  r0.yz = renderTargetSize.xy * r0.zw;
  r3.xyz = filmicHistoryTex1.SampleLevel(bilinearSampler_s, r1.xy, 0).xyz;
  r3.xyz = float3(3.05175781e-05,3.05175781e-05,3.05175781e-05) * r3.xyz;
  r3.xyz = (uint3)r3.xyz >> int3(1,1,1);
  r3.xyz = (int3)r3.xyz + int3(532487680,532487680,532487680);
  r0.w = dot(r3.xyz, float3(0.212599993,0.715200007,0.0722000003));
  r1.zw = r0.ww + -r4.xy;
  r0.x = 6.66666651 * r0.x;
  r0.w = max(abs(r1.z), abs(r1.w));
  r0.x = saturate(r0.x * r0.w + -0.333333343);
  r0.y = dot(r0.yz, r0.yz);
  r0.y = (uint)r0.y >> 1;
  r0.y = (int)r0.y + 0x1fbd1df5;
  r0.y = saturate(40 + -r0.y);
  r0.y = min(r0.x, r0.y);
  r0.y = cmp(0 < r0.y);
  if (r0.y != 0) {
    r0.yz = (int2)v0.xy;
    r1.zw = renderTargetSize.xy * r1.xy + float2(-0.5,-0.5);
    r1.zw = floor(r1.zw);
    r3.xyzw = float4(0.5,0.5,-0.5,-0.5) + r1.zwzw;
    r1.xy = renderTargetSize.xy * r1.xy + -r3.xy;
    r4.yz = r1.xy * r1.xy;
    r5.xy = r4.yz + r4.yz;
    r5.zw = r4.yz * float2(2,2) + -r1.xy;
    r5.zw = -r4.yz * r1.xy + r5.zw;
    r5.xy = r4.yz * r1.xy + -r5.xy;
    r5.xy = float2(1,1) + r5.xy;
    r6.xy = r1.xy * r1.xy + r1.xy;
    r6.xy = -r4.yz * r1.xy + r6.xy;
    r1.xy = r4.yz * r1.xy + -r4.yz;
    r1.zw = float2(2.5,2.5) + r1.zw;
    r4.yz = r6.xy + r5.xy;
    r5.xy = r6.xy / r4.yz;
    r3.xy = r5.xy + r3.xy;
    r7.xy = renderTargetSize.zw * r1.zw;
    r6.xyzw = renderTargetSize.zwzw * r3.zyxw;
    r3.xyz = filmicHistoryTex1.SampleLevel(bilinearSampler_s, r6.xw, 0).xyz;
    r3.xyz = r3.xyz * r5.zzz;
    r8.xyz = filmicHistoryTex1.SampleLevel(bilinearSampler_s, r6.zw, 0).xyz;
    r8.xyz = r8.xyz * r4.yyy;
    r8.xyz = r8.xyz * r5.www;
    r3.xyz = r3.xyz * r5.www + r8.xyz;
    r7.zw = r6.wy;
    r8.xyz = filmicHistoryTex1.SampleLevel(bilinearSampler_s, r7.xz, 0).xyz;
    r8.xyz = r8.xyz * r1.xxx;
    r3.xyz = r8.xyz * r5.www + r3.xyz;
    r5.xyw = filmicHistoryTex1.SampleLevel(bilinearSampler_s, r6.xy, 0).xyz;
    r5.xyw = r5.xyw * r5.zzz;
    r3.xyz = r5.xyw * r4.zzz + r3.xyz;
    r5.xyw = filmicHistoryTex1.SampleLevel(bilinearSampler_s, r6.zy, 0).xyz;
    r5.xyw = r5.xyw * r4.yyy;
    r3.xyz = r5.xyw * r4.zzz + r3.xyz;
    r5.xyw = filmicHistoryTex1.SampleLevel(bilinearSampler_s, r7.xw, 0).xyz;
    r5.xyw = r5.xyw * r1.xxx;
    r3.xyz = r5.xyw * r4.zzz + r3.xyz;
    r6.y = r7.y;
    r5.xyw = filmicHistoryTex1.SampleLevel(bilinearSampler_s, r6.xy, 0).xyz;
    r5.xyz = r5.xyw * r5.zzz;
    r3.xyz = r5.xyz * r1.yyy + r3.xyz;
    r5.xyz = filmicHistoryTex1.SampleLevel(bilinearSampler_s, r6.zy, 0).xyz;
    r4.yzw = r5.xyz * r4.yyy;
    r3.xyz = r4.yzw * r1.yyy + r3.xyz;
    r4.yzw = filmicHistoryTex1.SampleLevel(bilinearSampler_s, r7.xy, 0).xyz;
    r1.xzw = r4.yzw * r1.xxx;
    r1.xyz = r1.xzw * r1.yyy + r3.xyz;
    // Needs manual fix for instruction:
    imm_atomic_alloc r3.x, u6
    InterlockedExchange ?(dest, value, orig_value);
    r1.xyz = f32tof16(r1.xyz);
    if (11 == 0) r0.w = 0; else if (11+4 < 32) {     r0.w = (uint)r1.x << (32-(11 + 4)); r0.w = (uint)r0.w >> (32-11);    } else r0.w = (uint)r1.x >> 4;
    r1.xy = (uint2)r1.yz << int2(7,17);
    r1.x = (int)r1.x & 0x003ff800;
    r0.w = (int)r0.w + (int)r1.x;
    bitmask.x = ((~(-1 << 22)) << 0) & 0xffffffff;  r1.x = (((uint)r0.w << 0) & bitmask.x) | ((uint)r1.y & ~bitmask.x);
    r0.x = 255 * r0.x;
    r0.x = (uint)r0.x;
    r0.xz = (uint2)r0.xz << int2(24,12);
    r0.x = (int)r0.z | (int)r0.x;
    r1.y = (int)r0.y | (int)r0.x;
    colorTex[r3.x].0 = u6.xy;
  }
  o0.xyz = r2.xyz;
  o2.xyz = r2.xyz;
  o1.x = r4.x;
  return;
}