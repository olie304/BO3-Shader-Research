//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:40:24 2021
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float alphaRevealSoftEdge;         // Offset:  160 Size:     4 [unused]
//   float alphaRevealRamp;             // Offset:  164 Size:     4 [unused]
//   float heightScale;                 // Offset:  168 Size:     4
//   float2 sprites;                    // Offset:  176 Size:     8
//   float2 source;                     // Offset:  184 Size:     8 [unused]
//   float count;                       // Offset:  192 Size:     4
//   float seed;                        // Offset:  196 Size:     4
//   float2 scaleMin;                   // Offset:  200 Size:     8
//   float2 scaleMax;                   // Offset:  208 Size:     8
//   float2 lifeMaxMin;                 // Offset:  216 Size:     8
//   float2 fadeInMaxMin;               // Offset:  224 Size:     8
//   float2 fadeOutMaxMin;              // Offset:  232 Size:     8
//   float2 pauseMaxMin;                // Offset:  240 Size:     8
//   float2 stretchMaxMin;              // Offset:  248 Size:     8
//   float2 slideMaxMin;                // Offset:  256 Size:     8
//   float2 heightMaxMin;               // Offset:  264 Size:     8
//   float2 warpMaxMin;                 // Offset:  272 Size:     8
//   float2 jitterMaxMin;               // Offset:  280 Size:     8
//   float2 rotationMaxMin;             // Offset:  288 Size:     8
//   float falseElapsedTime;            // Offset:  296 Size:     4
//   bool useOverride;                  // Offset:  300 Size:     4
//   float screenDistanceFade;          // Offset:  304 Size:     4 [unused]
//   float highlightFalloff;            // Offset:  308 Size:     4 [unused]
//   float highlightBrightness;         // Offset:  312 Size:     4 [unused]
//   float highlightMin;                // Offset:  316 Size:     4 [unused]
//
// }
//
// cbuffer GenericsCBuffer
// {
//
//   float4 scriptVector0;              // Offset:    0 Size:    16
//   float4 scriptVector1;              // Offset:   16 Size:    16 [unused]
//   float4 scriptVector2;              // Offset:   32 Size:    16 [unused]
//   float4 scriptVector3;              // Offset:   48 Size:    16 [unused]
//   float4 scriptVector4;              // Offset:   64 Size:    16 [unused]
//   float4 scriptVector5;              // Offset:   80 Size:    16 [unused]
//   float4 scriptVector6;              // Offset:   96 Size:    16
//   float4 scriptVector7;              // Offset:  112 Size:    16
//   float4 weaponParam0;               // Offset:  128 Size:    16 [unused]
//   float4 weaponParam1;               // Offset:  144 Size:    16 [unused]
//   float4 weaponParam2;               // Offset:  160 Size:    16 [unused]
//   float4 weaponParam3;               // Offset:  176 Size:    16 [unused]
//   float4 weaponParam4;               // Offset:  192 Size:    16 [unused]
//   float4 weaponParam5;               // Offset:  208 Size:    16 [unused]
//   float4 weaponParam6;               // Offset:  224 Size:    16 [unused]
//   float4 weaponParam7;               // Offset:  240 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// $Globals                          cbuffer      NA          NA            cb0      1 
// GenericsCBuffer                   cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   x   
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                15   x           2     NONE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 3     zw        1     NONE   float     zw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[19], immediateIndexed
dcl_constantbuffer CB3[8], immediateIndexed
dcl_input v0.x
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
dcl_output o2.xyzw
dcl_temps 7
round_ni r0.x, v0.x
ge r0.y, r0.x, cb0[12].x
eq r0.z, cb0[10].z, l(0.000000)
or r0.y, r0.z, r0.y
if_nz r0.y
  mov o0.xyzw, l(0,0,0,0)
  mov o1.xyzw, l(0,0,0,0)
  mov o2.xyzw, l(0,0,0,0)
  ret 
endif 
mad r0.yz, v1.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
mul r0.w, cb3[7].x, l(0.00000100)
ge r1.x, r0.w, -r0.w
frc r0.w, |r0.w|
movc r0.w, r1.x, r0.w, -r0.w
mul r0.w, r0.w, l(1000.000000)
mul r1.x, cb0[18].z, l(0.001000)
ge r1.y, r1.x, -r1.x
frc r1.x, |r1.x|
movc r1.x, r1.y, r1.x, -r1.x
mul r1.x, r1.x, l(1000.000000)
movc r0.w, cb0[18].w, r1.x, r0.w
mad r1.x, r0.x, l(7.559500), cb0[12].y
add r1.xyzw, r1.xxxx, l(6.234000, 1.025000, 0.239000, 9.345000)
dp4 r2.x, r1.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r1.x, r2.x
dp4 r2.x, r1.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r1.y, r2.x
dp4 r2.x, r1.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r1.z, r2.x
dp4 r2.x, r1.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r1.w, r2.x
dp4 r2.x, r1.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r1.x, r2.x
dp4 r2.x, r1.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r1.y, r2.x
dp4 r2.x, r1.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r1.z, r2.x
dp4 r1.w, r1.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r1.w, r1.w
add r2.x, -cb0[13].w, cb0[13].z
mad r1.y, r1.y, r2.x, cb0[13].w
mad r1.x, r1.x, cb0[13].z, r0.w
div r2.x, r1.x, r1.y
round_ni r2.x, r2.x
mad r1.x, -r2.x, r1.y, r1.x
mad r2.x, r2.x, r1.y, cb0[12].y
add r2.x, r2.x, cb3[6].z
mad r2.y, r0.x, l(23.247499), r2.x
add r3.xyzw, r2.yyyy, l(33.146999, 1.543000, 74.349998, 87.339996)
dp4 r2.y, r3.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r3.x, r2.y
dp4 r2.y, r3.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r3.y, r2.y
dp4 r2.y, r3.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r3.z, r2.y
dp4 r2.y, r3.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r3.w, r2.y
dp4 r2.y, r3.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r3.x, r2.y
dp4 r2.y, r3.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r3.y, r2.y
dp4 r2.y, r3.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r4.x, r2.y
mov r4.yzw, r3.xxyw
dp4 r2.y, r4.yzxw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r4.y, r2.y
mad r5.xyzw, r0.xxxx, l(13.007200, 13.007200, 13.007200, 13.007200), l(0.345000, 9.350000, 1.345000, 12.040000)
mad r5.xyzw, r2.xxxx, l(3.345730, 3.345730, 3.345730, 3.345730), r5.xyzw
dp4 r2.y, r5.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r5.x, r2.y
dp4 r2.y, r5.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r5.y, r2.y
dp4 r2.y, r5.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r5.z, r2.y
dp4 r2.y, r5.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r5.w, r2.y
dp4 r2.y, r5.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r5.x, r2.y
dp4 r2.y, r5.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r5.y, r2.y
dp4 r2.y, r5.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r5.z, r2.y
dp4 r2.y, r5.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r2.y, r2.y
mad r2.zw, r4.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 1.000000, 1.77777779)
ge r3.y, r0.w, -r0.w
frc r0.w, |r0.w|
movc r0.w, r3.y, r0.w, -r0.w
mad r0.x, r0.x, l(13.007200), r0.w
mad r0.x, r2.x, l(3.345730), r0.x
add r6.xyzw, r0.xxxx, l(0.234000, 2.110000, 5.564500, 2.254000)
dp4 r0.x, r6.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r6.x, r0.x
dp4 r0.x, r6.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r6.y, r0.x
dp4 r0.x, r6.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r6.z, r0.x
dp4 r0.x, r6.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r6.w, r0.x
dp4 r0.x, r6.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r6.x, r0.x
dp4 r0.x, r6.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r6.y, r0.x
dp4 r0.x, r6.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r6.z, r0.x
dp4 r0.x, r6.xyzw, l(81.239487, 17.348024, 37.349838, 59.394840)
frc r0.x, r0.x
add r3.yz, -cb0[12].zzwz, cb0[13].xxyx
mad r3.xy, r3.xxxx, r3.yzyy, cb0[12].zwzz
add r3.zw, -cb0[14].yyyw, cb0[14].xxxz
mad r0.w, r4.x, r3.z, cb0[14].y
mad r2.x, r4.y, r3.w, cb0[14].w
add r3.zw, -cb0[17].wwwy, cb0[17].zzzx
mad r3.z, r4.z, r3.z, cb0[17].w
add r4.xy, -cb0[16].ywyy, cb0[16].xzxx
mad r1.w, r1.w, r4.x, cb0[16].y
mad o2.w, r5.x, r3.w, cb0[17].y
mad r3.w, r5.y, r4.y, cb0[16].w
mul r3.w, r3.w, cb0[10].z
mul r3.w, r3.w, l(30.000000)
add r4.xy, -cb0[15].ywyy, cb0[15].xzxx
mad r4.x, r5.z, r4.x, cb0[15].y
mad r6.x, r2.y, r4.y, cb0[15].w
add r2.y, -cb0[18].y, cb0[18].x
mad r1.z, r1.z, r2.y, cb0[18].y
mad r4.yz, -cb3[0].yyzy, l(0.000000, 1.000000, 1.77777779, 0.000000), r2.zzwz
dp2 r2.y, r4.yzyy, r4.yzyy
rsq r2.y, r2.y
mul r4.yz, r2.yyyy, r4.yyzy
mul r0.yz, r0.yyzy, r3.xxyx
max r2.y, r6.x, l(0.000100)
div r6.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
add r2.y, r1.x, -r4.x
div_sat r3.x, r2.y, r1.y
add r5.xz, r6.xxyx, l(-1.000000, 0.000000, -1.000000, 0.000000)
mad r3.xy, r3.xxxx, r5.xzxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r0.yz, r0.yyzy, r3.xxyx
div r3.x, r3.w, r3.x
eq r3.y, r0.w, l(0.000000)
div_sat r0.w, r1.x, r0.w
mad r3.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r3.w
movc r0.w, r3.y, l(1.000000), r0.w
mul r0.w, r0.w, r3.x
eq r3.x, r2.x, l(0.000000)
add r1.y, -r1.y, r1.x
add r1.y, r2.x, r1.y
div_sat r1.y, r1.y, r2.x
mad r2.x, r1.y, l(-2.000000), l(3.000000)
mul r1.y, r1.y, r1.y
mad r1.y, -r2.x, r1.y, l(1.000000)
movc r1.y, r3.x, l(1.000000), r1.y
mul o2.z, r0.w, r1.y
min r0.w, |r4.y|, |r4.z|
max r1.y, |r4.y|, |r4.z|
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul r0.w, r0.w, r1.y
mul r1.y, r0.w, r0.w
mad r2.x, r1.y, l(0.02083510), l(-0.085133)
mad r2.x, r1.y, r2.x, l(0.180141)
mad r2.x, r1.y, r2.x, l(-0.33029950)
mad r1.y, r1.y, r2.x, l(0.999866)
mul r2.x, r0.w, r1.y
lt r3.x, |r4.y|, |r4.z|
mad r2.x, r2.x, l(-2.000000), l(1.57079637)
and r2.x, r3.x, r2.x
mad r0.w, r0.w, r1.y, r2.x
lt r1.y, r4.y, -r4.y
and r1.y, r1.y, l(0xc0490fdb)
add r0.w, r0.w, r1.y
min r1.y, r4.y, r4.z
max r2.x, r4.y, r4.z
lt r1.y, r1.y, -r1.y
ge r2.x, r2.x, -r2.x
and r1.y, r1.y, r2.x
movc r0.w, r1.y, -r0.w, r0.w
mad r0.w, r1.z, l(0.01745329), -r0.w
sincos r2.x, r3.x, r0.w
mov r6.y, r3.x
mov r6.z, r2.x
dp2 r3.x, r6.yzyy, r0.yzyy
mov r6.x, -r2.x
dp2 r3.y, r6.xyxx, r0.yzyy
lt r0.y, r4.x, r1.x
mul r0.z, r2.y, r2.y
mul r0.zw, r0.zzzz, r4.yyyz
mul r0.zw, r1.wwww, r0.zzzw
mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.010000, 0.010000), r2.zzzw
movc r0.yz, r0.yyyy, r0.zzwz, r2.zzwz
add r0.yz, r0.yyzy, r3.xxyx
lt r0.w, r1.x, r4.x
mul r1.x, r3.z, l(0.010000)
mul r1.yz, r0.xxxx, r4.yyzy
mad r1.xy, r1.xxxx, r1.yzyy, r0.yzyy
movc r0.xy, r0.wwww, r1.xyxx, r0.yzyy
mul r0.z, r5.y, cb0[11].x
mul r0.z, r0.z, cb0[11].y
round_ni r0.z, r0.z
div r1.xy, v1.xyxx, cb0[11].xyxx
div r0.z, r0.z, cb0[11].x
ge r0.w, r0.z, -r0.z
frc r1.z, |r0.z|
movc r0.w, r0.w, r1.z, -r1.z
mul r2.x, r0.w, cb0[11].x
round_ni r2.y, r0.z
div r0.zw, r2.xxxy, cb0[11].xxxy
add o1.xy, r0.zwzz, r1.xyxx
mov o0.y, -r0.y
mov o0.x, r0.x
mov o0.zw, l(0,0,1.000000,1.000000)
mul o1.zw, cb3[0].yyyz, l(0.000000, 0.000000, 1.000000, 1.77777779)
mov o2.xy, r6.zyzz
ret 
// Approximately 216 instruction slots used
