// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:40:15 2021

cbuffer PostFxCBuffer : register(b8)
{
  float4 postFxControl0 : packoffset(c0);
  float4 postFxControl1 : packoffset(c1);
  float4 postFxControl2 : packoffset(c2);
  float4 postFxControl3 : packoffset(c3);
  float4 postFxControl4 : packoffset(c4);
  float4 postFxControl5 : packoffset(c5);
  float4 postFxControl6 : packoffset(c6);
  float4 postFxControl7 : packoffset(c7);
  float4 postFxControl8 : packoffset(c8);
  float4 postFxControl9 : packoffset(c9);
  float4 postFxControlA : packoffset(c10);
  float4 postFxControlB : packoffset(c11);
  float4 postFxControlC : packoffset(c12);
  float4 postFxControlD : packoffset(c13);
  float4 postFxControlE : packoffset(c14);
  float4 postFxControlF : packoffset(c15);
  float4 postFxConst00 : packoffset(c16);
  float4 postFxConst01 : packoffset(c17);
  float4 postFxConst02 : packoffset(c18);
  float4 postFxConst03 : packoffset(c19);
  float4 postFxConst04 : packoffset(c20);
  float4 postFxConst05 : packoffset(c21);
  float4 postFxConst06 : packoffset(c22);
  float4 postFxConst07 : packoffset(c23);
  float4 postFxConst08 : packoffset(c24);
  float4 postFxConst09 : packoffset(c25);
  float4 postFxConst10 : packoffset(c26);
  float4 postFxConst11 : packoffset(c27);
  float4 postFxConst12 : packoffset(c28);
  float4 postFxConst13 : packoffset(c29);
  float4 postFxConst14 : packoffset(c30);
  float4 postFxConst15 : packoffset(c31);
  float4 postFxConst16 : packoffset(c32);
  float4 postFxConst17 : packoffset(c33);
  float4 postFxConst18 : packoffset(c34);
  float4 postFxConst19 : packoffset(c35);
  float4 postFxConst20 : packoffset(c36);
  float4 postFxConst21 : packoffset(c37);
  float4 postFxConst22 : packoffset(c38);
  float4 postFxConst23 : packoffset(c39);
  float4 postFxConst24 : packoffset(c40);
  float4 postFxConst25 : packoffset(c41);
  float4 postFxConst26 : packoffset(c42);
  float4 postFxConst27 : packoffset(c43);
  float4 postFxConst28 : packoffset(c44);
  float4 postFxConst29 : packoffset(c45);
  float4 postFxConst30 : packoffset(c46);
  float4 postFxConst31 : packoffset(c47);
  float4 postFxConst32 : packoffset(c48);
  float4 postFxConst33 : packoffset(c49);
  float4 postFxConst34 : packoffset(c50);
  float4 postFxConst35 : packoffset(c51);
  float4 postFxConst36 : packoffset(c52);
  float4 postFxConst37 : packoffset(c53);
  float4 postFxConst38 : packoffset(c54);
  float4 postFxConst39 : packoffset(c55);
  float4 postFxConst40 : packoffset(c56);
  float4 postFxConst41 : packoffset(c57);
  float4 postFxConst42 : packoffset(c58);
  float4 postFxConst43 : packoffset(c59);
  float4 postFxConst44 : packoffset(c60);
  float4 postFxConst45 : packoffset(c61);
  float4 postFxConst46 : packoffset(c62);
  float4 postFxConst47 : packoffset(c63);
  float4 postFxConst48 : packoffset(c64);
  float4 postFxConst49 : packoffset(c65);
  float4 postFxConst50 : packoffset(c66);
  float4 postFxConst51 : packoffset(c67);
  float4 postFxConst52 : packoffset(c68);
  float4 postFxConst53 : packoffset(c69);
  float4 postFxConst54 : packoffset(c70);
  float4 postFxConst55 : packoffset(c71);
  float4 postFxConst56 : packoffset(c72);
  float4 postFxConst57 : packoffset(c73);
  float4 postFxConst58 : packoffset(c74);
  float4 postFxConst59 : packoffset(c75);
  float4 postFxConst60 : packoffset(c76);
  float4 postFxConst61 : packoffset(c77);
  float4 postFxConst62 : packoffset(c78);
  float4 postFxConst63 : packoffset(c79);
  float4 postFxBloom00 : packoffset(c80);
  float4 postFxBloom01 : packoffset(c81);
  float4 postFxBloom02 : packoffset(c82);
  float4 postFxBloom03 : packoffset(c83);
  float4 postFxBloom04 : packoffset(c84);
  float4 postFxBloom05 : packoffset(c85);
  float4 postFxBloom06 : packoffset(c86);
  float4 postFxBloom07 : packoffset(c87);
  float4 postFxBloom08 : packoffset(c88);
  float4 postFxBloom09 : packoffset(c89);
  float4 postFxBloom10 : packoffset(c90);
  float4 postFxBloom11 : packoffset(c91);
  float4 postFxBloom12 : packoffset(c92);
  float4 postFxBloom13 : packoffset(c93);
  float4 postFxBloom14 : packoffset(c94);
  float4 postFxBloom15 : packoffset(c95);
  float4 postFxBloom16 : packoffset(c96);
  float4 postFxBloom17 : packoffset(c97);
  float4 postFxBloom18 : packoffset(c98);
  float4 postFxBloom19 : packoffset(c99);
  float4 postFxBloom20 : packoffset(c100);
  float4 postFxBloom21 : packoffset(c101);
  float4 postFxBloom22 : packoffset(c102);
  float4 postFxBloom23 : packoffset(c103);
  float4 postFxBloom24 : packoffset(c104);
  float4 postFxBloom25 : packoffset(c105);
  float4 filterTap[8] : packoffset(c106);
  float4 postfxViewMatrix0 : packoffset(c114);
  float4 postfxViewMatrix1 : packoffset(c115);
  float4 postfxViewMatrix2 : packoffset(c116);
  float4 postfxViewMatrix3 : packoffset(c117);
  float4 postfxProjMatrix0 : packoffset(c118);
  float4 postfxProjMatrix1 : packoffset(c119);
  float4 postfxProjMatrix2 : packoffset(c120);
  float4 postfxProjMatrix3 : packoffset(c121);
  float4 postfxViewProjMatrix0 : packoffset(c122);
  float4 postfxViewProjMatrix1 : packoffset(c123);
  float4 postfxViewProjMatrix2 : packoffset(c124);
  float4 postfxViewProjMatrix3 : packoffset(c125);
}

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}

SamplerState samp0_s : register(s0);
SamplerState samplerBilinearWrap_s : register(s1);
Texture2D<float4> floatZSampler : register(t0);
Texture2D<float4> colorMapSampler : register(t6);
Texture2D<float4> gridTextureA : register(t7);
Texture2D<float4> gridTextureB : register(t9);
Texture2D<float4> gridTextureC : register(t10);
Texture2D<float4> gridTextureD : register(t11);
Texture2D<float4> revealTexture : register(t12);
Texture2D<float4> codeTexture1 : register(t14);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  const float4 icb[] = { { 0, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 1.000000},
                              { 1.000000, 0, 0, 0.500000},
                              { 1.000000, 0, 0, 0.200000},
                              { 1.000000, 0, 0, 0.200000},
                              { 1.000000, 0, 0, 0.200000},
                              { 1.000000, 0, 0, 0.200000},
                              { 1.000000, 0, 0, 0.200000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = floatZSampler.Sample(samp0_s, v1.xy).x;
  r1.xyzw = float4(0,-0.00138888892,-0.5,-0.5) + v1.xyxy;
  r0.y = floatZSampler.Sample(samp0_s, r1.xy).x;
  r2.xyz = colorMapSampler.Sample(samp0_s, v1.xy).xyz;
  r2.xyz = float3(3.05175781e-05,3.05175781e-05,3.05175781e-05) * r2.xyz;
  r0.z = cmp(r0.x >= 0.984375);
  r0.w = 1.01587307 * r0.x;
  r1.x = r0.x * 64 + -63;
  r0.z = r0.z ? r1.x : r0.w;
  r0.z = max(9.99999994e-09, r0.z);
  r3.z = rcp(r0.z);
  r0.z = r3.z * r1.z;
  r3.x = postFxControlF.z * r0.z;
  r0.z = r3.z * -r1.w;
  r3.y = postFxControlF.w * r0.z;
  r1.x = renderTargetSize.z + v1.x;
  r1.y = v1.y;
  r0.zw = renderTargetSize.xy * r1.xy;
  r4.xy = (int2)r0.zw;
  r4.zw = float2(0,0);
  r0.z = floatZSampler.Load(r4.xyz).x;
  r0.w = cmp(r0.z >= 0.984375);
  r1.y = 1.01587307 * r0.z;
  r0.z = r0.z * 64 + -63;
  r0.z = r0.w ? r0.z : r1.y;
  r0.z = max(9.99999994e-09, r0.z);
  r4.y = rcp(r0.z);
  r0.z = -0.5 + r1.x;
  r0.z = r0.z * r3.z;
  r4.x = postFxControlF.z * r0.z;
  r0.z = -renderTargetSize.w + v1.y;
  r0.w = cmp(r0.y >= 0.984375);
  r1.x = 1.01587307 * r0.y;
  r0.y = r0.y * 64 + -63;
  r0.y = r0.w ? r0.y : r1.x;
  r0.y = max(9.99999994e-09, r0.y);
  r1.y = rcp(r0.y);
  r0.y = -0.5 + r0.z;
  r0.y = -r0.y * r3.z;
  r1.x = postFxControlF.w * r0.y;
  r0.y = min(r4.y, r1.y);
  r0.y = min(r3.z, r0.y);
  r0.y = cmp(r0.y == 0.000000);
  r0.z = -r4.y + r3.z;
  r0.w = r3.z + -r1.y;
  r0.z = max(abs(r0.z), abs(r0.w));
  r0.xz = cmp(float2(0.899999976,100) < r0.xz);
  r0.y = (int)r0.z | (int)r0.y;
  r5.xyz = postFxControl1.xyz * r3.yyy;
  r5.xyz = r3.xxx * postFxControl0.xyz + r5.xyz;
  r5.xyz = r3.zzz * postFxControl2.xyz + r5.xyz;
  r5.xyz = postFxControl3.xyz + r5.xyz;
  r0.zw = r4.xy + -r3.xz;
  r4.xyz = postFxControl2.zxy * r0.www;
  r4.xyz = r0.zzz * postFxControl0.zxy + r4.xyz;
  r0.zw = r1.xy + -r3.yz;
  r3.xyw = postFxControl2.yzx * r0.www;
  r3.xyw = r0.zzz * postFxControl1.yzx + r3.xyw;
  r6.xyz = r4.xyz * r3.xyw;
  r3.xyw = r4.zxy * r3.ywx + -r6.xyz;
  r0.z = dot(r3.xyw, r3.xyw);
  r0.z = rsqrt(r0.z);
  r1.xy = float2(50,-100) + postFxControlD.xy;
  r4.xyz = -postFxConst00.xyz + r5.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = sqrt(r0.w);
  r2.w = r0.w * postFxConst01.w + postFxConst00.z;
  r2.w = postFxControlE.y + r2.w;
  r2.w = r2.w + -r5.z;
  r2.w = saturate(0.0500000007 * r2.w);
  r3.x = cmp(r0.w < r1.x);
  r3.y = -postFxControlD.x + r0.w;
  r3.y = r3.y * r2.w;
  r3.y = 0.0199999996 * r3.y;
  r3.y = max(0, r3.y);
  r2.w = r3.x ? r3.y : r2.w;
  r3.x = cmp(r1.y < r0.w);
  r0.w = postFxControlD.y + -r0.w;
  r0.w = r2.w * r0.w;
  r3.y = postFxControlD.y + -r1.y;
  r0.w = r0.w / r3.y;
  r0.w = max(0, r0.w);
  r0.w = r3.x ? r0.w : r2.w;
  r2.w = cmp(r0.w == 0.000000);
  if (r2.w != 0) {
    r3.x = 0;
  }
  r4.xy = -postFxConst01.yx + postFxConst00.yx;
  r4.y = r4.y * r5.y;
  r4.x = r4.x * r5.x + -r4.y;
  r4.x = postFxConst00.x * postFxConst01.y + r4.x;
  r4.x = -postFxConst00.y * postFxConst01.x + r4.x;
  r4.yz = -postFxConst02.yx + postFxConst01.yx;
  r4.z = r4.z * r5.y;
  r4.y = r4.y * r5.x + -r4.z;
  r4.y = postFxConst01.x * postFxConst02.y + r4.y;
  r4.y = -postFxConst01.y * postFxConst02.x + r4.y;
  r4.zw = postFxConst02.yx + -postFxConst00.yx;
  r4.w = r4.w * r5.y;
  r4.z = r4.z * r5.x + -r4.w;
  r4.z = postFxConst02.x * postFxConst00.y + r4.z;
  r4.z = -postFxConst02.y * postFxConst00.x + r4.z;
  r4.yw = cmp(float2(0,0) < r4.yx);
  r4.y = r4.y ? r4.w : 0;
  r4.w = cmp(0 < r4.z);
  r4.y = r4.w ? r4.y : 0;
  r4.x = saturate(9.99999975e-06 * r4.x);
  r0.w = r4.x * r0.w;
  r4.x = saturate(9.99999975e-06 * r4.z);
  r0.w = r4.x * r0.w;
  r0.w = r4.y ? r0.w : 0;
  r0.w = r2.w ? r3.x : r0.w;
  r4.xyz = -postFxConst03.xyz + r5.xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = sqrt(r2.w);
  r3.x = r2.w * postFxConst04.w + postFxConst03.z;
  r3.x = postFxControlE.y + r3.x;
  r3.x = r3.x + -r5.z;
  r3.x = saturate(0.0500000007 * r3.x);
  r4.x = cmp(r2.w < r1.x);
  r4.y = -postFxControlD.x + r2.w;
  r4.y = r4.y * r3.x;
  r4.y = 0.0199999996 * r4.y;
  r4.y = max(0, r4.y);
  r3.x = r4.x ? r4.y : r3.x;
  r4.x = cmp(r1.y < r2.w);
  r2.w = postFxControlD.y + -r2.w;
  r2.w = r3.x * r2.w;
  r2.w = r2.w / r3.y;
  r2.w = max(0, r2.w);
  r2.w = r4.x ? r2.w : r3.x;
  r3.x = cmp(r2.w == 0.000000);
  if (r3.x != 0) {
    r4.x = 0;
  }
  r4.yz = -postFxConst04.yx + postFxConst03.yx;
  r4.z = r4.z * r5.y;
  r4.y = r4.y * r5.x + -r4.z;
  r4.y = postFxConst03.x * postFxConst04.y + r4.y;
  r4.y = -postFxConst03.y * postFxConst04.x + r4.y;
  r4.zw = -postFxConst05.yx + postFxConst04.yx;
  r4.w = r4.w * r5.y;
  r4.z = r4.z * r5.x + -r4.w;
  r4.z = postFxConst04.x * postFxConst05.y + r4.z;
  r4.z = -postFxConst04.y * postFxConst05.x + r4.z;
  r6.xy = postFxConst05.yx + -postFxConst03.yx;
  r4.w = r6.y * r5.y;
  r4.w = r6.x * r5.x + -r4.w;
  r4.w = postFxConst05.x * postFxConst03.y + r4.w;
  r4.w = -postFxConst05.y * postFxConst03.x + r4.w;
  r5.w = cmp(0 < r4.y);
  r4.z = cmp(0 < r4.z);
  r4.z = r4.z ? r5.w : 0;
  r5.w = cmp(0 < r4.w);
  r4.z = r4.z ? r5.w : 0;
  r4.y = saturate(9.99999975e-06 * r4.y);
  r2.w = r4.y * r2.w;
  r4.y = saturate(9.99999975e-06 * r4.w);
  r2.w = r4.y * r2.w;
  r2.w = r4.z ? r2.w : 0;
  r2.w = r3.x ? r4.x : r2.w;
  r2.w = postFxConst03.w * r2.w;
  r0.w = postFxConst00.w * r0.w + r2.w;
  r4.xyz = -postFxConst06.xyz + r5.xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = sqrt(r2.w);
  r3.x = r2.w * postFxConst07.w + postFxConst06.z;
  r3.x = postFxControlE.y + r3.x;
  r3.x = r3.x + -r5.z;
  r3.x = saturate(0.0500000007 * r3.x);
  r4.x = cmp(r2.w < r1.x);
  r4.y = -postFxControlD.x + r2.w;
  r4.y = r4.y * r3.x;
  r4.y = 0.0199999996 * r4.y;
  r4.y = max(0, r4.y);
  r3.x = r4.x ? r4.y : r3.x;
  r4.x = cmp(r1.y < r2.w);
  r2.w = postFxControlD.y + -r2.w;
  r2.w = r3.x * r2.w;
  r2.w = r2.w / r3.y;
  r2.w = max(0, r2.w);
  r2.w = r4.x ? r2.w : r3.x;
  r3.x = cmp(r2.w == 0.000000);
  if (r3.x != 0) {
    r4.x = 0;
  }
  r4.yz = -postFxConst07.yx + postFxConst06.yx;
  r4.z = r4.z * r5.y;
  r4.y = r4.y * r5.x + -r4.z;
  r4.y = postFxConst06.x * postFxConst07.y + r4.y;
  r4.y = -postFxConst06.y * postFxConst07.x + r4.y;
  r4.zw = -postFxConst08.yx + postFxConst07.yx;
  r4.w = r4.w * r5.y;
  r4.z = r4.z * r5.x + -r4.w;
  r4.z = postFxConst07.x * postFxConst08.y + r4.z;
  r4.z = -postFxConst07.y * postFxConst08.x + r4.z;
  r6.xy = postFxConst08.yx + -postFxConst06.yx;
  r4.w = r6.y * r5.y;
  r4.w = r6.x * r5.x + -r4.w;
  r4.w = postFxConst08.x * postFxConst06.y + r4.w;
  r4.w = -postFxConst08.y * postFxConst06.x + r4.w;
  r5.w = cmp(0 < r4.y);
  r4.z = cmp(0 < r4.z);
  r4.z = r4.z ? r5.w : 0;
  r5.w = cmp(0 < r4.w);
  r4.z = r4.z ? r5.w : 0;
  r4.y = saturate(9.99999975e-06 * r4.y);
  r2.w = r4.y * r2.w;
  r4.y = saturate(9.99999975e-06 * r4.w);
  r2.w = r4.y * r2.w;
  r2.w = r4.z ? r2.w : 0;
  r2.w = r3.x ? r4.x : r2.w;
  r0.w = postFxConst06.w * r2.w + r0.w;
  r4.xyz = -postFxConst09.xyz + r5.xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = sqrt(r2.w);
  r3.x = r2.w * postFxConst10.w + postFxConst09.z;
  r3.x = postFxControlE.y + r3.x;
  r3.x = r3.x + -r5.z;
  r3.x = saturate(0.0500000007 * r3.x);
  r4.x = cmp(r2.w < r1.x);
  r4.y = -postFxControlD.x + r2.w;
  r4.y = r4.y * r3.x;
  r4.y = 0.0199999996 * r4.y;
  r4.y = max(0, r4.y);
  r3.x = r4.x ? r4.y : r3.x;
  r4.x = cmp(r1.y < r2.w);
  r2.w = postFxControlD.y + -r2.w;
  r2.w = r3.x * r2.w;
  r2.w = r2.w / r3.y;
  r2.w = max(0, r2.w);
  r2.w = r4.x ? r2.w : r3.x;
  r3.x = cmp(r2.w == 0.000000);
  if (r3.x != 0) {
    r4.x = 0;
  }
  r4.yz = -postFxConst10.yx + postFxConst09.yx;
  r4.z = r4.z * r5.y;
  r4.y = r4.y * r5.x + -r4.z;
  r4.y = postFxConst09.x * postFxConst10.y + r4.y;
  r4.y = -postFxConst09.y * postFxConst10.x + r4.y;
  r4.zw = -postFxConst11.yx + postFxConst10.yx;
  r4.w = r4.w * r5.y;
  r4.z = r4.z * r5.x + -r4.w;
  r4.z = postFxConst10.x * postFxConst11.y + r4.z;
  r4.z = -postFxConst10.y * postFxConst11.x + r4.z;
  r6.xy = postFxConst11.yx + -postFxConst09.yx;
  r4.w = r6.y * r5.y;
  r4.w = r6.x * r5.x + -r4.w;
  r4.w = postFxConst11.x * postFxConst09.y + r4.w;
  r4.w = -postFxConst11.y * postFxConst09.x + r4.w;
  r5.w = cmp(0 < r4.y);
  r4.z = cmp(0 < r4.z);
  r4.z = r4.z ? r5.w : 0;
  r5.w = cmp(0 < r4.w);
  r4.z = r4.z ? r5.w : 0;
  r4.y = saturate(9.99999975e-06 * r4.y);
  r2.w = r4.y * r2.w;
  r4.y = saturate(9.99999975e-06 * r4.w);
  r2.w = r4.y * r2.w;
  r2.w = r4.z ? r2.w : 0;
  r2.w = r3.x ? r4.x : r2.w;
  r0.w = postFxConst09.w * r2.w + r0.w;
  r4.xyz = -postFxConst12.xyz + r5.xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = sqrt(r2.w);
  r3.x = r2.w * postFxConst13.w + postFxConst12.z;
  r3.x = postFxControlE.y + r3.x;
  r3.x = r3.x + -r5.z;
  r3.x = saturate(0.0500000007 * r3.x);
  r4.x = cmp(r2.w < r1.x);
  r4.y = -postFxControlD.x + r2.w;
  r4.y = r4.y * r3.x;
  r4.y = 0.0199999996 * r4.y;
  r4.y = max(0, r4.y);
  r3.x = r4.x ? r4.y : r3.x;
  r4.x = cmp(r1.y < r2.w);
  r2.w = postFxControlD.y + -r2.w;
  r2.w = r3.x * r2.w;
  r2.w = r2.w / r3.y;
  r2.w = max(0, r2.w);
  r2.w = r4.x ? r2.w : r3.x;
  r3.x = cmp(r2.w == 0.000000);
  if (r3.x != 0) {
    r4.x = 0;
  }
  r4.yz = -postFxConst13.yx + postFxConst12.yx;
  r4.z = r4.z * r5.y;
  r4.y = r4.y * r5.x + -r4.z;
  r4.y = postFxConst12.x * postFxConst13.y + r4.y;
  r4.y = -postFxConst12.y * postFxConst13.x + r4.y;
  r4.zw = -postFxConst14.yx + postFxConst13.yx;
  r4.w = r4.w * r5.y;
  r4.z = r4.z * r5.x + -r4.w;
  r4.z = postFxConst13.x * postFxConst14.y + r4.z;
  r4.z = -postFxConst13.y * postFxConst14.x + r4.z;
  r6.xy = postFxConst14.yx + -postFxConst12.yx;
  r4.w = r6.y * r5.y;
  r4.w = r6.x * r5.x + -r4.w;
  r4.w = postFxConst14.x * postFxConst12.y + r4.w;
  r4.w = -postFxConst14.y * postFxConst12.x + r4.w;
  r5.w = cmp(0 < r4.y);
  r4.z = cmp(0 < r4.z);
  r4.z = r4.z ? r5.w : 0;
  r5.w = cmp(0 < r4.w);
  r4.z = r4.z ? r5.w : 0;
  r4.y = saturate(9.99999975e-06 * r4.y);
  r2.w = r4.y * r2.w;
  r4.y = saturate(9.99999975e-06 * r4.w);
  r2.w = r4.y * r2.w;
  r2.w = r4.z ? r2.w : 0;
  r2.w = r3.x ? r4.x : r2.w;
  r0.w = postFxConst12.w * r2.w + r0.w;
  r4.xyz = -postFxConst15.xyz + r5.xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = sqrt(r2.w);
  r3.x = r2.w * postFxConst16.w + postFxConst15.z;
  r3.x = postFxControlE.y + r3.x;
  r3.x = r3.x + -r5.z;
  r3.x = saturate(0.0500000007 * r3.x);
  r4.x = cmp(r2.w < r1.x);
  r4.y = -postFxControlD.x + r2.w;
  r4.y = r4.y * r3.x;
  r4.y = 0.0199999996 * r4.y;
  r4.y = max(0, r4.y);
  r3.x = r4.x ? r4.y : r3.x;
  r4.x = cmp(r1.y < r2.w);
  r2.w = postFxControlD.y + -r2.w;
  r2.w = r3.x * r2.w;
  r2.w = r2.w / r3.y;
  r2.w = max(0, r2.w);
  r2.w = r4.x ? r2.w : r3.x;
  r3.x = cmp(r2.w == 0.000000);
  if (r3.x != 0) {
    r4.x = 0;
  }
  r4.yz = -postFxConst16.yx + postFxConst15.yx;
  r4.z = r4.z * r5.y;
  r4.y = r4.y * r5.x + -r4.z;
  r4.y = postFxConst15.x * postFxConst16.y + r4.y;
  r4.y = -postFxConst15.y * postFxConst16.x + r4.y;
  r4.zw = -postFxConst17.yx + postFxConst16.yx;
  r4.w = r4.w * r5.y;
  r4.z = r4.z * r5.x + -r4.w;
  r4.z = postFxConst16.x * postFxConst17.y + r4.z;
  r4.z = -postFxConst16.y * postFxConst17.x + r4.z;
  r6.xy = postFxConst17.yx + -postFxConst15.yx;
  r4.w = r6.y * r5.y;
  r4.w = r6.x * r5.x + -r4.w;
  r4.w = postFxConst17.x * postFxConst15.y + r4.w;
  r4.w = -postFxConst17.y * postFxConst15.x + r4.w;
  r5.w = cmp(0 < r4.y);
  r4.z = cmp(0 < r4.z);
  r4.z = r4.z ? r5.w : 0;
  r5.w = cmp(0 < r4.w);
  r4.z = r4.z ? r5.w : 0;
  r4.y = saturate(9.99999975e-06 * r4.y);
  r2.w = r4.y * r2.w;
  r4.y = saturate(9.99999975e-06 * r4.w);
  r2.w = r4.y * r2.w;
  r2.w = r4.z ? r2.w : 0;
  r2.w = r3.x ? r4.x : r2.w;
  r0.w = postFxConst15.w * r2.w + r0.w;
  r4.xyz = -postFxConst18.xyz + r5.xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = sqrt(r2.w);
  r3.x = r2.w * postFxConst19.w + postFxConst18.z;
  r3.x = postFxControlE.y + r3.x;
  r3.x = r3.x + -r5.z;
  r3.x = saturate(0.0500000007 * r3.x);
  r4.x = cmp(r2.w < r1.x);
  r4.y = -postFxControlD.x + r2.w;
  r4.y = r4.y * r3.x;
  r4.y = 0.0199999996 * r4.y;
  r4.y = max(0, r4.y);
  r3.x = r4.x ? r4.y : r3.x;
  r4.x = cmp(r1.y < r2.w);
  r2.w = postFxControlD.y + -r2.w;
  r2.w = r3.x * r2.w;
  r2.w = r2.w / r3.y;
  r2.w = max(0, r2.w);
  r2.w = r4.x ? r2.w : r3.x;
  r3.x = cmp(r2.w == 0.000000);
  if (r3.x != 0) {
    r4.x = 0;
  }
  r4.yz = -postFxConst19.yx + postFxConst18.yx;
  r4.z = r4.z * r5.y;
  r4.y = r4.y * r5.x + -r4.z;
  r4.y = postFxConst18.x * postFxConst19.y + r4.y;
  r4.y = -postFxConst18.y * postFxConst19.x + r4.y;
  r4.zw = -postFxConst20.yx + postFxConst19.yx;
  r4.w = r4.w * r5.y;
  r4.z = r4.z * r5.x + -r4.w;
  r4.z = postFxConst19.x * postFxConst20.y + r4.z;
  r4.z = -postFxConst19.y * postFxConst20.x + r4.z;
  r6.xy = postFxConst20.yx + -postFxConst18.yx;
  r4.w = r6.y * r5.y;
  r4.w = r6.x * r5.x + -r4.w;
  r4.w = postFxConst20.x * postFxConst18.y + r4.w;
  r4.w = -postFxConst20.y * postFxConst18.x + r4.w;
  r5.w = cmp(0 < r4.y);
  r4.z = cmp(0 < r4.z);
  r4.z = r4.z ? r5.w : 0;
  r5.w = cmp(0 < r4.w);
  r4.z = r4.z ? r5.w : 0;
  r4.y = saturate(9.99999975e-06 * r4.y);
  r2.w = r4.y * r2.w;
  r4.y = saturate(9.99999975e-06 * r4.w);
  r2.w = r4.y * r2.w;
  r2.w = r4.z ? r2.w : 0;
  r2.w = r3.x ? r4.x : r2.w;
  r0.w = postFxConst18.w * r2.w + r0.w;
  r4.xyz = -postFxConst21.xyz + r5.xyz;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = sqrt(r2.w);
  r3.x = r2.w * postFxConst22.w + postFxConst21.z;
  r3.x = postFxControlE.y + r3.x;
  r3.x = r3.x + -r5.z;
  r3.x = saturate(0.0500000007 * r3.x);
  r1.x = cmp(r2.w < r1.x);
  r4.x = -postFxControlD.x + r2.w;
  r4.x = r4.x * r3.x;
  r4.x = 0.0199999996 * r4.x;
  r4.x = max(0, r4.x);
  r1.x = r1.x ? r4.x : r3.x;
  r1.y = cmp(r1.y < r2.w);
  r2.w = postFxControlD.y + -r2.w;
  r2.w = r2.w * r1.x;
  r2.w = r2.w / r3.y;
  r2.w = max(0, r2.w);
  r1.x = r1.y ? r2.w : r1.x;
  r1.y = cmp(r1.x == 0.000000);
  if (r1.y != 0) {
    r2.w = 0;
  }
  r3.xy = -postFxConst22.yx + postFxConst21.yx;
  r3.y = r3.y * r5.y;
  r3.x = r3.x * r5.x + -r3.y;
  r3.x = postFxConst21.x * postFxConst22.y + r3.x;
  r3.x = -postFxConst21.y * postFxConst22.x + r3.x;
  r4.xy = -postFxConst23.yx + postFxConst22.yx;
  r3.y = r4.y * r5.y;
  r3.y = r4.x * r5.x + -r3.y;
  r3.y = postFxConst22.x * postFxConst23.y + r3.y;
  r3.y = -postFxConst22.y * postFxConst23.x + r3.y;
  r4.xy = postFxConst23.yx + -postFxConst21.yx;
  r4.y = r4.y * r5.y;
  r4.x = r4.x * r5.x + -r4.y;
  r4.x = postFxConst23.x * postFxConst21.y + r4.x;
  r4.x = -postFxConst23.y * postFxConst21.x + r4.x;
  r4.y = cmp(0 < r3.x);
  r3.y = cmp(0 < r3.y);
  r3.y = r3.y ? r4.y : 0;
  r4.y = cmp(0 < r4.x);
  r3.y = r3.y ? r4.y : 0;
  r3.x = saturate(9.99999975e-06 * r3.x);
  r1.x = r3.x * r1.x;
  r3.x = saturate(9.99999975e-06 * r4.x);
  r1.x = r3.x * r1.x;
  r1.x = r3.y ? r1.x : 0;
  r1.x = r1.y ? r2.w : r1.x;
  r0.w = postFxConst21.w * r1.x + r0.w;
  r0.w = -1 + r0.w;
  r0.w = max(0, r0.w);
  r0.w = 0.00999999978 + r0.w;
  r1.x = (int)r0.w;
  r1.y = frac(r0.w);
  r1.x = max(0, (int)r1.x);
  r3.xy = min(int2(6,4), (int2)r1.xx);
  r1.x = icb[r3.x+1].w + -icb[r3.x+0].w;
  r1.x = r1.y * r1.x + icb[r3.x+0].w;
  r4.xy = float2(20,0.25) * gameTime.ww;
  r2.w = frac(r4.x);
  r2.w = gameTime.w * 20 + -r2.w;
  r6.z = 0.0500000007 * r2.w;
  r4.xz = renderTargetSize.xy * v1.xy;
  r7.xy = (int2)r4.xz;
  r7.zw = float2(0,0);
  r2.w = floatZSampler.Load(r7.xyz).x;
  r3.x = cmp(r2.w >= 0.984375);
  r4.x = 1.01587307 * r2.w;
  r2.w = r2.w * 64 + -63;
  r2.w = r3.x ? r2.w : r4.x;
  r2.w = max(9.99999994e-09, r2.w);
  r2.w = rcp(r2.w);
  r1.z = r2.w * r1.z;
  r1.w = r2.w * -r1.w;
  r1.zw = postFxControlF.zw * r1.zw;
  r4.xz = postFxControl1.xy * r1.ww;
  r1.zw = r1.zz * postFxControl0.xy + r4.xz;
  r1.zw = r2.ww * postFxControl2.xy + r1.zw;
  r1.zw = postFxControl3.xy + r1.zw;
  r1.zw = float2(0.0250000004,0.0250000004) * r1.zw;
  r4.xz = ddx_coarse(r1.zw);
  r5.zw = ddy_coarse(r1.zw);
  if (r3.y == 0) {
    r7.xyz = gridTextureA.SampleGrad(samplerBilinearWrap_s, r1.zw, r4.xzx, r5.zwz).xyz;
    r8.xyz = float3(0,0,0);
  } else {
    r2.w = cmp((int)r3.y == 1);
    if (r2.w != 0) {
      r8.xyz = gridTextureA.SampleGrad(samplerBilinearWrap_s, r1.zw, r4.xzx, r5.zwz).xyz;
      r7.xyz = gridTextureB.SampleGrad(samplerBilinearWrap_s, r1.zw, r4.xzx, r5.zwz).xyz;
    } else {
      r2.w = cmp((int)r3.y == 2);
      if (r2.w != 0) {
        r8.xyz = gridTextureB.SampleGrad(samplerBilinearWrap_s, r1.zw, r4.xzx, r5.zwz).xyz;
        r7.xyz = gridTextureC.SampleGrad(samplerBilinearWrap_s, r1.zw, r4.xzx, r5.zwz).xyz;
      } else {
        r2.w = cmp((int)r3.y == 3);
        if (r2.w != 0) {
          r8.xyz = gridTextureC.SampleGrad(samplerBilinearWrap_s, r1.zw, r4.xzx, r5.zwz).xyz;
          r7.xyz = gridTextureD.SampleGrad(samplerBilinearWrap_s, r1.zw, r4.xzx, r5.zwz).xyz;
        } else {
          r7.xyz = gridTextureD.SampleGrad(samplerBilinearWrap_s, r1.zw, r4.xzx, r5.zwz).xyz;
          r8.xyz = r7.xyz;
        }
      }
    }
  }
  r4.xzw = r7.xyz + -r8.xyz;
  r1.yzw = r1.yyy * r4.xzw + r8.xyz;
  r3.xy = r5.xy * float2(0.00312500005,0.00312500005) + r4.yy;
  r2.w = revealTexture.Sample(samplerBilinearWrap_s, r3.xy).x;
  r1.yzw = r2.www * r1.yzw;
  r4.xyz = r1.yzw * r1.yzw;
  r4.xyz = r4.xyz * r2.www;
  r1.yzw = r4.xyz * float3(3,3,3) + r1.yzw;
  r6.w = v1.y;
  r2.w = dot(r6.zw, float2(37.3498383,59.3948402));
  r6.x = frac(r2.w);
  r2.w = dot(r6.xzw, float3(81.2394867,37.3498383,59.3948402));
  r6.y = frac(r2.w);
  r2.w = dot(r6.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r6.z = frac(r2.w);
  r2.w = dot(r6.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r6.w = frac(r2.w);
  r2.w = dot(r6.xyzw, float4(81.2394867,17.3480244,37.3498383,59.3948402));
  r2.w = frac(r2.w);
  r2.w = frac(r2.w);
  r2.w = r2.w * 0.600000024 + 0.400000006;
  r0.w = min(0.5, r0.w);
  r3.x = cmp(r3.z < 10);
  r0.z = r3.w * r0.z + -postFxControlE.x;
  r3.y = 1 + -postFxControlE.x;
  r0.z = saturate(r0.z / r3.y);
  r0.x = (int)r0.x | (int)r0.y;
  r0.x = r0.x ? 0 : r0.z;
  r4.xyzw = codeTexture1.Sample(samp0_s, v1.xy).xyzw;
  r0.y = saturate(dot(r4.xyzw, float4(1,1,1,1)));
  r0.y = 1 + -r0.y;
  r0.y = r0.w * r0.y;
  r0.y = r3.x ? 0 : r0.y;
  r1.yzw = r2.www * r1.yzw;
  r0.yzw = r1.yzw * r0.yyy;
  r0.xyz = r0.yzw * r0.xxx;
  r0.xyz = r2.xyz * r1.xxx + r0.xyz;
  o0.xyz = float3(32768,32768,32768) * r0.xyz;
  o0.w = 1;
  return;
}