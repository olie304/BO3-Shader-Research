// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:40:30 2021

cbuffer _Globals : register(b0)
{
  float4 flagParams : packoffset(c0);
  float4 colorObjMin : packoffset(c1);
  float4 colorObjMax : packoffset(c2);
  float colorObjMinBaseBlend : packoffset(c3);
  float colorObjMaxBaseBlend : packoffset(c3.y);
  float2 uvScroll : packoffset(c3.z);
  float4 detailScale : packoffset(c4);
  float4 detailScale1 : packoffset(c5);
  float4 detailScale2 : packoffset(c6);
  float4 detailScale3 : packoffset(c7);
  float4 alphaRevealParms : packoffset(c8);
  float4 colorDetailScale : packoffset(c9);
  float4 LightTextColor : packoffset(c10);
  float4 LightRevealColor : packoffset(c11);
  float Indent : packoffset(c12);
  float4 Background : packoffset(c13);
  float DebugTime : packoffset(c14);
  float LightOutlinePower : packoffset(c14.y);
  float4 LightDisolveColor : packoffset(c15);
  float BlurScale : packoffset(c16);
}

cbuffer GenericsCBuffer : register(b3)
{
  float4 scriptVector0 : packoffset(c0);
  float4 scriptVector1 : packoffset(c1);
  float4 scriptVector2 : packoffset(c2);
  float4 scriptVector3 : packoffset(c3);
  float4 scriptVector4 : packoffset(c4);
  float4 scriptVector5 : packoffset(c5);
  float4 scriptVector6 : packoffset(c6);
  float4 scriptVector7 : packoffset(c7);
  float4 weaponParam0 : packoffset(c8);
  float4 weaponParam1 : packoffset(c9);
  float4 weaponParam2 : packoffset(c10);
  float4 weaponParam3 : packoffset(c11);
  float4 weaponParam4 : packoffset(c12);
  float4 weaponParam5 : packoffset(c13);
  float4 weaponParam6 : packoffset(c14);
  float4 weaponParam7 : packoffset(c15);
}

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}

SamplerState FutureMap_Sampler_s : register(s1);
SamplerState ui3dSampler_C1_P0_sampler_s : register(s2);
Texture2D<float4> FutureMap : register(t0);
Texture2D<float4> ui3dSampler_C1_P0 : register(t6);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = scriptVector3.x * Indent;
  r0.y = 0.5 * r0.x;
  r1.x = 1;
  r0.xw = float2(0.0009765625,0.001953125) * scriptVector0.xy;
  r1.yz = scriptVector0.wz * float2(0.001953125,0.0009765625) + -r0.wx;
  r2.xy = v1.yx * r1.yx;
  r2.z = scriptVector0.y * 0.001953125 + r2.x;
  r1.xy = r2.yz * ui3dUVSetup4.xy + ui3dUVSetup4.zw;
  r0.z = 0;
  r2.yz = r1.yx + -r0.zy;
  r3.xyzw = saturate(BlurScale * float4(-0.00800000038,-0.00700000022,-0.00600000005,0.00100000005) + r2.zzzz);
  r4.xzw = r3.xyz;
  r5.xyzw = saturate(r2.yzzy);
  r4.y = r5.x;
  r0.y = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.xy).w;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.zy).w;
  r0.w = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.wy).w;
  r0.y = r0.z * 2 + r0.y;
  r0.y = r0.w * 3 + r0.y;
  r6.xyzw = saturate(BlurScale * float4(-0.00500000035,-0.00400000019,-0.00300000003,-0.00200000009) + r2.zzzz);
  r4.xzw = r6.xyz;
  r3.x = r6.w;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.xy).w;
  r0.y = r0.z * 4 + r0.y;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.zy).w;
  r0.w = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.wy).w;
  r3.y = r4.y;
  r0.y = r0.z * 5 + r0.y;
  r0.y = r0.w * 6 + r0.y;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r3.xy).w;
  r0.y = r0.z * 7 + r0.y;
  r4.xyzw = saturate(BlurScale * float4(0.00200000009,-0.00100000005,0.00300000003,0.00400000019) + r2.zzzz);
  r3.z = r4.y;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r3.zy).w;
  r0.y = r0.z * 7 + r0.y;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r5.yx).w;
  r0.w = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r5.zw).w;
  r0.y = r0.z * 7 + r0.y;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r3.wy).w;
  r4.y = r3.y;
  r0.y = r0.z * 7 + r0.y;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.xy).w;
  r0.y = r0.z * 7 + r0.y;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.zy).w;
  r1.x = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.wy).w;
  r0.y = r0.z * 6 + r0.y;
  r0.y = r1.x * 5 + r0.y;
  r3.xyzw = saturate(BlurScale * float4(0.00800000038,0.00500000035,0.00600000005,0.00700000022) + r2.zzzz);
  r4.xzw = r3.yzw;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.xy).w;
  r0.y = r0.z * 4 + r0.y;
  r0.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.zy).w;
  r1.x = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r4.wy).w;
  r3.y = r4.y;
  r1.y = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r3.xy).w;
  r0.y = r0.z * 3 + r0.y;
  r0.y = r1.x * 2 + r0.y;
  r0.y = r0.y + r1.y;
  r0.y = 0.012987013 * r0.y;
  r1.x = 0.5;
  r3.xy = float2(0.100000001,0.0131438496) * gameTime.ww;
  r3.xy = frac(r3.xy);
  r0.z = frac(r3.y);
  r1.w = 10 * r3.x;
  r3.xy = v0.xy / renderTargetSize.xy;
  r1.y = r3.y + -r0.z;
  r0.z = FutureMap.Sample(FutureMap_Sampler_s, r1.xy).w;
  r1.x = 1 + -r0.z;
  r0.z = r1.x * 0.800000012 + r0.z;
  r0.y = r0.y * r0.z;
  r0.y = max(r0.w, r0.y);
  r0.y = r0.y + -r0.w;
  r0.z = 0.100000001 * DebugTime;
  r0.z = frac(r0.z);
  r0.z = 10 * r0.z;
  r1.x = cmp(0 < DebugTime);
  r0.z = r1.x ? r0.z : r1.w;
  r1.y = 0.5 * r0.z;
  r3.yzw = max(float3(4,4,7), r0.zzz);
  r3.yzw = min(float3(5,5,8), r3.yzw);
  r3.yzw = float3(-4,-4,-7) + r3.yzw;
  r0.z = 4 * scriptVector2.x;
  r0.z = r1.x ? r1.y : r0.z;
  r1.y = r0.z * r1.z + r0.x;
  r0.z = cmp(0.99000001 < r0.z);
  r0.x = scriptVector1.x * 0.0009765625 + -r0.x;
  r1.zw = float2(-0.100000001,-0.5) + r1.yy;
  r2.w = r1.y + -r1.z;
  r1.yzw = r3.xxx + -r1.yzw;
  r4.xy = saturate(float2(50,-10) * r1.yy);
  r1.y = saturate(r1.z / r2.w);
  r1.z = saturate(5.00000048 * r1.w);
  r1.y = r1.y * r1.y;
  r1.y = r1.y * r1.y;
  r1.w = r1.z * -2 + 3;
  r1.z = r1.z * r1.z;
  r1.z = r1.w * r1.z + -0.5;
  r1.z = -abs(r1.z) * 2 + 1;
  r1.y = max(r1.y, r1.z);
  r1.z = r4.y * -2 + 3;
  r1.w = r4.y * r4.y;
  r2.w = 1 + -r4.x;
  r1.z = r1.z * r1.w + -0.5;
  r1.z = -abs(r1.z) * 2 + 1;
  r1.z = max(r1.y, r1.z);
  r1.z = r1.z * 0.700000048 + 0.899999976;
  r1.z = min(1, r1.z);
  r0.y = r1.z * r0.y + r0.w;
  r4.w = r0.y * r2.w;
  r5.xyz = LightRevealColor.xyz + -LightTextColor.xyz;
  r1.yzw = r1.yyy * r5.xyz + LightTextColor.xyz;
  r5.xyz = LightDisolveColor.xyz + -r1.yzw;
  r6.xyz = scriptVector2.yzw * scriptVector2.yzw;
  r6.xyz = r6.xyz * r6.xyz;
  r3.xyz = r1.xxx ? r3.yzw : r6.xyz;
  r5.xyz = r3.xxx * r5.xyz + r1.yzw;
  r0.yzw = r0.zzz ? r5.xyz : r1.yzw;
  r1.xyz = LightDisolveColor.xyz + -r0.yzw;
  r4.xyz = r3.xxx * r1.xyz + r0.yzw;
  r1.xyzw = float4(0.5,0.5,0.5,0) + -r4.xyzw;
  r1.xyzw = r3.xxxx * r1.wxyz + r4.wxyz;
  r0.y = log2(r1.x);
  r0.y = LightOutlinePower * r0.y;
  r0.y = exp2(r0.y);
  r0.yzw = r0.yyy * r1.yzw;
  r1.x = saturate(r1.x);
  r1.y = min(1, r3.y);
  r1.z = r1.y * -2 + 3;
  r1.y = r1.y * r1.y;
  r1.y = r1.z * r1.y;
  r2.x = r1.y * r0.x + r2.z;
  r2.xy = saturate(r2.xy);
  r1.yz = float2(0.0009765625,0.0009765625) * scriptVector1.xy;
  r0.x = cmp(r1.y < r2.x);
  r1.y = cmp(r2.x < r1.z);
  r1.z = ui3dSampler_C1_P0.Sample(ui3dSampler_C1_P0_sampler_s, r2.xy).w;
  r2.xyzw = LightTextColor.xyzw * r1.zzzz + float4(-0.5,-0.5,-0.5,-0);
  r0.x = r0.x ? r1.y : 0;
  r0.x = r0.x ? 1.000000 : 0;
  r2.xyzw = r0.xxxx * r2.xyzw + float4(0.5,0.5,0.5,0);
  r4.xyz = LightDisolveColor.xyz;
  r4.w = 0;
  r4.xyzw = r4.xyzw + -r2.xyzw;
  r2.xyzw = r3.zzzz * r4.xyzw + r2.xyzw;
  r0.x = log2(r3.x);
  r0.x = 0.25 * r0.x;
  r0.x = exp2(r0.x);
  r1.yzw = float3(1,1,1);
  r1.yzw = r2.xyz * r1.yzw + -r0.yzw;
  r2.x = r2.w * r0.x;
  r3.w = saturate(r2.w * r0.x + r1.x);
  r0.x = log2(r2.x);
  r0.x = LightOutlinePower * r0.x;
  r0.x = exp2(r0.x);
  r3.xyz = r0.xxx * r1.yzw + r0.yzw;
  r0.xyz = -Background.xyz + r3.xyz;
  r0.xyz = r3.www * r0.xyz + Background.xyz;
  r1.x = cmp(0.800000012 < Background.w);
  r0.w = 1;
  r0.xyzw = r1.xxxx ? r0.xyzw : r3.xyzw;
  o0.xyz = r0.xyz * r0.www;
  o0.w = r0.w;
  return;
}