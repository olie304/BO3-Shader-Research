//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:40:39 2021
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float4 BackgroundColor;            // Offset:  160 Size:    16
//   float4 MomentumColor;              // Offset:  176 Size:    16
//   float4 GradientColor;              // Offset:  192 Size:    16
//   float4 TickMarkColorAndHarshness;  // Offset:  208 Size:    16
//   float4 PositiveColor;              // Offset:  224 Size:    16
//   float4 NegativeColor;              // Offset:  240 Size:    16
//
// }
//
// cbuffer GenericsCBuffer
// {
//
//   float4 scriptVector0;              // Offset:    0 Size:    16
//   float4 scriptVector1;              // Offset:   16 Size:    16
//   float4 scriptVector2;              // Offset:   32 Size:    16
//   float4 scriptVector3;              // Offset:   48 Size:    16 [unused]
//   float4 scriptVector4;              // Offset:   64 Size:    16 [unused]
//   float4 scriptVector5;              // Offset:   80 Size:    16 [unused]
//   float4 scriptVector6;              // Offset:   96 Size:    16 [unused]
//   float4 scriptVector7;              // Offset:  112 Size:    16 [unused]
//   float4 weaponParam0;               // Offset:  128 Size:    16 [unused]
//   float4 weaponParam1;               // Offset:  144 Size:    16 [unused]
//   float4 weaponParam2;               // Offset:  160 Size:    16 [unused]
//   float4 weaponParam3;               // Offset:  176 Size:    16 [unused]
//   float4 weaponParam4;               // Offset:  192 Size:    16 [unused]
//   float4 weaponParam5;               // Offset:  208 Size:    16 [unused]
//   float4 weaponParam6;               // Offset:  224 Size:    16 [unused]
//   float4 weaponParam7;               // Offset:  240 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// $Globals                          cbuffer      NA          NA            cb0      1 
// GenericsCBuffer                   cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[16], immediateIndexed
dcl_constantbuffer CB3[3], immediateIndexed
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 3
add r0.xy, v2.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
max r0.z, |r0.y|, |r0.x|
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
min r0.w, |r0.y|, |r0.x|
mul r0.z, r0.z, r0.w
mul r0.w, r0.z, r0.z
mad r1.x, r0.w, l(0.02083510), l(-0.085133)
mad r1.x, r0.w, r1.x, l(0.180141)
mad r1.x, r0.w, r1.x, l(-0.33029950)
mad r0.w, r0.w, r1.x, l(0.999866)
mul r1.x, r0.w, r0.z
mad r1.x, r1.x, l(-2.000000), l(1.57079637)
lt r1.y, |r0.y|, |r0.x|
and r1.x, r1.y, r1.x
mad r0.z, r0.z, r0.w, r1.x
lt r0.w, r0.y, -r0.y
and r0.w, r0.w, l(0xc0490fdb)
add r0.z, r0.w, r0.z
min r0.w, r0.y, r0.x
max r0.x, r0.y, r0.x
ge r0.x, r0.x, -r0.x
lt r0.y, r0.w, -r0.w
and r0.x, r0.x, r0.y
movc r0.x, r0.x, -r0.z, r0.z
mul_sat r0.y, r0.x, l(-0.31830987)
lt r0.x, r0.x, l(0.000000)
and r0.x, r0.x, l(0x3f800000)
add r0.z, cb3[0].x, cb3[2].x
add_sat r0.w, -r0.z, r0.y
min r0.w, r0.w, r0.y
add r1.x, -r0.z, l(1.000000)
max r0.z, r0.z, r1.x
div r0.z, r0.w, r0.z
mul_sat r0.z, r0.z, l(100.000000)
add r0.w, -r0.z, l(1.000000)
add_sat r1.x, r0.y, -cb3[0].x
min r1.x, r0.y, r1.x
add r1.y, -cb3[0].x, l(1.000000)
max r1.y, r1.y, cb3[0].x
div r1.x, r1.x, r1.y
mul_sat r1.x, r1.x, l(100.000000)
add r1.x, -r1.x, l(1.000000)
add r1.y, -r1.x, l(1.000000)
mul r0.w, r0.w, r1.y
mul r0.z, r0.z, r1.x
max r0.z, r0.z, r0.w
add r0.w, -r0.y, cb3[0].x
min r0.w, r0.y, r0.w
add r2.xyzw, -r0.yyyy, cb3[1].xyzw
mul_sat r2.xyzw, |r2.xyzw|, cb0[13].wwww
add r2.xyzw, -r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
max r1.yz, r2.yywy, r2.xxzx
max r0.y, r1.z, r1.y
mul_sat r0.w, r0.w, cb3[0].y
add r2.xyzw, cb0[11].xyzw, -cb0[12].xyzw
mad r2.xyzw, r0.wwww, r2.xyzw, cb0[12].xyzw
add r2.xyzw, r2.xyzw, -cb0[10].xyzw
mad r1.xyzw, r1.xxxx, r2.xyzw, cb0[10].xyzw
lt r0.w, l(0.000000), cb3[2].x
lt r2.x, cb3[2].x, l(0.000000)
iadd r0.w, -r0.w, r2.x
itof r0.w, r0.w
mov_sat r0.w, r0.w
add r2.xyzw, cb0[14].xyzw, -cb0[15].xyzw
mad r2.xyzw, r0.wwww, r2.xyzw, cb0[15].xyzw
add r2.xyzw, -r1.xyzw, r2.xyzw
mad r1.xyzw, r0.zzzz, r2.xyzw, r1.xyzw
add r2.xyz, -r1.xyzx, cb0[13].xyzx
add r2.w, -r1.w, l(1.000000)
mad r1.xyzw, r0.yyyy, r2.xyzw, r1.xyzw
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[0].w
add r0.z, -r0.y, -cb3[0].z
add r0.y, -r0.y, l(1.000000)
add r0.z, r0.z, l(1.000000)
add r2.xy, -v2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
dp2 r0.w, r2.xyxx, r2.xyxx
sqrt r0.w, r0.w
mad r0.z, -r0.w, l(2.000000), r0.z
mad r0.y, r0.w, l(2.000000), -r0.y
mul_sat r0.yz, r0.yyzy, cb3[0].wwww
max r0.y, r0.z, r0.y
add r0.y, -r0.y, l(1.000000)
mul r0.x, r0.y, r0.x
mul r1.w, r0.x, r1.w
mul o0.xyzw, r1.xyzw, v1.xyzw
ret 
// Approximately 86 instruction slots used
