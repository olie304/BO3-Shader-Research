//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:40:36 2021
//
//
// Buffer Definitions: 
//
// cbuffer GenericsCBuffer
// {
//
//   float4 scriptVector0;              // Offset:    0 Size:    16
//   float4 scriptVector1;              // Offset:   16 Size:    16 [unused]
//   float4 scriptVector2;              // Offset:   32 Size:    16
//   float4 scriptVector3;              // Offset:   48 Size:    16 [unused]
//   float4 scriptVector4;              // Offset:   64 Size:    16 [unused]
//   float4 scriptVector5;              // Offset:   80 Size:    16 [unused]
//   float4 scriptVector6;              // Offset:   96 Size:    16 [unused]
//   float4 scriptVector7;              // Offset:  112 Size:    16 [unused]
//   float4 weaponParam0;               // Offset:  128 Size:    16 [unused]
//   float4 weaponParam1;               // Offset:  144 Size:    16 [unused]
//   float4 weaponParam2;               // Offset:  160 Size:    16 [unused]
//   float4 weaponParam3;               // Offset:  176 Size:    16 [unused]
//   float4 weaponParam4;               // Offset:  192 Size:    16 [unused]
//   float4 weaponParam5;               // Offset:  208 Size:    16 [unused]
//   float4 weaponParam6;               // Offset:  224 Size:    16 [unused]
//   float4 weaponParam7;               // Offset:  240 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// DayMap_Sampler                    sampler      NA          NA             s1      1 
// Mesh_Sampler                      sampler      NA          NA             s2      1 
// DayMap                            texture  float4          2d             t0      1 
// Mesh                              texture  float4          2d             t6      1 
// GenericsCBuffer                   cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[3], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 4
mad r0.xy, v2.yxyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.z, -r0.y, r0.y, l(1.000000)
mad r0.z, -r0.x, r0.x, r0.z
sqrt r0.w, r0.z
ge r0.z, r0.z, l(0.000000)
sincos r1.x, r2.x, cb3[2].z
mul r1.xy, r0.xyxx, r1.xxxx
mad r0.y, r0.y, r2.x, -r1.x
mad r0.x, r0.x, r2.x, r1.y
sincos r1.x, r2.x, cb3[2].x
mul r1.y, r0.w, r1.x
mad r1.y, r0.x, r2.x, -r1.y
mul r1.z, r0.w, r2.x
mad r0.x, r0.x, r1.x, r1.z
sincos r1.x, r2.x, cb3[2].y
mul r1.z, r0.x, r1.x
mad r1.z, r0.y, r2.x, -r1.z
mul r0.x, r0.x, r2.x
mad r0.x, r0.y, r1.x, r0.x
min r0.y, |r0.x|, |r1.z|
max r1.x, |r0.x|, |r1.z|
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mul r0.y, r0.y, r1.x
mul r1.x, r0.y, r0.y
mad r1.w, r1.x, l(0.02083510), l(-0.085133)
mad r1.w, r1.x, r1.w, l(0.180141)
mad r1.w, r1.x, r1.w, l(-0.33029950)
mad r1.x, r1.x, r1.w, l(0.999866)
mul r1.w, r0.y, r1.x
lt r2.x, |r0.x|, |r1.z|
mad r1.w, r1.w, l(-2.000000), l(1.57079637)
and r1.w, r2.x, r1.w
mad r0.y, r0.y, r1.x, r1.w
lt r1.x, r0.x, -r0.x
and r1.x, r1.x, l(0xc0490fdb)
add r0.y, r0.y, r1.x
min r1.x, r0.x, r1.z
max r0.x, r0.x, r1.z
lt r1.x, r1.x, -r1.x
ge r0.x, r0.x, -r0.x
and r0.x, r0.x, r1.x
movc r0.x, r0.x, -r0.y, r0.y
mad r0.x, r0.x, l(0.15915494), l(0.500000)
add r1.x, -|r1.y|, l(1.000000)
sqrt r1.x, r1.x
mad r1.z, |r1.y|, l(-0.01872930), l(0.074261)
mad r1.z, r1.z, |r1.y|, l(-0.21211439)
mad r1.z, r1.z, |r1.y|, l(1.57072878)
mul r1.w, r1.x, r1.z
mad r1.w, r1.w, l(-2.000000), l(3.14159274)
lt r2.x, -r1.y, r1.y
and r1.w, r1.w, r2.x
mad r1.x, r1.z, r1.x, r1.w
mul r0.y, r1.x, l(0.31830987)
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyxx, t6.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyxx, t0.xyzw, s1
if_nz r0.z
  mul r0.x, r0.w, r0.w
  mul r0.x, r0.x, l(20.000000)
  min r0.x, r0.x, l(1.000000)
  add r0.y, -r1.y, l(1.000000)
  mad r0.z, r0.y, l(0.500000), -cb3[0].x
  mul_sat r0.z, r0.z, l(20.000000)
  add r0.z, -r0.z, l(1.000000)
  mul r0.z, r0.z, r0.x
  add r0.w, -cb3[0].y, l(1.000000)
  mad r0.y, r0.y, l(0.500000), -r0.w
  mul_sat r0.y, r0.y, l(20.000000)
  mul r0.x, r0.y, r0.x
  mul r2.w, r0.z, r2.w
  mul r1.w, r0.x, r3.w
  mov r1.xyz, r3.xyzx
  mul r2.xyzw, r2.wwww, r2.xyzw
  mad r0.x, -r3.w, r0.x, l(1.000000)
  mul r0.xyzw, r0.xxxx, r2.xyzw
  mad r0.xyzw, r1.wwww, r1.xyzw, r0.xyzw
  div r0.xyz, r0.xyzx, r0.wwww
else 
  mov r0.xyzw, l(0,0,0,0)
endif 
mul o0.xyzw, r0.xyzw, v1.xyzw
ret 
// Approximately 82 instruction slots used
