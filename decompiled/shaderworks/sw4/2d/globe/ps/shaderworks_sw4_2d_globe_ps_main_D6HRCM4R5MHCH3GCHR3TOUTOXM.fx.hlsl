// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:40:36 2021

cbuffer _Globals : register(b0)
{
  float4 flagParams : packoffset(c0);
  float4 colorObjMin : packoffset(c1);
  float4 colorObjMax : packoffset(c2);
  float colorObjMinBaseBlend : packoffset(c3);
  float colorObjMaxBaseBlend : packoffset(c3.y);
  float2 uvScroll : packoffset(c3.z);
  float4 detailScale : packoffset(c4);
  float4 detailScale1 : packoffset(c5);
  float4 detailScale2 : packoffset(c6);
  float4 detailScale3 : packoffset(c7);
  float4 alphaRevealParms : packoffset(c8);
  float4 colorDetailScale : packoffset(c9);
  float4 HeatmapColor : packoffset(c10);
}

cbuffer GenericsCBuffer : register(b3)
{
  float4 scriptVector0 : packoffset(c0);
  float4 scriptVector1 : packoffset(c1);
  float4 scriptVector2 : packoffset(c2);
  float4 scriptVector3 : packoffset(c3);
  float4 scriptVector4 : packoffset(c4);
  float4 scriptVector5 : packoffset(c5);
  float4 scriptVector6 : packoffset(c6);
  float4 scriptVector7 : packoffset(c7);
  float4 weaponParam0 : packoffset(c8);
  float4 weaponParam1 : packoffset(c9);
  float4 weaponParam2 : packoffset(c10);
  float4 weaponParam3 : packoffset(c11);
  float4 weaponParam4 : packoffset(c12);
  float4 weaponParam5 : packoffset(c13);
  float4 weaponParam6 : packoffset(c14);
  float4 weaponParam7 : packoffset(c15);
}

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}

SamplerState DayMap_Sampler_s : register(s1);
SamplerState Mesh_Sampler_s : register(s2);
SamplerState heatmapSampler_C9_P0_sampler_s : register(s3);
Texture2D<float4> DayMap : register(t0);
Texture2D<float4> Mesh : register(t6);
Texture2D<float4> heatmapSampler_C9_P0 : register(t7);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(-0.5,-0.5) + v2.xy;
  r0.z = dot(r0.xy, r0.xy);
  r0.z = sqrt(r0.z);
  r0.w = 1.41421354 * r0.z;
  r0.w = min(1, r0.w);
  r0.w = 1.51035202 * r0.w;
  r0.w = min(1, r0.w);
  r0.w = r0.w * 101 + -100;
  r0.w = max(0, r0.w);
  r0.xy = r0.xy * float2(1.05060005,1.05060005) + float2(0.5,0.5);
  r1.x = 0.0198943671 * gameTime.w;
  r1.y = cmp(r1.x >= -r1.x);
  r1.x = frac(abs(r1.x));
  r1.x = r1.y ? r1.x : -r1.x;
  r1.x = 6.28318548 * r1.x;
  r0.xy = r0.xy * float2(2,2) + float2(-1,-1);
  r1.y = -r0.x * r0.x + 1;
  r1.y = -r0.y * r0.y + r1.y;
  r1.z = sqrt(r1.y);
  r1.y = cmp(r1.y >= 0);
  r1.w = 0.398748726 * r0.y;
  r1.w = r0.x * 0.917060256 + -r1.w;
  r0.x = dot(r0.xy, float2(0.398748726,0.917060256));
  r2.xyzw = float4(0.500000238,0.866025269,-0.500000238,-0.866025269) * r1.zzzz;
  r2.yw = r0.xx * float2(0.500000238,0.500000238) + r2.wy;
  sincos(r1.x, r1.x, r3.x);
  r3.yz = r2.yw * r1.xx;
  r2.yw = r3.xx * r2.yw;
  r0.xy = r0.xx * float2(0.866025269,0.866025269) + -r2.zx;
  r2.xz = r1.ww * r3.xx + -r3.yz;
  r1.xw = r1.ww * r1.xx + r2.yw;
  r2.yw = min(abs(r2.xz), abs(r1.xw));
  r3.xy = max(abs(r2.xz), abs(r1.xw));
  r3.xy = float2(1,1) / r3.xy;
  r2.yw = r3.xy * r2.yw;
  r3.xy = r2.yw * r2.yw;
  r3.zw = r3.xy * float2(0.0208350997,0.0208350997) + float2(-0.0851330012,-0.0851330012);
  r3.zw = r3.xy * r3.zw + float2(0.180141002,0.180141002);
  r3.zw = r3.xy * r3.zw + float2(-0.330299497,-0.330299497);
  r3.xy = r3.xy * r3.zw + float2(0.999866009,0.999866009);
  r3.zw = r3.xy * r2.yw;
  r4.xy = cmp(abs(r1.xw) < abs(r2.xz));
  r3.zw = r3.zw * float2(-2,-2) + float2(1.57079637,1.57079637);
  r3.zw = r4.xy ? r3.zw : 0;
  r2.yw = r2.yw * r3.xy + r3.zw;
  r3.xy = cmp(r1.xw < -r1.xw);
  r3.xy = r3.xy ? float2(-3.14159298,-3.14159298) : 0;
  r2.yw = r3.xy + r2.yw;
  r3.xy = min(r2.xz, r1.xw);
  r1.xw = max(r2.xz, r1.xw);
  r2.xz = cmp(r3.xy < -r3.xy);
  r1.xw = cmp(r1.xw >= -r1.xw);
  r1.xw = r1.xw ? r2.xz : 0;
  r1.xw = r1.xw ? -r2.yw : r2.yw;
  r2.xy = r1.xw * float2(0.159154937,0.159154937) + float2(0.5,0.5);
  r1.xw = float2(1,1) + -abs(r0.xy);
  r1.xw = sqrt(r1.xw);
  r3.xy = abs(r0.xy) * float2(-0.0187292993,-0.0187292993) + float2(0.0742610022,0.0742610022);
  r3.xy = r3.xy * abs(r0.xy) + float2(-0.212114394,-0.212114394);
  r3.xy = r3.xy * abs(r0.xy) + float2(1.57072878,1.57072878);
  r3.zw = r3.xy * r1.xw;
  r3.zw = r3.zw * float2(-2,-2) + float2(3.14159274,3.14159274);
  r4.xy = cmp(-r0.xy < r0.xy);
  r3.zw = r4.xy ? r3.zw : 0;
  r1.xw = r3.xy * r1.xw + r3.zw;
  r2.zw = float2(0.318309873,0.318309873) * r1.xw;
  r3.xyzw = Mesh.Sample(Mesh_Sampler_s, r2.xz).xyzw;
  r4.xyzw = DayMap.Sample(DayMap_Sampler_s, r2.xz).xyzw;
  r5.xyzw = Mesh.Sample(Mesh_Sampler_s, r2.yw).xyzw;
  r6.xyzw = DayMap.Sample(DayMap_Sampler_s, r2.yw).xyzw;
  r1.x = heatmapSampler_C9_P0.Sample(heatmapSampler_C9_P0_sampler_s, r2.yw).w;
  if (r1.y != 0) {
    r1.y = r1.z * r1.z;
    r1.z = 20 * r1.y;
    r1.z = min(1, r1.z);
    r0.xy = float2(1,1) + -r0.yx;
    r2.xz = r0.xy * float2(0.5,0.5) + -scriptVector0.xx;
    r2.xz = saturate(float2(20,20) * r2.xz);
    r2.xz = float2(1,1) + -r2.xz;
    r2.w = 1 + -scriptVector0.y;
    r0.xy = r0.xy * float2(0.5,0.5) + -r2.ww;
    r0.xy = saturate(float2(20,20) * r0.xy);
    r2.xz = r2.xz * r1.zz;
    r0.xy = r1.zz * r0.xy;
    r3.w = r3.w * r2.z;
    r7.w = r4.w * r0.y;
    r7.xyz = r4.xyz;
    r3.xyzw = r3.xyzw * r3.wwww;
    r0.y = -r4.w * r0.y + 1;
    r3.xyzw = r3.xyzw * r0.yyyy;
    r3.xyzw = r7.wwww * r7.xyzw + r3.xyzw;
    r3.xyz = saturate(r3.xyz / r3.www);
    r3.w = saturate(r3.w);
    r4.w = 0.699999988 * r2.z;
    r4.xyz = float3(0,0,0);
    r7.xyzw = r3.xyzw * float4(0.25,0.25,0.25,1) + -r4.zzzw;
    r3.xyzw = r3.wwww * r7.xyzw + r4.xyzw;
    r0.y = 0.174999997 * gameTime.w;
    r1.z = cmp(r0.y >= -r0.y);
    r0.y = frac(abs(r0.y));
    r0.y = r1.z ? r0.y : -r0.y;
    r0.y = r0.y * 2 + -1;
    r0.y = abs(r0.y) * 0.300000012 + 0.200000003;
    r0.y = r0.y * r2.z;
    r1.y = r1.y * r1.y;
    r0.y = r1.y * r0.y;
    r0.y = min(1, r0.y);
    r4.xyzw = r0.yyyy * float4(0,-0.219999999,0,0) + float4(1,0.5,0,1);
    r4.xyzw = r4.xyzw + -r3.xyzw;
    r3.xyzw = r0.yyyy * r4.xyzw + r3.xyzw;
    r4.x = 67.863266 * r2.y;
    r4.y = 21.6015472 * r1.w;
    r0.y = r2.y * 67.863266 + r4.y;
    r0.y = gameTime.w * 0.25 + r0.y;
    r4.z = 0.25 * gameTime.w;
    r1.yzw = r0.yyy * float3(0.333333343,0.333333343,0.333333343) + r4.zxy;
    r1.yzw = floor(r1.yzw);
    r0.y = r1.z + r1.w;
    r0.y = r0.y + r1.y;
    r2.yzw = -r0.yyy * float3(0.166666672,0.166666672,0.166666672) + r1.zwy;
    r2.yzw = r4.xyz + -r2.yzw;
    r4.xyz = cmp(r2.zwy >= r2.wyz);
    r7.xyz = r4.yzx ? float3(1,1,1) : 0;
    r4.xyz = r4.xyz ? float3(-1,-1,-1) : float3(-0,-0,-0);
    r4.xyz = r7.xyz + r4.xyz;
    r7.xyz = min(float3(0,0,0), r4.xyz);
    r7.xyz = float3(1,1,1) + r7.xyz;
    r4.xyz = max(float3(0,0,0), r4.xyz);
    r8.x = dot(r2.yzw, r2.yzw);
    r9.xyz = float3(0.234938487,0.234938487,0.234938487) * r1.yzw;
    r9.xyz = frac(r9.xyz);
    r9.xyz = r9.xyz * r9.xyz;
    r10.xyz = float3(41.8130379,25.9578438,35.528923) * r9.zxy;
    r10.xyz = r9.yzx * float3(23.9401531,46.2553978,37.4595146) + r10.xyz;
    r9.xyz = r9.xyz * float3(31.3659344,33.5974617,29.6458817) + r10.xyz;
    r9.xyz = frac(r9.xyz);
    r9.xyz = float3(-0.5,-0.5,-0.5) + r9.xyz;
    r0.y = dot(r9.xyz, r9.xyz);
    r0.y = rsqrt(r0.y);
    r9.xyz = r9.xyz * r0.yyy;
    r9.x = dot(r2.yzw, r9.xyz);
    r10.xyz = -r4.yzx + r2.yzw;
    r10.xyz = float3(0.166666672,0.166666672,0.166666672) + r10.xyz;
    r8.y = dot(r10.xyz, r10.xyz);
    r4.xyz = r4.xyz + r1.yzw;
    r4.xyz = float3(0.234938487,0.234938487,0.234938487) * r4.xyz;
    r4.xyz = frac(r4.xyz);
    r4.xyz = r4.xyz * r4.xyz;
    r11.xyz = float3(41.8130379,25.9578438,35.528923) * r4.zxy;
    r11.xyz = r4.yzx * float3(23.9401531,46.2553978,37.4595146) + r11.xyz;
    r4.xyz = r4.xyz * float3(31.3659344,33.5974617,29.6458817) + r11.xyz;
    r4.xyz = frac(r4.xyz);
    r4.xyz = float3(-0.5,-0.5,-0.5) + r4.xyz;
    r0.y = dot(r4.xyz, r4.xyz);
    r0.y = rsqrt(r0.y);
    r4.xyz = r4.xyz * r0.yyy;
    r9.y = dot(r10.xyz, r4.xyz);
    r4.xyz = -r7.yzx + r2.yzw;
    r4.xyz = float3(0.333333343,0.333333343,0.333333343) + r4.xyz;
    r8.z = dot(r4.xyz, r4.xyz);
    r7.xyz = r7.xyz + r1.yzw;
    r7.xyz = float3(0.234938487,0.234938487,0.234938487) * r7.xyz;
    r7.xyz = frac(r7.xyz);
    r7.xyz = r7.xyz * r7.xyz;
    r10.xyz = float3(41.8130379,25.9578438,35.528923) * r7.zxy;
    r10.xyz = r7.yzx * float3(23.9401531,46.2553978,37.4595146) + r10.xyz;
    r7.xyz = r7.xyz * float3(31.3659344,33.5974617,29.6458817) + r10.xyz;
    r7.xyz = frac(r7.xyz);
    r7.xyz = float3(-0.5,-0.5,-0.5) + r7.xyz;
    r0.y = dot(r7.xyz, r7.xyz);
    r0.y = rsqrt(r0.y);
    r7.xyz = r7.xyz * r0.yyy;
    r9.z = dot(r4.xyz, r7.xyz);
    r2.yzw = float3(-0.5,-0.5,-0.5) + r2.yzw;
    r8.w = dot(r2.yzw, r2.yzw);
    r1.yzw = float3(1,1,1) + r1.yzw;
    r1.yzw = float3(0.234938487,0.234938487,0.234938487) * r1.yzw;
    r1.yzw = frac(r1.yzw);
    r1.yzw = r1.yzw * r1.yzw;
    r4.xyz = float3(41.8130379,25.9578438,35.528923) * r1.wyz;
    r4.xyz = r1.zwy * float3(23.9401531,46.2553978,37.4595146) + r4.xyz;
    r1.yzw = r1.yzw * float3(31.3659344,33.5974617,29.6458817) + r4.xyz;
    r1.yzw = frac(r1.yzw);
    r1.yzw = float3(-0.5,-0.5,-0.5) + r1.yzw;
    r0.y = dot(r1.yzw, r1.yzw);
    r0.y = rsqrt(r0.y);
    r1.yzw = r1.yzw * r0.yyy;
    r9.w = dot(r2.yzw, r1.yzw);
    r4.xyzw = float4(0.600000024,0.600000024,0.600000024,0.600000024) + -r8.xyzw;
    r4.xyzw = max(float4(0,0,0,0), r4.xyzw);
    r4.xyzw = r4.xyzw * r4.xyzw;
    r4.xyzw = r4.xyzw * r4.xyzw;
    r0.y = dot(r4.xyzw, r9.xyzw);
    r0.y = -r0.y * 32 + 1;
    r5.w = r5.w * r2.x;
    r1.y = r6.w * r0.x;
    r1.z = saturate(1000 * r1.x);
    r0.x = r1.z * r0.x;
    r6.w = max(r0.x, r1.y);
    r2.xyzw = r5.xyzw * r5.wwww;
    r0.x = 1 + -r6.w;
    r2.xyzw = r2.xyzw * r0.xxxx;
    r2.xyzw = r6.wwww * r6.xyzw + r2.xyzw;
    r1.yzw = r2.xyz / r2.www;
    r4.xyz = HeatmapColor.xyz * HeatmapColor.www;
    r4.xyz = r4.xyz * r1.xxx;
    r0.x = r0.y * 1.27839994 + 0.721600056;
    r4.xyz = r4.xyz * r0.xxx;
    r2.xyz = saturate(r4.xyz * r6.www + r1.yzw);
    r1.xyzw = r3.xyzw * r3.wwww;
    r0.x = 1 + -r2.w;
    r1.xyzw = r1.xyzw * r0.xxxx;
    r1.xyzw = r2.wwww * r2.xyzw + r1.xyzw;
    r1.xyz = r1.xyz / r1.www;
  } else {
    r1.xyzw = float4(0,0,0,0);
  }
  r0.x = saturate(r0.z * 1.41421354 + -0.670000017);
  r0.x = 27.530468 * r0.x;
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = r0.w * r0.x;
  r0.y = saturate(scriptVector0.y);
  r0.x = r0.x * r0.y;
  r2.w = 0.129999995 * r0.x;
  r2.xyz = float3(1,1,1);
  r2.xyzw = r2.xyzw + -r1.xyzw;
  r0.xyzw = r0.wwww * r2.xyzw + r1.xyzw;
  o0.xyzw = v1.xyzw * r0.xyzw;
  return;
}