//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:22:54 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 44
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
ishl r0.x, cb2[57].x, l(2)
iadd r0.x, r0.x, vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
utof r4.xy, r1.xyxx
add r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
mul r5.xy, r4.zwzz, cb1[44].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r5.xyxx, t27.yzwx, s4, l(0.000000)
mul r0.w, r0.w, r3.z
if_nz cb2[55].x
  mul r3.z, r0.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r3.zzzz
  ret 
else 
  movc r3.z, cb2[54].w, r0.w, l(1.000000)
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.yzw, r1.xyww, t0.wxyz
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
ge r10.x, r5.x, l(0.984375)
mul r1.z, r5.x, l(1.01587307)
mad r1.w, r5.x, l(64.000000), l(-63.000000)
movc r1.z, r10.x, r1.w, r1.z
max r1.z, r1.z, l(0.00000001)
rcp r10.y, r1.z
and r1.zw, r0.zzzz, r10.xxxy
add r4.zw, r4.zzzw, -cb1[71].xxxy
mul r4.zw, r4.zzzw, cb1[44].zzzw
mad r4.zw, r4.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r10.x, r4.z, cb1[12].x
mul r10.y, r4.w, cb1[13].y
mov r10.z, l(1.000000)
mul r10.xyz, r1.wwww, r10.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.z, r2.w, l(3.000000), l(0.500000)
ftou r0.z, r0.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r11.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r11.z
mul r11.xy, r1.wwww, r2.xyxx
and r12.xyzw, r0.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.z, r12.w, r12.z
movc r12.z, r0.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.z, r0.w, l(-0.500000), l(-0.00146628)
add r0.z, r0.z, r2.z
mul_sat r2.y, r0.z, l(2.00982332)
dp3 r0.z, -r10.xyzx, -r10.xyzx
rsq r0.z, r0.z
mul r12.xyz, r0.zzzz, -r10.xyzx
dp2 r1.w, r4.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r4.x, r13.x, r1.w
utof r2.zw, r1.yyyx
dp2 r1.w, r2.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
mad r1.w, r1.w, l(6.28318548), cb1[70].w
sincos r5.x, r14.x, r1.w
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.w, -r12.xyzx, r11.xyzx
add r1.w, r1.w, r1.w
mad r15.xyz, r11.xyzx, -r1.wwww, -r12.xyzx
mul r1.w, r2.y, l(17.000000)
exp r1.w, r1.w
add r1.w, r1.w, l(2.000000)
div r1.w, l(2.000000), r1.w
sqrt r2.z, r1.w
mul r4.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r4.zw, r4.zzzw
ieq r4.zw, r1.xxxy, r4.zzzw
and r2.w, r4.w, r4.z
dp3 r4.z, r11.xyzx, cb2[17].xyzx
mov_sat r4.w, r4.z
movc r6.w, r0.w, |r4.z|, r4.w
ge r7.w, l(0.000000), r6.w
if_nz r7.w
  mov r8.w, l(0)
endif 
if_z r7.w
  mul r14.yzw, r10.yyyy, cb2[29].xxyz
  mad r14.yzw, r10.xxxx, cb2[28].xxyz, r14.yyzw
  mad r14.yzw, r10.zzzz, cb2[30].xxyz, r14.yyzw
  add r14.yzw, r14.yyzw, cb2[31].xxyz
  add r7.w, r14.w, -cb2[17].w
  mad r7.w, -r7.w, l(0.00006104), l(1.000000)
  mov_sat r9.w, r7.w
  eq r9.w, r7.w, r9.w
  if_nz r9.w
    mov r9.w, l(0)
    mov r12.w, l(0)
    loop 
      ge r13.w, r9.w, l(3.000000)
      breakc_nz r13.w
      ftou r13.w, r9.w
      add r16.xy, r14.yzyy, -cb2[r13.w + 20].xyxx
      max r16.x, |r16.y|, |r16.x|
      mul r12.w, r16.x, cb2[r13.w + 20].z
      lt r13.w, r12.w, l(1.000000)
      if_nz r13.w
        break 
      endif 
      add r9.w, r9.w, l(1.000000)
      mov r12.w, l(0)
    endloop 
  else 
    mov r9.w, l(3.000000)
    mov r12.w, l(0)
  endif 
  ge r13.w, r9.w, l(3.000000)
  if_nz r13.w
    mul r16.xyz, l(128.000000, 0.500000, 0.500000, 0.000000), cb2[27].zxyz
    rcp r17.xz, r16.xxxx
    mov r17.y, -r17.z
    mad r16.xyz, r14.yzyy, r17.xyzx, r16.yzyy
    add r17.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r16.xyz, r16.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r16.xyz, r17.xyzx, r16.xyzx
    mul r17.xy, r16.zyzz, cb2[32].xxxx
    round_ni r17.xy, r17.xyxx
    mul r16.w, r17.y, cb2[27].x
    mad r16.w, r16.w, cb2[32].x, r17.x
    ftou r16.w, r16.w
    iadd r16.w, r16.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.x, r16.w, l(0), t23.xxxx
    and r17.y, r17.x, l(0x40000000)
    ishl r17.z, r17.x, l(2)
    if_z r17.y
      and r17.y, r17.x, l(0x01ffffff)
      iadd r18.x, r16.w, r17.y
      ushr r16.w, r17.x, l(25)
      utof r16.w, r16.w
      mul r16.xyz, r16.wwww, r16.xyzx
      frc r16.xyz, r16.xyzx
      mul r16.xyz, r16.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
      ftou r16.xyz, r16.xyzx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
      ushr r17.xy, r16.zyzz, l(6, 6, 0, 0)
      and r16.w, r18.z, l(0xc0000000)
      iadd r17.w, r18.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.w, l(0), t23.xxxx
      movc r17.y, r17.y, r18.z, r17.w
      ushr r17.w, r17.y, l(13)
      movc r17.x, r17.x, r17.w, r17.y
      and r17.x, r17.x, l(8191)
      iadd r19.x, r17.x, r18.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      mov r18.y, l(0)
      mov r19.y, l(1)
      movc r17.xyw, r16.wwww, r18.xyxz, r19.xyxz
      movc r19.yz, r16.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r20.xy, r16.zyzz, r19.yyyy
      and r20.xy, r20.xyxx, l(1, 1, 0, 0)
      and r18.w, r17.w, l(0xc0000000)
      iadd r19.y, r17.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.y, r19.y, l(0), t23.xxxx
      movc r19.y, r20.y, r17.w, r19.y
      ushr r20.y, r19.y, l(13)
      movc r19.y, r20.x, r20.y, r19.y
      and r19.y, r19.y, l(8191)
      iadd r19.x, r17.x, r19.y
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
      movc r17.xyw, r18.wwww, r17.xyxw, r19.xzxw
      movc r17.xyw, r16.wwww, r18.xyxz, r17.xyxw
      and r16.w, r17.w, l(0xc0000000)
      if_z r16.w
        iadd r16.w, -r17.y, l(6)
        ushr r18.xy, r16.zyzz, r16.wwww
        or r16.w, r17.w, l(0x40000000)
        bfi r18.y, l(1), l(1), r18.y, l(0)
        bfi r18.x, l(1), l(0), r18.x, r18.y
        imul null, r18.x, r18.x, l(10)
        ushr r16.w, r16.w, r18.x
        and r16.w, r16.w, l(1023)
        iadd r18.x, r16.w, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.x, l(0), t23.xxxx
        iadd r18.yz, r17.yyyy, l(0, 1, 2, 0)
        iadd r16.w, -r18.y, l(6)
        ushr r19.xy, r16.zyzz, r16.wwww
        and r16.w, r18.w, l(0xc0000000)
        or r17.y, r18.w, l(0x40000000)
        bfi r19.y, l(1), l(1), r19.y, l(0)
        bfi r19.x, l(1), l(0), r19.x, r19.y
        imul null, r19.x, r19.x, l(10)
        ushr r17.y, r17.y, r19.x
        and r17.y, r17.y, l(1023)
        iadd r19.x, r17.y, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
        mov r19.y, r18.z
        movc r19.xyz, r16.wwww, r18.xywx, r19.xyzx
        iadd r17.y, -r19.y, l(6)
        ushr r18.yz, r16.zzyz, r17.yyyy
        and r17.y, r19.z, l(0xc0000000)
        or r19.y, r19.z, l(0x40000000)
        bfi r18.z, l(1), l(1), r18.z, l(0)
        bfi r18.y, l(1), l(0), r18.y, r18.z
        imul null, r18.y, r18.y, l(10)
        ushr r18.y, r19.y, r18.y
        and r18.y, r18.y, l(1023)
        iadd r20.x, r18.y, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.y, r20.x, l(0), t23.xxxx
        movc r18.yz, r17.yyyy, r19.xxzx, r20.xxyx
        movc r17.xw, r16.wwww, r18.xxxw, r18.yyyz
      endif 
      and r16.w, r17.w, l(0xc0000000)
      if_z r16.w
        ubfe r17.y, l(14), l(15), r17.w
        utof r17.y, r17.y
        mul r17.y, r17.y, cb2[27].w
        mul r17.y, r17.y, l(0.00006104)
        and r18.xy, r17.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r18.x, r18.x
        mul r18.x, r18.x, cb2[27].w
        mul r18.x, r18.x, l(0.00003052)
        and r18.z, r16.y, l(3)
        iadd r18.z, r17.x, r18.z
        iadd r18.z, r18.z, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.z, l(0), t23.xxxx
        bfi r19.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r16.xyzx, l(0, 0, 0, 0)
        ushr r16.x, r18.z, r19.x
        and r16.x, r16.x, l(255)
        utof r16.x, r16.x
        mul r16.x, r18.x, r16.x
        mad r16.x, r16.x, l(0.00392157), r17.y
        iadd r16.y, r19.y, l(1)
        ubfe r16.z, l(1), l(1), r16.z
        iadd r16.y, r16.z, r16.y
        iadd r16.y, r16.y, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.y, r16.y, l(0), t23.xxxx
        ushr r16.y, r16.y, r19.z
        and r16.y, r16.y, l(0x0000ffff)
        utof r16.y, r16.y
        mul r16.y, r18.x, r16.y
        mad r16.y, r16.y, l(0.00001526), r17.y
        movc r17.z, r18.y, r16.x, r16.y
      else 
        and r16.x, r17.w, l(0x80000000)
        iadd r16.y, r17.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.y, r16.y, l(0), t23.xxxx
        movc r16.x, r16.x, r16.y, l(0)
        ishl r16.y, r17.w, l(2)
        ushr r16.z, r16.x, l(16)
        and r16.x, r16.x, l(0x0000ffff)
        f16tof32 r16.xz, r16.xxzx
        mad r16.y, r14.y, r16.z, r16.y
        mad r16.x, r14.z, r16.x, r16.y
        movc r17.z, r16.w, r16.x, r17.z
      endif 
    endif 
    mad r14.w, -cb2[27].z, l(2.000000), r14.w
    lt r14.w, r17.z, r14.w
    movc r8.w, r14.w, l(0), l(1.000000)
  endif 
  if_z r13.w
    if_z cb2[58].y
      ftou r13.w, r9.w
      add r16.xy, r14.yzyy, -cb2[r13.w + 20].xyxx
      mul r16.xy, r16.xyxx, cb2[r13.w + 20].zzzz
      mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r13.w, cb2[26].y
      add r16.z, r9.w, r13.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r16.xyzx, t13.xxxx, s13, r7.w
      sample_l_indexable(texture2darray)(float,float,float,float) r14.w, r16.xyzx, t31.yzwx, s0, l(0.000000)
      add r13.w, r13.w, r14.w
      add_sat r13.w, r13.w, l(-1.000000)
      mul r14.w, r13.w, r13.w
      mul r8.w, r13.w, r14.w
    endif 
    if_nz cb2[58].y
      mov r16.x, -r4.x
      ftou r13.w, r9.w
      add r9.w, r9.w, l(1.000000)
      min r9.w, r9.w, l(2.000000)
      ftou r9.w, r9.w
      add r12.w, -r12.w, l(1.000000)
      mul r12.w, r12.w, l(28.000000)
      ftou r12.w, r12.w
      add r17.xy, r14.yzyy, -cb2[r13.w + 20].xyxx
      mul r17.xy, r17.xyxx, cb2[r13.w + 20].zzzz
      mad r17.xy, r17.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r14.yz, r14.yyzy, -cb2[r9.w + 20].xxyx
      mul r14.yz, r14.yyzy, cb2[r9.w + 20].zzzz
      mad r14.yz, r14.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r16.y, r13.x
      mov r16.z, r4.x
      mov r14.w, l(0)
      mov r16.w, l(0)
      loop 
        uge r17.z, r16.w, l(8)
        breakc_nz r17.z
        ult r17.z, r12.w, r16.w
        movc r18.xy, r17.zzzz, r14.yzyy, r17.xyxx
        movc r17.w, r17.z, cb2[r9.w + 20].w, cb2[r13.w + 20].w
        movc r17.z, r17.z, r9.w, r13.w
        dp2 r19.x, icb[r16.w + 0].yxyy, r16.xyxx
        dp2 r19.y, icb[r16.w + 0].yxyy, r16.yzyy
        mad r18.xy, r19.xyxx, r17.wwww, r18.xyxx
        iadd r17.z, r17.z, cb2[26].y
        utof r18.z, r17.z
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.z, r18.xyzx, t13.xxxx, s13, r7.w
        sample_l_indexable(texture2darray)(float,float,float,float) r17.w, r18.xyzx, t31.yzwx, s0, l(0.000000)
        add r17.z, r17.w, r17.z
        add_sat r17.z, r17.z, l(-1.000000)
        mad r14.w, r17.z, l(0.125000), r14.w
        iadd r16.w, r16.w, l(1)
      endloop 
      mul r7.w, r14.w, r14.w
      mul r8.w, r14.w, r7.w
    endif 
  endif 
endif 
add r7.w, -r2.y, l(1.000000)
mul r7.w, r7.w, l(5.000000)
add r14.yzw, r10.xxyz, -cb2[35].xxyz
mul r16.x, r14.y, cb2[35].w
mul r16.yz, r14.zzwz, cb2[36].xxyx
add_sat r14.yzw, r16.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
mul r16.xy, r14.yzyy, cb2[36].zwzz
mul r16.z, r14.w, cb2[37].x
add r14.yzw, r16.xxyz, cb2[37].yyzw
lt r16.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
movc r16.xyz, r16.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
mov r16.w, l(0)
add r17.xyz, r14.yzwy, r16.wwxw
sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t17.xyzw, s4, l(0.000000)
mul r18.xyz, r11.xyzx, r11.xyzx
mul r18.xyz, r18.xyzx, cb2[19].xxxx
add r19.xyz, r14.yzwy, r16.wwyw
sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t18.xyzw, s4, l(0.000000)
mul r19.xyz, r18.yyyy, r19.xyzx
mad r17.xyz, r17.xyzx, r18.xxxx, r19.xyzx
add r14.yzw, r14.yyzw, r16.wwwz
sample_l_indexable(texture3d)(float,float,float,float) r14.yzw, r14.yzwy, t19.wxyz, s4, l(0.000000)
mad r14.yzw, r14.yyzw, r18.zzzz, r17.xxyz
mov r11.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r16.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
mul r14.yzw, r14.yyzw, r16.xxyz
dp3 r9.w, r14.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
mov r15.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r16.xyz, r15.xyzw, t8.xyzw, s2, r7.w
add r7.w, -r9.w, cb2[19].x
mad r7.w, r2.y, r7.w, r9.w
mul r16.xyz, r7.wwww, r16.xyzx
add r7.w, r3.z, r2.x
log r7.w, |r7.w|
mul r7.w, r2.z, r7.w
exp r7.w, r7.w
add r7.w, r3.z, r7.w
add_sat r7.w, r7.w, l(-1.000000)
mul r17.xyz, r3.zzzz, r14.yzwy
and r18.xyz, r0.wwww, r17.yzxy
mad r19.xy, r2.xyxx, l(0.984375, 0.984375, 0.000000, 0.000000), l(0.00781250, 0.00781250, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r19.xy, r19.xyxx, t5.xyzw, s2, l(0.000000)
mul r16.xyz, r7.wwww, r16.xyzx
mul r19.xzw, r19.xxxx, r16.xxyz
mul r16.xyz, r19.yyyy, r16.xyzx
sqrt r2.y, r2.z
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r7.w, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r9.w, r2.x, r2.y, r7.w
mul r2.y, r2.y, r9.w
mul r7.w, r7.w, r9.w
if_nz r2.w
  mov r20.x, l(3)
  mov r20.yzw, cb1[24].xxyz
  store_structured u2.xyzw, cb2[52].x, l(112), r20.xyzw
endif 
lt r9.w, l(0.000000), r6.w
if_nz r9.w
  if_nz r2.w
    ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r9.w, cb2[52].x, l(112), u2.xxxx
    or r9.w, r9.w, l(4)
    store_structured u2.x, cb2[52].x, l(112), r9.w
    store_structured u2.x, cb2[52].x, l(128), r8.w
  endif 
  lt r9.w, l(0.000000), r8.w
  if_nz r9.w
    mul r9.w, r1.w, cb2[18].w
    mul r9.w, r4.w, r9.w
    if_nz cb2[23].x
      add r20.xyz, r10.xyzx, cb1[24].xyzx
      mov r20.w, l(1.000000)
      dp4 r11.w, cb2[24].xyzw, r20.xyzw
      dp4 r12.w, cb2[25].xyzw, r20.xyzw
      frc r20.x, r11.w
      frc r20.y, r12.w
      iadd r11.w, l(-1), cb2[23].x
      utof r20.z, r11.w
      sample_l_indexable(texture2darray)(float,float,float,float) r20.xyz, r20.xyzx, t20.xyzw, s2, l(0.000000)
      add r20.xyz, r20.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r20.xyz, cb2[23].yyyy, r20.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r20.xyz, r20.xyzx, cb2[18].xyzx
    else 
      mov r20.xyz, cb2[18].xyzx
    endif 
    ushr r11.w, cb2[53].x, l(16)
    ult r12.w, l(0), r11.w
    and r12.w, r1.z, r12.w
    if_nz r12.w
      iadd r11.w, r11.w, cb2[0].x
      imad r11.w, r11.w, l(15), l(-15)
      mad r12.w, |r4.z|, l(-0.200000), l(0.400000)
      lt r13.w, r4.z, l(0.000000)
      and r13.w, r0.w, r13.w
      movc r12.w, r13.w, -r12.w, r12.w
      mad r21.xyz, r11.xyzx, r12.wwww, r10.xyzx
      mov r22.xyz, cb9[r11.w + 4].yzwy
      mov r22.w, cb9[r11.w + 5].x
      mov r21.w, l(1.000000)
      dp4 r22.x, r22.xyzw, r21.xyzw
      mov r23.xyz, cb9[r11.w + 5].yzwy
      mov r23.w, cb9[r11.w + 6].x
      dp4 r22.y, r23.xyzw, r21.xyzw
      mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r23.x, r22.x, cb9[r11.w + 9].w
      add r23.y, r22.y, cb9[r11.w + 10].x
      mul r22.xy, r23.xyxx, cb9[r11.w + 9].yzyy
      div r22.zw, cb9[r11.w + 3].yyyy, cb9[r11.w + 8].yyyw
      add r23.xy, -r22.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r23.xy, r22.xyxx, r23.xyxx
      ge r22.zw, r22.zzzw, r22.xxxy
      or r22.zw, r22.zzzw, r23.xxxy
      or r12.w, r22.w, r22.z
      if_z r12.w
        mov r23.xyz, cb9[r11.w + 6].yzwy
        mov r23.w, cb9[r11.w + 7].x
        dp4 r12.w, r23.xyzw, r21.xyzw
        mov_sat r22.xy, r22.xyxx
        mad r21.x, r22.x, cb9[r11.w + 8].y, cb9[r11.w + 8].z
        mad r21.y, r22.y, cb9[r11.w + 8].w, cb9[r11.w + 9].x
        add r12.w, r12.w, cb9[r11.w + 10].y
        div r12.w, r12.w, cb9[r11.w + 10].z
        max r12.w, r12.w, l(0.00006104)
        and r13.w, l(0x0000ffff), cb9[r11.w + 1].w
        if_nz cb2[58].y
          mov r22.x, -r4.x
          utof r23.z, r13.w
          mov r22.y, r13.x
          mov r22.z, r4.x
          mov r15.w, l(0)
          mov r19.y, l(0)
          loop 
            ige r20.w, r19.y, l(8)
            breakc_nz r20.w
            dp2 r24.x, icb[r19.y + 0].yxyy, r22.xyxx
            dp2 r24.y, icb[r19.y + 0].yxyy, r22.yzyy
            mad r23.xy, r24.xyxx, cb9[r11.w + 3].yyyy, r21.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r23.xyzx, t9.xxxx, s13, r12.w
            mad r15.w, r20.w, l(0.125000), r15.w
            iadd r19.y, r19.y, l(1)
          endloop 
        else 
          utof r21.z, r13.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r21.xyzx, t9.xxxx, s13, r12.w
        endif 
        mul r11.w, r15.w, r15.w
        mul r11.w, r15.w, r11.w
      else 
        mov r11.w, l(1.000000)
      endif 
      mul r8.w, r8.w, r11.w
    else 
      and r11.w, cb2[53].x, l(0x0000ffff)
      ult r12.w, l(0), r11.w
      not r13.w, r1.z
      and r12.w, r12.w, r13.w
      if_nz r12.w
        iadd r11.w, r11.w, cb2[0].x
        imad r11.w, r11.w, l(15), l(-15)
        mad r12.w, |r4.z|, l(-0.200000), l(0.400000)
        lt r13.w, r4.z, l(0.000000)
        and r13.w, r0.w, r13.w
        movc r12.w, r13.w, -r12.w, r12.w
        mad r21.xyz, r11.xyzx, r12.wwww, r10.xyzx
        mov r22.xyz, cb9[r11.w + 4].yzwy
        mov r22.w, cb9[r11.w + 5].x
        mov r21.w, l(1.000000)
        dp4 r22.x, r22.xyzw, r21.xyzw
        mov r23.xyz, cb9[r11.w + 5].yzwy
        mov r23.w, cb9[r11.w + 6].x
        dp4 r22.y, r23.xyzw, r21.xyzw
        mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r23.x, r22.x, cb9[r11.w + 9].w
        add r23.y, r22.y, cb9[r11.w + 10].x
        mul r22.xy, r23.xyxx, cb9[r11.w + 9].yzyy
        div r22.zw, cb9[r11.w + 3].yyyy, cb9[r11.w + 8].yyyw
        add r23.xy, -r22.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r23.xy, r22.xyxx, r23.xyxx
        ge r22.zw, r22.zzzw, r22.xxxy
        or r22.zw, r22.zzzw, r23.xxxy
        or r12.w, r22.w, r22.z
        if_z r12.w
          mov r23.xyz, cb9[r11.w + 6].yzwy
          mov r23.w, cb9[r11.w + 7].x
          dp4 r12.w, r23.xyzw, r21.xyzw
          mov_sat r22.xy, r22.xyxx
          mad r21.x, r22.x, cb9[r11.w + 8].y, cb9[r11.w + 8].z
          mad r21.y, r22.y, cb9[r11.w + 8].w, cb9[r11.w + 9].x
          add r12.w, r12.w, cb9[r11.w + 10].y
          div r12.w, r12.w, cb9[r11.w + 10].z
          max r12.w, r12.w, l(0.00006104)
          and r13.w, l(0x0000ffff), cb9[r11.w + 1].w
          if_nz cb2[58].y
            mov r22.x, -r4.x
            utof r23.z, r13.w
            mov r22.y, r13.x
            mov r22.z, r4.x
            mov r15.w, l(0)
            mov r19.y, l(0)
            loop 
              ige r20.w, r19.y, l(8)
              breakc_nz r20.w
              dp2 r24.x, icb[r19.y + 0].yxyy, r22.xyxx
              dp2 r24.y, icb[r19.y + 0].yxyy, r22.yzyy
              mad r23.xy, r24.xyxx, cb9[r11.w + 3].yyyy, r21.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r23.xyzx, t9.xxxx, s13, r12.w
              mad r15.w, r20.w, l(0.125000), r15.w
              iadd r19.y, r19.y, l(1)
            endloop 
          else 
            utof r21.z, r13.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r21.xyzx, t9.xxxx, s13, r12.w
          endif 
          mul r11.w, r15.w, r15.w
          mul r11.w, r15.w, r11.w
        else 
          mov r11.w, l(1.000000)
        endif 
        mul r8.w, r8.w, r11.w
      endif 
    endif 
    mad r11.w, -r2.x, l(0.500000), l(1.000000)
    mad r11.w, -r6.w, r11.w, l(1.000000)
    mul r11.w, r11.w, r11.w
    mad r11.w, -r11.w, l(0.620000), l(0.620000)
    add r11.w, -r6.w, r11.w
    mad r6.w, r2.z, r11.w, r6.w
    mul r6.w, r8.w, r6.w
    mul r21.xyz, r20.xyzx, r6.wwww
    lt r4.z, l(0.000000), r4.z
    mad r21.xyz, r14.yzwy, r3.zzzz, r21.xyzx
    mad r14.yzw, -r10.xxyz, r0.zzzz, cb2[17].xxyz
    dp3 r0.z, r14.yzwy, r14.yzwy
    rsq r0.z, r0.z
    mul r14.yzw, r0.zzzz, r14.yyzw
    dp3 r0.z, r14.yzwy, r12.xyzx
    dp3 r3.z, r11.xyzx, r14.yzwy
    mad r11.w, |r3.z|, r1.w, -|r3.z|
    mad r3.z, |r3.z|, r11.w, l(1.000000)
    mad r4.w, r4.w, r2.y, r7.w
    mul r3.z, r3.z, r3.z
    mul r3.z, r4.w, r3.z
    rcp r3.z, r3.z
    mul r3.z, r9.w, r3.z
    mul r3.z, r3.z, r8.w
    mul r3.z, r3.z, l(0.250000)
    mad r22.yzw, r3.zzzz, r20.xxyz, r16.xxyz
    add_sat r0.z, -r0.z, l(1.000000)
    mul r4.w, r0.z, r0.z
    mul r4.w, r4.w, r4.w
    mul r0.z, r0.z, r4.w
    mul r0.z, r0.z, r3.z
    mad r14.yzw, r0.zzzz, r20.xxyz, r19.xxzw
    mad r20.xyz, r6.wwww, r20.xyzx, r18.zxyz
    and r20.xyz, r0.wwww, r20.yzxy
    mov r21.w, r18.z
    mov r17.w, r20.z
    movc r17.xyzw, r4.zzzz, r21.xyzw, r17.xyzw
    mov r18.zw, r14.yyyz
    mov r20.zw, r19.xxxz
    movc r20.xyzw, r4.zzzz, r18.xyzw, r20.xyzw
    mov r22.x, r14.w
    mov r16.w, r19.w
    movc r16.xyzw, r4.zzzz, r22.yzwx, r16.xyzw
    if_nz r2.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r0.z, cb2[52].x, l(112), u2.xxxx
      or r0.z, r0.z, l(8)
      store_structured u2.x, cb2[52].x, l(112), r0.z
      store_structured u2.x, cb2[52].x, l(132), r8.w
    endif 
    mov r18.z, r17.w
    mov r18.xy, r20.xyxx
    mov r19.xz, r20.zzwz
    mov r19.w, r16.w
    mov r0.z, l(0x00010101)
  else 
    mov r0.z, l(257)
  endif 
else 
  mov r0.z, l(1)
endif 
ftou r3.z, cb1[44].x
iadd r3.z, r3.z, l(7)
ushr r3.z, r3.z, l(3)
imad r3.z, r0.y, r3.z, r0.x
ishl r3.z, r3.z, l(5)
not r4.z, r1.z
mov r20.x, -r4.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r21.x, l(2)
mov r10.w, l(1.000000)
mov r22.x, l(2)
mov r23.z, l(1.000000)
mov r24.w, l(1.000000)
mov r25.w, l(1.000000)
mov r26.w, l(1.000000)
mov r20.z, r4.x
mov r27.w, l(1.000000)
mov r20.yw, r13.xxxx
mov r4.y, r20.w
mov r13.y, r20.x
mov r28.x, r13.x
mov r28.y, r20.x
mov r28.z, r4.x
mov r13.z, r4.x
mov r29.w, l(1.000000)
mov r30.x, r13.x
mov r30.y, r20.x
mov r30.z, r4.x
mov r31.x, r13.x
mov r31.y, r20.x
mov r31.z, r4.x
mov r14.yzw, r17.xxyz
mov r32.xyz, r18.zxyz
mov r33.xyz, r19.xzwx
mov r34.xyz, r16.xyzx
mov r4.w, cb2[58].y
mov r6.w, r0.z
mov r8.w, l(0)
loop 
  uge r9.w, r8.w, cb2[0].x
  breakc_nz r9.w
  ushr r9.w, r8.w, l(5)
  iadd r9.w, r3.z, r9.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.w, r9.w, l(0), t26.xxxx
  mov r35.xyz, r14.yzwy
  mov r36.xyz, r32.xyzx
  mov r37.xyz, r33.xyzx
  mov r38.xyz, r34.xyzx
  mov r11.w, r4.w
  mov r12.w, r6.w
  mov r13.w, r9.w
  loop 
    breakc_z r13.w
    firstbit_lo r15.w, r13.w
    ishl r16.w, l(1), r15.w
    not r16.w, r16.w
    and r13.w, r13.w, r16.w
    iadd r15.w, r8.w, r15.w
    imul null, r15.w, r15.w, l(15)
    ubfe r16.w, l(3), l(24), cb9[r15.w + 1].w
    ieq r17.w, r16.w, l(2)
    if_nz r17.w
      ubfe r17.w, l(3), l(27), cb9[r15.w + 1].w
      and r18.w, r12.w, l(255)
      ult r19.y, r18.w, l(32)
      and r19.y, r2.w, r19.y
      if_nz r19.y
        imad r18.w, r18.w, l(24), l(112)
        add r21.yzw, cb1[24].xxyz, cb9[r15.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r18.w, r21.xyzw
      endif 
      iadd r18.w, r12.w, l(1)
      add r39.xy, -r10.xyxx, cb9[r15.w + 3].zwzz
      add r39.z, -r10.z, cb9[r15.w + 4].x
      dp3 r19.y, r39.xyzx, r39.xyzx
      rsq r19.y, r19.y
      mul r21.yzw, r19.yyyy, r39.xxyz
      mul r23.w, r1.w, cb9[r15.w + 1].z
      mul r23.w, r23.w, l(0.250000)
      dp3 r21.y, r11.xyzx, r21.yzwy
      mov_sat r21.z, r21.y
      movc r21.w, r0.w, |r21.y|, r21.z
      lt r28.w, l(0.000000), r21.w
      if_nz r28.w
        mov r40.xyz, cb9[r15.w + 7].yzwy
        mov r40.w, cb9[r15.w + 8].x
        dp4 r28.w, r40.xyzw, r10.xyzw
        lt r30.w, r28.w, l(1.000000)
        if_nz r30.w
          mov r41.xyz, l(1.000000,1.000000,1.000000,0)
          mov r30.w, l(0)
        else 
          add r42.xyz, -r10.xyzx, cb9[r15.w + 0].xyzx
          mul r31.w, cb9[r15.w + 3].x, cb9[r15.w + 3].x
          dp3 r32.w, r42.xyzx, r42.xyzx
          div r31.w, r31.w, r32.w
          min r31.w, r31.w, l(1.000000)
          mad_sat r42.xy, r28.wwww, cb9[r15.w + 2].xzxx, cb9[r15.w + 2].ywyy
          mul r42.zw, r42.xxxy, r42.xxxy
          mad r42.xy, r42.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r42.xy, r42.xyxx, r42.zwzz
          mul r31.w, r31.w, r42.x
          mul r31.w, r42.y, r31.w
          mov r42.xyz, cb9[r15.w + 4].yzwy
          mov r42.w, cb9[r15.w + 5].x
          dp4 r42.x, r42.xyzw, r10.xyzw
          mov r43.xyz, cb9[r15.w + 5].yzwy
          mov r43.w, cb9[r15.w + 6].x
          dp4 r42.y, r43.xyzw, r10.xyzw
          div r23.xy, r42.xyxx, r28.wwww
          lt r28.w, cb9[r15.w + 10].w, l(0.00048828)
          if_nz r28.w
            mad_sat r42.xy, |r23.xyxx|, cb9[r15.w + 12].xyxx, cb9[r15.w + 12].zwzz
            mul r42.zw, r42.xxxy, r42.xxxy
            mad r42.xy, r42.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r42.xy, r42.xyxx, r42.zwzz
            mul r28.w, r42.y, r42.x
          else 
            mul_sat r42.xyzw, |r23.yyxx|, cb9[r15.w + 11].xyzw
            log r42.xyzw, r42.xyzw
            mul r42.xyzw, r42.xyzw, cb9[r15.w + 12].zzzz
            exp r42.xyzw, r42.xyzw
            add r42.xy, r42.zwzz, r42.xyxx
            log r42.xy, r42.xyxx
            mul r42.xy, r42.xyxx, cb9[r15.w + 12].wwww
            exp r42.xy, r42.xyxx
            mul r32.w, r42.x, cb9[r15.w + 12].x
            mad r33.w, cb9[r15.w + 12].y, r42.y, l(-1.000000)
            mad r32.w, cb9[r15.w + 12].y, r42.y, -r32.w
            div_sat r32.w, r33.w, r32.w
            mul r33.w, r32.w, r32.w
            mad r32.w, r32.w, l(-2.000000), l(3.000000)
            mul r28.w, r32.w, r33.w
          endif 
          mul r30.w, r28.w, r31.w
          and r28.w, l(255), cb9[r15.w + 14].w
          if_nz r28.w
            dp3 r31.w, cb9[r15.w + 13].xyzx, r23.xyzx
            mov r42.x, cb9[r15.w + 13].w
            mov r42.yz, cb9[r15.w + 14].xxyx
            dp3 r23.x, r42.xyzx, r23.xyzx
            frc r42.x, r31.w
            frc r42.y, r23.x
            iadd r23.x, r28.w, l(-1)
            utof r42.z, r23.x
            sample_l_indexable(texture2darray)(float,float,float,float) r41.xyz, r42.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r41.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r42.x, cb9[r15.w + 0].w
        mov r42.yz, cb9[r15.w + 1].xxyx
        mul r41.xyz, r41.xyzx, r42.xyzx
        lt r23.x, l(0.000000), r30.w
        if_nz r23.x
          and r23.x, r18.w, l(255)
          iadd r23.y, r23.x, l(-1)
          ult r23.y, r23.y, l(32)
          and r23.y, r2.w, r23.y
          if_nz r23.y
            imad r23.xy, r23.xxxx, l(24, 24, 0, 0), l(88, 104, 0, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r28.w, cb2[52].x, r23.x, u2.xxxx
            or r28.w, r28.w, l(4)
            store_structured u2.x, cb2[52].x, r23.x, r28.w
            store_structured u2.x, cb2[52].x, r23.y, r30.w
          endif 
          iadd r23.x, r12.w, l(257)
          ine r17.w, r17.w, l(1)
          if_nz r17.w
            mad r17.w, |r21.y|, l(-0.200000), l(0.400000)
            lt r23.y, r21.y, l(0.000000)
            and r23.y, r0.w, r23.y
            movc r17.w, r23.y, -r17.w, r17.w
            mad r24.xyz, r11.xyzx, r17.wwww, r10.xyzx
            mov r42.xyz, cb9[r15.w + 6].yzwy
            mov r42.w, cb9[r15.w + 7].x
            dp4 r17.w, r42.xyzw, r24.xyzw
            dp4 r23.y, r40.xyzw, r24.xyzw
            ge r28.w, r23.y, r17.w
            if_nz r28.w
              mov r40.xyz, cb9[r15.w + 4].yzwy
              mov r40.w, cb9[r15.w + 5].x
              dp4 r40.x, r40.xyzw, r24.xyzw
              mov r42.xyz, cb9[r15.w + 5].yzwy
              mov r42.w, cb9[r15.w + 6].x
              dp4 r40.y, r42.xyzw, r24.xyzw
              div r24.xy, r40.xyxx, r23.yyyy
              mad_sat r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r40.x, r24.x, cb9[r15.w + 8].y, cb9[r15.w + 8].z
              mad r40.y, r24.y, cb9[r15.w + 8].w, cb9[r15.w + 9].x
              div r17.w, r17.w, r23.y
              max r17.w, r17.w, l(0.00006104)
              and r23.y, l(0x0000ffff), cb9[r15.w + 1].w
              if_nz r11.w
                utof r24.z, r23.y
                mov r28.w, l(0)
                mov r31.w, l(0)
                loop 
                  ige r32.w, r31.w, l(8)
                  breakc_nz r32.w
                  dp2 r42.x, icb[r31.w + 0].yxyy, r20.xyxx
                  dp2 r42.y, icb[r31.w + 0].yxyy, r20.yzyy
                  mad r24.xy, r42.xyxx, cb9[r15.w + 3].yyyy, r40.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r17.w
                  mad r28.w, r24.x, l(0.125000), r28.w
                  iadd r31.w, r31.w, l(1)
                endloop 
              else 
                utof r40.z, r23.y
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r28.w, r40.xyzx, t9.xxxx, s13, r17.w
              endif 
              mul r17.w, r28.w, r28.w
              mul r17.w, r28.w, r17.w
            else 
              mov r17.w, l(1.000000)
            endif 
          else 
            mov r17.w, l(1.000000)
          endif 
          mul r17.w, r17.w, r30.w
          lt r23.y, l(0.000000), r17.w
          if_nz r23.y
            ubfe r23.y, l(4), l(16), cb9[r15.w + 1].w
            ult r24.x, l(0), r23.y
            and r24.x, r1.z, r24.x
            if_nz r24.x
              iadd r23.y, r23.y, cb2[0].x
              imad r23.y, r23.y, l(15), l(-15)
              mad r24.x, |r21.y|, l(-0.200000), l(0.400000)
              lt r24.y, r21.y, l(0.000000)
              and r24.y, r0.w, r24.y
              movc r24.x, r24.y, -r24.x, r24.x
              mad r25.xyz, r11.xyzx, r24.xxxx, r10.xyzx
              mov r40.xyz, cb9[r23.y + 6].yzwy
              mov r40.w, cb9[r23.y + 7].x
              dp4 r24.x, r40.xyzw, r25.xyzw
              mov r40.xyz, cb9[r23.y + 7].yzwy
              mov r40.w, cb9[r23.y + 8].x
              dp4 r24.y, r40.xyzw, r25.xyzw
              lt r24.z, r24.y, r24.x
              if_z r24.z
                mov r40.xyz, cb9[r23.y + 4].yzwy
                mov r40.w, cb9[r23.y + 5].x
                dp4 r40.x, r40.xyzw, r25.xyzw
                mov r42.xyz, cb9[r23.y + 5].yzwy
                mov r42.w, cb9[r23.y + 6].x
                dp4 r40.y, r42.xyzw, r25.xyzw
                div r25.xy, r40.xyxx, r24.yyyy
                mad r25.xy, r25.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r40.x, r25.x, cb9[r23.y + 9].w
                add r40.y, r25.y, cb9[r23.y + 10].x
                mul r25.xy, r40.xyxx, cb9[r23.y + 9].yzyy
                div r40.xy, cb9[r23.y + 3].yyyy, cb9[r23.y + 8].ywyy
                add r40.zw, -r40.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r40.zw, r25.xxxy, r40.zzzw
                ge r40.xy, r40.xyxx, r25.xyxx
                or r40.xy, r40.xyxx, r40.zwzz
                or r25.z, r40.y, r40.x
                if_z r25.z
                  mov_sat r25.xy, r25.xyxx
                  mad r40.x, r25.x, cb9[r23.y + 8].y, cb9[r23.y + 8].z
                  mad r40.y, r25.y, cb9[r23.y + 8].w, cb9[r23.y + 9].x
                  mul r25.x, r24.y, cb9[r23.y + 10].z
                  mad r24.x, cb9[r23.y + 10].y, r24.y, r24.x
                  div r24.x, r24.x, r25.x
                endif 
              else 
                mov r25.z, l(-1)
              endif 
              or r24.y, r24.z, r25.z
              if_z r24.y
                max r24.x, r24.x, l(0.00006104)
                and r24.y, l(0x0000ffff), cb9[r23.y + 1].w
                if_nz r11.w
                  utof r25.z, r24.y
                  mov r24.z, l(0)
                  mov r30.w, l(0)
                  loop 
                    ige r31.w, r30.w, l(8)
                    breakc_nz r31.w
                    dp2 r42.x, icb[r30.w + 0].yxyy, r20.xwxx
                    dp2 r42.y, icb[r30.w + 0].xyxx, r4.xyxx
                    mad r25.xy, r42.xyxx, cb9[r23.y + 3].yyyy, r40.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r25.xyzx, t9.xxxx, s13, r24.x
                    mad r24.z, r25.x, l(0.125000), r24.z
                    iadd r30.w, r30.w, l(1)
                  endloop 
                else 
                  utof r40.z, r24.y
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.z, r40.xyzx, t9.xxxx, s13, r24.x
                endif 
                mul r23.y, r24.z, r24.z
                mul r23.y, r24.z, r23.y
              else 
                mov r23.y, l(1.000000)
              endif 
              mul r17.w, r17.w, r23.y
            else 
              ubfe r23.y, l(4), l(20), cb9[r15.w + 1].w
              ult r24.x, l(0), r23.y
              and r24.x, r4.z, r24.x
              if_nz r24.x
                iadd r23.y, r23.y, cb2[0].x
                imad r23.y, r23.y, l(15), l(-15)
                mad r24.x, |r21.y|, l(-0.200000), l(0.400000)
                lt r24.y, r21.y, l(0.000000)
                and r24.y, r0.w, r24.y
                movc r24.x, r24.y, -r24.x, r24.x
                mad r26.xyz, r11.xyzx, r24.xxxx, r10.xyzx
                mov r40.xyz, cb9[r23.y + 6].yzwy
                mov r40.w, cb9[r23.y + 7].x
                dp4 r24.x, r40.xyzw, r26.xyzw
                mov r40.xyz, cb9[r23.y + 7].yzwy
                mov r40.w, cb9[r23.y + 8].x
                dp4 r24.y, r40.xyzw, r26.xyzw
                lt r25.x, r24.y, r24.x
                if_z r25.x
                  mov r40.xyz, cb9[r23.y + 4].yzwy
                  mov r40.w, cb9[r23.y + 5].x
                  dp4 r40.x, r40.xyzw, r26.xyzw
                  mov r42.xyz, cb9[r23.y + 5].yzwy
                  mov r42.w, cb9[r23.y + 6].x
                  dp4 r40.y, r42.xyzw, r26.xyzw
                  div r25.yz, r40.xxyx, r24.yyyy
                  mad r25.yz, r25.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                  add r26.x, r25.y, cb9[r23.y + 9].w
                  add r26.y, r25.z, cb9[r23.y + 10].x
                  mul r25.yz, r26.xxyx, cb9[r23.y + 9].yyzy
                  div r26.xy, cb9[r23.y + 3].yyyy, cb9[r23.y + 8].ywyy
                  add r40.xy, -r26.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r40.xy, r25.yzyy, r40.xyxx
                  ge r26.xy, r26.xyxx, r25.yzyy
                  or r26.xy, r26.xyxx, r40.xyxx
                  or r26.x, r26.y, r26.x
                  if_z r26.x
                    mov_sat r25.yz, r25.yyzy
                    mad r40.x, r25.y, cb9[r23.y + 8].y, cb9[r23.y + 8].z
                    mad r40.y, r25.z, cb9[r23.y + 8].w, cb9[r23.y + 9].x
                    mul r25.y, r24.y, cb9[r23.y + 10].z
                    mad r24.x, cb9[r23.y + 10].y, r24.y, r24.x
                    div r24.x, r24.x, r25.y
                  endif 
                else 
                  mov r26.x, l(-1)
                endif 
                or r24.y, r25.x, r26.x
                if_z r24.y
                  max r24.x, r24.x, l(0.00006104)
                  and r24.y, l(0x0000ffff), cb9[r23.y + 1].w
                  if_nz r11.w
                    utof r25.z, r24.y
                    mov r26.xy, l(0,0,0,0)
                    loop 
                      ige r26.z, r26.y, l(8)
                      breakc_nz r26.z
                      dp2 r42.x, icb[r26.y + 0].xyxx, r28.xyxx
                      dp2 r42.y, icb[r26.y + 0].yxyy, r28.xzxx
                      mad r25.xy, r42.xyxx, cb9[r23.y + 3].yyyy, r40.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r25.xyzx, t9.xxxx, s13, r24.x
                      mad r26.x, r25.x, l(0.125000), r26.x
                      iadd r26.y, r26.y, l(1)
                    endloop 
                  else 
                    utof r40.z, r24.y
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.x, r40.xyzx, t9.xxxx, s13, r24.x
                  endif 
                  mul r23.y, r26.x, r26.x
                  mul r23.y, r26.x, r23.y
                else 
                  mov r23.y, l(1.000000)
                endif 
                mul r17.w, r17.w, r23.y
              endif 
            endif 
            mad r23.y, -r21.w, r2.x, l(1.000000)
            mul r23.y, r23.y, r23.y
            mad r23.y, -r23.y, l(0.620000), l(0.620000)
            add r23.y, -r21.w, r23.y
            mad r21.w, r2.z, r23.y, r21.w
            mul r21.w, r17.w, r21.w
            lt r21.y, l(0.000000), r21.y
            mad r25.xyz, r21.wwww, r41.xyzx, r35.xyzx
            mad r39.xyz, r39.xyzx, r19.yyyy, r12.xyzx
            dp3 r19.y, r39.xyzx, r39.xyzx
            rsq r19.y, r19.y
            mul r39.xyz, r19.yyyy, r39.xyzx
            dp3 r19.y, r39.xyzx, r12.xyzx
            dp3 r23.y, r11.xyzx, r39.xyzx
            mad r24.x, |r23.y|, r1.w, -|r23.y|
            mad r23.y, |r23.y|, r24.x, l(1.000000)
            mad r24.x, r21.z, r2.y, r7.w
            mul r23.y, r23.y, r23.y
            mul r23.y, r24.x, r23.y
            rcp r23.y, r23.y
            mul r21.z, r23.w, r21.z
            mul r21.z, r21.z, r23.y
            mul r21.z, r17.w, r21.z
            mad r39.xyz, r21.zzzz, r41.xyzx, r38.xyzx
            add_sat r19.y, -r19.y, l(1.000000)
            mul r23.y, r19.y, r19.y
            mul r23.y, r23.y, r23.y
            mul r19.y, r19.y, r23.y
            mul r19.y, r19.y, r21.z
            mad r40.xyz, r19.yyyy, r41.xyzx, r37.xyzx
            mad r41.xyz, r21.wwww, r41.xyzx, r36.xyzx
            movc r41.xyz, r0.wwww, r41.xyzx, r36.xyzx
            movc r35.xyz, r21.yyyy, r25.xyzx, r35.xyzx
            movc r36.xyz, r21.yyyy, r36.xyzx, r41.xyzx
            movc r37.xyz, r21.yyyy, r40.xyzx, r37.xyzx
            movc r38.xyz, r21.yyyy, r39.xyzx, r38.xyzx
            and r19.y, r23.x, l(255)
            iadd r21.y, r19.y, l(-1)
            ult r21.y, r21.y, l(32)
            and r21.y, r2.w, r21.y
            if_nz r21.y
              imad r21.yz, r19.yyyy, l(0, 24, 24, 0), l(0, 88, 108, 0)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r19.y, cb2[52].x, r21.y, u2.xxxx
              or r19.y, r19.y, l(8)
              store_structured u2.x, cb2[52].x, r21.y, r19.y
              store_structured u2.x, cb2[52].x, r21.z, r17.w
            endif 
            iadd r12.w, r12.w, l(0x00010101)
          else 
            mov r12.w, r23.x
          endif 
        else 
          mov r12.w, r18.w
        endif 
      else 
        mov r12.w, r18.w
      endif 
    else 
      ieq r16.w, r16.w, l(4)
      if_nz r16.w
        ubfe r16.w, l(3), l(27), cb9[r15.w + 1].w
        and r17.w, r12.w, l(255)
        ult r18.w, r17.w, l(32)
        and r18.w, r2.w, r18.w
        if_nz r18.w
          imad r17.w, r17.w, l(24), l(112)
          add r22.yzw, cb1[24].xxyz, cb9[r15.w + 0].xxyz
          store_structured u2.xyzw, cb2[52].x, r17.w, r22.xyzw
        endif 
        iadd r17.w, r12.w, l(1)
        mul r18.w, r1.w, cb9[r15.w + 1].z
        mul r18.w, r18.w, l(0.250000)
        lt r19.y, l(0.000000), cb9[r15.w + 6].y
        mov r25.xy, cb9[r15.w + 5].zwzz
        mov r25.z, cb9[r15.w + 6].x
        mad r21.yzw, -r25.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r15.w + 0].xxyz
        add r22.yzw, -r10.xxyz, r21.yyzw
        dp3 r23.x, r25.xyzx, r15.xyzx
        dp3 r23.y, r25.xyzx, r22.yzwy
        dp3 r22.y, r15.xyzx, r22.yzwy
        mad r22.z, -r23.x, r23.x, cb9[r15.w + 6].y
        mad r22.y, r23.x, r22.y, -r23.y
        div_sat r22.w, -r23.y, cb9[r15.w + 6].y
        div_sat r22.y, r22.y, r22.z
        div r22.z, r22.z, cb9[r15.w + 6].y
        mul r22.z, r22.z, l(10.000000)
        min r22.z, r22.z, l(1.000000)
        add r22.y, -r22.w, r22.y
        mad r22.y, r22.z, r22.y, r22.w
        mad r23.xyw, r22.yyyy, r25.xyxz, r21.yzyw
        mad r21.yzw, r22.wwww, r25.xxyz, r21.yyzw
        movc r21.yzw, r19.yyyy, r21.yyzw, cb9[r15.w + 0].xxyz
        movc r22.yzw, r19.yyyy, r23.xxyw, cb9[r15.w + 0].xxyz
        add r22.yzw, -r10.xxyz, r22.yyzw
        add r21.yzw, -r10.xxyz, r21.yyzw
        dp3 r19.y, r22.yzwy, r22.yzwy
        rsq r19.y, r19.y
        mul r23.xyw, r19.yyyy, r22.yzyw
        dp3 r24.x, r21.yzwy, r21.yzwy
        rsq r24.y, r24.x
        mul r21.yzw, r21.yyzw, r24.yyyy
        dp3 r21.y, r11.xyzx, r21.yzwy
        mov_sat r21.z, r21.y
        movc r21.z, r0.w, |r21.y|, r21.z
        lt r21.w, l(0.000000), r21.z
        if_nz r21.w
          sqrt r21.w, r24.x
          mul r24.y, cb9[r15.w + 3].x, cb9[r15.w + 3].x
          div r24.x, r24.y, r24.x
          min r24.x, r24.x, l(1.000000)
          mad_sat r25.xy, r21.wwww, cb9[r15.w + 2].xzxx, cb9[r15.w + 2].ywyy
          mul r26.yz, r25.xxyx, r25.xxyx
          mad r25.xy, r25.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r25.xy, r25.xyxx, r26.yzyy
          mul r21.w, r24.x, r25.x
          mul r21.w, r25.y, r21.w
          lt r24.x, l(0.000000), r21.w
          if_nz r24.x
            and r24.x, r17.w, l(255)
            iadd r24.y, r24.x, l(-1)
            ult r24.y, r24.y, l(32)
            and r24.y, r2.w, r24.y
            if_nz r24.y
              imad r24.xy, r24.xxxx, l(24, 24, 0, 0), l(88, 104, 0, 0)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r25.x, cb2[52].x, r24.x, u2.xxxx
              or r25.x, r25.x, l(4)
              store_structured u2.x, cb2[52].x, r24.x, r25.x
              store_structured u2.x, cb2[52].x, r24.y, r21.w
            endif 
            iadd r24.x, r12.w, l(257)
            ine r16.w, r16.w, l(1)
            if_nz r16.w
              mad r16.w, |r21.y|, l(-0.200000), l(0.400000)
              lt r24.y, r21.y, l(0.000000)
              and r24.y, r0.w, r24.y
              movc r16.w, r24.y, -r16.w, r16.w
              mad r25.xyz, r11.xyzx, r16.wwww, r10.xyzx
              add r25.xyz, r25.xyzx, -cb9[r15.w + 4].yzwy
              max r16.w, |r25.z|, |r25.y|
              max r16.w, r16.w, |r25.x|
              div r16.w, cb9[r15.w + 5].x, r16.w
              add r16.w, r16.w, cb9[r15.w + 5].y
              dp3 r24.y, r25.xyzx, r25.xyzx
              rsq r24.y, r24.y
              max r16.w, r16.w, l(0.00006104)
              and r26.y, l(0x0000ffff), cb9[r15.w + 1].w
              utof r39.w, r26.y
              mov r26.yz, l(0,0,0,0)
              loop 
                ige r30.w, r26.z, l(8)
                breakc_nz r30.w
                dp2 r40.y, icb[r26.z + 0].xyxx, r13.xyxx
                dp2 r40.z, icb[r26.z + 0].yxyy, r13.xzxx
                mul r40.yz, r40.yyzy, cb9[r15.w + 3].yyyy
                mul r40.x, r14.x, r40.y
                mul r40.w, r5.x, r40.y
                mad r39.xyz, r25.xyzx, r24.yyyy, r40.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r30.w, r39.xyzw, t10.xxxx, s13, r16.w
                mad r26.y, r30.w, l(0.125000), r26.y
                iadd r26.z, r26.z, l(1)
              endloop 
            else 
              mov r26.y, l(1.000000)
            endif 
            mul r16.w, r21.w, r26.y
            lt r21.w, l(0.000000), r16.w
            if_nz r21.w
              ubfe r21.w, l(4), l(16), cb9[r15.w + 1].w
              ult r24.y, l(0), r21.w
              and r24.y, r1.z, r24.y
              if_nz r24.y
                iadd r21.w, r21.w, cb2[0].x
                imad r21.w, r21.w, l(15), l(-15)
                mad r24.y, |r21.y|, l(-0.200000), l(0.400000)
                lt r25.x, r21.y, l(0.000000)
                and r25.x, r0.w, r25.x
                movc r24.y, r25.x, -r24.y, r24.y
                mad r27.xyz, r11.xyzx, r24.yyyy, r10.xyzx
                mov r39.xyz, cb9[r21.w + 6].yzwy
                mov r39.w, cb9[r21.w + 7].x
                dp4 r24.y, r39.xyzw, r27.xyzw
                mov r39.xyz, cb9[r21.w + 7].yzwy
                mov r39.w, cb9[r21.w + 8].x
                dp4 r25.x, r39.xyzw, r27.xyzw
                lt r25.y, r25.x, r24.y
                if_z r25.y
                  mov r39.xyz, cb9[r21.w + 4].yzwy
                  mov r39.w, cb9[r21.w + 5].x
                  dp4 r39.x, r39.xyzw, r27.xyzw
                  mov r40.xyz, cb9[r21.w + 5].yzwy
                  mov r40.w, cb9[r21.w + 6].x
                  dp4 r39.y, r40.xyzw, r27.xyzw
                  div r27.xy, r39.xyxx, r25.xxxx
                  mad r27.xy, r27.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r39.x, r27.x, cb9[r21.w + 9].w
                  add r39.y, r27.y, cb9[r21.w + 10].x
                  mul r27.xy, r39.xyxx, cb9[r21.w + 9].yzyy
                  div r39.xy, cb9[r21.w + 3].yyyy, cb9[r21.w + 8].ywyy
                  add r39.zw, -r39.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                  ge r39.zw, r27.xxxy, r39.zzzw
                  ge r39.xy, r39.xyxx, r27.xyxx
                  or r39.xy, r39.xyxx, r39.zwzz
                  or r25.z, r39.y, r39.x
                  if_z r25.z
                    mov_sat r27.xy, r27.xyxx
                    mad r39.x, r27.x, cb9[r21.w + 8].y, cb9[r21.w + 8].z
                    mad r39.y, r27.y, cb9[r21.w + 8].w, cb9[r21.w + 9].x
                    mul r26.z, r25.x, cb9[r21.w + 10].z
                    mad r24.y, cb9[r21.w + 10].y, r25.x, r24.y
                    div r24.y, r24.y, r26.z
                  endif 
                else 
                  mov r25.z, l(-1)
                endif 
                or r25.x, r25.y, r25.z
                if_z r25.x
                  max r24.y, r24.y, l(0.00006104)
                  and r25.x, l(0x0000ffff), cb9[r21.w + 1].w
                  if_nz r11.w
                    utof r27.z, r25.x
                    mov r25.yz, l(0,0,0,0)
                    loop 
                      ige r26.z, r25.z, l(8)
                      breakc_nz r26.z
                      dp2 r40.x, icb[r25.z + 0].xyxx, r30.xyxx
                      dp2 r40.y, icb[r25.z + 0].yxyy, r30.xzxx
                      mad r27.xy, r40.xyxx, cb9[r21.w + 3].yyyy, r39.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.z, r27.xyzx, t9.xxxx, s13, r24.y
                      mad r25.y, r26.z, l(0.125000), r25.y
                      iadd r25.z, r25.z, l(1)
                    endloop 
                  else 
                    utof r39.z, r25.x
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.y, r39.xyzx, t9.xxxx, s13, r24.y
                  endif 
                  mul r21.w, r25.y, r25.y
                  mul r21.w, r25.y, r21.w
                else 
                  mov r21.w, l(1.000000)
                endif 
                mul r16.w, r16.w, r21.w
              else 
                ubfe r21.w, l(4), l(20), cb9[r15.w + 1].w
                ult r24.y, l(0), r21.w
                and r24.y, r4.z, r24.y
                if_nz r24.y
                  iadd r21.w, r21.w, cb2[0].x
                  imad r21.w, r21.w, l(15), l(-15)
                  mad r24.y, |r21.y|, l(-0.200000), l(0.400000)
                  lt r25.x, r21.y, l(0.000000)
                  and r25.x, r0.w, r25.x
                  movc r24.y, r25.x, -r24.y, r24.y
                  mad r29.xyz, r11.xyzx, r24.yyyy, r10.xyzx
                  mov r39.xyz, cb9[r21.w + 6].yzwy
                  mov r39.w, cb9[r21.w + 7].x
                  dp4 r24.y, r39.xyzw, r29.xyzw
                  mov r39.xyz, cb9[r21.w + 7].yzwy
                  mov r39.w, cb9[r21.w + 8].x
                  dp4 r25.x, r39.xyzw, r29.xyzw
                  lt r25.z, r25.x, r24.y
                  if_z r25.z
                    mov r39.xyz, cb9[r21.w + 4].yzwy
                    mov r39.w, cb9[r21.w + 5].x
                    dp4 r27.x, r39.xyzw, r29.xyzw
                    mov r39.xyz, cb9[r21.w + 5].yzwy
                    mov r39.w, cb9[r21.w + 6].x
                    dp4 r27.y, r39.xyzw, r29.xyzw
                    div r27.xy, r27.xyxx, r25.xxxx
                    mad r27.xy, r27.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                    add r29.x, r27.x, cb9[r21.w + 9].w
                    add r29.y, r27.y, cb9[r21.w + 10].x
                    mul r27.xy, r29.xyxx, cb9[r21.w + 9].yzyy
                    div r29.xy, cb9[r21.w + 3].yyyy, cb9[r21.w + 8].ywyy
                    add r39.xy, -r29.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r39.xy, r27.xyxx, r39.xyxx
                    ge r29.xy, r29.xyxx, r27.xyxx
                    or r29.xy, r29.xyxx, r39.xyxx
                    or r26.z, r29.y, r29.x
                    if_z r26.z
                      mov_sat r27.xy, r27.xyxx
                      mad r29.x, r27.x, cb9[r21.w + 8].y, cb9[r21.w + 8].z
                      mad r29.y, r27.y, cb9[r21.w + 8].w, cb9[r21.w + 9].x
                      mul r27.x, r25.x, cb9[r21.w + 10].z
                      mad r24.y, cb9[r21.w + 10].y, r25.x, r24.y
                      div r24.y, r24.y, r27.x
                    endif 
                  else 
                    mov r26.z, l(-1)
                  endif 
                  or r25.x, r25.z, r26.z
                  if_z r25.x
                    max r24.y, r24.y, l(0.00006104)
                    and r25.x, l(0x0000ffff), cb9[r21.w + 1].w
                    if_nz r11.w
                      utof r27.z, r25.x
                      mov r25.z, l(0)
                      mov r26.z, l(0)
                      loop 
                        ige r30.w, r26.z, l(8)
                        breakc_nz r30.w
                        dp2 r39.x, icb[r26.z + 0].xyxx, r31.xyxx
                        dp2 r39.y, icb[r26.z + 0].yxyy, r31.xzxx
                        mad r27.xy, r39.xyxx, cb9[r21.w + 3].yyyy, r29.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r27.x, r27.xyzx, t9.xxxx, s13, r24.y
                        mad r25.z, r27.x, l(0.125000), r25.z
                        iadd r26.z, r26.z, l(1)
                      endloop 
                    else 
                      utof r29.z, r25.x
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.z, r29.xyzx, t9.xxxx, s13, r24.y
                    endif 
                    mul r21.w, r25.z, r25.z
                    mul r21.w, r25.z, r21.w
                  else 
                    mov r21.w, l(1.000000)
                  endif 
                  mul r16.w, r16.w, r21.w
                endif 
              endif 
              mad r21.w, -r21.z, r2.x, l(1.000000)
              mul r21.w, r21.w, r21.w
              mad r21.w, -r21.w, l(0.620000), l(0.620000)
              add r21.w, -r21.z, r21.w
              mad r21.z, r2.z, r21.w, r21.z
              mul r21.z, r16.w, r21.z
              mov r27.x, cb9[r15.w + 0].w
              mov r27.yz, cb9[r15.w + 1].xxyx
              lt r15.w, l(0.000000), r21.y
              mad r29.xyz, r21.zzzz, r27.xyzx, r35.xyzx
              dp3_sat r21.y, r11.xyzx, r23.xywx
              mad r22.yzw, r22.yyzw, r19.yyyy, r12.xxyz
              dp3 r19.y, r22.yzwy, r22.yzwy
              rsq r19.y, r19.y
              mul r22.yzw, r19.yyyy, r22.yyzw
              dp3 r19.y, r22.yzwy, r12.xyzx
              dp3 r21.w, r11.xyzx, r22.yzwy
              mad r22.y, |r21.w|, r1.w, -|r21.w|
              mad r21.w, |r21.w|, r22.y, l(1.000000)
              mad r22.y, r21.y, r2.y, r7.w
              mul r21.w, r21.w, r21.w
              mul r21.w, r22.y, r21.w
              rcp r21.w, r21.w
              mul r18.w, r18.w, r21.y
              mul r18.w, r18.w, r21.w
              mul r18.w, r16.w, r18.w
              mad r22.yzw, r18.wwww, r27.xxyz, r38.xxyz
              add_sat r19.y, -r19.y, l(1.000000)
              mul r21.y, r19.y, r19.y
              mul r21.y, r21.y, r21.y
              mul r19.y, r19.y, r21.y
              mul r18.w, r18.w, r19.y
              mad r23.xyw, r18.wwww, r27.xyxz, r37.xyxz
              mad r21.yzw, r21.zzzz, r27.xxyz, r36.xxyz
              movc r21.yzw, r0.wwww, r21.yyzw, r36.xxyz
              movc r35.xyz, r15.wwww, r29.xyzx, r35.xyzx
              movc r36.xyz, r15.wwww, r36.xyzx, r21.yzwy
              movc r37.xyz, r15.wwww, r23.xywx, r37.xyzx
              movc r38.xyz, r15.wwww, r22.yzwy, r38.xyzx
              and r15.w, r24.x, l(255)
              iadd r18.w, r15.w, l(-1)
              ult r18.w, r18.w, l(32)
              and r18.w, r2.w, r18.w
              if_nz r18.w
                imad r21.yz, r15.wwww, l(0, 24, 24, 0), l(0, 88, 108, 0)
                ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r15.w, cb2[52].x, r21.y, u2.xxxx
                or r15.w, r15.w, l(8)
                store_structured u2.x, cb2[52].x, r21.y, r15.w
                store_structured u2.x, cb2[52].x, r21.z, r16.w
              endif 
              iadd r12.w, r12.w, l(0x00010101)
            else 
              mov r12.w, r24.x
            endif 
          else 
            mov r12.w, r17.w
          endif 
        else 
          mov r12.w, r17.w
        endif 
      endif 
    endif 
  endloop 
  mov r14.yzw, r35.xxyz
  mov r32.xyz, r36.xyzx
  mov r33.xyz, r37.xyzx
  mov r34.xyz, r38.xyzx
  mov r6.w, r12.w
  iadd r8.w, r8.w, l(32)
endloop 
mad r3.xyz, r3.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.z, r3.y
mad r2.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.z, r2.x
ieq r1.z, r0.z, r1.z
movc r1.zw, r1.zzzz, r2.yyyz, l(0,0,-1.000000,0)
mad r2.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.x, r2.x
ieq r2.x, r0.z, r2.x
movc r2.xy, r2.xxxx, r2.yzyy, l(-1.000000,0,0,0)
mad r4.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.z, r4.x
ieq r2.z, r0.z, r2.z
movc r4.xy, r2.zzzz, r4.yzyy, l(-1.000000,0,0,0)
mad r6.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.z, r6.x
ieq r0.z, r0.z, r2.z
movc r4.zw, r0.zzzz, r6.yyyz, l(0,0,-1.000000,0)
mov r7.x, r1.z
mov r7.y, r2.x
mov r7.zw, r4.xxxz
add r7.xyzw, -r3.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.z, r7.y, r7.x
add r0.z, r7.z, r0.z
add r0.z, r7.w, r0.z
mul r1.z, r2.y, r7.y
mad r1.z, r7.x, r1.w, r1.z
mad r1.z, r7.z, r4.y, r1.z
mad r1.z, r7.w, r4.w, r1.z
div r3.w, r1.z, r0.z
ge r0.z, l(0.000000), r0.z
movc r3.yz, r0.zzzz, l(0,0,0,0), r3.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.z, r1.w, r1.z
movc r2.xyz, r0.zzzz, r3.xyzx, r3.xzyx
mad r0.z, -r2.z, l(0.500000), r2.x
add r3.y, r0.z, r2.z
mad r3.z, -r2.y, l(0.500000), r0.z
add r3.x, r2.y, r3.z
mul r2.xyz, r5.yzwy, r14.yzwy
mad r2.xyz, r32.xyzx, r3.xyzx, r2.xyzx
mul r4.xyz, r33.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r4.xyz, r34.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000), r4.xyzx
add r2.xyz, r2.xyzx, r4.xyzx
add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xyz, r4.xyzx, r33.xyzx
mad r3.xyz, r34.xyzx, r3.xyzx, r4.xyzx
mad r3.xyz, r14.yzwy, r5.yzwy, r3.xyzx
movc r2.xyz, r0.wwww, r2.xyzx, r3.xyzx
lt r0.z, l(0.000000), cb2[9].z
if_nz r0.z
  dp3 r0.z, r10.xyzx, r10.xyzx
  rsq r0.w, r0.z
  mul r3.xyz, r0.wwww, r10.xyzx
  sqrt r0.z, r0.z
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r1.zw, r0.zzzz, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r0.w, l(0.010000), |r10.z|
    mul r4.xy, r10.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r0.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r5.xyz, r1.wwww, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xyzx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xyzx
  else 
    mad r0.w, r0.z, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r10.z|
    mul r1.w, r10.z, cb2[15].z
    mul r3.w, r1.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r1.w, r3.w, r1.w
    mul r1.w, r0.w, r1.w
    movc r0.w, r1.z, r1.w, r0.w
    mul r5.xyz, r0.wwww, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xyzx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r1.w, cb2[8].w, -r0.w, l(1.000000)
  mul r1.w, r1.w, r1.w
  mul r1.w, r1.w, l(12.566371)
  div r1.z, r1.z, r1.w
  add r0.z, r0.z, -cb2[10].w
  mul_sat r0.z, r0.z, cb2[11].w
  mul r0.z, r0.z, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyz, r0.zzzz, cb2[11].xyzx
  mad r3.xyz, r0.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r5.xyzx
  mad r3.xyz, r2.xyzx, r4.xyzx, r3.xyzx
else 
  mul r0.z, r10.z, cb2[6].x
  mad r0.w, cb2[6].x, r10.z, cb2[5].x
  lt r1.z, |r0.z|, l(0.000100)
  min r1.w, r0.w, l(64.000000)
  mul r1.w, r1.w, l(1.442695)
  exp r1.w, r1.w
  mov_sat r3.w, cb2[6].z
  lt r4.x, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r4.x, r1.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.z, r1.z, l(1.000000), r0.z
  div r0.z, r0.w, r0.z
  movc r0.z, r1.z, r3.w, r0.z
  mul r0.z, r0.z, cb2[5].z
  dp3 r0.w, r10.xyzx, r10.xyzx
  sqrt r1.z, r0.w
  mad r0.z, r0.z, r1.z, cb2[5].w
  exp r0.z, r0.z
  min r0.z, r0.z, l(1.000000)
  add r0.z, -r0.z, l(1.000000)
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r10.xyzx
  dp3 r0.w, cb2[7].yzwy, r4.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r0.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.z, r0.z, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyz, r0.zzzz, r4.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.z, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(0, 4, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(0)
and r0.w, r0.w, r1.z
and r3.z, r0.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.zzzz, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.z, r6.w, l(255)
      break 
      case l(2)
      ubfe r0.z, l(8), l(8), r6.w
      break 
      case l(3)
      ubfe r0.z, l(8), l(16), r6.w
      break 
      case l(4)
      mov r0.z, l(0)
      break 
      case l(5)
      mov r0.z, l(1)
      break 
      default 
      mov r0.z, l(0)
      break 
    endswitch 
    utof r0.z, r0.z
    mul r0.z, r0.z, cb2[53].z
    mad r3.xyz, r0.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r2.w
  add r1.xyz, r10.xyzx, cb1[24].xyzx
  and r1.w, r6.w, l(255)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  store_structured u2.x, cb2[52].x, l(108), l(0)
endif 
if_nz cb2[52].y
  and r0.z, r6.w, l(255)
  atomic_iadd g1, l(0), r0.z
  ubfe r1.xy, l(8, 8, 0, 0), l(8, 16, 0, 0), r6.wwww
  atomic_iadd g1, l(4), r1.x
  atomic_iadd g1, l(8), r1.y
  atomic_iadd g1, l(12), l(0)
  atomic_iadd g1, l(16), l(1)
  atomic_umax g2, l(0), r0.z
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), l(0)
  atomic_umax g2, l(16), l(1)
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.z, r1.x, l(63)
  if_nz r0.z
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.z, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.z
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.z, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.z
    ieq r0.xy, r0.xyxx, cb2[52].zwzz
    and r0.x, r0.y, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.z
    endif 
  endif 
endif 
ret 
// Approximately 1638 instruction slots used
