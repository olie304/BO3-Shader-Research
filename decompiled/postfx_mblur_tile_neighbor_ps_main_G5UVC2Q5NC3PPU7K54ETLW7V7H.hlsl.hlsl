// ---- Created with 3Dmigoto v1.2.45 on Thu Jul 15 15:40:12 2021

cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}

SamplerState pointClamp_s : register(s1);
Texture2D<float4> codeTexture0 : register(t0);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = -renderTargetSize.zw + v1.xy;
  r0.xyzw = codeTexture0.Sample(pointClamp_s, r0.xy).xyzw;
  r1.xy = r0.zw;
  r2.xyzw = r0.xyzw * float4(255,255,255,255) + float4(-128,-128,-128,-128);
  r1.z = dot(r2.zw, r2.zw);
  r0.z = dot(r2.xy, r2.xy);
  r0.w = cmp(r1.z < 1601);
  r1.xyz = r0.www ? r1.xyz : float3(0,0,1601);
  r2.xyzw = renderTargetSize.zwzw * float4(0,-1,1,-1) + v1.xyxy;
  r3.xyzw = codeTexture0.Sample(pointClamp_s, r2.xy).xyzw;
  r2.xyzw = codeTexture0.Sample(pointClamp_s, r2.zw).xyzw;
  r4.xyzw = r3.xyzw * float4(255,255,255,255) + float4(-128,-128,-128,-128);
  r5.z = dot(r4.zw, r4.zw);
  r4.z = dot(r4.xy, r4.xy);
  r0.w = cmp(r5.z < r1.z);
  r5.xy = r3.zw;
  r4.xy = r3.xy;
  r1.xyz = r0.www ? r5.xyz : r1.xyz;
  r3.xyzw = r2.xyzw * float4(255,255,255,255) + float4(-128,-128,-128,-128);
  r5.z = dot(r3.zw, r3.zw);
  r3.z = dot(r3.xy, r3.xy);
  r0.w = cmp(r5.z < r1.z);
  r5.xy = r2.zw;
  r3.xy = r2.xy;
  r1.xyz = r0.www ? r5.xyz : r1.xyz;
  r2.xyzw = renderTargetSize.zwzw * float4(-1,0,1,0) + v1.xyxy;
  r5.xyzw = codeTexture0.Sample(pointClamp_s, r2.xy).xyzw;
  r2.xyzw = codeTexture0.Sample(pointClamp_s, r2.zw).xyzw;
  r6.xyzw = r5.xyzw * float4(255,255,255,255) + float4(-128,-128,-128,-128);
  r7.z = dot(r6.zw, r6.zw);
  r6.z = dot(r6.xy, r6.xy);
  r0.w = cmp(r7.z < r1.z);
  r7.xy = r5.zw;
  r6.xy = r5.xy;
  r1.xyz = r0.www ? r7.xyz : r1.xyz;
  r5.xyzw = codeTexture0.Sample(pointClamp_s, v1.xy).xyzw;
  r7.xyzw = r5.xyzw * float4(255,255,255,255) + float4(-128,-128,-128,-128);
  r8.z = dot(r7.zw, r7.zw);
  r7.z = dot(r7.xy, r7.xy);
  r0.w = cmp(r8.z < r1.z);
  r8.xy = r5.zw;
  r7.xy = r5.xy;
  r1.xyz = r0.www ? r8.xyz : r1.xyz;
  r5.xyzw = r2.xyzw * float4(255,255,255,255) + float4(-128,-128,-128,-128);
  r8.z = dot(r5.zw, r5.zw);
  r5.z = dot(r5.xy, r5.xy);
  r0.w = cmp(r8.z < r1.z);
  r8.xy = r2.zw;
  r5.xy = r2.xy;
  r1.xyz = r0.www ? r8.xyz : r1.xyz;
  r2.xyzw = renderTargetSize.zwzw * float4(-1,1,0,1) + v1.xyxy;
  r8.xyzw = codeTexture0.Sample(pointClamp_s, r2.xy).xyzw;
  r2.xyzw = codeTexture0.Sample(pointClamp_s, r2.zw).xyzw;
  r9.xyzw = r8.xyzw * float4(255,255,255,255) + float4(-128,-128,-128,-128);
  r10.z = dot(r9.zw, r9.zw);
  r9.z = dot(r9.xy, r9.xy);
  r0.w = cmp(r10.z < r1.z);
  r10.xy = r8.zw;
  r9.xy = r8.xy;
  r1.xyz = r0.www ? r10.xyz : r1.xyz;
  r8.xyzw = r2.xyzw * float4(255,255,255,255) + float4(-128,-128,-128,-128);
  r10.z = dot(r8.zw, r8.zw);
  r8.z = dot(r8.xy, r8.xy);
  r0.w = cmp(r10.z < r1.z);
  r10.xy = r2.zw;
  r8.xy = r2.xy;
  r1.xyz = r0.www ? r10.xyz : r1.xyz;
  r2.xy = renderTargetSize.zw + v1.xy;
  r2.xyzw = codeTexture0.Sample(pointClamp_s, r2.xy).xyzw;
  r10.xyzw = r2.xyzw * float4(255,255,255,255) + float4(-128,-128,-128,-128);
  r0.w = dot(r10.zw, r10.zw);
  r1.w = dot(r10.xy, r10.xy);
  r0.w = cmp(r0.w < r1.z);
  r1.xy = r0.ww ? r2.zw : r1.xy;
  r1.xy = r1.xy * float2(127.5,127.5) + float2(-64,-64);
  r0.w = dot(r1.xy, r1.xy);
  r1.x = cmp(-1 < r0.z);
  r0.xyz = r1.xxx ? r0.xyz : float3(0,0,-1);
  r1.x = cmp(r0.z < r4.z);
  r0.xyz = r1.xxx ? r4.xyz : r0.xyz;
  r1.x = cmp(r0.z < r3.z);
  r0.xyz = r1.xxx ? r3.xyz : r0.xyz;
  r1.x = cmp(r0.z < r6.z);
  r0.xyz = r1.xxx ? r6.xyz : r0.xyz;
  r1.x = cmp(r0.z < r7.z);
  r0.xyz = r1.xxx ? r7.xyz : r0.xyz;
  r1.x = cmp(r0.z < r5.z);
  r0.xyz = r1.xxx ? r5.xyz : r0.xyz;
  r1.x = cmp(r0.z < r9.z);
  r0.xyz = r1.xxx ? r9.xyz : r0.xyz;
  r1.x = cmp(r0.z < r8.z);
  r0.xyz = r1.xxx ? r8.xyz : r0.xyz;
  r0.z = cmp(r0.z < r1.w);
  r0.xy = r0.zz ? r2.xy : r0.xy;
  r1.xy = r0.xy * float2(127.5,127.5) + float2(-64,-64);
  o0.xy = r0.xy;
  r0.x = dot(r1.xy, r1.xy);
  r0.xw = sqrt(r0.xw);
  r0.y = r0.x + -r0.w;
  r0.x = 0.00392156886 * r0.x;
  o0.z = min(1, r0.x);
  r0.x = cmp(2 < r0.y);
  o0.w = r0.x ? 1.000000 : 0;
  return;
}