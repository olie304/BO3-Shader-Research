//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:25:45 2021
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float3 specColorTint;              // Offset:  160 Size:    12 [unused]
//   float baseNormalHeight;            // Offset:  172 Size:     4 [unused]
//   float2 glossRange;                 // Offset:  176 Size:     8 [unused]
//   float2 rotateUVs;                  // Offset:  184 Size:     8 [unused]
//   float2 scrollUVs;                  // Offset:  192 Size:     8 [unused]
//   float2 scaleUVs;                   // Offset:  200 Size:     8 [unused]
//   float2 offsetUVs;                  // Offset:  208 Size:     8 [unused]
//   float2 zoomUVs;                    // Offset:  216 Size:     8 [unused]
//   float zoomRate;                    // Offset:  224 Size:     4 [unused]
//   float layerDepth;                  // Offset:  228 Size:     4 [unused]
//   bool clampU;                       // Offset:  232 Size:     4 [unused]
//   bool clampV;                       // Offset:  236 Size:     4 [unused]
//   float2 falloffParms;               // Offset:  240 Size:     8
//   float hdrScale;                    // Offset:  248 Size:     4 [unused]
//   uint zFeatherComputeSprites;       // Offset:  252 Size:     4 [unused]
//   float desaturationAmount;          // Offset:  256 Size:     4 [unused]
//   float4 levelsControls;             // Offset:  272 Size:    16 [unused]
//   bool useOldHDRScale;               // Offset:  288 Size:     4 [unused]
//   float2 scaleUVsAlpha;              // Offset:  292 Size:     8 [unused]
//   float zFeatherOverride;            // Offset:  300 Size:     4
//   float2 scaleUVsColor;              // Offset:  304 Size:     8 [unused]
//   float2 offsetUVsColor;             // Offset:  312 Size:     8 [unused]
//   float2 rotateUVsColor;             // Offset:  320 Size:     8 [unused]
//   float2 scrollUVsColor;             // Offset:  328 Size:     8 [unused]
//   float2 scaleUVsEmissive;           // Offset:  336 Size:     8 [unused]
//   float2 offsetUVsEmissive;          // Offset:  344 Size:     8 [unused]
//   float2 rotateUVsEmissive;          // Offset:  352 Size:     8 [unused]
//   float2 scrollUVsEmissive;          // Offset:  360 Size:     8 [unused]
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16
//   float4 fogConsts;                  // Offset:  464 Size:    16
//   float4 fogConsts2;                 // Offset:  480 Size:    16
//   float4 fogConsts3;                 // Offset:  496 Size:    16
//   float4 fogConsts4;                 // Offset:  512 Size:    16
//   float4 fogConsts5;                 // Offset:  528 Size:    16
//   float4 fogConsts6;                 // Offset:  544 Size:    16
//   float4 fogConsts7;                 // Offset:  560 Size:    16
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16
//   float3 sunFogDir;                  // Offset:  608 Size:    12
//   float4 sunFogColor;                // Offset:  624 Size:    16
//   float2 sunFog;                     // Offset:  640 Size:     8
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224 [unused]
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48 [unused]
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96
//   float4 pinToWorldZ;                // Offset:  784 Size:    16
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4 [unused]
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for outdoorOcclusionTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
// Resource bind info for refProbeConstants
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   224
//
// }
//
// Resource bind info for refProbeAttenuationConstants
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// outdoorOcclusionTree              texture  struct         r/o             t0      1 
// visibleLights                     texture    uint     2darray             t6      1 
// visibleProbes                     texture    uint     2darray             t7      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// refProbeConstants                 texture  struct         r/o            t15      1 
// refProbeAttenuationConstants      texture  struct         r/o            t16      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// NORMAL                   0   xyzw        3     NONE   float   xyzw
// TANGENT                  0   xyzw        4     NONE   float   xyzw
// SV_VertexID              0   x           5   VERTID    uint       
// TEXCOORD                15   x           6     NONE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyz         2     NONE   float   xyz 
// COLOR                    2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xyz         4     NONE   float   xyz 
// TEXCOORD                 1   xyzw        5     NONE   float   xyzw
// TEXCOORD                 2   xyzw        6     NONE   float   xyzw
// TEXCOORD                 3   xyz         7     NONE   float   xyz 
// TEXCOORD                 4   xy          8     NONE   float   xy  
// TEXCOORD                 5     zw        8     NONE   float     zw
// TEXCOORD                 6   x           9     NONE    uint   x   
// TEXCOORD                 7   xyz        10     NONE   float   xyz 
// TEXCOORD                 8   xyz        11     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[19], immediateIndexed
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_structured t0, 4
dcl_resource_texture2darray (uint,uint,uint,uint) t6
dcl_resource_texture2darray (uint,uint,uint,uint) t7
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_structured t15, 224
dcl_resource_structured t16, 96
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_texture2darray (float,float,float,float) t31
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyz
dcl_output o8.xy
dcl_output o8.zw
dcl_output o9.x
dcl_output o10.xyz
dcl_output o11.xyz
dcl_temps 22
mad o7.xyz, v3.xyzx, l(2.001957, 2.001957, 2.001957, 0.000000), l(-1.00195694, -1.00195694, -1.00195694, 0.000000)
eq r0.xy, cb0[15].xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
and r0.x, r0.y, r0.x
mul r0.yz, cb0[15].xxyx, l(0.000000, 0.01745329, 0.01745329, 0.000000)
sincos null, r0.yz, r0.yyzy
mul r0.zw, r0.yyyz, r0.yyyz
mad r0.y, r0.y, r0.y, -r0.w
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mad r1.y, -r0.z, r1.x, l(1.000000)
movc o8.xy, r0.xxxx, l(0,1.000000,0,0), r1.xyxx
ushr r0.x, v0.w, l(16)
f16tof32 o5.w, r0.x
eq r0.x, v3.w, l(0.000000)
and r0.y, v0.w, l(0x0000ffff)
utof r0.y, r0.y
mul r1.x, r0.y, l(0.00390625)
mul r2.xyzw, v4.xyzw, l(1023.000000, 1023.000000, 1023.000000, 3.000000)
ftou r2.xyzw, r2.xyzw
ishl r0.yzw, r2.yyzw, l(0, 10, 20, 30)
or r0.y, r0.y, r2.x
or r0.y, r0.z, r0.y
or r1.z, r0.w, r0.y
mov r1.y, l(1.000000)
movc r0.xy, r0.xxxx, r1.xyxx, r1.xzxx
mul o4.xy, r0.yyyy, v2.xyxx
mul r1.xyzw, cb1[9].xyzw, -cb1[24].yyyy
mad r1.xyzw, -cb1[24].xxxx, cb1[8].xyzw, r1.xyzw
mad r1.xyzw, -cb1[24].zzzz, cb1[10].xyzw, r1.xyzw
add r1.xyzw, r1.xyzw, cb1[11].xyzw
mul r2.xyzw, v0.yyyy, cb1[9].xyzw
mad r2.xyzw, v0.xxxx, cb1[8].xyzw, r2.xyzw
mad r2.xyzw, v0.zzzz, cb1[10].xyzw, r2.xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
add r2.xyz, v0.xyzx, -cb1[24].xyzx
lt r3.x, l(0.000000), cb1[32].w
if_nz r3.x
  dp3 r3.x, r2.xyzx, r2.xyzx
  rsq r3.y, r3.x
  mul r3.yzw, r2.xxyz, r3.yyyy
  sqrt r3.x, r3.x
  dp3 r3.y, cb1[38].xyzx, -r3.yzwy
  mad r3.z, -cb1[31].w, cb1[31].w, l(1.000000)
  mad r3.w, cb1[31].w, -r3.y, l(1.000000)
  mul r3.w, r3.w, r3.w
  mul r3.w, r3.w, l(12.566371)
  div r3.z, r3.z, r3.w
  add r3.w, r3.x, -cb1[37].z
  mul_sat r3.w, r3.w, cb1[37].w
  mul r3.z, r3.w, r3.z
  mad r3.x, r3.x, cb1[35].x, cb1[34].w
  mul r3.x, r3.x, cb1[35].z
  lt r3.w, l(0.010000), |r2.z|
  mul r4.x, r2.z, cb1[35].y
  mul r4.y, r4.x, l(-1.442695)
  exp r4.y, r4.y
  add r4.y, -r4.y, l(1.000000)
  div r4.x, r4.y, r4.x
  mul r4.x, r3.x, r4.x
  movc r3.x, r3.w, r4.x, r3.x
  mul r4.xyz, r3.xxxx, cb1[33].xyzx
  exp r4.xyz, r4.xyzx
  mad r4.xyz, r4.xyzx, cb1[32].wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb1[32].wwww
  mov_sat r3.y, r3.y
  mad r3.x, r3.y, r3.y, l(1.000000)
  mad r3.x, r3.x, l(0.05968310), l(-1.000000)
  mad r3.x, cb1[35].w, r3.x, l(1.000000)
  mul r3.yzw, r3.zzzz, cb1[32].xxyz
  mad r3.xyz, r3.xxxx, cb1[31].xyzx, r3.yzwy
  mul r3.xyz, r3.xyzx, cb1[33].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul o11.xyz, r3.xyzx, r5.xyzx
  mov o10.xyz, r4.xyzx
  mov o3.xyzw, l(0,0,0,1.000000)
else 
  mul r3.x, r2.z, cb1[29].w
  mad r3.y, cb1[29].w, r2.z, cb1[29].x
  lt r3.z, |r3.x|, l(0.000100)
  min r3.w, r3.y, l(64.000000)
  mul r3.w, r3.w, l(1.442695)
  exp r3.w, r3.w
  mov_sat r4.x, cb1[30].x
  lt r4.y, r3.y, l(0.000000)
  add r3.y, r3.y, l(1.000000)
  movc r3.y, r4.y, r3.w, r3.y
  add r3.y, r3.y, -cb1[30].x
  movc r3.x, r3.z, l(1.000000), r3.x
  div r3.x, r3.y, r3.x
  movc r3.x, r3.z, r4.x, r3.x
  mul r3.x, r3.x, cb1[29].y
  dp3 r3.y, r2.xyzx, r2.xyzx
  sqrt r3.z, r3.y
  mad r3.x, r3.x, r3.z, cb1[29].z
  exp r3.x, r3.x
  min r3.x, r3.x, l(1.000000)
  rsq r3.y, r3.y
  mul r3.yzw, r2.xxyz, r3.yyyy
  dp3 r3.y, cb1[38].xyzx, r3.yzwy
  mad_sat r3.y, cb1[40].y, r3.y, cb1[40].x
  add r4.xyzw, cb1[28].xyzw, -cb1[39].xyzw
  mad r4.xyzw, r3.yyyy, r4.xyzw, cb1[39].xyzw
  add r3.x, -r3.x, l(1.000000)
  mad o3.w, -r3.x, r4.w, l(1.000000)
  mov o10.xyz, l(1.000000,1.000000,1.000000,0)
  mov o11.xyz, l(0,0,0,0)
  mov o3.xyz, r4.xyzx
endif 
max r0.z, cb0[18].w, l(0.000000)
mul r3.x, r2.y, cb1[5].z
mad r3.x, r2.x, cb1[4].z, r3.x
mad r3.x, r2.z, cb1[6].z, r3.x
mul r3.yzw, r2.yyyy, cb1[9].xxyw
mad r3.yzw, r2.xxxx, cb1[8].xxyw, r3.yyzw
mad r3.yzw, r2.zzzz, cb1[10].xxyw, r3.yyzw
add r3.yzw, r3.yyzw, cb1[11].xxyw
rcp r3.w, r3.w
mul r3.yz, r3.wwww, r3.yyzy
mad r3.yz, r3.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
mul r3.yz, r3.yyzy, cb1[44].xxyx
add r4.xy, cb1[44].xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
max r3.yz, r3.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
min r3.yz, r4.xxyx, r3.yyzy
mul r4.xyz, r2.yyyy, cb2[29].xyzx
mad r4.xyz, r2.xxxx, cb2[28].xyzx, r4.xyzx
mad r4.xyz, r2.zzzz, cb2[30].xyzx, r4.xyzx
add r4.xyz, r4.xyzx, cb2[31].xyzx
add r5.xy, r4.xyxx, -cb2[22].xyxx
mul r5.xy, r5.xyxx, cb2[22].zzzz
max r3.w, |r5.y|, |r5.x|
lt r3.w, l(1.000000), r3.w
if_nz r3.w
  mul r6.xyz, cb2[27].zxyz, l(128.000000, 0.500000, 0.500000, 0.000000)
  rcp r7.xz, r6.xxxx
  mov r7.y, -r7.z
  mad r6.xyz, r4.xyxx, r7.xyzx, r6.yzyy
  add r7.xyz, cb2[27].xyxx, l(-0.00781250, -0.00781250, -0.00781250, 0.000000)
  max r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r6.xyz, r7.xyzx, r6.xyzx
  mul r5.zw, r6.zzzy, cb2[32].xxxx
  round_ni r5.zw, r5.zzzw
  mul r3.w, r5.w, cb2[27].x
  mad r3.w, r3.w, cb2[32].x, r5.z
  ftou r3.w, r3.w
  iadd r3.w, r3.w, cb2[32].y
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.w, r3.w, l(0), t23.xxxx
  and r5.z, r4.w, l(0x40000000)
  ishl r5.w, r4.w, l(2)
  if_z r5.z
    and r5.z, r4.w, l(0x01ffffff)
    iadd r7.x, r3.w, r5.z
    ushr r3.w, r4.w, l(25)
    utof r3.w, r3.w
    mul r6.xyz, r3.wwww, r6.xyzx
    frc r6.xyz, r6.xyzx
    mul r6.xyz, r6.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
    ftou r6.xyz, r6.xyzx
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r7.z, r7.x, l(0), t23.xxxx
    ushr r8.xy, r6.zyzz, l(6, 6, 0, 0)
    and r3.w, r7.z, l(0xc0000000)
    iadd r4.w, r7.x, l(1)
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.w, r4.w, l(0), t23.xxxx
    movc r4.w, r8.y, r7.z, r4.w
    ushr r5.z, r4.w, l(13)
    movc r4.w, r8.x, r5.z, r4.w
    and r4.w, r4.w, l(8191)
    iadd r8.x, r4.w, r7.x
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.z, r8.x, l(0), t23.xxxx
    mov r7.y, l(0)
    mov r8.y, l(1)
    movc r8.xyz, r3.wwww, r7.xyzx, r8.xyzx
    movc r9.yz, r3.wwww, l(0,6,1,0), l(0,5,2,0)
    ushr r10.xy, r6.zyzz, r9.yyyy
    and r10.xy, r10.xyxx, l(1, 1, 0, 0)
    and r4.w, r8.z, l(0xc0000000)
    iadd r5.z, r8.x, l(1)
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.z, r5.z, l(0), t23.xxxx
    movc r5.z, r10.y, r8.z, r5.z
    ushr r6.w, r5.z, l(13)
    movc r5.z, r10.x, r6.w, r5.z
    and r5.z, r5.z, l(8191)
    iadd r9.x, r5.z, r8.x
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.w, r9.x, l(0), t23.xxxx
    movc r8.xyz, r4.wwww, r8.xyzx, r9.xzwx
    movc r7.xyz, r3.wwww, r7.xyzx, r8.xyzx
    and r3.w, r7.z, l(0xc0000000)
    if_z r3.w
      iadd r3.w, -r7.y, l(6)
      ushr r8.xy, r6.zyzz, r3.wwww
      or r3.w, r7.z, l(0x40000000)
      bfi r4.w, l(1), l(1), r8.y, l(0)
      bfi r4.w, l(1), l(0), r8.x, r4.w
      imul null, r4.w, r4.w, l(10)
      ushr r3.w, r3.w, r4.w
      and r3.w, r3.w, l(1023)
      iadd r8.x, r3.w, r7.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.w, r8.x, l(0), t23.xxxx
      iadd r8.yz, r7.yyyy, l(0, 1, 2, 0)
      iadd r3.w, -r8.y, l(6)
      ushr r7.yw, r6.zzzy, r3.wwww
      and r3.w, r8.w, l(0xc0000000)
      or r4.w, r8.w, l(0x40000000)
      bfi r5.z, l(1), l(1), r7.w, l(0)
      bfi r5.z, l(1), l(0), r7.y, r5.z
      imul null, r5.z, r5.z, l(10)
      ushr r4.w, r4.w, r5.z
      and r4.w, r4.w, l(1023)
      iadd r9.x, r4.w, r8.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.z, r9.x, l(0), t23.xxxx
      mov r9.y, r8.z
      movc r9.xyz, r3.wwww, r8.xywx, r9.xyzx
      iadd r4.w, -r9.y, l(6)
      ushr r7.yw, r6.zzzy, r4.wwww
      and r4.w, r9.z, l(0xc0000000)
      or r5.z, r9.z, l(0x40000000)
      bfi r6.w, l(1), l(1), r7.w, l(0)
      bfi r6.w, l(1), l(0), r7.y, r6.w
      imul null, r6.w, r6.w, l(10)
      ushr r5.z, r5.z, r6.w
      and r5.z, r5.z, l(1023)
      iadd r10.x, r5.z, r9.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.y, r10.x, l(0), t23.xxxx
      movc r7.yw, r4.wwww, r9.xxxz, r10.xxxy
      movc r7.xz, r3.wwww, r8.xxwx, r7.yywy
    endif 
    and r3.w, r7.z, l(0xc0000000)
    if_z r3.w
      ubfe r4.w, l(14), l(15), r7.z
      utof r4.w, r4.w
      mul r4.w, r4.w, cb2[27].w
      mul r4.w, r4.w, l(0.00006104)
      and r7.yw, r7.zzzz, l(0, 0x00007fff, 0, 0x20000000)
      utof r5.z, r7.y
      mul r5.z, r5.z, cb2[27].w
      mul r5.z, r5.z, l(0.00003052)
      and r6.w, r6.y, l(3)
      iadd r6.w, r6.w, r7.x
      iadd r6.w, r6.w, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.w, r6.w, l(0), t23.xxxx
      bfi r8.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r6.xyzx, l(0, 0, 0, 0)
      ushr r6.x, r6.w, r8.x
      and r6.x, r6.x, l(255)
      utof r6.x, r6.x
      mul r6.x, r5.z, r6.x
      mad r6.x, r6.x, l(0.00392157), r4.w
      iadd r6.y, r8.y, l(1)
      ubfe r6.z, l(1), l(1), r6.z
      iadd r6.y, r6.z, r6.y
      iadd r6.y, r6.y, r7.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.y, r6.y, l(0), t23.xxxx
      ushr r6.y, r6.y, r8.z
      and r6.y, r6.y, l(0x0000ffff)
      utof r6.y, r6.y
      mul r5.z, r5.z, r6.y
      mad r4.w, r5.z, l(0.00001526), r4.w
      movc r5.w, r7.w, r6.x, r4.w
    else 
      and r4.w, r7.z, l(0x80000000)
      iadd r5.z, r7.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.z, r5.z, l(0), t23.xxxx
      movc r4.w, r4.w, r5.z, l(0)
      ishl r5.z, r7.z, l(2)
      ushr r6.x, r4.w, l(16)
      f16tof32 r6.x, r6.x
      and r4.w, r4.w, l(0x0000ffff)
      f16tof32 r4.w, r4.w
      mad r4.x, r4.x, r6.x, r5.z
      mad r4.x, r4.y, r4.w, r4.x
      movc r5.w, r3.w, r4.x, r5.w
    endif 
  endif 
  mad r3.w, -cb2[27].z, l(2.000000), r4.z
  lt r3.w, r5.w, r3.w
  movc r3.w, r3.w, l(0), l(1.000000)
else 
  mad r5.xy, r5.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  add r4.x, r4.z, -cb2[17].w
  mad r4.x, -r4.x, l(0.00006104), l(1.000000)
  iadd r4.y, cb2[26].y, l(2)
  utof r5.z, r4.y
  sample_c_lz_aoffimmi_indexable(1,1,0)(texture2darray)(float,float,float,float) r4.y, r5.xyzx, t13.xxxx, s13, r4.x
  sample_c_lz_aoffimmi_indexable(1,-1,0)(texture2darray)(float,float,float,float) r4.z, r5.xyzx, t13.xxxx, s13, r4.x
  add r4.y, r4.z, r4.y
  sample_c_lz_aoffimmi_indexable(-1,1,0)(texture2darray)(float,float,float,float) r4.z, r5.xyzx, t13.xxxx, s13, r4.x
  add r4.y, r4.z, r4.y
  sample_c_lz_aoffimmi_indexable(-1,-1,0)(texture2darray)(float,float,float,float) r4.x, r5.xyzx, t13.xxxx, s13, r4.x
  add r4.x, r4.x, r4.y
  sample_l_indexable(texture2darray)(float,float,float,float) r4.y, r5.xyzx, t31.yxzw, s0, l(0.000000)
  mad r4.x, r4.x, l(0.250000), r4.y
  add_sat r3.w, r4.x, l(-1.000000)
endif 
mul r4.xyz, r3.wwww, cb2[18].xyzx
mul r4.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
mul r3.x, r3.x, l(0.00781250)
max r3.x, r3.x, l(0.000000)
min r3.x, r3.x, l(15.000000)
ftou r3.xyz, r3.xyzx
ushr r5.xy, r3.yzyy, l(6, 6, 0, 0)
ishl r5.z, r3.x, l(4)
mov r3.xy, l(0,0,0,0)
mov r6.w, l(0)
mov r2.w, l(1.000000)
mov r7.z, l(1.000000)
mov r8.xyz, r4.xyzx
mov r3.w, l(0)
loop 
  uge r4.w, r3.w, cb2[0].x
  breakc_nz r4.w
  ushr r3.z, r3.w, l(5)
  iadd r6.xyz, r3.xyzx, r5.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r3.z, r6.xyzw, t6.yzxw
  mov r9.xyz, r8.xyzx
  mov r9.w, r3.z
  loop 
    breakc_z r9.w
    firstbit_lo r4.w, r9.w
    ishl r5.w, l(1), r4.w
    and r6.x, r5.w, r9.w
    if_nz r6.x
      xor r9.w, r5.w, r9.w
      iadd r4.w, r3.w, r4.w
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.xyzw, r4.w, l(0), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.yz, r4.w, l(16), t12.xxyx
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r4.w, l(28), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r6.xy, r4.w, l(44), t12.xyxx
      ubfe r5.w, l(3), l(24), r12.x
      switch r5.w
        case l(2)
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r4.w, l(116), t12.xyzw
        dp4 r5.w, r14.xyzw, r2.xyzw
        lt r6.z, r5.w, l(1.000000)
        if_nz r6.z
          mov r13.xyz, r9.xyzx
          break 
        endif 
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r4.w, l(68), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r4.w, l(84), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r16.xyzw, r4.w, l(172), t12.yzwx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r17.xyzw, r4.w, l(188), t12.wxyz
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r18.xyzw, r4.w, l(204), t12.xyzw
        add r19.xyz, -r2.xyzx, r10.xyzx
        mul r6.z, r6.y, r6.y
        dp3 r7.w, r19.xyzx, r19.xyzx
        div r6.z, r6.z, r7.w
        min r6.z, r6.z, l(1.000000)
        mad_sat r7.w, r5.w, r12.y, r12.z
        mad_sat r8.w, r5.w, r12.w, r6.x
        mul r12.x, r7.w, r7.w
        mad r7.w, r7.w, l(-2.000000), l(3.000000)
        mul r7.w, r7.w, r12.x
        mul r6.z, r6.z, r7.w
        mul r7.w, r8.w, r8.w
        mad r8.w, r8.w, l(-2.000000), l(3.000000)
        mul r7.w, r7.w, r8.w
        mul r6.z, r6.z, r7.w
        dp4 r14.x, r14.xyzw, r2.xyzw
        dp4 r14.y, r15.xyzw, r2.xyzw
        div r7.xy, r14.xyxx, r5.wwww
        lt r5.w, r16.w, l(0.00048828)
        if_nz r5.w
          mov r17.y, r18.x
          mad_sat r14.xy, |r7.xyxx|, r17.zwzz, r17.xyxx
          mul r14.zw, r14.xxxy, r14.xxxy
          mad r14.xy, r14.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r14.xy, r14.xyxx, r14.zwzz
          mul r5.w, r14.y, r14.x
          mul r5.w, r5.w, r6.z
        else 
          mov r16.w, r17.y
          mul_sat r14.xyzw, |r7.yyxx|, r16.xyzw
          log r14.xyzw, r14.xyzw
          mul r14.xyzw, r14.xyzw, r17.xxxx
          exp r14.xyzw, r14.xyzw
          add r14.xy, r14.zwzz, r14.xyxx
          log r14.xy, r14.xyxx
          mul r14.xy, r14.xyxx, r18.xxxx
          exp r14.xy, r14.xyxx
          mul r7.w, r14.x, r17.z
          mad r8.w, r17.w, r14.y, l(-1.000000)
          mad r7.w, r17.w, r14.y, -r7.w
          div_sat r7.w, r8.w, r7.w
          mul r8.w, r7.w, r7.w
          mad r7.w, r7.w, l(-2.000000), l(3.000000)
          mul r7.w, r7.w, r8.w
          mul r5.w, r6.z, r7.w
        endif 
        ge r6.z, l(0.000000), r5.w
        if_nz r6.z
          mov r13.xyz, r9.xyzx
          break 
        endif 
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r6.z, r4.w, l(236), t12.xxxx
        and r6.z, r6.z, l(255)
        if_nz r6.z
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyz, r4.w, l(220), t12.xyzx
          dp3 r4.w, r18.yzwy, r7.xyzx
          dp3 r7.x, r14.xyzx, r7.xyzx
          frc r14.x, r4.w
          frc r14.y, r7.x
          iadd r4.w, r6.z, l(-1)
          utof r14.z, r4.w
          sample_l_indexable(texture2darray)(float,float,float,float) r7.xyw, r14.xyzx, t20.xywz, s2, l(0.000000)
          mov r11.w, r10.w
          mul r11.xyz, r7.xywx, r11.wyzw
        else 
          mov r11.x, r10.w
        endif 
        mul r4.w, r5.w, l(0.250000)
        mul r7.xyw, r11.xyxz, r4.wwww
        dp3 r4.w, r7.xywx, l(0.299000, 0.587000, 0.114000, 0.000000)
        max r4.w, r4.w, l(0.000001)
        min r5.w, r4.w, cb1[85].x
        div r4.w, r5.w, r4.w
        mad r13.xyz, r7.xywx, r4.wwww, r9.xyzx
        break 
        case l(4)
        add r7.xyw, -r2.xyxz, r10.xyxz
        dp3 r4.w, r7.xywx, r7.xywx
        sqrt r5.w, r4.w
        mul r6.y, r6.y, r6.y
        div r4.w, r6.y, r4.w
        min r4.w, r4.w, l(1.000000)
        mad_sat r6.y, r5.w, r12.y, r12.z
        mad_sat r5.w, r5.w, r12.w, r6.x
        mul r6.x, r6.y, r6.y
        mad r6.y, r6.y, l(-2.000000), l(3.000000)
        mul r6.x, r6.y, r6.x
        mul r4.w, r4.w, r6.x
        mul r6.x, r5.w, r5.w
        mad r5.w, r5.w, l(-2.000000), l(3.000000)
        mul r5.w, r5.w, r6.x
        mul r4.w, r4.w, r5.w
        ge r5.w, l(0.000000), r4.w
        if_nz r5.w
          mov r13.xyz, r9.xyzx
          break 
        endif 
        mul r4.w, r4.w, l(0.250000)
        mov r11.w, r10.w
        mul r6.xyz, r4.wwww, r11.wyzw
        dp3 r4.w, r6.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
        max r4.w, r4.w, l(0.000001)
        min r5.w, r4.w, cb1[85].x
        div r4.w, r5.w, r4.w
        mad r13.xyz, r6.xyzx, r4.wwww, r9.xyzx
        break 
        default 
        mov r13.xyz, r9.xyzx
        break 
      endswitch 
      mov r9.xyz, r13.xyzx
    endif 
  endloop 
  mov r8.xyz, r9.xyzx
  iadd r3.w, r3.w, l(32)
endloop 
iadd r2.w, cb2[0].y, -cb2[58].x
and r3.x, r2.w, l(-32)
mov r4.xy, l(0,0,0,0)
mov r6.w, l(0)
mov r7.yz, l(0,0,1.000000,0)
mov r9.x, l(1.000000)
mov r3.yzw, l(0,0,0,0)
mov r4.w, l(0)
mov r5.w, r3.x
loop 
  uge r7.w, r5.w, cb2[0].y
  breakc_nz r7.w
  ushr r4.z, r5.w, l(5)
  iadd r6.xyz, r4.xyzx, r5.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r4.z, r6.xyzw, t7.yzxw
  mov r6.xyz, r3.yzwy
  mov r7.w, r4.w
  mov r8.w, r4.z
  loop 
    breakc_z r8.w
    firstbit_lo r9.z, r8.w
    ishl r9.w, l(1), r9.z
    and r10.x, r8.w, r9.w
    if_nz r10.x
      xor r9.w, r8.w, r9.w
      iadd r9.z, r5.w, r9.z
      uge r10.x, r9.z, cb2[0].y
      if_nz r10.x
        break 
      endif 
      ult r10.x, r9.z, r2.w
      if_nz r10.x
        mov r8.w, r9.w
        continue 
      endif 
      ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r10.xyzw, r9.z, l(0), t15.wxyz
      ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r11.xyzw, r9.z, l(88), t15.zxyw
      ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r12.x, r9.z, l(120), t15.xxxx
      add r12.yzw, r2.xxyz, -r10.yyzw
      and r10.w, r12.x, l(0x0000ffff)
      ubfe r12.x, l(6), l(25), r12.x
      ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r13.xyzw, r10.w, l(0), t16.xyzw
      ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r14.xyzw, r10.w, l(16), t16.xyzw
      ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r15.xyzw, r10.w, l(32), t16.xyzw
      ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r16.xyzw, r10.w, l(48), t16.xyzw
      ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r17.xyzw, r10.w, l(64), t16.xyzw
      ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r18.xyzw, r10.w, l(80), t16.xyzw
      dp3 r13.x, r13.xyzx, r12.yzwy
      add_sat r13.x, r13.w, r13.x
      dp3 r13.y, r14.xyzx, r12.yzwy
      add_sat r13.y, r14.w, r13.y
      mul r13.x, r13.y, r13.x
      dp3 r13.y, r15.xyzx, r12.yzwy
      add_sat r13.y, r15.w, r13.y
      mul r13.x, r13.y, r13.x
      dp3 r13.y, r16.xyzx, r12.yzwy
      add_sat r13.y, r16.w, r13.y
      mul r13.x, r13.y, r13.x
      dp3 r13.y, r17.xyzx, r12.yzwy
      add_sat r13.y, r17.w, r13.y
      mul r13.x, r13.y, r13.x
      dp3 r13.y, r18.xyzx, r12.yzwy
      add_sat r13.y, r18.w, r13.y
      mul r7.x, r13.y, r13.x
      and r13.x, r11.x, l(1)
      movc r13.xy, r13.xxxx, r7.xyxx, r7.zxzz
      mov r7.x, r11.x
      mov r14.xy, r13.xyxx
      mov r13.z, l(1)
      loop 
        ige r13.w, r13.z, r12.x
        breakc_nz r13.w
        iadd r13.w, r10.w, r13.z
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r15.xyzw, r13.w, l(0), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r16.xyzw, r13.w, l(16), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r17.xyzw, r13.w, l(32), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r18.xyzw, r13.w, l(48), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r19.xyzw, r13.w, l(64), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r20.xyzw, r13.w, l(80), t16.xyzw
        dp3 r13.w, r15.xyzx, r12.yzwy
        add_sat r13.w, r15.w, r13.w
        mul r13.w, r13.w, r14.x
        dp3 r14.z, r16.xyzx, r12.yzwy
        add_sat r14.z, r16.w, r14.z
        mul r13.w, r13.w, r14.z
        dp3 r14.z, r17.xyzx, r12.yzwy
        add_sat r14.z, r17.w, r14.z
        mul r13.w, r13.w, r14.z
        dp3 r14.z, r18.xyzx, r12.yzwy
        add_sat r14.z, r18.w, r14.z
        mul r13.w, r13.w, r14.z
        dp3 r14.z, r19.xyzx, r12.yzwy
        add_sat r14.z, r19.w, r14.z
        mul r13.w, r13.w, r14.z
        dp3 r14.z, r20.xyzx, r12.yzwy
        add_sat r14.z, r20.w, r14.z
        mul r14.x, r13.w, r14.z
        ushr r14.w, r7.x, l(2)
        ubfe r15.x, l(1), l(2), r7.x
        and r15.y, r14.w, l(2)
        max r15.z, r14.x, r14.y
        mad r13.w, -r13.w, r14.z, l(1.000000)
        mul r13.w, r13.w, r14.y
        movc r9.y, r15.y, r13.w, r15.z
        movc r14.xy, r15.xxxx, r14.xyxx, r9.xyxx
        iadd r13.z, r13.z, l(1)
        mov r7.x, r14.w
      endloop 
      mov_sat r14.y, r14.y
      mul r7.x, r11.w, r14.y
      lt r9.y, l(0.000000), r7.x
      if_nz r9.y
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r13.xyzw, r9.z, l(16), t15.xyzw
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r15.xyzw, r9.z, l(32), t15.yxwz
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r14.xzw, r9.z, l(48), t15.xxyz
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r16.xyzw, r9.z, l(72), t15.xyzw
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r17.xyzw, r9.z, l(104), t15.xyzw
        mov r10.y, r13.z
        mov r10.z, r15.x
        dp3 r10.x, r12.yzwy, r10.xyzx
        mov r18.xy, r13.xwxx
        mov r18.z, r15.w
        dp3 r10.y, r12.yzwy, r18.xyzx
        mov r15.x, r13.y
        dp3 r10.z, r12.yzwy, r15.xyzx
        mad_sat r10.xyz, r10.xyzx, r14.xzwx, l(0.500000, 0.500000, 0.500000, 0.000000)
        mov r11.x, r16.w
        mad r10.xyz, r10.xyzx, r16.xyzx, r11.xyzx
        add r11.xyz, r10.xyzx, l(0.000000, 0.000000, 0.500000, 0.000000)
        sample_l_indexable(texture3d)(float,float,float,float) r12.xyz, r10.xyzx, t17.xyzw, s4, l(0.000000)
        sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r10.xyzx, t18.xyzw, s4, l(0.000000)
        add r12.xyz, r12.xyzx, r13.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r10.xyz, r10.xyzx, t19.xyzw, s4, l(0.000000)
        add r10.xyz, r10.xyzx, r12.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r12.xyz, r11.xyzx, t17.xyzw, s4, l(0.000000)
        add r10.xyz, r10.xyzx, r12.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r12.xyz, r11.xyzx, t18.xyzw, s4, l(0.000000)
        add r10.xyz, r10.xyzx, r12.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r11.xyz, r11.xyzx, t19.xyzw, s4, l(0.000000)
        add r10.xyz, r10.xyzx, r11.xyzx
        mul r7.x, r7.x, r17.w
        mul r7.x, r7.x, l(0.16666667)
        mul r10.xyz, r7.xxxx, r10.xyzx
        mad r6.xyz, r10.xyzx, r17.xyzx, r6.xyzx
        mad r7.w, r14.y, r11.w, r7.w
      endif 
      mov r8.w, r9.w
    endif 
  endloop 
  mov r3.yzw, r6.xxyz
  mov r4.w, r7.w
  iadd r5.w, r5.w, l(32)
endloop 
lt r3.x, r4.w, l(1.000000)
if_nz r3.x
  mov r4.xy, l(0,0,0,0)
  mov r6.w, l(0)
  mov r7.yz, l(0,0,1.000000,0)
  mov r9.x, l(1.000000)
  mov r10.xyz, r3.yzwy
  mov r3.x, r4.w
  mov r5.w, l(0)
  loop 
    uge r7.w, r5.w, r2.w
    breakc_nz r7.w
    ushr r4.z, r5.w, l(5)
    iadd r6.xyz, r4.xyzx, r5.xyzx
    ld_indexable(texture2darray)(uint,uint,uint,uint) r4.z, r6.xyzw, t7.yzxw
    mov r6.xyz, r10.xyzx
    mov r7.w, r3.x
    mov r8.w, r4.z
    loop 
      breakc_z r8.w
      firstbit_lo r9.z, r8.w
      ishl r9.w, l(1), r9.z
      and r10.w, r8.w, r9.w
      if_nz r10.w
        xor r8.w, r8.w, r9.w
        iadd r9.z, r5.w, r9.z
        uge r9.w, r9.z, r2.w
        if_nz r9.w
          break 
        endif 
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r11.xyzw, r9.z, l(0), t15.wxyz
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r12.xyzw, r9.z, l(88), t15.zxyw
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r9.w, r9.z, l(120), t15.xxxx
        add r13.xyz, r2.xyzx, -r11.yzwy
        and r10.w, r9.w, l(0x0000ffff)
        ubfe r9.w, l(6), l(25), r9.w
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r14.xyzw, r10.w, l(0), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r15.xyzw, r10.w, l(16), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r16.xyzw, r10.w, l(32), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r17.xyzw, r10.w, l(48), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r18.xyzw, r10.w, l(64), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r19.xyzw, r10.w, l(80), t16.xyzw
        dp3 r11.w, r14.xyzx, r13.xyzx
        add_sat r11.w, r14.w, r11.w
        dp3 r13.w, r15.xyzx, r13.xyzx
        add_sat r13.w, r15.w, r13.w
        mul r11.w, r11.w, r13.w
        dp3 r13.w, r16.xyzx, r13.xyzx
        add_sat r13.w, r16.w, r13.w
        mul r11.w, r11.w, r13.w
        dp3 r13.w, r17.xyzx, r13.xyzx
        add_sat r13.w, r17.w, r13.w
        mul r11.w, r11.w, r13.w
        dp3 r13.w, r18.xyzx, r13.xyzx
        add_sat r13.w, r18.w, r13.w
        mul r11.w, r11.w, r13.w
        dp3 r13.w, r19.xyzx, r13.xyzx
        add_sat r13.w, r19.w, r13.w
        mul r7.x, r11.w, r13.w
        and r11.w, r12.x, l(1)
        movc r14.xy, r11.wwww, r7.xyxx, r7.zxzz
        mov r7.x, r12.x
        mov r15.xy, r14.xyxx
        mov r11.w, l(1)
        loop 
          ige r13.w, r11.w, r9.w
          breakc_nz r13.w
          iadd r13.w, r10.w, r11.w
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r16.xyzw, r13.w, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r17.xyzw, r13.w, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r18.xyzw, r13.w, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r19.xyzw, r13.w, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r20.xyzw, r13.w, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r21.xyzw, r13.w, l(80), t16.xyzw
          dp3 r13.w, r16.xyzx, r13.xyzx
          add_sat r13.w, r16.w, r13.w
          mul r13.w, r13.w, r15.x
          dp3 r14.z, r17.xyzx, r13.xyzx
          add_sat r14.z, r17.w, r14.z
          mul r13.w, r13.w, r14.z
          dp3 r14.z, r18.xyzx, r13.xyzx
          add_sat r14.z, r18.w, r14.z
          mul r13.w, r13.w, r14.z
          dp3 r14.z, r19.xyzx, r13.xyzx
          add_sat r14.z, r19.w, r14.z
          mul r13.w, r13.w, r14.z
          dp3 r14.z, r20.xyzx, r13.xyzx
          add_sat r14.z, r20.w, r14.z
          mul r13.w, r13.w, r14.z
          dp3 r14.z, r21.xyzx, r13.xyzx
          add_sat r14.z, r21.w, r14.z
          mul r15.x, r13.w, r14.z
          ushr r14.w, r7.x, l(2)
          ubfe r15.z, l(1), l(2), r7.x
          and r15.w, r14.w, l(2)
          max r16.x, r15.x, r15.y
          mad r13.w, -r13.w, r14.z, l(1.000000)
          mul r13.w, r13.w, r15.y
          movc r9.y, r15.w, r13.w, r16.x
          movc r15.xy, r15.zzzz, r15.xyxx, r9.xyxx
          iadd r11.w, r11.w, l(1)
          mov r7.x, r14.w
        endloop 
        add_sat r7.x, -r4.w, r15.y
        mul r9.y, r12.w, r7.x
        lt r9.w, l(0.000000), r9.y
        if_nz r9.w
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r14.xyzw, r9.z, l(16), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r16.xyzw, r9.z, l(32), t15.yxwz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r15.xzw, r9.z, l(48), t15.xxyz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r17.xyzw, r9.z, l(72), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r18.xyzw, r9.z, l(104), t15.xyzw
          mov r11.y, r14.z
          mov r11.z, r16.x
          dp3 r11.x, r13.xyzx, r11.xyzx
          mov r19.xy, r14.xwxx
          mov r19.z, r16.w
          dp3 r11.y, r13.xyzx, r19.xyzx
          mov r16.x, r14.y
          dp3 r11.z, r13.xyzx, r16.xyzx
          mad_sat r11.xyz, r11.xyzx, r15.xzwx, l(0.500000, 0.500000, 0.500000, 0.000000)
          mov r12.x, r17.w
          mad r11.xyz, r11.xyzx, r17.xyzx, r12.xyzx
          add r12.xyz, r11.xyzx, l(0.000000, 0.000000, 0.500000, 0.000000)
          sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r11.xyzx, t17.xyzw, s4, l(0.000000)
          sample_l_indexable(texture3d)(float,float,float,float) r14.xyz, r11.xyzx, t18.xyzw, s4, l(0.000000)
          add r13.xyz, r13.xyzx, r14.xyzx
          sample_l_indexable(texture3d)(float,float,float,float) r11.xyz, r11.xyzx, t19.xyzw, s4, l(0.000000)
          add r11.xyz, r11.xyzx, r13.xyzx
          sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r12.xyzx, t17.xyzw, s4, l(0.000000)
          add r11.xyz, r11.xyzx, r13.xyzx
          sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r12.xyzx, t18.xyzw, s4, l(0.000000)
          add r11.xyz, r11.xyzx, r13.xyzx
          sample_l_indexable(texture3d)(float,float,float,float) r12.xyz, r12.xyzx, t19.xyzw, s4, l(0.000000)
          add r11.xyz, r11.xyzx, r12.xyzx
          mul r9.y, r9.y, r18.w
          mul r9.y, r9.y, l(0.16666667)
          mul r9.yzw, r9.yyyy, r11.xxyz
          mad r6.xyz, r9.yzwy, r18.xyzx, r6.xyzx
          mad r7.w, r7.x, r12.w, r7.w
        endif 
      endif 
    endloop 
    mov r10.xyz, r6.xyzx
    mov r3.x, r7.w
    iadd r5.w, r5.w, l(32)
  endloop 
  mov r3.yzw, r10.xxyz
  mov r4.w, r3.x
endif 
max r2.w, r4.w, l(0.000100)
rcp r2.w, r2.w
mov_sat r4.w, r4.w
mul r4.xyz, r2.wwww, r3.yzwy
ne r3.x, l(0.000000, 0.000000, 0.000000, 0.000000), r4.w
mad r3.yzw, r3.yyzw, r2.wwww, r8.xxyz
mad r2.w, -r4.w, l(1.010101), l(1.000000)
mul r5.xyz, cb2[19].xxxx, cb2[19].yzwy
mad r4.xyz, r5.xyzx, r2.wwww, r4.xyzx
add r4.xyz, r4.xyzx, r8.xyzx
movc r3.xyz, r3.xxxx, r3.yzwy, r4.xyzx
mul o1.xyz, r3.xyzx, v1.xyzx
max r2.w, r0.z, l(0.100000)
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
ge r3.x, l(1.000000), r2.w
mul_sat r2.w, r1.w, r2.w
mul r2.w, r2.w, v1.w
movc r2.w, r3.x, r2.w, v1.w
mul r3.xy, v0.yyyy, cb2[45].xyxx
mad r3.xy, v0.xxxx, cb2[44].xyxx, r3.xyxx
mad r3.xy, v0.zzzz, cb2[46].xyxx, r3.xyxx
add r3.xy, r3.xyxx, cb2[47].xyxx
mul r4.xyz, cb2[43].zxyz, l(128.000000, 0.500000, 0.500000, 0.000000)
rcp r5.xz, r4.xxxx
mov r5.y, -r5.z
mad r4.xyz, r3.xyxx, r5.xyzx, r4.yzyy
add r5.xyz, cb2[43].xyxx, l(-0.00781250, -0.00781250, -0.00781250, 0.000000)
max r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r4.xyz, r5.xyzx, r4.xyzx
round_ni r5.xy, r4.zyzz
mad r3.w, r5.y, cb2[43].x, r5.x
ftou r3.w, r3.w
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.w, r3.w, l(0), t0.xxxx
and r5.x, r4.w, l(0x40000000)
ishl r3.z, r4.w, l(2)
if_z r5.x
  and r5.x, r4.w, l(0x01ffffff)
  iadd r5.x, r3.w, r5.x
  ushr r3.w, r4.w, l(25)
  utof r3.w, r3.w
  mul r4.xyz, r3.wwww, r4.xyzx
  frc r4.xyz, r4.xyzx
  mul r4.xyz, r4.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
  ftou r4.xyz, r4.xyzx
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.z, r5.x, l(0), t0.xxxx
  ushr r6.xy, r4.zyzz, l(6, 6, 0, 0)
  and r3.w, r5.z, l(0xc0000000)
  iadd r4.w, r5.x, l(1)
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.w, r4.w, l(0), t0.xxxx
  movc r4.w, r6.y, r5.z, r4.w
  ushr r5.w, r4.w, l(13)
  movc r4.w, r6.x, r5.w, r4.w
  and r4.w, r4.w, l(8191)
  iadd r6.x, r4.w, r5.x
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.z, r6.x, l(0), t0.xxxx
  mov r5.y, l(0)
  mov r6.y, l(1)
  movc r6.xyz, r3.wwww, r5.xyzx, r6.xyzx
  movc r7.yz, r3.wwww, l(0,6,1,0), l(0,5,2,0)
  ushr r8.xy, r4.zyzz, r7.yyyy
  and r8.xy, r8.xyxx, l(1, 1, 0, 0)
  and r4.w, r6.z, l(0xc0000000)
  iadd r5.w, r6.x, l(1)
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.w, r5.w, l(0), t0.xxxx
  movc r5.w, r8.y, r6.z, r5.w
  ushr r6.w, r5.w, l(13)
  movc r5.w, r8.x, r6.w, r5.w
  and r5.w, r5.w, l(8191)
  iadd r7.x, r5.w, r6.x
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r7.w, r7.x, l(0), t0.xxxx
  movc r6.xyz, r4.wwww, r6.xyzx, r7.xzwx
  movc r5.xyz, r3.wwww, r5.xyzx, r6.xyzx
  and r3.w, r5.z, l(0xc0000000)
  if_z r3.w
    iadd r3.w, -r5.y, l(6)
    ushr r6.xy, r4.zyzz, r3.wwww
    or r3.w, r5.z, l(0x40000000)
    bfi r4.w, l(1), l(1), r6.y, l(0)
    bfi r4.w, l(1), l(0), r6.x, r4.w
    imul null, r4.w, r4.w, l(10)
    ushr r3.w, r3.w, r4.w
    and r3.w, r3.w, l(1023)
    iadd r6.x, r3.w, r5.x
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.w, r6.x, l(0), t0.xxxx
    iadd r6.yz, r5.yyyy, l(0, 1, 2, 0)
    iadd r3.w, -r6.y, l(6)
    ushr r5.yw, r4.zzzy, r3.wwww
    and r3.w, r6.w, l(0xc0000000)
    or r4.w, r6.w, l(0x40000000)
    bfi r5.w, l(1), l(1), r5.w, l(0)
    bfi r5.y, l(1), l(0), r5.y, r5.w
    imul null, r5.y, r5.y, l(10)
    ushr r4.w, r4.w, r5.y
    and r4.w, r4.w, l(1023)
    iadd r7.x, r4.w, r6.x
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r7.z, r7.x, l(0), t0.xxxx
    mov r7.y, r6.z
    movc r7.xyz, r3.wwww, r6.xywx, r7.xyzx
    iadd r4.w, -r7.y, l(6)
    ushr r5.yw, r4.zzzy, r4.wwww
    and r4.w, r7.z, l(0xc0000000)
    or r6.y, r7.z, l(0x40000000)
    bfi r5.w, l(1), l(1), r5.w, l(0)
    bfi r5.y, l(1), l(0), r5.y, r5.w
    imul null, r5.y, r5.y, l(10)
    ushr r5.y, r6.y, r5.y
    and r5.y, r5.y, l(1023)
    iadd r8.x, r5.y, r7.x
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.y, r8.x, l(0), t0.xxxx
    movc r5.yw, r4.wwww, r7.xxxz, r8.xxxy
    movc r5.xz, r3.wwww, r6.xxwx, r5.yywy
  endif 
  and r3.w, r5.z, l(0xc0000000)
  if_z r3.w
    ubfe r4.w, l(14), l(15), r5.z
    utof r4.w, r4.w
    mul r4.w, r4.w, cb2[43].w
    mul r4.w, r4.w, l(0.00006104)
    and r5.yw, r5.zzzz, l(0, 0x00007fff, 0, 0x20000000)
    utof r5.y, r5.y
    mul r5.y, r5.y, cb2[43].w
    mul r5.y, r5.y, l(0.00003052)
    and r6.x, r4.y, l(3)
    iadd r6.x, r5.x, r6.x
    iadd r6.x, r6.x, l(1)
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.x, r6.x, l(0), t0.xxxx
    bfi r6.yzw, l(0, 2, 2, 1), l(0, 3, 1, 4), r4.xxyz, l(0, 0, 0, 0)
    ushr r4.x, r6.x, r6.y
    and r4.x, r4.x, l(255)
    utof r4.x, r4.x
    mul r4.x, r5.y, r4.x
    mad r4.x, r4.x, l(0.00392157), r4.w
    iadd r4.y, r6.z, l(1)
    ubfe r4.z, l(1), l(1), r4.z
    iadd r4.y, r4.z, r4.y
    iadd r4.y, r4.y, r5.x
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.y, r4.y, l(0), t0.xxxx
    ushr r4.y, r4.y, r6.w
    and r4.y, r4.y, l(0x0000ffff)
    utof r4.y, r4.y
    mul r4.y, r5.y, r4.y
    mad r4.y, r4.y, l(0.00001526), r4.w
    movc r3.z, r5.w, r4.x, r4.y
  else 
    and r4.x, r5.z, l(0x80000000)
    iadd r4.y, r5.x, l(1)
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.y, r4.y, l(0), t0.xxxx
    movc r4.x, r4.x, r4.y, l(0)
    ishl r4.y, r5.z, l(2)
    ushr r4.z, r4.x, l(16)
    and r4.x, r4.x, l(0x0000ffff)
    f16tof32 r4.xz, r4.xxzx
    mad r4.y, r3.x, r4.z, r4.y
    mad r4.x, r3.y, r4.x, r4.y
    movc r3.z, r3.w, r4.x, r3.z
  endif 
endif 
dp3 r3.x, r3.xyzx, cb2[49].xyzx
add r3.x, r3.x, cb2[49].w
add_sat r3.x, -r3.x, v0.z
mul o1.w, r2.w, r3.x
mov o0.xyzw, r1.xyzw
mov o5.xyz, r2.xyzx
mov r0.w, l(0)
mov o6.xyzw, r0.wxzw
mov o8.zw, v2.xxxy
mov o2.xyz, v1.xyzx
mov o4.z, r0.y
mov o9.x, l(0)
ret 
// Approximately 928 instruction slots used
