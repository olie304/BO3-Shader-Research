//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:38:29 2021
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float3 colorTint;                  // Offset:  160 Size:    12
//   float baseNormalHeight;            // Offset:  172 Size:     4
//   float2 glossRange;                 // Offset:  176 Size:     8
//   bool useUVOffsets;                 // Offset:  184 Size:     4 [unused]
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16 [unused]
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16
//   float4 debugNormalOverride;        // Offset:  960 Size:    16
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16
//   float4 debugGlossOverride;         // Offset:  992 Size:    16
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
// Resource bind info for refProbeConstants
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   224
//
// }
//
// Resource bind info for refProbeAttenuationConstants
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// colorSampler                      sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// normalSampler                     sampler      NA          NA             s3      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// colorMap                          texture  float4          2d             t0      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// visibleProbes                     texture    uint     2darray             t7      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// refProbeConstants                 texture  struct         r/o            t15      1 
// refProbeAttenuationConstants      texture  struct         r/o            t16      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// tintMask                          texture  float4          2d            t21      1 
// normalMap                         texture  float4          2d            t22      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyz 
// COLOR                    0   xyz         1     NONE   float   xyz 
// COLOR                    1      w        1     NONE   float      w
// TEXCOORD                 0   xy          2     NONE   float   xy  
// UVOFFSETS                0   xyz         3     NONE   float       
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
// TEXCOORD                 2   xyz         5     NONE   float   xyz 
// TEXCOORD                 3   xyz         6     NONE   float   xyz 
// OFFPOSITION              0   xyz         7     NONE   float   xyz 
// SV_IsFrontFace           0   x           8    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB0[12], immediateIndexed
dcl_constantbuffer CB1[93], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2darray (uint,uint,uint,uint) t7
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_structured t15, 224
dcl_resource_structured t16, 96
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t23, 4
dcl_resource_texture2darray (float,float,float,float) t31
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xy
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps_sgv constant v8.x, is_front_face
dcl_output o0.xyzw
dcl_temps 37
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.x, v2.xyxx, t21.xyzw, s1
add r1.yzw, cb0[10].xxyz, l(0.000000, -1.000000, -1.000000, -1.000000)
mad r1.xyz, r1.xxxx, r1.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r1.xyzx
mul r0.xyz, r0.xyzx, v1.xyzx
mul r1.x, r0.w, v1.w
add r1.y, -cb0[11].x, cb0[11].y
mul_sat r1.z, cb0[11].y, l(0.05882353)
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v2.xyxx, t22.xyzw, s3
add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.000000, 0.000000)
mad r2.xyz, cb0[10].wwww, r2.xyzx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r2.xy, r2.xyxx, l(1.99218750, 1.99218750, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r1.w, -r1.w, l(1.000000)
max r1.w, r1.w, l(0.000000)
sqrt r1.w, r1.w
mul r2.z, r2.z, r2.z
mul r2.z, r2.z, l(0.33333334)
min r2.z, r2.z, l(1.000000)
movc r2.w, v8.x, l(1.000000), l(-1.000000)
dp3 r3.x, v4.xyzx, v4.xyzx
rsq r3.x, r3.x
mul r3.xyz, r3.xxxx, v4.xyzx
mul r3.xyz, r2.wwww, r3.xyzx
dp3 r3.w, v5.xyzx, v5.xyzx
rsq r3.w, r3.w
mul r4.xyz, r3.wwww, v5.xyzx
mul r4.xyz, r2.wwww, r4.xyzx
dp3 r3.w, v6.xyzx, v6.xyzx
rsq r3.w, r3.w
mul r5.xyz, r3.wwww, v6.xyzx
mul r5.xyz, r2.wwww, r5.xyzx
mul r1.z, r1.z, l(-17.000000)
exp r1.z, r1.z
add r1.z, r1.z, r2.z
log r1.z, r1.z
mul r1.z, r1.z, l(-0.05882353)
mul r5.xyz, r2.yyyy, r5.xyzx
mad r2.xyw, r4.xyxz, r2.xxxx, r5.xyxz
mad r2.xyw, r3.xyxz, r1.wwww, r2.xyxw
dp3 r1.w, r2.xywx, r2.xywx
rsq r1.w, r1.w
mul r2.xyw, r1.wwww, r2.xyxw
mad r1.y, cb1[62].x, r1.y, cb0[11].x
mul_sat r1.y, r1.y, l(0.05882353)
mul r1.y, r1.y, l(-17.000000)
exp r1.y, r1.y
add r1.y, r1.y, r2.z
log r1.y, r1.y
mul r1.y, r1.y, l(-0.05882353)
max r1.yz, r1.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r1.w, l(0.000000), cb1[64].w
if_nz r1.w
  ftoi r1.w, cb1[64].w
  lod r2.z, v2.xyxx, t0.y, s1
  lod r3.x, v2.xyxx, t0.x, s1
  lt r2.z, r2.z, r3.x
  lt r3.x, l(0.000000), r3.x
  and r3.yzw, r1.wwww, l(0, 1, 2, 4)
  movc r4.xyz, r3.yyyy, l(1.000000,0,1.000000,0), r0.xyzx
  movc r5.xyz, r3.zzzz, l(0,1.000000,1.000000,0), r0.xyzx
  movc r3.xyz, r3.xxxx, r4.xyzx, r5.xyzx
  movc r4.xyz, r3.wwww, l(0,1.000000,0,0), r0.xyzx
  movc r0.xyz, r2.zzzz, r3.xyzx, r4.xyzx
endif 
add r3.xyz, -r0.xyzx, cb1[58].xyzx
mad r0.xyz, cb1[58].wwww, r3.xyzx, r0.xyzx
mad r0.w, -r0.w, v1.w, cb1[59].x
mad o0.w, cb1[59].w, r0.w, r1.x
add r3.xyz, cb1[61].xyzx, l(-0.040000, -0.040000, -0.040000, 0.000000)
mad r3.xyz, cb1[61].wwww, r3.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000)
add r0.w, -r1.z, r1.y
mad r1.y, cb1[62].w, r0.w, r1.z
add r0.w, cb1[63].x, l(-1.000000)
mad r0.w, cb1[63].w, r0.w, l(1.000000)
movc r4.xyz, v8.xxxx, v4.xyzx, -v4.xyzx
dp3 r1.z, r4.xyzx, r4.xyzx
rsq r1.z, r1.z
mad r4.xyz, r4.xyzx, r1.zzzz, -r2.xywx
mad r2.xyz, cb1[60].wwww, r4.xyzx, r2.xywx
ftou r1.zw, v0.xxxy
ge r3.w, v0.z, l(0.984375)
mul r4.x, v0.z, l(1.01587307)
mad r4.y, v0.z, l(64.000000), l(-63.000000)
movc r3.w, r3.w, r4.y, r4.x
max r3.w, r3.w, l(0.00000001)
rcp r3.w, r3.w
dp3 r4.x, -v7.xyzx, -v7.xyzx
rsq r4.x, r4.x
mul r4.yzw, r4.xxxx, -v7.xxyz
utof r5.xy, r1.zwzz
dp2 r5.x, r5.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r5.x, r5.x
mul r5.x, r5.x, l(52.982918)
frc r5.x, r5.x
mad r5.x, r5.x, l(6.28318548), cb1[70].w
sincos r5.x, r6.x, r5.x
dp3_sat r1.x, r2.xyzx, r4.yzwy
dp3 r5.y, -r4.yzwy, r2.xyzx
add r5.y, r5.y, r5.y
mad r7.xyz, r2.xyzx, -r5.yyyy, -r4.yzwy
mul r5.y, r1.y, l(17.000000)
exp r5.y, r5.y
add r5.y, r5.y, l(2.000000)
div r5.y, l(2.000000), r5.y
sqrt r5.z, r5.y
add r5.w, -r1.y, l(1.000000)
mul r6.y, r5.w, l(5.000000)
mad r6.z, r5.w, l(5.000000), l(-2.500000)
mul_sat r6.z, r6.z, l(0.400000)
mul r6.z, r6.z, l(100.000000)
mad r8.xy, -r5.wwww, l(10.000000, 5.000000, 0.000000, 0.000000), l(6.857410, 7.085000, 0.000000, 0.000000)
exp r6.w, r8.x
mul r6.w, r1.x, r6.w
mul r6.w, r6.w, l(9.136810)
mul r8.x, r5.w, r6.y
mad r8.x, -r8.x, l(2.015905), r8.y
exp r8.x, r8.x
mul r8.x, r1.x, r8.x
mul r8.x, r8.x, l(9.708090)
max r6.w, r6.w, r8.x
max r6.w, r6.w, l(1.268160)
mul r3.w, r3.w, l(0.00781250)
min r3.w, r3.w, l(15.000000)
ftou r3.w, r3.w
ushr r8.xy, r1.zwzz, l(6, 6, 0, 0)
ishl r8.z, r3.w, l(4)
mov r9.xy, l(0,0,0,0)
mov r10.w, l(0)
mov r11.yz, l(0,0,1.000000,0)
mov r12.xy, l(0,0,0,0)
mov r13.xy, l(0,0,0,0)
mov r14.xy, l(0,0,0,0)
mov r15.x, l(1.000000)
mov r16.xyzw, l(0,0,0,0)
mov r17.xyz, l(0,0,0,0)
mov r1.zw, l(0,0,0,0)
loop 
  uge r3.w, r1.w, cb2[0].y
  breakc_nz r3.w
  ushr r9.z, r1.w, l(5)
  iadd r10.xyz, r8.xyzx, r9.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r3.w, r10.xyzw, t7.yzwx
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r18.xyzw, r1.w, l(0), t15.wxyz
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r19.xyzw, r1.w, l(16), t15.xyzw
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r20.xyzw, r1.w, l(32), t15.yxwz
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r21.xyzw, r1.w, l(48), t15.xyzw
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r22.xyzw, r1.w, l(64), t15.zwxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r23.xyzw, r1.w, l(80), t15.xyzw
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r9.zw, r1.w, l(96), t15.xxxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r24.xyzw, r1.w, l(116), t15.xyzw
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r25.xyzw, r1.w, l(132), t15.zwxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r26.xyzw, r1.w, l(148), t15.zwxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r27.xyzw, r1.w, l(164), t15.zwxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r28.xyzw, r1.w, l(180), t15.zwxy
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r29.xyzw, r1.w, l(196), t15.xyzw
  ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r30.xy, r1.w, l(212), t15.xyxx
  add r10.xyz, -r18.yzwy, v7.xyzx
  dp3 r8.w, r10.xyzx, r10.xyzx
  sqrt r8.w, r8.w
  ge r8.w, cb2[54].y, r8.w
  and r11.w, r24.y, l(0x0000ffff)
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r11.w, l(0), t16.xyzw
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r32.xyzw, r11.w, l(16), t16.xyzw
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r33.xyzw, r11.w, l(32), t16.xyzw
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r34.xyzw, r11.w, l(48), t16.xyzw
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r35.xyzw, r11.w, l(64), t16.xyzw
  ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r36.xyzw, r11.w, l(80), t16.xyzw
  dp3 r12.w, r31.xyzx, r10.xyzx
  add_sat r12.w, r31.w, r12.w
  dp3 r13.w, r32.xyzx, r10.xyzx
  add_sat r13.w, r32.w, r13.w
  mul r12.w, r12.w, r13.w
  dp3 r13.w, r33.xyzx, r10.xyzx
  add_sat r13.w, r33.w, r13.w
  mul r12.w, r12.w, r13.w
  dp3 r13.w, r34.xyzx, r10.xyzx
  add_sat r13.w, r34.w, r13.w
  mul r12.w, r12.w, r13.w
  dp3 r13.w, r35.xyzx, r10.xyzx
  add_sat r13.w, r35.w, r13.w
  mul r12.w, r12.w, r13.w
  dp3 r13.w, r36.xyzx, r10.xyzx
  add_sat r13.w, r36.w, r13.w
  mul r11.x, r12.w, r13.w
  and r12.w, r9.z, l(1)
  movc r15.zw, r12.wwww, r11.xxxy, r11.zzzx
  mov r31.xy, r24.zwzz
  mov r31.z, r25.z
  dp3 r11.x, r7.xyzx, r31.xyzx
  dp3 r12.w, r10.xyzx, r31.xyzx
  add r12.w, -r25.w, r12.w
  ge r13.w, r12.w, l(0.000000)
  max r12.w, r6.z, |r12.w|
  movc r12.w, r13.w, r12.w, -r12.w
  max r11.x, -r11.x, l(0.00000010)
  div r11.x, r12.w, r11.x
  min r11.x, |r11.x|, l(131072.000000)
  mov r25.z, r26.z
  dp3 r12.w, r7.xyzx, r25.xyzx
  dp3 r13.w, r10.xyzx, r25.xyzx
  add r13.w, -r26.w, r13.w
  ge r14.w, r13.w, l(0.000000)
  max r13.w, r6.z, |r13.w|
  movc r13.w, r14.w, r13.w, -r13.w
  max r12.w, -r12.w, l(0.00000010)
  div r12.w, r13.w, r12.w
  min r11.x, r11.x, |r12.w|
  mov r26.z, r27.z
  dp3 r12.w, r7.xyzx, r26.xyzx
  dp3 r13.w, r10.xyzx, r26.xyzx
  add r13.w, -r27.w, r13.w
  ge r14.w, r13.w, l(0.000000)
  max r13.w, r6.z, |r13.w|
  movc r13.w, r14.w, r13.w, -r13.w
  max r12.w, -r12.w, l(0.00000010)
  div r12.w, r13.w, r12.w
  min r11.x, r11.x, |r12.w|
  mov r27.z, r28.z
  dp3 r12.w, r7.xyzx, r27.xyzx
  dp3 r13.w, r10.xyzx, r27.xyzx
  add r13.w, -r28.w, r13.w
  ge r14.w, r13.w, l(0.000000)
  max r13.w, r6.z, |r13.w|
  movc r13.w, r14.w, r13.w, -r13.w
  max r12.w, -r12.w, l(0.00000010)
  div r12.w, r13.w, r12.w
  min r11.x, r11.x, |r12.w|
  mov r28.z, r29.x
  dp3 r12.w, r7.xyzx, r28.xyzx
  dp3 r13.w, r10.xyzx, r28.xyzx
  add r13.w, -r29.y, r13.w
  ge r14.w, r13.w, l(0.000000)
  max r13.w, r6.z, |r13.w|
  movc r13.w, r14.w, r13.w, -r13.w
  max r12.w, -r12.w, l(0.00000010)
  div r12.w, r13.w, r12.w
  min r11.x, r11.x, |r12.w|
  mov r30.zw, r29.zzzw
  dp3 r12.w, r7.zxyz, r30.xzwx
  dp3 r13.w, r10.zxyz, r30.xzwx
  add r13.w, -r30.y, r13.w
  ge r14.w, r13.w, l(0.000000)
  max r13.w, r6.z, |r13.w|
  movc r13.w, r14.w, r13.w, -r13.w
  max r12.w, -r12.w, l(0.00000010)
  div r12.w, r13.w, r12.w
  min r11.x, r11.x, |r12.w|
  mov r25.x, r21.w
  mov r25.yz, r22.zzwz
  add r25.xyz, r10.xyzx, r25.xyzx
  mad r25.xyz, r7.xyzx, r11.xxxx, r25.xyzx
  dp3 r12.w, r25.xyzx, r25.xyzx
  sqrt r12.w, r12.w
  div r11.x, r11.x, r12.w
  add r11.x, r11.x, r11.x
  sqrt r11.x, r11.x
  mad r11.x, r5.w, l(5.000000), r11.x
  add r11.x, r11.x, l(-0.844800)
  mov r18.y, r19.z
  mov r18.z, r20.x
  dp3 r26.x, r25.xyzx, r18.xyzx
  mov r27.xy, r19.xwxx
  mov r27.z, r20.w
  dp3 r26.y, r25.xyzx, r27.xyzx
  mov r20.x, r19.y
  dp3 r26.z, r25.xyzx, r20.xyzx
  ubfe r19.xy, l(6, 9, 0, 0), l(25, 16, 0, 0), r24.yyyy
  utof r26.w, r19.y
  sample_l_indexable(texturecubearray)(float,float,float,float) r19.yzw, r26.xyzw, t8.wxyz, s2, r11.x
  and r24.yzw, r19.yyzw, l(0, 0x7fffffff, 0x7fffffff, 0x7fffffff)
  ieq r24.yzw, r24.yyzw, l(0, 0x7f800000, 0x7f800000, 0x7f800000)
  or r11.x, r24.z, r24.y
  or r11.x, r24.w, r11.x
  movc r19.yzw, r11.xxxx, l(0,1.000000,1.000000,0), r19.yyzw
  dp3 r25.x, r10.xyzx, r18.xyzx
  dp3 r25.y, r10.xyzx, r27.xyzx
  dp3 r25.z, r10.xyzx, r20.xyzx
  mad_sat r21.xyz, r25.xyzx, r21.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mov r22.z, r23.x
  mad r21.xyz, r21.xyzx, r22.xyzx, r23.yzwy
  dp3 r26.x, r2.xyzx, r18.xyzx
  dp3 r26.y, r2.xyzx, r27.xyzx
  dp3 r26.z, r2.xyzx, r20.xyzx
  lt r18.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r26.xyzx
  movc r12.z, r18.x, l(0), l(0.500000)
  add r20.xyz, r12.xyzx, r21.xyzx
  sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
  movc r13.z, r18.y, l(0), l(0.500000)
  add r18.xyw, r13.xyxz, r21.xyxz
  sample_l_indexable(texture3d)(float,float,float,float) r18.xyw, r18.xywx, t18.xywz, s4, l(0.000000)
  movc r14.z, r18.z, l(0), l(0.500000)
  add r21.xyz, r14.xyzx, r21.xyzx
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t19.xyzw, s4, l(0.000000)
  mul r22.xyz, r26.xyzx, r26.xyzx
  sample_l_indexable(texturecubearray)(float,float,float,float) r23.xyz, r26.xyzw, t8.xyzw, s2, l(6.000000)
  and r24.yzw, r23.xxyz, l(0, 0x7fffffff, 0x7fffffff, 0x7fffffff)
  ieq r24.yzw, r24.yyzw, l(0, 0x7f800000, 0x7f800000, 0x7f800000)
  or r11.x, r24.z, r24.y
  or r11.x, r24.w, r11.x
  movc r23.xyz, r11.xxxx, l(1.000000,1.000000,0,0), r23.xyzx
  mov r25.xyzw, r16.yzwx
  mov r24.yzw, r17.xxyz
  mov r11.x, r1.z
  mov r12.z, r3.w
  loop 
    breakc_z r12.z
    firstbit_lo r12.w, r12.z
    ishl r12.w, l(1), r12.w
    and r13.z, r12.w, r12.z
    if_nz r13.z
      not r12.w, r12.w
      and r12.z, r12.w, r12.z
      if_nz r8.w
        mov r12.w, r9.z
        mov r26.xy, r15.zwzz
        mov r13.z, l(1)
        loop 
          ige r13.w, r13.z, r19.x
          breakc_nz r13.w
          iadd r13.w, r11.w, r13.z
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r27.xyzw, r13.w, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r28.xyzw, r13.w, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r29.xyzw, r13.w, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r30.xyzw, r13.w, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r13.w, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r32.xyzw, r13.w, l(80), t16.xyzw
          dp3 r13.w, r27.xyzx, r10.xyzx
          add_sat r13.w, r27.w, r13.w
          mul r13.w, r13.w, r26.x
          dp3 r14.z, r28.xyzx, r10.xyzx
          add_sat r14.z, r28.w, r14.z
          mul r13.w, r13.w, r14.z
          dp3 r14.z, r29.xyzx, r10.xyzx
          add_sat r14.z, r29.w, r14.z
          mul r13.w, r13.w, r14.z
          dp3 r14.z, r30.xyzx, r10.xyzx
          add_sat r14.z, r30.w, r14.z
          mul r13.w, r13.w, r14.z
          dp3 r14.z, r31.xyzx, r10.xyzx
          add_sat r14.z, r31.w, r14.z
          mul r13.w, r13.w, r14.z
          dp3 r14.z, r32.xyzx, r10.xyzx
          add_sat r14.z, r32.w, r14.z
          mul r26.x, r13.w, r14.z
          ushr r14.w, r12.w, l(2)
          ubfe r17.w, l(1), l(2), r12.w
          and r18.z, r14.w, l(2)
          max r20.w, r26.x, r26.y
          mad r13.w, -r13.w, r14.z, l(1.000000)
          mul r13.w, r13.w, r26.y
          movc r15.y, r18.z, r13.w, r20.w
          movc r26.xy, r17.wwww, r26.xyxx, r15.xyxx
          iadd r13.z, r13.z, l(1)
          mov r12.w, r14.w
        endloop 
        mov_sat r26.y, r26.y
        mul r12.w, r9.w, r26.y
        lt r13.z, l(0.000000), r12.w
        if_nz r13.z
          mad r27.w, r26.y, r9.w, r25.w
          mul r12.w, r24.x, r12.w
          mul r26.xzw, r12.wwww, r22.xxyz
          mul r28.xyz, r18.xywx, r26.zzzz
          mad r28.xyz, r20.xyzx, r26.xxxx, r28.xyzx
          mad r26.xzw, r21.xxyz, r26.wwww, r28.xxyz
          mul r28.xyz, r23.xyzx, r26.xzwx
          dp3 r13.z, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
          mad r26.xzw, r26.xxzw, r23.xxyz, r24.yyzw
          mul r13.w, r6.w, r13.z
          mul r28.xyz, r12.wwww, r19.yzwy
          dp3 r12.w, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
          mad r12.w, r6.w, r13.z, r12.w
          div r12.w, r13.w, r12.w
          mad r27.xyz, r28.xyzx, r12.wwww, r25.xyzx
        else 
          mov r27.xyzw, r25.xyzw
          mov r26.xzw, r24.yyzw
        endif 
        mov r11.x, l(-1)
        mov r24.yzw, r26.xxzw
        mov r25.xyzw, r27.xyzw
        break 
      endif 
    endif 
  endloop 
  if_nz r11.x
    mov r16.xyzw, r25.wxyz
    mov r17.xyz, r24.yzwy
    mov r1.z, l(-1)
    break 
  endif 
  iadd r1.w, r1.w, l(32)
  mov r16.xyzw, r25.wxyz
  mov r17.xyz, r24.yzwy
  mov r1.z, r11.x
endloop 
if_z r1.z
  max r1.z, r16.x, l(1.000000)
  rcp r1.z, r1.z
  mov_sat r16.x, r16.x
  mul r8.xyz, r1.zzzz, r17.xyzx
  mul r16.yzw, r1.zzzz, r16.yyzw
  lt r1.w, r16.x, l(0.990000)
  if_nz r1.w
    add r1.w, -r16.x, l(1.000000)
    mul r3.w, r1.w, cb2[19].x
    add r9.xyz, v7.xyzx, -cb2[35].xyzx
    mul r10.x, r9.x, cb2[35].w
    mul r10.yz, r9.yyzy, cb2[36].xxyx
    add_sat r9.xyz, r10.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r10.xy, r9.xyxx, cb2[36].zwzz
    mul r10.z, r9.z, cb2[37].x
    add r9.xyz, r10.xyzx, cb2[37].yzwy
    lt r10.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r2.xyzx
    movc r10.xyz, r10.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
    mov r10.w, l(0)
    add r11.xyz, r9.xyzx, r10.wwxw
    sample_l_indexable(texture3d)(float,float,float,float) r11.xyz, r11.xyzx, t17.xyzw, s4, l(0.000000)
    mul r12.xyz, r2.xyzx, r2.xyzx
    mul r12.xyz, r3.wwww, r12.xyzx
    add r13.xyz, r9.xyzx, r10.wwyw
    sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r13.xyzx, t18.xyzw, s4, l(0.000000)
    mul r13.xyz, r12.yyyy, r13.xyzx
    mad r11.xyz, r11.xyzx, r12.xxxx, r13.xyzx
    add r9.xyz, r9.xyzx, r10.wwzw
    sample_l_indexable(texture3d)(float,float,float,float) r9.xyz, r9.xyzx, t19.xyzw, s4, l(0.000000)
    mad r9.xyz, r9.xyzx, r12.zzzz, r11.xyzx
    mov r2.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r10.xyz, r2.xyzw, t8.xyzw, s2, l(6.000000)
    mul r9.xyz, r9.xyzx, r10.xyzx
    dp3 r2.w, r9.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r17.xyz, r17.xyzx, r1.zzzz, r9.xyzx
    mov r7.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r6.yzw, r7.xyzw, t8.wxyz, s2, r6.y
    mad r1.z, cb2[19].x, r1.w, -r2.w
    mad r1.z, r1.y, r1.z, r2.w
    mad r16.yzw, r6.yyzw, r1.zzzz, r16.yyzw
  else 
    mov r17.xyz, r8.xyzx
  endif 
endif 
add r1.z, r0.w, r1.x
log r1.z, |r1.z|
mul r1.z, r1.z, r5.z
exp r1.z, r1.z
add r1.z, r0.w, r1.z
add_sat r1.z, r1.z, l(-1.000000)
mul r6.yzw, r0.wwww, r17.xxyz
mad r1.yw, r1.xxxy, l(0.000000, 0.984375, 0.000000, 0.984375), l(0.000000, 0.00781250, 0.000000, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r1.yw, r1.ywyy, t5.zxwy, s2, l(0.000000)
mul r7.xyz, r1.zzzz, r16.yzwy
mul r8.xyz, r1.yyyy, r7.xyzx
mul r1.yzw, r1.wwww, r7.xxyz
dp3 r0.w, r2.xyzx, cb2[17].xyzx
mov_sat r2.w, r0.w
ge r3.w, l(0.000000), r2.w
if_nz r3.w
  mov r5.w, l(0)
endif 
if_z r3.w
  mul r7.xyz, v7.yyyy, cb2[29].xyzx
  mad r7.xyz, v7.xxxx, cb2[28].xyzx, r7.xyzx
  mad r7.xyz, v7.zzzz, cb2[30].xyzx, r7.xyzx
  add r7.xyz, r7.xyzx, cb2[31].xyzx
  add r3.w, r7.z, -cb2[17].w
  mad r3.w, -r3.w, l(0.00006104), l(1.000000)
  mov_sat r7.w, r3.w
  eq r7.w, r3.w, r7.w
  if_nz r7.w
    mov r7.w, l(0)
    mov r8.w, l(0)
    loop 
      ge r9.x, r7.w, l(3.000000)
      breakc_nz r9.x
      ftou r9.x, r7.w
      add r9.yz, r7.xxyx, -cb2[r9.x + 20].xxyx
      max r9.y, |r9.z|, |r9.y|
      mul r8.w, r9.y, cb2[r9.x + 20].z
      lt r9.x, r8.w, l(1.000000)
      if_nz r9.x
        break 
      endif 
      add r7.w, r7.w, l(1.000000)
      mov r8.w, l(0)
    endloop 
  else 
    mov r7.w, l(3.000000)
    mov r8.w, l(0)
  endif 
  ge r9.x, r7.w, l(3.000000)
  if_nz r9.x
    mul r9.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r10.xz, r9.yyyy
    mov r10.y, -r10.z
    mad r9.yzw, r7.xxyx, r10.xxyz, r9.zzwz
    add r10.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r9.yzw, r9.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r9.yzw, r10.xxyz, r9.yyzw
    mul r10.xy, r9.wzww, cb2[32].xxxx
    round_ni r10.xy, r10.xyxx
    mul r10.y, r10.y, cb2[27].x
    mad r10.x, r10.y, cb2[32].x, r10.x
    ftou r10.x, r10.x
    iadd r10.x, r10.x, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.y, r10.x, l(0), t23.xxxx
    and r10.z, r10.y, l(0x40000000)
    ishl r10.w, r10.y, l(2)
    if_z r10.z
      and r10.z, r10.y, l(0x01ffffff)
      iadd r11.x, r10.z, r10.x
      ushr r10.x, r10.y, l(25)
      utof r10.x, r10.x
      mul r9.yzw, r9.yyzw, r10.xxxx
      frc r9.yzw, r9.yyzw
      mul r9.yzw, r9.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r9.yzw, r9.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.z, r11.x, l(0), t23.xxxx
      ushr r10.xy, r9.wzww, l(6, 6, 0, 0)
      and r10.z, r11.z, l(0xc0000000)
      iadd r11.w, r11.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r11.w, l(0), t23.xxxx
      movc r10.y, r10.y, r11.z, r11.w
      ushr r11.w, r10.y, l(13)
      movc r10.x, r10.x, r11.w, r10.y
      and r10.x, r10.x, l(8191)
      iadd r12.x, r10.x, r11.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.z, r12.x, l(0), t23.xxxx
      mov r11.y, l(0)
      mov r12.y, l(1)
      movc r12.xyz, r10.zzzz, r11.xyzx, r12.xyzx
      movc r13.yz, r10.zzzz, l(0,6,1,0), l(0,5,2,0)
      ushr r10.xy, r9.wzww, r13.yyyy
      and r10.xy, r10.xyxx, l(1, 1, 0, 0)
      and r11.w, r12.z, l(0xc0000000)
      iadd r12.w, r12.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.w, r12.w, l(0), t23.xxxx
      movc r10.y, r10.y, r12.z, r12.w
      ushr r12.w, r10.y, l(13)
      movc r10.x, r10.x, r12.w, r10.y
      and r10.x, r10.x, l(8191)
      iadd r13.x, r10.x, r12.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.x, l(0), t23.xxxx
      movc r12.xyz, r11.wwww, r12.xyzx, r13.xzwx
      movc r10.xyz, r10.zzzz, r11.xyzx, r12.xyzx
      and r11.x, r10.z, l(0xc0000000)
      if_z r11.x
        iadd r11.x, -r10.y, l(6)
        ushr r11.xy, r9.wzww, r11.xxxx
        or r11.z, r10.z, l(0x40000000)
        bfi r11.y, l(1), l(1), r11.y, l(0)
        bfi r11.x, l(1), l(0), r11.x, r11.y
        imul null, r11.x, r11.x, l(10)
        ushr r11.x, r11.z, r11.x
        and r11.x, r11.x, l(1023)
        iadd r11.x, r10.x, r11.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r11.x, l(0), t23.xxxx
        iadd r11.yz, r10.yyyy, l(0, 1, 2, 0)
        iadd r10.y, -r11.y, l(6)
        ushr r12.xy, r9.wzww, r10.yyyy
        and r10.y, r11.w, l(0xc0000000)
        or r12.z, r11.w, l(0x40000000)
        bfi r12.y, l(1), l(1), r12.y, l(0)
        bfi r12.x, l(1), l(0), r12.x, r12.y
        imul null, r12.x, r12.x, l(10)
        ushr r12.x, r12.z, r12.x
        and r12.x, r12.x, l(1023)
        iadd r12.x, r11.x, r12.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.z, r12.x, l(0), t23.xxxx
        mov r12.y, r11.z
        movc r12.xyz, r10.yyyy, r11.xywx, r12.xyzx
        iadd r11.y, -r12.y, l(6)
        ushr r11.yz, r9.wwzw, r11.yyyy
        and r12.y, r12.z, l(0xc0000000)
        or r12.w, r12.z, l(0x40000000)
        bfi r11.z, l(1), l(1), r11.z, l(0)
        bfi r11.y, l(1), l(0), r11.y, r11.z
        imul null, r11.y, r11.y, l(10)
        ushr r11.y, r12.w, r11.y
        and r11.y, r11.y, l(1023)
        iadd r13.x, r11.y, r12.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.y, r13.x, l(0), t23.xxxx
        movc r11.yz, r12.yyyy, r12.xxzx, r13.xxyx
        movc r10.xz, r10.yyyy, r11.xxwx, r11.yyzy
      endif 
      and r10.y, r10.z, l(0xc0000000)
      if_z r10.y
        ubfe r11.x, l(14), l(15), r10.z
        utof r11.x, r11.x
        mul r11.x, r11.x, cb2[27].w
        and r11.yz, r10.zzzz, l(0, 0x00007fff, 0x20000000, 0)
        utof r11.y, r11.y
        mul r11.y, r11.y, cb2[27].w
        mul r11.xy, r11.xyxx, l(0.00006104, 0.00003052, 0.000000, 0.000000)
        and r11.w, r9.z, l(3)
        iadd r11.w, r10.x, r11.w
        iadd r11.w, r11.w, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r11.w, l(0), t23.xxxx
        bfi r12.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r9.yzwy, l(0, 0, 0, 0)
        ushr r9.y, r11.w, r12.x
        and r9.y, r9.y, l(255)
        utof r9.y, r9.y
        mul r9.y, r11.y, r9.y
        mad r9.y, r9.y, l(0.00392157), r11.x
        iadd r9.z, r12.y, l(1)
        ubfe r9.w, l(1), l(1), r9.w
        iadd r9.z, r9.w, r9.z
        iadd r9.z, r9.z, r10.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.z, r9.z, l(0), t23.xxxx
        ushr r9.z, r9.z, r12.z
        and r9.z, r9.z, l(0x0000ffff)
        utof r9.z, r9.z
        mul r9.z, r11.y, r9.z
        mad r9.z, r9.z, l(0.00001526), r11.x
        movc r10.w, r11.z, r9.y, r9.z
      else 
        and r9.y, r10.z, l(0x80000000)
        iadd r9.z, r10.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.z, r9.z, l(0), t23.xxxx
        movc r9.y, r9.y, r9.z, l(0)
        ishl r9.z, r10.z, l(2)
        ushr r9.w, r9.y, l(16)
        and r9.y, r9.y, l(0x0000ffff)
        f16tof32 r9.yw, r9.yyyw
        mad r9.z, r7.x, r9.w, r9.z
        mad r9.y, r7.y, r9.y, r9.z
        movc r10.w, r10.y, r9.y, r10.w
      endif 
    endif 
    mad r7.z, -cb2[27].z, l(2.000000), r7.z
    lt r7.z, r10.w, r7.z
    movc r5.w, r7.z, l(0), l(1.000000)
  endif 
  if_z r9.x
    if_z cb2[58].y
      ftou r7.z, r7.w
      add r9.xy, r7.xyxx, -cb2[r7.z + 20].xyxx
      mul r9.xy, r9.xyxx, cb2[r7.z + 20].zzzz
      mad r9.xy, r9.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r7.z, cb2[26].y
      add r9.z, r7.z, r7.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r7.z, r9.xyzx, t13.xxxx, s13, r3.w
      sample_l_indexable(texture2darray)(float,float,float,float) r9.x, r9.xyzx, t31.xyzw, s0, l(0.000000)
      add r7.z, r7.z, r9.x
      add_sat r7.z, r7.z, l(-1.000000)
      mul r9.x, r7.z, r7.z
      mul r5.w, r7.z, r9.x
    endif 
    if_nz cb2[58].y
      mov r9.x, -r5.x
      ftou r7.z, r7.w
      add r7.w, r7.w, l(1.000000)
      min r7.w, r7.w, l(2.000000)
      ftou r7.w, r7.w
      add r8.w, -r8.w, l(1.000000)
      mul r8.w, r8.w, l(28.000000)
      ftou r8.w, r8.w
      add r10.xy, r7.xyxx, -cb2[r7.z + 20].xyxx
      mul r10.xy, r10.xyxx, cb2[r7.z + 20].zzzz
      mad r10.xy, r10.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r7.xy, r7.xyxx, -cb2[r7.w + 20].xyxx
      mul r7.xy, r7.xyxx, cb2[r7.w + 20].zzzz
      mad r7.xy, r7.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mov r9.y, r6.x
      mov r9.z, r5.x
      mov r9.w, l(0)
      mov r10.z, l(0)
      loop 
        uge r10.w, r10.z, l(8)
        breakc_nz r10.w
        ult r10.w, r8.w, r10.z
        movc r11.xy, r10.wwww, r7.xyxx, r10.xyxx
        movc r11.z, r10.w, cb2[r7.w + 20].w, cb2[r7.z + 20].w
        movc r10.w, r10.w, r7.w, r7.z
        dp2 r12.x, icb[r10.z + 0].yxyy, r9.xyxx
        dp2 r12.y, icb[r10.z + 0].yxyy, r9.yzyy
        mad r11.xy, r12.xyxx, r11.zzzz, r11.xyxx
        iadd r10.w, r10.w, cb2[26].y
        utof r11.z, r10.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r11.xyzx, t13.xxxx, s13, r3.w
        sample_l_indexable(texture2darray)(float,float,float,float) r11.x, r11.xyzx, t31.xyzw, s0, l(0.000000)
        add r10.w, r10.w, r11.x
        add_sat r10.w, r10.w, l(-1.000000)
        mad r9.w, r10.w, l(0.125000), r9.w
        iadd r10.z, r10.z, l(1)
      endloop 
      mul r3.w, r9.w, r9.w
      mul r5.w, r9.w, r3.w
    endif 
  endif 
endif 
lt r3.w, l(0.000000), r2.w
if_nz r3.w
  lt r3.w, l(0.000000), r5.w
  if_nz r3.w
    ine r3.w, cb1[92].x, l(0)
    sqrt r7.x, r5.z
    mad r7.x, r7.x, l(0.500000), l(0.500000)
    mul r7.x, r7.x, r7.x
    mul r7.y, r7.x, l(0.500000)
    mad r7.x, -r7.x, l(0.500000), l(1.000000)
    mad r7.z, r1.x, r7.x, r7.y
    mul r7.xy, r7.zzzz, r7.xyxx
    mul r7.z, r5.y, cb2[18].w
    mul r7.z, r2.w, r7.z
    if_nz cb2[23].x
      add r9.xyz, v7.xyzx, cb1[24].xyzx
      mov r9.w, l(1.000000)
      dp4 r7.w, cb2[24].xyzw, r9.xyzw
      dp4 r8.w, cb2[25].xyzw, r9.xyzw
      frc r9.x, r7.w
      frc r9.y, r8.w
      iadd r7.w, l(-1), cb2[23].x
      utof r9.z, r7.w
      sample_l_indexable(texture2darray)(float,float,float,float) r9.xyz, r9.xyzx, t20.xyzw, s2, l(0.000000)
      add r9.xyz, r9.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r9.xyz, cb2[23].yyyy, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r9.xyz, r9.xyzx, cb2[18].xyzx
    else 
      mov r9.xyz, cb2[18].xyzx
    endif 
    ushr r7.w, cb2[53].x, l(16)
    ult r8.w, l(0), r7.w
    and r8.w, r3.w, r8.w
    if_nz r8.w
      iadd r7.w, r7.w, cb2[0].x
      iadd r7.w, r7.w, l(-1)
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r8.w, r7.w, l(52), t12.xxxx
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.xyzw, r7.w, l(68), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.xyzw, r7.w, l(84), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r7.w, l(132), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.xyzw, r7.w, l(148), t12.xyzw
      mad r9.w, |r0.w|, l(-0.200000), l(0.400000)
      mad r14.xyz, r2.xyzx, r9.wwww, v7.xyzx
      mov r14.w, l(1.000000)
      dp4 r10.x, r10.xyzw, r14.xyzw
      dp4 r10.y, r11.xyzw, r14.xyzw
      mad r10.xy, r10.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r10.xy, r13.zwzz, r10.xyxx
      mul r10.xy, r13.xyxx, r10.xyxx
      div r10.zw, r8.wwww, r12.xxxz
      add r11.xy, -r10.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r11.xy, r10.xyxx, r11.xyxx
      ge r10.zw, r10.zzzw, r10.xxxy
      or r10.zw, r10.zzzw, r11.xxxy
      or r9.w, r10.w, r10.z
      if_z r9.w
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r9.w, r7.w, l(28), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.xyzw, r7.w, l(100), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.zw, r7.w, l(164), t12.xxxy
        dp4 r7.w, r11.xyzw, r14.xyzw
        mov_sat r10.xy, r10.xyxx
        mad r11.xy, r10.xyxx, r12.xzxx, r12.ywyy
        add r7.w, r10.z, r7.w
        div r7.w, r7.w, r10.w
        max r7.w, r7.w, l(0.00006104)
        and r9.w, r9.w, l(0x0000ffff)
        if_nz cb2[58].y
          mov r10.x, -r5.x
          utof r12.z, r9.w
          mov r10.y, r6.x
          mov r10.z, r5.x
          mov r10.w, l(0)
          mov r11.w, l(0)
          loop 
            ige r12.w, r11.w, l(8)
            breakc_nz r12.w
            dp2 r13.x, icb[r11.w + 0].yxyy, r10.xyxx
            dp2 r13.y, icb[r11.w + 0].yxyy, r10.yzyy
            mad r12.xy, r13.xyxx, r8.wwww, r11.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.x, r12.xyzx, t9.xxxx, s13, r7.w
            mad r10.w, r12.x, l(0.125000), r10.w
            iadd r11.w, r11.w, l(1)
          endloop 
        else 
          utof r11.z, r9.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r11.xyzx, t9.xxxx, s13, r7.w
        endif 
        mul r7.w, r10.w, r10.w
        mul r7.w, r10.w, r7.w
      else 
        mov r7.w, l(1.000000)
      endif 
      mul r5.w, r5.w, r7.w
    else 
      and r7.w, cb2[53].x, l(0x0000ffff)
      ult r8.w, l(0), r7.w
      not r3.w, r3.w
      and r3.w, r3.w, r8.w
      if_nz r3.w
        iadd r3.w, r7.w, cb2[0].x
        iadd r3.w, r3.w, l(-1)
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r7.w, r3.w, l(52), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.xyzw, r3.w, l(68), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.xyzw, r3.w, l(84), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r3.w, l(132), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.xyzw, r3.w, l(148), t12.xyzw
        mad r8.w, |r0.w|, l(-0.200000), l(0.400000)
        mad r14.xyz, r2.xyzx, r8.wwww, v7.xyzx
        mov r14.w, l(1.000000)
        dp4 r10.x, r10.xyzw, r14.xyzw
        dp4 r10.y, r11.xyzw, r14.xyzw
        mad r10.xy, r10.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r10.xy, r13.zwzz, r10.xyxx
        mul r10.xy, r13.xyxx, r10.xyxx
        div r10.zw, r7.wwww, r12.xxxz
        add r11.xy, -r10.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r11.xy, r10.xyxx, r11.xyxx
        ge r10.zw, r10.zzzw, r10.xxxy
        or r10.zw, r10.zzzw, r11.xxxy
        or r8.w, r10.w, r10.z
        if_z r8.w
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r8.w, r3.w, l(28), t12.xxxx
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.xyzw, r3.w, l(100), t12.xyzw
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.zw, r3.w, l(164), t12.xxxy
          dp4 r3.w, r11.xyzw, r14.xyzw
          mov_sat r10.xy, r10.xyxx
          mad r11.xy, r10.xyxx, r12.xzxx, r12.ywyy
          add r3.w, r10.z, r3.w
          div r3.w, r3.w, r10.w
          max r3.w, r3.w, l(0.00006104)
          and r8.w, r8.w, l(0x0000ffff)
          if_nz cb2[58].y
            mov r10.x, -r5.x
            utof r12.z, r8.w
            mov r10.y, r6.x
            mov r10.z, r5.x
            mov r5.x, l(0)
            mov r6.x, l(0)
            loop 
              ige r9.w, r6.x, l(8)
              breakc_nz r9.w
              dp2 r13.x, icb[r6.x + 0].yxyy, r10.xyxx
              dp2 r13.y, icb[r6.x + 0].yxyy, r10.yzyy
              mad r12.xy, r13.xyxx, r7.wwww, r11.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r12.xyzx, t9.xxxx, s13, r3.w
              mad r5.x, r9.w, l(0.125000), r5.x
              iadd r6.x, r6.x, l(1)
            endloop 
          else 
            utof r11.z, r8.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r5.x, r11.xyzx, t9.xxxx, s13, r3.w
          endif 
          mul r3.w, r5.x, r5.x
          mul r3.w, r5.x, r3.w
        else 
          mov r3.w, l(1.000000)
        endif 
        mul r5.w, r3.w, r5.w
      endif 
    endif 
    mad r1.x, -r1.x, l(0.500000), l(1.000000)
    mad r1.x, -r2.w, r1.x, l(1.000000)
    mul r1.x, r1.x, r1.x
    mad r1.x, -r1.x, l(0.620000), l(0.620000)
    add r1.x, -r2.w, r1.x
    mad r1.x, r5.z, r1.x, r2.w
    mul r1.x, r5.w, r1.x
    lt r0.w, l(0.000000), r0.w
    mad r10.xyz, r1.xxxx, r9.xyzx, r6.yzwy
    mad r11.xyz, -v7.xyzx, r4.xxxx, cb2[17].xyzx
    dp3 r1.x, r11.xyzx, r11.xyzx
    rsq r1.x, r1.x
    mul r11.xyz, r1.xxxx, r11.xyzx
    dp3 r1.x, r11.xyzx, r4.yzwy
    dp3 r2.x, r2.xyzx, r11.xyzx
    mad r2.y, |r2.x|, r5.y, -|r2.x|
    mad r2.x, |r2.x|, r2.y, l(1.000000)
    mad r2.y, r2.w, r7.x, r7.y
    mul r2.x, r2.x, r2.x
    mul r2.x, r2.y, r2.x
    rcp r2.x, r2.x
    mul r2.x, r7.z, r2.x
    mul r2.x, r2.x, r5.w
    mul r2.x, r2.x, l(0.250000)
    mad r2.yzw, r2.xxxx, r9.xxyz, r1.yyzw
    add_sat r1.x, -r1.x, l(1.000000)
    mul r3.w, r1.x, r1.x
    mul r3.w, r3.w, r3.w
    mul r1.x, r1.x, r3.w
    mul r1.x, r1.x, r2.x
    mad r4.xyz, r1.xxxx, r9.xyzx, r8.xyzx
    movc r6.yzw, r0.wwww, r10.xxyz, r6.yyzw
    movc r8.xyz, r0.wwww, r4.xyzx, r8.xyzx
    movc r1.yzw, r0.wwww, r2.yyzw, r1.yyzw
  endif 
endif 
add r2.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, r8.xyzx
mad r1.xyz, r1.yzwy, r3.xyzx, r2.xyzx
mad r0.xyz, r6.yzwy, r0.xyzx, r1.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, v7.xyzx, v7.xyzx
  rsq r1.x, r0.w
  mul r1.xyz, r1.xxxx, v7.xyzx
  sqrt r0.w, r0.w
  lt r1.w, l(0.000000), cb2[13].w
  if_nz r1.w
    mad r2.xy, r0.wwww, cb2[15].xyxx, cb2[14].zwzz
    mul r2.xy, r2.xyxx, cb2[16].xyxx
    lt r1.w, l(0.010000), |v7.z|
    mul r2.zw, v7.zzzz, cb2[15].zzzw
    mul r3.xy, r2.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r3.xy, r3.xyxx
    add r3.xy, -r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r2.zw, r3.xxxy, r2.zzzw
    mul r2.zw, r2.zzzw, r2.xxxy
    movc r2.xy, r1.wwww, r2.zwzz, r2.xyxx
    mul r2.xzw, r2.xxxx, cb2[12].xxyz
    exp r2.xzw, r2.xxzw
    mul r3.xyz, r2.yyyy, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    add r3.xyz, -r2.xzwx, r3.xyzx
    mad r2.xyz, cb2[13].wwww, r3.xyzx, r2.xzwx
  else 
    mad r1.w, r0.w, cb2[15].x, cb2[14].z
    mul r1.w, r1.w, cb2[16].x
    lt r2.w, l(0.010000), |v7.z|
    mul r3.x, v7.z, cb2[15].z
    mul r3.y, r3.x, l(-1.442695)
    exp r3.y, r3.y
    add r3.y, -r3.y, l(1.000000)
    div r3.x, r3.y, r3.x
    mul r3.x, r1.w, r3.x
    movc r1.w, r2.w, r3.x, r1.w
    mul r3.xyz, r1.wwww, cb2[12].xyzx
    exp r2.xyz, r3.xyzx
  endif 
  mad r2.xyz, r2.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r2.xyz, r2.xyzx, -cb2[9].zzzz
  dp3 r1.x, cb2[7].yzwy, -r1.xyzx
  mad r1.y, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r1.z, cb2[8].w, -r1.x, l(1.000000)
  mul r1.z, r1.z, r1.z
  mul r1.z, r1.z, l(12.566371)
  div r1.y, r1.y, r1.z
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.y
  mov_sat r1.x, r1.x
  mad r1.x, r1.x, r1.x, l(1.000000)
  mad r1.x, r1.x, l(0.05968310), l(-1.000000)
  mad r1.x, cb2[8].z, r1.x, l(1.000000)
  mul r1.yzw, r0.wwww, cb2[11].xxyz
  mad r1.xyz, r1.xxxx, cb2[10].xyzx, r1.yzwy
  mul r1.xyz, r1.xyzx, cb2[9].wwww
  add r3.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r1.xyz, r1.xyzx, r3.xyzx
  mad r1.xyz, r0.xyzx, r2.xyzx, r1.xyzx
else 
  mul r0.w, v7.z, cb2[6].x
  mad r1.w, cb2[6].x, v7.z, cb2[5].x
  lt r2.x, |r0.w|, l(0.000100)
  min r2.y, r1.w, l(64.000000)
  mul r2.y, r2.y, l(1.442695)
  exp r2.y, r2.y
  mov_sat r2.z, cb2[6].z
  lt r2.w, r1.w, l(0.000000)
  add r1.w, r1.w, l(1.000000)
  movc r1.w, r2.w, r2.y, r1.w
  add r1.w, r1.w, -cb2[6].z
  movc r0.w, r2.x, l(1.000000), r0.w
  div r0.w, r1.w, r0.w
  movc r0.w, r2.x, r2.z, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.w, v7.xyzx, v7.xyzx
  sqrt r2.x, r1.w
  mad r0.w, r0.w, r2.x, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, v7.xyzx
  dp3 r1.w, cb2[7].yzwy, r2.xyzx
  mad_sat r1.w, cb2[8].y, r1.w, cb2[8].x
  add r2.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r2.xyzw, r1.wwww, r2.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r2.w
  add r2.xyz, -r0.xyzx, r2.xyzx
  mad r1.xyz, r0.wwww, r2.xyzx, r0.xyzx
endif 
mul r0.xyz, r1.xyzx, cb1[85].yyyy
ge r1.xyz, r0.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r0.xyz, r0.xyzx, r1.xyzx
min o0.xyz, r0.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ret 
// Approximately 988 instruction slots used
