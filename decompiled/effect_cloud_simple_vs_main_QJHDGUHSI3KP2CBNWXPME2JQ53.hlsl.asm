//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:24:39 2021
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float3 specColorTint;              // Offset:  160 Size:    12 [unused]
//   float baseNormalHeight;            // Offset:  172 Size:     4 [unused]
//   float2 glossRange;                 // Offset:  176 Size:     8 [unused]
//   float2 featherParms;               // Offset:  184 Size:     8
//   float1 alphaDissolve;              // Offset:  192 Size:     4 [unused]
//   bool useOldHDRScale;               // Offset:  196 Size:     4 [unused]
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224 [unused]
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48 [unused]
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4 [unused]
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for fxExclusionVolumes
// {
//
//   struct CoreFXExclusionVolume
//   {
//       
//       bool enabled;                  // Offset:    0
//       row_major float3x3 wldToObb;   // Offset:    4
//       float3 originObb;              // Offset:   40
//       float3 halfExtents;            // Offset:   52
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
// Resource bind info for refProbeConstants
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   224
//
// }
//
// Resource bind info for refProbeAttenuationConstants
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
// Resource bind info for particleCloudInstanceBuffer
// {
//
//   struct CoreParticleCloudPack
//   {
//       
//       uint4 data[4];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// fxExclusionVolumes                texture  struct         r/o             t0      1 
// visibleLights                     texture    uint     2darray             t6      1 
// visibleProbes                     texture    uint     2darray             t7      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// refProbeConstants                 texture  struct         r/o            t15      1 
// refProbeAttenuationConstants      texture  struct         r/o            t16      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// particleCloudInstanceBuffer       texture  struct         r/o            t21      1 
// particleCloudVertexBuffer         texture  float4         buf            t22      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// fx_randomTable                    texture    byte         r/o            t24      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x   
// TEXCOORD                15   x           1     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[12], immediateIndexed
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_structured t0, 64
dcl_resource_texture2darray (uint,uint,uint,uint) t6
dcl_resource_texture2darray (uint,uint,uint,uint) t7
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_structured t15, 224
dcl_resource_structured t16, 96
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t21, 64
dcl_resource_buffer (float,float,float,float) t22
dcl_resource_structured t23, 4
dcl_resource_raw t24
dcl_resource_texture2darray (float,float,float,float) t31
dcl_input_sgv v0.x, vertex_id
dcl_input v1.x
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 22
ushr r0.x, v1.x, l(12)
and r0.y, v1.x, l(4095)
ubfe r0.z, l(1), l(1), v0.x
utof r1.x, r0.z
and r0.z, v0.x, l(1)
utof r1.y, r0.z
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(0), t21.xyzw
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r3.xyzw, r0.x, l(16), t21.xyzw
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r4.xyzw, r0.x, l(32), t21.xyzw
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r0.zw, r0.x, l(48), t21.xxxy
ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r0.x, r0.x, l(60), t21.xxxx
and r1.z, r4.y, l(255)
utof r1.z, r1.z
ubfe r5.xy, l(8, 8, 0, 0), l(8, 16, 0, 0), r4.yyyy
utof r5.xy, r5.xyxx
mul r5.xy, r5.xyxx, l(0.00392157, 0.00392157, 0.000000, 0.000000)
ushr r1.w, r4.y, l(24)
utof r1.w, r1.w
mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.00392157, 0.00392157)
ld_indexable(buffer)(float,float,float,float) r6.xyz, r0.yyyy, t22.xyzw
ushr r7.xyzw, r3.xyzw, l(16, 16, 16, 16)
f16tof32 r3.xyzw, r3.xwzy
f16tof32 r7.xyzw, r7.wxyz
mov r8.xz, r3.xxwx
mov r8.yw, r7.yyyz
mul r9.xyzw, r8.xxxx, r8.xyzw
add r10.xyz, r9.xzwx, r9.xzwx
mul r11.xyz, r7.yyyy, r8.zwyz
add r4.y, r11.y, r11.y
mul r5.zw, r3.wwww, r8.wwwz
add r5.zw, r5.zzzw, r5.zzzw
mad r6.w, r11.z, l(2.000000), r5.w
add r8.x, -r6.w, l(1.000000)
mad r8.yz, r9.yyxy, l(0.000000, 2.000000, 2.000000, 0.000000), r5.zzwz
mad r8.w, r9.z, l(2.000000), -r4.y
mul r8.xyw, r2.wwww, r8.xyxw
mad r9.x, r9.y, l(2.000000), -r5.z
add r9.y, -r8.z, l(1.000000)
mad r10.xyw, r11.xyxz, l(2.000000, 2.000000, 0.000000, 2.000000), r10.zyzx
mov r9.z, r10.x
mul r9.xyz, r2.wwww, r9.xyzx
mad r11.y, r11.x, l(2.000000), -r10.z
mad r11.xz, r10.yywy, l(1.000000, 0.000000, -1.000000, 0.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
mul r10.xyz, r2.wwww, r11.xyzx
add r2.xyz, r2.xyzx, -cb1[24].xyzx
mul r9.xyz, r6.yyyy, r9.xyzx
mad r6.xyw, r6.xxxx, r8.xyxw, r9.xyxz
mad r6.xyz, r6.zzzz, r10.xyzx, r6.xywx
add r2.xyz, r2.xyzx, r6.xyzx
ubfe r5.zw, l(0, 0, 1, 1), l(0, 0, 19, 20), r0.xxxx
dp2 r0.x, -r2.xyxx, -r2.xyxx
rsq r0.x, r0.x
mul r6.xz, r0.xxxx, -r2.yyxy
mov r6.y, l(0)
mov r3.x, r7.w
mul r8.xyz, r6.xyzx, r3.yzxy
mad r6.xyz, r3.xyzx, r6.yzxy, -r8.xyzx
dp3 r0.x, r6.xyzx, r6.xyzx
rsq r0.x, r0.x
mul r6.xyz, r0.xxxx, r6.xyzx
f16tof32 r7.y, r4.x
add r4.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r7.yz, r7.xxyx, r4.xxyx
mad r6.xyz, r6.xyzx, r7.yyyy, r2.xyzx
mad r6.xyz, r3.zxyz, r7.zzzz, r6.xyzx
mov r3.w, r7.x
mul r3.xyzw, r3.zxyw, r4.xxyy
add r3.xy, r3.zwzz, r3.xyxx
mul r3.yzw, r3.yyyy, cb1[17].xxyz
mad r3.xyz, r3.xxxx, cb1[16].xyzx, r3.yzwy
add r2.xyz, r2.xyzx, r3.xyzx
movc r2.xyz, r5.zzzz, r6.xyzx, r2.xyzx
mul r3.xyzw, r2.yyyy, cb1[9].xyzw
mad r3.xyzw, r2.xxxx, cb1[8].xyzw, r3.xyzw
mad r3.xyzw, r2.zzzz, cb1[10].xyzw, r3.xyzw
add r3.xyzw, r3.xyzw, cb1[11].xyzw
if_nz r0.z
  if_nz r0.z
    ubfe r6.xyzw, l(14, 8, 8, 8), l(16, 8, 16, 8), r0.wzzw
    imad r0.x, r0.y, l(500), r6.x
    udiv null, r0.x, r0.x, l(809)
    ushr r4.x, r0.z, l(24)
    and r7.xyzw, r0.wwzz, l(0x0000ffff, 15, 3, 4)
    ubfe r8.z, l(4), l(4), r7.x
    iadd r0.w, r7.y, r8.z
    ishl r4.y, l(1), r0.w
    ishl r0.x, r0.x, l(2)
    iadd r0.x, r0.x, l(88)
    ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.x, r0.x, t24.xxxx
    and r0.x, r0.x, l(0x0000ffff)
    imul null, r0.x, r4.y, r0.x
    ushr r0.x, r0.x, l(16)
    ieq r9.xyz, r7.zzzz, l(1, 0, 3, 0)
    iadd r4.y, r4.y, l(-1)
    ubfe r0.y, r0.w, l(0), r0.y
    movc r0.x, r9.x, r0.x, r0.y
    or r0.y, r9.z, r9.y
    movc r0.x, r0.y, r6.y, r0.x
    utof r0.x, r0.x
    iadd r0.y, r6.w, l(1)
    utof r5.z, r0.y
    mad r4.z, r4.z, r5.z, r0.x
    utof r6.x, r6.z
    mul r4.w, r4.w, r6.x
    mad r0.x, r4.w, l(0.001000), r0.x
    movc r0.x, r7.w, r4.z, r0.x
    round_ni r4.z, r0.x
    ftou r9.x, r4.z
    round_pi r0.x, r0.x
    ftou r9.y, r0.x
    and r7.xzw, r0.zzzz, l(8, 0, 16, 32)
    imul null, r0.x, r4.x, r0.y
    uge r0.xy, r9.xyxx, r0.xxxx
    movc r0.xy, r0.xyxx, r6.wwww, r9.xyxx
    movc r0.xy, r7.xxxx, r0.xyxx, r9.xyxx
    rcp r0.z, r5.z
    utof r4.xz, r0.xxyx
    mul r4.xz, r0.zzzz, r4.xxzx
    frc r4.xz, r4.xxzx
    mul r4.xz, r4.xxzx, r5.zzzz
    ftou r4.xz, r4.xxzx
    iadd r4.xz, r4.xxzx, r6.yyyy
    movc r0.xy, r9.zzzz, r4.xzxx, r0.xyxx
    movc r0.y, r7.z, r0.y, r0.x
    ubfe r0.xy, r0.wwww, l(0, 0, 0, 0), r0.xyxx
    iadd r0.y, -r0.y, r4.y
    movc r8.x, r7.w, r0.y, r0.x
    mov r8.y, r7.y
  else 
    mov r8.xyz, l(0,0,0,0)
  endif 
  ishl r0.xy, r8.yzyy, l(23, 23, 0, 0)
  iadd r0.xy, -r0.xyxx, l(0x3f800000, 0x3f800000, 0, 0)
  ubfe r0.z, r8.y, l(0), r8.x
  ubfe r0.w, r8.z, r8.y, r8.x
  utof r4.xy, r0.zwzz
  add r0.zw, r1.xxxy, r4.xxxy
  mul o2.xy, r0.xyxx, r0.zwzz
else 
  mov o2.xy, r1.xyxx
endif 
log r0.x, r1.z
log r0.yz, r5.xxyx
mul r0.xyz, r0.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
exp r0.xyz, r0.xyzx
ge r1.x, l(1.000000), cb0[11].z
mul_sat r1.y, r3.w, cb0[11].z
mul r1.y, r1.y, r1.w
movc r1.x, r1.x, r1.y, r1.w
ine r1.y, r5.w, l(0)
add r4.xyz, r2.xyzx, cb1[24].xyzx
mov r5.y, l(0)
mov r1.zw, l(0,0,0,0)
mov r4.w, l(0)
loop 
  ige r5.z, r1.w, l(5)
  mov r4.w, l(0)
  breakc_nz r5.z
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r5.z, r1.w, l(0), t0.xxxx
  if_nz r5.z
    ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r6.xyzw, r1.w, l(4), t0.xyzw
    ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r7.xyzw, r1.w, l(20), t0.xyzw
    ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r8.xyzw, r1.w, l(36), t0.xyzw
    mov r9.xy, r6.xwxx
    mov r9.z, r7.z
    dp3 r9.x, r4.xyzx, r9.xyzx
    mov r10.x, r6.y
    mov r10.yz, r7.xxwx
    dp3 r9.y, r4.xyzx, r10.xyzx
    mov r7.x, r6.z
    mov r7.z, r8.x
    dp3 r9.z, r4.xyzx, r7.xyzx
    add r6.xyz, r8.yzwy, r9.xyzx
    ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r7.xyz, r1.w, l(52), t0.xyzx
    lt r6.xyz, |r6.xyzx|, r7.xyzx
    and r5.z, r6.y, r6.x
    and r5.z, r6.z, r5.z
    if_nz r5.z
      mov r1.z, l(-1)
      mov r4.w, l(-1)
      break 
    endif 
    mov r4.w, r5.z
  else 
    mov r4.w, l(0)
  endif 
  iadd r5.x, r1.w, l(1)
  mov r1.zw, r5.yyyx
endloop 
and r1.z, r1.z, r4.w
and r1.y, r1.z, r1.y
movc r0.w, r1.y, l(0), r1.x
lt r1.x, l(0.000000), r0.w
if_nz r1.x
  mul r1.x, r2.y, cb1[5].z
  mad r1.x, r2.x, cb1[4].z, r1.x
  mad r1.x, r2.z, cb1[6].z, r1.x
  mul r1.yzw, r2.yyyy, cb1[9].xxyw
  mad r1.yzw, r2.xxxx, cb1[8].xxyw, r1.yyzw
  mad r1.yzw, r2.zzzz, cb1[10].xxyw, r1.yyzw
  add r1.yzw, r1.yyzw, cb1[11].xxyw
  rcp r1.w, r1.w
  mul r1.yz, r1.wwww, r1.yyzy
  mad r1.yz, r1.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
  mul r1.yz, r1.yyzy, cb1[44].xxyx
  add r4.xy, cb1[44].xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
  max r1.yz, r1.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r1.yz, r4.xxyx, r1.yyzy
  mul r4.xyz, r2.yyyy, cb2[29].xyzx
  mad r4.xyz, r2.xxxx, cb2[28].xyzx, r4.xyzx
  mad r4.xyz, r2.zzzz, cb2[30].xyzx, r4.xyzx
  add r4.xyz, r4.xyzx, cb2[31].xyzx
  add r5.xy, r4.xyxx, -cb2[22].xyxx
  mul r5.xy, r5.xyxx, cb2[22].zzzz
  max r1.w, |r5.y|, |r5.x|
  lt r1.w, l(1.000000), r1.w
  if_nz r1.w
    mul r6.xyz, cb2[27].zxyz, l(128.000000, 0.500000, 0.500000, 0.000000)
    rcp r7.xz, r6.xxxx
    mov r7.y, -r7.z
    mad r6.xyz, r4.xyxx, r7.xyzx, r6.yzyy
    add r7.xyz, cb2[27].xyxx, l(-0.00781250, -0.00781250, -0.00781250, 0.000000)
    max r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r6.xyz, r7.xyzx, r6.xyzx
    mul r5.zw, r6.zzzy, cb2[32].xxxx
    round_ni r5.zw, r5.zzzw
    mul r1.w, r5.w, cb2[27].x
    mad r1.w, r1.w, cb2[32].x, r5.z
    ftou r1.w, r1.w
    iadd r1.w, r1.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.w, r1.w, l(0), t23.xxxx
    and r5.z, r4.w, l(0x40000000)
    ishl r5.w, r4.w, l(2)
    if_z r5.z
      and r5.z, r4.w, l(0x01ffffff)
      iadd r7.x, r1.w, r5.z
      ushr r1.w, r4.w, l(25)
      utof r1.w, r1.w
      mul r6.xyz, r1.wwww, r6.xyzx
      frc r6.xyz, r6.xyzx
      mul r6.xyz, r6.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
      ftou r6.xyz, r6.xyzx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r7.z, r7.x, l(0), t23.xxxx
      ushr r8.xy, r6.zyzz, l(6, 6, 0, 0)
      and r1.w, r7.z, l(0xc0000000)
      iadd r4.w, r7.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r4.w, r4.w, l(0), t23.xxxx
      movc r4.w, r8.y, r7.z, r4.w
      ushr r5.z, r4.w, l(13)
      movc r4.w, r8.x, r5.z, r4.w
      and r4.w, r4.w, l(8191)
      iadd r8.x, r4.w, r7.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.z, r8.x, l(0), t23.xxxx
      mov r7.y, l(0)
      mov r8.y, l(1)
      movc r8.xyz, r1.wwww, r7.xyzx, r8.xyzx
      movc r9.yz, r1.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r10.xy, r6.zyzz, r9.yyyy
      and r10.xy, r10.xyxx, l(1, 1, 0, 0)
      and r4.w, r8.z, l(0xc0000000)
      iadd r5.z, r8.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.z, r5.z, l(0), t23.xxxx
      movc r5.z, r10.y, r8.z, r5.z
      ushr r6.w, r5.z, l(13)
      movc r5.z, r10.x, r6.w, r5.z
      and r5.z, r5.z, l(8191)
      iadd r9.x, r5.z, r8.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.w, r9.x, l(0), t23.xxxx
      movc r8.xyz, r4.wwww, r8.xyzx, r9.xzwx
      movc r7.xyz, r1.wwww, r7.xyzx, r8.xyzx
      and r1.w, r7.z, l(0xc0000000)
      if_z r1.w
        iadd r1.w, -r7.y, l(6)
        ushr r8.xy, r6.zyzz, r1.wwww
        or r1.w, r7.z, l(0x40000000)
        bfi r4.w, l(1), l(1), r8.y, l(0)
        bfi r4.w, l(1), l(0), r8.x, r4.w
        imul null, r4.w, r4.w, l(10)
        ushr r1.w, r1.w, r4.w
        and r1.w, r1.w, l(1023)
        iadd r8.x, r1.w, r7.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r8.w, r8.x, l(0), t23.xxxx
        iadd r8.yz, r7.yyyy, l(0, 1, 2, 0)
        iadd r1.w, -r8.y, l(6)
        ushr r7.yw, r6.zzzy, r1.wwww
        and r1.w, r8.w, l(0xc0000000)
        or r4.w, r8.w, l(0x40000000)
        bfi r5.z, l(1), l(1), r7.w, l(0)
        bfi r5.z, l(1), l(0), r7.y, r5.z
        imul null, r5.z, r5.z, l(10)
        ushr r4.w, r4.w, r5.z
        and r4.w, r4.w, l(1023)
        iadd r9.x, r4.w, r8.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.z, r9.x, l(0), t23.xxxx
        mov r9.y, r8.z
        movc r9.xyz, r1.wwww, r8.xywx, r9.xyzx
        iadd r4.w, -r9.y, l(6)
        ushr r7.yw, r6.zzzy, r4.wwww
        and r4.w, r9.z, l(0xc0000000)
        or r5.z, r9.z, l(0x40000000)
        bfi r6.w, l(1), l(1), r7.w, l(0)
        bfi r6.w, l(1), l(0), r7.y, r6.w
        imul null, r6.w, r6.w, l(10)
        ushr r5.z, r5.z, r6.w
        and r5.z, r5.z, l(1023)
        iadd r10.x, r5.z, r9.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.y, r10.x, l(0), t23.xxxx
        movc r7.yw, r4.wwww, r9.xxxz, r10.xxxy
        movc r7.xz, r1.wwww, r8.xxwx, r7.yywy
      endif 
      and r1.w, r7.z, l(0xc0000000)
      if_z r1.w
        ubfe r4.w, l(14), l(15), r7.z
        utof r4.w, r4.w
        mul r4.w, r4.w, cb2[27].w
        mul r4.w, r4.w, l(0.00006104)
        and r7.yw, r7.zzzz, l(0, 0x00007fff, 0, 0x20000000)
        utof r5.z, r7.y
        mul r5.z, r5.z, cb2[27].w
        mul r5.z, r5.z, l(0.00003052)
        and r6.w, r6.y, l(3)
        iadd r6.w, r6.w, r7.x
        iadd r6.w, r6.w, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.w, r6.w, l(0), t23.xxxx
        bfi r8.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r6.xyzx, l(0, 0, 0, 0)
        ushr r6.x, r6.w, r8.x
        and r6.x, r6.x, l(255)
        utof r6.x, r6.x
        mul r6.x, r5.z, r6.x
        mad r6.x, r6.x, l(0.00392157), r4.w
        iadd r6.y, r8.y, l(1)
        ubfe r6.z, l(1), l(1), r6.z
        iadd r6.y, r6.z, r6.y
        iadd r6.y, r6.y, r7.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r6.y, r6.y, l(0), t23.xxxx
        ushr r6.y, r6.y, r8.z
        and r6.y, r6.y, l(0x0000ffff)
        utof r6.y, r6.y
        mul r5.z, r5.z, r6.y
        mad r4.w, r5.z, l(0.00001526), r4.w
        movc r5.w, r7.w, r6.x, r4.w
      else 
        and r4.w, r7.z, l(0x80000000)
        iadd r5.z, r7.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r5.z, r5.z, l(0), t23.xxxx
        movc r4.w, r4.w, r5.z, l(0)
        ishl r5.z, r7.z, l(2)
        ushr r6.x, r4.w, l(16)
        f16tof32 r6.x, r6.x
        and r4.w, r4.w, l(0x0000ffff)
        f16tof32 r4.w, r4.w
        mad r4.x, r4.x, r6.x, r5.z
        mad r4.x, r4.y, r4.w, r4.x
        movc r5.w, r1.w, r4.x, r5.w
      endif 
    endif 
    mad r1.w, -cb2[27].z, l(2.000000), r4.z
    lt r1.w, r5.w, r1.w
    movc r1.w, r1.w, l(0), l(1.000000)
  else 
    mad r5.xy, r5.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r4.x, r4.z, -cb2[17].w
    mad r4.x, -r4.x, l(0.00006104), l(1.000000)
    iadd r4.y, cb2[26].y, l(2)
    utof r5.z, r4.y
    sample_c_lz_aoffimmi_indexable(1,1,0)(texture2darray)(float,float,float,float) r4.y, r5.xyzx, t13.xxxx, s13, r4.x
    sample_c_lz_aoffimmi_indexable(1,-1,0)(texture2darray)(float,float,float,float) r4.z, r5.xyzx, t13.xxxx, s13, r4.x
    add r4.y, r4.z, r4.y
    sample_c_lz_aoffimmi_indexable(-1,1,0)(texture2darray)(float,float,float,float) r4.z, r5.xyzx, t13.xxxx, s13, r4.x
    add r4.y, r4.z, r4.y
    sample_c_lz_aoffimmi_indexable(-1,-1,0)(texture2darray)(float,float,float,float) r4.x, r5.xyzx, t13.xxxx, s13, r4.x
    add r4.x, r4.x, r4.y
    sample_l_indexable(texture2darray)(float,float,float,float) r4.y, r5.xyzx, t31.yxzw, s0, l(0.000000)
    mad r4.x, r4.x, l(0.250000), r4.y
    add_sat r1.w, r4.x, l(-1.000000)
  endif 
  mul r4.xyz, r1.wwww, cb2[18].xyzx
  mul r4.xyz, r4.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
  mul r1.x, r1.x, l(0.00781250)
  max r1.x, r1.x, l(0.000000)
  min r1.x, r1.x, l(15.000000)
  ftou r1.xyz, r1.xyzx
  ushr r5.xy, r1.yzyy, l(6, 6, 0, 0)
  ishl r5.z, r1.x, l(4)
  mov r1.xy, l(0,0,0,0)
  mov r6.w, l(0)
  mov r2.w, l(1.000000)
  mov r7.z, l(1.000000)
  mov r8.xyz, r4.xyzx
  mov r1.w, l(0)
  loop 
    uge r4.w, r1.w, cb2[0].x
    breakc_nz r4.w
    ushr r1.z, r1.w, l(5)
    iadd r6.xyz, r1.xyzx, r5.xyzx
    ld_indexable(texture2darray)(uint,uint,uint,uint) r1.z, r6.xyzw, t6.yzxw
    mov r9.xyz, r8.xyzx
    mov r9.w, r1.z
    loop 
      breakc_z r9.w
      firstbit_lo r4.w, r9.w
      ishl r5.w, l(1), r4.w
      and r6.x, r5.w, r9.w
      if_nz r6.x
        xor r9.w, r5.w, r9.w
        iadd r4.w, r1.w, r4.w
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r10.xyzw, r4.w, l(0), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.yz, r4.w, l(16), t12.xxyx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r4.w, l(28), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r6.xy, r4.w, l(44), t12.xyxx
        ubfe r5.w, l(3), l(24), r12.x
        switch r5.w
          case l(2)
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r4.w, l(116), t12.xyzw
          dp4 r5.w, r14.xyzw, r2.xyzw
          lt r6.z, r5.w, l(1.000000)
          if_nz r6.z
            mov r13.xyz, r9.xyzx
            break 
          endif 
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r4.w, l(68), t12.xyzw
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r4.w, l(84), t12.xyzw
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r16.xyzw, r4.w, l(172), t12.yzwx
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r17.xyzw, r4.w, l(188), t12.wxyz
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r18.xyzw, r4.w, l(204), t12.xyzw
          add r19.xyz, -r2.xyzx, r10.xyzx
          mul r6.z, r6.y, r6.y
          dp3 r7.w, r19.xyzx, r19.xyzx
          div r6.z, r6.z, r7.w
          min r6.z, r6.z, l(1.000000)
          mad_sat r7.w, r5.w, r12.y, r12.z
          mad_sat r8.w, r5.w, r12.w, r6.x
          mul r12.x, r7.w, r7.w
          mad r7.w, r7.w, l(-2.000000), l(3.000000)
          mul r7.w, r7.w, r12.x
          mul r6.z, r6.z, r7.w
          mul r7.w, r8.w, r8.w
          mad r8.w, r8.w, l(-2.000000), l(3.000000)
          mul r7.w, r7.w, r8.w
          mul r6.z, r6.z, r7.w
          dp4 r14.x, r14.xyzw, r2.xyzw
          dp4 r14.y, r15.xyzw, r2.xyzw
          div r7.xy, r14.xyxx, r5.wwww
          lt r5.w, r16.w, l(0.00048828)
          if_nz r5.w
            mov r17.y, r18.x
            mad_sat r14.xy, |r7.xyxx|, r17.zwzz, r17.xyxx
            mul r14.zw, r14.xxxy, r14.xxxy
            mad r14.xy, r14.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r14.xy, r14.xyxx, r14.zwzz
            mul r5.w, r14.y, r14.x
            mul r5.w, r5.w, r6.z
          else 
            mov r16.w, r17.y
            mul_sat r14.xyzw, |r7.yyxx|, r16.xyzw
            log r14.xyzw, r14.xyzw
            mul r14.xyzw, r14.xyzw, r17.xxxx
            exp r14.xyzw, r14.xyzw
            add r14.xy, r14.zwzz, r14.xyxx
            log r14.xy, r14.xyxx
            mul r14.xy, r14.xyxx, r18.xxxx
            exp r14.xy, r14.xyxx
            mul r7.w, r14.x, r17.z
            mad r8.w, r17.w, r14.y, l(-1.000000)
            mad r7.w, r17.w, r14.y, -r7.w
            div_sat r7.w, r8.w, r7.w
            mul r8.w, r7.w, r7.w
            mad r7.w, r7.w, l(-2.000000), l(3.000000)
            mul r7.w, r7.w, r8.w
            mul r5.w, r6.z, r7.w
          endif 
          ge r6.z, l(0.000000), r5.w
          if_nz r6.z
            mov r13.xyz, r9.xyzx
            break 
          endif 
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r6.z, r4.w, l(236), t12.xxxx
          and r6.z, r6.z, l(255)
          if_nz r6.z
            ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyz, r4.w, l(220), t12.xyzx
            dp3 r4.w, r18.yzwy, r7.xyzx
            dp3 r7.x, r14.xyzx, r7.xyzx
            frc r14.x, r4.w
            frc r14.y, r7.x
            iadd r4.w, r6.z, l(-1)
            utof r14.z, r4.w
            sample_l_indexable(texture2darray)(float,float,float,float) r7.xyw, r14.xyzx, t20.xywz, s2, l(0.000000)
            mov r11.w, r10.w
            mul r11.xyz, r7.xywx, r11.wyzw
          else 
            mov r11.x, r10.w
          endif 
          mul r4.w, r5.w, l(0.250000)
          mul r7.xyw, r11.xyxz, r4.wwww
          dp3 r4.w, r7.xywx, l(0.299000, 0.587000, 0.114000, 0.000000)
          max r4.w, r4.w, l(0.000001)
          min r5.w, r4.w, cb1[85].x
          div r4.w, r5.w, r4.w
          mad r13.xyz, r7.xywx, r4.wwww, r9.xyzx
          break 
          case l(4)
          add r7.xyw, -r2.xyxz, r10.xyxz
          dp3 r4.w, r7.xywx, r7.xywx
          sqrt r5.w, r4.w
          mul r6.y, r6.y, r6.y
          div r4.w, r6.y, r4.w
          min r4.w, r4.w, l(1.000000)
          mad_sat r6.y, r5.w, r12.y, r12.z
          mad_sat r5.w, r5.w, r12.w, r6.x
          mul r6.x, r6.y, r6.y
          mad r6.y, r6.y, l(-2.000000), l(3.000000)
          mul r6.x, r6.y, r6.x
          mul r4.w, r4.w, r6.x
          mul r6.x, r5.w, r5.w
          mad r5.w, r5.w, l(-2.000000), l(3.000000)
          mul r5.w, r5.w, r6.x
          mul r4.w, r4.w, r5.w
          ge r5.w, l(0.000000), r4.w
          if_nz r5.w
            mov r13.xyz, r9.xyzx
            break 
          endif 
          mul r4.w, r4.w, l(0.250000)
          mov r11.w, r10.w
          mul r6.xyz, r4.wwww, r11.wyzw
          dp3 r4.w, r6.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
          max r4.w, r4.w, l(0.000001)
          min r5.w, r4.w, cb1[85].x
          div r4.w, r5.w, r4.w
          mad r13.xyz, r6.xyzx, r4.wwww, r9.xyzx
          break 
          default 
          mov r13.xyz, r9.xyzx
          break 
        endswitch 
        mov r9.xyz, r13.xyzx
      endif 
    endloop 
    mov r8.xyz, r9.xyzx
    iadd r1.w, r1.w, l(32)
  endloop 
  iadd r1.x, cb2[0].y, -cb2[58].x
  and r1.y, r1.x, l(-32)
  mov r4.xy, l(0,0,0,0)
  mov r6.w, l(0)
  mov r7.yz, l(0,0,1.000000,0)
  mov r9.x, l(1.000000)
  mov r10.xyz, l(0,0,0,0)
  mov r1.z, l(0)
  mov r1.w, r1.y
  loop 
    uge r2.w, r1.w, cb2[0].y
    breakc_nz r2.w
    ushr r4.z, r1.w, l(5)
    iadd r6.xyz, r4.xyzx, r5.xyzx
    ld_indexable(texture2darray)(uint,uint,uint,uint) r2.w, r6.xyzw, t7.yzwx
    mov r6.xyz, r10.xyzx
    mov r4.z, r1.z
    mov r4.w, r2.w
    loop 
      breakc_z r4.w
      firstbit_lo r5.w, r4.w
      ishl r7.w, l(1), r5.w
      and r8.w, r4.w, r7.w
      if_nz r8.w
        xor r7.w, r4.w, r7.w
        iadd r5.w, r1.w, r5.w
        uge r8.w, r5.w, cb2[0].y
        if_nz r8.w
          break 
        endif 
        ult r8.w, r5.w, r1.x
        if_nz r8.w
          mov r4.w, r7.w
          continue 
        endif 
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r11.xyzw, r5.w, l(0), t15.wxyz
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r12.xyzw, r5.w, l(88), t15.zxyw
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r8.w, r5.w, l(120), t15.xxxx
        add r13.xyz, r2.xyzx, -r11.yzwy
        and r9.z, r8.w, l(0x0000ffff)
        ubfe r8.w, l(6), l(25), r8.w
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r14.xyzw, r9.z, l(0), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r15.xyzw, r9.z, l(16), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r16.xyzw, r9.z, l(32), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r17.xyzw, r9.z, l(48), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r18.xyzw, r9.z, l(64), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r19.xyzw, r9.z, l(80), t16.xyzw
        dp3 r9.w, r14.xyzx, r13.xyzx
        add_sat r9.w, r14.w, r9.w
        dp3 r10.w, r15.xyzx, r13.xyzx
        add_sat r10.w, r15.w, r10.w
        mul r9.w, r9.w, r10.w
        dp3 r10.w, r16.xyzx, r13.xyzx
        add_sat r10.w, r16.w, r10.w
        mul r9.w, r9.w, r10.w
        dp3 r10.w, r17.xyzx, r13.xyzx
        add_sat r10.w, r17.w, r10.w
        mul r9.w, r9.w, r10.w
        dp3 r10.w, r18.xyzx, r13.xyzx
        add_sat r10.w, r18.w, r10.w
        mul r9.w, r9.w, r10.w
        dp3 r10.w, r19.xyzx, r13.xyzx
        add_sat r10.w, r19.w, r10.w
        mul r7.x, r9.w, r10.w
        and r9.w, r12.x, l(1)
        movc r14.xy, r9.wwww, r7.xyxx, r7.zxzz
        mov r7.x, r12.x
        mov r15.xy, r14.xyxx
        mov r9.w, l(1)
        loop 
          ige r10.w, r9.w, r8.w
          breakc_nz r10.w
          iadd r10.w, r9.w, r9.z
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r16.xyzw, r10.w, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r17.xyzw, r10.w, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r18.xyzw, r10.w, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r19.xyzw, r10.w, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r20.xyzw, r10.w, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r21.xyzw, r10.w, l(80), t16.xyzw
          dp3 r10.w, r16.xyzx, r13.xyzx
          add_sat r10.w, r16.w, r10.w
          mul r10.w, r10.w, r15.x
          dp3 r11.w, r17.xyzx, r13.xyzx
          add_sat r11.w, r17.w, r11.w
          mul r10.w, r10.w, r11.w
          dp3 r11.w, r18.xyzx, r13.xyzx
          add_sat r11.w, r18.w, r11.w
          mul r10.w, r10.w, r11.w
          dp3 r11.w, r19.xyzx, r13.xyzx
          add_sat r11.w, r19.w, r11.w
          mul r10.w, r10.w, r11.w
          dp3 r11.w, r20.xyzx, r13.xyzx
          add_sat r11.w, r20.w, r11.w
          mul r10.w, r10.w, r11.w
          dp3 r11.w, r21.xyzx, r13.xyzx
          add_sat r11.w, r21.w, r11.w
          mul r15.x, r10.w, r11.w
          ushr r13.w, r7.x, l(2)
          ubfe r14.z, l(1), l(2), r7.x
          and r14.w, r13.w, l(2)
          max r15.z, r15.x, r15.y
          mad r10.w, -r10.w, r11.w, l(1.000000)
          mul r10.w, r10.w, r15.y
          movc r9.y, r14.w, r10.w, r15.z
          movc r15.xy, r14.zzzz, r15.xyxx, r9.xyxx
          iadd r9.w, r9.w, l(1)
          mov r7.x, r13.w
        endloop 
        mov_sat r15.y, r15.y
        mul r7.x, r12.w, r15.y
        lt r8.w, l(0.000000), r7.x
        if_nz r8.w
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r14.xyzw, r5.w, l(16), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r16.xyzw, r5.w, l(32), t15.yxwz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r9.yzw, r5.w, l(48), t15.xxyz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r17.xyzw, r5.w, l(72), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r18.xyzw, r5.w, l(104), t15.xyzw
          mov r11.y, r14.z
          mov r11.z, r16.x
          dp3 r11.x, r13.xyzx, r11.xyzx
          mov r19.xy, r14.xwxx
          mov r19.z, r16.w
          dp3 r11.y, r13.xyzx, r19.xyzx
          mov r16.x, r14.y
          dp3 r11.z, r13.xyzx, r16.xyzx
          mad_sat r9.yzw, r11.xxyz, r9.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000)
          mov r12.x, r17.w
          mad r9.yzw, r9.yyzw, r17.xxyz, r12.xxyz
          add r11.xyz, r9.yzwy, l(0.000000, 0.000000, 0.500000, 0.000000)
          sample_l_indexable(texture3d)(float,float,float,float) r12.xyz, r9.yzwy, t17.xyzw, s4, l(0.000000)
          sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r9.yzwy, t18.xyzw, s4, l(0.000000)
          add r12.xyz, r12.xyzx, r13.xyzx
          sample_l_indexable(texture3d)(float,float,float,float) r9.yzw, r9.yzwy, t19.wxyz, s4, l(0.000000)
          add r9.yzw, r9.yyzw, r12.xxyz
          sample_l_indexable(texture3d)(float,float,float,float) r12.xyz, r11.xyzx, t17.xyzw, s4, l(0.000000)
          add r9.yzw, r9.yyzw, r12.xxyz
          sample_l_indexable(texture3d)(float,float,float,float) r12.xyz, r11.xyzx, t18.xyzw, s4, l(0.000000)
          add r9.yzw, r9.yyzw, r12.xxyz
          sample_l_indexable(texture3d)(float,float,float,float) r11.xyz, r11.xyzx, t19.xyzw, s4, l(0.000000)
          add r9.yzw, r9.yyzw, r11.xxyz
          mul r5.w, r7.x, r18.w
          mul r5.w, r5.w, l(0.16666667)
          mul r9.yzw, r5.wwww, r9.yyzw
          mad r6.xyz, r9.yzwy, r18.xyzx, r6.xyzx
          mad r4.z, r15.y, r12.w, r4.z
        endif 
        mov r4.w, r7.w
      endif 
    endloop 
    mov r10.xyz, r6.xyzx
    mov r1.z, r4.z
    iadd r1.w, r1.w, l(32)
  endloop 
  lt r1.y, r1.z, l(1.000000)
  if_nz r1.y
    mov r4.xy, l(0,0,0,0)
    mov r6.w, l(0)
    mov r7.yz, l(0,0,1.000000,0)
    mov r9.x, l(1.000000)
    mov r11.xyz, r10.xyzx
    mov r1.y, r1.z
    mov r1.w, l(0)
    loop 
      uge r2.w, r1.w, r1.x
      breakc_nz r2.w
      ushr r4.z, r1.w, l(5)
      iadd r6.xyz, r4.xyzx, r5.xyzx
      ld_indexable(texture2darray)(uint,uint,uint,uint) r2.w, r6.xyzw, t7.yzwx
      mov r6.xyz, r11.xyzx
      mov r4.z, r1.y
      mov r4.w, r2.w
      loop 
        breakc_z r4.w
        firstbit_lo r5.w, r4.w
        ishl r7.w, l(1), r5.w
        and r8.w, r4.w, r7.w
        if_nz r8.w
          xor r4.w, r4.w, r7.w
          iadd r5.w, r1.w, r5.w
          uge r7.w, r5.w, r1.x
          if_nz r7.w
            break 
          endif 
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r12.xyzw, r5.w, l(0), t15.wxyz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r13.xyzw, r5.w, l(88), t15.zxyw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r7.w, r5.w, l(120), t15.xxxx
          add r14.xyz, r2.xyzx, -r12.yzwy
          and r8.w, r7.w, l(0x0000ffff)
          ubfe r7.w, l(6), l(25), r7.w
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r15.xyzw, r8.w, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r16.xyzw, r8.w, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r17.xyzw, r8.w, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r18.xyzw, r8.w, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r19.xyzw, r8.w, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r20.xyzw, r8.w, l(80), t16.xyzw
          dp3 r9.z, r15.xyzx, r14.xyzx
          add_sat r9.z, r15.w, r9.z
          dp3 r9.w, r16.xyzx, r14.xyzx
          add_sat r9.w, r16.w, r9.w
          mul r9.z, r9.w, r9.z
          dp3 r9.w, r17.xyzx, r14.xyzx
          add_sat r9.w, r17.w, r9.w
          mul r9.z, r9.w, r9.z
          dp3 r9.w, r18.xyzx, r14.xyzx
          add_sat r9.w, r18.w, r9.w
          mul r9.z, r9.w, r9.z
          dp3 r9.w, r19.xyzx, r14.xyzx
          add_sat r9.w, r19.w, r9.w
          mul r9.z, r9.w, r9.z
          dp3 r9.w, r20.xyzx, r14.xyzx
          add_sat r9.w, r20.w, r9.w
          mul r7.x, r9.w, r9.z
          and r9.z, r13.x, l(1)
          movc r9.zw, r9.zzzz, r7.xxxy, r7.zzzx
          mov r7.x, r13.x
          mov r15.xy, r9.zwzz
          mov r10.w, l(1)
          loop 
            ige r11.w, r10.w, r7.w
            breakc_nz r11.w
            iadd r11.w, r8.w, r10.w
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r16.xyzw, r11.w, l(0), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r17.xyzw, r11.w, l(16), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r18.xyzw, r11.w, l(32), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r19.xyzw, r11.w, l(48), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r20.xyzw, r11.w, l(64), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r21.xyzw, r11.w, l(80), t16.xyzw
            dp3 r11.w, r16.xyzx, r14.xyzx
            add_sat r11.w, r16.w, r11.w
            mul r11.w, r11.w, r15.x
            dp3 r12.w, r17.xyzx, r14.xyzx
            add_sat r12.w, r17.w, r12.w
            mul r11.w, r11.w, r12.w
            dp3 r12.w, r18.xyzx, r14.xyzx
            add_sat r12.w, r18.w, r12.w
            mul r11.w, r11.w, r12.w
            dp3 r12.w, r19.xyzx, r14.xyzx
            add_sat r12.w, r19.w, r12.w
            mul r11.w, r11.w, r12.w
            dp3 r12.w, r20.xyzx, r14.xyzx
            add_sat r12.w, r20.w, r12.w
            mul r11.w, r11.w, r12.w
            dp3 r12.w, r21.xyzx, r14.xyzx
            add_sat r12.w, r21.w, r12.w
            mul r15.x, r11.w, r12.w
            ushr r14.w, r7.x, l(2)
            ubfe r15.z, l(1), l(2), r7.x
            and r15.w, r14.w, l(2)
            max r16.x, r15.x, r15.y
            mad r11.w, -r11.w, r12.w, l(1.000000)
            mul r11.w, r11.w, r15.y
            movc r9.y, r15.w, r11.w, r16.x
            movc r15.xy, r15.zzzz, r15.xyxx, r9.xyxx
            iadd r10.w, r10.w, l(1)
            mov r7.x, r14.w
          endloop 
          add_sat r7.x, -r1.z, r15.y
          mul r7.w, r13.w, r7.x
          lt r8.w, l(0.000000), r7.w
          if_nz r8.w
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r16.xyzw, r5.w, l(16), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r17.xyzw, r5.w, l(32), t15.yxwz
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r9.yzw, r5.w, l(48), t15.xxyz
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r18.xyzw, r5.w, l(72), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r19.xyzw, r5.w, l(104), t15.xyzw
            mov r12.y, r16.z
            mov r12.z, r17.x
            dp3 r12.x, r14.xyzx, r12.xyzx
            mov r20.xy, r16.xwxx
            mov r20.z, r17.w
            dp3 r12.y, r14.xyzx, r20.xyzx
            mov r17.x, r16.y
            dp3 r12.z, r14.xyzx, r17.xyzx
            mad_sat r9.yzw, r12.xxyz, r9.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000)
            mov r13.x, r18.w
            mad r9.yzw, r9.yyzw, r18.xxyz, r13.xxyz
            add r12.xyz, r9.yzwy, l(0.000000, 0.000000, 0.500000, 0.000000)
            sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r9.yzwy, t17.xyzw, s4, l(0.000000)
            sample_l_indexable(texture3d)(float,float,float,float) r14.xyz, r9.yzwy, t18.xyzw, s4, l(0.000000)
            add r13.xyz, r13.xyzx, r14.xyzx
            sample_l_indexable(texture3d)(float,float,float,float) r9.yzw, r9.yzwy, t19.wxyz, s4, l(0.000000)
            add r9.yzw, r9.yyzw, r13.xxyz
            sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r12.xyzx, t17.xyzw, s4, l(0.000000)
            add r9.yzw, r9.yyzw, r13.xxyz
            sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r12.xyzx, t18.xyzw, s4, l(0.000000)
            add r9.yzw, r9.yyzw, r13.xxyz
            sample_l_indexable(texture3d)(float,float,float,float) r12.xyz, r12.xyzx, t19.xyzw, s4, l(0.000000)
            add r9.yzw, r9.yyzw, r12.xxyz
            mul r5.w, r7.w, r19.w
            mul r5.w, r5.w, l(0.16666667)
            mul r9.yzw, r5.wwww, r9.yyzw
            mad r6.xyz, r9.yzwy, r19.xyzx, r6.xyzx
            mad r4.z, r7.x, r13.w, r4.z
          endif 
        endif 
      endloop 
      mov r11.xyz, r6.xyzx
      mov r1.y, r4.z
      iadd r1.w, r1.w, l(32)
    endloop 
    mov r10.xyz, r11.xyzx
    mov r1.z, r1.y
  endif 
  max r1.x, r1.z, l(0.000100)
  rcp r1.x, r1.x
  mov_sat r1.z, r1.z
  mul r2.xyz, r1.xxxx, r10.xyzx
  ne r1.y, l(0.000000, 0.000000, 0.000000, 0.000000), r1.z
  mad r4.xyz, r10.xyzx, r1.xxxx, r8.xyzx
  mad r1.x, -r1.z, l(1.010101), l(1.000000)
  mul r5.xyz, cb2[19].xxxx, cb2[19].yzwy
  mad r1.xzw, r5.xxyz, r1.xxxx, r2.xxyz
  add r1.xzw, r1.xxzw, r8.xxyz
  movc r1.xyz, r1.yyyy, r4.xyzx, r1.xzwx
  mul r0.xyz, r0.xyzx, r1.xyzx
endif 
mov o0.xyzw, r3.xyzw
mov o1.xyzw, r0.xyzw
ret 
// Approximately 860 instruction slots used
