//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:22 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 24
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(54), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.yz, r0.xxyx, l(0, 4095, 4095, 0)
imad r1.xy, r0.yzyy, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
utof r4.xy, r1.xyxx
add r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
mul r5.xy, r4.zwzz, cb1[44].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r5.x, r5.xyxx, t27.xyzw, s4, l(0.000000)
mul r3.z, r3.z, r5.x
if_nz cb2[55].x
  mul r5.x, r3.z, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r5.xxxx
  ret 
else 
  movc r5.x, cb2[54].w, r3.z, l(1.000000)
endif 
ge r3.z, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.y, r1.xyww, t4.yxzw
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
ge r11.x, r5.y, l(0.984375)
mul r1.z, r5.y, l(1.01587307)
mad r1.w, r5.y, l(64.000000), l(-63.000000)
movc r1.z, r11.x, r1.w, r1.z
max r1.z, r1.z, l(0.00000001)
rcp r11.y, r1.z
and r1.zw, r0.wwww, r11.xxxy
add r4.zw, r4.zzzw, -cb1[71].xxxy
mul r4.zw, r4.zzzw, cb1[44].zzzw
mad r4.zw, r4.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r11.x, r4.z, cb1[12].x
mul r11.y, r4.w, cb1[13].y
mov r11.z, l(1.000000)
mul r5.yzw, r1.wwww, r11.xxyz
mul r11.xyz, r5.zzzz, cb1[17].xyzx
mad r11.xyz, r5.yyyy, cb1[16].xyzx, r11.xyzx
mad r11.xyz, r5.wwww, cb1[18].xyzx, r11.xyzx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r12.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r12.z
mul r12.xy, r1.wwww, r2.xyxx
and r13.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r13.xyzw, r13.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r13.w, r13.z
movc r13.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r13.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r5.yzw, r13.xxyz, l(0.000000, 1.000000, -2.000000, 1.000000)
mul r12.xyz, r12.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r12.yyyy
mad r2.xyw, r5.yzyw, r12.xxxx, r2.xyxw
mad r12.xyz, r13.xyzx, r12.zzzz, r2.xywx
movc r0.w, r3.z, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r11.xyzx, -r11.xyzx
rsq r0.w, r0.w
mul r5.yzw, r0.wwww, -r11.xxyz
dp2 r0.w, r4.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r4.x, r13.x, r0.w
dp3_sat r2.x, r12.xyzx, r5.yzwy
dp3 r0.w, -r5.yzwy, r12.xyzx
add r0.w, r0.w, r0.w
mad r14.xyz, r12.xyzx, -r0.wwww, -r5.yzwy
mul r0.w, r2.y, l(17.000000)
exp r0.w, r0.w
add r0.w, r0.w, l(2.000000)
div r0.w, l(2.000000), r0.w
sqrt r1.w, r0.w
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r2.zw, r2.zzzw
ieq r2.zw, r1.xxxy, r2.zzzw
and r2.z, r2.w, r2.z
add r2.w, -r2.y, l(1.000000)
mul r2.w, r2.w, l(5.000000)
add r4.yzw, r11.xxyz, -cb2[35].xxyz
mul r15.x, r4.y, cb2[35].w
mul r15.yz, r4.zzwz, cb2[36].xxyx
add_sat r4.yzw, r15.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
mul r15.xy, r4.yzyy, cb2[36].zwzz
mul r15.z, r4.w, cb2[37].x
add r4.yzw, r15.xxyz, cb2[37].yyzw
lt r13.yzw, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xxyz
movc r15.xyz, r13.yzwy, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
mov r15.w, l(0)
add r13.yzw, r4.yyzw, r15.wwwx
sample_l_indexable(texture3d)(float,float,float,float) r13.yzw, r13.yzwy, t17.wxyz, s4, l(0.000000)
mul r16.xyz, r12.xyzx, r12.xyzx
mul r16.xyz, r16.xyzx, cb2[19].xxxx
add r17.xyz, r4.yzwy, r15.wwyw
sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r17.xyzx, t18.xyzw, s4, l(0.000000)
mul r17.xyz, r16.yyyy, r17.xyzx
mad r13.yzw, r13.yyzw, r16.xxxx, r17.xxyz
add r4.yzw, r4.yyzw, r15.wwwz
sample_l_indexable(texture3d)(float,float,float,float) r4.yzw, r4.yzwy, t19.wxyz, s4, l(0.000000)
mad r4.yzw, r4.yyzw, r16.zzzz, r13.yyzw
mov r12.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r13.yzw, r12.xyzw, t8.wxyz, s2, l(6.000000)
mul r4.yzw, r4.yyzw, r13.yyzw
dp3 r3.z, r4.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
mov r14.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r13.yzw, r14.xyzw, t8.wxyz, s2, r2.w
add r2.w, -r3.z, cb2[19].x
mad r2.w, r2.y, r2.w, r3.z
mul r13.yzw, r2.wwww, r13.yyzw
add r2.w, r5.x, r2.x
log r2.w, |r2.w|
mul r2.w, r1.w, r2.w
exp r2.w, r2.w
add r2.w, r5.x, r2.w
add_sat r2.w, r2.w, l(-1.000000)
mul r4.yzw, r5.xxxx, r4.yyzw
mad r15.xy, r2.xyxx, l(0.984375, 0.984375, 0.000000, 0.000000), l(0.00781250, 0.00781250, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r15.xy, r15.xyxx, t5.xyzw, s2, l(0.000000)
mul r13.yzw, r2.wwww, r13.yyzw
mul r15.xzw, r15.xxxx, r13.yyzw
mul r13.yzw, r15.yyyy, r13.yyzw
sqrt r2.y, r1.w
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r2.w, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r3.z, r2.x, r2.y, r2.w
mul r2.yw, r2.yyyw, r3.zzzz
ushr r0.x, r0.x, l(24)
imul null, r0.x, r0.x, l(15)
ubfe r3.z, l(3), l(24), cb9[r0.x + 1].w
switch r3.z
  case l(4)
  if_nz r2.z
    add r16.yzw, cb1[24].xxyz, cb9[r0.x + 0].xxyz
    mov r16.x, l(2)
    store_structured u2.xyzw, cb2[52].x, l(112), r16.xyzw
  endif 
  lt r5.x, l(0.000000), cb9[r0.x + 6].y
  mov r16.xy, cb9[r0.x + 5].zwzz
  mov r16.z, cb9[r0.x + 6].x
  mad r17.xyz, -r16.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), cb9[r0.x + 0].xyzx
  add r18.xyz, -r11.xyzx, r17.xyzx
  dp3 r6.w, r16.xyzx, r18.xyzx
  div_sat r7.w, -r6.w, cb9[r0.x + 6].y
  mad r19.xyz, r7.wwww, r16.xyzx, r17.xyzx
  movc r19.xyz, r5.xxxx, r19.xyzx, cb9[r0.x + 0].xyzx
  add r19.xyz, -r11.xyzx, r19.xyzx
  dp3 r8.w, r19.xyzx, r19.xyzx
  rsq r9.w, r8.w
  mul r19.xyz, r9.wwww, r19.xyzx
  dp3 r9.w, r12.xyzx, r19.xyzx
  mov_sat r10.w, r9.w
  lt r12.w, l(0.000000), r10.w
  if_nz r12.w
    sqrt r12.w, r8.w
    mul r14.w, cb9[r0.x + 3].x, cb9[r0.x + 3].x
    div r8.w, r14.w, r8.w
    min r8.w, r8.w, l(1.000000)
    mad_sat r19.xy, r12.wwww, cb9[r0.x + 2].xzxx, cb9[r0.x + 2].ywyy
    mul r19.zw, r19.xxxy, r19.xxxy
    mad r19.xy, r19.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
    mul r19.xy, r19.xyxx, r19.zwzz
    mul r8.w, r8.w, r19.x
    mul r8.w, r19.y, r8.w
    lt r12.w, l(0.000000), r8.w
    if_nz r12.w
      ubfe r12.w, l(3), l(27), cb9[r0.x + 1].w
      if_nz r2.z
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r14.w, cb2[52].x, l(112), u2.xxxx
        or r14.w, r14.w, l(4)
        store_structured u2.x, cb2[52].x, l(112), r14.w
        store_structured u2.x, cb2[52].x, l(128), r8.w
      endif 
      ine r12.w, r12.w, l(1)
      if_nz r12.w
        utof r19.xy, r1.yxyy
        dp2 r12.w, r19.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
        frc r12.w, r12.w
        mul r12.w, r12.w, l(52.982918)
        frc r12.w, r12.w
        mad r12.w, r12.w, l(6.28318548), cb1[70].w
        sincos r19.x, r20.x, r12.w
        mad r12.w, |r9.w|, l(-0.200000), l(0.400000)
        mad r19.yzw, r12.xxyz, r12.wwww, r11.xxyz
        add r19.yzw, r19.yyzw, -cb9[r0.x + 4].yyzw
        max r12.w, |r19.w|, |r19.z|
        max r12.w, r12.w, |r19.y|
        div r12.w, cb9[r0.x + 5].x, r12.w
        add r12.w, r12.w, cb9[r0.x + 5].y
        dp3 r14.w, r19.yzwy, r19.yzwy
        rsq r14.w, r14.w
        max r12.w, r12.w, l(0.00006104)
        and r15.y, l(0x0000ffff), cb9[r0.x + 1].w
        mov r21.x, -r4.x
        utof r22.w, r15.y
        mov r21.y, r13.x
        mov r21.z, r4.x
        mov r15.y, l(0)
        mov r16.w, l(0)
        loop 
          ige r17.w, r16.w, l(8)
          breakc_nz r17.w
          dp2 r20.y, icb[r16.w + 0].yxyy, r21.xyxx
          dp2 r20.z, icb[r16.w + 0].yxyy, r21.yzyy
          mul r23.yz, r20.yyzy, cb9[r0.x + 3].yyyy
          mul r23.x, r20.x, r23.y
          mul r23.w, r19.x, r23.y
          mad r22.xyz, r19.yzwy, r14.wwww, r23.xzwx
          sample_c_lz_indexable(texturecubearray)(float,float,float,float) r17.w, r22.xyzw, t10.xxxx, s13, r12.w
          mad r15.y, r17.w, l(0.125000), r15.y
          iadd r16.w, r16.w, l(1)
        endloop 
      else 
        mov r15.y, l(1.000000)
      endif 
      mul r8.w, r8.w, r15.y
      lt r12.w, l(0.000000), r8.w
      if_nz r12.w
        mul r12.w, r0.w, cb9[r0.x + 1].z
        mul r12.w, r12.w, l(0.250000)
        dp3 r14.w, r16.xyzx, r14.xyzx
        dp3 r14.x, r14.xyzx, r18.xyzx
        mad r14.y, -r14.w, r14.w, cb9[r0.x + 6].y
        mad r6.w, r14.w, r14.x, -r6.w
        div_sat r6.w, r6.w, r14.y
        div r14.x, r14.y, cb9[r0.x + 6].y
        mul r14.x, r14.x, l(10.000000)
        min r14.x, r14.x, l(1.000000)
        add r6.w, -r7.w, r6.w
        mad r6.w, r14.x, r6.w, r7.w
        mad r14.xyz, r6.wwww, r16.xyzx, r17.xyzx
        movc r14.xyz, r5.xxxx, r14.xyzx, cb9[r0.x + 0].xyzx
        add r14.xyz, -r11.xyzx, r14.xyzx
        dp3 r5.x, r14.xyzx, r14.xyzx
        rsq r5.x, r5.x
        mul r16.xyz, r5.xxxx, r14.xyzx
        ubfe r6.w, l(4), l(16), cb9[r0.x + 1].w
        ult r7.w, l(0), r6.w
        and r7.w, r1.z, r7.w
        if_nz r7.w
          iadd r6.w, r6.w, cb2[0].x
          imad r6.w, r6.w, l(15), l(-15)
          mad r7.w, |r9.w|, l(-0.200000), l(0.400000)
          mad r17.xyz, r12.xyzx, r7.wwww, r11.xyzx
          mov r18.xyz, cb9[r6.w + 6].yzwy
          mov r18.w, cb9[r6.w + 7].x
          mov r17.w, l(1.000000)
          dp4 r7.w, r18.xyzw, r17.xyzw
          mov r18.xyz, cb9[r6.w + 7].yzwy
          mov r18.w, cb9[r6.w + 8].x
          dp4 r14.w, r18.xyzw, r17.xyzw
          lt r15.y, r14.w, r7.w
          if_z r15.y
            mov r18.xyz, cb9[r6.w + 4].yzwy
            mov r18.w, cb9[r6.w + 5].x
            dp4 r18.x, r18.xyzw, r17.xyzw
            mov r19.xyz, cb9[r6.w + 5].yzwy
            mov r19.w, cb9[r6.w + 6].x
            dp4 r18.y, r19.xyzw, r17.xyzw
            div r17.xy, r18.xyxx, r14.wwww
            mad r17.xy, r17.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r18.x, r17.x, cb9[r6.w + 9].w
            add r18.y, r17.y, cb9[r6.w + 10].x
            mul r17.xy, r18.xyxx, cb9[r6.w + 9].yzyy
            div r17.zw, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].yyyw
            add r18.xy, -r17.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r18.xy, r17.xyxx, r18.xyxx
            ge r17.zw, r17.zzzw, r17.xxxy
            or r17.zw, r17.zzzw, r18.xxxy
            or r16.w, r17.w, r17.z
            if_z r16.w
              mov_sat r17.xy, r17.xyxx
              mad r18.x, r17.x, cb9[r6.w + 8].y, cb9[r6.w + 8].z
              mad r18.y, r17.y, cb9[r6.w + 8].w, cb9[r6.w + 9].x
              mul r17.x, r14.w, cb9[r6.w + 10].z
              mad r7.w, cb9[r6.w + 10].y, r14.w, r7.w
              div r7.w, r7.w, r17.x
            endif 
          else 
            mov r16.w, l(-1)
          endif 
          or r14.w, r15.y, r16.w
          if_z r14.w
            max r7.w, r7.w, l(0.00006104)
            and r14.w, l(0x0000ffff), cb9[r6.w + 1].w
            if_nz cb2[58].y
              mov r17.x, -r4.x
              utof r19.z, r14.w
              mov r17.y, r13.x
              mov r17.z, r4.x
              mov r15.y, l(0)
              mov r16.w, l(0)
              loop 
                ige r17.w, r16.w, l(8)
                breakc_nz r17.w
                dp2 r20.x, icb[r16.w + 0].yxyy, r17.xyxx
                dp2 r20.y, icb[r16.w + 0].yxyy, r17.yzyy
                mad r19.xy, r20.xyxx, cb9[r6.w + 3].yyyy, r18.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r19.xyzx, t9.xxxx, s13, r7.w
                mad r15.y, r17.w, l(0.125000), r15.y
                iadd r16.w, r16.w, l(1)
              endloop 
            else 
              utof r18.z, r14.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.y, r18.xyzx, t9.xxxx, s13, r7.w
            endif 
            mul r6.w, r15.y, r15.y
            mul r6.w, r15.y, r6.w
          else 
            mov r6.w, l(1.000000)
          endif 
          mul r8.w, r6.w, r8.w
        else 
          ubfe r6.w, l(4), l(20), cb9[r0.x + 1].w
          ult r7.w, l(0), r6.w
          not r14.w, r1.z
          and r7.w, r7.w, r14.w
          if_nz r7.w
            iadd r6.w, r6.w, cb2[0].x
            imad r6.w, r6.w, l(15), l(-15)
            mad r7.w, |r9.w|, l(-0.200000), l(0.400000)
            mad r17.xyz, r12.xyzx, r7.wwww, r11.xyzx
            mov r18.xyz, cb9[r6.w + 6].yzwy
            mov r18.w, cb9[r6.w + 7].x
            mov r17.w, l(1.000000)
            dp4 r7.w, r18.xyzw, r17.xyzw
            mov r18.xyz, cb9[r6.w + 7].yzwy
            mov r18.w, cb9[r6.w + 8].x
            dp4 r14.w, r18.xyzw, r17.xyzw
            lt r15.y, r14.w, r7.w
            if_z r15.y
              mov r18.xyz, cb9[r6.w + 4].yzwy
              mov r18.w, cb9[r6.w + 5].x
              dp4 r18.x, r18.xyzw, r17.xyzw
              mov r19.xyz, cb9[r6.w + 5].yzwy
              mov r19.w, cb9[r6.w + 6].x
              dp4 r18.y, r19.xyzw, r17.xyzw
              div r17.xy, r18.xyxx, r14.wwww
              mad r17.xy, r17.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r18.x, r17.x, cb9[r6.w + 9].w
              add r18.y, r17.y, cb9[r6.w + 10].x
              mul r17.xy, r18.xyxx, cb9[r6.w + 9].yzyy
              div r17.zw, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].yyyw
              add r18.xy, -r17.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r18.xy, r17.xyxx, r18.xyxx
              ge r17.zw, r17.zzzw, r17.xxxy
              or r17.zw, r17.zzzw, r18.xxxy
              or r16.w, r17.w, r17.z
              if_z r16.w
                mov_sat r17.xy, r17.xyxx
                mad r18.x, r17.x, cb9[r6.w + 8].y, cb9[r6.w + 8].z
                mad r18.y, r17.y, cb9[r6.w + 8].w, cb9[r6.w + 9].x
                mul r17.x, r14.w, cb9[r6.w + 10].z
                mad r7.w, cb9[r6.w + 10].y, r14.w, r7.w
                div r7.w, r7.w, r17.x
              endif 
            else 
              mov r16.w, l(-1)
            endif 
            or r14.w, r15.y, r16.w
            if_z r14.w
              max r7.w, r7.w, l(0.00006104)
              and r14.w, l(0x0000ffff), cb9[r6.w + 1].w
              if_nz cb2[58].y
                mov r17.x, -r4.x
                utof r19.z, r14.w
                mov r17.y, r13.x
                mov r17.z, r4.x
                mov r15.y, l(0)
                mov r16.w, l(0)
                loop 
                  ige r17.w, r16.w, l(8)
                  breakc_nz r17.w
                  dp2 r20.x, icb[r16.w + 0].yxyy, r17.xyxx
                  dp2 r20.y, icb[r16.w + 0].yxyy, r17.yzyy
                  mad r19.xy, r20.xyxx, cb9[r6.w + 3].yyyy, r18.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.w, r19.xyzx, t9.xxxx, s13, r7.w
                  mad r15.y, r17.w, l(0.125000), r15.y
                  iadd r16.w, r16.w, l(1)
                endloop 
              else 
                utof r18.z, r14.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.y, r18.xyzx, t9.xxxx, s13, r7.w
              endif 
              mul r6.w, r15.y, r15.y
              mul r6.w, r15.y, r6.w
            else 
              mov r6.w, l(1.000000)
            endif 
            mul r8.w, r6.w, r8.w
          endif 
        endif 
        mad r6.w, -r2.x, l(0.500000), l(1.000000)
        mad r6.w, -r10.w, r6.w, l(1.000000)
        mul r6.w, r6.w, r6.w
        mad r6.w, -r6.w, l(0.620000), l(0.620000)
        add r6.w, -r10.w, r6.w
        mad r6.w, r1.w, r6.w, r10.w
        mul r6.w, r8.w, r6.w
        mov r17.x, cb9[r0.x + 0].w
        mov r17.yz, cb9[r0.x + 1].xxyx
        lt r7.w, l(0.000000), r9.w
        mad r18.xyz, r6.wwww, r17.xyzx, r4.yzwy
        dp3_sat r6.w, r12.xyzx, r16.xyzx
        mad r14.xyz, r14.xyzx, r5.xxxx, r5.yzwy
        dp3 r5.x, r14.xyzx, r14.xyzx
        rsq r5.x, r5.x
        mul r14.xyz, r5.xxxx, r14.xyzx
        dp3 r5.x, r14.xyzx, r5.yzwy
        dp3 r9.w, r12.xyzx, r14.xyzx
        mad r10.w, |r9.w|, r0.w, -|r9.w|
        mad r9.w, |r9.w|, r10.w, l(1.000000)
        mad r10.w, r6.w, r2.y, r2.w
        mul r9.w, r9.w, r9.w
        mul r9.w, r10.w, r9.w
        rcp r9.w, r9.w
        mul r6.w, r12.w, r6.w
        mul r6.w, r6.w, r9.w
        mul r6.w, r8.w, r6.w
        mad r14.xyz, r6.wwww, r17.xyzx, r13.yzwy
        add_sat r5.x, -r5.x, l(1.000000)
        mul r9.w, r5.x, r5.x
        mul r9.w, r9.w, r9.w
        mul r5.x, r5.x, r9.w
        mul r5.x, r5.x, r6.w
        mad r16.xyz, r5.xxxx, r17.xyzx, r15.xzwx
        movc r4.yzw, r7.wwww, r18.xxyz, r4.yyzw
        movc r15.xzw, r7.wwww, r16.xxyz, r15.xxzw
        movc r13.yzw, r7.wwww, r14.xxyz, r13.yyzw
        if_nz r2.z
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r5.x, cb2[52].x, l(112), u2.xxxx
          or r5.x, r5.x, l(8)
          store_structured u2.x, cb2[52].x, l(112), r5.x
          store_structured u2.x, cb2[52].x, l(132), r8.w
        endif 
        mov r3.z, l(0x00010101)
      else 
        mov r3.z, l(257)
      endif 
    else 
      mov r3.z, l(1)
    endif 
  else 
    mov r3.z, l(1)
  endif 
  break 
  case l(2)
  if_nz r2.z
    add r14.yzw, cb1[24].xxyz, cb9[r0.x + 0].xxyz
    mov r14.x, l(2)
    store_structured u2.xyzw, cb2[52].x, l(112), r14.xyzw
  endif 
  add r14.xy, -r11.xyxx, cb9[r0.x + 3].zwzz
  add r14.z, -r11.z, cb9[r0.x + 4].x
  dp3 r5.x, r14.xyzx, r14.xyzx
  rsq r5.x, r5.x
  mul r16.xyz, r5.xxxx, r14.xyzx
  dp3 r6.w, r12.xyzx, r16.xyzx
  mov_sat r7.w, r6.w
  lt r8.w, l(0.000000), r7.w
  if_nz r8.w
    mov r16.xyz, cb9[r0.x + 7].yzwy
    mov r16.w, cb9[r0.x + 8].x
    mov r11.w, l(1.000000)
    dp4 r8.w, r16.xyzw, r11.xyzw
    lt r9.w, r8.w, l(1.000000)
    if_nz r9.w
      mov r17.xyz, l(1.000000,1.000000,1.000000,0)
      mov r9.w, l(0)
    else 
      add r18.xyz, -r11.xyzx, cb9[r0.x + 0].xyzx
      mul r10.w, cb9[r0.x + 3].x, cb9[r0.x + 3].x
      dp3 r12.w, r18.xyzx, r18.xyzx
      div r10.w, r10.w, r12.w
      min r10.w, r10.w, l(1.000000)
      mad_sat r18.xy, r8.wwww, cb9[r0.x + 2].xzxx, cb9[r0.x + 2].ywyy
      mul r18.zw, r18.xxxy, r18.xxxy
      mad r18.xy, r18.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r18.xy, r18.xyxx, r18.zwzz
      mul r10.w, r10.w, r18.x
      mul r10.w, r18.y, r10.w
      mov r18.xyz, cb9[r0.x + 4].yzwy
      mov r18.w, cb9[r0.x + 5].x
      dp4 r18.x, r18.xyzw, r11.xyzw
      mov r19.xyz, cb9[r0.x + 5].yzwy
      mov r19.w, cb9[r0.x + 6].x
      dp4 r18.y, r19.xyzw, r11.xyzw
      div r18.xy, r18.xyxx, r8.wwww
      lt r8.w, cb9[r0.x + 10].w, l(0.00048828)
      if_nz r8.w
        mad_sat r19.xy, |r18.xyxx|, cb9[r0.x + 12].xyxx, cb9[r0.x + 12].zwzz
        mul r19.zw, r19.xxxy, r19.xxxy
        mad r19.xy, r19.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r19.xy, r19.xyxx, r19.zwzz
        mul r8.w, r19.y, r19.x
      else 
        mul_sat r19.xyzw, |r18.yyxx|, cb9[r0.x + 11].xyzw
        log r19.xyzw, r19.xyzw
        mul r19.xyzw, r19.xyzw, cb9[r0.x + 12].zzzz
        exp r19.xyzw, r19.xyzw
        add r19.xy, r19.zwzz, r19.xyxx
        log r19.xy, r19.xyxx
        mul r19.xy, r19.xyxx, cb9[r0.x + 12].wwww
        exp r19.xy, r19.xyxx
        mul r11.w, r19.x, cb9[r0.x + 12].x
        mad r12.w, cb9[r0.x + 12].y, r19.y, l(-1.000000)
        mad r11.w, cb9[r0.x + 12].y, r19.y, -r11.w
        div_sat r11.w, r12.w, r11.w
        mul r12.w, r11.w, r11.w
        mad r11.w, r11.w, l(-2.000000), l(3.000000)
        mul r8.w, r11.w, r12.w
      endif 
      mul r9.w, r8.w, r10.w
      and r8.w, l(255), cb9[r0.x + 14].w
      if_nz r8.w
        mov r18.z, l(1.000000)
        dp3 r10.w, cb9[r0.x + 13].xyzx, r18.xyzx
        mov r19.x, cb9[r0.x + 13].w
        mov r19.yz, cb9[r0.x + 14].xxyx
        dp3 r11.w, r19.xyzx, r18.xyzx
        frc r18.x, r10.w
        frc r18.y, r11.w
        iadd r8.w, r8.w, l(-1)
        utof r18.z, r8.w
        sample_l_indexable(texture2darray)(float,float,float,float) r17.xyz, r18.xyzx, t20.xyzw, s2, l(0.000000)
      else 
        mov r17.xyz, l(1.000000,1.000000,1.000000,0)
      endif 
    endif 
    mov r18.x, cb9[r0.x + 0].w
    mov r18.yz, cb9[r0.x + 1].xxyx
    mul r17.xyz, r17.xyzx, r18.xyzx
    lt r8.w, l(0.000000), r9.w
    if_nz r8.w
      ubfe r8.w, l(3), l(27), cb9[r0.x + 1].w
      if_nz r2.z
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r10.w, cb2[52].x, l(112), u2.xxxx
        or r10.w, r10.w, l(4)
        store_structured u2.x, cb2[52].x, l(112), r10.w
        store_structured u2.x, cb2[52].x, l(128), r9.w
      endif 
      ine r8.w, r8.w, l(1)
      if_nz r8.w
        mad r8.w, |r6.w|, l(-0.200000), l(0.400000)
        mad r18.xyz, r12.xyzx, r8.wwww, r11.xyzx
        mov r19.xyz, cb9[r0.x + 6].yzwy
        mov r19.w, cb9[r0.x + 7].x
        mov r18.w, l(1.000000)
        dp4 r8.w, r19.xyzw, r18.xyzw
        dp4 r10.w, r16.xyzw, r18.xyzw
        ge r11.w, r10.w, r8.w
        if_nz r11.w
          mov r16.xyz, cb9[r0.x + 4].yzwy
          mov r16.w, cb9[r0.x + 5].x
          dp4 r16.x, r16.xyzw, r18.xyzw
          mov r19.xyz, cb9[r0.x + 5].yzwy
          mov r19.w, cb9[r0.x + 6].x
          dp4 r16.y, r19.xyzw, r18.xyzw
          div r16.xy, r16.xyxx, r10.wwww
          mad_sat r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
          mad r18.x, r16.x, cb9[r0.x + 8].y, cb9[r0.x + 8].z
          mad r18.y, r16.y, cb9[r0.x + 8].w, cb9[r0.x + 9].x
          div r8.w, r8.w, r10.w
          max r8.w, r8.w, l(0.00006104)
          and r10.w, l(0x0000ffff), cb9[r0.x + 1].w
          if_nz cb2[58].y
            mov r16.x, -r4.x
            utof r19.z, r10.w
            mov r16.y, r13.x
            mov r16.z, r4.x
            mov r11.w, l(0)
            mov r12.w, l(0)
            loop 
              ige r14.w, r12.w, l(8)
              breakc_nz r14.w
              dp2 r20.x, icb[r12.w + 0].yxyy, r16.xyxx
              dp2 r20.y, icb[r12.w + 0].yxyy, r16.yzyy
              mad r19.xy, r20.xyxx, cb9[r0.x + 3].yyyy, r18.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r19.xyzx, t9.xxxx, s13, r8.w
              mad r11.w, r14.w, l(0.125000), r11.w
              iadd r12.w, r12.w, l(1)
            endloop 
          else 
            utof r18.z, r10.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.w, r18.xyzx, t9.xxxx, s13, r8.w
          endif 
          mul r8.w, r11.w, r11.w
          mul r8.w, r11.w, r8.w
        else 
          mov r8.w, l(1.000000)
        endif 
      else 
        mov r8.w, l(1.000000)
      endif 
      mul r8.w, r8.w, r9.w
      lt r9.w, l(0.000000), r8.w
      if_nz r9.w
        mul r9.w, r0.w, cb9[r0.x + 1].z
        mul r9.w, r7.w, r9.w
        ubfe r10.w, l(4), l(16), cb9[r0.x + 1].w
        ult r11.w, l(0), r10.w
        and r11.w, r1.z, r11.w
        if_nz r11.w
          iadd r10.w, r10.w, cb2[0].x
          imad r10.w, r10.w, l(15), l(-15)
          mad r11.w, |r6.w|, l(-0.200000), l(0.400000)
          mad r16.xyz, r12.xyzx, r11.wwww, r11.xyzx
          mov r18.xyz, cb9[r10.w + 6].yzwy
          mov r18.w, cb9[r10.w + 7].x
          mov r16.w, l(1.000000)
          dp4 r11.w, r18.xyzw, r16.xyzw
          mov r18.xyz, cb9[r10.w + 7].yzwy
          mov r18.w, cb9[r10.w + 8].x
          dp4 r12.w, r18.xyzw, r16.xyzw
          lt r14.w, r12.w, r11.w
          if_z r14.w
            mov r18.xyz, cb9[r10.w + 4].yzwy
            mov r18.w, cb9[r10.w + 5].x
            dp4 r18.x, r18.xyzw, r16.xyzw
            mov r19.xyz, cb9[r10.w + 5].yzwy
            mov r19.w, cb9[r10.w + 6].x
            dp4 r18.y, r19.xyzw, r16.xyzw
            div r16.xy, r18.xyxx, r12.wwww
            mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r18.x, r16.x, cb9[r10.w + 9].w
            add r18.y, r16.y, cb9[r10.w + 10].x
            mul r16.xy, r18.xyxx, cb9[r10.w + 9].yzyy
            div r16.zw, cb9[r10.w + 3].yyyy, cb9[r10.w + 8].yyyw
            add r18.xy, -r16.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r18.xy, r16.xyxx, r18.xyxx
            ge r16.zw, r16.zzzw, r16.xxxy
            or r16.zw, r16.zzzw, r18.xxxy
            or r15.y, r16.w, r16.z
            if_z r15.y
              mov_sat r16.xy, r16.xyxx
              mad r18.x, r16.x, cb9[r10.w + 8].y, cb9[r10.w + 8].z
              mad r18.y, r16.y, cb9[r10.w + 8].w, cb9[r10.w + 9].x
              mul r16.x, r12.w, cb9[r10.w + 10].z
              mad r11.w, cb9[r10.w + 10].y, r12.w, r11.w
              div r11.w, r11.w, r16.x
            endif 
          else 
            mov r15.y, l(-1)
          endif 
          or r12.w, r14.w, r15.y
          if_z r12.w
            max r11.w, r11.w, l(0.00006104)
            and r12.w, l(0x0000ffff), cb9[r10.w + 1].w
            if_nz cb2[58].y
              mov r16.x, -r4.x
              utof r19.z, r12.w
              mov r16.y, r13.x
              mov r16.z, r4.x
              mov r14.w, l(0)
              mov r15.y, l(0)
              loop 
                ige r16.w, r15.y, l(8)
                breakc_nz r16.w
                dp2 r20.x, icb[r15.y + 0].yxyy, r16.xyxx
                dp2 r20.y, icb[r15.y + 0].yxyy, r16.yzyy
                mad r19.xy, r20.xyxx, cb9[r10.w + 3].yyyy, r18.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r19.xyzx, t9.xxxx, s13, r11.w
                mad r14.w, r16.w, l(0.125000), r14.w
                iadd r15.y, r15.y, l(1)
              endloop 
            else 
              utof r18.z, r12.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r18.xyzx, t9.xxxx, s13, r11.w
            endif 
            mul r10.w, r14.w, r14.w
            mul r10.w, r14.w, r10.w
          else 
            mov r10.w, l(1.000000)
          endif 
          mul r8.w, r8.w, r10.w
        else 
          ubfe r0.x, l(4), l(20), cb9[r0.x + 1].w
          ult r10.w, l(0), r0.x
          not r1.z, r1.z
          and r1.z, r1.z, r10.w
          if_nz r1.z
            iadd r0.x, r0.x, cb2[0].x
            imad r0.x, r0.x, l(15), l(-15)
            mad r1.z, |r6.w|, l(-0.200000), l(0.400000)
            mad r16.xyz, r12.xyzx, r1.zzzz, r11.xyzx
            mov r18.xyz, cb9[r0.x + 6].yzwy
            mov r18.w, cb9[r0.x + 7].x
            mov r16.w, l(1.000000)
            dp4 r1.z, r18.xyzw, r16.xyzw
            mov r18.xyz, cb9[r0.x + 7].yzwy
            mov r18.w, cb9[r0.x + 8].x
            dp4 r10.w, r18.xyzw, r16.xyzw
            lt r11.w, r10.w, r1.z
            if_z r11.w
              mov r18.xyz, cb9[r0.x + 4].yzwy
              mov r18.w, cb9[r0.x + 5].x
              dp4 r18.x, r18.xyzw, r16.xyzw
              mov r19.xyz, cb9[r0.x + 5].yzwy
              mov r19.w, cb9[r0.x + 6].x
              dp4 r18.y, r19.xyzw, r16.xyzw
              div r16.xy, r18.xyxx, r10.wwww
              mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r18.x, r16.x, cb9[r0.x + 9].w
              add r18.y, r16.y, cb9[r0.x + 10].x
              mul r16.xy, r18.xyxx, cb9[r0.x + 9].yzyy
              div r16.zw, cb9[r0.x + 3].yyyy, cb9[r0.x + 8].yyyw
              add r18.xy, -r16.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r18.xy, r16.xyxx, r18.xyxx
              ge r16.zw, r16.zzzw, r16.xxxy
              or r16.zw, r16.zzzw, r18.xxxy
              or r12.w, r16.w, r16.z
              if_z r12.w
                mov_sat r16.xy, r16.xyxx
                mad r18.x, r16.x, cb9[r0.x + 8].y, cb9[r0.x + 8].z
                mad r18.y, r16.y, cb9[r0.x + 8].w, cb9[r0.x + 9].x
                mul r14.w, r10.w, cb9[r0.x + 10].z
                mad r1.z, cb9[r0.x + 10].y, r10.w, r1.z
                div r1.z, r1.z, r14.w
              endif 
            else 
              mov r12.w, l(-1)
            endif 
            or r10.w, r11.w, r12.w
            if_z r10.w
              max r1.z, r1.z, l(0.00006104)
              and r10.w, l(0x0000ffff), cb9[r0.x + 1].w
              if_nz cb2[58].y
                mov r16.x, -r4.x
                utof r19.z, r10.w
                mov r16.y, r13.x
                mov r16.z, r4.x
                mov r4.x, l(0)
                mov r11.w, l(0)
                loop 
                  ige r12.w, r11.w, l(8)
                  breakc_nz r12.w
                  dp2 r20.x, icb[r11.w + 0].yxyy, r16.xyxx
                  dp2 r20.y, icb[r11.w + 0].yxyy, r16.yzyy
                  mad r19.xy, r20.xyxx, cb9[r0.x + 3].yyyy, r18.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r19.xyzx, t9.xxxx, s13, r1.z
                  mad r4.x, r12.w, l(0.125000), r4.x
                  iadd r11.w, r11.w, l(1)
                endloop 
              else 
                utof r18.z, r10.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r4.x, r18.xyzx, t9.xxxx, s13, r1.z
              endif 
              mul r0.x, r4.x, r4.x
              mul r0.x, r4.x, r0.x
            else 
              mov r0.x, l(1.000000)
            endif 
            mul r8.w, r0.x, r8.w
          endif 
        endif 
        mad r0.x, -r2.x, l(0.500000), l(1.000000)
        mad r0.x, -r7.w, r0.x, l(1.000000)
        mul r0.x, r0.x, r0.x
        mad r0.x, -r0.x, l(0.620000), l(0.620000)
        add r0.x, -r7.w, r0.x
        mad r0.x, r1.w, r0.x, r7.w
        mul r0.x, r8.w, r0.x
        lt r1.z, l(0.000000), r6.w
        mad r16.xyz, r0.xxxx, r17.xyzx, r4.yzwy
        mad r14.xyz, r14.xyzx, r5.xxxx, r5.yzwy
        dp3 r0.x, r14.xyzx, r14.xyzx
        rsq r0.x, r0.x
        mul r14.xyz, r0.xxxx, r14.xyzx
        dp3 r0.x, r14.xyzx, r5.yzwy
        dp3 r1.w, r12.xyzx, r14.xyzx
        mad r0.w, |r1.w|, r0.w, -|r1.w|
        mad r0.w, |r1.w|, r0.w, l(1.000000)
        mad r1.w, r7.w, r2.y, r2.w
        mul r0.w, r0.w, r0.w
        mul r0.w, r1.w, r0.w
        rcp r0.w, r0.w
        mul r0.w, r9.w, r0.w
        mul r0.w, r0.w, r8.w
        mul r0.w, r0.w, l(0.250000)
        mad r2.xyw, r0.wwww, r17.xyxz, r13.yzyw
        add_sat r0.x, -r0.x, l(1.000000)
        mul r1.w, r0.x, r0.x
        mul r1.w, r1.w, r1.w
        mul r0.x, r0.x, r1.w
        mul r0.x, r0.x, r0.w
        mad r5.xyz, r0.xxxx, r17.xyzx, r15.xzwx
        movc r4.yzw, r1.zzzz, r16.xxyz, r4.yyzw
        movc r15.xzw, r1.zzzz, r5.xxyz, r15.xxzw
        movc r13.yzw, r1.zzzz, r2.xxyw, r13.yyzw
        if_nz r2.z
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r0.x, cb2[52].x, l(112), u2.xxxx
          or r0.x, r0.x, l(8)
          store_structured u2.x, cb2[52].x, l(112), r0.x
          store_structured u2.x, cb2[52].x, l(132), r8.w
        endif 
        mov r3.z, l(0x00010101)
      else 
        mov r3.z, l(257)
      endif 
    else 
      mov r3.z, l(1)
    endif 
  else 
    mov r3.z, l(1)
  endif 
  break 
  default 
  mov r3.z, l(0)
  break 
endswitch 
mad r5.xyz, r3.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.x, r5.y
mad r2.xyw, r7.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r0.w, r2.x
ieq r0.w, r0.x, r0.w
movc r1.zw, r0.wwww, r2.yyyw, l(0,0,-1.000000,0)
mad r2.xyw, r8.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r0.w, r2.x
ieq r0.w, r0.x, r0.w
movc r2.xy, r0.wwww, r2.ywyy, l(-1.000000,0,0,0)
mad r3.xyw, r9.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r0.w, r3.x
ieq r0.w, r0.x, r0.w
movc r3.xy, r0.wwww, r3.ywyy, l(-1.000000,0,0,0)
mad r7.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r7.x
ieq r0.x, r0.x, r0.w
movc r0.xw, r0.xxxx, r7.yyyz, l(-1.000000,0,0,0)
mov r7.x, r1.z
mov r7.y, r2.x
mov r7.z, r3.x
mov r7.w, r0.x
add r7.xyzw, -r5.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.x, r7.y, r7.x
add r0.x, r7.z, r0.x
add r0.x, r7.w, r0.x
mul r1.z, r2.y, r7.y
mad r1.z, r7.x, r1.w, r1.z
mad r1.z, r7.z, r3.y, r1.z
mad r0.w, r7.w, r0.w, r1.z
div r5.w, r0.w, r0.x
ge r0.x, l(0.000000), r0.x
movc r5.yz, r0.xxxx, l(0,0,0,0), r5.zzwz
and r0.xw, r1.xxxy, l(1, 0, 0, 1)
ieq r0.x, r0.w, r0.x
movc r2.xyw, r0.xxxx, r5.xyxz, r5.xzxy
mad r0.x, -r2.w, l(0.500000), r2.x
add r5.y, r0.x, r2.w
mad r5.z, -r2.y, l(0.500000), r0.x
add r5.x, r2.y, r5.z
add r2.xyw, -r5.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
mul r2.xyw, r2.xyxw, r15.xzxw
mad r2.xyw, r13.yzyw, r5.xyxz, r2.xyxw
mad r2.xyw, r4.yzyw, r6.xyxz, r2.xyxw
lt r0.x, l(0.000000), cb2[9].z
if_nz r0.x
  dp3 r0.x, r11.xyzx, r11.xyzx
  rsq r0.w, r0.x
  mul r3.xyw, r0.wwww, r11.xyxz
  sqrt r0.x, r0.x
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r1.zw, r0.xxxx, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r0.w, l(0.010000), |r11.z|
    mul r4.xy, r11.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r0.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r5.xyz, r1.wwww, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xyzx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xyzx
  else 
    mad r0.w, r0.x, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r11.z|
    mul r1.w, r11.z, cb2[15].z
    mul r4.w, r1.w, l(-1.442695)
    exp r4.w, r4.w
    add r4.w, -r4.w, l(1.000000)
    div r1.w, r4.w, r1.w
    mul r1.w, r0.w, r1.w
    movc r0.w, r1.z, r1.w, r0.w
    mul r5.xyz, r0.wwww, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xywx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r1.w, cb2[8].w, -r0.w, l(1.000000)
  mul r1.w, r1.w, r1.w
  mul r1.w, r1.w, l(12.566371)
  div r1.z, r1.z, r1.w
  add r0.x, r0.x, -cb2[10].w
  mul_sat r0.x, r0.x, cb2[11].w
  mul r0.x, r0.x, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyw, r0.xxxx, cb2[11].xyxz
  mad r3.xyw, r0.wwww, cb2[10].xyxz, r3.xyxw
  mul r3.xyw, r3.xyxw, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyw, r3.xyxw, r5.xyxz
  mad r3.xyw, r2.xyxw, r4.xyxz, r3.xyxw
else 
  mul r0.x, r11.z, cb2[6].x
  mad r0.w, cb2[6].x, r11.z, cb2[5].x
  lt r1.z, |r0.x|, l(0.000100)
  min r1.w, r0.w, l(64.000000)
  mul r1.w, r1.w, l(1.442695)
  exp r1.w, r1.w
  mov_sat r4.x, cb2[6].z
  lt r4.y, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r4.y, r1.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.x, r1.z, l(1.000000), r0.x
  div r0.x, r0.w, r0.x
  movc r0.x, r1.z, r4.x, r0.x
  mul r0.x, r0.x, cb2[5].z
  dp3 r0.w, r11.xyzx, r11.xyzx
  sqrt r1.z, r0.w
  mad r0.x, r0.x, r1.z, cb2[5].w
  exp r0.x, r0.x
  min r0.x, r0.x, l(1.000000)
  add r0.x, -r0.x, l(1.000000)
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r11.xyzx
  dp3 r0.w, cb2[7].yzwy, r4.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r0.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.x, r0.x, r4.w
  add r4.xyz, -r2.xywx, r4.xyzx
  mad r3.xyw, r0.xxxx, r4.xyxz, r2.xyxw
endif 
mul r2.xyw, r3.xyxw, cb1[85].yyyy
ge r3.xyw, r2.xyxw, l(0.00006104, 0.00006104, 0.000000, 0.00006104)
and r2.xyw, r2.xyxw, r3.xyxw
min r2.xyw, r2.xyxw, l(65024.000000, 65024.000000, 0.000000, 64512.000000)
ilt r0.x, l(0), cb2[55].w
and r4.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r4.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r4.ywyy, l(2, 4, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r4.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(16)
and r0.w, r0.w, r1.z
and r4.z, r0.w, l(0x3e4ccccd)
mad r3.xyw, r4.xyxz, cb1[85].xxxx, -r2.xyxw
mad r3.xyw, r3.xyxw, l(0.500000, 0.500000, 0.000000, 0.500000), r2.xyxw
movc r2.xyw, r0.xxxx, r3.xyxw, r2.xyxw
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.x, r3.z, l(1)
      break 
      case l(2)
      ubfe r0.x, l(1), l(8), r3.z
      break 
      case l(3)
      ushr r0.x, r3.z, l(16)
      break 
      case l(4)
      mov r0.x, l(0)
      break 
      case l(5)
      mov r0.x, l(1)
      break 
      default 
      mov r0.x, l(0)
      break 
    endswitch 
    utof r0.x, r0.x
    mul r0.x, r0.x, cb2[53].z
    mad r3.xyw, r0.xxxx, l(0.500000, 0.500000, 0.000000, 0.500000), -r2.xyxw
    mad r2.xyw, cb2[53].wwww, r3.xyxw, r2.xyxw
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xywx
if_nz r2.z
  add r1.xyz, r11.xyzx, cb1[24].xyzx
  and r1.w, r3.z, l(1)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  store_structured u2.x, cb2[52].x, l(108), l(0)
endif 
if_nz cb2[52].y
  and r0.x, r3.z, l(1)
  atomic_iadd g1, l(0), r0.x
  ubfe r0.w, l(1), l(8), r3.z
  atomic_iadd g1, l(4), r0.w
  ushr r1.x, r3.z, l(16)
  atomic_iadd g1, l(8), r1.x
  atomic_iadd g1, l(12), l(0)
  atomic_iadd g1, l(16), l(1)
  atomic_umax g2, l(0), r0.x
  atomic_umax g2, l(4), r0.w
  atomic_umax g2, l(8), r1.x
  atomic_umax g2, l(12), l(0)
  atomic_umax g2, l(16), l(1)
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.x, r1.x, l(63)
  if_nz r0.x
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.x, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.x
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.x, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.x
    ieq r0.yz, r0.yyzy, cb2[52].zzwz
    and r0.y, r0.z, r0.y
    if_nz r0.y
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.x
    endif 
  endif 
endif 
ret 
// Approximately 1076 instruction slots used
