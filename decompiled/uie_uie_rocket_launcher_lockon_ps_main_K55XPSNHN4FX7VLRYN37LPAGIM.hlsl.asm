//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:43:43 2021
//
//
// Buffer Definitions: 
//
// cbuffer GenericsCBuffer
// {
//
//   float4 scriptVector0;              // Offset:    0 Size:    16
//   float4 scriptVector1;              // Offset:   16 Size:    16
//   float4 scriptVector2;              // Offset:   32 Size:    16
//   float4 scriptVector3;              // Offset:   48 Size:    16
//   float4 scriptVector4;              // Offset:   64 Size:    16
//   float4 scriptVector5;              // Offset:   80 Size:    16 [unused]
//   float4 scriptVector6;              // Offset:   96 Size:    16 [unused]
//   float4 scriptVector7;              // Offset:  112 Size:    16 [unused]
//   float4 weaponParam0;               // Offset:  128 Size:    16 [unused]
//   float4 weaponParam1;               // Offset:  144 Size:    16 [unused]
//   float4 weaponParam2;               // Offset:  160 Size:    16 [unused]
//   float4 weaponParam3;               // Offset:  176 Size:    16 [unused]
//   float4 weaponParam4;               // Offset:  192 Size:    16 [unused]
//   float4 weaponParam5;               // Offset:  208 Size:    16 [unused]
//   float4 weaponParam6;               // Offset:  224 Size:    16 [unused]
//   float4 weaponParam7;               // Offset:  240 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// GenericsCBuffer                   cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[5], immediateIndexed
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 5
mov_sat r0.x, cb3[3].x
mad r0.y, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.z, r0.x, r0.y
mad r0.w, -r0.y, r0.x, l(1.000000)
mul r1.xy, cb3[4].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r1.zw, cb3[4].yyyx, v2.yyyx, -r1.yyyx
min r2.x, |r1.w|, |r1.z|
max r2.y, |r1.w|, |r1.z|
div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
mul r2.x, r2.y, r2.x
mul r2.y, r2.x, r2.x
mad r2.z, r2.y, l(0.02083510), l(-0.085133)
mad r2.z, r2.y, r2.z, l(0.180141)
mad r2.z, r2.y, r2.z, l(-0.33029950)
mad r2.y, r2.y, r2.z, l(0.999866)
mul r2.z, r2.y, r2.x
lt r2.w, |r1.w|, |r1.z|
mad r2.z, r2.z, l(-2.000000), l(1.57079637)
and r2.z, r2.w, r2.z
mad r2.x, r2.x, r2.y, r2.z
lt r2.y, r1.w, -r1.w
and r2.y, r2.y, l(0xc0490fdb)
add r2.x, r2.y, r2.x
min r2.y, r1.w, r1.z
max r2.z, r1.w, r1.z
lt r2.y, r2.y, -r2.y
ge r2.z, r2.z, -r2.z
and r2.y, r2.z, r2.y
movc r2.x, r2.y, -r2.x, r2.x
mul r2.y, r0.z, cb3[2].z
mul r2.y, r2.y, l(0.01745329)
mov r2.z, r2.y
loop 
  ge r2.w, r2.z, l(0.000000)
  breakc_nz r2.w
  add r2.z, r2.z, l(6.28318548)
endloop 
mov r2.y, r2.z
loop 
  ge r2.w, l(6.28318548), r2.y
  breakc_nz r2.w
  add r2.y, r2.y, l(-6.28318548)
endloop 
add r2.z, -r2.y, r2.x
add r2.w, cb3[0].y, cb3[0].y
div r2.w, l(6.28318548), r2.w
mad r0.x, r0.y, r0.x, l(1.000000)
mul r0.x, r0.x, r2.w
mad r0.y, r0.x, l(0.500000), r2.z
mov r2.z, r0.y
loop 
  ge r3.x, r2.z, l(0.000000)
  breakc_nz r3.x
  add r2.z, r2.z, l(6.28318548)
endloop 
mov r0.y, r2.z
loop 
  ge r3.x, l(6.28318548), r0.y
  breakc_nz r3.x
  add r0.y, r0.y, l(-6.28318548)
endloop 
add r2.x, r2.y, r2.x
mad r0.x, r0.x, l(0.500000), r2.x
mov r2.x, r0.x
loop 
  ge r2.z, r2.x, l(0.000000)
  breakc_nz r2.z
  add r2.x, r2.x, l(6.28318548)
endloop 
mov r0.x, r2.x
loop 
  ge r2.z, l(6.28318548), r0.x
  breakc_nz r2.z
  add r0.x, r0.x, l(-6.28318548)
endloop 
add r2.x, -cb3[0].z, cb3[0].w
mad r2.x, r2.x, r0.w, cb3[0].z
div r0.y, r0.y, r2.w
round_ni r2.z, r0.y
ftoi r2.w, r2.z
and r3.x, r2.w, l(0x80000000)
imax r2.w, r2.w, -r2.w
and r2.w, r2.w, l(1)
ineg r3.y, r2.w
movc r2.w, r3.x, r3.y, r2.w
ieq r2.w, r2.w, l(0)
add r0.y, r0.y, -r2.z
ge r0.y, r0.z, r0.y
or r0.y, r0.y, r2.w
if_nz r0.y
  mul r2.zw, r1.xxxy, r2.xxxx
  mul r3.xy, r1.wzww, r1.wzww
  mul r2.zw, r2.zzzw, r2.zzzw
  div r2.zw, r3.xxxy, r2.zzzw
  add r0.y, r2.w, r2.z
  ge r2.z, l(1.000000), r0.y
  mad r3.zw, r1.xxxy, r2.xxxx, -cb3[0].xxxx
  ge r4.xy, l(0.000000, 0.000000, 0.000000, 0.000000), r3.zwzz
  or r2.w, r4.y, r4.x
  add r4.x, -cb3[2].y, l(1.000000)
  add r4.y, -r4.x, l(1.000000)
  add r0.y, r0.y, -r4.x
  div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r4.y
  mul_sat r0.y, r0.y, r4.x
  mad r4.x, r0.y, l(-2.000000), l(3.000000)
  mul r0.y, r0.y, r0.y
  mad r0.y, -r4.x, r0.y, l(1.000000)
  mul r3.zw, r3.zzzw, r3.zzzw
  div r3.xy, r3.xyxx, r3.zwzz
  add r3.x, r3.y, r3.x
  ge r3.y, r3.x, l(1.000000)
  add r3.x, r3.x, l(-1.000000)
  div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[2].y
  mul_sat r3.x, r3.z, r3.x
  mad r3.z, r3.x, l(-2.000000), l(3.000000)
  mul r3.x, r3.x, r3.x
  mul r3.x, r3.x, r3.z
  mul r3.x, r0.y, r3.x
  and r3.x, r3.x, r3.y
  movc r0.y, r2.w, r0.y, r3.x
  and r0.y, r0.y, r2.z
else 
  mov r0.y, l(0)
endif 
lt r2.z, l(0.000000), cb3[3].x
if_nz r2.z
  mul_sat r2.z, cb3[3].x, l(10.000000)
  mad r2.w, r2.z, l(-2.000000), l(3.000000)
  mul r2.z, r2.z, r2.z
  mul r2.z, r2.z, r2.w
  add r2.w, cb3[1].y, cb3[1].y
  div r2.w, l(6.28318548), r2.w
  div r0.x, r0.x, r2.w
  round_ni r2.w, r0.x
  ftoi r3.x, r2.w
  and r3.y, r3.x, l(0x80000000)
  imax r3.x, r3.x, -r3.x
  and r3.x, r3.x, l(1)
  ineg r3.z, r3.x
  movc r3.x, r3.y, r3.z, r3.x
  ieq r3.x, r3.x, l(0)
  add r0.x, r0.x, -r2.w
  ge r0.x, r0.z, r0.x
  or r0.x, r0.x, r3.x
  if_nz r0.x
    add r0.x, -cb3[1].z, cb3[1].w
    mad r0.x, r0.x, r0.w, cb3[1].z
    mul r0.zw, r0.xxxx, r1.xxxy
    mul r3.xy, r1.wzww, r1.wzww
    mul r0.zw, r0.zzzw, r0.zzzw
    div r0.zw, r3.xxxy, r0.zzzw
    add r0.z, r0.w, r0.z
    ge r0.w, l(1.000000), r0.z
    mad r3.zw, r1.xxxy, r0.xxxx, -cb3[1].xxxx
    ge r4.xy, l(0.000000, 0.000000, 0.000000, 0.000000), r3.zwzz
    or r0.x, r4.y, r4.x
    add r2.w, -cb3[2].y, l(1.000000)
    add r4.x, -r2.w, l(1.000000)
    add r0.z, r0.z, -r2.w
    div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
    mul_sat r0.z, r0.z, r2.w
    mad r2.w, r0.z, l(-2.000000), l(3.000000)
    mul r0.z, r0.z, r0.z
    mad r0.z, -r2.w, r0.z, l(1.000000)
    mul r3.zw, r3.zzzw, r3.zzzw
    div r3.xy, r3.xyxx, r3.zwzz
    add r2.w, r3.y, r3.x
    ge r3.x, r2.w, l(1.000000)
    add r2.w, r2.w, l(-1.000000)
    div r3.y, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[2].y
    mul_sat r2.w, r2.w, r3.y
    mad r3.y, r2.w, l(-2.000000), l(3.000000)
    mul r2.w, r2.w, r2.w
    mul r2.w, r2.w, r3.y
    mul r2.w, r0.z, r2.w
    and r2.w, r2.w, r3.x
    movc r0.x, r0.x, r0.z, r2.w
    and r0.x, r0.x, r0.w
  else 
    mov r0.x, l(0)
  endif 
  mul r0.x, r0.x, r2.z
else 
  mov r0.x, l(0)
endif 
mul r0.z, cb3[0].x, l(0.500000)
mad r0.zw, r1.xxxy, r2.xxxx, -r0.zzzz
mul r2.xz, r1.wwzw, r1.wwzw
mul r0.zw, r0.zzzw, r0.zzzw
div r0.zw, r2.xxxz, r0.zzzw
add r0.z, r0.w, r0.z
lt r0.z, l(1.000000), r0.z
mul r1.xy, r1.xyxx, r1.xyxx
div r1.xy, r2.xzxx, r1.xyxx
add r0.w, r1.y, r1.x
ge r0.w, l(1.000000), r0.w
and r0.z, r0.w, r0.z
sincos r1.x, r2.x, -r2.y
mul r1.xy, r1.xxxx, r1.zwzz
mad r0.w, r1.w, r2.x, -r1.x
mad r1.x, r1.z, r2.x, r1.y
mul r1.y, cb3[2].y, l(5.000000)
mad r1.z, -cb3[2].x, l(-0.500000), r0.w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul_sat r1.z, r1.w, r1.z
mad r2.x, r1.z, l(-2.000000), l(3.000000)
mul r1.z, r1.z, r1.z
mul r1.z, r1.z, r2.x
mad r1.y, cb3[2].x, l(0.500000), -r1.y
mad r2.x, cb3[2].x, l(0.500000), -r1.y
add r0.w, r0.w, -r1.y
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
mul_sat r0.w, r0.w, r2.x
mad r2.y, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mad r0.w, -r2.y, r0.w, l(1.000000)
mul r3.y, r0.w, r1.z
mad r0.w, -cb3[2].x, l(-0.500000), r1.x
mul_sat r0.w, r1.w, r0.w
mad r1.z, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.z
add r1.x, -r1.y, r1.x
mul_sat r1.x, r2.x, r1.x
mad r1.y, r1.x, l(-2.000000), l(3.000000)
mul r1.x, r1.x, r1.x
mad r1.x, -r1.y, r1.x, l(1.000000)
mul r3.x, r0.w, r1.x
and r0.zw, r0.zzzz, r3.xxxy
max r0.z, r0.z, r0.w
max r0.x, r0.z, r0.x
max r0.x, r0.x, r0.y
mul o0.w, r0.x, v1.w
mov o0.xyz, v1.xyzx
ret 
// Approximately 236 instruction slots used
