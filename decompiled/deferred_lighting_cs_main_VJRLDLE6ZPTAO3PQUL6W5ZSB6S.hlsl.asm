//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:24:04 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 21
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(37), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r0.w, r1.xyww, t4.yzwx
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
utof r4.xy, r1.xyxx
add r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ge r5.x, r0.w, l(0.984375)
mul r5.z, r0.w, l(1.01587307)
mad r0.w, r0.w, l(64.000000), l(-63.000000)
movc r0.w, r5.x, r0.w, r5.z
max r0.w, r0.w, l(0.00000001)
rcp r5.y, r0.w
and r0.zw, r0.zzzz, r5.xxxy
mul r5.xy, r4.zwzz, cb1[44].zwzz
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t28.xyzw, s4.x
mul r7.xy, r4.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
frc r7.xy, r7.xyxx
add r7.zw, -r7.yyyx, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r8.xyzw, r7.zzwy, r7.xwyx
dp4 r7.x, r6.xyzw, r8.xyzw
add r5.xyzw, -r0.wwww, r5.xyzw
min r7.y, |r5.w|, |r5.z|
min r7.y, |r5.y|, r7.y
min r7.y, |r5.x|, r7.y
max r7.z, |r5.w|, |r5.z|
max r7.z, |r5.y|, r7.z
max r5.x, |r5.x|, r7.z
eq r5.yzw, |r5.yyzw|, r7.yyyy
movc r5.y, r5.y, r6.y, r6.x
movc r5.y, r5.z, r6.z, r5.y
movc r5.y, r5.w, r6.w, r5.y
mul r5.z, r0.w, l(0.010000)
lt r5.x, r5.z, r5.x
movc r5.x, r5.x, r5.y, r7.x
mul r3.z, r3.z, r5.x
if_nz cb2[55].x
  mul r5.x, r3.z, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r5.xxxx
  ret 
else 
  movc r5.x, cb2[54].w, r3.z, l(1.000000)
endif 
ge r3.z, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.yzw, r1.xyww, t0.wxyz
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
add r1.zw, r4.zzzw, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r10.x, r1.z, cb1[12].x
mul r10.y, r1.w, cb1[13].y
mov r10.z, l(1.000000)
mul r10.xyz, r0.wwww, r10.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r1.zw, r2.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.850000, 0.850000)
dp2 r2.x, r1.zwzz, r1.zwzz
add r11.zw, -r2.xxxx, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.x, r11.z
mul r11.xy, r1.zwzz, r2.xxxx
and r12.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r12.w, r12.z
movc r12.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.w, r3.z, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r10.xyzx, -r10.xyzx
rsq r0.w, r0.w
mul r12.xyz, r0.wwww, -r10.xyzx
dp2 r1.z, r4.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r4.x, r13.x, r1.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r1.z, -r12.xyzx, r11.xyzx
add r1.z, r1.z, r1.z
mad r14.xyz, r11.xyzx, -r1.zzzz, -r12.xyzx
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.w, r1.z
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r2.zw, r2.zzzw
ieq r2.zw, r1.xxxy, r2.zzzw
and r2.z, r2.w, r2.z
dp3 r2.w, r11.xyzx, cb2[17].xyzx
mov_sat r3.z, r2.w
ge r4.y, l(0.000000), r3.z
if_nz r4.y
  mov r4.z, l(0)
endif 
if_z r4.y
  mul r13.yzw, r10.yyyy, cb2[29].xxyz
  mad r13.yzw, r10.xxxx, cb2[28].xxyz, r13.yyzw
  mad r13.yzw, r10.zzzz, cb2[30].xxyz, r13.yyzw
  add r13.yzw, r13.yyzw, cb2[31].xxyz
  add r4.y, r13.w, -cb2[17].w
  mad r4.y, -r4.y, l(0.00006104), l(1.000000)
  mov_sat r4.w, r4.y
  eq r4.w, r4.y, r4.w
  if_nz r4.w
    mov r4.w, l(0)
    mov r6.w, l(0)
    loop 
      ge r7.w, r4.w, l(3.000000)
      breakc_nz r7.w
      ftou r7.w, r4.w
      add r15.xy, r13.yzyy, -cb2[r7.w + 20].xyxx
      max r8.w, |r15.y|, |r15.x|
      mul r6.w, r8.w, cb2[r7.w + 20].z
      lt r7.w, r6.w, l(1.000000)
      if_nz r7.w
        break 
      endif 
      add r4.w, r4.w, l(1.000000)
      mov r6.w, l(0)
    endloop 
  else 
    mov r4.w, l(3.000000)
    mov r6.w, l(0)
  endif 
  ge r7.w, r4.w, l(3.000000)
  if_nz r7.w
    mul r15.xyz, l(128.000000, 0.500000, 0.500000, 0.000000), cb2[27].zxyz
    rcp r16.xz, r15.xxxx
    mov r16.y, -r16.z
    mad r15.xyz, r13.yzyy, r16.xyzx, r15.yzyy
    add r16.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r15.xyz, r15.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r15.xyz, r16.xyzx, r15.xyzx
    mul r16.xy, r15.zyzz, cb2[32].xxxx
    round_ni r16.xy, r16.xyxx
    mul r8.w, r16.y, cb2[27].x
    mad r8.w, r8.w, cb2[32].x, r16.x
    ftou r8.w, r8.w
    iadd r8.w, r8.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.w, r8.w, l(0), t23.xxxx
    and r10.w, r9.w, l(0x40000000)
    ishl r12.w, r9.w, l(2)
    if_z r10.w
      and r10.w, r9.w, l(0x01ffffff)
      iadd r16.x, r8.w, r10.w
      ushr r8.w, r9.w, l(25)
      utof r8.w, r8.w
      mul r15.xyz, r8.wwww, r15.xyzx
      frc r15.xyz, r15.xyzx
      mul r15.xyz, r15.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
      ftou r15.xyz, r15.xyzx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.z, r16.x, l(0), t23.xxxx
      ushr r17.xy, r15.zyzz, l(6, 6, 0, 0)
      and r8.w, r16.z, l(0xc0000000)
      iadd r9.w, r16.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.w, r9.w, l(0), t23.xxxx
      movc r9.w, r17.y, r16.z, r9.w
      ushr r10.w, r9.w, l(13)
      movc r9.w, r17.x, r10.w, r9.w
      and r9.w, r9.w, l(8191)
      iadd r17.x, r9.w, r16.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.z, r17.x, l(0), t23.xxxx
      mov r16.y, l(0)
      mov r17.y, l(1)
      movc r17.xyz, r8.wwww, r16.xyzx, r17.xyzx
      movc r18.yz, r8.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r19.xy, r15.zyzz, r18.yyyy
      and r19.xy, r19.xyxx, l(1, 1, 0, 0)
      and r9.w, r17.z, l(0xc0000000)
      iadd r10.w, r17.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r10.w, l(0), t23.xxxx
      movc r10.w, r19.y, r17.z, r10.w
      ushr r15.w, r10.w, l(13)
      movc r10.w, r19.x, r15.w, r10.w
      and r10.w, r10.w, l(8191)
      iadd r18.x, r10.w, r17.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.x, l(0), t23.xxxx
      movc r17.xyz, r9.wwww, r17.xyzx, r18.xzwx
      movc r16.xyz, r8.wwww, r16.xyzx, r17.xyzx
      and r8.w, r16.z, l(0xc0000000)
      if_z r8.w
        iadd r8.w, -r16.y, l(6)
        ushr r17.xy, r15.zyzz, r8.wwww
        or r8.w, r16.z, l(0x40000000)
        bfi r9.w, l(1), l(1), r17.y, l(0)
        bfi r9.w, l(1), l(0), r17.x, r9.w
        imul null, r9.w, r9.w, l(10)
        ushr r8.w, r8.w, r9.w
        and r8.w, r8.w, l(1023)
        iadd r17.x, r8.w, r16.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.x, l(0), t23.xxxx
        iadd r17.yz, r16.yyyy, l(0, 1, 2, 0)
        iadd r8.w, -r17.y, l(6)
        ushr r16.yw, r15.zzzy, r8.wwww
        and r8.w, r17.w, l(0xc0000000)
        or r9.w, r17.w, l(0x40000000)
        bfi r10.w, l(1), l(1), r16.w, l(0)
        bfi r10.w, l(1), l(0), r16.y, r10.w
        imul null, r10.w, r10.w, l(10)
        ushr r9.w, r9.w, r10.w
        and r9.w, r9.w, l(1023)
        iadd r18.x, r9.w, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.z, r18.x, l(0), t23.xxxx
        mov r18.y, r17.z
        movc r18.xyz, r8.wwww, r17.xywx, r18.xyzx
        iadd r9.w, -r18.y, l(6)
        ushr r16.yw, r15.zzzy, r9.wwww
        and r9.w, r18.z, l(0xc0000000)
        or r10.w, r18.z, l(0x40000000)
        bfi r15.w, l(1), l(1), r16.w, l(0)
        bfi r15.w, l(1), l(0), r16.y, r15.w
        imul null, r15.w, r15.w, l(10)
        ushr r10.w, r10.w, r15.w
        and r10.w, r10.w, l(1023)
        iadd r19.x, r10.w, r18.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.y, r19.x, l(0), t23.xxxx
        movc r16.yw, r9.wwww, r18.xxxz, r19.xxxy
        movc r16.xz, r8.wwww, r17.xxwx, r16.yywy
      endif 
      and r8.w, r16.z, l(0xc0000000)
      if_z r8.w
        ubfe r9.w, l(14), l(15), r16.z
        utof r9.w, r9.w
        mul r9.w, r9.w, cb2[27].w
        mul r9.w, r9.w, l(0.00006104)
        and r16.yw, r16.zzzz, l(0, 0x00007fff, 0, 0x20000000)
        utof r10.w, r16.y
        mul r10.w, r10.w, cb2[27].w
        mul r10.w, r10.w, l(0.00003052)
        and r15.w, r15.y, l(3)
        iadd r15.w, r15.w, r16.x
        iadd r15.w, r15.w, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.w, r15.w, l(0), t23.xxxx
        bfi r17.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r15.xyzx, l(0, 0, 0, 0)
        ushr r15.x, r15.w, r17.x
        and r15.x, r15.x, l(255)
        utof r15.x, r15.x
        mul r15.x, r10.w, r15.x
        mad r15.x, r15.x, l(0.00392157), r9.w
        iadd r15.y, r17.y, l(1)
        ubfe r15.z, l(1), l(1), r15.z
        iadd r15.y, r15.z, r15.y
        iadd r15.y, r15.y, r16.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.y, r15.y, l(0), t23.xxxx
        ushr r15.y, r15.y, r17.z
        and r15.y, r15.y, l(0x0000ffff)
        utof r15.y, r15.y
        mul r10.w, r10.w, r15.y
        mad r9.w, r10.w, l(0.00001526), r9.w
        movc r12.w, r16.w, r15.x, r9.w
      else 
        and r9.w, r16.z, l(0x80000000)
        iadd r10.w, r16.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.w, r10.w, l(0), t23.xxxx
        movc r9.w, r9.w, r10.w, l(0)
        ishl r10.w, r16.z, l(2)
        ushr r15.x, r9.w, l(16)
        f16tof32 r15.x, r15.x
        and r9.w, r9.w, l(0x0000ffff)
        f16tof32 r9.w, r9.w
        mad r10.w, r13.y, r15.x, r10.w
        mad r9.w, r13.z, r9.w, r10.w
        movc r12.w, r8.w, r9.w, r12.w
      endif 
    endif 
    mad r8.w, -cb2[27].z, l(2.000000), r13.w
    lt r8.w, r12.w, r8.w
    movc r4.z, r8.w, l(0), l(1.000000)
  endif 
  if_z r7.w
    if_z cb2[58].y
      ftou r7.w, r4.w
      add r15.xy, r13.yzyy, -cb2[r7.w + 20].xyxx
      mul r15.xy, r15.xyxx, cb2[r7.w + 20].zzzz
      mad r15.xy, r15.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r7.w, cb2[26].y
      add r15.z, r4.w, r7.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r7.w, r15.xyzx, t13.xxxx, s13, r4.y
      sample_l_indexable(texture2darray)(float,float,float,float) r8.w, r15.xyzx, t31.yzwx, s0, l(0.000000)
      add r7.w, r7.w, r8.w
      add_sat r7.w, r7.w, l(-1.000000)
      mul r8.w, r7.w, r7.w
      mul r4.z, r7.w, r8.w
    endif 
    if_nz cb2[58].y
      mov r15.x, -r4.x
      ftou r7.w, r4.w
      add r4.w, r4.w, l(1.000000)
      min r4.w, r4.w, l(2.000000)
      ftou r4.w, r4.w
      add r6.w, -r6.w, l(1.000000)
      mul r6.w, r6.w, l(28.000000)
      ftou r6.w, r6.w
      add r16.xy, r13.yzyy, -cb2[r7.w + 20].xyxx
      mul r16.xy, r16.xyxx, cb2[r7.w + 20].zzzz
      mad r16.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r13.yz, r13.yyzy, -cb2[r4.w + 20].xxyx
      mul r13.yz, r13.yyzy, cb2[r4.w + 20].zzzz
      mad r13.yz, r13.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r15.y, r13.x
      mov r15.z, r4.x
      mov r8.w, l(0)
      mov r9.w, l(0)
      loop 
        uge r10.w, r9.w, l(8)
        breakc_nz r10.w
        ult r10.w, r6.w, r9.w
        movc r16.zw, r10.wwww, r13.yyyz, r16.xxxy
        movc r12.w, r10.w, cb2[r4.w + 20].w, cb2[r7.w + 20].w
        movc r10.w, r10.w, r4.w, r7.w
        dp2 r17.x, icb[r9.w + 0].yxyy, r15.xyxx
        dp2 r17.y, icb[r9.w + 0].yxyy, r15.yzyy
        mad r17.xy, r17.xyxx, r12.wwww, r16.zwzz
        iadd r10.w, r10.w, cb2[26].y
        utof r17.z, r10.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r17.xyzx, t13.xxxx, s13, r4.y
        sample_l_indexable(texture2darray)(float,float,float,float) r12.w, r17.xyzx, t31.yzwx, s0, l(0.000000)
        add r10.w, r10.w, r12.w
        add_sat r10.w, r10.w, l(-1.000000)
        mad r8.w, r10.w, l(0.125000), r8.w
        iadd r9.w, r9.w, l(1)
      endloop 
      mul r4.y, r8.w, r8.w
      mul r4.z, r8.w, r4.y
    endif 
  endif 
endif 
add r4.y, -r2.y, l(1.000000)
mul r4.y, r4.y, l(5.000000)
add r13.yzw, r10.xxyz, -cb2[35].xxyz
mul r15.x, r13.y, cb2[35].w
mul r15.yz, r13.zzwz, cb2[36].xxyx
add_sat r13.yzw, r15.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
mul r15.xy, r13.yzyy, cb2[36].zwzz
mul r15.z, r13.w, cb2[37].x
add r13.yzw, r15.xxyz, cb2[37].yyzw
lt r15.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
movc r15.xyz, r15.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
mov r15.w, l(0)
add r16.xyz, r13.yzwy, r15.wwxw
sample_l_indexable(texture3d)(float,float,float,float) r16.xyz, r16.xyzx, t17.xyzw, s4, l(0.000000)
mul r17.xyz, r11.xyzx, r11.xyzx
mul r17.xyz, r17.xyzx, cb2[19].xxxx
add r18.xyz, r13.yzwy, r15.wwyw
sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t18.xyzw, s4, l(0.000000)
mul r18.xyz, r17.yyyy, r18.xyzx
mad r16.xyz, r16.xyzx, r17.xxxx, r18.xyzx
add r13.yzw, r13.yyzw, r15.wwwz
sample_l_indexable(texture3d)(float,float,float,float) r13.yzw, r13.yzwy, t19.wxyz, s4, l(0.000000)
mad r13.yzw, r13.yyzw, r17.zzzz, r16.xxyz
mov r11.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r15.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
mul r13.yzw, r13.yyzw, r15.xxyz
dp3 r4.w, r13.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
mov r14.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r14.xyz, r14.xyzw, t8.xyzw, s2, r4.y
add r4.y, -r4.w, cb2[19].x
mad r4.y, r2.y, r4.y, r4.w
mul r14.xyz, r4.yyyy, r14.xyzx
add r4.y, r5.x, r2.x
log r4.y, |r4.y|
mul r4.y, r1.w, r4.y
exp r4.y, r4.y
add r4.y, r5.x, r4.y
add_sat r4.y, r4.y, l(-1.000000)
mul r13.yzw, r5.xxxx, r13.yyzw
mad r15.xy, r2.xyxx, l(0.984375, 0.984375, 0.000000, 0.000000), l(0.00781250, 0.00781250, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r15.xy, r15.xyxx, t5.xyzw, s2, l(0.000000)
mul r14.xyz, r4.yyyy, r14.xyzx
mul r15.xzw, r15.xxxx, r14.xxyz
mul r14.xyz, r15.yyyy, r14.xyzx
if_nz r2.z
  mov r16.x, l(3)
  mov r16.yzw, cb1[24].xxyz
  store_structured u2.xyzw, cb2[52].x, l(112), r16.xyzw
endif 
lt r2.y, l(0.000000), r3.z
if_nz r2.y
  if_nz r2.z
    ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r2.y, cb2[52].x, l(112), u2.xxxx
    or r2.y, r2.y, l(4)
    store_structured u2.x, cb2[52].x, l(112), r2.y
    store_structured u2.x, cb2[52].x, l(128), r4.z
  endif 
  lt r2.y, l(0.000000), r4.z
  if_nz r2.y
    sqrt r2.y, r1.w
    mad r2.y, r2.y, l(0.500000), l(0.500000)
    mul r2.y, r2.y, r2.y
    mul r4.y, r2.y, l(0.500000)
    mad r2.y, -r2.y, l(0.500000), l(1.000000)
    mad r4.w, r2.x, r2.y, r4.y
    mul r2.y, r2.y, r4.w
    mul r4.y, r4.w, r4.y
    mul r4.w, r1.z, cb2[18].w
    mul r4.w, r3.z, r4.w
    if_nz cb2[23].x
      add r16.xyz, r10.xyzx, cb1[24].xyzx
      mov r16.w, l(1.000000)
      dp4 r5.x, cb2[24].xyzw, r16.xyzw
      dp4 r6.w, cb2[25].xyzw, r16.xyzw
      frc r16.x, r5.x
      frc r16.y, r6.w
      iadd r5.x, l(-1), cb2[23].x
      utof r16.z, r5.x
      sample_l_indexable(texture2darray)(float,float,float,float) r16.xyz, r16.xyzx, t20.xyzw, s2, l(0.000000)
      add r16.xyz, r16.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r16.xyz, cb2[23].yyyy, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r16.xyz, r16.xyzx, cb2[18].xyzx
    else 
      mov r16.xyz, cb2[18].xyzx
    endif 
    ushr r5.x, cb2[53].x, l(16)
    ult r6.w, l(0), r5.x
    and r6.w, r0.z, r6.w
    if_nz r6.w
      iadd r5.x, r5.x, cb2[0].x
      imad r5.x, r5.x, l(15), l(-15)
      mad r6.w, |r2.w|, l(-0.200000), l(0.400000)
      mad r17.xyz, r11.xyzx, r6.wwww, r10.xyzx
      mov r18.xyz, cb9[r5.x + 4].yzwy
      mov r18.w, cb9[r5.x + 5].x
      mov r17.w, l(1.000000)
      dp4 r18.x, r18.xyzw, r17.xyzw
      mov r19.xyz, cb9[r5.x + 5].yzwy
      mov r19.w, cb9[r5.x + 6].x
      dp4 r18.y, r19.xyzw, r17.xyzw
      mad r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r19.x, r18.x, cb9[r5.x + 9].w
      add r19.y, r18.y, cb9[r5.x + 10].x
      mul r18.xy, r19.xyxx, cb9[r5.x + 9].yzyy
      div r18.zw, cb9[r5.x + 3].yyyy, cb9[r5.x + 8].yyyw
      add r19.xy, -r18.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r19.xy, r18.xyxx, r19.xyxx
      ge r18.zw, r18.zzzw, r18.xxxy
      or r18.zw, r18.zzzw, r19.xxxy
      or r6.w, r18.w, r18.z
      if_z r6.w
        mov r19.xyz, cb9[r5.x + 6].yzwy
        mov r19.w, cb9[r5.x + 7].x
        dp4 r6.w, r19.xyzw, r17.xyzw
        mov_sat r18.xy, r18.xyxx
        mad r17.x, r18.x, cb9[r5.x + 8].y, cb9[r5.x + 8].z
        mad r17.y, r18.y, cb9[r5.x + 8].w, cb9[r5.x + 9].x
        add r6.w, r6.w, cb9[r5.x + 10].y
        div r6.w, r6.w, cb9[r5.x + 10].z
        max r6.w, r6.w, l(0.00006104)
        and r7.w, l(0x0000ffff), cb9[r5.x + 1].w
        if_nz cb2[58].y
          mov r18.x, -r4.x
          utof r19.z, r7.w
          mov r18.y, r13.x
          mov r18.z, r4.x
          mov r8.w, l(0)
          mov r9.w, l(0)
          loop 
            ige r10.w, r9.w, l(8)
            breakc_nz r10.w
            dp2 r20.x, icb[r9.w + 0].yxyy, r18.xyxx
            dp2 r20.y, icb[r9.w + 0].yxyy, r18.yzyy
            mad r19.xy, r20.xyxx, cb9[r5.x + 3].yyyy, r17.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r19.xyzx, t9.xxxx, s13, r6.w
            mad r8.w, r10.w, l(0.125000), r8.w
            iadd r9.w, r9.w, l(1)
          endloop 
        else 
          utof r17.z, r7.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r17.xyzx, t9.xxxx, s13, r6.w
        endif 
        mul r5.x, r8.w, r8.w
        mul r5.x, r8.w, r5.x
      else 
        mov r5.x, l(1.000000)
      endif 
      mul r4.z, r4.z, r5.x
    else 
      and r5.x, cb2[53].x, l(0x0000ffff)
      ult r6.w, l(0), r5.x
      not r0.z, r0.z
      and r0.z, r0.z, r6.w
      if_nz r0.z
        iadd r0.z, r5.x, cb2[0].x
        imad r0.z, r0.z, l(15), l(-15)
        mad r5.x, |r2.w|, l(-0.200000), l(0.400000)
        mad r17.xyz, r11.xyzx, r5.xxxx, r10.xyzx
        mov r18.xyz, cb9[r0.z + 4].yzwy
        mov r18.w, cb9[r0.z + 5].x
        mov r17.w, l(1.000000)
        dp4 r18.x, r18.xyzw, r17.xyzw
        mov r19.xyz, cb9[r0.z + 5].yzwy
        mov r19.w, cb9[r0.z + 6].x
        dp4 r18.y, r19.xyzw, r17.xyzw
        mad r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r19.x, r18.x, cb9[r0.z + 9].w
        add r19.y, r18.y, cb9[r0.z + 10].x
        mul r18.xy, r19.xyxx, cb9[r0.z + 9].yzyy
        div r18.zw, cb9[r0.z + 3].yyyy, cb9[r0.z + 8].yyyw
        add r19.xy, -r18.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r19.xy, r18.xyxx, r19.xyxx
        ge r18.zw, r18.zzzw, r18.xxxy
        or r18.zw, r18.zzzw, r19.xxxy
        or r5.x, r18.w, r18.z
        if_z r5.x
          mov r19.xyz, cb9[r0.z + 6].yzwy
          mov r19.w, cb9[r0.z + 7].x
          dp4 r5.x, r19.xyzw, r17.xyzw
          mov_sat r18.xy, r18.xyxx
          mad r17.x, r18.x, cb9[r0.z + 8].y, cb9[r0.z + 8].z
          mad r17.y, r18.y, cb9[r0.z + 8].w, cb9[r0.z + 9].x
          add r5.x, r5.x, cb9[r0.z + 10].y
          div r5.x, r5.x, cb9[r0.z + 10].z
          max r5.x, r5.x, l(0.00006104)
          and r6.w, l(0x0000ffff), cb9[r0.z + 1].w
          if_nz cb2[58].y
            mov r18.x, -r4.x
            utof r19.z, r6.w
            mov r18.y, r13.x
            mov r18.z, r4.x
            mov r4.x, l(0)
            mov r7.w, l(0)
            loop 
              ige r8.w, r7.w, l(8)
              breakc_nz r8.w
              dp2 r20.x, icb[r7.w + 0].yxyy, r18.xyxx
              dp2 r20.y, icb[r7.w + 0].yxyy, r18.yzyy
              mad r19.xy, r20.xyxx, cb9[r0.z + 3].yyyy, r17.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.w, r19.xyzx, t9.xxxx, s13, r5.x
              mad r4.x, r8.w, l(0.125000), r4.x
              iadd r7.w, r7.w, l(1)
            endloop 
          else 
            utof r17.z, r6.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r4.x, r17.xyzx, t9.xxxx, s13, r5.x
          endif 
          mul r0.z, r4.x, r4.x
          mul r0.z, r4.x, r0.z
        else 
          mov r0.z, l(1.000000)
        endif 
        mul r4.z, r0.z, r4.z
      endif 
    endif 
    mad r0.z, -r2.x, l(0.500000), l(1.000000)
    mad r0.z, -r3.z, r0.z, l(1.000000)
    mul r0.z, r0.z, r0.z
    mad r0.z, -r0.z, l(0.620000), l(0.620000)
    add r0.z, -r3.z, r0.z
    mad r0.z, r1.w, r0.z, r3.z
    mul r0.z, r4.z, r0.z
    lt r1.w, l(0.000000), r2.w
    mad r17.xyz, r0.zzzz, r16.xyzx, r13.yzwy
    mad r18.xyz, -r10.xyzx, r0.wwww, cb2[17].xyzx
    dp3 r0.z, r18.xyzx, r18.xyzx
    rsq r0.z, r0.z
    mul r18.xyz, r0.zzzz, r18.xyzx
    dp3 r0.z, r18.xyzx, r12.xyzx
    dp3 r0.w, r11.xyzx, r18.xyzx
    mad r1.z, |r0.w|, r1.z, -|r0.w|
    mad r0.w, |r0.w|, r1.z, l(1.000000)
    mad r1.z, r3.z, r2.y, r4.y
    mul r0.w, r0.w, r0.w
    mul r0.w, r1.z, r0.w
    rcp r0.w, r0.w
    mul r0.w, r4.w, r0.w
    mul r0.w, r0.w, r4.z
    mul r0.w, r0.w, l(0.250000)
    mad r2.xyw, r0.wwww, r16.xyxz, r14.xyxz
    add_sat r0.z, -r0.z, l(1.000000)
    mul r1.z, r0.z, r0.z
    mul r1.z, r1.z, r1.z
    mul r0.z, r0.z, r1.z
    mul r0.z, r0.z, r0.w
    mad r4.xyw, r0.zzzz, r16.xyxz, r15.xzxw
    movc r13.yzw, r1.wwww, r17.xxyz, r13.yyzw
    movc r15.xzw, r1.wwww, r4.xxyw, r15.xxzw
    movc r14.xyz, r1.wwww, r2.xywx, r14.xyzx
    if_nz r2.z
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r0.z, cb2[52].x, l(112), u2.xxxx
      or r0.z, r0.z, l(8)
      store_structured u2.x, cb2[52].x, l(112), r0.z
      store_structured u2.x, cb2[52].x, l(132), r4.z
    endif 
    mov r0.z, l(0x00010101)
  else 
    mov r0.z, l(257)
  endif 
else 
  mov r0.z, l(1)
endif 
mad r3.xyz, r3.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.w, r3.y
mad r2.xyw, r6.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r1.z, r2.x
ieq r1.z, r0.w, r1.z
movc r1.zw, r1.zzzz, r2.yyyw, l(0,0,-1.000000,0)
mad r2.xyw, r7.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r2.x, r2.x
ieq r2.x, r0.w, r2.x
movc r2.xy, r2.xxxx, r2.ywyy, l(-1.000000,0,0,0)
mad r4.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.w, r4.x
ieq r2.w, r0.w, r2.w
movc r4.xy, r2.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r6.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.w, r6.x
ieq r0.w, r0.w, r2.w
movc r4.zw, r0.wwww, r6.yyyz, l(0,0,-1.000000,0)
mov r6.x, r1.z
mov r6.y, r2.x
mov r6.zw, r4.xxxz
add r6.xyzw, -r3.xxxx, r6.xyzw
ge r6.xyzw, |r6.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r6.xyzw, r6.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.w, r6.y, r6.x
add r0.w, r6.z, r0.w
add r0.w, r6.w, r0.w
mul r1.z, r2.y, r6.y
mad r1.z, r6.x, r1.w, r1.z
mad r1.z, r6.z, r4.y, r1.z
mad r1.z, r6.w, r4.w, r1.z
div r3.w, r1.z, r0.w
ge r0.w, l(0.000000), r0.w
movc r3.yz, r0.wwww, l(0,0,0,0), r3.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.w, r1.w, r1.z
movc r2.xyw, r0.wwww, r3.xyxz, r3.xzxy
mad r0.w, -r2.w, l(0.500000), r2.x
add r3.y, r0.w, r2.w
mad r3.z, -r2.y, l(0.500000), r0.w
add r3.x, r2.y, r3.z
add r2.xyw, -r3.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
mul r2.xyw, r2.xyxw, r15.xzxw
mad r2.xyw, r14.xyxz, r3.xyxz, r2.xyxw
mad r2.xyw, r13.yzyw, r5.yzyw, r2.xyxw
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r10.xyzx, r10.xyzx
  rsq r1.z, r0.w
  mul r3.xyz, r1.zzzz, r10.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r3.w, l(0.010000), |r10.z|
    mul r4.xy, r10.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r3.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r5.xyz, r1.wwww, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xyzx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r10.z|
    mul r3.w, r10.z, cb2[15].z
    mul r4.w, r3.w, l(-1.442695)
    exp r4.w, r4.w
    add r4.w, -r4.w, l(1.000000)
    div r3.w, r4.w, r3.w
    mul r3.w, r1.z, r3.w
    movc r1.z, r1.w, r3.w, r1.z
    mul r5.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r3.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r3.x, cb2[8].w, -r1.z, l(1.000000)
  mul r3.x, r3.x, r3.x
  mul r3.x, r3.x, l(12.566371)
  div r1.w, r1.w, r3.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r3.xyz, r0.wwww, cb2[11].xyzx
  mad r3.xyz, r1.zzzz, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r5.xyzx
  mad r3.xyz, r2.xywx, r4.xyzx, r3.xyzx
else 
  mul r0.w, r10.z, cb2[6].x
  mad r1.z, cb2[6].x, r10.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r3.w, r1.z, l(64.000000)
  mul r3.w, r3.w, l(1.442695)
  exp r3.w, r3.w
  mov_sat r4.x, cb2[6].z
  lt r4.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r4.y, r3.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r4.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r10.xyzx, r10.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r4.xyz, r1.zzzz, r10.xyzx
  dp3 r1.z, cb2[7].yzwy, r4.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r1.zzzz, r4.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r4.w
  add r4.xyz, -r2.xywx, r4.xyzx
  mad r3.xyz, r0.wwww, r4.xyzx, r2.xywx
endif 
mul r2.xyw, r3.xyxz, cb1[85].yyyy
ge r3.xyz, r2.xywx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyw, r2.xyxw, r3.xyxz
min r2.xyw, r2.xyxw, l(65024.000000, 65024.000000, 0.000000, 64512.000000)
ilt r0.w, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(1, 4, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r1.z, cb2[55].w, l(16)
ine r1.w, r1.z, l(0)
ieq r1.z, r1.z, l(0)
and r1.z, r1.z, r1.w
and r3.z, r1.z, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xywx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xywx
movc r2.xyw, r0.wwww, r3.xyxz, r2.xyxw
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      mov r0.w, l(1)
      break 
      case l(2)
      ubfe r0.w, l(1), l(8), r0.z
      break 
      case l(3)
      ushr r0.w, r0.z, l(16)
      break 
      case l(4)
      mov r0.w, l(0)
      break 
      case l(5)
      mov r0.w, l(1)
      break 
      default 
      mov r0.w, l(0)
      break 
    endswitch 
    utof r0.w, r0.w
    mul r0.w, r0.w, cb2[53].z
    mad r3.xyz, r0.wwww, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xywx
    mad r2.xyw, cb2[53].wwww, r3.xyxz, r2.xyxw
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xywx
if_nz r2.z
  add r1.xyz, r10.xyzx, cb1[24].xyzx
  mov r1.w, l(1)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  store_structured u2.x, cb2[52].x, l(108), l(0)
endif 
if_nz cb2[52].y
  atomic_iadd g1, l(0), l(1)
  ubfe r0.w, l(1), l(8), r0.z
  atomic_iadd g1, l(4), r0.w
  ushr r0.z, r0.z, l(16)
  atomic_iadd g1, l(8), r0.z
  atomic_iadd g1, l(12), l(0)
  atomic_iadd g1, l(16), l(1)
  atomic_umax g2, l(0), l(1)
  atomic_umax g2, l(4), r0.w
  atomic_umax g2, l(8), r0.z
  atomic_umax g2, l(12), l(0)
  atomic_umax g2, l(16), l(1)
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.z, r1.x, l(63)
  if_nz r0.z
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.z, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.z
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.z, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.z
    ieq r0.xy, r0.xyxx, cb2[52].zwzz
    and r0.x, r0.y, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.z
    endif 
  endif 
endif 
ret 
// Approximately 861 instruction slots used
