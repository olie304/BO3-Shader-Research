//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:43:39 2021
//
//
// Buffer Definitions: 
//
// cbuffer GenericsCBuffer
// {
//
//   float4 scriptVector0;              // Offset:    0 Size:    16
//   float4 scriptVector1;              // Offset:   16 Size:    16
//   float4 scriptVector2;              // Offset:   32 Size:    16
//   float4 scriptVector3;              // Offset:   48 Size:    16
//   float4 scriptVector4;              // Offset:   64 Size:    16
//   float4 scriptVector5;              // Offset:   80 Size:    16 [unused]
//   float4 scriptVector6;              // Offset:   96 Size:    16 [unused]
//   float4 scriptVector7;              // Offset:  112 Size:    16 [unused]
//   float4 weaponParam0;               // Offset:  128 Size:    16 [unused]
//   float4 weaponParam1;               // Offset:  144 Size:    16 [unused]
//   float4 weaponParam2;               // Offset:  160 Size:    16 [unused]
//   float4 weaponParam3;               // Offset:  176 Size:    16 [unused]
//   float4 weaponParam4;               // Offset:  192 Size:    16 [unused]
//   float4 weaponParam5;               // Offset:  208 Size:    16 [unused]
//   float4 weaponParam6;               // Offset:  224 Size:    16 [unused]
//   float4 weaponParam7;               // Offset:  240 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// GenericsCBuffer                   cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[5], immediateIndexed
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 3
mul r0.xy, cb3[1].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r0.xy, cb3[1].xyxx, v2.xyxx, -r0.xyxx
min r0.z, |r0.x|, |r0.y|
max r0.w, |r0.x|, |r0.y|
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.z, r0.w, r0.z
mul r0.w, r0.z, r0.z
mad r1.x, r0.w, l(0.02083510), l(-0.085133)
mad r1.x, r0.w, r1.x, l(0.180141)
mad r1.x, r0.w, r1.x, l(-0.33029950)
mad r0.w, r0.w, r1.x, l(0.999866)
mul r1.x, r0.w, r0.z
lt r1.y, |r0.x|, |r0.y|
mad r1.x, r1.x, l(-2.000000), l(1.57079637)
and r1.x, r1.y, r1.x
mad r0.z, r0.z, r0.w, r1.x
lt r0.w, r0.x, -r0.x
and r0.w, r0.w, l(0xc0490fdb)
add r0.z, r0.w, r0.z
min r0.w, r0.x, r0.y
max r1.x, r0.x, r0.y
lt r0.w, r0.w, -r0.w
ge r1.x, r1.x, -r1.x
and r0.w, r0.w, r1.x
movc r0.z, r0.w, -r0.z, r0.z
lt r0.w, r0.z, l(0.000000)
add r1.x, r0.z, l(3.14159274)
movc r0.z, r0.w, r1.x, r0.z
lt r0.w, l(1.57079637), r0.z
add r1.x, r0.z, l(-1.57079637)
add r1.x, -r1.x, l(1.57079637)
movc r0.z, r0.w, r1.x, r0.z
mul r0.w, cb3[3].y, l(0.00872665)
ge r0.w, r0.w, r0.z
mad r1.x, -cb3[3].z, l(0.00872665), l(1.57079637)
ge r0.z, r0.z, r1.x
or r0.z, r0.z, r0.w
if_nz r0.z
  lt r0.z, l(0.000000), cb3[3].x
  mov_sat r0.w, cb3[3].x
  mad r1.xy, cb3[1].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), -cb3[0].yyyy
  mul r1.zw, r0.xxxy, r0.xxxy
  mul r2.xy, r1.xyxx, r1.xyxx
  div r2.xy, r1.zwzz, r2.xyxx
  add r2.x, r2.y, r2.x
  ge r2.y, l(1.000000), r2.x
  add r1.xy, r1.xyxx, -cb3[0].xxxx
  mul r1.xy, r1.xyxx, r1.xyxx
  div r1.xy, r1.zwzz, r1.xyxx
  add r1.x, r1.y, r1.x
  ge r1.y, r1.x, l(1.000000)
  add r1.z, -cb3[2].y, l(1.000000)
  add r1.w, -r1.z, l(1.000000)
  add r1.z, -r1.z, r2.x
  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
  mul_sat r1.z, r1.w, r1.z
  mad r1.w, r1.z, l(-2.000000), l(3.000000)
  mul r1.z, r1.z, r1.z
  mad r1.z, -r1.w, r1.z, l(1.000000)
  add r1.x, r1.x, l(-1.000000)
  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[2].x
  mul_sat r1.x, r1.w, r1.x
  mad r1.w, r1.x, l(-2.000000), l(3.000000)
  mul r1.x, r1.x, r1.x
  mul r1.x, r1.x, r1.w
  mul r1.x, r1.x, r1.z
  and r1.x, r1.x, r1.y
  and r1.x, r1.x, r2.y
  mul r0.w, r0.w, r1.x
  and r0.z, r0.w, r0.z
else 
  mov r0.z, l(0)
endif 
lt r0.w, l(0.000000), cb3[0].y
if_nz r0.w
  mul r0.w, cb3[0].x, l(0.500000)
  lt r0.w, |r0.y|, r0.w
  if_nz r0.w
    lt r1.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb3[4].xyxx
    mad r1.zw, cb3[1].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), -cb3[0].yyyy
    mad r1.zw, -cb3[0].xxxx, l(0.000000, 0.000000, 0.500000, 0.500000), r1.zzzw
    mul r2.xy, r0.xyxx, r0.xyxx
    mul r1.zw, r1.zzzw, r1.zzzw
    div r1.zw, r2.xxxy, r1.zzzw
    add r0.w, r1.w, r1.z
    lt r1.z, l(1.000000), r0.w
    and r1.x, r1.z, r1.x
    add r1.z, cb3[0].x, -cb3[2].z
    add r1.w, -r1.z, cb3[0].x
    add r0.y, |r0.y|, -r1.z
    div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
    mul_sat r0.y, r0.y, r1.z
    mad r1.z, r0.y, l(-2.000000), l(3.000000)
    mul r0.y, r0.y, r0.y
    mad r0.y, -r1.z, r0.y, l(1.000000)
    mul r1.zw, r0.yyyy, cb3[4].xxxy
    mad r0.y, cb3[1].x, l(0.500000), -cb3[2].z
    mad r2.x, cb3[1].x, l(0.500000), -r0.y
    add r0.x, -r0.y, |r0.x|
    div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
    mul_sat r0.x, r0.y, r0.x
    mad r0.y, r0.x, l(-2.000000), l(3.000000)
    mul r0.x, r0.x, r0.x
    mad r0.x, -r0.y, r0.x, l(1.000000)
    mul r0.x, r0.x, r1.z
    max r0.x, r0.x, r0.z
    ge r0.y, l(1.000000), r0.w
    and r0.y, r0.y, r1.y
    max r0.w, r0.z, r1.w
    movc r0.y, r0.y, r0.w, r0.z
    movc r0.z, r1.x, r0.x, r0.y
  endif 
endif 
mul o0.w, r0.z, v1.w
mov o0.xyz, v1.xyzx
ret 
// Approximately 116 instruction slots used
