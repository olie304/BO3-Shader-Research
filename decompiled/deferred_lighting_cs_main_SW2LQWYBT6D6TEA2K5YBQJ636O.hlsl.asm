//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:57 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16 [unused]
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 36
dcl_thread_group 8, 8, 1
imad r0.x, cb2[57].x, l(51), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.yz, r0.xxyx, l(0, 4095, 4095, 0)
imad r1.xy, r0.yzyy, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r0.w, r3.y, r3.x
lt r3.x, l(0.000000), r2.z
and r0.w, r0.w, r3.x
if_z r0.w
  ret 
endif 
ge r3.x, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r3.y, r1.xyww, t4.yxzw
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyww, t0.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r1.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
utof r1.zw, r1.yyyx
add r3.zw, r1.wwwz, l(0.000000, 0.000000, 0.500000, 0.500000)
ge r10.x, r3.y, l(0.984375)
mul r4.w, r3.y, l(1.01587307)
mad r3.y, r3.y, l(64.000000), l(-63.000000)
movc r3.y, r10.x, r3.y, r4.w
max r3.y, r3.y, l(0.00000001)
rcp r10.y, r3.y
and r10.xy, r0.wwww, r10.xyxx
add r10.zw, r3.zzzw, -cb1[71].xxxy
mul r10.zw, r10.zzzw, cb1[44].zzzw
mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r11.x, r10.z, cb1[12].x
mul r11.y, r10.w, cb1[13].y
mov r11.z, l(1.000000)
mul r11.xyz, r10.yyyy, r11.xyzx
mul r12.xyz, r11.yyyy, cb1[17].xyzx
mad r11.xyw, r11.xxxx, cb1[16].xyxz, r12.xyxz
mad r11.xyz, r11.zzzz, cb1[18].xyzx, r11.xywx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r12.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r12.z
mul r12.xy, r2.wwww, r2.xyxx
and r13.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r13.xyzw, r13.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r13.w, r13.z
movc r13.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r13.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r14.xyz, r13.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r12.xyz, r12.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r12.yyyy
mad r2.xyw, r14.xyxz, r12.xxxx, r2.xyxw
mad r12.xyz, r13.xyzx, r12.zzzz, r2.xywx
movc r0.w, r3.x, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r11.xyzx, -r11.xyzx
rsq r0.w, r0.w
mul r13.xyz, r0.wwww, -r11.xyzx
dp2 r0.w, r1.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r3.x, r14.x, r0.w
dp2 r0.w, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r15.x, r16.x, r0.w
dp3_sat r2.x, r12.xyzx, r13.xyzx
dp3 r0.w, -r13.xyzx, r12.xyzx
add r0.w, r0.w, r0.w
mad r17.xyz, r12.xyzx, -r0.wwww, -r13.xyzx
mul r0.w, r2.y, l(17.000000)
exp r0.w, r0.w
add r0.w, r0.w, l(2.000000)
div r0.w, l(2.000000), r0.w
sqrt r1.z, r0.w
mul r2.zw, r3.zzzw, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r18.xyzw, r2.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r19.xyzw, r2.zwzz, t28.xyzw, s4.x
mul r2.zw, r3.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r2.zw, r2.zzzw
add r3.zw, -r2.wwwz, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r20.y, r3.z, r3.w
mul r20.xz, r2.zzwz, r3.zzwz
mul r20.w, r2.w, r2.z
dp4 r1.w, r18.xyzw, r20.xyzw
add r19.xyzw, -r10.yyyy, r19.xyzw
min r2.z, |r19.w|, |r19.z|
min r2.z, r2.z, |r19.y|
min r2.z, r2.z, |r19.x|
max r2.w, |r19.w|, |r19.z|
max r2.w, r2.w, |r19.y|
max r2.w, r2.w, |r19.x|
eq r15.yzw, r2.zzzz, |r19.yyzw|
movc r2.z, r15.y, r18.y, r18.x
movc r2.z, r15.z, r18.z, r2.z
movc r2.z, r15.w, r18.w, r2.z
mul r3.z, r10.y, l(0.010000)
lt r2.w, r3.z, r2.w
movc r1.w, r2.w, r2.z, r1.w
mul r2.z, r1.w, r5.z
add r2.w, -r2.y, l(1.000000)
mul r3.z, r2.w, l(5.000000)
mad r3.w, r2.w, l(5.000000), l(-2.500000)
mul r3.w, r3.w, l(0.400000)
max r3.w, r3.w, l(0.000000)
mul r3.w, r3.w, l(100.000000)
mad r10.yz, -r2.wwww, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r4.w, r10.y
mul r4.w, r2.x, r4.w
mul r4.w, r4.w, l(9.136810)
mul r6.w, r2.w, r3.z
mad r6.w, -r6.w, l(2.015905), r10.z
exp r6.w, r6.w
mul r6.w, r2.x, r6.w
mul r6.w, r6.w, l(9.708090)
max r4.w, r4.w, r6.w
max r4.w, r4.w, l(1.268160)
iadd r6.w, cb2[0].y, -cb2[58].x
ftou r7.w, cb1[44].x
iadd r7.w, r7.w, l(7)
ushr r7.w, r7.w, l(3)
imad r0.y, r0.z, r7.w, r0.y
bfi r0.y, l(27), l(5), r0.y, l(16)
and r0.z, r6.w, l(-32)
iadd r7.w, -r0.z, r6.w
and r8.w, cb2[0].y, l(-32)
iadd r9.w, -r8.w, cb2[0].y
mov r18.yz, l(0,0,1.000000,0)
mov r19.xy, l(0,0,0,0)
mov r20.x, l(1.000000)
mov r21.xy, l(0,0,0,0)
mov r22.xy, l(0,0,0,0)
mov r23.xyzw, l(0,0,0,0)
mov r24.yzw, l(0,0,0,0)
mov r10.y, r0.z
loop 
  uge r10.z, r10.y, cb2[0].y
  breakc_nz r10.z
  ushr r10.z, r10.y, l(5)
  iadd r10.z, r0.y, r10.z
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r10.z, r10.z, l(0), t26.xxxx
  ieq r10.w, r0.z, r10.y
  bfi r13.w, r7.w, l(0), l(0), r10.z
  movc r10.z, r10.w, r13.w, r10.z
  ieq r10.w, r8.w, r10.y
  ubfe r13.w, r9.w, l(0), r10.z
  movc r10.z, r10.w, r13.w, r10.z
  mov r25.xyzw, r23.xyzw
  mov r26.xyz, r24.yzwy
  mov r10.w, r10.z
  loop 
    breakc_z r10.w
    firstbit_lo r13.w, r10.w
    ishl r14.w, l(1), r13.w
    not r14.w, r14.w
    and r10.w, r10.w, r14.w
    iadd r13.w, r10.y, r13.w
    imul null, r13.w, r13.w, l(14)
    add r15.yzw, r11.xxyz, -cb10[r13.w + 0].xxyz
    and r14.w, l(0x0000ffff), cb10[r13.w + 7].z
    ubfe r16.y, l(6), l(25), cb10[r13.w + 7].z
    imul null, r16.z, r14.w, l(6)
    dp3 r16.w, cb11[r16.z + 0].xyzx, r15.yzwy
    add_sat r16.w, r16.w, cb11[r16.z + 0].w
    dp3 r18.w, cb11[r16.z + 1].xyzx, r15.yzwy
    add_sat r18.w, r18.w, cb11[r16.z + 1].w
    mul r16.w, r16.w, r18.w
    dp3 r18.w, cb11[r16.z + 2].xyzx, r15.yzwy
    add_sat r18.w, r18.w, cb11[r16.z + 2].w
    mul r16.w, r16.w, r18.w
    dp3 r18.w, cb11[r16.z + 3].xyzx, r15.yzwy
    add_sat r18.w, r18.w, cb11[r16.z + 3].w
    mul r16.w, r16.w, r18.w
    dp3 r18.w, cb11[r16.z + 4].xyzx, r15.yzwy
    add_sat r18.w, r18.w, cb11[r16.z + 4].w
    mul r16.w, r16.w, r18.w
    dp3 r18.w, cb11[r16.z + 5].xyzx, r15.yzwy
    add_sat r16.z, r18.w, cb11[r16.z + 5].w
    mul r18.x, r16.z, r16.w
    and r16.z, l(1), cb10[r13.w + 6].x
    movc r16.zw, r16.zzzz, r18.xxxy, r18.zzzx
    mov r18.x, cb10[r13.w + 6].x
    mov r27.xy, r16.zwzz
    mov r18.w, l(1)
    loop 
      ige r19.w, r18.w, r16.y
      breakc_nz r19.w
      iadd r19.w, r14.w, r18.w
      imul null, r19.w, r19.w, l(6)
      dp3 r20.z, cb11[r19.w + 0].xyzx, r15.yzwy
      add_sat r20.z, r20.z, cb11[r19.w + 0].w
      mul r20.z, r20.z, r27.x
      dp3 r20.w, cb11[r19.w + 1].xyzx, r15.yzwy
      add_sat r20.w, r20.w, cb11[r19.w + 1].w
      mul r20.z, r20.w, r20.z
      dp3 r20.w, cb11[r19.w + 2].xyzx, r15.yzwy
      add_sat r20.w, r20.w, cb11[r19.w + 2].w
      mul r20.z, r20.w, r20.z
      dp3 r20.w, cb11[r19.w + 3].xyzx, r15.yzwy
      add_sat r20.w, r20.w, cb11[r19.w + 3].w
      mul r20.z, r20.w, r20.z
      dp3 r20.w, cb11[r19.w + 4].xyzx, r15.yzwy
      add_sat r20.w, r20.w, cb11[r19.w + 4].w
      mul r20.z, r20.w, r20.z
      dp3 r20.w, cb11[r19.w + 5].xyzx, r15.yzwy
      add_sat r19.w, r20.w, cb11[r19.w + 5].w
      mul r27.x, r19.w, r20.z
      ushr r20.w, r18.x, l(2)
      ubfe r21.w, l(1), l(2), r18.x
      and r22.w, r20.w, l(2)
      max r27.z, r27.x, r27.y
      mad r19.w, -r20.z, r19.w, l(1.000000)
      mul r19.w, r19.w, r27.y
      movc r20.y, r22.w, r19.w, r27.z
      movc r27.xy, r21.wwww, r27.xyxx, r20.xyxx
      iadd r18.w, r18.w, l(1)
      mov r18.x, r20.w
    endloop 
    mov_sat r27.y, r27.y
    mul r14.w, r27.y, cb10[r13.w + 6].y
    lt r16.y, l(0.000000), r14.w
    if_nz r16.y
      mad r26.z, r27.y, cb10[r13.w + 6].y, r26.z
      mul r14.w, r14.w, cb10[r13.w + 7].y
      mov r28.x, cb10[r13.w + 7].w
      mov r28.yz, cb10[r13.w + 8].xxyx
      dp3 r16.y, r17.xyzx, r28.xyzx
      dp3 r16.z, r15.yzwy, r28.xyzx
      add r16.z, r16.z, -cb10[r13.w + 8].z
      ge r16.w, r16.z, l(0.000000)
      max r16.z, r3.w, |r16.z|
      movc r16.z, r16.w, r16.z, -r16.z
      max r16.y, -r16.y, l(0.00000010)
      div r16.y, r16.z, r16.y
      min r16.y, |r16.y|, l(131072.000000)
      mov r28.x, cb10[r13.w + 8].w
      mov r28.yz, cb10[r13.w + 9].xxyx
      dp3 r16.z, r17.xyzx, r28.xyzx
      dp3 r16.w, r15.yzwy, r28.xyzx
      add r16.w, r16.w, -cb10[r13.w + 9].z
      ge r18.x, r16.w, l(0.000000)
      max r16.w, r3.w, |r16.w|
      movc r16.w, r18.x, r16.w, -r16.w
      max r16.z, -r16.z, l(0.00000010)
      div r16.z, r16.w, r16.z
      min r16.y, |r16.z|, r16.y
      mov r28.x, cb10[r13.w + 9].w
      mov r28.yz, cb10[r13.w + 10].xxyx
      dp3 r16.z, r17.xyzx, r28.xyzx
      dp3 r16.w, r15.yzwy, r28.xyzx
      add r16.w, r16.w, -cb10[r13.w + 10].z
      ge r18.x, r16.w, l(0.000000)
      max r16.w, r3.w, |r16.w|
      movc r16.w, r18.x, r16.w, -r16.w
      max r16.z, -r16.z, l(0.00000010)
      div r16.z, r16.w, r16.z
      min r16.y, |r16.z|, r16.y
      mov r28.x, cb10[r13.w + 10].w
      mov r28.yz, cb10[r13.w + 11].xxyx
      dp3 r16.z, r17.xyzx, r28.xyzx
      dp3 r16.w, r15.yzwy, r28.xyzx
      add r16.w, r16.w, -cb10[r13.w + 11].z
      ge r18.x, r16.w, l(0.000000)
      max r16.w, r3.w, |r16.w|
      movc r16.w, r18.x, r16.w, -r16.w
      max r16.z, -r16.z, l(0.00000010)
      div r16.z, r16.w, r16.z
      min r16.y, |r16.z|, r16.y
      mov r28.x, cb10[r13.w + 11].w
      mov r28.yz, cb10[r13.w + 12].xxyx
      dp3 r16.z, r17.xyzx, r28.xyzx
      dp3 r16.w, r15.yzwy, r28.xyzx
      add r16.w, r16.w, -cb10[r13.w + 12].z
      ge r18.x, r16.w, l(0.000000)
      max r16.w, r3.w, |r16.w|
      movc r16.w, r18.x, r16.w, -r16.w
      max r16.z, -r16.z, l(0.00000010)
      div r16.z, r16.w, r16.z
      min r16.y, |r16.z|, r16.y
      mov r28.x, cb10[r13.w + 12].w
      mov r28.yz, cb10[r13.w + 13].xxyx
      dp3 r16.z, r17.xyzx, r28.xyzx
      dp3 r16.w, r15.yzwy, r28.xyzx
      add r16.w, r16.w, -cb10[r13.w + 13].z
      ge r18.x, r16.w, l(0.000000)
      max r16.w, r3.w, |r16.w|
      movc r16.w, r18.x, r16.w, -r16.w
      max r16.z, -r16.z, l(0.00000010)
      div r16.z, r16.w, r16.z
      min r16.y, |r16.z|, r16.y
      add r28.x, r15.y, cb10[r13.w + 3].w
      add r28.yz, r15.zzwz, cb10[r13.w + 4].xxyx
      mad r20.yzw, r17.xxyz, r16.yyyy, r28.xxyz
      dp3 r16.z, r20.yzwy, r20.yzwy
      sqrt r16.z, r16.z
      div r16.y, r16.y, r16.z
      add r16.y, r16.y, r16.y
      sqrt r16.y, r16.y
      mad r16.y, r2.w, l(5.000000), r16.y
      add r16.y, r16.y, l(-0.844800)
      mov r28.x, cb10[r13.w + 0].w
      mov r28.y, cb10[r13.w + 1].z
      mov r28.z, cb10[r13.w + 2].y
      dp3 r29.x, r20.yzwy, r28.xyzx
      mov r30.xy, cb10[r13.w + 1].xwxx
      mov r30.z, cb10[r13.w + 2].z
      dp3 r29.y, r20.yzwy, r30.xyzx
      mov r31.x, cb10[r13.w + 1].y
      mov r31.yz, cb10[r13.w + 2].xxwx
      dp3 r29.z, r20.yzwy, r31.xyzx
      ubfe r16.z, l(9), l(16), cb10[r13.w + 7].z
      utof r29.w, r16.z
      sample_l_indexable(texturecubearray)(float,float,float,float) r16.yzw, r29.xyzw, t8.wxyz, s2, r16.y
      dp3 r32.x, r15.yzwy, r28.xyzx
      dp3 r32.y, r15.yzwy, r30.xyzx
      dp3 r32.z, r15.yzwy, r31.xyzx
      mad_sat r15.yzw, r32.xxyz, cb10[r13.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r32.xy, r15.yzyy, cb10[r13.w + 4].zwzz
      mul r32.z, r15.w, cb10[r13.w + 5].x
      add r15.yzw, r32.xxyz, cb10[r13.w + 5].yyzw
      dp3 r29.x, r12.xyzx, r28.xyzx
      dp3 r29.y, r12.xyzx, r30.xyzx
      dp3 r29.z, r12.xyzx, r31.xyzx
      lt r20.yzw, l(0.000000, 0.000000, 0.000000, 0.000000), r29.xxyz
      movc r19.z, r20.y, l(0), l(0.500000)
      add r27.xzw, r15.yyzw, r19.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r27.xzw, r27.xzwx, t17.xwyz, s4, l(0.000000)
      mul r28.xyz, r29.xyzx, r29.xyzx
      mul r28.xyz, r14.wwww, r28.xyzx
      movc r21.z, r20.z, l(0), l(0.500000)
      add r30.xyz, r15.yzwy, r21.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r30.xyz, r30.xyzx, t18.xyzw, s4, l(0.000000)
      mul r30.xyz, r28.yyyy, r30.xyzx
      mad r27.xzw, r27.xxzw, r28.xxxx, r30.xxyz
      movc r22.z, r20.w, l(0), l(0.500000)
      add r15.yzw, r15.yyzw, r22.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t19.wxyz, s4, l(0.000000)
      mad r15.yzw, r15.yyzw, r28.zzzz, r27.xxzw
      sample_l_indexable(texturecubearray)(float,float,float,float) r20.yzw, r29.xyzw, t8.wxyz, s2, l(6.000000)
      mul r27.xzw, r15.yyzw, r20.yyzw
      dp3 r13.w, r27.xzwx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r25.xyz, r15.yzwy, r20.yzwy, r25.xyzx
      mul r15.y, r4.w, r13.w
      mul r16.yzw, r14.wwww, r16.yyzw
      dp3 r14.w, r16.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r13.w, r4.w, r13.w, r14.w
      div r13.w, r15.y, r13.w
      mov r28.x, r25.w
      mov r28.yz, r26.xxyx
      mad r26.xyw, r16.zwzy, r13.wwww, r28.yzyx
      mov r25.w, r26.w
    endif 
  endloop 
  mov r23.xyzw, r25.xyzw
  mov r24.yzw, r26.xxyz
  iadd r10.y, r10.y, l(32)
endloop 
lt r8.w, r24.w, l(1.000000)
if_nz r8.w
  mov r18.yz, l(0,0,1.000000,0)
  mov r19.xy, l(0,0,0,0)
  mov r20.x, l(1.000000)
  mov r21.xy, l(0,0,0,0)
  mov r22.xy, l(0,0,0,0)
  mov r25.x, r23.w
  mov r25.yzw, r24.yyzw
  mov r10.yzw, r23.xxyz
  mov r8.w, r24.w
  mov r9.w, l(0)
  loop 
    uge r13.w, r9.w, r6.w
    breakc_nz r13.w
    ushr r13.w, r9.w, l(5)
    iadd r13.w, r0.y, r13.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.w, r13.w, l(0), t26.xxxx
    ieq r14.w, r0.z, r9.w
    ubfe r15.y, r7.w, l(0), r13.w
    movc r13.w, r14.w, r15.y, r13.w
    mov r26.xyzw, r25.xyzw
    mov r15.yzw, r10.yyzw
    mov r14.w, r8.w
    mov r16.y, r13.w
    loop 
      breakc_z r16.y
      firstbit_lo r16.z, r16.y
      ishl r16.w, l(1), r16.z
      not r16.w, r16.w
      and r16.y, r16.w, r16.y
      iadd r16.z, r9.w, r16.z
      imul null, r16.z, r16.z, l(14)
      add r27.xyz, r11.xyzx, -cb10[r16.z + 0].xyzx
      and r16.w, l(0x0000ffff), cb10[r16.z + 7].z
      ubfe r18.w, l(6), l(25), cb10[r16.z + 7].z
      imul null, r19.w, r16.w, l(6)
      dp3 r20.z, cb11[r19.w + 0].xyzx, r27.xyzx
      add_sat r20.z, r20.z, cb11[r19.w + 0].w
      dp3 r20.w, cb11[r19.w + 1].xyzx, r27.xyzx
      add_sat r20.w, r20.w, cb11[r19.w + 1].w
      mul r20.z, r20.w, r20.z
      dp3 r20.w, cb11[r19.w + 2].xyzx, r27.xyzx
      add_sat r20.w, r20.w, cb11[r19.w + 2].w
      mul r20.z, r20.w, r20.z
      dp3 r20.w, cb11[r19.w + 3].xyzx, r27.xyzx
      add_sat r20.w, r20.w, cb11[r19.w + 3].w
      mul r20.z, r20.w, r20.z
      dp3 r20.w, cb11[r19.w + 4].xyzx, r27.xyzx
      add_sat r20.w, r20.w, cb11[r19.w + 4].w
      mul r20.z, r20.w, r20.z
      dp3 r20.w, cb11[r19.w + 5].xyzx, r27.xyzx
      add_sat r19.w, r20.w, cb11[r19.w + 5].w
      mul r18.x, r19.w, r20.z
      and r19.w, l(1), cb10[r16.z + 6].x
      movc r20.zw, r19.wwww, r18.xxxy, r18.zzzx
      mov r18.x, cb10[r16.z + 6].x
      mov r28.xy, r20.zwzz
      mov r19.w, l(1)
      loop 
        ige r21.w, r19.w, r18.w
        breakc_nz r21.w
        iadd r21.w, r16.w, r19.w
        imul null, r21.w, r21.w, l(6)
        dp3 r22.w, cb11[r21.w + 0].xyzx, r27.xyzx
        add_sat r22.w, r22.w, cb11[r21.w + 0].w
        mul r22.w, r22.w, r28.x
        dp3 r27.w, cb11[r21.w + 1].xyzx, r27.xyzx
        add_sat r27.w, r27.w, cb11[r21.w + 1].w
        mul r22.w, r22.w, r27.w
        dp3 r27.w, cb11[r21.w + 2].xyzx, r27.xyzx
        add_sat r27.w, r27.w, cb11[r21.w + 2].w
        mul r22.w, r22.w, r27.w
        dp3 r27.w, cb11[r21.w + 3].xyzx, r27.xyzx
        add_sat r27.w, r27.w, cb11[r21.w + 3].w
        mul r22.w, r22.w, r27.w
        dp3 r27.w, cb11[r21.w + 4].xyzx, r27.xyzx
        add_sat r27.w, r27.w, cb11[r21.w + 4].w
        mul r22.w, r22.w, r27.w
        dp3 r27.w, cb11[r21.w + 5].xyzx, r27.xyzx
        add_sat r21.w, r27.w, cb11[r21.w + 5].w
        mul r28.x, r21.w, r22.w
        ushr r27.w, r18.x, l(2)
        ubfe r28.z, l(1), l(2), r18.x
        and r28.w, r27.w, l(2)
        max r29.x, r28.x, r28.y
        mad r21.w, -r22.w, r21.w, l(1.000000)
        mul r21.w, r21.w, r28.y
        movc r20.y, r28.w, r21.w, r29.x
        movc r28.xy, r28.zzzz, r28.xyxx, r20.xyxx
        iadd r19.w, r19.w, l(1)
        mov r18.x, r27.w
      endloop 
      add_sat r16.w, -r14.w, r28.y
      mul r18.x, r16.w, cb10[r16.z + 6].y
      lt r18.w, l(0.000000), r18.x
      if_nz r18.w
        mad r26.w, r16.w, cb10[r16.z + 6].y, r26.w
        mul r16.w, r18.x, cb10[r16.z + 7].y
        mov r29.x, cb10[r16.z + 7].w
        mov r29.yz, cb10[r16.z + 8].xxyx
        dp3 r18.x, r17.xyzx, r29.xyzx
        dp3 r18.w, r27.xyzx, r29.xyzx
        add r18.w, r18.w, -cb10[r16.z + 8].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r3.w, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r18.x, -r18.x, l(0.00000010)
        div r18.x, r18.w, r18.x
        min r18.x, |r18.x|, l(131072.000000)
        mov r29.x, cb10[r16.z + 8].w
        mov r29.yz, cb10[r16.z + 9].xxyx
        dp3 r18.w, r17.xyzx, r29.xyzx
        dp3 r19.w, r27.xyzx, r29.xyzx
        add r19.w, r19.w, -cb10[r16.z + 9].z
        ge r20.y, r19.w, l(0.000000)
        max r19.w, r3.w, |r19.w|
        movc r19.w, r20.y, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r18.x, |r18.w|, r18.x
        mov r29.x, cb10[r16.z + 9].w
        mov r29.yz, cb10[r16.z + 10].xxyx
        dp3 r18.w, r17.xyzx, r29.xyzx
        dp3 r19.w, r27.xyzx, r29.xyzx
        add r19.w, r19.w, -cb10[r16.z + 10].z
        ge r20.y, r19.w, l(0.000000)
        max r19.w, r3.w, |r19.w|
        movc r19.w, r20.y, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r18.x, |r18.w|, r18.x
        mov r29.x, cb10[r16.z + 10].w
        mov r29.yz, cb10[r16.z + 11].xxyx
        dp3 r18.w, r17.xyzx, r29.xyzx
        dp3 r19.w, r27.xyzx, r29.xyzx
        add r19.w, r19.w, -cb10[r16.z + 11].z
        ge r20.y, r19.w, l(0.000000)
        max r19.w, r3.w, |r19.w|
        movc r19.w, r20.y, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r18.x, |r18.w|, r18.x
        mov r29.x, cb10[r16.z + 11].w
        mov r29.yz, cb10[r16.z + 12].xxyx
        dp3 r18.w, r17.xyzx, r29.xyzx
        dp3 r19.w, r27.xyzx, r29.xyzx
        add r19.w, r19.w, -cb10[r16.z + 12].z
        ge r20.y, r19.w, l(0.000000)
        max r19.w, r3.w, |r19.w|
        movc r19.w, r20.y, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r18.x, |r18.w|, r18.x
        mov r29.x, cb10[r16.z + 12].w
        mov r29.yz, cb10[r16.z + 13].xxyx
        dp3 r18.w, r17.xyzx, r29.xyzx
        dp3 r19.w, r27.xyzx, r29.xyzx
        add r19.w, r19.w, -cb10[r16.z + 13].z
        ge r20.y, r19.w, l(0.000000)
        max r19.w, r3.w, |r19.w|
        movc r19.w, r20.y, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r18.x, |r18.w|, r18.x
        add r29.x, r27.x, cb10[r16.z + 3].w
        add r29.yz, r27.yyzy, cb10[r16.z + 4].xxyx
        mad r20.yzw, r17.xxyz, r18.xxxx, r29.xxyz
        dp3 r18.w, r20.yzwy, r20.yzwy
        sqrt r18.w, r18.w
        div r18.x, r18.x, r18.w
        add r18.x, r18.x, r18.x
        sqrt r18.x, r18.x
        mad r18.x, r2.w, l(5.000000), r18.x
        add r18.x, r18.x, l(-0.844800)
        mov r29.x, cb10[r16.z + 0].w
        mov r29.y, cb10[r16.z + 1].z
        mov r29.z, cb10[r16.z + 2].y
        dp3 r30.x, r20.yzwy, r29.xyzx
        mov r31.xy, cb10[r16.z + 1].xwxx
        mov r31.z, cb10[r16.z + 2].z
        dp3 r30.y, r20.yzwy, r31.xyzx
        mov r32.x, cb10[r16.z + 1].y
        mov r32.yz, cb10[r16.z + 2].xxwx
        dp3 r30.z, r20.yzwy, r32.xyzx
        ubfe r18.w, l(9), l(16), cb10[r16.z + 7].z
        utof r30.w, r18.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r20.yzw, r30.xyzw, t8.wxyz, s2, r18.x
        dp3 r33.x, r27.xyzx, r29.xyzx
        dp3 r33.y, r27.xyzx, r31.xyzx
        dp3 r33.z, r27.xyzx, r32.xyzx
        mad_sat r27.xyz, r33.xyzx, cb10[r16.z + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
        mul r33.xy, r27.xyxx, cb10[r16.z + 4].zwzz
        mul r33.z, r27.z, cb10[r16.z + 5].x
        add r27.xyz, r33.xyzx, cb10[r16.z + 5].yzwy
        dp3 r30.x, r12.xyzx, r29.xyzx
        dp3 r30.y, r12.xyzx, r31.xyzx
        dp3 r30.z, r12.xyzx, r32.xyzx
        lt r28.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r30.xxyz
        movc r19.z, r28.x, l(0), l(0.500000)
        add r29.xyz, r19.xyzx, r27.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t17.xyzw, s4, l(0.000000)
        mul r31.xyz, r30.xyzx, r30.xyzx
        mul r31.xyz, r16.wwww, r31.xyzx
        movc r21.z, r28.z, l(0), l(0.500000)
        add r32.xyz, r21.xyzx, r27.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r32.xyz, r32.xyzx, t18.xyzw, s4, l(0.000000)
        mul r32.xyz, r31.yyyy, r32.xyzx
        mad r29.xyz, r29.xyzx, r31.xxxx, r32.xyzx
        movc r22.z, r28.w, l(0), l(0.500000)
        add r27.xyz, r22.xyzx, r27.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r27.xyz, r27.xyzx, t19.xyzw, s4, l(0.000000)
        mad r27.xyz, r27.xyzx, r31.zzzz, r29.xyzx
        sample_l_indexable(texturecubearray)(float,float,float,float) r28.xzw, r30.xyzw, t8.xwyz, s2, l(6.000000)
        mul r29.xyz, r27.xyzx, r28.xzwx
        dp3 r16.z, r29.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r15.yzw, r27.xxyz, r28.xxzw, r15.yyzw
        mul r18.x, r4.w, r16.z
        mul r20.yzw, r16.wwww, r20.yyzw
        dp3 r16.w, r20.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r16.z, r4.w, r16.z, r16.w
        div r16.z, r18.x, r16.z
        mad r26.xyz, r20.yzwy, r16.zzzz, r26.xyzx
      endif 
    endloop 
    mov r25.xyzw, r26.xyzw
    mov r10.yzw, r15.yyzw
    iadd r9.w, r9.w, l(32)
  endloop 
  mov r24.xyzw, r25.zxyw
  mov r23.xyz, r10.yzwy
  mov r24.xyzw, r24.yzxw
else 
  mov r24.x, r23.w
endif 
max r0.y, r24.w, l(1.000000)
rcp r0.y, r0.y
mov_sat r24.w, r24.w
mul r10.yzw, r0.yyyy, r23.xxyz
mul r15.yzw, r0.yyyy, r24.xxyz
lt r0.z, r24.w, l(0.990000)
if_nz r0.z
  add r0.z, -r24.w, l(1.000000)
  mul r2.w, r0.z, cb2[19].x
  add r16.yzw, r11.xxyz, -cb2[35].xxyz
  mul r18.x, r16.y, cb2[35].w
  mul r18.yz, r16.zzwz, cb2[36].xxyx
  add_sat r16.yzw, r18.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
  mul r18.xy, r16.yzyy, cb2[36].zwzz
  mul r18.z, r16.w, cb2[37].x
  add r16.yzw, r18.xxyz, cb2[37].yyzw
  lt r18.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
  movc r18.xyz, r18.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r18.w, l(0)
  add r19.xyz, r16.yzwy, r18.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t17.xyzw, s4, l(0.000000)
  mul r20.xyz, r12.xyzx, r12.xyzx
  mul r20.xyz, r2.wwww, r20.xyzx
  add r21.xyz, r16.yzwy, r18.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t18.xyzw, s4, l(0.000000)
  mul r21.xyz, r20.yyyy, r21.xyzx
  mad r19.xyz, r19.xyzx, r20.xxxx, r21.xyzx
  add r16.yzw, r16.yyzw, r18.wwwz
  sample_l_indexable(texture3d)(float,float,float,float) r16.yzw, r16.yzwy, t19.wxyz, s4, l(0.000000)
  mad r16.yzw, r16.yyzw, r20.zzzz, r19.xxyz
  mov r12.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r12.xyzw, t8.xyzw, s2, l(6.000000)
  mul r16.yzw, r16.yyzw, r18.xxyz
  dp3 r2.w, r16.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r10.yzw, r23.xxyz, r0.yyyy, r16.yyzw
  mov r17.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r16.yzw, r17.xyzw, t8.wxyz, s2, r3.z
  mad r0.y, cb2[19].x, r0.z, -r2.w
  mad r0.y, r2.y, r0.y, r2.w
  mad r15.yzw, r16.yyzw, r0.yyyy, r15.yyzw
endif 
mad r0.y, r5.z, r1.w, r2.x
log r0.y, |r0.y|
mul r0.y, r0.y, r1.z
exp r0.y, r0.y
mad r0.y, r5.z, r1.w, r0.y
add_sat r0.y, r0.y, l(-1.000000)
mul r10.yzw, r2.zzzz, r10.yyzw
mad r2.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t5.zxyw, s2, l(0.000000)
mul r15.yzw, r0.yyyy, r15.yyzw
mul r16.yzw, r2.yyyy, r15.yyzw
mul r2.yzw, r2.zzzz, r15.yyzw
sqrt r0.y, r1.z
mad r0.y, r0.y, l(0.500000), l(0.500000)
mul r0.y, r0.y, r0.y
mul r0.z, r0.y, l(0.500000)
mad r0.y, -r0.y, l(0.500000), l(1.000000)
mad r1.w, r2.x, r0.y, r0.z
mul r0.yz, r0.yyzy, r1.wwww
ushr r1.w, r0.x, l(24)
ubfe r0.x, l(10), l(12), r0.x
mov r18.x, -r3.x
not r3.z, r10.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r11.w, l(1.000000)
mov r19.w, l(1.000000)
mov r18.z, r3.x
mov r20.z, l(1.000000)
mov r21.w, l(1.000000)
mov r22.w, l(1.000000)
mov r18.yw, r14.xxxx
mov r3.y, r18.w
mov r23.w, l(1.000000)
mov r14.y, r18.x
mov r14.z, r3.x
mov r24.w, l(1.000000)
mov r25.x, r14.x
mov r25.y, r18.x
mov r25.z, r3.x
mov r26.x, r14.x
mov r26.y, r18.x
mov r26.z, r3.x
mov r27.x, r14.x
mov r27.y, r18.x
mov r27.z, r3.x
mov r15.yzw, r10.yyzw
mov r28.xyz, r16.yzwy
mov r29.xyz, r2.yzwy
mov r3.w, l(0)
loop 
  ieq r4.w, r3.w, l(2)
  breakc_nz r4.w
  movc r4.w, r3.w, r0.x, r1.w
  imul null, r4.w, r4.w, l(15)
  ubfe r5.z, l(3), l(24), cb9[r4.w + 1].w
  switch r5.z
    case l(4)
    lt r5.z, l(0.000000), cb9[r4.w + 6].y
    mov r30.xy, cb9[r4.w + 5].zwzz
    mov r30.z, cb9[r4.w + 6].x
    mad r31.xyz, -r30.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), cb9[r4.w + 0].xyzx
    add r32.xyz, -r11.xyzx, r31.xyzx
    dp3 r6.w, r30.xyzx, r32.xyzx
    div_sat r7.w, -r6.w, cb9[r4.w + 6].y
    mad r33.xyz, r7.wwww, r30.xyzx, r31.xyzx
    movc r33.xyz, r5.zzzz, r33.xyzx, cb9[r4.w + 0].xyzx
    add r33.xyz, -r11.xyzx, r33.xyzx
    dp3 r8.w, r33.xyzx, r33.xyzx
    rsq r9.w, r8.w
    mul r33.xyz, r9.wwww, r33.xyzx
    dp3 r9.w, r12.xyzx, r33.xyzx
    mov_sat r12.w, r9.w
    lt r13.w, l(0.000000), r12.w
    if_nz r13.w
      sqrt r13.w, r8.w
      mul r14.w, cb9[r4.w + 3].x, cb9[r4.w + 3].x
      div r8.w, r14.w, r8.w
      min r8.w, r8.w, l(1.000000)
      mad_sat r33.xy, r13.wwww, cb9[r4.w + 2].xzxx, cb9[r4.w + 2].ywyy
      mul r33.zw, r33.xxxy, r33.xxxy
      mad r33.xy, r33.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r33.xy, r33.xyxx, r33.zwzz
      mul r8.w, r8.w, r33.x
      mul r8.w, r33.y, r8.w
      lt r13.w, l(0.000000), r8.w
      if_nz r13.w
        ubfe r13.w, l(3), l(27), cb9[r4.w + 1].w
        ine r13.w, r13.w, l(1)
        if_nz r13.w
          mad r13.w, |r9.w|, l(-0.200000), l(0.400000)
          mad r33.xyz, r12.xyzx, r13.wwww, r11.xyzx
          add r33.xyz, r33.xyzx, -cb9[r4.w + 4].yzwy
          max r13.w, |r33.z|, |r33.y|
          max r13.w, r13.w, |r33.x|
          div r13.w, cb9[r4.w + 5].x, r13.w
          add r13.w, r13.w, cb9[r4.w + 5].y
          dp3 r14.w, r33.xyzx, r33.xyzx
          rsq r14.w, r14.w
          max r13.w, r13.w, l(0.00006104)
          and r17.w, l(0x0000ffff), cb9[r4.w + 1].w
          utof r34.w, r17.w
          mov r17.w, l(0)
          mov r20.w, l(0)
          loop 
            ige r25.w, r20.w, l(8)
            breakc_nz r25.w
            dp2 r35.y, icb[r20.w + 0].yxyy, r18.xyxx
            dp2 r35.z, icb[r20.w + 0].yxyy, r18.yzyy
            mul r35.yz, r35.yyzy, cb9[r4.w + 3].yyyy
            mul r35.x, r16.x, r35.y
            mul r35.w, r15.x, r35.y
            mad r34.xyz, r33.xyzx, r14.wwww, r35.xzwx
            sample_c_lz_indexable(texturecubearray)(float,float,float,float) r25.w, r34.xyzw, t10.xxxx, s13, r13.w
            mad r17.w, r25.w, l(0.125000), r17.w
            iadd r20.w, r20.w, l(1)
          endloop 
        else 
          mov r17.w, l(1.000000)
        endif 
        mul r8.w, r8.w, r17.w
        lt r13.w, l(0.000000), r8.w
        if_nz r13.w
          mul r13.w, r0.w, cb9[r4.w + 1].z
          mul r13.w, r13.w, l(0.250000)
          dp3 r14.w, r30.xyzx, r17.xyzx
          dp3 r20.w, r17.xyzx, r32.xyzx
          mad r25.w, -r14.w, r14.w, cb9[r4.w + 6].y
          mad r6.w, r14.w, r20.w, -r6.w
          div_sat r6.w, r6.w, r25.w
          div r14.w, r25.w, cb9[r4.w + 6].y
          mul r14.w, r14.w, l(10.000000)
          min r14.w, r14.w, l(1.000000)
          add r6.w, -r7.w, r6.w
          mad r6.w, r14.w, r6.w, r7.w
          mad r30.xyz, r6.wwww, r30.xyzx, r31.xyzx
          movc r30.xyz, r5.zzzz, r30.xyzx, cb9[r4.w + 0].xyzx
          add r30.xyz, -r11.xyzx, r30.xyzx
          dp3 r5.z, r30.xyzx, r30.xyzx
          rsq r5.z, r5.z
          mul r31.xyz, r5.zzzz, r30.xyzx
          ubfe r6.w, l(4), l(16), cb9[r4.w + 1].w
          ult r7.w, l(0), r6.w
          and r7.w, r10.x, r7.w
          if_nz r7.w
            iadd r6.w, r6.w, cb2[0].x
            imad r6.w, r6.w, l(15), l(-15)
            mad r7.w, |r9.w|, l(-0.200000), l(0.400000)
            mad r19.xyz, r12.xyzx, r7.wwww, r11.xyzx
            mov r32.xyz, cb9[r6.w + 6].yzwy
            mov r32.w, cb9[r6.w + 7].x
            dp4 r7.w, r32.xyzw, r19.xyzw
            mov r32.xyz, cb9[r6.w + 7].yzwy
            mov r32.w, cb9[r6.w + 8].x
            dp4 r14.w, r32.xyzw, r19.xyzw
            lt r20.w, r14.w, r7.w
            if_z r20.w
              mov r32.xyz, cb9[r6.w + 4].yzwy
              mov r32.w, cb9[r6.w + 5].x
              dp4 r32.x, r32.xyzw, r19.xyzw
              mov r33.xyz, cb9[r6.w + 5].yzwy
              mov r33.w, cb9[r6.w + 6].x
              dp4 r32.y, r33.xyzw, r19.xyzw
              div r19.xy, r32.xyxx, r14.wwww
              mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r32.x, r19.x, cb9[r6.w + 9].w
              add r32.y, r19.y, cb9[r6.w + 10].x
              mul r19.xy, r32.xyxx, cb9[r6.w + 9].yzyy
              div r32.xy, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].ywyy
              add r32.zw, -r32.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
              ge r32.zw, r19.xxxy, r32.zzzw
              ge r32.xy, r32.xyxx, r19.xyxx
              or r32.xy, r32.xyxx, r32.zwzz
              or r19.z, r32.y, r32.x
              if_z r19.z
                mov_sat r19.xy, r19.xyxx
                mad r32.x, r19.x, cb9[r6.w + 8].y, cb9[r6.w + 8].z
                mad r32.y, r19.y, cb9[r6.w + 8].w, cb9[r6.w + 9].x
                mul r19.x, r14.w, cb9[r6.w + 10].z
                mad r7.w, cb9[r6.w + 10].y, r14.w, r7.w
                div r7.w, r7.w, r19.x
              endif 
            else 
              mov r19.z, l(-1)
            endif 
            or r14.w, r20.w, r19.z
            if_z r14.w
              max r7.w, r7.w, l(0.00006104)
              and r14.w, l(0x0000ffff), cb9[r6.w + 1].w
              if_nz cb2[58].y
                utof r19.z, r14.w
                mov r20.w, l(0)
                mov r25.w, l(0)
                loop 
                  ige r26.w, r25.w, l(8)
                  breakc_nz r26.w
                  dp2 r33.x, icb[r25.w + 0].yxyy, r18.xwxx
                  dp2 r33.y, icb[r25.w + 0].xyxx, r3.xyxx
                  mad r19.xy, r33.xyxx, cb9[r6.w + 3].yyyy, r32.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r19.x, r19.xyzx, t9.xxxx, s13, r7.w
                  mad r20.w, r19.x, l(0.125000), r20.w
                  iadd r25.w, r25.w, l(1)
                endloop 
              else 
                utof r32.z, r14.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r32.xyzx, t9.xxxx, s13, r7.w
              endif 
              mul r6.w, r20.w, r20.w
              mul r6.w, r20.w, r6.w
            else 
              mov r6.w, l(1.000000)
            endif 
            mul r8.w, r6.w, r8.w
          else 
            ubfe r6.w, l(4), l(20), cb9[r4.w + 1].w
            ult r7.w, l(0), r6.w
            and r7.w, r3.z, r7.w
            if_nz r7.w
              iadd r6.w, r6.w, cb2[0].x
              imad r6.w, r6.w, l(15), l(-15)
              mad r7.w, |r9.w|, l(-0.200000), l(0.400000)
              mad r21.xyz, r12.xyzx, r7.wwww, r11.xyzx
              mov r32.xyz, cb9[r6.w + 6].yzwy
              mov r32.w, cb9[r6.w + 7].x
              dp4 r7.w, r32.xyzw, r21.xyzw
              mov r32.xyz, cb9[r6.w + 7].yzwy
              mov r32.w, cb9[r6.w + 8].x
              dp4 r14.w, r32.xyzw, r21.xyzw
              lt r19.x, r14.w, r7.w
              if_z r19.x
                mov r32.xyz, cb9[r6.w + 4].yzwy
                mov r32.w, cb9[r6.w + 5].x
                dp4 r32.x, r32.xyzw, r21.xyzw
                mov r33.xyz, cb9[r6.w + 5].yzwy
                mov r33.w, cb9[r6.w + 6].x
                dp4 r32.y, r33.xyzw, r21.xyzw
                div r19.yz, r32.xxyx, r14.wwww
                mad r19.yz, r19.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r21.x, r19.y, cb9[r6.w + 9].w
                add r21.y, r19.z, cb9[r6.w + 10].x
                mul r19.yz, r21.xxyx, cb9[r6.w + 9].yyzy
                div r21.xy, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].ywyy
                add r32.xy, -r21.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r32.xy, r19.yzyy, r32.xyxx
                ge r21.xy, r21.xyxx, r19.yzyy
                or r21.xy, r21.xyxx, r32.xyxx
                or r21.x, r21.y, r21.x
                if_z r21.x
                  mov_sat r19.yz, r19.yyzy
                  mad r32.x, r19.y, cb9[r6.w + 8].y, cb9[r6.w + 8].z
                  mad r32.y, r19.z, cb9[r6.w + 8].w, cb9[r6.w + 9].x
                  mul r19.y, r14.w, cb9[r6.w + 10].z
                  mad r7.w, cb9[r6.w + 10].y, r14.w, r7.w
                  div r7.w, r7.w, r19.y
                endif 
              else 
                mov r21.x, l(-1)
              endif 
              or r14.w, r19.x, r21.x
              if_z r14.w
                max r7.w, r7.w, l(0.00006104)
                and r14.w, l(0x0000ffff), cb9[r6.w + 1].w
                if_nz cb2[58].y
                  utof r19.z, r14.w
                  mov r21.xy, l(0,0,0,0)
                  loop 
                    ige r21.z, r21.y, l(8)
                    breakc_nz r21.z
                    dp2 r33.x, icb[r21.y + 0].xyxx, r14.xyxx
                    dp2 r33.y, icb[r21.y + 0].yxyy, r14.xzxx
                    mad r19.xy, r33.xyxx, cb9[r6.w + 3].yyyy, r32.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r19.x, r19.xyzx, t9.xxxx, s13, r7.w
                    mad r21.x, r19.x, l(0.125000), r21.x
                    iadd r21.y, r21.y, l(1)
                  endloop 
                else 
                  utof r32.z, r14.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.x, r32.xyzx, t9.xxxx, s13, r7.w
                endif 
                mul r6.w, r21.x, r21.x
                mul r6.w, r21.x, r6.w
              else 
                mov r6.w, l(1.000000)
              endif 
              mul r8.w, r6.w, r8.w
            endif 
          endif 
          mad r6.w, -r12.w, r2.x, l(1.000000)
          mul r6.w, r6.w, r6.w
          mad r6.w, -r6.w, l(0.620000), l(0.620000)
          add r6.w, -r12.w, r6.w
          mad r6.w, r1.z, r6.w, r12.w
          mul r6.w, r8.w, r6.w
          mov r19.x, cb9[r4.w + 0].w
          mov r19.yz, cb9[r4.w + 1].xxyx
          lt r7.w, l(0.000000), r9.w
          mad r32.xyz, r6.wwww, r19.xyzx, r15.yzwy
          dp3_sat r6.w, r12.xyzx, r31.xyzx
          mad r30.xyz, r30.xyzx, r5.zzzz, r13.xyzx
          dp3 r5.z, r30.xyzx, r30.xyzx
          rsq r5.z, r5.z
          mul r30.xyz, r5.zzzz, r30.xyzx
          dp3 r5.z, r30.xyzx, r13.xyzx
          dp3 r9.w, r12.xyzx, r30.xyzx
          mad r12.w, |r9.w|, r0.w, -|r9.w|
          mad r9.w, |r9.w|, r12.w, l(1.000000)
          mad r12.w, r6.w, r0.y, r0.z
          mul r9.w, r9.w, r9.w
          mul r9.w, r12.w, r9.w
          rcp r9.w, r9.w
          mul r6.w, r13.w, r6.w
          mul r6.w, r6.w, r9.w
          mul r6.w, r8.w, r6.w
          mad r30.xyz, r6.wwww, r19.xyzx, r29.xyzx
          add_sat r5.z, -r5.z, l(1.000000)
          mul r8.w, r5.z, r5.z
          mul r8.w, r8.w, r8.w
          mul r5.z, r5.z, r8.w
          mul r5.z, r5.z, r6.w
          mad r19.xyz, r5.zzzz, r19.xyzx, r28.xyzx
          movc r15.yzw, r7.wwww, r32.xxyz, r15.yyzw
          movc r28.xyz, r7.wwww, r19.xyzx, r28.xyzx
          movc r29.xyz, r7.wwww, r30.xyzx, r29.xyzx
        endif 
      endif 
    endif 
    break 
    case l(2)
    add r19.xy, -r11.xyxx, cb9[r4.w + 3].zwzz
    add r19.z, -r11.z, cb9[r4.w + 4].x
    dp3 r5.z, r19.xyzx, r19.xyzx
    rsq r5.z, r5.z
    mul r30.xyz, r5.zzzz, r19.xyzx
    dp3 r6.w, r12.xyzx, r30.xyzx
    mov_sat r7.w, r6.w
    lt r8.w, l(0.000000), r7.w
    if_nz r8.w
      mov r30.xyz, cb9[r4.w + 7].yzwy
      mov r30.w, cb9[r4.w + 8].x
      dp4 r8.w, r30.xyzw, r11.xyzw
      lt r9.w, r8.w, l(1.000000)
      if_nz r9.w
        mov r31.xyz, l(1.000000,1.000000,1.000000,0)
        mov r9.w, l(0)
      else 
        add r32.xyz, -r11.xyzx, cb9[r4.w + 0].xyzx
        mul r12.w, cb9[r4.w + 3].x, cb9[r4.w + 3].x
        dp3 r13.w, r32.xyzx, r32.xyzx
        div r12.w, r12.w, r13.w
        min r12.w, r12.w, l(1.000000)
        mad_sat r21.yz, r8.wwww, cb9[r4.w + 2].xxzx, cb9[r4.w + 2].yywy
        mul r32.xy, r21.yzyy, r21.yzyy
        mad r21.yz, r21.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
        mul r21.yz, r21.yyzy, r32.xxyx
        mul r12.w, r12.w, r21.y
        mul r12.w, r21.z, r12.w
        mov r32.xyz, cb9[r4.w + 4].yzwy
        mov r32.w, cb9[r4.w + 5].x
        dp4 r32.x, r32.xyzw, r11.xyzw
        mov r33.xyz, cb9[r4.w + 5].yzwy
        mov r33.w, cb9[r4.w + 6].x
        dp4 r32.y, r33.xyzw, r11.xyzw
        div r20.xy, r32.xyxx, r8.wwww
        lt r8.w, cb9[r4.w + 10].w, l(0.00048828)
        if_nz r8.w
          mad_sat r21.yz, |r20.xxyx|, cb9[r4.w + 12].xxyx, cb9[r4.w + 12].zzwz
          mul r32.xy, r21.yzyy, r21.yzyy
          mad r21.yz, r21.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
          mul r21.yz, r21.yyzy, r32.xxyx
          mul r8.w, r21.z, r21.y
        else 
          mul_sat r32.xyzw, |r20.yyxx|, cb9[r4.w + 11].xyzw
          log r32.xyzw, r32.xyzw
          mul r32.xyzw, r32.xyzw, cb9[r4.w + 12].zzzz
          exp r32.xyzw, r32.xyzw
          add r21.yz, r32.zzwz, r32.xxyx
          log r21.yz, r21.yyzy
          mul r21.yz, r21.yyzy, cb9[r4.w + 12].wwww
          exp r21.yz, r21.yyzy
          mul r13.w, r21.y, cb9[r4.w + 12].x
          mad r14.w, cb9[r4.w + 12].y, r21.z, l(-1.000000)
          mad r13.w, cb9[r4.w + 12].y, r21.z, -r13.w
          div_sat r13.w, r14.w, r13.w
          mul r14.w, r13.w, r13.w
          mad r13.w, r13.w, l(-2.000000), l(3.000000)
          mul r8.w, r13.w, r14.w
        endif 
        mul r9.w, r8.w, r12.w
        and r8.w, l(255), cb9[r4.w + 14].w
        if_nz r8.w
          dp3 r12.w, cb9[r4.w + 13].xyzx, r20.xyzx
          mov r32.x, cb9[r4.w + 13].w
          mov r32.yz, cb9[r4.w + 14].xxyx
          dp3 r13.w, r32.xyzx, r20.xyzx
          frc r32.x, r12.w
          frc r32.y, r13.w
          iadd r8.w, r8.w, l(-1)
          utof r32.z, r8.w
          sample_l_indexable(texture2darray)(float,float,float,float) r31.xyz, r32.xyzx, t20.xyzw, s2, l(0.000000)
        else 
          mov r31.xyz, l(1.000000,1.000000,1.000000,0)
        endif 
      endif 
      mov r32.x, cb9[r4.w + 0].w
      mov r32.yz, cb9[r4.w + 1].xxyx
      mul r31.xyz, r31.xyzx, r32.xyzx
      lt r8.w, l(0.000000), r9.w
      if_nz r8.w
        ubfe r8.w, l(3), l(27), cb9[r4.w + 1].w
        ine r8.w, r8.w, l(1)
        if_nz r8.w
          mad r8.w, |r6.w|, l(-0.200000), l(0.400000)
          mad r22.xyz, r12.xyzx, r8.wwww, r11.xyzx
          mov r32.xyz, cb9[r4.w + 6].yzwy
          mov r32.w, cb9[r4.w + 7].x
          dp4 r8.w, r32.xyzw, r22.xyzw
          dp4 r12.w, r30.xyzw, r22.xyzw
          ge r13.w, r12.w, r8.w
          if_nz r13.w
            mov r30.xyz, cb9[r4.w + 4].yzwy
            mov r30.w, cb9[r4.w + 5].x
            dp4 r20.x, r30.xyzw, r22.xyzw
            mov r30.xyz, cb9[r4.w + 5].yzwy
            mov r30.w, cb9[r4.w + 6].x
            dp4 r20.y, r30.xyzw, r22.xyzw
            div r20.xy, r20.xyxx, r12.wwww
            mad_sat r20.xy, r20.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            mad r22.x, r20.x, cb9[r4.w + 8].y, cb9[r4.w + 8].z
            mad r22.y, r20.y, cb9[r4.w + 8].w, cb9[r4.w + 9].x
            div r8.w, r8.w, r12.w
            max r8.w, r8.w, l(0.00006104)
            and r12.w, l(0x0000ffff), cb9[r4.w + 1].w
            if_nz cb2[58].y
              utof r30.z, r12.w
              mov r13.w, l(0)
              mov r14.w, l(0)
              loop 
                ige r20.x, r14.w, l(8)
                breakc_nz r20.x
                dp2 r20.x, icb[r14.w + 0].xyxx, r25.xyxx
                dp2 r20.y, icb[r14.w + 0].yxyy, r25.xzxx
                mad r30.xy, r20.xyxx, cb9[r4.w + 3].yyyy, r22.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.x, r30.xyzx, t9.xxxx, s13, r8.w
                mad r13.w, r20.x, l(0.125000), r13.w
                iadd r14.w, r14.w, l(1)
              endloop 
            else 
              utof r22.z, r12.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r22.xyzx, t9.xxxx, s13, r8.w
            endif 
            mul r8.w, r13.w, r13.w
            mul r8.w, r13.w, r8.w
          else 
            mov r8.w, l(1.000000)
          endif 
        else 
          mov r8.w, l(1.000000)
        endif 
        mul r8.w, r8.w, r9.w
        lt r9.w, l(0.000000), r8.w
        if_nz r9.w
          mul r9.w, r0.w, cb9[r4.w + 1].z
          mul r9.w, r7.w, r9.w
          ubfe r12.w, l(4), l(16), cb9[r4.w + 1].w
          ult r14.w, l(0), r12.w
          and r14.w, r10.x, r14.w
          if_nz r14.w
            iadd r12.w, r12.w, cb2[0].x
            imad r12.w, r12.w, l(15), l(-15)
            mad r14.w, |r6.w|, l(-0.200000), l(0.400000)
            mad r23.xyz, r12.xyzx, r14.wwww, r11.xyzx
            mov r30.xyz, cb9[r12.w + 6].yzwy
            mov r30.w, cb9[r12.w + 7].x
            dp4 r14.w, r30.xyzw, r23.xyzw
            mov r30.xyz, cb9[r12.w + 7].yzwy
            mov r30.w, cb9[r12.w + 8].x
            dp4 r20.x, r30.xyzw, r23.xyzw
            lt r20.y, r20.x, r14.w
            if_z r20.y
              mov r30.xyz, cb9[r12.w + 4].yzwy
              mov r30.w, cb9[r12.w + 5].x
              dp4 r22.x, r30.xyzw, r23.xyzw
              mov r30.xyz, cb9[r12.w + 5].yzwy
              mov r30.w, cb9[r12.w + 6].x
              dp4 r22.y, r30.xyzw, r23.xyzw
              div r21.yz, r22.xxyx, r20.xxxx
              mad r21.yz, r21.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
              add r22.x, r21.y, cb9[r12.w + 9].w
              add r22.y, r21.z, cb9[r12.w + 10].x
              mul r21.yz, r22.xxyx, cb9[r12.w + 9].yyzy
              div r22.xy, cb9[r12.w + 3].yyyy, cb9[r12.w + 8].ywyy
              add r23.xy, -r22.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r23.xy, r21.yzyy, r23.xyxx
              ge r22.xy, r22.xyxx, r21.yzyy
              or r22.xy, r22.xyxx, r23.xyxx
              or r22.x, r22.y, r22.x
              if_z r22.x
                mov_sat r21.yz, r21.yyzy
                mad r23.x, r21.y, cb9[r12.w + 8].y, cb9[r12.w + 8].z
                mad r23.y, r21.z, cb9[r12.w + 8].w, cb9[r12.w + 9].x
                mul r21.y, r20.x, cb9[r12.w + 10].z
                mad r14.w, cb9[r12.w + 10].y, r20.x, r14.w
                div r14.w, r14.w, r21.y
              endif 
            else 
              mov r22.x, l(-1)
            endif 
            or r20.x, r20.y, r22.x
            if_z r20.x
              max r14.w, r14.w, l(0.00006104)
              and r20.x, l(0x0000ffff), cb9[r12.w + 1].w
              if_nz cb2[58].y
                utof r22.z, r20.x
                mov r20.y, l(0)
                mov r21.y, l(0)
                loop 
                  ige r21.z, r21.y, l(8)
                  breakc_nz r21.z
                  dp2 r30.x, icb[r21.y + 0].xyxx, r26.xyxx
                  dp2 r30.y, icb[r21.y + 0].yxyy, r26.xzxx
                  mad r22.xy, r30.xyxx, cb9[r12.w + 3].yyyy, r23.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.z, r22.xyzx, t9.xxxx, s13, r14.w
                  mad r20.y, r21.z, l(0.125000), r20.y
                  iadd r21.y, r21.y, l(1)
                endloop 
              else 
                utof r23.z, r20.x
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.y, r23.xyzx, t9.xxxx, s13, r14.w
              endif 
              mul r12.w, r20.y, r20.y
              mul r12.w, r20.y, r12.w
            else 
              mov r12.w, l(1.000000)
            endif 
            mul r8.w, r8.w, r12.w
          else 
            ubfe r4.w, l(4), l(20), cb9[r4.w + 1].w
            ult r12.w, l(0), r4.w
            and r12.w, r3.z, r12.w
            if_nz r12.w
              iadd r4.w, r4.w, cb2[0].x
              imad r4.w, r4.w, l(15), l(-15)
              mad r12.w, |r6.w|, l(-0.200000), l(0.400000)
              mad r24.xyz, r12.xyzx, r12.wwww, r11.xyzx
              mov r30.xyz, cb9[r4.w + 6].yzwy
              mov r30.w, cb9[r4.w + 7].x
              dp4 r12.w, r30.xyzw, r24.xyzw
              mov r30.xyz, cb9[r4.w + 7].yzwy
              mov r30.w, cb9[r4.w + 8].x
              dp4 r14.w, r30.xyzw, r24.xyzw
              lt r20.x, r14.w, r12.w
              if_z r20.x
                mov r30.xyz, cb9[r4.w + 4].yzwy
                mov r30.w, cb9[r4.w + 5].x
                dp4 r22.x, r30.xyzw, r24.xyzw
                mov r30.xyz, cb9[r4.w + 5].yzwy
                mov r30.w, cb9[r4.w + 6].x
                dp4 r22.y, r30.xyzw, r24.xyzw
                div r21.yz, r22.xxyx, r14.wwww
                mad r21.yz, r21.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                add r22.x, r21.y, cb9[r4.w + 9].w
                add r22.y, r21.z, cb9[r4.w + 10].x
                mul r21.yz, r22.xxyx, cb9[r4.w + 9].yyzy
                div r22.xy, cb9[r4.w + 3].yyyy, cb9[r4.w + 8].ywyy
                add r23.xy, -r22.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                ge r23.xy, r21.yzyy, r23.xyxx
                ge r22.xy, r22.xyxx, r21.yzyy
                or r22.xy, r22.xyxx, r23.xyxx
                or r22.x, r22.y, r22.x
                if_z r22.x
                  mov_sat r21.yz, r21.yyzy
                  mad r23.x, r21.y, cb9[r4.w + 8].y, cb9[r4.w + 8].z
                  mad r23.y, r21.z, cb9[r4.w + 8].w, cb9[r4.w + 9].x
                  mul r21.y, r14.w, cb9[r4.w + 10].z
                  mad r12.w, cb9[r4.w + 10].y, r14.w, r12.w
                  div r12.w, r12.w, r21.y
                endif 
              else 
                mov r22.x, l(-1)
              endif 
              or r14.w, r20.x, r22.x
              if_z r14.w
                max r12.w, r12.w, l(0.00006104)
                and r14.w, l(0x0000ffff), cb9[r4.w + 1].w
                if_nz cb2[58].y
                  utof r22.z, r14.w
                  mov r20.x, l(0)
                  mov r21.y, l(0)
                  loop 
                    ige r21.z, r21.y, l(8)
                    breakc_nz r21.z
                    dp2 r24.x, icb[r21.y + 0].xyxx, r27.xyxx
                    dp2 r24.y, icb[r21.y + 0].yxyy, r27.xzxx
                    mad r22.xy, r24.xyxx, cb9[r4.w + 3].yyyy, r23.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.z, r22.xyzx, t9.xxxx, s13, r12.w
                    mad r20.x, r21.z, l(0.125000), r20.x
                    iadd r21.y, r21.y, l(1)
                  endloop 
                else 
                  utof r23.z, r14.w
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.x, r23.xyzx, t9.xxxx, s13, r12.w
                endif 
                mul r4.w, r20.x, r20.x
                mul r4.w, r20.x, r4.w
              else 
                mov r4.w, l(1.000000)
              endif 
              mul r8.w, r4.w, r8.w
            endif 
          endif 
          mad r4.w, -r7.w, r2.x, l(1.000000)
          mul r4.w, r4.w, r4.w
          mad r4.w, -r4.w, l(0.620000), l(0.620000)
          add r4.w, -r7.w, r4.w
          mad r4.w, r1.z, r4.w, r7.w
          mul r4.w, r8.w, r4.w
          lt r6.w, l(0.000000), r6.w
          mad r22.xyz, r4.wwww, r31.xyzx, r15.yzwy
          mad r19.xyz, r19.xyzx, r5.zzzz, r13.xyzx
          dp3 r4.w, r19.xyzx, r19.xyzx
          rsq r4.w, r4.w
          mul r19.xyz, r4.wwww, r19.xyzx
          dp3 r4.w, r19.xyzx, r13.xyzx
          dp3 r5.z, r12.xyzx, r19.xyzx
          mad r12.w, |r5.z|, r0.w, -|r5.z|
          mad r5.z, |r5.z|, r12.w, l(1.000000)
          mad r7.w, r7.w, r0.y, r0.z
          mul r5.z, r5.z, r5.z
          mul r5.z, r7.w, r5.z
          rcp r5.z, r5.z
          mul r5.z, r9.w, r5.z
          mul r5.z, r5.z, r8.w
          mul r5.z, r5.z, l(0.250000)
          mad r19.xyz, r5.zzzz, r31.xyzx, r29.xyzx
          add_sat r4.w, -r4.w, l(1.000000)
          mul r7.w, r4.w, r4.w
          mul r7.w, r7.w, r7.w
          mul r4.w, r4.w, r7.w
          mul r4.w, r4.w, r5.z
          mad r23.xyz, r4.wwww, r31.xyzx, r28.xyzx
          movc r15.yzw, r6.wwww, r22.xxyz, r15.yyzw
          movc r28.xyz, r6.wwww, r23.xyzx, r28.xyzx
          movc r29.xyz, r6.wwww, r19.xyzx, r29.xyzx
        endif 
      endif 
    endif 
    break 
    default 
    break 
  endswitch 
  iadd r3.w, r3.w, l(1)
endloop 
mad r0.xyz, r5.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r1.z, r0.y
mad r2.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r2.x
ieq r1.w, r1.z, r1.w
movc r2.xy, r1.wwww, r2.yzyy, l(-1.000000,0,0,0)
mad r3.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r3.x
ieq r1.w, r1.z, r1.w
movc r2.zw, r1.wwww, r3.yyyz, l(0,0,-1.000000,0)
mad r3.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r3.x
ieq r1.w, r1.z, r1.w
movc r3.xy, r1.wwww, r3.yzyy, l(-1.000000,0,0,0)
mad r5.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r1.w, r5.x
ieq r1.z, r1.z, r1.w
movc r1.zw, r1.zzzz, r5.yyyz, l(0,0,-1.000000,0)
mov r5.xy, r2.xzxx
mov r5.z, r3.x
mov r5.w, r1.z
add r5.xyzw, -r0.xxxx, r5.xyzw
ge r5.xyzw, |r5.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r5.xyzw, r5.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r1.z, r5.y, r5.x
add r1.z, r5.z, r1.z
add r1.z, r5.w, r1.z
mul r2.x, r2.w, r5.y
mad r2.x, r5.x, r2.y, r2.x
mad r2.x, r5.z, r3.y, r2.x
mad r1.w, r5.w, r1.w, r2.x
div r0.w, r1.w, r1.z
ge r1.z, l(0.000000), r1.z
movc r0.yz, r1.zzzz, l(0,0,0,0), r0.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.w, r1.w, r1.z
movc r0.xyz, r0.wwww, r0.xyzx, r0.xzyx
mad r0.x, -r0.z, l(0.500000), r0.x
add r2.y, r0.x, r0.z
mad r2.z, -r0.y, l(0.500000), r0.x
add r2.x, r0.y, r2.z
add r0.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r28.xyzx
mad r0.xyz, r29.xyzx, r2.xyzx, r0.xyzx
mad r0.xyz, r15.yzwy, r4.xyzx, r0.xyzx
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, r11.xyzx, r11.xyzx
  rsq r1.z, r0.w
  mul r2.xyz, r1.zzzz, r11.xyzx
  sqrt r0.w, r0.w
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.wwww, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r2.w, l(0.010000), |r11.z|
    mul r3.xy, r11.zzzz, cb2[15].zwzz
    mul r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r3.zw, r3.zzzw
    add r3.zw, -r3.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r3.xy, r3.zwzz, r3.xyxx
    mul r3.xy, r1.zwzz, r3.xyxx
    movc r1.zw, r2.wwww, r3.xxxy, r1.zzzw
    mul r3.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r1.wwww, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xyzx
  else 
    mad r1.z, r0.w, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r11.z|
    mul r2.w, r11.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r1.z, r2.w
    movc r1.z, r1.w, r2.w, r1.z
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r1.z, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r2.xyz, r0.wwww, cb2[11].xyzx
  mad r2.xyz, r1.zzzz, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, r11.z, cb2[6].x
  mad r1.z, cb2[6].x, r11.z, cb2[5].x
  lt r1.w, |r0.w|, l(0.000100)
  min r2.w, r1.z, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r3.y, r2.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.w, r1.w, l(1.000000), r0.w
  div r0.w, r1.z, r0.w
  movc r0.w, r1.w, r3.x, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r1.z, r11.xyzx, r11.xyzx
  sqrt r1.w, r1.z
  mad r0.w, r0.w, r1.w, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r1.z, r1.z
  mul r3.xyz, r1.zzzz, r11.xyzx
  dp3 r1.z, cb2[7].yzwy, r3.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r1.zzzz, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r0.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r0.xyzw, r0.xyzw, r2.xyzw
min r0.xyzw, r0.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r1.xyyy, r0.xyzw
ret 
// Approximately 1437 instruction slots used
