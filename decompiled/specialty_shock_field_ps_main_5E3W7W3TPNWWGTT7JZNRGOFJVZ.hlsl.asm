//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:42:46 2021
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float3 colorTint;                  // Offset:  160 Size:    12
//   float baseNormalHeight;            // Offset:  172 Size:     4
//   float2 glossRange;                 // Offset:  176 Size:     8
//   float2 rotateUVs;                  // Offset:  184 Size:     8 [unused]
//   float2 scrollUVs;                  // Offset:  192 Size:     8 [unused]
//   float2 scaleUVs;                   // Offset:  200 Size:     8 [unused]
//   float2 offsetUVs;                  // Offset:  208 Size:     8 [unused]
//   float2 zoomUVs;                    // Offset:  216 Size:     8 [unused]
//   float zoomRate;                    // Offset:  224 Size:     4 [unused]
//   float layerDepth;                  // Offset:  228 Size:     4 [unused]
//   bool clampU;                       // Offset:  232 Size:     4 [unused]
//   bool clampV;                       // Offset:  236 Size:     4 [unused]
//   float hdrScale;                    // Offset:  240 Size:     4
//   float emissiveFalloffScale;        // Offset:  244 Size:     4
//   float emissiveFalloffPow;          // Offset:  248 Size:     4
//   float emissiveFalloffDir;          // Offset:  252 Size:     4
//   float shieldOpacity;               // Offset:  256 Size:     4
//   float zFeather;                    // Offset:  260 Size:     4
//   float distortionAmount;            // Offset:  264 Size:     4
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for gCullConstants
// {
//
//   struct CoreCullConstantsPack
//   {
//       
//       uint4 data[5];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    80
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
// Resource bind info for refProbeConstants
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   224
//
// }
//
// Resource bind info for refProbeAttenuationConstants
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// colorSampler                      sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// specColorSampler                  sampler      NA          NA             s3      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// normalSampler                     sampler      NA          NA             s5      1 
// aoSampler                         sampler      NA          NA             s6      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// floatZSampler                     texture  float4          2d             t0      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// visibleLights                     texture    uint     2darray             t6      1 
// visibleProbes                     texture    uint     2darray             t7      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gCullConstants                    texture  struct         r/o            t11      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// refProbeConstants                 texture  struct         r/o            t15      1 
// refProbeAttenuationConstants      texture  struct         r/o            t16      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// colorMap                          texture  float4          2d            t21      1 
// tintMask                          texture  float4          2d            t22      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// normalMap                         texture  float4          2d            t24      1 
// glossMap                          texture  float4          2d            t25      1 
// aoMap                             texture  float4          2d            t26      1 
// resolvedPostSun                   texture  float4          2d            t29      1 
// emissiveMap                       texture  float4          2d            t30      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// alphaMask                         texture  float4          2d            t37      1 
// edgeColorMap                      texture  float4          2d            t38      1 
// edgeEmissiveMap                   texture  float4          2d            t46      1 
// gOit_Pixels                           UAV    uint          2d             u6      1 
// gOit_Nodes                            UAV   uint2     2darray             u7      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyz 
// COLOR                    1   x           1     NONE   float   x   
// TEXCOORD                 0    yz         1     NONE   float    yz 
// TEXCOORD                 4   x           2     NONE    uint       
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
// TEXCOORD                 3   xyz         5     NONE   float   xyz 
// OFFPOSITION              0   xyz         6     NONE   float   xyz 
// TEXCOORD                 9   xy          7     NONE   float   xy  
// SV_IsFrontFace           0   x           8    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB0[17], immediateIndexed
dcl_constantbuffer CB1[93], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2darray (uint,uint,uint,uint) t6
dcl_resource_texture2darray (uint,uint,uint,uint) t7
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_structured t11, 80
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_structured t15, 224
dcl_resource_structured t16, 96
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t23, 4
dcl_resource_texture2d (float,float,float,float) t24
dcl_resource_texture2d (float,float,float,float) t25
dcl_resource_texture2d (float,float,float,float) t26
dcl_resource_texture2d (float,float,float,float) t29
dcl_resource_texture2d (float,float,float,float) t30
dcl_resource_texture2darray (float,float,float,float) t31
dcl_resource_texture2d (float,float,float,float) t37
dcl_resource_texture2d (float,float,float,float) t38
dcl_resource_texture2d (float,float,float,float) t46
dcl_uav_typed_texture2d (uint,uint,uint,uint) u6
dcl_uav_typed_texture2darray (uint,uint,uint,uint) u7
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.x
dcl_input_ps linear v1.yz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xy
dcl_input_ps_sgv constant v8.x, is_front_face
dcl_output o0.xyzw
dcl_temps 49
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.yzyy, t21.xyzw, s1
mul r1.w, r0.w, v1.x
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.yzyy, t24.xyzw, s5
add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.000000, 0.000000)
mad r2.xyz, cb0[10].wwww, r2.xyzx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r2.xy, r2.xyxx, l(1.99218750, 1.99218750, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r2.w, -r2.w, l(1.000000)
max r2.w, r2.w, l(0.000000)
sqrt r2.w, r2.w
movc r3.x, v8.x, l(1.000000), l(-1.000000)
dp3 r3.y, v3.xyzx, v3.xyzx
rsq r3.y, r3.y
mul r3.yzw, r3.yyyy, v3.xxyz
mul r3.yzw, r3.xxxx, r3.yyzw
dp3 r4.x, v4.xyzx, v4.xyzx
rsq r4.x, r4.x
mul r4.xyz, r4.xxxx, v4.xyzx
mul r4.xyz, r3.xxxx, r4.xyzx
dp3 r4.w, v5.xyzx, v5.xyzx
rsq r4.w, r4.w
mul r5.xyz, r4.wwww, v5.xyzx
mul r5.xyz, r3.xxxx, r5.xyzx
mul r5.xyz, r2.yyyy, r5.xyzx
mad r4.xyz, r4.xyzx, r2.xxxx, r5.xyzx
mad r2.xyw, r3.yzyw, r2.wwww, r4.xyxz
dp3 r3.x, r2.xywx, r2.xywx
rsq r3.x, r3.x
mul r3.xyz, r2.xywx, r3.xxxx
eq r2.x, r1.w, l(0.000000)
mad r2.yw, r3.xxxy, cb0[16].zzzz, v0.xxxy
mul r2.yw, r2.yyyw, cb1[44].zzzw
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r2.ywyy, t29.xyzw, s1
if_nz r2.x
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
sample_indexable(texture2d)(float,float,float,float) r2.x, v1.yzyy, t22.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r2.y, v1.yzyy, t25.yxzw, s3
add r5.xyz, cb0[10].xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r5.xyz, r2.xxxx, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r5.xyzx
sample_indexable(texture2d)(float,float,float,float) r2.x, v1.yzyy, t26.xyzw, s6
add r2.w, -cb0[11].x, cb0[11].y
mad r2.y, r2.y, r2.w, cb0[11].x
mul_sat r2.y, r2.y, l(0.05882353)
mul r2.z, r2.z, r2.z
mul r2.z, r2.z, l(0.33333334)
min r2.z, r2.z, l(1.000000)
mul r2.y, r2.y, l(-17.000000)
exp r2.y, r2.y
add r2.y, r2.y, r2.z
log r2.y, r2.y
mul r2.y, r2.y, l(-0.05882353)
max r5.y, r2.y, l(0.000000)
sample_indexable(texture2d)(float,float,float,float) r6.xyzw, v1.yzyy, t30.xyzw, s1
mul r2.yzw, r6.xxyz, cb0[10].xxyz
dp3 r4.w, -v6.xyzx, -v6.xyzx
rsq r4.w, r4.w
mul r7.xyz, r4.wwww, -v6.xyzx
dp3_sat r5.z, v3.xyzx, r7.xyzx
lt r5.w, cb0[15].w, l(0.500000)
add r7.w, -r5.z, l(1.000000)
movc r5.z, r5.w, r7.w, r5.z
mul_sat r5.z, r5.z, cb0[15].y
log r5.z, r5.z
mul r5.z, r5.z, cb0[15].z
exp r5.z, r5.z
mul r5.w, r5.z, r6.w
mul r6.xyz, r2.yzwy, r5.wwww
ge r2.y, v0.z, l(0.984375)
mul r2.z, v0.z, l(1.01587307)
mad r2.w, v0.z, l(64.000000), l(-63.000000)
movc r2.y, r2.y, r2.w, r2.z
max r2.y, r2.y, l(0.00000001)
rcp r2.y, r2.y
ftou r2.zw, v0.xxxy
ine r5.w, cb1[92].x, l(0)
utof r8.xy, r2.wzww
dp2 r7.w, r8.yxyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r7.w, r7.w
mul r7.w, r7.w, l(52.982918)
frc r7.w, r7.w
mad r7.w, r7.w, l(6.28318548), cb1[70].w
sincos r9.x, r10.x, r7.w
dp2 r7.w, r8.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r7.w, r7.w
mul r7.w, r7.w, l(52.982918)
frc r7.w, r7.w
mad r7.w, r7.w, l(6.28318548), cb1[70].w
sincos r8.x, r11.x, r7.w
dp3_sat r5.x, r3.xyzx, r7.xyzx
dp3 r7.w, -r7.xyzx, r3.xyzx
add r7.w, r7.w, r7.w
mad r12.xyz, r3.xyzx, -r7.wwww, -r7.xyzx
mul r7.w, r5.y, l(17.000000)
exp r7.w, r7.w
add r7.w, r7.w, l(2.000000)
div r7.w, l(2.000000), r7.w
sqrt r8.y, r7.w
sqrt r8.z, r8.y
mad r8.z, r8.z, l(0.500000), l(0.500000)
mul r8.z, r8.z, r8.z
mul r8.w, r8.z, l(0.500000)
mad r8.z, -r8.z, l(0.500000), l(1.000000)
mad r9.z, r5.x, r8.z, r8.w
mul r8.zw, r8.zzzw, r9.zzzz
dp3 r9.z, r3.xyzx, cb2[17].xyzx
mov_sat r9.w, r9.z
ge r10.w, l(0.000000), r9.w
if_nz r10.w
  mov r11.y, l(0)
endif 
if_z r10.w
  mul r13.xyz, v6.yyyy, cb2[29].xyzx
  mad r13.xyz, v6.xxxx, cb2[28].xyzx, r13.xyzx
  mad r13.xyz, v6.zzzz, cb2[30].xyzx, r13.xyzx
  add r13.xyz, r13.xyzx, cb2[31].xyzx
  add r10.w, r13.z, -cb2[17].w
  mad r10.w, -r10.w, l(0.00006104), l(1.000000)
  mov_sat r11.z, r10.w
  eq r11.z, r10.w, r11.z
  if_nz r11.z
    mov r11.zw, l(0,0,0,0)
    loop 
      ge r13.w, r11.z, l(3.000000)
      breakc_nz r13.w
      ftou r13.w, r11.z
      add r14.xy, r13.xyxx, -cb2[r13.w + 20].xyxx
      max r14.x, |r14.y|, |r14.x|
      mul r11.w, r14.x, cb2[r13.w + 20].z
      lt r13.w, r11.w, l(1.000000)
      if_nz r13.w
        break 
      endif 
      add r11.z, r11.z, l(1.000000)
      mov r11.w, l(0)
    endloop 
  else 
    mov r11.zw, l(0,0,3.000000,0)
  endif 
  ge r13.w, r11.z, l(3.000000)
  if_nz r13.w
    mul r14.xyz, l(128.000000, 0.500000, 0.500000, 0.000000), cb2[27].zxyz
    rcp r15.xz, r14.xxxx
    mov r15.y, -r15.z
    mad r14.xyz, r13.xyxx, r15.xyzx, r14.yzyy
    add r15.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r14.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r14.xyz, r15.xyzx, r14.xyzx
    mul r15.xy, r14.zyzz, cb2[32].xxxx
    round_ni r15.xy, r15.xyxx
    mul r14.w, r15.y, cb2[27].x
    mad r14.w, r14.w, cb2[32].x, r15.x
    ftou r14.w, r14.w
    iadd r14.w, r14.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.x, r14.w, l(0), t23.xxxx
    and r15.y, r15.x, l(0x40000000)
    ishl r15.z, r15.x, l(2)
    if_z r15.y
      and r15.y, r15.x, l(0x01ffffff)
      iadd r16.x, r14.w, r15.y
      ushr r14.w, r15.x, l(25)
      utof r14.w, r14.w
      mul r14.xyz, r14.wwww, r14.xyzx
      frc r14.xyz, r14.xyzx
      mul r14.xyz, r14.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
      ftou r14.xyz, r14.xyzx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.z, r16.x, l(0), t23.xxxx
      ushr r15.xy, r14.zyzz, l(6, 6, 0, 0)
      and r14.w, r16.z, l(0xc0000000)
      iadd r15.w, r16.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.w, r15.w, l(0), t23.xxxx
      movc r15.y, r15.y, r16.z, r15.w
      ushr r15.w, r15.y, l(13)
      movc r15.x, r15.x, r15.w, r15.y
      and r15.x, r15.x, l(8191)
      iadd r17.x, r15.x, r16.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.z, r17.x, l(0), t23.xxxx
      mov r16.y, l(0)
      mov r17.y, l(1)
      movc r15.xyw, r14.wwww, r16.xyxz, r17.xyxz
      movc r17.yz, r14.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r18.xy, r14.zyzz, r17.yyyy
      and r18.xy, r18.xyxx, l(1, 1, 0, 0)
      and r16.w, r15.w, l(0xc0000000)
      iadd r17.y, r15.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.y, r17.y, l(0), t23.xxxx
      movc r17.y, r18.y, r15.w, r17.y
      ushr r18.y, r17.y, l(13)
      movc r17.y, r18.x, r18.y, r17.y
      and r17.y, r17.y, l(8191)
      iadd r17.x, r15.x, r17.y
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.w, r17.x, l(0), t23.xxxx
      movc r15.xyw, r16.wwww, r15.xyxw, r17.xzxw
      movc r15.xyw, r14.wwww, r16.xyxz, r15.xyxw
      and r14.w, r15.w, l(0xc0000000)
      if_z r14.w
        iadd r14.w, -r15.y, l(6)
        ushr r16.xy, r14.zyzz, r14.wwww
        or r14.w, r15.w, l(0x40000000)
        bfi r16.y, l(1), l(1), r16.y, l(0)
        bfi r16.x, l(1), l(0), r16.x, r16.y
        imul null, r16.x, r16.x, l(10)
        ushr r14.w, r14.w, r16.x
        and r14.w, r14.w, l(1023)
        iadd r16.x, r14.w, r15.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.w, r16.x, l(0), t23.xxxx
        iadd r16.yz, r15.yyyy, l(0, 1, 2, 0)
        iadd r14.w, -r16.y, l(6)
        ushr r17.xy, r14.zyzz, r14.wwww
        and r14.w, r16.w, l(0xc0000000)
        or r15.y, r16.w, l(0x40000000)
        bfi r17.y, l(1), l(1), r17.y, l(0)
        bfi r17.x, l(1), l(0), r17.x, r17.y
        imul null, r17.x, r17.x, l(10)
        ushr r15.y, r15.y, r17.x
        and r15.y, r15.y, l(1023)
        iadd r17.x, r15.y, r16.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.z, r17.x, l(0), t23.xxxx
        mov r17.y, r16.z
        movc r17.xyz, r14.wwww, r16.xywx, r17.xyzx
        iadd r15.y, -r17.y, l(6)
        ushr r16.yz, r14.zzyz, r15.yyyy
        and r15.y, r17.z, l(0xc0000000)
        or r17.y, r17.z, l(0x40000000)
        bfi r16.z, l(1), l(1), r16.z, l(0)
        bfi r16.y, l(1), l(0), r16.y, r16.z
        imul null, r16.y, r16.y, l(10)
        ushr r16.y, r17.y, r16.y
        and r16.y, r16.y, l(1023)
        iadd r18.x, r16.y, r17.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.y, r18.x, l(0), t23.xxxx
        movc r16.yz, r15.yyyy, r17.xxzx, r18.xxyx
        movc r15.xw, r14.wwww, r16.xxxw, r16.yyyz
      endif 
      and r14.w, r15.w, l(0xc0000000)
      if_z r14.w
        ubfe r15.y, l(14), l(15), r15.w
        utof r15.y, r15.y
        mul r15.y, r15.y, cb2[27].w
        mul r15.y, r15.y, l(0.00006104)
        and r16.xy, r15.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r16.x, r16.x
        mul r16.x, r16.x, cb2[27].w
        mul r16.x, r16.x, l(0.00003052)
        and r16.z, r14.y, l(3)
        iadd r16.z, r15.x, r16.z
        iadd r16.z, r16.z, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.z, r16.z, l(0), t23.xxxx
        bfi r17.xyz, l(2, 2, 1, 0), l(3, 1, 4, 0), r14.xyzx, l(0, 0, 0, 0)
        ushr r14.x, r16.z, r17.x
        and r14.x, r14.x, l(255)
        utof r14.x, r14.x
        mul r14.x, r16.x, r14.x
        mad r14.x, r14.x, l(0.00392157), r15.y
        iadd r14.y, r17.y, l(1)
        ubfe r14.z, l(1), l(1), r14.z
        iadd r14.y, r14.z, r14.y
        iadd r14.y, r14.y, r15.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.y, r14.y, l(0), t23.xxxx
        ushr r14.y, r14.y, r17.z
        and r14.y, r14.y, l(0x0000ffff)
        utof r14.y, r14.y
        mul r14.y, r16.x, r14.y
        mad r14.y, r14.y, l(0.00001526), r15.y
        movc r15.z, r16.y, r14.x, r14.y
      else 
        and r14.x, r15.w, l(0x80000000)
        iadd r14.y, r15.x, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.y, r14.y, l(0), t23.xxxx
        movc r14.x, r14.x, r14.y, l(0)
        ishl r14.y, r15.w, l(2)
        ushr r14.z, r14.x, l(16)
        and r14.x, r14.x, l(0x0000ffff)
        f16tof32 r14.xz, r14.xxzx
        mad r14.y, r13.x, r14.z, r14.y
        mad r14.x, r13.y, r14.x, r14.y
        movc r15.z, r14.w, r14.x, r15.z
      endif 
    endif 
    mad r13.z, -cb2[27].z, l(2.000000), r13.z
    lt r13.z, r15.z, r13.z
    movc r11.y, r13.z, l(0), l(1.000000)
  endif 
  if_z r13.w
    if_z cb2[58].y
      ftou r13.z, r11.z
      add r14.xy, r13.xyxx, -cb2[r13.z + 20].xyxx
      mul r13.zw, r14.xxxy, cb2[r13.z + 20].zzzz
      mad r14.xy, r13.zwzz, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r13.z, cb2[26].y
      add r14.z, r11.z, r13.z
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.z, r14.xyzx, t13.xxxx, s13, r10.w
      sample_l_indexable(texture2darray)(float,float,float,float) r13.w, r14.xyzx, t31.yzwx, s0, l(0.000000)
      add r13.z, r13.w, r13.z
      add_sat r13.z, r13.z, l(-1.000000)
      mul r13.w, r13.z, r13.z
      mul r11.y, r13.z, r13.w
    endif 
    if_nz cb2[58].y
      mov r14.x, -r9.x
      ftou r13.z, r11.z
      add r11.z, r11.z, l(1.000000)
      min r11.z, r11.z, l(2.000000)
      add r11.w, -r11.w, l(1.000000)
      mul r11.w, r11.w, l(28.000000)
      ftou r11.zw, r11.zzzw
      add r15.xy, r13.xyxx, -cb2[r13.z + 20].xyxx
      mul r15.xy, r15.xyxx, cb2[r13.z + 20].zzzz
      mad r15.xy, r15.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r13.xy, r13.xyxx, -cb2[r11.z + 20].xyxx
      mul r13.xy, r13.xyxx, cb2[r11.z + 20].zzzz
      mad r13.xy, r13.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mov r14.y, r10.x
      mov r14.z, r9.x
      mov r13.w, l(0)
      mov r14.w, l(0)
      loop 
        uge r15.z, r14.w, l(8)
        breakc_nz r15.z
        ult r15.z, r11.w, r14.w
        movc r16.xy, r15.zzzz, r13.xyxx, r15.xyxx
        movc r15.w, r15.z, cb2[r11.z + 20].w, cb2[r13.z + 20].w
        movc r15.z, r15.z, r11.z, r13.z
        dp2 r17.x, icb[r14.w + 0].yxyy, r14.xyxx
        dp2 r17.y, icb[r14.w + 0].yxyy, r14.yzyy
        mad r16.xy, r17.xyxx, r15.wwww, r16.xyxx
        iadd r15.z, r15.z, cb2[26].y
        utof r16.z, r15.z
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.z, r16.xyzx, t13.xxxx, s13, r10.w
        sample_l_indexable(texture2darray)(float,float,float,float) r15.w, r16.xyzx, t31.yzwx, s0, l(0.000000)
        add r15.z, r15.w, r15.z
        add_sat r15.z, r15.z, l(-1.000000)
        mad r13.w, r15.z, l(0.125000), r13.w
        iadd r14.w, r14.w, l(1)
      endloop 
      mul r10.w, r13.w, r13.w
      mul r11.y, r13.w, r10.w
    endif 
  endif 
endif 
lt r10.w, l(0.000000), r9.w
if_nz r10.w
  lt r10.w, l(0.000000), r11.y
  if_nz r10.w
    mul r10.w, r7.w, cb2[18].w
    mul r10.w, r9.w, r10.w
    if_nz cb2[23].x
      add r13.xyz, v6.xyzx, cb1[24].xyzx
      mov r13.w, l(1.000000)
      dp4 r11.z, cb2[24].xyzw, r13.xyzw
      dp4 r11.w, cb2[25].xyzw, r13.xyzw
      frc r13.xy, r11.zwzz
      iadd r11.z, l(-1), cb2[23].x
      utof r13.z, r11.z
      sample_l_indexable(texture2darray)(float,float,float,float) r13.xyz, r13.xyzx, t20.xyzw, s2, l(0.000000)
      add r13.xyz, r13.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
      mad r13.xyz, cb2[23].yyyy, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mul r13.xyz, r13.xyzx, cb2[18].xyzx
    else 
      mov r13.xyz, cb2[18].xyzx
    endif 
    ushr r11.z, cb2[53].x, l(16)
    ult r11.w, l(0), r11.z
    and r11.w, r5.w, r11.w
    if_nz r11.w
      iadd r11.z, r11.z, cb2[0].x
      iadd r11.z, r11.z, l(-1)
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.w, r11.z, l(52), t12.xxxx
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r11.z, l(68), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r11.z, l(84), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r16.xyzw, r11.z, l(132), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r17.xyzw, r11.z, l(148), t12.xyzw
      mad r13.w, |r9.z|, l(-0.200000), l(0.400000)
      mad r18.xyz, r3.xyzx, r13.wwww, v6.xyzx
      mov r18.w, l(1.000000)
      dp4 r14.x, r14.xyzw, r18.xyzw
      dp4 r14.y, r15.xyzw, r18.xyzw
      mad r14.xy, r14.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      add r14.xy, r17.zwzz, r14.xyxx
      mul r14.xy, r17.xyxx, r14.xyxx
      div r14.zw, r11.wwww, r16.xxxz
      add r15.xy, -r14.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
      ge r15.xy, r14.xyxx, r15.xyxx
      ge r14.zw, r14.zzzw, r14.xxxy
      or r14.zw, r14.zzzw, r15.xxxy
      or r13.w, r14.w, r14.z
      if_z r13.w
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.w, r11.z, l(28), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r11.z, l(100), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.zw, r11.z, l(164), t12.xxxy
        dp4 r11.z, r15.xyzw, r18.xyzw
        mov_sat r14.xy, r14.xyxx
        mad r15.xy, r14.xyxx, r16.xzxx, r16.ywyy
        add r11.z, r14.z, r11.z
        div r11.z, r11.z, r14.w
        max r11.z, r11.z, l(0.00006104)
        and r13.w, r13.w, l(0x0000ffff)
        if_nz cb2[58].y
          mov r14.x, -r9.x
          utof r16.z, r13.w
          mov r14.y, r10.x
          mov r14.z, r9.x
          mov r14.w, l(0)
          mov r15.w, l(0)
          loop 
            ige r16.w, r15.w, l(8)
            breakc_nz r16.w
            dp2 r17.x, icb[r15.w + 0].yxyy, r14.xyxx
            dp2 r17.y, icb[r15.w + 0].yxyy, r14.yzyy
            mad r16.xy, r17.xyxx, r11.wwww, r15.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.x, r16.xyzx, t9.xxxx, s13, r11.z
            mad r14.w, r16.x, l(0.125000), r14.w
            iadd r15.w, r15.w, l(1)
          endloop 
        else 
          utof r15.z, r13.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r15.xyzx, t9.xxxx, s13, r11.z
        endif 
        mul r11.z, r14.w, r14.w
        mul r11.z, r14.w, r11.z
      else 
        mov r11.z, l(1.000000)
      endif 
      mul r11.y, r11.z, r11.y
    else 
      and r11.z, cb2[53].x, l(0x0000ffff)
      ult r11.w, l(0), r11.z
      not r13.w, r5.w
      and r11.w, r11.w, r13.w
      if_nz r11.w
        iadd r11.z, r11.z, cb2[0].x
        iadd r11.z, r11.z, l(-1)
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.w, r11.z, l(52), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r11.z, l(68), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r11.z, l(84), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r16.xyzw, r11.z, l(132), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r17.xyzw, r11.z, l(148), t12.xyzw
        mad r13.w, |r9.z|, l(-0.200000), l(0.400000)
        mad r18.xyz, r3.xyzx, r13.wwww, v6.xyzx
        mov r18.w, l(1.000000)
        dp4 r14.x, r14.xyzw, r18.xyzw
        dp4 r14.y, r15.xyzw, r18.xyzw
        mad r14.xy, r14.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r14.xy, r17.zwzz, r14.xyxx
        mul r14.xy, r17.xyxx, r14.xyxx
        div r14.zw, r11.wwww, r16.xxxz
        add r15.xy, -r14.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        ge r15.xy, r14.xyxx, r15.xyxx
        ge r14.zw, r14.zzzw, r14.xxxy
        or r14.zw, r14.zzzw, r15.xxxy
        or r13.w, r14.w, r14.z
        if_z r13.w
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.w, r11.z, l(28), t12.xxxx
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r11.z, l(100), t12.xyzw
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.zw, r11.z, l(164), t12.xxxy
          dp4 r11.z, r15.xyzw, r18.xyzw
          mov_sat r14.xy, r14.xyxx
          mad r15.xy, r14.xyxx, r16.xzxx, r16.ywyy
          add r11.z, r14.z, r11.z
          div r11.z, r11.z, r14.w
          max r11.z, r11.z, l(0.00006104)
          and r13.w, r13.w, l(0x0000ffff)
          if_nz cb2[58].y
            mov r14.x, -r9.x
            utof r16.z, r13.w
            mov r14.y, r10.x
            mov r14.z, r9.x
            mov r14.w, l(0)
            mov r15.w, l(0)
            loop 
              ige r16.w, r15.w, l(8)
              breakc_nz r16.w
              dp2 r17.x, icb[r15.w + 0].yxyy, r14.xyxx
              dp2 r17.y, icb[r15.w + 0].yxyy, r14.yzyy
              mad r16.xy, r17.xyxx, r11.wwww, r15.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.x, r16.xyzx, t9.xxxx, s13, r11.z
              mad r14.w, r16.x, l(0.125000), r14.w
              iadd r15.w, r15.w, l(1)
            endloop 
          else 
            utof r15.z, r13.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.w, r15.xyzx, t9.xxxx, s13, r11.z
          endif 
          mul r11.z, r14.w, r14.w
          mul r11.z, r14.w, r11.z
        else 
          mov r11.z, l(1.000000)
        endif 
        mul r11.y, r11.z, r11.y
      endif 
    endif 
    mad r11.z, -r5.x, l(0.500000), l(1.000000)
    mad r11.z, -r9.w, r11.z, l(1.000000)
    mul r11.z, r11.z, r11.z
    mad r11.z, -r11.z, l(0.620000), l(0.620000)
    add r11.z, -r9.w, r11.z
    mad r11.z, r8.y, r11.z, r9.w
    mul r11.z, r11.y, r11.z
    mul r14.xyz, r13.xyzx, r11.zzzz
    lt r9.z, l(0.000000), r9.z
    mad r15.xyz, -v6.xyzx, r4.wwww, cb2[17].xyzx
    dp3 r4.w, r15.xyzx, r15.xyzx
    rsq r4.w, r4.w
    mul r15.xyz, r4.wwww, r15.xyzx
    dp3 r4.w, r15.xyzx, r7.xyzx
    dp3 r11.z, r3.xyzx, r15.xyzx
    mad r11.w, |r11.z|, r7.w, -|r11.z|
    mad r11.z, |r11.z|, r11.w, l(1.000000)
    mad r9.w, r9.w, r8.z, r8.w
    mul r11.z, r11.z, r11.z
    mul r9.w, r9.w, r11.z
    rcp r9.w, r9.w
    mul r9.w, r10.w, r9.w
    mul r9.w, r9.w, r11.y
    mul r9.w, r9.w, l(0.250000)
    mul r11.yzw, r13.xxyz, r9.wwww
    add_sat r4.w, -r4.w, l(1.000000)
    mul r10.w, r4.w, r4.w
    mul r10.w, r10.w, r10.w
    mul r4.w, r4.w, r10.w
    mul r4.w, r4.w, r9.w
    mul r13.xyz, r13.yzxy, r4.wwww
    mov r14.w, r13.z
    and r14.xyzw, r9.zzzz, r14.xyzw
    mov r13.zw, r11.yyyz
    and r13.xyzw, r9.zzzz, r13.xyzw
    and r4.w, r9.z, r11.w
  else 
    mov r14.xyzw, l(0,0,0,0)
    mov r13.xyzw, l(0,0,0,0)
    mov r4.w, l(0)
  endif 
else 
  mov r14.xyzw, l(0,0,0,0)
  mov r13.xyzw, l(0,0,0,0)
  mov r4.w, l(0)
endif 
mul r9.z, r2.y, l(0.00781250)
min r9.z, r9.z, l(15.000000)
ftou r9.z, r9.z
ushr r15.xy, r2.zwzz, l(6, 6, 0, 0)
ishl r15.z, r9.z, l(4)
mov r16.x, -r9.x
not r2.z, r5.w
mad r2.w, -r5.x, l(0.500000), l(1.000000)
mov r17.xy, l(0,0,0,0)
mov r18.w, l(0)
mov r19.xyz, v6.xyzx
mov r19.w, l(1.000000)
mov r20.w, l(1.000000)
mov r16.z, r9.x
mov r21.w, l(1.000000)
mov r22.z, l(1.000000)
mov r23.w, l(1.000000)
mov r16.yw, r10.xxxx
mov r9.y, r16.w
mov r24.w, l(1.000000)
mov r10.y, r16.x
mov r10.z, r9.x
mov r25.w, l(1.000000)
mov r26.x, r10.x
mov r26.y, r16.x
mov r26.z, r9.x
mov r27.x, r10.x
mov r27.y, r16.x
mov r27.z, r9.x
mov r28.x, r10.x
mov r28.y, r16.x
mov r28.z, r9.x
mov r11.yzw, r14.xxyz
mov r29.x, r14.w
mov r29.yz, r13.xxyx
mov r30.xy, r13.zwzz
mov r30.z, r4.w
mov r9.z, cb2[58].y
mov r9.w, l(0)
loop 
  uge r10.w, r9.w, cb2[0].x
  breakc_nz r10.w
  ushr r17.z, r9.w, l(5)
  iadd r18.xyz, r15.xyzx, r17.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r10.w, r18.xyzw, t6.yzwx
  mov r18.xyz, r11.yzwy
  mov r31.xyz, r29.xyzx
  mov r32.xyz, r30.xyzx
  mov r15.w, r9.z
  mov r17.z, r10.w
  loop 
    breakc_z r17.z
    firstbit_lo r17.w, r17.z
    ishl r22.w, l(1), r17.w
    and r26.w, r17.z, r22.w
    if_nz r26.w
      xor r17.z, r17.z, r22.w
      iadd r17.w, r9.w, r17.w
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r33.xyzw, r17.w, l(0), t11.xyzw
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r34.xy, r17.w, l(16), t11.xyxx
      add r33.xyz, r33.xyzx, -v6.xyzx
      mov r34.z, r33.w
      lt r33.xyz, |r33.xyzx|, r34.zxyz
      and r22.w, r33.y, r33.x
      and r22.w, r33.z, r22.w
      if_nz r22.w
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r33.xyzw, r17.w, l(0), t12.wxyz
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r34.xyzw, r17.w, l(16), t12.zxyw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r35.xyzw, r17.w, l(32), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r36.xyzw, r17.w, l(48), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r37.xyzw, r17.w, l(64), t12.yzwx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r38.xyzw, r17.w, l(80), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r39.xyzw, r17.w, l(96), t12.yzwx
        ubfe r22.w, l(3), l(24), r34.w
        switch r22.w
          case l(4)
          lt r22.w, l(0.000000), r39.x
          mov r40.xy, r38.zwzz
          mov r40.z, r39.w
          mad r41.xyz, -r40.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r33.yzwy
          add r42.xyz, r41.xyzx, -v6.xyzx
          dp3 r26.w, r40.xyzx, r42.xyzx
          div_sat r27.w, -r26.w, r39.x
          mad r43.xyz, r27.wwww, r40.xyzx, r41.xyzx
          movc r43.xyz, r22.wwww, r43.xyzx, r33.yzwy
          add r43.xyz, r43.xyzx, -v6.xyzx
          dp3 r28.w, r43.xyzx, r43.xyzx
          rsq r29.w, r28.w
          mul r43.xyz, r29.wwww, r43.xyzx
          dp3 r29.w, r3.xyzx, r43.xyzx
          mov_sat r30.w, r29.w
          lt r31.w, l(0.000000), r30.w
          if_nz r31.w
            sqrt r31.w, r28.w
            mul r32.w, r36.x, r36.x
            div r28.w, r32.w, r28.w
            min r28.w, r28.w, l(1.000000)
            mad_sat r43.xy, r31.wwww, r35.xzxx, r35.ywyy
            mul r43.zw, r43.xxxy, r43.xxxy
            mad r43.xy, r43.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r43.xy, r43.xyxx, r43.zwzz
            mul r28.w, r28.w, r43.x
            mul r28.w, r43.y, r28.w
            lt r31.w, l(0.000000), r28.w
            if_nz r31.w
              ubfe r31.w, l(3), l(27), r34.w
              ine r31.w, r31.w, l(1)
              if_nz r31.w
                mad r31.w, |r29.w|, l(-0.200000), l(0.400000)
                mad r43.xyz, r3.xyzx, r31.wwww, v6.xyzx
                add r43.xyz, -r37.xyzx, r43.xyzx
                max r31.w, |r43.z|, |r43.y|
                max r31.w, r31.w, |r43.x|
                div r31.w, r38.x, r31.w
                add r31.w, r38.y, r31.w
                dp3 r32.w, r43.xyzx, r43.xyzx
                rsq r32.w, r32.w
                max r31.w, r31.w, l(0.00006104)
                and r40.w, r34.w, l(0x0000ffff)
                utof r44.w, r40.w
                mov r40.w, l(0)
                mov r41.w, l(0)
                loop 
                  ige r42.w, r41.w, l(8)
                  breakc_nz r42.w
                  dp2 r45.y, icb[r41.w + 0].yxyy, r16.xyxx
                  dp2 r45.z, icb[r41.w + 0].yxyy, r16.yzyy
                  mul r45.yz, r36.yyyy, r45.yyzy
                  mul r45.x, r11.x, r45.y
                  mul r45.w, r8.x, r45.y
                  mad r44.xyz, r43.xyzx, r32.wwww, r45.xzwx
                  sample_c_lz_indexable(texturecubearray)(float,float,float,float) r42.w, r44.xyzw, t10.xxxx, s13, r31.w
                  mad r40.w, r42.w, l(0.125000), r40.w
                  iadd r41.w, r41.w, l(1)
                endloop 
              else 
                mov r40.w, l(1.000000)
              endif 
              mul r28.w, r28.w, r40.w
              lt r31.w, l(0.000000), r28.w
              if_nz r31.w
                mul r31.w, r7.w, r34.x
                mul r31.w, r31.w, l(0.250000)
                dp3 r32.w, r40.xyzx, r12.xyzx
                dp3 r41.w, r12.xyzx, r42.xyzx
                mad r42.x, -r32.w, r32.w, r39.x
                mad r26.w, r32.w, r41.w, -r26.w
                div_sat r26.w, r26.w, r42.x
                div r32.w, r42.x, r39.x
                mul r32.w, r32.w, l(10.000000)
                min r32.w, r32.w, l(1.000000)
                add r26.w, -r27.w, r26.w
                mad r26.w, r32.w, r26.w, r27.w
                mad r40.xyz, r26.wwww, r40.xyzx, r41.xyzx
                movc r40.xyz, r22.wwww, r40.xyzx, r33.yzwy
                add r40.xyz, r40.xyzx, -v6.xyzx
                dp3 r22.w, r40.xyzx, r40.xyzx
                rsq r22.w, r22.w
                mul r41.xyz, r22.wwww, r40.xyzx
                ubfe r26.w, l(4), l(16), r34.w
                ult r27.w, l(0), r26.w
                and r27.w, r5.w, r27.w
                if_nz r27.w
                  iadd r26.w, r26.w, cb2[0].x
                  iadd r26.w, r26.w, l(-1)
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r27.w, r26.w, l(52), t12.xxxx
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.xyzw, r26.w, l(100), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r26.w, l(116), t12.xyzw
                  mad r32.w, |r29.w|, l(-0.200000), l(0.400000)
                  mad r20.xyz, r3.xyzx, r32.wwww, v6.xyzx
                  dp4 r32.w, r42.xyzw, r20.xyzw
                  dp4 r41.w, r43.xyzw, r20.xyzw
                  lt r42.x, r41.w, r32.w
                  if_z r42.x
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r26.w, l(68), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r44.xyzw, r26.w, l(84), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r45.xyzw, r26.w, l(132), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r46.xyzw, r26.w, l(148), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.yz, r26.w, l(164), t12.xxyx
                    dp4 r43.x, r43.xyzw, r20.xyzw
                    dp4 r43.y, r44.xyzw, r20.xyzw
                    div r20.xy, r43.xyxx, r41.wwww
                    mad r20.xy, r20.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                    add r20.xy, r46.zwzz, r20.xyxx
                    mul r20.xy, r46.xyxx, r20.xyxx
                    div r43.xy, r27.wwww, r45.xzxx
                    add r43.zw, -r43.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                    ge r43.zw, r20.xxxy, r43.zzzw
                    ge r43.xy, r43.xyxx, r20.xyxx
                    or r43.xy, r43.xyxx, r43.zwzz
                    or r20.z, r43.y, r43.x
                    mov_sat r20.xy, r20.xyxx
                    mad r43.xy, r20.xyxx, r45.xzxx, r45.ywyy
                    mul r20.x, r41.w, r42.z
                    mad r20.y, r42.y, r41.w, r32.w
                    div r20.x, r20.y, r20.x
                  else 
                    mov r20.z, l(-1)
                  endif 
                  or r20.y, r42.x, r20.z
                  if_z r20.y
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r20.y, r26.w, l(28), t12.xxxx
                    max r20.x, r20.x, l(0.00006104)
                    and r20.y, r20.y, l(0x0000ffff)
                    if_nz r15.w
                      utof r42.z, r20.y
                      mov r20.z, l(0)
                      mov r26.w, l(0)
                      loop 
                        ige r32.w, r26.w, l(8)
                        breakc_nz r32.w
                        dp2 r44.x, icb[r26.w + 0].yxyy, r16.xwxx
                        dp2 r44.y, icb[r26.w + 0].xyxx, r9.xyxx
                        mad r42.xy, r44.xyxx, r27.wwww, r43.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r32.w, r42.xyzx, t9.xxxx, s13, r20.x
                        mad r20.z, r32.w, l(0.125000), r20.z
                        iadd r26.w, r26.w, l(1)
                      endloop 
                    else 
                      utof r43.z, r20.y
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.z, r43.xyzx, t9.xxxx, s13, r20.x
                    endif 
                    mul r20.x, r20.z, r20.z
                    mul r20.x, r20.z, r20.x
                  else 
                    mov r20.x, l(1.000000)
                  endif 
                  mul r28.w, r20.x, r28.w
                else 
                  ubfe r20.x, l(4), l(20), r34.w
                  ult r20.y, l(0), r20.x
                  and r20.y, r2.z, r20.y
                  if_nz r20.y
                    iadd r20.x, r20.x, cb2[0].x
                    iadd r20.x, r20.x, l(-1)
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r20.y, r20.x, l(52), t12.xxxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.xyzw, r20.x, l(100), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r20.x, l(116), t12.xyzw
                    mad r26.w, |r29.w|, l(-0.200000), l(0.400000)
                    mad r21.xyz, r3.xyzx, r26.wwww, v6.xyzx
                    dp4 r26.w, r42.xyzw, r21.xyzw
                    dp4 r27.w, r43.xyzw, r21.xyzw
                    lt r32.w, r27.w, r26.w
                    if_z r32.w
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.xyzw, r20.x, l(68), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r20.x, l(84), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r44.xyzw, r20.x, l(132), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r45.xyzw, r20.x, l(148), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r46.xy, r20.x, l(164), t12.xyxx
                      dp4 r42.x, r42.xyzw, r21.xyzw
                      dp4 r42.y, r43.xyzw, r21.xyzw
                      div r21.xy, r42.xyxx, r27.wwww
                      mad r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                      add r21.xy, r45.zwzz, r21.xyxx
                      mul r21.xy, r45.xyxx, r21.xyxx
                      div r42.xy, r20.yyyy, r44.xzxx
                      add r42.zw, -r42.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                      ge r42.zw, r21.xxxy, r42.zzzw
                      ge r42.xy, r42.xyxx, r21.xyxx
                      or r42.xy, r42.xyxx, r42.zwzz
                      or r21.z, r42.y, r42.x
                      mov_sat r21.xy, r21.xyxx
                      mad r42.xy, r21.xyxx, r44.xzxx, r44.ywyy
                      mul r21.x, r27.w, r46.y
                      mad r21.y, r46.x, r27.w, r26.w
                      div r21.x, r21.y, r21.x
                    else 
                      mov r21.z, l(-1)
                    endif 
                    or r21.y, r32.w, r21.z
                    if_z r21.y
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r20.x, r20.x, l(28), t12.xxxx
                      max r21.x, r21.x, l(0.00006104)
                      and r20.x, r20.x, l(0x0000ffff)
                      if_nz r15.w
                        utof r43.z, r20.x
                        mov r21.yz, l(0,0,0,0)
                        loop 
                          ige r26.w, r21.z, l(8)
                          breakc_nz r26.w
                          dp2 r44.x, icb[r21.z + 0].xyxx, r10.xyxx
                          dp2 r44.y, icb[r21.z + 0].yxyy, r10.xzxx
                          mad r43.xy, r44.xyxx, r20.yyyy, r42.xyxx
                          sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.w, r43.xyzx, t9.xxxx, s13, r21.x
                          mad r21.y, r26.w, l(0.125000), r21.y
                          iadd r21.z, r21.z, l(1)
                        endloop 
                      else 
                        utof r42.z, r20.x
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.y, r42.xyzx, t9.xxxx, s13, r21.x
                      endif 
                      mul r20.x, r21.y, r21.y
                      mul r20.x, r21.y, r20.x
                    else 
                      mov r20.x, l(1.000000)
                    endif 
                    mul r28.w, r20.x, r28.w
                  endif 
                endif 
                mad r20.x, -r30.w, r2.w, l(1.000000)
                mul r20.x, r20.x, r20.x
                mad r20.x, -r20.x, l(0.620000), l(0.620000)
                add r20.x, -r30.w, r20.x
                mad r20.x, r8.y, r20.x, r30.w
                mul r20.x, r28.w, r20.x
                mov r34.x, r33.x
                lt r20.y, l(0.000000), r29.w
                mad r42.xyz, r20.xxxx, r34.xyzx, r18.xyzx
                dp3_sat r20.x, r3.xyzx, r41.xyzx
                mad r40.xyz, r40.xyzx, r22.wwww, r7.xyzx
                dp3 r21.x, r40.xyzx, r40.xyzx
                rsq r21.x, r21.x
                mul r40.xyz, r21.xxxx, r40.xyzx
                dp3 r21.x, r40.xyzx, r7.xyzx
                dp3 r21.z, r3.xyzx, r40.xyzx
                mad r22.w, |r21.z|, r7.w, -|r21.z|
                mad r21.z, |r21.z|, r22.w, l(1.000000)
                mad r22.w, r20.x, r8.z, r8.w
                mul r21.z, r21.z, r21.z
                mul r21.z, r22.w, r21.z
                rcp r21.z, r21.z
                mul r20.x, r31.w, r20.x
                mul r20.x, r20.x, r21.z
                mul r20.x, r28.w, r20.x
                mad r40.xyz, r20.xxxx, r34.xyzx, r32.xyzx
                add_sat r21.x, -r21.x, l(1.000000)
                mul r21.z, r21.x, r21.x
                mul r21.z, r21.z, r21.z
                mul r21.x, r21.z, r21.x
                mul r20.x, r20.x, r21.x
                mad r41.xyz, r20.xxxx, r34.xyzx, r31.xyzx
                movc r18.xyz, r20.yyyy, r42.xyzx, r18.xyzx
                movc r31.xyz, r20.yyyy, r41.xyzx, r31.xyzx
                movc r32.xyz, r20.yyyy, r40.xyzx, r32.xyzx
              endif 
            endif 
          endif 
          break 
          case l(2)
          mov r40.xy, r36.zwzz
          mov r40.z, r37.w
          add r40.xyz, r40.xyzx, -v6.xyzx
          dp3 r20.x, r40.xyzx, r40.xyzx
          rsq r20.x, r20.x
          mul r41.xyz, r20.xxxx, r40.xyzx
          dp3 r20.y, r3.xyzx, r41.xyzx
          mov_sat r21.x, r20.y
          lt r21.z, l(0.000000), r21.x
          if_nz r21.z
            ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r17.w, l(112), t12.yzwx
            ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.xyzw, r17.w, l(128), t12.zxyw
            mov r43.xyz, r41.xyzx
            mov r43.w, r42.y
            dp4 r21.z, r43.xyzw, r19.xyzw
            lt r22.w, r21.z, l(1.000000)
            if_nz r22.w
              mov r44.xyz, l(1.000000,1.000000,1.000000,0)
              mov r22.w, l(0)
            else 
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r45.xyzw, r17.w, l(172), t12.yzwx
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r46.xyzw, r17.w, l(188), t12.wxyz
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r47.xyzw, r17.w, l(204), t12.xyzw
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r26.w, r17.w, l(236), t12.xxxx
              add r48.xyz, r33.yzwy, -v6.xyzx
              mul r27.w, r36.x, r36.x
              dp3 r28.w, r48.xyzx, r48.xyzx
              div r27.w, r27.w, r28.w
              min r27.w, r27.w, l(1.000000)
              mad_sat r35.xy, r21.zzzz, r35.xzxx, r35.ywyy
              mul r35.zw, r35.xxxy, r35.xxxy
              mad r35.xy, r35.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
              mul r35.xy, r35.xyxx, r35.zwzz
              mul r27.w, r27.w, r35.x
              mul r27.w, r35.y, r27.w
              mov r37.w, r38.x
              dp4 r35.x, r37.xyzw, r19.xyzw
              mov r48.xyz, r38.yzwy
              mov r48.w, r39.w
              dp4 r35.y, r48.xyzw, r19.xyzw
              div r22.xy, r35.xyxx, r21.zzzz
              lt r21.z, r45.w, l(0.00048828)
              if_nz r21.z
                mov r46.y, r47.x
                mad_sat r35.xy, |r22.xyxx|, r46.zwzz, r46.xyxx
                mul r35.zw, r35.xxxy, r35.xxxy
                mad r35.xy, r35.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
                mul r35.xy, r35.xyxx, r35.zwzz
                mul r21.z, r35.y, r35.x
              else 
                mov r45.w, r46.y
                mul_sat r35.xyzw, |r22.yyxx|, r45.xyzw
                log r35.xyzw, r35.xyzw
                mul r35.xyzw, r35.xyzw, r46.xxxx
                exp r35.xyzw, r35.xyzw
                add r35.xy, r35.zwzz, r35.xyxx
                log r35.xy, r35.xyxx
                mul r35.xy, r35.xyxx, r47.xxxx
                exp r35.xy, r35.xyxx
                mul r28.w, r35.x, r46.z
                mad r29.w, r46.w, r35.y, l(-1.000000)
                mad r28.w, r46.w, r35.y, -r28.w
                div_sat r28.w, r29.w, r28.w
                mul r29.w, r28.w, r28.w
                mad r28.w, r28.w, l(-2.000000), l(3.000000)
                mul r21.z, r28.w, r29.w
              endif 
              mul r22.w, r21.z, r27.w
              and r21.z, r26.w, l(255)
              if_nz r21.z
                ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r35.xyz, r17.w, l(220), t12.xyzx
                dp3 r26.w, r47.yzwy, r22.xyzx
                dp3 r22.x, r35.xyzx, r22.xyzx
                frc r35.x, r26.w
                frc r35.y, r22.x
                iadd r21.z, r21.z, l(-1)
                utof r35.z, r21.z
                sample_l_indexable(texture2darray)(float,float,float,float) r44.xyz, r35.xyzx, t20.xyzw, s2, l(0.000000)
              else 
                mov r44.xyz, l(1.000000,1.000000,1.000000,0)
              endif 
            endif 
            mov r33.yz, r34.yyzy
            mul r33.xyz, r44.xyzx, r33.xyzx
            lt r21.z, l(0.000000), r22.w
            if_nz r21.z
              ubfe r21.z, l(3), l(27), r34.w
              ine r21.z, r21.z, l(1)
              if_nz r21.z
                mad r21.z, |r20.y|, l(-0.200000), l(0.400000)
                mad r23.xyz, r3.xyzx, r21.zzzz, v6.xyzx
                mov r41.xyz, r39.xyzx
                dp4 r21.z, r41.xyzw, r23.xyzw
                dp4 r22.x, r43.xyzw, r23.xyzw
                ge r22.y, r22.x, r21.z
                if_nz r22.y
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.y, r17.w, l(144), t12.xxxx
                  mov r37.w, r38.x
                  dp4 r35.x, r37.xyzw, r23.xyzw
                  mov r39.xyz, r38.yzwy
                  dp4 r35.y, r39.xyzw, r23.xyzw
                  div r23.xy, r35.xyxx, r22.xxxx
                  mad_sat r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  mad r23.xy, r23.xyxx, r42.zwzz, r42.xyxx
                  div r17.w, r21.z, r22.x
                  max r17.w, r17.w, l(0.00006104)
                  and r21.z, r34.w, l(0x0000ffff)
                  if_nz r15.w
                    utof r35.z, r21.z
                    mov r22.xy, l(0,0,0,0)
                    loop 
                      ige r26.w, r22.y, l(8)
                      breakc_nz r26.w
                      dp2 r37.x, icb[r22.y + 0].xyxx, r26.xyxx
                      dp2 r37.y, icb[r22.y + 0].yxyy, r26.xzxx
                      mad r35.xy, r37.xyxx, r36.yyyy, r23.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.w, r35.xyzx, t9.xxxx, s13, r17.w
                      mad r22.x, r26.w, l(0.125000), r22.x
                      iadd r22.y, r22.y, l(1)
                    endloop 
                  else 
                    utof r23.z, r21.z
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r23.xyzx, t9.xxxx, s13, r17.w
                  endif 
                  mul r17.w, r22.x, r22.x
                  mul r17.w, r22.x, r17.w
                else 
                  mov r17.w, l(1.000000)
                endif 
              else 
                mov r17.w, l(1.000000)
              endif 
              mul r17.w, r17.w, r22.w
              lt r21.z, l(0.000000), r17.w
              if_nz r21.z
                mul r21.z, r7.w, r34.x
                mul r21.z, r21.x, r21.z
                ubfe r22.y, l(4), l(16), r34.w
                ult r22.w, l(0), r22.y
                and r22.w, r5.w, r22.w
                if_nz r22.w
                  iadd r22.y, r22.y, cb2[0].x
                  iadd r22.y, r22.y, l(-1)
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r22.w, r22.y, l(52), t12.xxxx
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r35.xyzw, r22.y, l(68), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r36.xyzw, r22.y, l(84), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r37.xyzw, r22.y, l(100), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r38.xyzw, r22.y, l(116), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r39.xyzw, r22.y, l(132), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r22.y, l(148), t12.xyzw
                  mad r23.x, |r20.y|, l(-0.200000), l(0.400000)
                  mad r24.xyz, r3.xyzx, r23.xxxx, v6.xyzx
                  dp4 r23.x, r35.xyzw, r24.xyzw
                  dp4 r23.y, r36.xyzw, r24.xyzw
                  dp4 r23.z, r37.xyzw, r24.xyzw
                  dp4 r24.x, r38.xyzw, r24.xyzw
                  lt r24.y, r24.x, r23.z
                  div r23.xy, r23.xyxx, r24.xxxx
                  mad r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r23.xy, r41.zwzz, r23.xyxx
                  mul r23.xy, r41.xyxx, r23.xyxx
                  div r34.xy, r22.wwww, r39.xzxx
                  add r35.xy, -r34.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r35.xy, r23.xyxx, r35.xyxx
                  ge r34.xy, r34.xyxx, r23.xyxx
                  or r34.xy, r34.xyxx, r35.xyxx
                  or r24.z, r34.y, r34.x
                  or r24.y, r24.y, r24.z
                  if_z r24.y
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r24.y, r22.y, l(28), t12.xxxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r34.xy, r22.y, l(164), t12.xyxx
                    mov_sat r23.xy, r23.xyxx
                    mad r35.xy, r23.xyxx, r39.xzxx, r39.ywyy
                    mul r22.y, r24.x, r34.y
                    mad r23.x, r34.x, r24.x, r23.z
                    div r22.y, r23.x, r22.y
                    max r22.y, r22.y, l(0.00006104)
                    and r23.x, r24.y, l(0x0000ffff)
                    if_nz r15.w
                      utof r24.z, r23.x
                      mov r23.yz, l(0,0,0,0)
                      loop 
                        ige r26.w, r23.z, l(8)
                        breakc_nz r26.w
                        dp2 r34.x, icb[r23.z + 0].xyxx, r27.xyxx
                        dp2 r34.y, icb[r23.z + 0].yxyy, r27.xzxx
                        mad r24.xy, r34.xyxx, r22.wwww, r35.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r22.y
                        mad r23.y, r24.x, l(0.125000), r23.y
                        iadd r23.z, r23.z, l(1)
                      endloop 
                    else 
                      utof r35.z, r23.x
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.y, r35.xyzx, t9.xxxx, s13, r22.y
                    endif 
                    mul r22.y, r23.y, r23.y
                    mul r22.y, r23.y, r22.y
                  else 
                    mov r22.y, l(1.000000)
                  endif 
                  mul r17.w, r17.w, r22.y
                else 
                  ubfe r22.y, l(4), l(20), r34.w
                  ult r22.w, l(0), r22.y
                  and r22.w, r2.z, r22.w
                  if_nz r22.w
                    iadd r22.y, r22.y, cb2[0].x
                    iadd r22.y, r22.y, l(-1)
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r22.w, r22.y, l(52), t12.xxxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r34.xyzw, r22.y, l(68), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r35.xyzw, r22.y, l(84), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r36.xyzw, r22.y, l(100), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r37.xyzw, r22.y, l(116), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r38.xyzw, r22.y, l(132), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r39.xyzw, r22.y, l(148), t12.xyzw
                    mad r23.x, |r20.y|, l(-0.200000), l(0.400000)
                    mad r25.xyz, r3.xyzx, r23.xxxx, v6.xyzx
                    dp4 r24.x, r34.xyzw, r25.xyzw
                    dp4 r24.y, r35.xyzw, r25.xyzw
                    dp4 r23.x, r36.xyzw, r25.xyzw
                    dp4 r23.z, r37.xyzw, r25.xyzw
                    lt r24.z, r23.z, r23.x
                    div r24.xy, r24.xyxx, r23.zzzz
                    mad r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                    add r24.xy, r39.zwzz, r24.xyxx
                    mul r24.xy, r39.xyxx, r24.xyxx
                    div r25.xy, r22.wwww, r38.xzxx
                    add r34.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r34.xy, r24.xyxx, r34.xyxx
                    ge r25.xy, r25.xyxx, r24.xyxx
                    or r25.xy, r25.xyxx, r34.xyxx
                    or r25.x, r25.y, r25.x
                    or r24.z, r24.z, r25.x
                    if_z r24.z
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r24.z, r22.y, l(28), t12.xxxx
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r25.xy, r22.y, l(164), t12.xyxx
                      mov_sat r24.xy, r24.xyxx
                      mad r34.xy, r24.xyxx, r38.xzxx, r38.ywyy
                      mul r22.y, r23.z, r25.y
                      mad r23.x, r25.x, r23.z, r23.x
                      div r22.y, r23.x, r22.y
                      max r22.y, r22.y, l(0.00006104)
                      and r23.x, r24.z, l(0x0000ffff)
                      if_nz r15.w
                        utof r24.z, r23.x
                        mov r23.z, l(0)
                        mov r25.x, l(0)
                        loop 
                          ige r25.y, r25.x, l(8)
                          breakc_nz r25.y
                          dp2 r35.x, icb[r25.x + 0].xyxx, r28.xyxx
                          dp2 r35.y, icb[r25.x + 0].yxyy, r28.xzxx
                          mad r24.xy, r35.xyxx, r22.wwww, r34.xyxx
                          sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r22.y
                          mad r23.z, r24.x, l(0.125000), r23.z
                          iadd r25.x, r25.x, l(1)
                        endloop 
                      else 
                        utof r34.z, r23.x
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.z, r34.xyzx, t9.xxxx, s13, r22.y
                      endif 
                      mul r22.y, r23.z, r23.z
                      mul r22.y, r23.z, r22.y
                    else 
                      mov r22.y, l(1.000000)
                    endif 
                    mul r17.w, r17.w, r22.y
                  endif 
                endif 
                mad r22.y, -r21.x, r2.w, l(1.000000)
                mul r22.y, r22.y, r22.y
                mad r22.y, -r22.y, l(0.620000), l(0.620000)
                add r22.y, -r21.x, r22.y
                mad r22.y, r8.y, r22.y, r21.x
                mul r22.y, r17.w, r22.y
                lt r20.y, l(0.000000), r20.y
                mad r24.xyz, r22.yyyy, r33.xyzx, r18.xyzx
                mad r25.xyz, r40.xyzx, r20.xxxx, r7.xyzx
                dp3 r20.x, r25.xyzx, r25.xyzx
                rsq r20.x, r20.x
                mul r25.xyz, r20.xxxx, r25.xyzx
                dp3 r20.x, r25.xyzx, r7.xyzx
                dp3 r22.y, r3.xyzx, r25.xyzx
                mad r22.w, |r22.y|, r7.w, -|r22.y|
                mad r22.y, |r22.y|, r22.w, l(1.000000)
                mad r21.x, r21.x, r8.z, r8.w
                mul r22.y, r22.y, r22.y
                mul r21.x, r21.x, r22.y
                rcp r21.x, r21.x
                mul r21.x, r21.z, r21.x
                mul r17.w, r17.w, r21.x
                mul r17.w, r17.w, l(0.250000)
                mad r25.xyz, r17.wwww, r33.xyzx, r32.xyzx
                add_sat r20.x, -r20.x, l(1.000000)
                mul r21.x, r20.x, r20.x
                mul r21.x, r21.x, r21.x
                mul r20.x, r20.x, r21.x
                mul r17.w, r17.w, r20.x
                mad r33.xyz, r17.wwww, r33.xyzx, r31.xyzx
                movc r18.xyz, r20.yyyy, r24.xyzx, r18.xyzx
                movc r31.xyz, r20.yyyy, r33.xyzx, r31.xyzx
                movc r32.xyz, r20.yyyy, r25.xyzx, r32.xyzx
              endif 
            endif 
          endif 
          break 
          default 
          break 
        endswitch 
      endif 
    endif 
  endloop 
  mov r11.yzw, r18.xxyz
  mov r29.xyz, r31.xyzx
  mov r30.xyz, r32.xyzx
  iadd r9.w, r9.w, l(32)
endloop 
add r2.z, -r5.y, l(1.000000)
mul r2.w, r2.z, l(5.000000)
mad r4.w, r2.z, l(5.000000), l(-2.500000)
mul r4.w, r4.w, l(0.400000)
max r4.w, r4.w, l(0.000000)
mul r4.w, r4.w, l(100.000000)
mad r7.xy, -r2.zzzz, l(10.000000, 5.000000, 0.000000, 0.000000), l(6.857410, 7.085000, 0.000000, 0.000000)
exp r5.w, r7.x
mul r5.w, r5.w, r5.x
mul r5.w, r5.w, l(9.136810)
mul r7.x, r2.z, r2.w
mad r7.x, -r7.x, l(2.015905), r7.y
exp r7.x, r7.x
mul r7.x, r5.x, r7.x
mul r7.x, r7.x, l(9.708090)
max r5.w, r5.w, r7.x
max r5.w, r5.w, l(1.268160)
iadd r7.x, cb2[0].y, -cb2[58].x
and r7.y, r7.x, l(-32)
iadd r7.z, -r7.y, r7.x
and r7.w, cb2[0].y, l(-32)
iadd r8.x, -r7.w, cb2[0].y
mov r9.xy, l(0,0,0,0)
mov r10.w, l(0)
mov r13.yz, l(0,0,1.000000,0)
mov r14.xy, l(0,0,0,0)
mov r16.x, l(1.000000)
mov r17.xy, l(0,0,0,0)
mov r18.xy, l(0,0,0,0)
mov r19.xyzw, l(0,0,0,0)
mov r20.yzw, l(0,0,0,0)
mov r8.y, r7.y
loop 
  uge r8.z, r8.y, cb2[0].y
  breakc_nz r8.z
  ushr r9.z, r8.y, l(5)
  iadd r10.xyz, r9.xyzx, r15.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r8.z, r10.xyzw, t7.yzxw
  ieq r8.w, r7.y, r8.y
  bfi r9.z, r7.z, l(0), l(0), r8.z
  movc r8.z, r8.w, r9.z, r8.z
  ieq r8.w, r7.w, r8.y
  ubfe r9.z, r8.x, l(0), r8.z
  movc r8.z, r8.w, r9.z, r8.z
  iadd r8.w, r8.y, cb2[0].x
  mov r21.xyzw, r19.xyzw
  mov r22.xyz, r20.yzwy
  mov r9.z, r8.z
  loop 
    breakc_z r9.z
    firstbit_lo r9.w, r9.z
    ishl r10.x, l(1), r9.w
    and r10.y, r9.z, r10.x
    if_nz r10.y
      xor r9.z, r9.z, r10.x
      iadd r10.x, r8.w, r9.w
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r23.xyzw, r10.x, l(0), t11.xyzw
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r10.xy, r10.x, l(16), t11.xyxx
      add r23.xyz, r23.xyzx, -v6.xyzx
      mov r10.z, r23.w
      lt r10.xyz, |r23.xyzx|, r10.zxyz
      and r10.x, r10.y, r10.x
      and r10.x, r10.z, r10.x
      if_nz r10.x
        iadd r9.w, r8.y, r9.w
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r23.xyzw, r9.w, l(0), t15.wxyz
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r10.xy, r9.w, l(96), t15.xyxx
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r24.xyzw, r9.w, l(116), t15.zwxy
        add r25.xyz, -r23.yzwy, v6.xyzx
        and r10.z, r24.w, l(0x0000ffff)
        ubfe r11.x, l(6), l(25), r24.w
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r26.xyzw, r10.z, l(0), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r27.xyzw, r10.z, l(16), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r28.xyzw, r10.z, l(32), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r10.z, l(48), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r32.xyzw, r10.z, l(64), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r33.xyzw, r10.z, l(80), t16.xyzw
        dp3 r13.w, r26.xyzx, r25.xyzx
        add_sat r13.w, r26.w, r13.w
        dp3 r14.w, r27.xyzx, r25.xyzx
        add_sat r14.w, r27.w, r14.w
        mul r13.w, r13.w, r14.w
        dp3 r14.w, r28.xyzx, r25.xyzx
        add_sat r14.w, r28.w, r14.w
        mul r13.w, r13.w, r14.w
        dp3 r14.w, r31.xyzx, r25.xyzx
        add_sat r14.w, r31.w, r14.w
        mul r13.w, r13.w, r14.w
        dp3 r14.w, r32.xyzx, r25.xyzx
        add_sat r14.w, r32.w, r14.w
        mul r13.w, r13.w, r14.w
        dp3 r14.w, r33.xyzx, r25.xyzx
        add_sat r14.w, r33.w, r14.w
        mul r13.x, r13.w, r14.w
        and r13.w, r10.x, l(1)
        movc r13.xw, r13.wwww, r13.xxxy, r13.zzzx
        mov r14.w, r10.x
        mov r26.xy, r13.xwxx
        mov r15.w, l(1)
        loop 
          ige r16.z, r15.w, r11.x
          breakc_nz r16.z
          iadd r16.z, r10.z, r15.w
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r27.xyzw, r16.z, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r28.xyzw, r16.z, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r16.z, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r32.xyzw, r16.z, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r33.xyzw, r16.z, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r34.xyzw, r16.z, l(80), t16.xyzw
          dp3 r16.z, r27.xyzx, r25.xyzx
          add_sat r16.z, r27.w, r16.z
          mul r16.z, r16.z, r26.x
          dp3 r16.w, r28.xyzx, r25.xyzx
          add_sat r16.w, r28.w, r16.w
          mul r16.z, r16.w, r16.z
          dp3 r16.w, r31.xyzx, r25.xyzx
          add_sat r16.w, r31.w, r16.w
          mul r16.z, r16.w, r16.z
          dp3 r16.w, r32.xyzx, r25.xyzx
          add_sat r16.w, r32.w, r16.w
          mul r16.z, r16.w, r16.z
          dp3 r16.w, r33.xyzx, r25.xyzx
          add_sat r16.w, r33.w, r16.w
          mul r16.z, r16.w, r16.z
          dp3 r16.w, r34.xyzx, r25.xyzx
          add_sat r16.w, r34.w, r16.w
          mul r26.x, r16.w, r16.z
          ushr r17.w, r14.w, l(2)
          ubfe r18.w, l(1), l(2), r14.w
          and r23.w, r17.w, l(2)
          max r25.w, r26.x, r26.y
          mad r16.z, -r16.z, r16.w, l(1.000000)
          mul r16.z, r16.z, r26.y
          movc r16.y, r23.w, r16.z, r25.w
          movc r26.xy, r18.wwww, r26.xyxx, r16.xyxx
          iadd r15.w, r15.w, l(1)
          mov r14.w, r17.w
        endloop 
        mov_sat r26.y, r26.y
        mul r10.x, r10.y, r26.y
        lt r10.z, l(0.000000), r10.x
        if_nz r10.z
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r27.xyzw, r9.w, l(16), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r28.xyzw, r9.w, l(32), t15.yxwz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r31.xyzw, r9.w, l(48), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r32.xyzw, r9.w, l(64), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r33.xyzw, r9.w, l(80), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r34.xyzw, r9.w, l(132), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r35.xyzw, r9.w, l(148), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r36.xyzw, r9.w, l(164), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r37.xyzw, r9.w, l(180), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r38.xyzw, r9.w, l(196), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r39.xy, r9.w, l(212), t15.xyxx
          mad r22.z, r26.y, r10.y, r22.z
          mul r9.w, r24.z, r10.x
          mov r24.z, r34.z
          dp3 r10.x, r12.xyzx, r24.xyzx
          dp3 r10.y, r25.xyzx, r24.xyzx
          add r10.y, -r34.w, r10.y
          ge r10.z, r10.y, l(0.000000)
          max r10.y, r4.w, |r10.y|
          movc r10.y, r10.z, r10.y, -r10.y
          max r10.x, -r10.x, l(0.00000010)
          div r10.x, r10.y, r10.x
          min r10.x, |r10.x|, l(131072.000000)
          mov r34.z, r35.z
          dp3 r10.y, r12.xyzx, r34.xyzx
          dp3 r10.z, r25.xyzx, r34.xyzx
          add r10.z, -r35.w, r10.z
          ge r11.x, r10.z, l(0.000000)
          max r10.z, r4.w, |r10.z|
          movc r10.z, r11.x, r10.z, -r10.z
          max r10.y, -r10.y, l(0.00000010)
          div r10.y, r10.z, r10.y
          min r10.x, |r10.y|, r10.x
          mov r35.z, r36.z
          dp3 r10.y, r12.xyzx, r35.xyzx
          dp3 r10.z, r25.xyzx, r35.xyzx
          add r10.z, -r36.w, r10.z
          ge r11.x, r10.z, l(0.000000)
          max r10.z, r4.w, |r10.z|
          movc r10.z, r11.x, r10.z, -r10.z
          max r10.y, -r10.y, l(0.00000010)
          div r10.y, r10.z, r10.y
          min r10.x, |r10.y|, r10.x
          mov r36.z, r37.z
          dp3 r10.y, r12.xyzx, r36.xyzx
          dp3 r10.z, r25.xyzx, r36.xyzx
          add r10.z, -r37.w, r10.z
          ge r11.x, r10.z, l(0.000000)
          max r10.z, r4.w, |r10.z|
          movc r10.z, r11.x, r10.z, -r10.z
          max r10.y, -r10.y, l(0.00000010)
          div r10.y, r10.z, r10.y
          min r10.x, |r10.y|, r10.x
          mov r37.z, r38.x
          dp3 r10.y, r12.xyzx, r37.xyzx
          dp3 r10.z, r25.xyzx, r37.xyzx
          add r10.z, -r38.y, r10.z
          ge r11.x, r10.z, l(0.000000)
          max r10.z, r4.w, |r10.z|
          movc r10.z, r11.x, r10.z, -r10.z
          max r10.y, -r10.y, l(0.00000010)
          div r10.y, r10.z, r10.y
          min r10.x, |r10.y|, r10.x
          mov r39.zw, r38.zzzw
          dp3 r10.y, r12.zxyz, r39.xzwx
          dp3 r10.z, r25.zxyz, r39.xzwx
          add r10.z, -r39.y, r10.z
          ge r11.x, r10.z, l(0.000000)
          max r10.z, r4.w, |r10.z|
          movc r10.z, r11.x, r10.z, -r10.z
          max r10.y, -r10.y, l(0.00000010)
          div r10.y, r10.z, r10.y
          min r10.x, |r10.y|, r10.x
          mov r24.x, r31.w
          mov r24.yz, r32.zzwz
          add r16.yzw, r25.xxyz, r24.xxyz
          mad r16.yzw, r12.xxyz, r10.xxxx, r16.yyzw
          dp3 r10.y, r16.yzwy, r16.yzwy
          sqrt r10.y, r10.y
          div r10.x, r10.x, r10.y
          add r10.x, r10.x, r10.x
          sqrt r10.x, r10.x
          mad r10.x, r2.z, l(5.000000), r10.x
          add r10.x, r10.x, l(-0.844800)
          mov r23.y, r27.z
          mov r23.z, r28.x
          dp3 r34.x, r16.yzwy, r23.xyzx
          mov r24.xy, r27.xwxx
          mov r24.z, r28.w
          dp3 r34.y, r16.yzwy, r24.xyzx
          mov r28.x, r27.y
          dp3 r34.z, r16.yzwy, r28.xyzx
          ubfe r10.y, l(9), l(16), r24.w
          utof r34.w, r10.y
          sample_l_indexable(texturecubearray)(float,float,float,float) r10.xyz, r34.xyzw, t8.xyzw, s2, r10.x
          dp3 r27.x, r25.xyzx, r23.xyzx
          dp3 r27.y, r25.xyzx, r24.xyzx
          dp3 r27.z, r25.xyzx, r28.xyzx
          mad_sat r16.yzw, r27.xxyz, r31.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
          mov r32.z, r33.x
          mad r16.yzw, r16.yyzw, r32.xxyz, r33.yyzw
          dp3 r34.x, r3.xyzx, r23.xyzx
          dp3 r34.y, r3.xyzx, r24.xyzx
          dp3 r34.z, r3.xyzx, r28.xyzx
          lt r23.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r34.xyzx
          movc r14.z, r23.x, l(0), l(0.500000)
          add r24.xyz, r14.xyzx, r16.yzwy
          sample_l_indexable(texture3d)(float,float,float,float) r24.xyz, r24.xyzx, t17.xyzw, s4, l(0.000000)
          mul r25.xyz, r34.xyzx, r34.xyzx
          mul r25.xyz, r9.wwww, r25.xyzx
          movc r17.z, r23.y, l(0), l(0.500000)
          add r23.xyw, r16.yzyw, r17.xyxz
          sample_l_indexable(texture3d)(float,float,float,float) r23.xyw, r23.xywx, t18.xywz, s4, l(0.000000)
          mul r23.xyw, r25.yyyy, r23.xyxw
          mad r23.xyw, r24.xyxz, r25.xxxx, r23.xyxw
          movc r18.z, r23.z, l(0), l(0.500000)
          add r16.yzw, r16.yyzw, r18.xxyz
          sample_l_indexable(texture3d)(float,float,float,float) r16.yzw, r16.yzwy, t19.wxyz, s4, l(0.000000)
          mad r16.yzw, r16.yyzw, r25.zzzz, r23.xxyw
          sample_l_indexable(texturecubearray)(float,float,float,float) r23.xyz, r34.xyzw, t8.xyzw, s2, l(6.000000)
          mul r24.xyz, r16.yzwy, r23.xyzx
          dp3 r11.x, r24.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
          mad r21.xyz, r16.yzwy, r23.xyzx, r21.xyzx
          mul r13.x, r5.w, r11.x
          mul r10.xyz, r9.wwww, r10.xyzx
          dp3 r9.w, r10.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
          mad r9.w, r5.w, r11.x, r9.w
          div r9.w, r13.x, r9.w
          mov r23.x, r21.w
          mov r23.yz, r22.xxyx
          mad r22.xyw, r10.yzyx, r9.wwww, r23.yzyx
          mov r21.w, r22.w
        endif 
      endif 
    endif 
  endloop 
  mov r19.xyzw, r21.xyzw
  mov r20.yzw, r22.xxyz
  iadd r8.y, r8.y, l(32)
endloop 
lt r7.w, r20.w, l(1.000000)
if_nz r7.w
  mov r8.xy, l(0,0,0,0)
  mov r9.w, l(0)
  mov r10.yz, l(0,0,1.000000,0)
  mov r13.xy, l(0,0,0,0)
  mov r14.x, l(1.000000)
  mov r16.xy, l(0,0,0,0)
  mov r17.xy, l(0,0,0,0)
  mov r18.x, r19.w
  mov r18.yzw, r20.yyzw
  mov r21.xyz, r19.xyzx
  mov r7.w, r20.w
  mov r8.w, l(0)
  loop 
    uge r10.w, r8.w, r7.x
    breakc_nz r10.w
    ushr r8.z, r8.w, l(5)
    iadd r9.xyz, r8.xyzx, r15.xyzx
    ld_indexable(texture2darray)(uint,uint,uint,uint) r8.z, r9.xyzw, t7.yzxw
    ieq r9.x, r7.y, r8.w
    ubfe r9.y, r7.z, l(0), r8.z
    movc r8.z, r9.x, r9.y, r8.z
    iadd r9.x, r8.w, cb2[0].x
    mov r22.xyzw, r18.xyzw
    mov r23.xyz, r21.xyzx
    mov r9.y, r7.w
    mov r9.z, r8.z
    loop 
      breakc_z r9.z
      firstbit_lo r10.w, r9.z
      ishl r11.x, l(1), r10.w
      and r13.w, r9.z, r11.x
      if_nz r13.w
        xor r9.z, r9.z, r11.x
        iadd r11.x, r9.x, r10.w
        ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r24.xyzw, r11.x, l(0), t11.xyzw
        ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r25.xy, r11.x, l(16), t11.xyxx
        add r24.xyz, r24.xyzx, -v6.xyzx
        mov r25.z, r24.w
        lt r24.xyz, |r24.xyzx|, r25.zxyz
        and r11.x, r24.y, r24.x
        and r11.x, r24.z, r11.x
        if_nz r11.x
          iadd r10.w, r8.w, r10.w
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r24.xyzw, r10.w, l(0), t15.wxyz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r14.zw, r10.w, l(96), t15.xxxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r25.xyzw, r10.w, l(116), t15.zwxy
          add r26.xyz, -r24.yzwy, v6.xyzx
          and r11.x, r25.w, l(0x0000ffff)
          ubfe r13.w, l(6), l(25), r25.w
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r27.xyzw, r11.x, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r28.xyzw, r11.x, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r11.x, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r32.xyzw, r11.x, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r33.xyzw, r11.x, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r34.xyzw, r11.x, l(80), t16.xyzw
          dp3 r15.w, r27.xyzx, r26.xyzx
          add_sat r15.w, r27.w, r15.w
          dp3 r16.w, r28.xyzx, r26.xyzx
          add_sat r16.w, r28.w, r16.w
          mul r15.w, r15.w, r16.w
          dp3 r16.w, r31.xyzx, r26.xyzx
          add_sat r16.w, r31.w, r16.w
          mul r15.w, r15.w, r16.w
          dp3 r16.w, r32.xyzx, r26.xyzx
          add_sat r16.w, r32.w, r16.w
          mul r15.w, r15.w, r16.w
          dp3 r16.w, r33.xyzx, r26.xyzx
          add_sat r16.w, r33.w, r16.w
          mul r15.w, r15.w, r16.w
          dp3 r16.w, r34.xyzx, r26.xyzx
          add_sat r16.w, r34.w, r16.w
          mul r10.x, r15.w, r16.w
          and r15.w, r14.z, l(1)
          movc r27.xy, r15.wwww, r10.xyxx, r10.zxzz
          mov r10.x, r14.z
          mov r28.xy, r27.xyxx
          mov r15.w, l(1)
          loop 
            ige r16.w, r15.w, r13.w
            breakc_nz r16.w
            iadd r16.w, r11.x, r15.w
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r16.w, l(0), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r32.xyzw, r16.w, l(16), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r33.xyzw, r16.w, l(32), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r34.xyzw, r16.w, l(48), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r35.xyzw, r16.w, l(64), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r36.xyzw, r16.w, l(80), t16.xyzw
            dp3 r16.w, r31.xyzx, r26.xyzx
            add_sat r16.w, r31.w, r16.w
            mul r16.w, r16.w, r28.x
            dp3 r17.w, r32.xyzx, r26.xyzx
            add_sat r17.w, r32.w, r17.w
            mul r16.w, r16.w, r17.w
            dp3 r17.w, r33.xyzx, r26.xyzx
            add_sat r17.w, r33.w, r17.w
            mul r16.w, r16.w, r17.w
            dp3 r17.w, r34.xyzx, r26.xyzx
            add_sat r17.w, r34.w, r17.w
            mul r16.w, r16.w, r17.w
            dp3 r17.w, r35.xyzx, r26.xyzx
            add_sat r17.w, r35.w, r17.w
            mul r16.w, r16.w, r17.w
            dp3 r17.w, r36.xyzx, r26.xyzx
            add_sat r17.w, r36.w, r17.w
            mul r28.x, r16.w, r17.w
            ushr r21.w, r10.x, l(2)
            ubfe r23.w, l(1), l(2), r10.x
            and r24.w, r21.w, l(2)
            max r26.w, r28.x, r28.y
            mad r16.w, -r16.w, r17.w, l(1.000000)
            mul r16.w, r16.w, r28.y
            movc r14.y, r24.w, r16.w, r26.w
            movc r28.xy, r23.wwww, r28.xyxx, r14.xyxx
            iadd r15.w, r15.w, l(1)
            mov r10.x, r21.w
          endloop 
          add_sat r10.x, -r9.y, r28.y
          mul r11.x, r14.w, r10.x
          lt r13.w, l(0.000000), r11.x
          if_nz r13.w
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r27.xyzw, r10.w, l(16), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r31.xyzw, r10.w, l(32), t15.yxwz
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r32.xyzw, r10.w, l(48), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r33.xyzw, r10.w, l(64), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r34.xyzw, r10.w, l(80), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r35.xyzw, r10.w, l(132), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r36.xyzw, r10.w, l(148), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r37.xyzw, r10.w, l(164), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r38.xyzw, r10.w, l(180), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r39.xyzw, r10.w, l(196), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r40.xy, r10.w, l(212), t15.xyxx
            mad r22.w, r10.x, r14.w, r22.w
            mul r10.x, r25.z, r11.x
            mov r25.z, r35.z
            dp3 r10.w, r12.xyzx, r25.xyzx
            dp3 r11.x, r26.xyzx, r25.xyzx
            add r11.x, -r35.w, r11.x
            ge r13.w, r11.x, l(0.000000)
            max r11.x, r4.w, |r11.x|
            movc r11.x, r13.w, r11.x, -r11.x
            max r10.w, -r10.w, l(0.00000010)
            div r10.w, r11.x, r10.w
            min r10.w, |r10.w|, l(131072.000000)
            mov r35.z, r36.z
            dp3 r11.x, r12.xyzx, r35.xyzx
            dp3 r13.w, r26.xyzx, r35.xyzx
            add r13.w, -r36.w, r13.w
            ge r14.y, r13.w, l(0.000000)
            max r13.w, r4.w, |r13.w|
            movc r13.w, r14.y, r13.w, -r13.w
            max r11.x, -r11.x, l(0.00000010)
            div r11.x, r13.w, r11.x
            min r10.w, r10.w, |r11.x|
            mov r36.z, r37.z
            dp3 r11.x, r12.xyzx, r36.xyzx
            dp3 r13.w, r26.xyzx, r36.xyzx
            add r13.w, -r37.w, r13.w
            ge r14.y, r13.w, l(0.000000)
            max r13.w, r4.w, |r13.w|
            movc r13.w, r14.y, r13.w, -r13.w
            max r11.x, -r11.x, l(0.00000010)
            div r11.x, r13.w, r11.x
            min r10.w, r10.w, |r11.x|
            mov r37.z, r38.z
            dp3 r11.x, r12.xyzx, r37.xyzx
            dp3 r13.w, r26.xyzx, r37.xyzx
            add r13.w, -r38.w, r13.w
            ge r14.y, r13.w, l(0.000000)
            max r13.w, r4.w, |r13.w|
            movc r13.w, r14.y, r13.w, -r13.w
            max r11.x, -r11.x, l(0.00000010)
            div r11.x, r13.w, r11.x
            min r10.w, r10.w, |r11.x|
            mov r38.z, r39.x
            dp3 r11.x, r12.xyzx, r38.xyzx
            dp3 r13.w, r26.xyzx, r38.xyzx
            add r13.w, -r39.y, r13.w
            ge r14.y, r13.w, l(0.000000)
            max r13.w, r4.w, |r13.w|
            movc r13.w, r14.y, r13.w, -r13.w
            max r11.x, -r11.x, l(0.00000010)
            div r11.x, r13.w, r11.x
            min r10.w, r10.w, |r11.x|
            mov r40.zw, r39.zzzw
            dp3 r11.x, r12.zxyz, r40.xzwx
            dp3 r13.w, r26.zxyz, r40.xzwx
            add r13.w, -r40.y, r13.w
            ge r14.y, r13.w, l(0.000000)
            max r13.w, r4.w, |r13.w|
            movc r13.w, r14.y, r13.w, -r13.w
            max r11.x, -r11.x, l(0.00000010)
            div r11.x, r13.w, r11.x
            min r10.w, r10.w, |r11.x|
            mov r25.x, r32.w
            mov r25.yz, r33.zzwz
            add r14.yzw, r26.xxyz, r25.xxyz
            mad r14.yzw, r12.xxyz, r10.wwww, r14.yyzw
            dp3 r11.x, r14.yzwy, r14.yzwy
            sqrt r11.x, r11.x
            div r10.w, r10.w, r11.x
            add r10.w, r10.w, r10.w
            sqrt r10.w, r10.w
            mad r10.w, r2.z, l(5.000000), r10.w
            add r10.w, r10.w, l(-0.844800)
            mov r24.y, r27.z
            mov r24.z, r31.x
            dp3 r35.x, r14.yzwy, r24.xyzx
            mov r25.xy, r27.xwxx
            mov r25.z, r31.w
            dp3 r35.y, r14.yzwy, r25.xyzx
            mov r31.x, r27.y
            dp3 r35.z, r14.yzwy, r31.xyzx
            ubfe r11.x, l(9), l(16), r25.w
            utof r35.w, r11.x
            sample_l_indexable(texturecubearray)(float,float,float,float) r14.yzw, r35.xyzw, t8.wxyz, s2, r10.w
            dp3 r27.x, r26.xyzx, r24.xyzx
            dp3 r27.y, r26.xyzx, r25.xyzx
            dp3 r27.z, r26.xyzx, r31.xyzx
            mad_sat r26.xyz, r27.xyzx, r32.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
            mov r33.z, r34.x
            mad r26.xyz, r26.xyzx, r33.xyzx, r34.yzwy
            dp3 r35.x, r3.xyzx, r24.xyzx
            dp3 r35.y, r3.xyzx, r25.xyzx
            dp3 r35.z, r3.xyzx, r31.xyzx
            lt r24.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r35.xyzx
            movc r13.z, r24.x, l(0), l(0.500000)
            add r25.xyz, r13.xyzx, r26.xyzx
            sample_l_indexable(texture3d)(float,float,float,float) r25.xyz, r25.xyzx, t17.xyzw, s4, l(0.000000)
            mul r27.xyz, r35.xyzx, r35.xyzx
            mul r27.xyz, r10.xxxx, r27.xyzx
            movc r16.z, r24.y, l(0), l(0.500000)
            add r24.xyw, r16.xyxz, r26.xyxz
            sample_l_indexable(texture3d)(float,float,float,float) r24.xyw, r24.xywx, t18.xywz, s4, l(0.000000)
            mul r24.xyw, r27.yyyy, r24.xyxw
            mad r24.xyw, r25.xyxz, r27.xxxx, r24.xyxw
            movc r17.z, r24.z, l(0), l(0.500000)
            add r25.xyz, r17.xyzx, r26.xyzx
            sample_l_indexable(texture3d)(float,float,float,float) r25.xyz, r25.xyzx, t19.xyzw, s4, l(0.000000)
            mad r24.xyz, r25.xyzx, r27.zzzz, r24.xywx
            sample_l_indexable(texturecubearray)(float,float,float,float) r25.xyz, r35.xyzw, t8.xyzw, s2, l(6.000000)
            mul r26.xyz, r24.xyzx, r25.xyzx
            dp3 r10.w, r26.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
            mad r23.xyz, r24.xyzx, r25.xyzx, r23.xyzx
            mul r11.x, r5.w, r10.w
            mul r14.yzw, r10.xxxx, r14.yyzw
            dp3 r10.x, r14.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
            mad r10.x, r5.w, r10.w, r10.x
            div r10.x, r11.x, r10.x
            mad r22.xyz, r14.yzwy, r10.xxxx, r22.xyzx
          endif 
        endif 
      endif 
    endloop 
    mov r18.xyzw, r22.xyzw
    mov r21.xyz, r23.xyzx
    iadd r8.w, r8.w, l(32)
  endloop 
  mov r20.xyzw, r18.zxyw
  mov r19.xyz, r21.xyzx
  mov r20.xyzw, r20.yzxw
else 
  mov r20.x, r19.w
endif 
max r2.z, r20.w, l(1.000000)
rcp r2.z, r2.z
mov_sat r20.w, r20.w
mul r7.xyz, r2.zzzz, r19.xyzx
mul r8.xyz, r2.zzzz, r20.xyzx
lt r4.w, r20.w, l(0.990000)
if_nz r4.w
  add r4.w, -r20.w, l(1.000000)
  mul r5.w, r4.w, cb2[19].x
  add r9.xyz, v6.xyzx, -cb2[35].xyzx
  mul r10.x, r9.x, cb2[35].w
  mul r10.yz, r9.yyzy, cb2[36].xxyx
  add_sat r9.xyz, r10.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r10.xy, r9.xyxx, cb2[36].zwzz
  mul r10.z, r9.z, cb2[37].x
  add r9.xyz, r10.xyzx, cb2[37].yzwy
  lt r10.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r3.xyzx
  movc r10.xyz, r10.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r10.w, l(0)
  add r13.xyz, r9.xyzx, r10.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r13.xyzx, t17.xyzw, s4, l(0.000000)
  mul r14.xyz, r3.xyzx, r3.xyzx
  mul r14.xyz, r5.wwww, r14.xyzx
  add r15.xyz, r9.xyzx, r10.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r15.xyz, r15.xyzx, t18.xyzw, s4, l(0.000000)
  mul r15.xyz, r14.yyyy, r15.xyzx
  mad r13.xyz, r13.xyzx, r14.xxxx, r15.xyzx
  add r9.xyz, r9.xyzx, r10.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r9.xyz, r9.xyzx, t19.xyzw, s4, l(0.000000)
  mad r9.xyz, r9.xyzx, r14.zzzz, r13.xyzx
  mov r3.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r3.xyz, r3.xyzw, t8.xyzw, s2, l(6.000000)
  mul r3.xyz, r3.xyzx, r9.xyzx
  dp3 r3.w, r3.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r7.xyz, r19.xyzx, r2.zzzz, r3.xyzx
  mov r12.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r3.xyz, r12.xyzw, t8.xyzw, s2, r2.w
  mad r2.z, cb2[19].x, r4.w, -r3.w
  mad r2.z, r5.y, r2.z, r3.w
  mad r8.xyz, r3.xyzx, r2.zzzz, r8.xyzx
endif 
mad r3.xyz, r7.xyzx, r2.xxxx, r11.yzwy
mad r2.zw, r5.xxxy, l(0.000000, 0.000000, 0.984375, 0.984375), l(0.000000, 0.000000, 0.00781250, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r2.zw, r2.zwzz, t5.zwxy, s2, l(0.000000)
mul r5.xyw, r2.xxxx, r8.xyxz
mad r7.xyz, r5.xywx, r2.zzzz, r29.xyzx
mad r2.xzw, r5.xxyw, r2.wwww, r30.xxyz
mul r5.xyw, r7.xyxz, l(0.960000, 0.960000, 0.000000, 0.960000)
mad r2.xzw, r2.xxzw, l(0.040000, 0.000000, 0.040000, 0.040000), r5.xxyw
mad r0.xyz, r3.xyzx, r0.xyzx, r2.xzwx
ftoi r3.xy, v0.xyxx
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.x, r3.xyzw, t0.xyzw
ge r2.z, r2.x, l(0.984375)
mul r2.w, r2.x, l(1.01587307)
mad r2.x, r2.x, l(64.000000), l(-63.000000)
movc r2.x, r2.z, r2.x, r2.w
max r2.x, r2.x, l(0.00000001)
rcp r2.x, r2.x
eq r2.z, cb0[16].y, l(0.000000)
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[16].y
movc r2.z, r2.z, l(60000.000000), r2.w
add r2.x, -r2.y, r2.x
mul_sat r2.x, r2.z, r2.x
lt r2.y, r2.x, l(1.000000)
if_nz r2.y
  sample_indexable(texture2d)(float,float,float,float) r2.y, v1.yzyy, t38.xwyz, s1
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.yzyy, t46.xyzw, s1
  mul r3.xyz, r3.wwww, r3.xyzx
  mad r0.w, r0.w, v1.x, -r2.y
  mad r0.w, r2.x, r0.w, r2.y
  add r7.xyzw, -r3.xyzw, r6.xyzw
  mad r6.xyzw, r2.xxxx, r7.xyzw, r3.xyzw
  add r2.x, r2.x, l(0.200000)
  min r2.x, r2.x, l(1.000000)
  mul r1.w, r0.w, r2.x
endif 
dp3 r0.w, r0.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
max r0.w, r0.w, l(0.000100)
max r0.w, r0.w, cb1[85].x
mul r0.w, r0.w, cb0[15].x
mad r0.xyz, r6.xyzx, r0.wwww, r0.xyzx
div_sat r0.w, r0.w, cb1[85].x
mul r0.w, r6.w, r0.w
sample_indexable(texture2d)(float,float,float,float) r2.x, v7.xyxx, t37.xyzw, s1
mul r2.yzw, r4.xxyz, cb1[85].xxxx
mad_sat r0.w, r0.w, r5.z, r1.w
mul r0.w, r0.w, cb0[16].x
mul r0.w, r2.x, r0.w
mad r0.xyz, -r4.xyzx, cb1[85].xxxx, r0.xyzx
mad r0.xyz, r0.wwww, r0.xyzx, r2.yzwy
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, v6.xyzx, v6.xyzx
  rsq r2.x, r0.w
  mul r2.xyz, r2.xxxx, v6.xyzx
  sqrt r0.w, r0.w
  lt r2.w, l(0.000000), cb2[13].w
  if_nz r2.w
    mad r3.xy, r0.wwww, cb2[15].xyxx, cb2[14].zwzz
    mul r3.xy, r3.xyxx, cb2[16].xyxx
    lt r2.w, l(0.010000), |v6.z|
    mul r3.zw, v6.zzzz, cb2[15].zzzw
    mul r4.xy, r3.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r4.xy, r4.xyxx
    add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r3.zw, r4.xxxy, r3.zzzw
    mul r3.zw, r3.zzzw, r3.xxxy
    movc r3.xy, r2.wwww, r3.zwzz, r3.xyxx
    mul r3.xzw, r3.xxxx, cb2[12].xxyz
    exp r3.xzw, r3.xxzw
    mul r4.xyz, r3.yyyy, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xzwx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xzwx
  else 
    mad r2.w, r0.w, cb2[15].x, cb2[14].z
    mul r2.w, r2.w, cb2[16].x
    lt r3.w, l(0.010000), |v6.z|
    mul r4.x, v6.z, cb2[15].z
    mul r4.y, r4.x, l(-1.442695)
    exp r4.y, r4.y
    add r4.y, -r4.y, l(1.000000)
    div r4.x, r4.y, r4.x
    mul r4.x, r2.w, r4.x
    movc r2.w, r3.w, r4.x, r2.w
    mul r4.xyz, r2.wwww, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r2.x, cb2[7].yzwy, -r2.xyzx
  mad r2.y, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.z, cb2[8].w, -r2.x, l(1.000000)
  mul r2.z, r2.z, r2.z
  mul r2.z, r2.z, l(12.566371)
  div r2.y, r2.y, r2.z
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r2.y
  mov_sat r2.x, r2.x
  mad r2.x, r2.x, r2.x, l(1.000000)
  mad r2.x, r2.x, l(0.05968310), l(-1.000000)
  mad r2.x, cb2[8].z, r2.x, l(1.000000)
  mul r2.yzw, r0.wwww, cb2[11].xxyz
  mad r2.xyz, r2.xxxx, cb2[10].xyzx, r2.yzwy
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, v6.z, cb2[6].x
  mad r2.w, cb2[6].x, v6.z, cb2[5].x
  lt r3.x, |r0.w|, l(0.000100)
  min r3.y, r2.w, l(64.000000)
  mul r3.y, r3.y, l(1.442695)
  exp r3.y, r3.y
  mov_sat r3.z, cb2[6].z
  lt r3.w, r2.w, l(0.000000)
  add r2.w, r2.w, l(1.000000)
  movc r2.w, r3.w, r3.y, r2.w
  add r2.w, r2.w, -cb2[6].z
  movc r0.w, r3.x, l(1.000000), r0.w
  div r0.w, r2.w, r0.w
  movc r0.w, r3.x, r3.z, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r2.w, v6.xyzx, v6.xyzx
  sqrt r3.x, r2.w
  mad r0.w, r0.w, r3.x, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r2.w, r2.w
  mul r3.xyz, r2.wwww, v6.xyzx
  dp3 r2.w, cb2[7].yzwy, r3.xyzx
  mad_sat r2.w, cb2[8].y, r2.w, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r2.wwww, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyz, r2.xyzx, cb1[85].yyyy
ge r2.xyz, r0.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r0.xyz, r0.xyzx, r2.xyzx
min r0.xyz, r0.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
max r2.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r1.xyz, r1.wwww, r2.xyzx
and r0.w, r1.w, l(0x7f800000)
ieq r0.w, r0.w, l(0x7f800000)
eq r3.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
and r3.xy, r3.zwzz, r3.xyxx
and r2.w, r3.y, r3.x
or r0.w, r0.w, r2.w
if_z r0.w
  ftou r3.xy, v0.xyxx
  imm_atomic_iadd r4.x, u6, r3.xyxx, l(1)
  and r3.zw, r4.xxxx, l(0, 0, 0x0000ffff, 0x0000ffff)
  ult r0.w, r3.w, cb2[58].z
  if_nz r0.w
    max r0.w, r1.z, r1.y
    max r0.w, r0.w, r1.x
    mov r0.w, |r0.w|
    and r0.w, r0.w, l(0x7f800000)
    iadd r0.w, r0.w, l(0x00800000)
    mad r2.xyz, r2.xyzx, r1.wwww, r0.wwww
    ubfe r2.x, l(8), l(15), r2.x
    ushr r2.yz, r2.yyzy, l(0, 15, 15, 0)
    bfi r2.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r2.yyzy, l(0, 0, 0, 0)
    iadd r2.x, r2.y, r2.x
    iadd r2.x, r2.z, r2.x
    ishl r0.w, r0.w, l(1)
    iadd r2.xzw, r0.wwww, r2.xxxx
    mov_sat r0.w, r1.w
    mul r0.w, r0.w, l(2046.000000)
    ftou r0.w, r0.w
    ishl r4.x, v0.z, l(2)
    and r0.w, r0.w, l(2046)
    bfi r2.y, l(11), l(0), r0.w, r4.x
    store_uav_typed u7.xyzw, r3.xyzw, r2.xyzw
    mov r0.w, l(-1)
  else 
    mov r0.w, l(0)
  endif 
else 
  mov r0.w, l(-1)
endif 
mul r1.xyz, r1.wwww, r0.xyzx
movc o0.xyzw, r0.wwww, l(0,0,0,0), r1.xyzw
ret 
// Approximately 1972 instruction slots used
