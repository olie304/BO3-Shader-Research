//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:19 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4
//   float probeDebugRadius;            // Offset:  868 Size:     4
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 44
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
ishl r0.x, cb2[57].x, l(4)
iadd r0.x, r0.x, vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r0.w, r1.xyww, t4.yzwx
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
utof r4.xy, r1.xyxx
add r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ge r5.x, r0.w, l(0.984375)
mul r5.z, r0.w, l(1.01587307)
mad r0.w, r0.w, l(64.000000), l(-63.000000)
movc r0.w, r5.x, r0.w, r5.z
max r0.w, r0.w, l(0.00000001)
rcp r5.y, r0.w
and r0.zw, r0.zzzz, r5.xxxy
mul r5.xy, r4.zwzz, cb1[44].zwzz
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.xyxx, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r5.xyzw, r5.xyxx, t28.xyzw, s4.x
mul r7.xy, r4.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
frc r7.xy, r7.xyxx
add r7.zw, -r7.yyyx, l(0.000000, 0.000000, 1.000000, 1.000000)
mul r8.xyzw, r7.zzwy, r7.xwyx
dp4 r7.x, r6.xyzw, r8.xyzw
add r5.xyzw, -r0.wwww, r5.xyzw
min r7.y, |r5.w|, |r5.z|
min r7.y, |r5.y|, r7.y
min r7.y, |r5.x|, r7.y
max r7.z, |r5.w|, |r5.z|
max r7.z, |r5.y|, r7.z
max r5.x, |r5.x|, r7.z
eq r5.yzw, |r5.yyzw|, r7.yyyy
movc r5.y, r5.y, r6.y, r6.x
movc r5.y, r5.z, r6.z, r5.y
movc r5.y, r5.w, r6.w, r5.y
mul r5.z, r0.w, l(0.010000)
lt r5.x, r5.z, r5.x
movc r5.x, r5.x, r5.y, r7.x
mul r3.z, r3.z, r5.x
if_nz cb2[55].x
  mul r5.x, r3.z, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r5.xxxx
  ret 
else 
  movc r5.x, cb2[54].w, r3.z, l(1.000000)
endif 
ge r3.z, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.yzw, r1.xyww, t0.wxyz
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
add r1.zw, r4.zzzw, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r10.x, r1.z, cb1[12].x
mul r10.y, r1.w, cb1[13].y
mov r10.z, l(1.000000)
mul r10.xyz, r0.wwww, r10.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.w, r2.w, l(3.000000), l(0.500000)
ftou r0.w, r0.w
mad r1.zw, r2.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.850000, 0.850000)
dp2 r2.x, r1.zwzz, r1.zwzz
add r11.zw, -r2.xxxx, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.x, r11.z
mul r11.xy, r1.zwzz, r2.xxxx
and r12.xyzw, r0.wwww, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.w, r12.w, r12.z
movc r12.z, r0.w, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.w, r3.z, l(-0.500000), l(-0.00146628)
add r0.w, r0.w, r2.z
mul_sat r2.y, r0.w, l(2.00982332)
dp3 r0.w, -r10.xyzx, -r10.xyzx
rsq r0.w, r0.w
mul r12.xyz, r0.wwww, -r10.xyzx
dp2 r0.w, r4.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r4.x, r13.x, r0.w
utof r1.zw, r1.yyyx
dp2 r0.w, r1.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.w, r0.w
mul r0.w, r0.w, l(52.982918)
frc r0.w, r0.w
mad r0.w, r0.w, l(6.28318548), cb1[70].w
sincos r14.x, r15.x, r0.w
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r0.w, -r12.xyzx, r11.xyzx
add r0.w, r0.w, r0.w
mad r16.xyz, r11.xyzx, -r0.wwww, -r12.xyzx
mul r0.w, r2.y, l(17.000000)
exp r0.w, r0.w
add r0.w, r0.w, l(2.000000)
div r0.w, l(2.000000), r0.w
sqrt r1.z, r0.w
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r2.zw, r2.zzzw
ieq r2.zw, r1.xxxy, r2.zzzw
and r1.w, r2.w, r2.z
add r2.z, -r2.y, l(1.000000)
mul r2.w, r2.z, l(5.000000)
mad r4.z, r2.z, l(5.000000), l(-2.500000)
mul r4.z, r4.z, l(0.400000)
max r4.z, r4.z, l(0.000000)
mad r14.yz, -r2.zzzz, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r4.w, r14.y
mul r4.w, r2.x, r4.w
mul r4.zw, r4.zzzw, l(0.000000, 0.000000, 100.000000, 9.136810)
mul r6.w, r2.z, r2.w
mad r6.w, -r6.w, l(2.015905), r14.z
exp r6.w, r6.w
mul r6.w, r2.x, r6.w
mul r6.w, r6.w, l(9.708090)
max r4.w, r4.w, r6.w
max r4.w, r4.w, l(1.268160)
if_nz cb2[54].x
  ftou r6.w, cb1[44].x
  iadd r6.w, r6.w, l(7)
  ushr r6.w, r6.w, l(3)
  imad r6.w, r0.y, r6.w, r0.x
  bfi r6.w, l(27), l(5), r6.w, l(16)
  mov r17.xyzw, l(0,0,0,0)
  mov r18.xyzw, l(0,0,0,0)
  mov r19.xyzw, l(0,0,0,0)
  mov r20.xyzw, l(0,0,0,0)
  mov r21.xyzw, l(0,0,0,0)
  mov r22.xyzw, l(0,0,0,0)
  mov r23.xyzw, l(0,0,0,0)
  mov r24.xyzw, l(0,0,0,0)
  mov r25.xyzw, l(0,0,0,0)
  mov r26.xyzw, l(0,0,0,0)
  mov r27.xyzw, l(0,0,0,0)
  mov r14.yzw, l(0,0,0,0)
  mov r15.yz, l(0,0,0,0)
  mov r7.w, l(0)
  mov r28.z, l(0)
  mov r29.z, l(0)
  mov r8.w, l(0)
  mov r9.w, l(0)
  loop 
    uge r12.w, r9.w, cb2[0].y
    breakc_nz r12.w
    ushr r12.w, r9.w, l(5)
    iadd r12.w, r6.w, r12.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.w, r12.w, l(0), t26.xxxx
    mov r30.xyzw, r17.yxzw
    mov r31.xyzw, r18.xyzw
    mov r32.xyzw, r19.yzwx
    mov r33.xyzw, r20.xyzw
    mov r34.xyzw, r21.xyzw
    mov r35.xyzw, r22.zwxy
    mov r36.xyzw, r23.zwxy
    mov r37.xyzw, r25.zwxy
    mov r38.xyzw, r26.zwxy
    mov r39.xyz, r14.yzwy
    mov r40.xy, r15.zyzz
    mov r13.w, r7.w
    mov r15.w, r28.z
    mov r28.w, r29.z
    mov r29.w, r8.w
    mov r41.xyzw, r24.zwxy
    mov r42.xyzw, r27.zwxy
    mov r39.w, r12.w
    loop 
      breakc_z r39.w
      firstbit_lo r40.z, r39.w
      ishl r40.w, l(1), r40.z
      not r40.w, r40.w
      and r39.w, r39.w, r40.w
      iadd r40.z, r9.w, r40.z
      imul null, r40.z, r40.z, l(14)
      add r43.xyz, r10.xyzx, -cb10[r40.z + 0].xyzx
      dp3 r40.w, r43.xyzx, r43.xyzx
      sqrt r40.w, r40.w
      ge r40.w, cb2[54].y, r40.w
      if_nz r40.w
        mov r30.yzw, cb10[r40.z + 1].xxyz
        mov r30.x, cb10[r40.z + 0].w
        mov r31.yzw, cb10[r40.z + 2].xxyz
        mov r31.x, cb10[r40.z + 1].w
        mov r32.xyz, cb10[r40.z + 3].xyzx
        mov r32.w, cb10[r40.z + 4].z
        mov r33.yz, cb10[r40.z + 4].xxyx
        mov r33.x, cb10[r40.z + 3].w
        mov r33.w, cb10[r40.z + 6].x
        mov r34.yzw, cb10[r40.z + 5].xxyz
        mov r34.x, cb10[r40.z + 4].w
        mov r35.yz, cb10[r40.z + 7].yywy
        mov r35.x, cb10[r40.z + 6].y
        mov r35.w, cb10[r40.z + 8].x
        mov r36.xyz, cb10[r40.z + 8].yzwy
        mov r36.w, cb10[r40.z + 9].x
        mov r37.xyz, cb10[r40.z + 10].yzwy
        mov r37.w, cb10[r40.z + 11].x
        mov r38.xyz, cb10[r40.z + 11].yzwy
        mov r38.w, cb10[r40.z + 12].x
        mov r39.xyz, cb10[r40.z + 0].xyzx
        mov r43.xy, cb10[r40.z + 13].yzyy
        mov r13.w, l(-1)
        mov r15.w, cb10[r40.z + 2].w
        mov r28.w, cb10[r40.z + 5].w
        mov r29.w, cb10[r40.z + 7].z
        mov r41.xyz, cb10[r40.z + 9].yzwy
        mov r41.w, cb10[r40.z + 10].x
        mov r42.xyz, cb10[r40.z + 12].yzwy
        mov r42.w, cb10[r40.z + 13].x
        mov r40.xy, r43.xyxx
        break 
      endif 
    endloop 
    if_nz r13.w
      mov r17.xyzw, r30.yxzw
      mov r18.xyzw, r31.xyzw
      mov r19.xyzw, r32.wxyz
      mov r20.xyzw, r33.xyzw
      mov r21.xyzw, r34.xyzw
      mov r22.xyzw, r35.zwxy
      mov r23.xyzw, r36.zwxy
      mov r24.xyzw, r41.zwxy
      mov r25.xyzw, r37.zwxy
      mov r26.xyzw, r38.zwxy
      mov r27.xyzw, r42.zwxy
      mov r14.yzw, r39.xxyz
      mov r15.yz, r40.yyxy
      mov r7.w, l(-1)
      mov r28.z, r15.w
      mov r29.z, r28.w
      mov r8.w, r29.w
      break 
    endif 
    iadd r9.w, r9.w, l(32)
    mov r17.xyzw, r30.yxzw
    mov r18.xyzw, r31.xyzw
    mov r19.xyzw, r32.wxyz
    mov r20.xyzw, r33.xyzw
    mov r21.xyzw, r34.xyzw
    mov r22.xyzw, r35.zwxy
    mov r23.xyzw, r36.zwxy
    mov r25.xyzw, r37.zwxy
    mov r26.xyzw, r38.zwxy
    mov r14.yzw, r39.xxyz
    mov r15.yz, r40.yyxy
    mov r7.w, r13.w
    mov r28.z, r15.w
    mov r29.z, r28.w
    mov r8.w, r29.w
    mov r24.xyzw, r41.zwxy
    mov r27.xyzw, r42.zwxy
  endloop 
  mov r30.xy, r17.ywyy
  mov r28.x, r17.z
  mov r17.yz, r18.xxwx
  mov r28.y, r18.y
  mov r30.z, r18.z
  mov r18.xyz, r19.yzwy
  mov r19.yz, r21.xxyx
  mov r29.xy, r21.zwzz
  mov r21.xy, r22.zwzz
  mov r22.z, r23.z
  mov r23.z, r24.z
  mov r24.z, r25.z
  mov r25.z, r26.z
  mov r26.z, r27.z
  mov r27.z, r15.z
else 
  mov r7.w, l(0)
endif 
if_nz r7.w
  if_nz r1.w
    add r31.yzw, r14.yyzw, cb1[24].xxyz
    mov r31.x, l(16)
    store_structured u2.xyzw, cb2[52].x, l(880), r31.xyzw
  endif 
  add r14.yzw, r10.xxyz, -r14.yyzw
  and r6.w, r8.w, l(0x0000ffff)
  ubfe r9.w, l(6), l(25), r8.w
  imul null, r12.w, r6.w, l(6)
  dp3 r13.w, cb11[r12.w + 0].xyzx, r14.yzwy
  add_sat r13.w, r13.w, cb11[r12.w + 0].w
  dp3 r15.z, cb11[r12.w + 1].xyzx, r14.yzwy
  add_sat r15.z, r15.z, cb11[r12.w + 1].w
  mul r13.w, r13.w, r15.z
  dp3 r15.z, cb11[r12.w + 2].xyzx, r14.yzwy
  add_sat r15.z, r15.z, cb11[r12.w + 2].w
  mul r13.w, r13.w, r15.z
  dp3 r15.z, cb11[r12.w + 3].xyzx, r14.yzwy
  add_sat r15.z, r15.z, cb11[r12.w + 3].w
  mul r13.w, r13.w, r15.z
  dp3 r15.z, cb11[r12.w + 4].xyzx, r14.yzwy
  add_sat r15.z, r15.z, cb11[r12.w + 4].w
  mul r13.w, r13.w, r15.z
  dp3 r15.z, cb11[r12.w + 5].xyzx, r14.yzwy
  add_sat r12.w, r15.z, cb11[r12.w + 5].w
  mul r31.x, r12.w, r13.w
  and r12.w, r20.w, l(1)
  mov r31.yz, l(0,0,1.000000,0)
  movc r15.zw, r12.wwww, r31.xxxy, r31.zzzx
  mov r31.x, l(1.000000)
  mov r12.w, r20.w
  mov r32.xy, r15.zwzz
  mov r13.w, l(1)
  loop 
    ige r17.w, r13.w, r9.w
    breakc_nz r17.w
    iadd r17.w, r6.w, r13.w
    imul null, r17.w, r17.w, l(6)
    dp3 r18.w, cb11[r17.w + 0].xyzx, r14.yzwy
    add_sat r18.w, r18.w, cb11[r17.w + 0].w
    mul r18.w, r18.w, r32.x
    dp3 r19.w, cb11[r17.w + 1].xyzx, r14.yzwy
    add_sat r19.w, r19.w, cb11[r17.w + 1].w
    mul r18.w, r18.w, r19.w
    dp3 r19.w, cb11[r17.w + 2].xyzx, r14.yzwy
    add_sat r19.w, r19.w, cb11[r17.w + 2].w
    mul r18.w, r18.w, r19.w
    dp3 r19.w, cb11[r17.w + 3].xyzx, r14.yzwy
    add_sat r19.w, r19.w, cb11[r17.w + 3].w
    mul r18.w, r18.w, r19.w
    dp3 r19.w, cb11[r17.w + 4].xyzx, r14.yzwy
    add_sat r19.w, r19.w, cb11[r17.w + 4].w
    mul r18.w, r18.w, r19.w
    dp3 r19.w, cb11[r17.w + 5].xyzx, r14.yzwy
    add_sat r17.w, r19.w, cb11[r17.w + 5].w
    mul r32.x, r17.w, r18.w
    ushr r19.w, r12.w, l(2)
    ubfe r21.z, l(1), l(2), r12.w
    and r21.w, r19.w, l(2)
    max r22.w, r32.x, r32.y
    mad r17.w, -r18.w, r17.w, l(1.000000)
    mul r17.w, r17.w, r32.y
    movc r31.y, r21.w, r17.w, r22.w
    movc r32.xy, r21.zzzz, r32.xyxx, r31.xyxx
    iadd r13.w, r13.w, l(1)
    mov r12.w, r19.w
  endloop 
  mov_sat r32.y, r32.y
  mul r31.w, r21.x, r32.y
  lt r6.w, l(0.000000), r31.w
  if_nz r6.w
    if_nz r1.w
      ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r6.w, cb2[52].x, l(880), u2.xxxx
      or r6.w, r6.w, l(32)
      store_structured u2.x, cb2[52].x, l(880), r6.w
      store_structured u2.x, cb2[52].x, l(896), r31.w
    endif 
    mul r6.w, r21.y, r31.w
    dp3 r9.w, r16.xyzx, r22.xyzx
    dp3 r12.w, r14.yzwy, r22.xyzx
    add r12.w, -r23.w, r12.w
    ge r13.w, r12.w, l(0.000000)
    max r12.w, r4.z, |r12.w|
    movc r12.w, r13.w, r12.w, -r12.w
    max r9.w, -r9.w, l(0.00000010)
    div r9.w, r12.w, r9.w
    min r9.w, |r9.w|, l(131072.000000)
    dp3 r12.w, r16.xyzx, r23.xyzx
    dp3 r13.w, r14.yzwy, r23.xyzx
    add r13.w, -r24.w, r13.w
    ge r15.z, r13.w, l(0.000000)
    max r13.w, r4.z, |r13.w|
    movc r13.w, r15.z, r13.w, -r13.w
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.w, r12.w
    min r9.w, r9.w, |r12.w|
    dp3 r12.w, r16.xyzx, r24.xyzx
    dp3 r13.w, r14.yzwy, r24.xyzx
    add r13.w, -r25.w, r13.w
    ge r15.z, r13.w, l(0.000000)
    max r13.w, r4.z, |r13.w|
    movc r13.w, r15.z, r13.w, -r13.w
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.w, r12.w
    min r9.w, r9.w, |r12.w|
    dp3 r12.w, r16.xyzx, r25.xyzx
    dp3 r13.w, r14.yzwy, r25.xyzx
    add r13.w, -r26.w, r13.w
    ge r15.z, r13.w, l(0.000000)
    max r13.w, r4.z, |r13.w|
    movc r13.w, r15.z, r13.w, -r13.w
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.w, r12.w
    min r9.w, r9.w, |r12.w|
    dp3 r12.w, r16.xyzx, r26.xyzx
    dp3 r13.w, r14.yzwy, r26.xyzx
    add r13.w, -r27.w, r13.w
    ge r15.z, r13.w, l(0.000000)
    max r13.w, r4.z, |r13.w|
    movc r13.w, r15.z, r13.w, -r13.w
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.w, r12.w
    min r9.w, r9.w, |r12.w|
    dp3 r12.w, r16.xyzx, r27.xyzx
    dp3 r13.w, r14.yzwy, r27.xyzx
    add r13.w, -r15.y, r13.w
    ge r15.y, r13.w, l(0.000000)
    max r13.w, r4.z, |r13.w|
    movc r13.w, r15.y, r13.w, -r13.w
    max r12.w, -r12.w, l(0.00000010)
    div r12.w, r13.w, r12.w
    min r9.w, r9.w, |r12.w|
    add r15.yzw, r14.yyzw, r20.xxyz
    mad r15.yzw, r16.xxyz, r9.wwww, r15.yyzw
    dp3 r12.w, r15.yzwy, r15.yzwy
    sqrt r12.w, r12.w
    div r9.w, r9.w, r12.w
    add r9.w, r9.w, r9.w
    sqrt r9.w, r9.w
    mad r9.w, r2.z, l(5.000000), r9.w
    add r9.w, r9.w, l(-0.844800)
    dp3 r20.x, r15.yzwy, r30.xyzx
    dp3 r20.y, r15.yzwy, r17.xyzx
    dp3 r20.z, r15.yzwy, r28.xyzx
    ubfe r8.w, l(9), l(16), r8.w
    utof r20.w, r8.w
    sample_l_indexable(texturecubearray)(float,float,float,float) r15.yzw, r20.xyzw, t8.wxyz, s2, r9.w
    and r21.xyz, r15.yzwy, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r21.xyz, r21.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r8.w, r21.y, r21.x
    or r8.w, r21.z, r8.w
    movc r15.yzw, r8.wwww, l(0,1.000000,1.000000,0), r15.yyzw
    dp3 r21.x, r14.yzwy, r30.xyzx
    dp3 r21.y, r14.yzwy, r17.xyzx
    dp3 r21.z, r14.yzwy, r28.xyzx
    mad_sat r14.yzw, r21.xxyz, r18.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    mad r14.yzw, r14.yyzw, r19.xxyz, r29.xxyz
    dp3 r20.x, r11.xyzx, r30.xyzx
    dp3 r20.y, r11.xyzx, r17.xyzx
    dp3 r20.z, r11.xyzx, r28.xyzx
    lt r17.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r20.xyzx
    movc r18.z, r17.x, l(0), l(0.500000)
    mov r18.xy, l(0,0,0,0)
    add r18.xyz, r14.yzwy, r18.xyzx
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t17.xyzw, s4, l(0.000000)
    mul r19.xyz, r20.xyzx, r20.xyzx
    mul r19.xyz, r6.wwww, r19.xyzx
    movc r21.z, r17.y, l(0), l(0.500000)
    mov r21.xy, l(0,0,0,0)
    add r17.xyw, r14.yzyw, r21.xyxz
    sample_l_indexable(texture3d)(float,float,float,float) r17.xyw, r17.xywx, t18.xywz, s4, l(0.000000)
    mul r17.xyw, r19.yyyy, r17.xyxw
    mad r17.xyw, r18.xyxz, r19.xxxx, r17.xyxw
    movc r18.z, r17.z, l(0), l(0.500000)
    mov r18.xy, l(0,0,0,0)
    add r14.yzw, r14.yyzw, r18.xxyz
    sample_l_indexable(texture3d)(float,float,float,float) r14.yzw, r14.yzwy, t19.wxyz, s4, l(0.000000)
    mad r14.yzw, r14.yyzw, r19.zzzz, r17.xxyw
    sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r20.xyzw, t8.xyzw, s2, l(6.000000)
    and r18.xyz, r17.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
    ieq r18.xyz, r18.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
    or r8.w, r18.y, r18.x
    or r8.w, r18.z, r8.w
    movc r17.xyz, r8.wwww, l(1.000000,1.000000,0,0), r17.xyzx
    mul r14.yzw, r14.yyzw, r17.xxyz
    dp3 r8.w, r14.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mul r9.w, r4.w, r8.w
    mul r14.yzw, r6.wwww, r15.yyzw
    dp3 r6.w, r14.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r6.w, r4.w, r8.w, r6.w
    div r6.w, r9.w, r6.w
    mul r31.xyz, r6.wwww, r14.yzwy
    mov r6.w, l(257)
  else 
    mov r31.xyzw, l(0,0,0,0)
    mov r6.w, l(1)
  endif 
  mov r8.w, l(-1)
else 
  mov r31.xyzw, l(0,0,0,0)
  mov r6.w, l(0)
endif 
and r7.w, r7.w, r8.w
if_z r7.w
  iadd r7.w, cb2[0].y, -cb2[58].x
  ftou r8.w, cb1[44].x
  iadd r8.w, r8.w, l(7)
  ushr r8.w, r8.w, l(3)
  imad r8.w, r0.y, r8.w, r0.x
  bfi r8.w, l(27), l(5), r8.w, l(16)
  and r9.w, r7.w, l(-32)
  iadd r12.w, r7.w, -r9.w
  and r13.w, cb2[0].y, l(-32)
  iadd r14.y, -r13.w, cb2[0].y
  mov r17.x, l(16)
  mov r18.yz, l(0,0,1.000000,0)
  mov r19.xy, l(0,0,0,0)
  mov r20.xz, l(1.000000,0,1.000000,0)
  mov r21.xy, l(0,0,0,0)
  mov r22.xy, l(0,0,0,0)
  mov r23.xyz, l(0,0,0,0)
  mov r23.w, r31.x
  mov r24.xyz, r31.yzwy
  mov r24.w, r6.w
  mov r14.z, r9.w
  loop 
    uge r14.w, r14.z, cb2[0].y
    breakc_nz r14.w
    ushr r14.w, r14.z, l(5)
    iadd r14.w, r8.w, r14.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t26.xxxx
    ieq r15.y, r9.w, r14.z
    bfi r15.z, r12.w, l(0), l(0), r14.w
    movc r14.w, r15.y, r15.z, r14.w
    ieq r15.y, r13.w, r14.z
    ubfe r15.z, r14.y, l(0), r14.w
    movc r14.w, r15.y, r15.z, r14.w
    mov r25.xyzw, r23.xyzw
    mov r26.xyzw, r24.xyzw
    mov r15.y, r14.w
    loop 
      breakc_z r15.y
      firstbit_lo r15.z, r15.y
      ishl r15.w, l(1), r15.z
      not r15.w, r15.w
      and r15.y, r15.w, r15.y
      iadd r15.z, r14.z, r15.z
      imul null, r15.z, r15.z, l(14)
      and r15.w, r26.w, l(255)
      ult r18.w, r15.w, l(32)
      and r18.w, r1.w, r18.w
      if_nz r18.w
        imad r15.w, r15.w, l(20), l(880)
        add r17.yzw, cb1[24].xxyz, cb10[r15.z + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r15.w, r17.xyzw
      endif 
      iadd r27.w, r26.w, l(1)
      add r17.yzw, r10.xxyz, -cb10[r15.z + 0].xxyz
      and r15.w, l(0x0000ffff), cb10[r15.z + 7].z
      ubfe r18.w, l(6), l(25), cb10[r15.z + 7].z
      imul null, r19.w, r15.w, l(6)
      dp3 r21.w, cb11[r19.w + 0].xyzx, r17.yzwy
      add_sat r21.w, r21.w, cb11[r19.w + 0].w
      dp3 r22.w, cb11[r19.w + 1].xyzx, r17.yzwy
      add_sat r22.w, r22.w, cb11[r19.w + 1].w
      mul r21.w, r21.w, r22.w
      dp3 r22.w, cb11[r19.w + 2].xyzx, r17.yzwy
      add_sat r22.w, r22.w, cb11[r19.w + 2].w
      mul r21.w, r21.w, r22.w
      dp3 r22.w, cb11[r19.w + 3].xyzx, r17.yzwy
      add_sat r22.w, r22.w, cb11[r19.w + 3].w
      mul r21.w, r21.w, r22.w
      dp3 r22.w, cb11[r19.w + 4].xyzx, r17.yzwy
      add_sat r22.w, r22.w, cb11[r19.w + 4].w
      mul r21.w, r21.w, r22.w
      dp3 r22.w, cb11[r19.w + 5].xyzx, r17.yzwy
      add_sat r19.w, r22.w, cb11[r19.w + 5].w
      mul r18.x, r19.w, r21.w
      and r19.w, l(1), cb10[r15.z + 6].x
      movc r28.xy, r19.wwww, r18.xyxx, r18.zxzz
      mov r18.x, cb10[r15.z + 6].x
      mov r29.xy, r28.xyxx
      mov r19.w, l(1)
      loop 
        ige r21.w, r19.w, r18.w
        breakc_nz r21.w
        iadd r21.w, r15.w, r19.w
        imul null, r21.w, r21.w, l(6)
        dp3 r22.w, cb11[r21.w + 0].xyzx, r17.yzwy
        add_sat r22.w, r22.w, cb11[r21.w + 0].w
        mul r22.w, r22.w, r29.x
        dp3 r28.z, cb11[r21.w + 1].xyzx, r17.yzwy
        add_sat r28.z, r28.z, cb11[r21.w + 1].w
        mul r22.w, r22.w, r28.z
        dp3 r28.z, cb11[r21.w + 2].xyzx, r17.yzwy
        add_sat r28.z, r28.z, cb11[r21.w + 2].w
        mul r22.w, r22.w, r28.z
        dp3 r28.z, cb11[r21.w + 3].xyzx, r17.yzwy
        add_sat r28.z, r28.z, cb11[r21.w + 3].w
        mul r22.w, r22.w, r28.z
        dp3 r28.z, cb11[r21.w + 4].xyzx, r17.yzwy
        add_sat r28.z, r28.z, cb11[r21.w + 4].w
        mul r22.w, r22.w, r28.z
        dp3 r28.z, cb11[r21.w + 5].xyzx, r17.yzwy
        add_sat r21.w, r28.z, cb11[r21.w + 5].w
        mul r29.x, r21.w, r22.w
        ushr r28.z, r18.x, l(2)
        ubfe r28.w, l(1), l(2), r18.x
        and r29.z, r28.z, l(2)
        max r29.w, r29.x, r29.y
        mad r21.w, -r22.w, r21.w, l(1.000000)
        mul r21.w, r21.w, r29.y
        movc r20.y, r29.z, r21.w, r29.w
        movc r29.xy, r28.wwww, r29.xyxx, r20.xyxx
        iadd r19.w, r19.w, l(1)
        mov r18.x, r28.z
      endloop 
      mov_sat r29.y, r29.y
      mul r15.w, r29.y, cb10[r15.z + 6].y
      lt r18.x, l(0.000000), r15.w
      if_nz r18.x
        and r18.x, r27.w, l(255)
        iadd r18.w, r18.x, l(-1)
        ult r18.w, r18.w, l(32)
        and r18.w, r1.w, r18.w
        if_nz r18.w
          imad r18.xw, r18.xxxx, l(20, 0, 0, 20), l(860, 0, 0, 876)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r19.w, cb2[52].x, r18.x, u2.xxxx
          or r19.w, r19.w, l(32)
          store_structured u2.x, cb2[52].x, r18.x, r19.w
          store_structured u2.x, cb2[52].x, r18.w, r15.w
        endif 
        iadd r26.w, r26.w, l(257)
        mad r26.z, r29.y, cb10[r15.z + 6].y, r26.z
        mul r15.w, r15.w, cb10[r15.z + 7].y
        mov r28.x, cb10[r15.z + 7].w
        mov r28.yz, cb10[r15.z + 8].xxyx
        dp3 r18.x, r16.xyzx, r28.xyzx
        dp3 r18.w, r17.yzwy, r28.xyzx
        add r18.w, r18.w, -cb10[r15.z + 8].z
        ge r19.w, r18.w, l(0.000000)
        max r18.w, r4.z, |r18.w|
        movc r18.w, r19.w, r18.w, -r18.w
        max r18.x, -r18.x, l(0.00000010)
        div r18.x, r18.w, r18.x
        min r18.x, |r18.x|, l(131072.000000)
        mov r28.x, cb10[r15.z + 8].w
        mov r28.yz, cb10[r15.z + 9].xxyx
        dp3 r18.w, r16.xyzx, r28.xyzx
        dp3 r19.w, r17.yzwy, r28.xyzx
        add r19.w, r19.w, -cb10[r15.z + 9].z
        ge r20.y, r19.w, l(0.000000)
        max r19.w, r4.z, |r19.w|
        movc r19.w, r20.y, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r18.x, |r18.w|, r18.x
        mov r28.x, cb10[r15.z + 9].w
        mov r28.yz, cb10[r15.z + 10].xxyx
        dp3 r18.w, r16.xyzx, r28.xyzx
        dp3 r19.w, r17.yzwy, r28.xyzx
        add r19.w, r19.w, -cb10[r15.z + 10].z
        ge r20.y, r19.w, l(0.000000)
        max r19.w, r4.z, |r19.w|
        movc r19.w, r20.y, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r18.x, |r18.w|, r18.x
        mov r28.x, cb10[r15.z + 10].w
        mov r28.yz, cb10[r15.z + 11].xxyx
        dp3 r18.w, r16.xyzx, r28.xyzx
        dp3 r19.w, r17.yzwy, r28.xyzx
        add r19.w, r19.w, -cb10[r15.z + 11].z
        ge r20.y, r19.w, l(0.000000)
        max r19.w, r4.z, |r19.w|
        movc r19.w, r20.y, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r18.x, |r18.w|, r18.x
        mov r28.x, cb10[r15.z + 11].w
        mov r28.yz, cb10[r15.z + 12].xxyx
        dp3 r18.w, r16.xyzx, r28.xyzx
        dp3 r19.w, r17.yzwy, r28.xyzx
        add r19.w, r19.w, -cb10[r15.z + 12].z
        ge r20.y, r19.w, l(0.000000)
        max r19.w, r4.z, |r19.w|
        movc r19.w, r20.y, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r18.x, |r18.w|, r18.x
        mov r28.x, cb10[r15.z + 12].w
        mov r28.yz, cb10[r15.z + 13].xxyx
        dp3 r18.w, r16.xyzx, r28.xyzx
        dp3 r19.w, r17.yzwy, r28.xyzx
        add r19.w, r19.w, -cb10[r15.z + 13].z
        ge r20.y, r19.w, l(0.000000)
        max r19.w, r4.z, |r19.w|
        movc r19.w, r20.y, r19.w, -r19.w
        max r18.w, -r18.w, l(0.00000010)
        div r18.w, r19.w, r18.w
        min r18.x, |r18.w|, r18.x
        add r28.x, r17.y, cb10[r15.z + 3].w
        add r28.yz, r17.zzwz, cb10[r15.z + 4].xxyx
        mad r28.xyz, r16.xyzx, r18.xxxx, r28.xyzx
        dp3 r18.w, r28.xyzx, r28.xyzx
        sqrt r18.w, r18.w
        div r18.x, r18.x, r18.w
        add r18.x, r18.x, r18.x
        sqrt r18.x, r18.x
        mad r18.x, r2.z, l(5.000000), r18.x
        add r18.x, r18.x, l(-0.844800)
        mov r30.x, cb10[r15.z + 0].w
        mov r30.y, cb10[r15.z + 1].z
        mov r30.z, cb10[r15.z + 2].y
        dp3 r32.x, r28.xyzx, r30.xyzx
        mov r33.xy, cb10[r15.z + 1].xwxx
        mov r33.z, cb10[r15.z + 2].z
        dp3 r32.y, r28.xyzx, r33.xyzx
        mov r34.x, cb10[r15.z + 1].y
        mov r34.yz, cb10[r15.z + 2].xxwx
        dp3 r32.z, r28.xyzx, r34.xyzx
        ubfe r18.w, l(9), l(16), cb10[r15.z + 7].z
        utof r32.w, r18.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r28.xyz, r32.xyzw, t8.xyzw, s2, r18.x
        and r29.xzw, r28.xxyz, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
        ieq r29.xzw, r29.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
        or r18.x, r29.z, r29.x
        or r18.x, r29.w, r18.x
        movc r28.xyz, r18.xxxx, l(1.000000,1.000000,0,0), r28.xyzx
        dp3 r35.x, r17.yzwy, r30.xyzx
        dp3 r35.y, r17.yzwy, r33.xyzx
        dp3 r35.z, r17.yzwy, r34.xyzx
        mad_sat r17.yzw, r35.xxyz, cb10[r15.z + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r35.xy, r17.yzyy, cb10[r15.z + 4].zwzz
        mul r35.z, r17.w, cb10[r15.z + 5].x
        add r17.yzw, r35.xxyz, cb10[r15.z + 5].yyzw
        dp3 r32.x, r11.xyzx, r30.xyzx
        dp3 r32.y, r11.xyzx, r33.xyzx
        dp3 r32.z, r11.xyzx, r34.xyzx
        lt r29.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r32.xxyz
        movc r19.z, r29.x, l(0), l(0.500000)
        add r30.xyz, r17.yzwy, r19.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r30.xyz, r30.xyzx, t17.xyzw, s4, l(0.000000)
        mul r33.xyz, r32.xyzx, r32.xyzx
        mul r33.xyz, r15.wwww, r33.xyzx
        movc r21.z, r29.z, l(0), l(0.500000)
        add r34.xyz, r17.yzwy, r21.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r34.xyz, r34.xyzx, t18.xyzw, s4, l(0.000000)
        mul r34.xyz, r33.yyyy, r34.xyzx
        mad r30.xyz, r30.xyzx, r33.xxxx, r34.xyzx
        movc r22.z, r29.w, l(0), l(0.500000)
        add r17.yzw, r17.yyzw, r22.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r17.yzw, r17.yzwy, t19.wxyz, s4, l(0.000000)
        mad r17.yzw, r17.yyzw, r33.zzzz, r30.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r29.xzw, r32.xyzw, t8.xwyz, s2, l(6.000000)
        and r30.xyz, r29.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r30.xyz, r30.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r15.z, r30.y, r30.x
        or r15.z, r30.z, r15.z
        movc r29.xzw, r15.zzzz, l(1.000000,0,1.000000,0), r29.xxzw
        mul r30.xyz, r17.yzwy, r29.xzwx
        dp3 r15.z, r30.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r25.xyz, r17.yzwy, r29.xzwx, r25.xyzx
        mul r17.y, r4.w, r15.z
        mul r28.xyz, r15.wwww, r28.xyzx
        dp3 r15.w, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r15.z, r4.w, r15.z, r15.w
        div r15.z, r17.y, r15.z
        mov r30.x, r25.w
        mov r30.yz, r26.xxyx
        mad r17.yzw, r28.xxyz, r15.zzzz, r30.xxyz
        mov r25.w, r17.y
        mov r26.xy, r17.zwzz
      else 
        mov r27.xyz, r26.xyzx
        mov r26.xyzw, r27.xyzw
      endif 
    endloop 
    mov r23.xyzw, r25.xyzw
    mov r24.xyzw, r26.xyzw
    iadd r14.z, r14.z, l(32)
  endloop 
  mov r17.x, l(16)
  mov r18.yz, l(0,0,1.000000,0)
  mov r19.xy, l(0,0,0,0)
  mov r21.xy, l(0,0,0,0)
  mov r22.xy, l(0,0,0,0)
  mov r14.yzw, r23.xxyz
  mov r25.x, r23.w
  mov r25.yz, r24.xxyx
  mov r15.yzw, r24.zzwz
  mov r13.w, l(0)
  loop 
    uge r18.w, r13.w, r7.w
    breakc_nz r18.w
    ushr r18.w, r13.w, l(5)
    iadd r18.w, r8.w, r18.w
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r18.w, r18.w, l(0), t26.xxxx
    ieq r19.w, r9.w, r13.w
    ubfe r20.x, r12.w, l(0), r18.w
    movc r18.w, r19.w, r20.x, r18.w
    mov r26.xyz, r14.yzwy
    mov r27.xyz, r25.xyzx
    mov r28.xyz, r15.ywzy
    mov r19.w, r18.w
    loop 
      breakc_z r19.w
      firstbit_lo r20.x, r19.w
      ishl r20.y, l(1), r20.x
      not r20.y, r20.y
      and r19.w, r19.w, r20.y
      iadd r20.x, r13.w, r20.x
      imul null, r20.x, r20.x, l(14)
      and r20.y, r28.z, l(255)
      ult r21.w, r20.y, l(32)
      and r21.w, r1.w, r21.w
      if_nz r21.w
        imad r20.y, r20.y, l(20), l(880)
        add r17.yzw, cb1[24].xxyz, cb10[r20.x + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r20.y, r17.xyzw
      endif 
      iadd r29.y, r28.z, l(1)
      add r17.yzw, r10.xxyz, -cb10[r20.x + 0].xxyz
      and r20.y, l(0x0000ffff), cb10[r20.x + 7].z
      ubfe r21.w, l(6), l(25), cb10[r20.x + 7].z
      imul null, r22.w, r20.y, l(6)
      dp3 r25.w, cb11[r22.w + 0].xyzx, r17.yzwy
      add_sat r25.w, r25.w, cb11[r22.w + 0].w
      dp3 r26.w, cb11[r22.w + 1].xyzx, r17.yzwy
      add_sat r26.w, r26.w, cb11[r22.w + 1].w
      mul r25.w, r25.w, r26.w
      dp3 r26.w, cb11[r22.w + 2].xyzx, r17.yzwy
      add_sat r26.w, r26.w, cb11[r22.w + 2].w
      mul r25.w, r25.w, r26.w
      dp3 r26.w, cb11[r22.w + 3].xyzx, r17.yzwy
      add_sat r26.w, r26.w, cb11[r22.w + 3].w
      mul r25.w, r25.w, r26.w
      dp3 r26.w, cb11[r22.w + 4].xyzx, r17.yzwy
      add_sat r26.w, r26.w, cb11[r22.w + 4].w
      mul r25.w, r25.w, r26.w
      dp3 r26.w, cb11[r22.w + 5].xyzx, r17.yzwy
      add_sat r22.w, r26.w, cb11[r22.w + 5].w
      mul r18.x, r22.w, r25.w
      and r22.w, l(1), cb10[r20.x + 6].x
      movc r29.zw, r22.wwww, r18.xxxy, r18.zzzx
      mov r18.x, cb10[r20.x + 6].x
      mov r30.xy, r29.zwzz
      mov r22.w, l(1)
      loop 
        ige r25.w, r22.w, r21.w
        breakc_nz r25.w
        iadd r25.w, r20.y, r22.w
        imul null, r25.w, r25.w, l(6)
        dp3 r26.w, cb11[r25.w + 0].xyzx, r17.yzwy
        add_sat r26.w, r26.w, cb11[r25.w + 0].w
        mul r26.w, r26.w, r30.x
        dp3 r27.w, cb11[r25.w + 1].xyzx, r17.yzwy
        add_sat r27.w, r27.w, cb11[r25.w + 1].w
        mul r26.w, r26.w, r27.w
        dp3 r27.w, cb11[r25.w + 2].xyzx, r17.yzwy
        add_sat r27.w, r27.w, cb11[r25.w + 2].w
        mul r26.w, r26.w, r27.w
        dp3 r27.w, cb11[r25.w + 3].xyzx, r17.yzwy
        add_sat r27.w, r27.w, cb11[r25.w + 3].w
        mul r26.w, r26.w, r27.w
        dp3 r27.w, cb11[r25.w + 4].xyzx, r17.yzwy
        add_sat r27.w, r27.w, cb11[r25.w + 4].w
        mul r26.w, r26.w, r27.w
        dp3 r27.w, cb11[r25.w + 5].xyzx, r17.yzwy
        add_sat r25.w, r27.w, cb11[r25.w + 5].w
        mul r30.x, r25.w, r26.w
        ushr r27.w, r18.x, l(2)
        ubfe r28.w, l(1), l(2), r18.x
        and r30.z, r27.w, l(2)
        max r30.w, r30.x, r30.y
        mad r25.w, -r26.w, r25.w, l(1.000000)
        mul r25.w, r25.w, r30.y
        movc r20.w, r30.z, r25.w, r30.w
        movc r30.xy, r28.wwww, r30.xyxx, r20.zwzz
        iadd r22.w, r22.w, l(1)
        mov r18.x, r27.w
      endloop 
      add_sat r18.x, -r28.y, r30.y
      mul r20.y, r18.x, cb10[r20.x + 6].y
      lt r20.w, l(0.000000), r20.y
      if_nz r20.w
        and r20.w, r29.y, l(255)
        iadd r21.w, r20.w, l(-1)
        ult r21.w, r21.w, l(32)
        and r21.w, r1.w, r21.w
        if_nz r21.w
          imad r29.zw, r20.wwww, l(0, 0, 20, 20), l(0, 0, 860, 876)
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r20.w, cb2[52].x, r29.z, u2.xxxx
          or r20.w, r20.w, l(32)
          store_structured u2.x, cb2[52].x, r29.z, r20.w
          store_structured u2.x, cb2[52].x, r29.w, r20.y
        endif 
        iadd r28.z, r28.z, l(257)
        mad r28.x, r18.x, cb10[r20.x + 6].y, r28.x
        mul r18.x, r20.y, cb10[r20.x + 7].y
        mov r32.x, cb10[r20.x + 7].w
        mov r32.yz, cb10[r20.x + 8].xxyx
        dp3 r20.y, r16.xyzx, r32.xyzx
        dp3 r20.w, r17.yzwy, r32.xyzx
        add r20.w, r20.w, -cb10[r20.x + 8].z
        ge r21.w, r20.w, l(0.000000)
        max r20.w, r4.z, |r20.w|
        movc r20.w, r21.w, r20.w, -r20.w
        max r20.y, -r20.y, l(0.00000010)
        div r20.y, r20.w, r20.y
        min r20.y, |r20.y|, l(131072.000000)
        mov r32.x, cb10[r20.x + 8].w
        mov r32.yz, cb10[r20.x + 9].xxyx
        dp3 r20.w, r16.xyzx, r32.xyzx
        dp3 r21.w, r17.yzwy, r32.xyzx
        add r21.w, r21.w, -cb10[r20.x + 9].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r4.z, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r20.y, |r20.w|, r20.y
        mov r32.x, cb10[r20.x + 9].w
        mov r32.yz, cb10[r20.x + 10].xxyx
        dp3 r20.w, r16.xyzx, r32.xyzx
        dp3 r21.w, r17.yzwy, r32.xyzx
        add r21.w, r21.w, -cb10[r20.x + 10].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r4.z, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r20.y, |r20.w|, r20.y
        mov r32.x, cb10[r20.x + 10].w
        mov r32.yz, cb10[r20.x + 11].xxyx
        dp3 r20.w, r16.xyzx, r32.xyzx
        dp3 r21.w, r17.yzwy, r32.xyzx
        add r21.w, r21.w, -cb10[r20.x + 11].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r4.z, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r20.y, |r20.w|, r20.y
        mov r32.x, cb10[r20.x + 11].w
        mov r32.yz, cb10[r20.x + 12].xxyx
        dp3 r20.w, r16.xyzx, r32.xyzx
        dp3 r21.w, r17.yzwy, r32.xyzx
        add r21.w, r21.w, -cb10[r20.x + 12].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r4.z, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r20.y, |r20.w|, r20.y
        mov r32.x, cb10[r20.x + 12].w
        mov r32.yz, cb10[r20.x + 13].xxyx
        dp3 r20.w, r16.xyzx, r32.xyzx
        dp3 r21.w, r17.yzwy, r32.xyzx
        add r21.w, r21.w, -cb10[r20.x + 13].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r4.z, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r20.w, -r20.w, l(0.00000010)
        div r20.w, r21.w, r20.w
        min r20.y, |r20.w|, r20.y
        add r32.x, r17.y, cb10[r20.x + 3].w
        add r32.yz, r17.zzwz, cb10[r20.x + 4].xxyx
        mad r30.xzw, r16.xxyz, r20.yyyy, r32.xxyz
        dp3 r20.w, r30.xzwx, r30.xzwx
        sqrt r20.w, r20.w
        div r20.y, r20.y, r20.w
        add r20.y, r20.y, r20.y
        sqrt r20.y, r20.y
        mad r20.y, r2.z, l(5.000000), r20.y
        add r20.y, r20.y, l(-0.844800)
        mov r32.x, cb10[r20.x + 0].w
        mov r32.y, cb10[r20.x + 1].z
        mov r32.z, cb10[r20.x + 2].y
        dp3 r33.x, r30.xzwx, r32.xyzx
        mov r34.xy, cb10[r20.x + 1].xwxx
        mov r34.z, cb10[r20.x + 2].z
        dp3 r33.y, r30.xzwx, r34.xyzx
        mov r35.x, cb10[r20.x + 1].y
        mov r35.yz, cb10[r20.x + 2].xxwx
        dp3 r33.z, r30.xzwx, r35.xyzx
        ubfe r20.w, l(9), l(16), cb10[r20.x + 7].z
        utof r33.w, r20.w
        sample_l_indexable(texturecubearray)(float,float,float,float) r30.xzw, r33.xyzw, t8.xwyz, s2, r20.y
        and r36.xyz, r30.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r36.xyz, r36.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r20.y, r36.y, r36.x
        or r20.y, r36.z, r20.y
        movc r30.xzw, r20.yyyy, l(1.000000,0,1.000000,0), r30.xxzw
        dp3 r36.x, r17.yzwy, r32.xyzx
        dp3 r36.y, r17.yzwy, r34.xyzx
        dp3 r36.z, r17.yzwy, r35.xyzx
        mad_sat r17.yzw, r36.xxyz, cb10[r20.x + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
        mul r36.xy, r17.yzyy, cb10[r20.x + 4].zwzz
        mul r36.z, r17.w, cb10[r20.x + 5].x
        add r17.yzw, r36.xxyz, cb10[r20.x + 5].yyzw
        dp3 r33.x, r11.xyzx, r32.xyzx
        dp3 r33.y, r11.xyzx, r34.xyzx
        dp3 r33.z, r11.xyzx, r35.xyzx
        lt r20.xyw, l(0.000000, 0.000000, 0.000000, 0.000000), r33.xyxz
        movc r19.z, r20.x, l(0), l(0.500000)
        add r32.xyz, r17.yzwy, r19.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r32.xyz, r32.xyzx, t17.xyzw, s4, l(0.000000)
        mul r34.xyz, r33.xyzx, r33.xyzx
        mul r34.xyz, r18.xxxx, r34.xyzx
        movc r21.z, r20.y, l(0), l(0.500000)
        add r35.xyz, r17.yzwy, r21.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r35.xyz, r35.xyzx, t18.xyzw, s4, l(0.000000)
        mul r35.xyz, r34.yyyy, r35.xyzx
        mad r32.xyz, r32.xyzx, r34.xxxx, r35.xyzx
        movc r22.z, r20.w, l(0), l(0.500000)
        add r17.yzw, r17.yyzw, r22.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r17.yzw, r17.yzwy, t19.wxyz, s4, l(0.000000)
        mad r17.yzw, r17.yyzw, r34.zzzz, r32.xxyz
        sample_l_indexable(texturecubearray)(float,float,float,float) r20.xyw, r33.xyzw, t8.xywz, s2, l(6.000000)
        and r32.xyz, r20.xywx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
        ieq r32.xyz, r32.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
        or r19.z, r32.y, r32.x
        or r19.z, r32.z, r19.z
        movc r20.xyw, r19.zzzz, l(1.000000,1.000000,0,0), r20.xyxw
        mul r32.xyz, r17.yzwy, r20.xywx
        dp3 r19.z, r32.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r26.xyz, r17.yzwy, r20.xywx, r26.xyzx
        mul r17.y, r4.w, r19.z
        mul r20.xyw, r18.xxxx, r30.xzxw
        dp3 r17.z, r20.xywx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r17.z, r4.w, r19.z, r17.z
        div r17.y, r17.y, r17.z
        mad r27.xyz, r20.xywx, r17.yyyy, r27.xyzx
      else 
        mov r29.x, r28.x
        mov r28.xz, r29.xxyx
      endif 
    endloop 
    mov r14.yzw, r26.xxyz
    mov r25.xyz, r27.xyzx
    mov r15.yz, r28.xxzx
    iadd r13.w, r13.w, l(32)
  endloop 
  ge r2.z, r24.z, l(1.000000)
  and r4.z, r24.w, l(0x0000ff00)
  bfi r4.z, l(8), l(0), r15.z, r4.z
  movc r6.w, r2.z, r4.z, r15.z
  max r2.z, r15.y, l(1.000000)
  rcp r2.z, r2.z
  mov_sat r15.y, r15.y
  mul r17.xyz, r2.zzzz, r14.yzwy
  mul r31.xyz, r2.zzzz, r25.xyzx
  lt r4.z, r15.y, l(0.990000)
  if_nz r4.z
    iadd r6.w, r6.w, l(256)
    add r4.z, -r15.y, l(1.000000)
    mul r4.w, r4.z, cb2[19].x
    add r15.yzw, r10.xxyz, -cb2[35].xxyz
    mul r18.x, r15.y, cb2[35].w
    mul r18.yz, r15.zzwz, cb2[36].xxyx
    add_sat r15.yzw, r18.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
    mul r18.xy, r15.yzyy, cb2[36].zwzz
    mul r18.z, r15.w, cb2[37].x
    add r15.yzw, r18.xxyz, cb2[37].yyzw
    lt r18.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
    movc r18.xyz, r18.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
    mov r18.w, l(0)
    add r19.xyz, r15.yzwy, r18.wwxw
    sample_l_indexable(texture3d)(float,float,float,float) r19.xyz, r19.xyzx, t17.xyzw, s4, l(0.000000)
    mul r20.xyz, r11.xyzx, r11.xyzx
    mul r20.xyz, r4.wwww, r20.xyzx
    add r21.xyz, r15.yzwy, r18.wwyw
    sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t18.xyzw, s4, l(0.000000)
    mul r21.xyz, r20.yyyy, r21.xyzx
    mad r19.xyz, r19.xyzx, r20.xxxx, r21.xyzx
    add r15.yzw, r15.yyzw, r18.wwwz
    sample_l_indexable(texture3d)(float,float,float,float) r15.yzw, r15.yzwy, t19.wxyz, s4, l(0.000000)
    mad r15.yzw, r15.yyzw, r20.zzzz, r19.xxyz
    mov r11.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r18.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
    mul r15.yzw, r15.yyzw, r18.xxyz
    dp3 r4.w, r15.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
    mad r17.xyz, r14.yzwy, r2.zzzz, r15.yzwy
    mov r16.w, l(0)
    sample_l_indexable(texturecubearray)(float,float,float,float) r14.yzw, r16.xyzw, t8.wxyz, s2, r2.w
    mad r2.z, cb2[19].x, r4.z, -r4.w
    mad r2.z, r2.y, r2.z, r4.w
    mad r31.xyz, r14.yzwy, r2.zzzz, r31.xyzx
  endif 
else 
  mov r17.xyz, l(0,0,0,0)
endif 
add r2.z, r5.x, r2.x
log r2.z, |r2.z|
mul r2.z, r1.z, r2.z
exp r2.z, r2.z
add r2.z, r5.x, r2.z
add_sat r2.z, r2.z, l(-1.000000)
mul r14.yzw, r5.xxxx, r17.xxyz
and r15.yzw, r3.zzzz, r14.yyzw
mad r2.yw, r2.xxxy, l(0.000000, 0.984375, 0.000000, 0.984375), l(0.000000, 0.00781250, 0.000000, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r2.yw, r2.ywyy, t5.zxwy, s2, l(0.000000)
mul r17.xyz, r2.zzzz, r31.xyzx
mul r18.xyz, r2.yyyy, r17.xyzx
mul r2.yzw, r2.wwww, r17.xxyz
sqrt r4.z, r1.z
mad r4.z, r4.z, l(0.500000), l(0.500000)
mul r4.z, r4.z, r4.z
mul r4.w, r4.z, l(0.500000)
mad r4.z, -r4.z, l(0.500000), l(1.000000)
mad r5.x, r2.x, r4.z, r4.w
mul r4.zw, r4.zzzw, r5.xxxx
ftou r5.x, cb1[44].x
iadd r5.x, r5.x, l(7)
ushr r5.x, r5.x, l(3)
imad r5.x, r0.y, r5.x, r0.x
ishl r5.x, r5.x, l(5)
not r7.w, r0.z
mov r17.x, -r4.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r19.x, l(2)
mov r10.w, l(1.000000)
mov r20.x, l(2)
mov r21.z, l(1.000000)
mov r22.w, l(1.000000)
mov r23.w, l(1.000000)
mov r24.w, l(1.000000)
mov r17.z, r4.x
mov r25.w, l(1.000000)
mov r17.yw, r13.xxxx
mov r4.y, r17.w
mov r13.y, r17.x
mov r26.x, r13.x
mov r26.y, r17.x
mov r26.z, r4.x
mov r13.z, r4.x
mov r27.w, l(1.000000)
mov r28.x, r13.x
mov r28.y, r17.x
mov r28.z, r4.x
mov r29.x, r13.x
mov r29.y, r17.x
mov r29.z, r4.x
mov r30.xyz, r14.yzwy
mov r31.xyz, r15.yzwy
mov r32.xyz, r18.xyzx
mov r33.xyz, r2.yzwy
mov r8.w, cb2[58].y
mov r9.w, l(0)
mov r11.w, l(0)
loop 
  uge r12.w, r11.w, cb2[0].x
  breakc_nz r12.w
  ushr r12.w, r11.w, l(5)
  iadd r12.w, r5.x, r12.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.w, r12.w, l(0), t26.xxxx
  mov r34.xyz, r30.xyzx
  mov r35.xyz, r31.xyzx
  mov r36.xyz, r32.xyzx
  mov r37.xyz, r33.xyzx
  mov r13.w, r8.w
  mov r16.w, r9.w
  mov r18.w, r12.w
  loop 
    breakc_z r18.w
    firstbit_lo r21.w, r18.w
    ishl r26.w, l(1), r21.w
    not r26.w, r26.w
    and r18.w, r18.w, r26.w
    iadd r21.w, r11.w, r21.w
    imul null, r21.w, r21.w, l(15)
    ubfe r26.w, l(3), l(24), cb9[r21.w + 1].w
    ieq r28.w, r26.w, l(2)
    if_nz r28.w
      ubfe r28.w, l(3), l(27), cb9[r21.w + 1].w
      and r29.w, r16.w, l(255)
      ult r30.w, r29.w, l(32)
      and r30.w, r1.w, r30.w
      if_nz r30.w
        imad r29.w, r29.w, l(24), l(112)
        add r19.yzw, cb1[24].xxyz, cb9[r21.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r29.w, r19.xyzw
      endif 
      iadd r19.y, r16.w, l(1)
      add r38.xy, -r10.xyxx, cb9[r21.w + 3].zwzz
      add r38.z, -r10.z, cb9[r21.w + 4].x
      dp3 r19.z, r38.xyzx, r38.xyzx
      rsq r19.z, r19.z
      mul r39.xyz, r19.zzzz, r38.xyzx
      mul r19.w, r0.w, cb9[r21.w + 1].z
      mul r19.w, r19.w, l(0.250000)
      dp3 r29.w, r11.xyzx, r39.xyzx
      mov_sat r30.w, r29.w
      movc r31.w, r3.z, |r29.w|, r30.w
      lt r32.w, l(0.000000), r31.w
      if_nz r32.w
        mov r39.xyz, cb9[r21.w + 7].yzwy
        mov r39.w, cb9[r21.w + 8].x
        dp4 r32.w, r39.xyzw, r10.xyzw
        lt r33.w, r32.w, l(1.000000)
        if_nz r33.w
          mov r40.xyz, l(1.000000,1.000000,1.000000,0)
          mov r33.w, l(0)
        else 
          add r41.xyz, -r10.xyzx, cb9[r21.w + 0].xyzx
          mul r34.w, cb9[r21.w + 3].x, cb9[r21.w + 3].x
          dp3 r35.w, r41.xyzx, r41.xyzx
          div r34.w, r34.w, r35.w
          min r34.w, r34.w, l(1.000000)
          mad_sat r41.xy, r32.wwww, cb9[r21.w + 2].xzxx, cb9[r21.w + 2].ywyy
          mul r41.zw, r41.xxxy, r41.xxxy
          mad r41.xy, r41.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r41.xy, r41.xyxx, r41.zwzz
          mul r34.w, r34.w, r41.x
          mul r34.w, r41.y, r34.w
          mov r41.xyz, cb9[r21.w + 4].yzwy
          mov r41.w, cb9[r21.w + 5].x
          dp4 r41.x, r41.xyzw, r10.xyzw
          mov r42.xyz, cb9[r21.w + 5].yzwy
          mov r42.w, cb9[r21.w + 6].x
          dp4 r41.y, r42.xyzw, r10.xyzw
          div r21.xy, r41.xyxx, r32.wwww
          lt r32.w, cb9[r21.w + 10].w, l(0.00048828)
          if_nz r32.w
            mad_sat r41.xy, |r21.xyxx|, cb9[r21.w + 12].xyxx, cb9[r21.w + 12].zwzz
            mul r41.zw, r41.xxxy, r41.xxxy
            mad r41.xy, r41.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r41.xy, r41.xyxx, r41.zwzz
            mul r32.w, r41.y, r41.x
          else 
            mul_sat r41.xyzw, |r21.yyxx|, cb9[r21.w + 11].xyzw
            log r41.xyzw, r41.xyzw
            mul r41.xyzw, r41.xyzw, cb9[r21.w + 12].zzzz
            exp r41.xyzw, r41.xyzw
            add r41.xy, r41.zwzz, r41.xyxx
            log r41.xy, r41.xyxx
            mul r41.xy, r41.xyxx, cb9[r21.w + 12].wwww
            exp r41.xy, r41.xyxx
            mul r35.w, r41.x, cb9[r21.w + 12].x
            mad r36.w, cb9[r21.w + 12].y, r41.y, l(-1.000000)
            mad r35.w, cb9[r21.w + 12].y, r41.y, -r35.w
            div_sat r35.w, r36.w, r35.w
            mul r36.w, r35.w, r35.w
            mad r35.w, r35.w, l(-2.000000), l(3.000000)
            mul r32.w, r35.w, r36.w
          endif 
          mul r33.w, r32.w, r34.w
          and r32.w, l(255), cb9[r21.w + 14].w
          if_nz r32.w
            dp3 r34.w, cb9[r21.w + 13].xyzx, r21.xyzx
            mov r41.x, cb9[r21.w + 13].w
            mov r41.yz, cb9[r21.w + 14].xxyx
            dp3 r21.x, r41.xyzx, r21.xyzx
            frc r41.x, r34.w
            frc r41.y, r21.x
            iadd r21.x, r32.w, l(-1)
            utof r41.z, r21.x
            sample_l_indexable(texture2darray)(float,float,float,float) r40.xyz, r41.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r40.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r41.x, cb9[r21.w + 0].w
        mov r41.yz, cb9[r21.w + 1].xxyx
        mul r40.xyz, r40.xyzx, r41.xyzx
        lt r21.x, l(0.000000), r33.w
        if_nz r21.x
          and r21.x, r19.y, l(255)
          iadd r21.y, r21.x, l(-1)
          ult r21.y, r21.y, l(32)
          and r21.y, r1.w, r21.y
          if_nz r21.y
            imad r21.xy, r21.xxxx, l(24, 24, 0, 0), l(88, 104, 0, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r32.w, cb2[52].x, r21.x, u2.xxxx
            or r32.w, r32.w, l(4)
            store_structured u2.x, cb2[52].x, r21.x, r32.w
            store_structured u2.x, cb2[52].x, r21.y, r33.w
          endif 
          iadd r21.x, r16.w, l(257)
          ine r21.y, r28.w, l(1)
          if_nz r21.y
            mad r21.y, |r29.w|, l(-0.200000), l(0.400000)
            lt r28.w, r29.w, l(0.000000)
            and r28.w, r3.z, r28.w
            movc r21.y, r28.w, -r21.y, r21.y
            mad r22.xyz, r11.xyzx, r21.yyyy, r10.xyzx
            mov r41.xyz, cb9[r21.w + 6].yzwy
            mov r41.w, cb9[r21.w + 7].x
            dp4 r21.y, r41.xyzw, r22.xyzw
            dp4 r28.w, r39.xyzw, r22.xyzw
            ge r32.w, r28.w, r21.y
            if_nz r32.w
              mov r39.xyz, cb9[r21.w + 4].yzwy
              mov r39.w, cb9[r21.w + 5].x
              dp4 r39.x, r39.xyzw, r22.xyzw
              mov r41.xyz, cb9[r21.w + 5].yzwy
              mov r41.w, cb9[r21.w + 6].x
              dp4 r39.y, r41.xyzw, r22.xyzw
              div r22.xy, r39.xyxx, r28.wwww
              mad_sat r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r39.x, r22.x, cb9[r21.w + 8].y, cb9[r21.w + 8].z
              mad r39.y, r22.y, cb9[r21.w + 8].w, cb9[r21.w + 9].x
              div r21.y, r21.y, r28.w
              max r21.y, r21.y, l(0.00006104)
              and r22.x, l(0x0000ffff), cb9[r21.w + 1].w
              if_nz r13.w
                utof r41.z, r22.x
                mov r22.yz, l(0,0,0,0)
                loop 
                  ige r28.w, r22.z, l(8)
                  breakc_nz r28.w
                  dp2 r42.x, icb[r22.z + 0].yxyy, r17.xyxx
                  dp2 r42.y, icb[r22.z + 0].yxyy, r17.yzyy
                  mad r41.xy, r42.xyxx, cb9[r21.w + 3].yyyy, r39.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r28.w, r41.xyzx, t9.xxxx, s13, r21.y
                  mad r22.y, r28.w, l(0.125000), r22.y
                  iadd r22.z, r22.z, l(1)
                endloop 
              else 
                utof r39.z, r22.x
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.y, r39.xyzx, t9.xxxx, s13, r21.y
              endif 
              mul r21.y, r22.y, r22.y
              mul r21.y, r22.y, r21.y
            else 
              mov r21.y, l(1.000000)
            endif 
          else 
            mov r21.y, l(1.000000)
          endif 
          mul r21.y, r21.y, r33.w
          lt r22.x, l(0.000000), r21.y
          if_nz r22.x
            ubfe r22.x, l(4), l(16), cb9[r21.w + 1].w
            ult r22.z, l(0), r22.x
            and r22.z, r0.z, r22.z
            if_nz r22.z
              iadd r22.x, r22.x, cb2[0].x
              imad r22.x, r22.x, l(15), l(-15)
              mad r22.z, |r29.w|, l(-0.200000), l(0.400000)
              lt r28.w, r29.w, l(0.000000)
              and r28.w, r3.z, r28.w
              movc r22.z, r28.w, -r22.z, r22.z
              mad r23.xyz, r11.xyzx, r22.zzzz, r10.xyzx
              mov r39.xyz, cb9[r22.x + 6].yzwy
              mov r39.w, cb9[r22.x + 7].x
              dp4 r22.z, r39.xyzw, r23.xyzw
              mov r39.xyz, cb9[r22.x + 7].yzwy
              mov r39.w, cb9[r22.x + 8].x
              dp4 r28.w, r39.xyzw, r23.xyzw
              lt r32.w, r28.w, r22.z
              if_z r32.w
                mov r39.xyz, cb9[r22.x + 4].yzwy
                mov r39.w, cb9[r22.x + 5].x
                dp4 r39.x, r39.xyzw, r23.xyzw
                mov r41.xyz, cb9[r22.x + 5].yzwy
                mov r41.w, cb9[r22.x + 6].x
                dp4 r39.y, r41.xyzw, r23.xyzw
                div r23.xy, r39.xyxx, r28.wwww
                mad r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r39.x, r23.x, cb9[r22.x + 9].w
                add r39.y, r23.y, cb9[r22.x + 10].x
                mul r23.xy, r39.xyxx, cb9[r22.x + 9].yzyy
                div r39.xy, cb9[r22.x + 3].yyyy, cb9[r22.x + 8].ywyy
                add r39.zw, -r39.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r39.zw, r23.xxxy, r39.zzzw
                ge r39.xy, r39.xyxx, r23.xyxx
                or r39.xy, r39.xyxx, r39.zwzz
                or r23.z, r39.y, r39.x
                if_z r23.z
                  mov_sat r23.xy, r23.xyxx
                  mad r39.x, r23.x, cb9[r22.x + 8].y, cb9[r22.x + 8].z
                  mad r39.y, r23.y, cb9[r22.x + 8].w, cb9[r22.x + 9].x
                  mul r23.x, r28.w, cb9[r22.x + 10].z
                  mad r22.z, cb9[r22.x + 10].y, r28.w, r22.z
                  div r22.z, r22.z, r23.x
                endif 
              else 
                mov r23.z, l(-1)
              endif 
              or r23.x, r32.w, r23.z
              if_z r23.x
                max r22.z, r22.z, l(0.00006104)
                and r23.x, l(0x0000ffff), cb9[r22.x + 1].w
                if_nz r13.w
                  utof r41.z, r23.x
                  mov r23.yz, l(0,0,0,0)
                  loop 
                    ige r28.w, r23.z, l(8)
                    breakc_nz r28.w
                    dp2 r42.x, icb[r23.z + 0].yxyy, r17.xwxx
                    dp2 r42.y, icb[r23.z + 0].xyxx, r4.xyxx
                    mad r41.xy, r42.xyxx, cb9[r22.x + 3].yyyy, r39.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r28.w, r41.xyzx, t9.xxxx, s13, r22.z
                    mad r23.y, r28.w, l(0.125000), r23.y
                    iadd r23.z, r23.z, l(1)
                  endloop 
                else 
                  utof r39.z, r23.x
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.y, r39.xyzx, t9.xxxx, s13, r22.z
                endif 
                mul r22.x, r23.y, r23.y
                mul r22.x, r23.y, r22.x
              else 
                mov r22.x, l(1.000000)
              endif 
              mul r21.y, r21.y, r22.x
            else 
              ubfe r22.x, l(4), l(20), cb9[r21.w + 1].w
              ult r22.z, l(0), r22.x
              and r22.z, r7.w, r22.z
              if_nz r22.z
                iadd r22.x, r22.x, cb2[0].x
                imad r22.x, r22.x, l(15), l(-15)
                mad r22.z, |r29.w|, l(-0.200000), l(0.400000)
                lt r23.x, r29.w, l(0.000000)
                and r23.x, r3.z, r23.x
                movc r22.z, r23.x, -r22.z, r22.z
                mad r24.xyz, r11.xyzx, r22.zzzz, r10.xyzx
                mov r39.xyz, cb9[r22.x + 6].yzwy
                mov r39.w, cb9[r22.x + 7].x
                dp4 r22.z, r39.xyzw, r24.xyzw
                mov r39.xyz, cb9[r22.x + 7].yzwy
                mov r39.w, cb9[r22.x + 8].x
                dp4 r23.x, r39.xyzw, r24.xyzw
                lt r23.z, r23.x, r22.z
                if_z r23.z
                  mov r39.xyz, cb9[r22.x + 4].yzwy
                  mov r39.w, cb9[r22.x + 5].x
                  dp4 r39.x, r39.xyzw, r24.xyzw
                  mov r41.xyz, cb9[r22.x + 5].yzwy
                  mov r41.w, cb9[r22.x + 6].x
                  dp4 r39.y, r41.xyzw, r24.xyzw
                  div r24.xy, r39.xyxx, r23.xxxx
                  mad r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r39.x, r24.x, cb9[r22.x + 9].w
                  add r39.y, r24.y, cb9[r22.x + 10].x
                  mul r24.xy, r39.xyxx, cb9[r22.x + 9].yzyy
                  div r39.xy, cb9[r22.x + 3].yyyy, cb9[r22.x + 8].ywyy
                  add r39.zw, -r39.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                  ge r39.zw, r24.xxxy, r39.zzzw
                  ge r39.xy, r39.xyxx, r24.xyxx
                  or r39.xy, r39.xyxx, r39.zwzz
                  or r24.z, r39.y, r39.x
                  if_z r24.z
                    mov_sat r24.xy, r24.xyxx
                    mad r39.x, r24.x, cb9[r22.x + 8].y, cb9[r22.x + 8].z
                    mad r39.y, r24.y, cb9[r22.x + 8].w, cb9[r22.x + 9].x
                    mul r24.x, r23.x, cb9[r22.x + 10].z
                    mad r22.z, cb9[r22.x + 10].y, r23.x, r22.z
                    div r22.z, r22.z, r24.x
                  endif 
                else 
                  mov r24.z, l(-1)
                endif 
                or r23.x, r23.z, r24.z
                if_z r23.x
                  max r22.z, r22.z, l(0.00006104)
                  and r23.x, l(0x0000ffff), cb9[r22.x + 1].w
                  if_nz r13.w
                    utof r24.z, r23.x
                    mov r23.z, l(0)
                    mov r28.w, l(0)
                    loop 
                      ige r32.w, r28.w, l(8)
                      breakc_nz r32.w
                      dp2 r41.x, icb[r28.w + 0].xyxx, r26.xyxx
                      dp2 r41.y, icb[r28.w + 0].yxyy, r26.xzxx
                      mad r24.xy, r41.xyxx, cb9[r22.x + 3].yyyy, r39.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r22.z
                      mad r23.z, r24.x, l(0.125000), r23.z
                      iadd r28.w, r28.w, l(1)
                    endloop 
                  else 
                    utof r39.z, r23.x
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.z, r39.xyzx, t9.xxxx, s13, r22.z
                  endif 
                  mul r22.x, r23.z, r23.z
                  mul r22.x, r23.z, r22.x
                else 
                  mov r22.x, l(1.000000)
                endif 
                mul r21.y, r21.y, r22.x
              endif 
            endif 
            mad r22.x, -r31.w, r2.x, l(1.000000)
            mul r22.x, r22.x, r22.x
            mad r22.x, -r22.x, l(0.620000), l(0.620000)
            add r22.x, -r31.w, r22.x
            mad r22.x, r1.z, r22.x, r31.w
            mul r22.x, r21.y, r22.x
            lt r22.z, l(0.000000), r29.w
            mad r24.xyz, r22.xxxx, r40.xyzx, r34.xyzx
            mad r38.xyz, r38.xyzx, r19.zzzz, r12.xyzx
            dp3 r19.z, r38.xyzx, r38.xyzx
            rsq r19.z, r19.z
            mul r38.xyz, r19.zzzz, r38.xyzx
            dp3 r19.z, r38.xyzx, r12.xyzx
            dp3 r23.x, r11.xyzx, r38.xyzx
            mad r28.w, |r23.x|, r0.w, -|r23.x|
            mad r23.x, |r23.x|, r28.w, l(1.000000)
            mad r28.w, r30.w, r4.z, r4.w
            mul r23.x, r23.x, r23.x
            mul r23.x, r28.w, r23.x
            rcp r23.x, r23.x
            mul r19.w, r19.w, r30.w
            mul r19.w, r19.w, r23.x
            mul r19.w, r21.y, r19.w
            mad r38.xyz, r19.wwww, r40.xyzx, r37.xyzx
            add_sat r19.z, -r19.z, l(1.000000)
            mul r23.x, r19.z, r19.z
            mul r23.x, r23.x, r23.x
            mul r19.z, r19.z, r23.x
            mul r19.z, r19.z, r19.w
            mad r39.xyz, r19.zzzz, r40.xyzx, r36.xyzx
            mad r40.xyz, r22.xxxx, r40.xyzx, r35.xyzx
            movc r40.xyz, r3.zzzz, r40.xyzx, r35.xyzx
            movc r34.xyz, r22.zzzz, r24.xyzx, r34.xyzx
            movc r35.xyz, r22.zzzz, r35.xyzx, r40.xyzx
            movc r36.xyz, r22.zzzz, r39.xyzx, r36.xyzx
            movc r37.xyz, r22.zzzz, r38.xyzx, r37.xyzx
            and r19.z, r21.x, l(255)
            iadd r19.w, r19.z, l(-1)
            ult r19.w, r19.w, l(32)
            and r19.w, r1.w, r19.w
            if_nz r19.w
              imad r19.zw, r19.zzzz, l(0, 0, 24, 24), l(0, 0, 88, 108)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r22.x, cb2[52].x, r19.z, u2.xxxx
              or r22.x, r22.x, l(8)
              store_structured u2.x, cb2[52].x, r19.z, r22.x
              store_structured u2.x, cb2[52].x, r19.w, r21.y
            endif 
            iadd r16.w, r16.w, l(0x00010101)
          else 
            mov r16.w, r21.x
          endif 
        else 
          mov r16.w, r19.y
        endif 
      else 
        mov r16.w, r19.y
      endif 
    else 
      ieq r19.y, r26.w, l(4)
      if_nz r19.y
        ubfe r19.y, l(3), l(27), cb9[r21.w + 1].w
        and r19.z, r16.w, l(255)
        ult r19.w, r19.z, l(32)
        and r19.w, r1.w, r19.w
        if_nz r19.w
          imad r19.z, r19.z, l(24), l(112)
          add r20.yzw, cb1[24].xxyz, cb9[r21.w + 0].xxyz
          store_structured u2.xyzw, cb2[52].x, r19.z, r20.xyzw
        endif 
        iadd r19.z, r16.w, l(1)
        mul r19.w, r0.w, cb9[r21.w + 1].z
        mul r19.w, r19.w, l(0.250000)
        lt r20.y, l(0.000000), cb9[r21.w + 6].y
        mov r24.xy, cb9[r21.w + 5].zwzz
        mov r24.z, cb9[r21.w + 6].x
        mad r38.xyz, -r24.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), cb9[r21.w + 0].xyzx
        add r39.xyz, -r10.xyzx, r38.xyzx
        dp3 r20.z, r24.xyzx, r16.xyzx
        dp3 r20.w, r24.xyzx, r39.xyzx
        dp3 r21.x, r16.xyzx, r39.xyzx
        mad r21.y, -r20.z, r20.z, cb9[r21.w + 6].y
        mad r20.z, r20.z, r21.x, -r20.w
        div_sat r20.w, -r20.w, cb9[r21.w + 6].y
        div_sat r20.z, r20.z, r21.y
        div r21.x, r21.y, cb9[r21.w + 6].y
        mul r21.x, r21.x, l(10.000000)
        min r21.x, r21.x, l(1.000000)
        add r20.z, -r20.w, r20.z
        mad r20.z, r21.x, r20.z, r20.w
        mad r39.xyz, r20.zzzz, r24.xyzx, r38.xyzx
        mad r24.xyz, r20.wwww, r24.xyzx, r38.xyzx
        movc r24.xyz, r20.yyyy, r24.xyzx, cb9[r21.w + 0].xyzx
        movc r20.yzw, r20.yyyy, r39.xxyz, cb9[r21.w + 0].xxyz
        add r20.yzw, -r10.xxyz, r20.yyzw
        add r24.xyz, -r10.xyzx, r24.xyzx
        dp3 r21.x, r20.yzwy, r20.yzwy
        rsq r21.x, r21.x
        mul r38.xyz, r20.yzwy, r21.xxxx
        dp3 r21.y, r24.xyzx, r24.xyzx
        rsq r22.x, r21.y
        mul r24.xyz, r22.xxxx, r24.xyzx
        dp3 r22.x, r11.xyzx, r24.xyzx
        mov_sat r22.z, r22.x
        movc r22.z, r3.z, |r22.x|, r22.z
        lt r23.x, l(0.000000), r22.z
        if_nz r23.x
          sqrt r23.x, r21.y
          mul r24.x, cb9[r21.w + 3].x, cb9[r21.w + 3].x
          div r21.y, r24.x, r21.y
          min r21.y, r21.y, l(1.000000)
          mad_sat r24.xy, r23.xxxx, cb9[r21.w + 2].xzxx, cb9[r21.w + 2].ywyy
          mul r39.xy, r24.xyxx, r24.xyxx
          mad r24.xy, r24.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r24.xy, r24.xyxx, r39.xyxx
          mul r21.y, r21.y, r24.x
          mul r21.y, r24.y, r21.y
          lt r23.x, l(0.000000), r21.y
          if_nz r23.x
            and r23.x, r19.z, l(255)
            iadd r24.x, r23.x, l(-1)
            ult r24.x, r24.x, l(32)
            and r24.x, r1.w, r24.x
            if_nz r24.x
              imad r24.xy, r23.xxxx, l(24, 24, 0, 0), l(88, 104, 0, 0)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r23.x, cb2[52].x, r24.x, u2.xxxx
              or r23.x, r23.x, l(4)
              store_structured u2.x, cb2[52].x, r24.x, r23.x
              store_structured u2.x, cb2[52].x, r24.y, r21.y
            endif 
            iadd r23.x, r16.w, l(257)
            ine r19.y, r19.y, l(1)
            if_nz r19.y
              mad r19.y, |r22.x|, l(-0.200000), l(0.400000)
              lt r24.x, r22.x, l(0.000000)
              and r24.x, r3.z, r24.x
              movc r19.y, r24.x, -r19.y, r19.y
              mad r24.xyz, r11.xyzx, r19.yyyy, r10.xyzx
              add r24.xyz, r24.xyzx, -cb9[r21.w + 4].yzwy
              max r19.y, |r24.z|, |r24.y|
              max r19.y, r19.y, |r24.x|
              div r19.y, cb9[r21.w + 5].x, r19.y
              add r19.y, r19.y, cb9[r21.w + 5].y
              dp3 r26.w, r24.xyzx, r24.xyzx
              rsq r26.w, r26.w
              max r19.y, r19.y, l(0.00006104)
              and r28.w, l(0x0000ffff), cb9[r21.w + 1].w
              utof r39.w, r28.w
              mov r28.w, l(0)
              mov r29.w, l(0)
              loop 
                ige r30.w, r29.w, l(8)
                breakc_nz r30.w
                dp2 r40.y, icb[r29.w + 0].xyxx, r13.xyxx
                dp2 r40.z, icb[r29.w + 0].yxyy, r13.xzxx
                mul r40.yz, r40.yyzy, cb9[r21.w + 3].yyyy
                mul r40.x, r15.x, r40.y
                mul r40.w, r14.x, r40.y
                mad r39.xyz, r24.xyzx, r26.wwww, r40.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r30.w, r39.xyzw, t10.xxxx, s13, r19.y
                mad r28.w, r30.w, l(0.125000), r28.w
                iadd r29.w, r29.w, l(1)
              endloop 
            else 
              mov r28.w, l(1.000000)
            endif 
            mul r19.y, r21.y, r28.w
            lt r21.y, l(0.000000), r19.y
            if_nz r21.y
              ubfe r21.y, l(4), l(16), cb9[r21.w + 1].w
              ult r24.x, l(0), r21.y
              and r24.x, r0.z, r24.x
              if_nz r24.x
                iadd r21.y, r21.y, cb2[0].x
                imad r21.y, r21.y, l(15), l(-15)
                mad r24.x, |r22.x|, l(-0.200000), l(0.400000)
                lt r24.y, r22.x, l(0.000000)
                and r24.y, r3.z, r24.y
                movc r24.x, r24.y, -r24.x, r24.x
                mad r25.xyz, r11.xyzx, r24.xxxx, r10.xyzx
                mov r39.xyz, cb9[r21.y + 6].yzwy
                mov r39.w, cb9[r21.y + 7].x
                dp4 r24.x, r39.xyzw, r25.xyzw
                mov r39.xyz, cb9[r21.y + 7].yzwy
                mov r39.w, cb9[r21.y + 8].x
                dp4 r24.y, r39.xyzw, r25.xyzw
                lt r24.z, r24.y, r24.x
                if_z r24.z
                  mov r39.xyz, cb9[r21.y + 4].yzwy
                  mov r39.w, cb9[r21.y + 5].x
                  dp4 r39.x, r39.xyzw, r25.xyzw
                  mov r40.xyz, cb9[r21.y + 5].yzwy
                  mov r40.w, cb9[r21.y + 6].x
                  dp4 r39.y, r40.xyzw, r25.xyzw
                  div r25.xy, r39.xyxx, r24.yyyy
                  mad r25.xy, r25.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r39.x, r25.x, cb9[r21.y + 9].w
                  add r39.y, r25.y, cb9[r21.y + 10].x
                  mul r25.xy, r39.xyxx, cb9[r21.y + 9].yzyy
                  div r39.xy, cb9[r21.y + 3].yyyy, cb9[r21.y + 8].ywyy
                  add r39.zw, -r39.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                  ge r39.zw, r25.xxxy, r39.zzzw
                  ge r39.xy, r39.xyxx, r25.xyxx
                  or r39.xy, r39.xyxx, r39.zwzz
                  or r25.z, r39.y, r39.x
                  if_z r25.z
                    mov_sat r25.xy, r25.xyxx
                    mad r39.x, r25.x, cb9[r21.y + 8].y, cb9[r21.y + 8].z
                    mad r39.y, r25.y, cb9[r21.y + 8].w, cb9[r21.y + 9].x
                    mul r25.x, r24.y, cb9[r21.y + 10].z
                    mad r24.x, cb9[r21.y + 10].y, r24.y, r24.x
                    div r24.x, r24.x, r25.x
                  endif 
                else 
                  mov r25.z, l(-1)
                endif 
                or r24.y, r24.z, r25.z
                if_z r24.y
                  max r24.x, r24.x, l(0.00006104)
                  and r24.y, l(0x0000ffff), cb9[r21.y + 1].w
                  if_nz r13.w
                    utof r25.z, r24.y
                    mov r24.z, l(0)
                    mov r26.w, l(0)
                    loop 
                      ige r29.w, r26.w, l(8)
                      breakc_nz r29.w
                      dp2 r40.x, icb[r26.w + 0].xyxx, r28.xyxx
                      dp2 r40.y, icb[r26.w + 0].yxyy, r28.xzxx
                      mad r25.xy, r40.xyxx, cb9[r21.y + 3].yyyy, r39.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r25.xyzx, t9.xxxx, s13, r24.x
                      mad r24.z, r25.x, l(0.125000), r24.z
                      iadd r26.w, r26.w, l(1)
                    endloop 
                  else 
                    utof r39.z, r24.y
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.z, r39.xyzx, t9.xxxx, s13, r24.x
                  endif 
                  mul r21.y, r24.z, r24.z
                  mul r21.y, r24.z, r21.y
                else 
                  mov r21.y, l(1.000000)
                endif 
                mul r19.y, r19.y, r21.y
              else 
                ubfe r21.y, l(4), l(20), cb9[r21.w + 1].w
                ult r24.x, l(0), r21.y
                and r24.x, r7.w, r24.x
                if_nz r24.x
                  iadd r21.y, r21.y, cb2[0].x
                  imad r21.y, r21.y, l(15), l(-15)
                  mad r24.x, |r22.x|, l(-0.200000), l(0.400000)
                  lt r24.y, r22.x, l(0.000000)
                  and r24.y, r3.z, r24.y
                  movc r24.x, r24.y, -r24.x, r24.x
                  mad r27.xyz, r11.xyzx, r24.xxxx, r10.xyzx
                  mov r39.xyz, cb9[r21.y + 6].yzwy
                  mov r39.w, cb9[r21.y + 7].x
                  dp4 r24.x, r39.xyzw, r27.xyzw
                  mov r39.xyz, cb9[r21.y + 7].yzwy
                  mov r39.w, cb9[r21.y + 8].x
                  dp4 r24.y, r39.xyzw, r27.xyzw
                  lt r25.x, r24.y, r24.x
                  if_z r25.x
                    mov r39.xyz, cb9[r21.y + 4].yzwy
                    mov r39.w, cb9[r21.y + 5].x
                    dp4 r39.x, r39.xyzw, r27.xyzw
                    mov r40.xyz, cb9[r21.y + 5].yzwy
                    mov r40.w, cb9[r21.y + 6].x
                    dp4 r39.y, r40.xyzw, r27.xyzw
                    div r25.yz, r39.xxyx, r24.yyyy
                    mad r25.yz, r25.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                    add r27.x, r25.y, cb9[r21.y + 9].w
                    add r27.y, r25.z, cb9[r21.y + 10].x
                    mul r25.yz, r27.xxyx, cb9[r21.y + 9].yyzy
                    div r27.xy, cb9[r21.y + 3].yyyy, cb9[r21.y + 8].ywyy
                    add r39.xy, -r27.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r39.xy, r25.yzyy, r39.xyxx
                    ge r27.xy, r27.xyxx, r25.yzyy
                    or r27.xy, r27.xyxx, r39.xyxx
                    or r26.w, r27.y, r27.x
                    if_z r26.w
                      mov_sat r25.yz, r25.yyzy
                      mad r27.x, r25.y, cb9[r21.y + 8].y, cb9[r21.y + 8].z
                      mad r27.y, r25.z, cb9[r21.y + 8].w, cb9[r21.y + 9].x
                      mul r25.y, r24.y, cb9[r21.y + 10].z
                      mad r24.x, cb9[r21.y + 10].y, r24.y, r24.x
                      div r24.x, r24.x, r25.y
                    endif 
                  else 
                    mov r26.w, l(-1)
                  endif 
                  or r24.y, r25.x, r26.w
                  if_z r24.y
                    max r24.x, r24.x, l(0.00006104)
                    and r24.y, l(0x0000ffff), cb9[r21.y + 1].w
                    if_nz r13.w
                      utof r25.z, r24.y
                      mov r26.w, l(0)
                      mov r29.w, l(0)
                      loop 
                        ige r30.w, r29.w, l(8)
                        breakc_nz r30.w
                        dp2 r39.x, icb[r29.w + 0].xyxx, r29.xyxx
                        dp2 r39.y, icb[r29.w + 0].yxyy, r29.xzxx
                        mad r25.xy, r39.xyxx, cb9[r21.y + 3].yyyy, r27.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r25.xyzx, t9.xxxx, s13, r24.x
                        mad r26.w, r25.x, l(0.125000), r26.w
                        iadd r29.w, r29.w, l(1)
                      endloop 
                    else 
                      utof r27.z, r24.y
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.w, r27.xyzx, t9.xxxx, s13, r24.x
                    endif 
                    mul r21.y, r26.w, r26.w
                    mul r21.y, r26.w, r21.y
                  else 
                    mov r21.y, l(1.000000)
                  endif 
                  mul r19.y, r19.y, r21.y
                endif 
              endif 
              mad r21.y, -r22.z, r2.x, l(1.000000)
              mul r21.y, r21.y, r21.y
              mad r21.y, -r21.y, l(0.620000), l(0.620000)
              add r21.y, -r22.z, r21.y
              mad r21.y, r1.z, r21.y, r22.z
              mul r21.y, r19.y, r21.y
              mov r25.x, cb9[r21.w + 0].w
              mov r25.yz, cb9[r21.w + 1].xxyx
              lt r21.w, l(0.000000), r22.x
              mad r27.xyz, r21.yyyy, r25.xyzx, r34.xyzx
              dp3_sat r22.x, r11.xyzx, r38.xyzx
              mad r20.yzw, r20.yyzw, r21.xxxx, r12.xxyz
              dp3 r21.x, r20.yzwy, r20.yzwy
              rsq r21.x, r21.x
              mul r20.yzw, r20.yyzw, r21.xxxx
              dp3 r21.x, r20.yzwy, r12.xyzx
              dp3 r20.y, r11.xyzx, r20.yzwy
              mad r20.z, |r20.y|, r0.w, -|r20.y|
              mad r20.y, |r20.y|, r20.z, l(1.000000)
              mad r20.z, r22.x, r4.z, r4.w
              mul r20.y, r20.y, r20.y
              mul r20.y, r20.z, r20.y
              rcp r20.y, r20.y
              mul r19.w, r19.w, r22.x
              mul r19.w, r19.w, r20.y
              mul r19.w, r19.y, r19.w
              mad r20.yzw, r19.wwww, r25.xxyz, r37.xxyz
              add_sat r21.x, -r21.x, l(1.000000)
              mul r22.x, r21.x, r21.x
              mul r22.x, r22.x, r22.x
              mul r21.x, r21.x, r22.x
              mul r19.w, r19.w, r21.x
              mad r38.xyz, r19.wwww, r25.xyzx, r36.xyzx
              mad r25.xyz, r21.yyyy, r25.xyzx, r35.xyzx
              movc r25.xyz, r3.zzzz, r25.xyzx, r35.xyzx
              movc r34.xyz, r21.wwww, r27.xyzx, r34.xyzx
              movc r35.xyz, r21.wwww, r35.xyzx, r25.xyzx
              movc r36.xyz, r21.wwww, r38.xyzx, r36.xyzx
              movc r37.xyz, r21.wwww, r20.yzwy, r37.xyzx
              and r19.w, r23.x, l(255)
              iadd r20.y, r19.w, l(-1)
              ult r20.y, r20.y, l(32)
              and r20.y, r1.w, r20.y
              if_nz r20.y
                imad r20.yz, r19.wwww, l(0, 24, 24, 0), l(0, 88, 108, 0)
                ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r19.w, cb2[52].x, r20.y, u2.xxxx
                or r19.w, r19.w, l(8)
                store_structured u2.x, cb2[52].x, r20.y, r19.w
                store_structured u2.x, cb2[52].x, r20.z, r19.y
              endif 
              iadd r16.w, r16.w, l(0x00010101)
            else 
              mov r16.w, r23.x
            endif 
          else 
            mov r16.w, r19.z
          endif 
        else 
          mov r16.w, r19.z
        endif 
      endif 
    endif 
  endloop 
  mov r30.xyz, r34.xyzx
  mov r31.xyz, r35.xyzx
  mov r32.xyz, r36.xyzx
  mov r33.xyz, r37.xyzx
  mov r9.w, r16.w
  iadd r11.w, r11.w, l(32)
endloop 
mad r2.xyz, r3.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.z, r2.y
mad r3.xyw, r6.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r0.w, r3.x
ieq r0.w, r0.z, r0.w
movc r3.xy, r0.wwww, r3.ywyy, l(-1.000000,0,0,0)
mad r4.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r4.x
ieq r0.w, r0.z, r0.w
movc r4.xy, r0.wwww, r4.yzyy, l(-1.000000,0,0,0)
mad r6.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r6.x
ieq r0.w, r0.z, r0.w
movc r4.zw, r0.wwww, r6.yyyz, l(0,0,-1.000000,0)
mad r6.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r6.x
ieq r0.z, r0.z, r0.w
movc r0.zw, r0.zzzz, r6.yyyz, l(0,0,-1.000000,0)
mov r7.x, r3.x
mov r7.yz, r4.xxzx
mov r7.w, r0.z
add r7.xyzw, -r2.xxxx, r7.xyzw
ge r7.xyzw, |r7.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r7.xyzw, r7.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.z, r7.y, r7.x
add r0.z, r7.z, r0.z
add r0.z, r7.w, r0.z
mul r1.z, r4.y, r7.y
mad r1.z, r7.x, r3.y, r1.z
mad r1.z, r7.z, r4.w, r1.z
mad r0.w, r7.w, r0.w, r1.z
div r2.w, r0.w, r0.z
ge r0.z, l(0.000000), r0.z
movc r2.yz, r0.zzzz, l(0,0,0,0), r2.zzwz
and r0.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.z, r0.w, r0.z
movc r2.xyz, r0.zzzz, r2.xyzx, r2.xzyx
mad r0.z, -r2.z, l(0.500000), r2.x
add r4.y, r0.z, r2.z
mad r4.z, -r2.y, l(0.500000), r0.z
add r4.x, r2.y, r4.z
mul r2.xyz, r5.yzwy, r30.xyzx
mad r2.xyz, r31.xyzx, r4.xyzx, r2.xyzx
mul r3.xyw, r32.xyxz, l(0.960000, 0.960000, 0.000000, 0.960000)
mad r3.xyw, r33.xyxz, l(0.040000, 0.040000, 0.000000, 0.040000), r3.xyxw
add r2.xyz, r2.xyzx, r3.xywx
add r3.xyw, -r4.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
mul r3.xyw, r3.xyxw, r32.xyxz
mad r3.xyw, r33.xyxz, r4.xyxz, r3.xyxw
mad r3.xyw, r30.xyxz, r5.yzyw, r3.xyxw
movc r2.xyz, r3.zzzz, r2.xyzx, r3.xywx
lt r0.z, l(0.000000), cb2[9].z
if_nz r0.z
  dp3 r0.z, r10.xyzx, r10.xyzx
  rsq r0.w, r0.z
  mul r3.xyz, r0.wwww, r10.xyzx
  sqrt r0.z, r0.z
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r4.xy, r0.zzzz, cb2[15].xyxx, cb2[14].zwzz
    mul r4.xy, r4.xyxx, cb2[16].xyxx
    lt r0.w, l(0.010000), |r10.z|
    mul r4.zw, r10.zzzz, cb2[15].zzzw
    mul r5.xy, r4.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r5.xy, r5.xyxx
    add r5.xy, -r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r4.zw, r5.xxxy, r4.zzzw
    mul r4.zw, r4.zzzw, r4.xxxy
    movc r4.xy, r0.wwww, r4.zwzz, r4.xyxx
    mul r4.xzw, r4.xxxx, cb2[12].xxyz
    exp r4.xzw, r4.xxzw
    mul r5.xyz, r4.yyyy, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xzwx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xzwx
  else 
    mad r0.w, r0.z, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r10.z|
    mul r2.w, r10.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r0.w, r2.w
    movc r0.w, r1.z, r2.w, r0.w
    mul r5.xyz, r0.wwww, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xyzx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.w, cb2[8].w, -r0.w, l(1.000000)
  mul r2.w, r2.w, r2.w
  mul r2.w, r2.w, l(12.566371)
  div r1.z, r1.z, r2.w
  add r0.z, r0.z, -cb2[10].w
  mul_sat r0.z, r0.z, cb2[11].w
  mul r0.z, r0.z, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyz, r0.zzzz, cb2[11].xyzx
  mad r3.xyz, r0.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r5.xyzx
  mad r3.xyz, r2.xyzx, r4.xyzx, r3.xyzx
else 
  mul r0.z, r10.z, cb2[6].x
  mad r0.w, cb2[6].x, r10.z, cb2[5].x
  lt r1.z, |r0.z|, l(0.000100)
  min r2.w, r0.w, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.w, cb2[6].z
  lt r4.x, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r4.x, r2.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.z, r1.z, l(1.000000), r0.z
  div r0.z, r0.w, r0.z
  movc r0.z, r1.z, r3.w, r0.z
  mul r0.z, r0.z, cb2[5].z
  dp3 r0.w, r10.xyzx, r10.xyzx
  sqrt r1.z, r0.w
  mad r0.z, r0.z, r1.z, cb2[5].w
  exp r0.z, r0.z
  min r0.z, r0.z, l(1.000000)
  add r0.z, -r0.z, l(1.000000)
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r10.xyzx
  dp3 r0.w, cb2[7].yzwy, r4.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r0.wwww, r4.xyzw, cb2[4].xyzw
  mul r0.z, r0.z, r4.w
  add r4.xyz, -r2.xyzx, r4.xyzx
  mad r3.xyz, r0.zzzz, r4.xyzx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.z, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r3.xz, r3.xxzx, l(0, 0, 0, 0)
ieq r3.yw, r3.yyyw, l(0, 0, 0, 0)
and r3.xy, r3.ywyy, r3.xzxx
and r3.xy, r3.xyxx, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(16)
and r0.w, r0.w, r1.z
and r3.z, r0.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.zzzz, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.z, r9.w, l(255)
      break 
      case l(2)
      ubfe r0.z, l(8), l(8), r9.w
      break 
      case l(3)
      ubfe r0.z, l(8), l(16), r9.w
      break 
      case l(4)
      and r0.z, r6.w, l(255)
      break 
      case l(5)
      ubfe r0.z, l(8), l(8), r6.w
      break 
      default 
      mov r0.z, l(0)
      break 
    endswitch 
    utof r0.z, r0.z
    mul r0.z, r0.z, cb2[53].z
    mad r3.xyz, r0.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r1.w
  add r1.xyz, r10.xyzx, cb1[24].xyzx
  and r1.w, r9.w, l(255)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.z, r6.w, l(255)
  store_structured u2.x, cb2[52].x, l(108), r0.z
endif 
if_nz cb2[52].y
  and r0.z, r9.w, l(255)
  atomic_iadd g1, l(0), r0.z
  ubfe r1.xy, l(8, 8, 0, 0), l(8, 16, 0, 0), r9.wwww
  atomic_iadd g1, l(4), r1.x
  atomic_iadd g1, l(8), r1.y
  and r0.w, r6.w, l(255)
  atomic_iadd g1, l(12), r0.w
  ubfe r1.z, l(8), l(8), r6.w
  atomic_iadd g1, l(16), r1.z
  atomic_umax g2, l(0), r0.z
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), r0.w
  atomic_umax g2, l(16), r1.z
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.z, r1.x, l(63)
  if_nz r0.z
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.z, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.z
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.z, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.z
    ieq r0.xy, r0.xyxx, cb2[52].zwzz
    and r0.x, r0.y, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.z
    endif 
  endif 
endif 
ret 
// Approximately 2123 instruction slots used
