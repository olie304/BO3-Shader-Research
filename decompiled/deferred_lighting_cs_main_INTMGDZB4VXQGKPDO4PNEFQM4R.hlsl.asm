//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:31 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t25, 8
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 32
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(30), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.zw, r0.xxxy, l(0, 0, 4095, 4095)
imad r1.xy, r0.zwzz, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r3.xy, cb1[44].xyxx
ult r3.xy, r1.xyxx, r3.xyxx
and r3.x, r3.y, r3.x
lt r3.y, l(0.000000), r2.z
and r3.x, r3.y, r3.x
if_z r3.x
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.y, r1.xyww, t4.yxzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xyww, t2.xyzw
utof r3.zw, r1.xxxy
add r5.xy, r3.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
ge r6.x, r3.y, l(0.984375)
mul r5.z, r3.y, l(1.01587307)
mad r3.y, r3.y, l(64.000000), l(-63.000000)
movc r3.y, r6.x, r3.y, r5.z
max r3.y, r3.y, l(0.00000001)
rcp r6.y, r3.y
and r3.xy, r3.xxxx, r6.xyxx
mul r5.zw, r5.xxxy, cb1[44].zzzw
gather4_indexable(texture2d)(float,float,float,float) r6.xyzw, r5.zwzz, t27.xyzw, s4.x
gather4_indexable(texture2d)(float,float,float,float) r7.xyzw, r5.zwzz, t28.xyzw, s4.x
mul r5.zw, r5.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r5.zw, r5.zzzw
add r8.xy, -r5.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r9.y, r8.x, r8.y
mul r9.xz, r5.zzwz, r8.xxyx
mul r9.w, r5.w, r5.z
dp4 r5.z, r6.xyzw, r9.xyzw
add r7.xyzw, -r3.yyyy, r7.xyzw
min r5.w, |r7.w|, |r7.z|
min r5.w, r5.w, |r7.y|
min r5.w, r5.w, |r7.x|
max r8.x, |r7.w|, |r7.z|
max r8.x, |r7.y|, r8.x
max r7.x, |r7.x|, r8.x
eq r7.yzw, r5.wwww, |r7.yyzw|
movc r5.w, r7.y, r6.y, r6.x
movc r5.w, r7.z, r6.z, r5.w
movc r5.w, r7.w, r6.w, r5.w
mul r6.x, r3.y, l(0.010000)
lt r6.x, r6.x, r7.x
movc r5.z, r6.x, r5.w, r5.z
mul r4.z, r4.z, r5.z
if_nz cb2[55].x
  mul r5.z, r4.z, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r5.zzzz
  ret 
else 
  movc r5.z, cb2[54].w, r4.z, l(1.000000)
endif 
ge r4.z, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t0.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r10.xyz, r1.xyzw, t2.xywz
add r1.zw, r5.xxxy, -cb1[71].xxxy
mul r1.zw, r1.zzzw, cb1[44].zzzw
mad r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r11.x, r1.z, cb1[12].x
mul r11.y, r1.w, cb1[13].y
mov r11.z, l(1.000000)
mul r5.xyw, r3.yyyy, r11.xyxz
mul r11.xyz, r5.yyyy, cb1[17].xyzx
mad r11.xyz, r5.xxxx, cb1[16].xyzx, r11.xyzx
mad r11.xyz, r5.wwww, cb1[18].xyzx, r11.xyzx
mad r1.z, r2.w, l(3.000000), l(0.500000)
ftou r1.z, r1.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r1.w, r2.xyxx, r2.xyxx
add r12.zw, -r1.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r1.w, r12.z
mul r12.xy, r1.wwww, r2.xyxx
and r13.xyzw, r1.zzzz, l(2, 1, 2, 1)
movc r13.xyzw, r13.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.z, r13.w, r13.z
movc r13.z, r1.z, l(-1.000000), l(1.000000)
mul r2.xyw, r13.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r5.xyw, r13.xyxz, l(1.000000, -2.000000, 0.000000, 1.000000)
mul r12.xyz, r12.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r12.yyyy
mad r2.xyw, r5.xyxw, r12.xxxx, r2.xyxw
mad r12.xyz, r13.xyzx, r12.zzzz, r2.xywx
movc r1.z, r4.z, l(-0.500000), l(-0.00146628)
add r1.z, r1.z, r2.z
mul_sat r2.y, r1.z, l(2.00982332)
dp3 r1.z, -r11.xyzx, -r11.xyzx
rsq r1.z, r1.z
mul r5.xyw, r1.zzzz, -r11.xyxz
dp2 r1.z, r3.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.z, r1.z
mul r1.z, r1.z, l(52.982918)
frc r1.z, r1.z
mad r1.z, r1.z, l(6.28318548), cb1[70].w
sincos r13.x, r14.x, r1.z
dp3_sat r2.x, r12.xyzx, r5.xywx
dp3 r1.z, -r5.xywx, r12.xyzx
add r1.z, r1.z, r1.z
mad r15.xyz, r12.xyzx, -r1.zzzz, -r5.xywx
mul r1.z, r2.y, l(17.000000)
exp r1.z, r1.z
add r1.z, r1.z, l(2.000000)
div r1.z, l(2.000000), r1.z
sqrt r1.w, r1.z
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r2.zw, r2.zzzw
ieq r2.zw, r1.xxxy, r2.zzzw
and r2.z, r2.w, r2.z
add r2.w, -r2.y, l(1.000000)
mul r3.y, r2.w, l(5.000000)
mad r3.z, r2.w, l(5.000000), l(-2.500000)
mul r3.z, r3.z, l(0.400000)
max r3.z, r3.z, l(0.000000)
mad r13.yz, -r2.wwww, l(0.000000, 10.000000, 5.000000, 0.000000), l(0.000000, 6.857410, 7.085000, 0.000000)
exp r3.w, r13.y
mul r3.w, r2.x, r3.w
mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 100.000000, 9.136810)
mul r6.w, r2.w, r3.y
mad r6.w, -r6.w, l(2.015905), r13.z
exp r6.w, r6.w
mul r6.w, r2.x, r6.w
mul r6.w, r6.w, l(9.708090)
max r3.w, r3.w, r6.w
max r3.w, r3.w, l(1.268160)
iadd r6.w, cb2[0].y, -cb2[58].x
ushr r13.yz, r0.yyxy, l(0, 24, 24, 0)
ubfe r0.x, l(10), l(12), r0.y
mov r16.x, l(16)
mov r17.yz, l(0,0,1.000000,0)
mov r18.xy, l(0,0,0,0)
mov r19.xz, l(1.000000,0,1.000000,0)
mov r20.xy, l(0,0,0,0)
mov r21.xy, l(0,0,0,0)
mov r22.xyzw, l(0,0,0,0)
mov r23.xyzw, l(0,0,0,0)
mov r0.y, l(0)
loop 
  ieq r7.w, r0.y, l(2)
  breakc_nz r7.w
  movc r7.w, r0.y, r0.x, r13.y
  uge r8.w, r7.w, r6.w
  ult r9.w, r7.w, cb2[0].y
  and r8.w, r8.w, r9.w
  if_nz r8.w
    imul null, r7.w, r7.w, l(14)
    if_nz r2.z
      and r8.w, r23.w, l(3)
      imad r8.w, r8.w, l(20), l(880)
      add r16.yzw, cb1[24].xxyz, cb10[r7.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r8.w, r16.xyzw
    endif 
    iadd r24.w, r23.w, l(1)
    add r14.yzw, r11.xxyz, -cb10[r7.w + 0].xxyz
    and r8.w, l(0x0000ffff), cb10[r7.w + 7].z
    ubfe r9.w, l(6), l(25), cb10[r7.w + 7].z
    imul null, r10.w, r8.w, l(6)
    dp3 r13.w, cb11[r10.w + 0].xyzx, r14.yzwy
    add_sat r13.w, r13.w, cb11[r10.w + 0].w
    dp3 r16.y, cb11[r10.w + 1].xyzx, r14.yzwy
    add_sat r16.y, r16.y, cb11[r10.w + 1].w
    mul r13.w, r13.w, r16.y
    dp3 r16.y, cb11[r10.w + 2].xyzx, r14.yzwy
    add_sat r16.y, r16.y, cb11[r10.w + 2].w
    mul r13.w, r13.w, r16.y
    dp3 r16.y, cb11[r10.w + 3].xyzx, r14.yzwy
    add_sat r16.y, r16.y, cb11[r10.w + 3].w
    mul r13.w, r13.w, r16.y
    dp3 r16.y, cb11[r10.w + 4].xyzx, r14.yzwy
    add_sat r16.y, r16.y, cb11[r10.w + 4].w
    mul r13.w, r13.w, r16.y
    dp3 r16.y, cb11[r10.w + 5].xyzx, r14.yzwy
    add_sat r10.w, r16.y, cb11[r10.w + 5].w
    mul r17.x, r10.w, r13.w
    and r10.w, l(1), cb10[r7.w + 6].x
    movc r16.yz, r10.wwww, r17.xxyx, r17.zzxz
    mov r10.w, cb10[r7.w + 6].x
    mov r25.xy, r16.yzyy
    mov r13.w, l(1)
    loop 
      ige r16.w, r13.w, r9.w
      breakc_nz r16.w
      iadd r16.w, r8.w, r13.w
      imul null, r16.w, r16.w, l(6)
      dp3 r17.x, cb11[r16.w + 0].xyzx, r14.yzwy
      add_sat r17.x, r17.x, cb11[r16.w + 0].w
      mul r17.x, r17.x, r25.x
      dp3 r17.w, cb11[r16.w + 1].xyzx, r14.yzwy
      add_sat r17.w, r17.w, cb11[r16.w + 1].w
      mul r17.x, r17.w, r17.x
      dp3 r17.w, cb11[r16.w + 2].xyzx, r14.yzwy
      add_sat r17.w, r17.w, cb11[r16.w + 2].w
      mul r17.x, r17.w, r17.x
      dp3 r17.w, cb11[r16.w + 3].xyzx, r14.yzwy
      add_sat r17.w, r17.w, cb11[r16.w + 3].w
      mul r17.x, r17.w, r17.x
      dp3 r17.w, cb11[r16.w + 4].xyzx, r14.yzwy
      add_sat r17.w, r17.w, cb11[r16.w + 4].w
      mul r17.x, r17.w, r17.x
      dp3 r17.w, cb11[r16.w + 5].xyzx, r14.yzwy
      add_sat r16.w, r17.w, cb11[r16.w + 5].w
      mul r25.x, r16.w, r17.x
      ushr r17.w, r10.w, l(2)
      ubfe r18.w, l(1), l(2), r10.w
      and r20.w, r17.w, l(2)
      max r21.w, r25.x, r25.y
      mad r16.w, -r17.x, r16.w, l(1.000000)
      mul r16.w, r16.w, r25.y
      movc r19.y, r20.w, r16.w, r21.w
      movc r25.xy, r18.wwww, r25.xyxx, r19.xyxx
      iadd r13.w, r13.w, l(1)
      mov r10.w, r17.w
    endloop 
    mov_sat r25.y, r25.y
    mul r8.w, r25.y, cb10[r7.w + 6].y
    lt r9.w, l(0.000000), r8.w
    if_nz r9.w
      and r9.w, r24.w, l(7)
      iadd r10.w, r9.w, l(-1)
      ult r10.w, r10.w, l(32)
      and r10.w, r2.z, r10.w
      if_nz r10.w
        imad r16.yz, r9.wwww, l(0, 20, 20, 0), l(0, 860, 876, 0)
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r9.w, cb2[52].x, r16.y, u2.xxxx
        or r9.w, r9.w, l(32)
        store_structured u2.x, cb2[52].x, r16.y, r9.w
        store_structured u2.x, cb2[52].x, r16.z, r8.w
      endif 
      iadd r23.w, r23.w, l(257)
      mad r23.z, r25.y, cb10[r7.w + 6].y, r23.z
      mul r8.w, r8.w, cb10[r7.w + 7].y
      mov r26.x, cb10[r7.w + 7].w
      mov r26.yz, cb10[r7.w + 8].xxyx
      dp3 r9.w, r15.xyzx, r26.xyzx
      dp3 r10.w, r14.yzwy, r26.xyzx
      add r10.w, r10.w, -cb10[r7.w + 8].z
      ge r13.w, r10.w, l(0.000000)
      max r10.w, r3.z, |r10.w|
      movc r10.w, r13.w, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r9.w, |r9.w|, l(131072.000000)
      mov r26.x, cb10[r7.w + 8].w
      mov r26.yz, cb10[r7.w + 9].xxyx
      dp3 r10.w, r15.xyzx, r26.xyzx
      dp3 r13.w, r14.yzwy, r26.xyzx
      add r13.w, r13.w, -cb10[r7.w + 9].z
      ge r16.y, r13.w, l(0.000000)
      max r13.w, r3.z, |r13.w|
      movc r13.w, r16.y, r13.w, -r13.w
      max r10.w, -r10.w, l(0.00000010)
      div r10.w, r13.w, r10.w
      min r9.w, r9.w, |r10.w|
      mov r26.x, cb10[r7.w + 9].w
      mov r26.yz, cb10[r7.w + 10].xxyx
      dp3 r10.w, r15.xyzx, r26.xyzx
      dp3 r13.w, r14.yzwy, r26.xyzx
      add r13.w, r13.w, -cb10[r7.w + 10].z
      ge r16.y, r13.w, l(0.000000)
      max r13.w, r3.z, |r13.w|
      movc r13.w, r16.y, r13.w, -r13.w
      max r10.w, -r10.w, l(0.00000010)
      div r10.w, r13.w, r10.w
      min r9.w, r9.w, |r10.w|
      mov r26.x, cb10[r7.w + 10].w
      mov r26.yz, cb10[r7.w + 11].xxyx
      dp3 r10.w, r15.xyzx, r26.xyzx
      dp3 r13.w, r14.yzwy, r26.xyzx
      add r13.w, r13.w, -cb10[r7.w + 11].z
      ge r16.y, r13.w, l(0.000000)
      max r13.w, r3.z, |r13.w|
      movc r13.w, r16.y, r13.w, -r13.w
      max r10.w, -r10.w, l(0.00000010)
      div r10.w, r13.w, r10.w
      min r9.w, r9.w, |r10.w|
      mov r26.x, cb10[r7.w + 11].w
      mov r26.yz, cb10[r7.w + 12].xxyx
      dp3 r10.w, r15.xyzx, r26.xyzx
      dp3 r13.w, r14.yzwy, r26.xyzx
      add r13.w, r13.w, -cb10[r7.w + 12].z
      ge r16.y, r13.w, l(0.000000)
      max r13.w, r3.z, |r13.w|
      movc r13.w, r16.y, r13.w, -r13.w
      max r10.w, -r10.w, l(0.00000010)
      div r10.w, r13.w, r10.w
      min r9.w, r9.w, |r10.w|
      mov r26.x, cb10[r7.w + 12].w
      mov r26.yz, cb10[r7.w + 13].xxyx
      dp3 r10.w, r15.xyzx, r26.xyzx
      dp3 r13.w, r14.yzwy, r26.xyzx
      add r13.w, r13.w, -cb10[r7.w + 13].z
      ge r16.y, r13.w, l(0.000000)
      max r13.w, r3.z, |r13.w|
      movc r13.w, r16.y, r13.w, -r13.w
      max r10.w, -r10.w, l(0.00000010)
      div r10.w, r13.w, r10.w
      min r9.w, r9.w, |r10.w|
      add r26.x, r14.y, cb10[r7.w + 3].w
      add r26.yz, r14.zzwz, cb10[r7.w + 4].xxyx
      mad r16.yzw, r15.xxyz, r9.wwww, r26.xxyz
      dp3 r10.w, r16.yzwy, r16.yzwy
      sqrt r10.w, r10.w
      div r9.w, r9.w, r10.w
      add r9.w, r9.w, r9.w
      sqrt r9.w, r9.w
      mad r9.w, r2.w, l(5.000000), r9.w
      add r9.w, r9.w, l(-0.844800)
      mov r26.x, cb10[r7.w + 0].w
      mov r26.y, cb10[r7.w + 1].z
      mov r26.z, cb10[r7.w + 2].y
      dp3 r27.x, r16.yzwy, r26.xyzx
      mov r28.xy, cb10[r7.w + 1].xwxx
      mov r28.z, cb10[r7.w + 2].z
      dp3 r27.y, r16.yzwy, r28.xyzx
      mov r29.x, cb10[r7.w + 1].y
      mov r29.yz, cb10[r7.w + 2].xxwx
      dp3 r27.z, r16.yzwy, r29.xyzx
      ubfe r10.w, l(9), l(16), cb10[r7.w + 7].z
      utof r27.w, r10.w
      sample_l_indexable(texturecubearray)(float,float,float,float) r16.yzw, r27.xyzw, t8.wxyz, s2, r9.w
      and r25.xzw, r16.yyzw, l(0x7fffffff, 0, 0x7fffffff, 0x7fffffff)
      ieq r25.xzw, r25.xxzw, l(0x7f800000, 0, 0x7f800000, 0x7f800000)
      or r9.w, r25.z, r25.x
      or r9.w, r25.w, r9.w
      movc r16.yzw, r9.wwww, l(0,1.000000,1.000000,0), r16.yyzw
      dp3 r30.x, r14.yzwy, r26.xyzx
      dp3 r30.y, r14.yzwy, r28.xyzx
      dp3 r30.z, r14.yzwy, r29.xyzx
      mad_sat r14.yzw, r30.xxyz, cb10[r7.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r30.xy, r14.yzyy, cb10[r7.w + 4].zwzz
      mul r30.z, r14.w, cb10[r7.w + 5].x
      add r14.yzw, r30.xxyz, cb10[r7.w + 5].yyzw
      dp3 r27.x, r12.xyzx, r26.xyzx
      dp3 r27.y, r12.xyzx, r28.xyzx
      dp3 r27.z, r12.xyzx, r29.xyzx
      lt r25.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r27.xxyz
      movc r18.z, r25.x, l(0), l(0.500000)
      add r26.xyz, r14.yzwy, r18.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r26.xyz, r26.xyzx, t17.xyzw, s4, l(0.000000)
      mul r28.xyz, r27.xyzx, r27.xyzx
      mul r28.xyz, r8.wwww, r28.xyzx
      movc r20.z, r25.z, l(0), l(0.500000)
      add r29.xyz, r14.yzwy, r20.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t18.xyzw, s4, l(0.000000)
      mul r29.xyz, r28.yyyy, r29.xyzx
      mad r26.xyz, r26.xyzx, r28.xxxx, r29.xyzx
      movc r21.z, r25.w, l(0), l(0.500000)
      add r14.yzw, r14.yyzw, r21.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r14.yzw, r14.yzwy, t19.wxyz, s4, l(0.000000)
      mad r14.yzw, r14.yyzw, r28.zzzz, r26.xxyz
      sample_l_indexable(texturecubearray)(float,float,float,float) r25.xzw, r27.xyzw, t8.xwyz, s2, l(6.000000)
      and r26.xyz, r25.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r26.xyz, r26.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r7.w, r26.y, r26.x
      or r7.w, r26.z, r7.w
      movc r25.xzw, r7.wwww, l(1.000000,0,1.000000,0), r25.xxzw
      mul r26.xyz, r14.yzwy, r25.xzwx
      dp3 r7.w, r26.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r22.xyz, r14.yzwy, r25.xzwx, r22.xyzx
      mul r9.w, r3.w, r7.w
      mul r14.yzw, r8.wwww, r16.yyzw
      dp3 r8.w, r14.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r7.w, r3.w, r7.w, r8.w
      div r7.w, r9.w, r7.w
      mov r26.x, r22.w
      mov r26.yz, r23.xxyx
      mad r14.yzw, r14.yyzw, r7.wwww, r26.xxyz
      mov r22.w, r14.y
      mov r23.xy, r14.zwzz
    else 
      mov r24.xyz, r23.xyzx
      mov r23.xyzw, r24.xyzw
    endif 
  endif 
  iadd r0.y, r0.y, l(1)
endloop 
mov r16.x, l(16)
mov r17.yz, l(0,0,1.000000,0)
mov r18.xy, l(0,0,0,0)
mov r20.xy, l(0,0,0,0)
mov r21.xy, l(0,0,0,0)
mov r14.yzw, r22.xxyz
mov r24.x, r22.w
mov r24.yz, r23.xxyx
mov r19.xy, r23.zwzz
mov r0.y, l(0)
loop 
  ieq r7.w, r0.y, l(2)
  breakc_nz r7.w
  movc r7.w, r0.y, r0.x, r13.y
  ult r8.w, r7.w, r6.w
  if_nz r8.w
    imul null, r7.w, r7.w, l(14)
    if_nz r2.z
      and r8.w, r19.y, l(15)
      imad r8.w, r8.w, l(20), l(880)
      add r16.yzw, cb1[24].xxyz, cb10[r7.w + 0].xxyz
      store_structured u2.xyzw, cb2[52].x, r8.w, r16.xyzw
    endif 
    iadd r25.y, r19.y, l(1)
    add r16.yzw, r11.xxyz, -cb10[r7.w + 0].xxyz
    and r8.w, l(0x0000ffff), cb10[r7.w + 7].z
    ubfe r9.w, l(6), l(25), cb10[r7.w + 7].z
    imul null, r10.w, r8.w, l(6)
    dp3 r13.w, cb11[r10.w + 0].xyzx, r16.yzwy
    add_sat r13.w, r13.w, cb11[r10.w + 0].w
    dp3 r17.w, cb11[r10.w + 1].xyzx, r16.yzwy
    add_sat r17.w, r17.w, cb11[r10.w + 1].w
    mul r13.w, r13.w, r17.w
    dp3 r17.w, cb11[r10.w + 2].xyzx, r16.yzwy
    add_sat r17.w, r17.w, cb11[r10.w + 2].w
    mul r13.w, r13.w, r17.w
    dp3 r17.w, cb11[r10.w + 3].xyzx, r16.yzwy
    add_sat r17.w, r17.w, cb11[r10.w + 3].w
    mul r13.w, r13.w, r17.w
    dp3 r17.w, cb11[r10.w + 4].xyzx, r16.yzwy
    add_sat r17.w, r17.w, cb11[r10.w + 4].w
    mul r13.w, r13.w, r17.w
    dp3 r17.w, cb11[r10.w + 5].xyzx, r16.yzwy
    add_sat r10.w, r17.w, cb11[r10.w + 5].w
    mul r17.x, r10.w, r13.w
    and r10.w, l(1), cb10[r7.w + 6].x
    movc r17.xw, r10.wwww, r17.xxxy, r17.zzzx
    mov r10.w, cb10[r7.w + 6].x
    mov r26.xy, r17.xwxx
    mov r13.w, l(1)
    loop 
      ige r18.w, r13.w, r9.w
      breakc_nz r18.w
      iadd r18.w, r8.w, r13.w
      imul null, r18.w, r18.w, l(6)
      dp3 r20.w, cb11[r18.w + 0].xyzx, r16.yzwy
      add_sat r20.w, r20.w, cb11[r18.w + 0].w
      mul r20.w, r20.w, r26.x
      dp3 r21.w, cb11[r18.w + 1].xyzx, r16.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 1].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 2].xyzx, r16.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 2].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 3].xyzx, r16.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 3].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 4].xyzx, r16.yzwy
      add_sat r21.w, r21.w, cb11[r18.w + 4].w
      mul r20.w, r20.w, r21.w
      dp3 r21.w, cb11[r18.w + 5].xyzx, r16.yzwy
      add_sat r18.w, r21.w, cb11[r18.w + 5].w
      mul r26.x, r18.w, r20.w
      ushr r21.w, r10.w, l(2)
      ubfe r24.w, l(1), l(2), r10.w
      and r25.z, r21.w, l(2)
      max r25.w, r26.x, r26.y
      mad r18.w, -r20.w, r18.w, l(1.000000)
      mul r18.w, r18.w, r26.y
      movc r19.w, r25.z, r18.w, r25.w
      movc r26.xy, r24.wwww, r26.xyxx, r19.zwzz
      iadd r13.w, r13.w, l(1)
      mov r10.w, r21.w
    endloop 
    add_sat r8.w, -r23.z, r26.y
    mul r9.w, r8.w, cb10[r7.w + 6].y
    lt r10.w, l(0.000000), r9.w
    if_nz r10.w
      and r10.w, r25.y, l(31)
      iadd r13.w, r10.w, l(-1)
      ult r13.w, r13.w, l(32)
      and r13.w, r2.z, r13.w
      if_nz r13.w
        imad r17.xw, r10.wwww, l(20, 0, 0, 20), l(860, 0, 0, 876)
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r10.w, cb2[52].x, r17.x, u2.xxxx
        or r10.w, r10.w, l(32)
        store_structured u2.x, cb2[52].x, r17.x, r10.w
        store_structured u2.x, cb2[52].x, r17.w, r9.w
      endif 
      iadd r19.y, r19.y, l(257)
      mad r19.x, r8.w, cb10[r7.w + 6].y, r19.x
      mul r8.w, r9.w, cb10[r7.w + 7].y
      mov r27.x, cb10[r7.w + 7].w
      mov r27.yz, cb10[r7.w + 8].xxyx
      dp3 r9.w, r15.xyzx, r27.xyzx
      dp3 r10.w, r16.yzwy, r27.xyzx
      add r10.w, r10.w, -cb10[r7.w + 8].z
      ge r13.w, r10.w, l(0.000000)
      max r10.w, r3.z, |r10.w|
      movc r10.w, r13.w, r10.w, -r10.w
      max r9.w, -r9.w, l(0.00000010)
      div r9.w, r10.w, r9.w
      min r9.w, |r9.w|, l(131072.000000)
      mov r27.x, cb10[r7.w + 8].w
      mov r27.yz, cb10[r7.w + 9].xxyx
      dp3 r10.w, r15.xyzx, r27.xyzx
      dp3 r13.w, r16.yzwy, r27.xyzx
      add r13.w, r13.w, -cb10[r7.w + 9].z
      ge r17.x, r13.w, l(0.000000)
      max r13.w, r3.z, |r13.w|
      movc r13.w, r17.x, r13.w, -r13.w
      max r10.w, -r10.w, l(0.00000010)
      div r10.w, r13.w, r10.w
      min r9.w, r9.w, |r10.w|
      mov r27.x, cb10[r7.w + 9].w
      mov r27.yz, cb10[r7.w + 10].xxyx
      dp3 r10.w, r15.xyzx, r27.xyzx
      dp3 r13.w, r16.yzwy, r27.xyzx
      add r13.w, r13.w, -cb10[r7.w + 10].z
      ge r17.x, r13.w, l(0.000000)
      max r13.w, r3.z, |r13.w|
      movc r13.w, r17.x, r13.w, -r13.w
      max r10.w, -r10.w, l(0.00000010)
      div r10.w, r13.w, r10.w
      min r9.w, r9.w, |r10.w|
      mov r27.x, cb10[r7.w + 10].w
      mov r27.yz, cb10[r7.w + 11].xxyx
      dp3 r10.w, r15.xyzx, r27.xyzx
      dp3 r13.w, r16.yzwy, r27.xyzx
      add r13.w, r13.w, -cb10[r7.w + 11].z
      ge r17.x, r13.w, l(0.000000)
      max r13.w, r3.z, |r13.w|
      movc r13.w, r17.x, r13.w, -r13.w
      max r10.w, -r10.w, l(0.00000010)
      div r10.w, r13.w, r10.w
      min r9.w, r9.w, |r10.w|
      mov r27.x, cb10[r7.w + 11].w
      mov r27.yz, cb10[r7.w + 12].xxyx
      dp3 r10.w, r15.xyzx, r27.xyzx
      dp3 r13.w, r16.yzwy, r27.xyzx
      add r13.w, r13.w, -cb10[r7.w + 12].z
      ge r17.x, r13.w, l(0.000000)
      max r13.w, r3.z, |r13.w|
      movc r13.w, r17.x, r13.w, -r13.w
      max r10.w, -r10.w, l(0.00000010)
      div r10.w, r13.w, r10.w
      min r9.w, r9.w, |r10.w|
      mov r27.x, cb10[r7.w + 12].w
      mov r27.yz, cb10[r7.w + 13].xxyx
      dp3 r10.w, r15.xyzx, r27.xyzx
      dp3 r13.w, r16.yzwy, r27.xyzx
      add r13.w, r13.w, -cb10[r7.w + 13].z
      ge r17.x, r13.w, l(0.000000)
      max r13.w, r3.z, |r13.w|
      movc r13.w, r17.x, r13.w, -r13.w
      max r10.w, -r10.w, l(0.00000010)
      div r10.w, r13.w, r10.w
      min r9.w, r9.w, |r10.w|
      add r27.x, r16.y, cb10[r7.w + 3].w
      add r27.yz, r16.zzwz, cb10[r7.w + 4].xxyx
      mad r26.xzw, r15.xxyz, r9.wwww, r27.xxyz
      dp3 r10.w, r26.xzwx, r26.xzwx
      sqrt r10.w, r10.w
      div r9.w, r9.w, r10.w
      add r9.w, r9.w, r9.w
      sqrt r9.w, r9.w
      mad r9.w, r2.w, l(5.000000), r9.w
      add r9.w, r9.w, l(-0.844800)
      mov r27.x, cb10[r7.w + 0].w
      mov r27.y, cb10[r7.w + 1].z
      mov r27.z, cb10[r7.w + 2].y
      dp3 r28.x, r26.xzwx, r27.xyzx
      mov r29.xy, cb10[r7.w + 1].xwxx
      mov r29.z, cb10[r7.w + 2].z
      dp3 r28.y, r26.xzwx, r29.xyzx
      mov r30.x, cb10[r7.w + 1].y
      mov r30.yz, cb10[r7.w + 2].xxwx
      dp3 r28.z, r26.xzwx, r30.xyzx
      ubfe r10.w, l(9), l(16), cb10[r7.w + 7].z
      utof r28.w, r10.w
      sample_l_indexable(texturecubearray)(float,float,float,float) r26.xzw, r28.xyzw, t8.xwyz, s2, r9.w
      and r31.xyz, r26.xzwx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r31.xyz, r31.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r9.w, r31.y, r31.x
      or r9.w, r31.z, r9.w
      movc r26.xzw, r9.wwww, l(1.000000,0,1.000000,0), r26.xxzw
      dp3 r31.x, r16.yzwy, r27.xyzx
      dp3 r31.y, r16.yzwy, r29.xyzx
      dp3 r31.z, r16.yzwy, r30.xyzx
      mad_sat r16.yzw, r31.xxyz, cb10[r7.w + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r31.xy, r16.yzyy, cb10[r7.w + 4].zwzz
      mul r31.z, r16.w, cb10[r7.w + 5].x
      add r16.yzw, r31.xxyz, cb10[r7.w + 5].yyzw
      dp3 r28.x, r12.xyzx, r27.xyzx
      dp3 r28.y, r12.xyzx, r29.xyzx
      dp3 r28.z, r12.xyzx, r30.xyzx
      lt r27.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r28.xyzx
      movc r18.z, r27.x, l(0), l(0.500000)
      add r29.xyz, r16.yzwy, r18.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t17.xyzw, s4, l(0.000000)
      mul r30.xyz, r28.xyzx, r28.xyzx
      mul r30.xyz, r8.wwww, r30.xyzx
      movc r20.z, r27.y, l(0), l(0.500000)
      add r27.xyw, r16.yzyw, r20.xyxz
      sample_l_indexable(texture3d)(float,float,float,float) r27.xyw, r27.xywx, t18.xywz, s4, l(0.000000)
      mul r27.xyw, r30.yyyy, r27.xyxw
      mad r27.xyw, r29.xyxz, r30.xxxx, r27.xyxw
      movc r21.z, r27.z, l(0), l(0.500000)
      add r16.yzw, r16.yyzw, r21.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r16.yzw, r16.yzwy, t19.wxyz, s4, l(0.000000)
      mad r16.yzw, r16.yyzw, r30.zzzz, r27.xxyw
      sample_l_indexable(texturecubearray)(float,float,float,float) r27.xyz, r28.xyzw, t8.xyzw, s2, l(6.000000)
      and r28.xyz, r27.xyzx, l(0x7fffffff, 0x7fffffff, 0x7fffffff, 0)
      ieq r28.xyz, r28.xyzx, l(0x7f800000, 0x7f800000, 0x7f800000, 0)
      or r7.w, r28.y, r28.x
      or r7.w, r28.z, r7.w
      movc r27.xyz, r7.wwww, l(1.000000,1.000000,0,0), r27.xyzx
      mul r28.xyz, r16.yzwy, r27.xyzx
      dp3 r7.w, r28.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r14.yzw, r16.yyzw, r27.xxyz, r14.yyzw
      mul r9.w, r3.w, r7.w
      mul r16.yzw, r8.wwww, r26.xxzw
      dp3 r8.w, r16.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r7.w, r3.w, r7.w, r8.w
      div r7.w, r9.w, r7.w
      mad r24.xyz, r16.yzwy, r7.wwww, r24.xyzx
    else 
      mov r25.x, r19.x
      mov r19.xy, r25.xyxx
    endif 
  endif 
  iadd r0.y, r0.y, l(1)
endloop 
ge r0.x, r23.z, l(1.000000)
bfi r0.y, l(8), l(0), r19.y, r23.w
movc r0.x, r0.x, r0.y, r19.y
max r0.y, r19.x, l(1.000000)
rcp r0.y, r0.y
mov_sat r19.x, r19.x
mul r16.xyz, r0.yyyy, r14.yzwy
mul r17.xyz, r0.yyyy, r24.xyzx
lt r2.w, r19.x, l(0.990000)
if_nz r2.w
  iadd r0.x, r0.x, l(256)
  add r2.w, -r19.x, l(1.000000)
  mul r3.z, r2.w, cb2[19].x
  add r18.xyz, r11.xyzx, -cb2[35].xyzx
  mul r19.x, r18.x, cb2[35].w
  mul r19.yz, r18.yyzy, cb2[36].xxyx
  add_sat r18.xyz, r19.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r19.xy, r18.xyxx, cb2[36].zwzz
  mul r19.z, r18.z, cb2[37].x
  add r18.xyz, r19.xyzx, cb2[37].yzwy
  lt r19.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
  movc r19.xyz, r19.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r19.w, l(0)
  add r20.xyz, r18.xyzx, r19.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
  mul r21.xyz, r12.xyzx, r12.xyzx
  mul r21.xyz, r3.zzzz, r21.xyzx
  add r22.xyz, r18.xyzx, r19.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t18.xyzw, s4, l(0.000000)
  mul r22.xyz, r21.yyyy, r22.xyzx
  mad r20.xyz, r20.xyzx, r21.xxxx, r22.xyzx
  add r18.xyz, r18.xyzx, r19.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t19.xyzw, s4, l(0.000000)
  mad r18.xyz, r18.xyzx, r21.zzzz, r20.xyzx
  mov r12.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r12.xyzw, t8.xyzw, s2, l(6.000000)
  mul r18.xyz, r18.xyzx, r19.xyzx
  dp3 r3.z, r18.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r16.xyz, r14.yzwy, r0.yyyy, r18.xyzx
  mov r15.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r14.yzw, r15.xyzw, t8.wxyz, s2, r3.y
  mad r0.y, cb2[19].x, r2.w, -r3.z
  mad r0.y, r2.y, r0.y, r3.z
  mad r17.xyz, r14.yzwy, r0.yyyy, r17.xyzx
endif 
add r0.y, r5.z, r2.x
log r0.y, |r0.y|
mul r0.y, r0.y, r1.w
exp r0.y, r0.y
add r0.y, r5.z, r0.y
add_sat r0.y, r0.y, l(-1.000000)
mul r3.yzw, r5.zzzz, r16.xxyz
and r14.yzw, r3.yyzw, r4.zzzz
mad r2.yw, r2.xxxy, l(0.000000, 0.984375, 0.000000, 0.984375), l(0.000000, 0.00781250, 0.000000, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r2.yw, r2.ywyy, t5.zxwy, s2, l(0.000000)
mul r17.xyz, r0.yyyy, r17.xyzx
mul r18.xyz, r2.yyyy, r17.xyzx
mul r17.xyz, r2.wwww, r17.xyzx
sqrt r0.y, r1.w
mad r0.y, r0.y, l(0.500000), l(0.500000)
mul r0.y, r0.y, r0.y
mul r2.y, r0.y, l(0.500000)
mad r0.y, -r0.y, l(0.500000), l(1.000000)
mad r2.w, r2.x, r0.y, r2.y
mul r0.y, r0.y, r2.w
mul r2.y, r2.w, r2.y
imul null, r2.w, r13.z, l(15)
ubfe r6.w, l(3), l(24), cb9[r2.w + 1].w
switch r6.w
  case l(4)
  if_nz r2.z
    add r19.yzw, cb1[24].xxyz, cb9[r2.w + 0].xxyz
    mov r19.x, l(2)
    store_structured u2.xyzw, cb2[52].x, l(112), r19.xyzw
  endif 
  lt r7.w, l(0.000000), cb9[r2.w + 6].y
  mov r19.xy, cb9[r2.w + 5].zwzz
  mov r19.z, cb9[r2.w + 6].x
  mad r13.yzw, -r19.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r2.w + 0].xxyz
  add r20.xyz, -r11.xyzx, r13.yzwy
  dp3 r8.w, r19.xyzx, r20.xyzx
  div_sat r9.w, -r8.w, cb9[r2.w + 6].y
  mad r21.xyz, r9.wwww, r19.xyzx, r13.yzwy
  movc r21.xyz, r7.wwww, r21.xyzx, cb9[r2.w + 0].xyzx
  add r21.xyz, -r11.xyzx, r21.xyzx
  dp3 r10.w, r21.xyzx, r21.xyzx
  rsq r12.w, r10.w
  mul r21.xyz, r12.wwww, r21.xyzx
  dp3 r12.w, r12.xyzx, r21.xyzx
  mov_sat r15.w, r12.w
  movc r15.w, r4.z, |r12.w|, r15.w
  lt r16.w, l(0.000000), r15.w
  if_nz r16.w
    sqrt r16.w, r10.w
    mul r17.w, cb9[r2.w + 3].x, cb9[r2.w + 3].x
    div r10.w, r17.w, r10.w
    min r10.w, r10.w, l(1.000000)
    mad_sat r21.xy, r16.wwww, cb9[r2.w + 2].xzxx, cb9[r2.w + 2].ywyy
    mul r21.zw, r21.xxxy, r21.xxxy
    mad r21.xy, r21.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
    mul r21.xy, r21.xyxx, r21.zwzz
    mul r10.w, r10.w, r21.x
    mul r10.w, r21.y, r10.w
    lt r16.w, l(0.000000), r10.w
    if_nz r16.w
      ubfe r16.w, l(3), l(27), cb9[r2.w + 1].w
      if_nz r2.z
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r17.w, cb2[52].x, l(112), u2.xxxx
        or r17.w, r17.w, l(4)
        store_structured u2.x, cb2[52].x, l(112), r17.w
        store_structured u2.x, cb2[52].x, l(128), r10.w
      endif 
      ine r16.w, r16.w, l(1)
      if_nz r16.w
        utof r21.xy, r1.yxyy
        dp2 r16.w, r21.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
        frc r16.w, r16.w
        mul r16.w, r16.w, l(52.982918)
        frc r16.w, r16.w
        mad r16.w, r16.w, l(6.28318548), cb1[70].w
        sincos r21.x, r22.x, r16.w
        mad r16.w, |r12.w|, l(-0.200000), l(0.400000)
        lt r17.w, r12.w, l(0.000000)
        and r17.w, r4.z, r17.w
        movc r16.w, r17.w, -r16.w, r16.w
        mad r21.yzw, r12.xxyz, r16.wwww, r11.xxyz
        add r21.yzw, r21.yyzw, -cb9[r2.w + 4].yyzw
        max r16.w, |r21.w|, |r21.z|
        max r16.w, r16.w, |r21.y|
        div r16.w, cb9[r2.w + 5].x, r16.w
        add r16.w, r16.w, cb9[r2.w + 5].y
        dp3 r17.w, r21.yzwy, r21.yzwy
        rsq r17.w, r17.w
        max r16.w, r16.w, l(0.00006104)
        and r18.w, l(0x0000ffff), cb9[r2.w + 1].w
        mov r23.x, -r13.x
        utof r24.w, r18.w
        mov r23.y, r14.x
        mov r23.z, r13.x
        mov r18.w, l(0)
        mov r19.w, l(0)
        loop 
          ige r20.w, r19.w, l(8)
          breakc_nz r20.w
          dp2 r22.y, icb[r19.w + 0].yxyy, r23.xyxx
          dp2 r22.z, icb[r19.w + 0].yxyy, r23.yzyy
          mul r25.yz, r22.yyzy, cb9[r2.w + 3].yyyy
          mul r25.x, r22.x, r25.y
          mul r25.w, r21.x, r25.y
          mad r24.xyz, r21.yzwy, r17.wwww, r25.xzwx
          sample_c_lz_indexable(texturecubearray)(float,float,float,float) r20.w, r24.xyzw, t10.xxxx, s13, r16.w
          mad r18.w, r20.w, l(0.125000), r18.w
          iadd r19.w, r19.w, l(1)
        endloop 
      else 
        mov r18.w, l(1.000000)
      endif 
      mul r10.w, r10.w, r18.w
      lt r16.w, l(0.000000), r10.w
      if_nz r16.w
        mul r16.w, r1.z, cb9[r2.w + 1].z
        mul r16.w, r16.w, l(0.250000)
        dp3 r17.w, r19.xyzx, r15.xyzx
        dp3 r15.x, r15.xyzx, r20.xyzx
        mad r15.y, -r17.w, r17.w, cb9[r2.w + 6].y
        mad r8.w, r17.w, r15.x, -r8.w
        div_sat r8.w, r8.w, r15.y
        div r15.x, r15.y, cb9[r2.w + 6].y
        mul r15.x, r15.x, l(10.000000)
        min r15.x, r15.x, l(1.000000)
        add r8.w, -r9.w, r8.w
        mad r8.w, r15.x, r8.w, r9.w
        mad r13.yzw, r8.wwww, r19.xxyz, r13.yyzw
        movc r13.yzw, r7.wwww, r13.yyzw, cb9[r2.w + 0].xxyz
        add r13.yzw, -r11.xxyz, r13.yyzw
        dp3 r7.w, r13.yzwy, r13.yzwy
        rsq r7.w, r7.w
        mul r15.xyz, r7.wwww, r13.yzwy
        ubfe r8.w, l(4), l(16), cb9[r2.w + 1].w
        ult r9.w, l(0), r8.w
        and r9.w, r3.x, r9.w
        if_nz r9.w
          iadd r8.w, r8.w, cb2[0].x
          imad r8.w, r8.w, l(15), l(-15)
          mad r9.w, |r12.w|, l(-0.200000), l(0.400000)
          lt r17.w, r12.w, l(0.000000)
          and r17.w, r4.z, r17.w
          movc r9.w, r17.w, -r9.w, r9.w
          mad r19.xyz, r12.xyzx, r9.wwww, r11.xyzx
          mov r20.xyz, cb9[r8.w + 6].yzwy
          mov r20.w, cb9[r8.w + 7].x
          mov r19.w, l(1.000000)
          dp4 r9.w, r20.xyzw, r19.xyzw
          mov r20.xyz, cb9[r8.w + 7].yzwy
          mov r20.w, cb9[r8.w + 8].x
          dp4 r17.w, r20.xyzw, r19.xyzw
          lt r18.w, r17.w, r9.w
          if_z r18.w
            mov r20.xyz, cb9[r8.w + 4].yzwy
            mov r20.w, cb9[r8.w + 5].x
            dp4 r20.x, r20.xyzw, r19.xyzw
            mov r21.xyz, cb9[r8.w + 5].yzwy
            mov r21.w, cb9[r8.w + 6].x
            dp4 r20.y, r21.xyzw, r19.xyzw
            div r19.xy, r20.xyxx, r17.wwww
            mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r20.x, r19.x, cb9[r8.w + 9].w
            add r20.y, r19.y, cb9[r8.w + 10].x
            mul r19.xy, r20.xyxx, cb9[r8.w + 9].yzyy
            div r19.zw, cb9[r8.w + 3].yyyy, cb9[r8.w + 8].yyyw
            add r20.xy, -r19.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r20.xy, r19.xyxx, r20.xyxx
            ge r19.zw, r19.zzzw, r19.xxxy
            or r19.zw, r19.zzzw, r20.xxxy
            or r19.z, r19.w, r19.z
            if_z r19.z
              mov_sat r19.xy, r19.xyxx
              mad r20.x, r19.x, cb9[r8.w + 8].y, cb9[r8.w + 8].z
              mad r20.y, r19.y, cb9[r8.w + 8].w, cb9[r8.w + 9].x
              mul r19.x, r17.w, cb9[r8.w + 10].z
              mad r9.w, cb9[r8.w + 10].y, r17.w, r9.w
              div r9.w, r9.w, r19.x
            endif 
          else 
            mov r19.z, l(-1)
          endif 
          or r17.w, r18.w, r19.z
          if_z r17.w
            max r9.w, r9.w, l(0.00006104)
            and r17.w, l(0x0000ffff), cb9[r8.w + 1].w
            if_nz cb2[58].y
              mov r19.x, -r13.x
              utof r21.z, r17.w
              mov r19.y, r14.x
              mov r19.z, r13.x
              mov r18.w, l(0)
              mov r19.w, l(0)
              loop 
                ige r20.w, r19.w, l(8)
                breakc_nz r20.w
                dp2 r22.x, icb[r19.w + 0].yxyy, r19.xyxx
                dp2 r22.y, icb[r19.w + 0].yxyy, r19.yzyy
                mad r21.xy, r22.xyxx, cb9[r8.w + 3].yyyy, r20.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r21.xyzx, t9.xxxx, s13, r9.w
                mad r18.w, r20.w, l(0.125000), r18.w
                iadd r19.w, r19.w, l(1)
              endloop 
            else 
              utof r20.z, r17.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r20.xyzx, t9.xxxx, s13, r9.w
            endif 
            mul r8.w, r18.w, r18.w
            mul r8.w, r18.w, r8.w
          else 
            mov r8.w, l(1.000000)
          endif 
          mul r10.w, r8.w, r10.w
        else 
          ubfe r8.w, l(4), l(20), cb9[r2.w + 1].w
          ult r9.w, l(0), r8.w
          not r17.w, r3.x
          and r9.w, r9.w, r17.w
          if_nz r9.w
            iadd r8.w, r8.w, cb2[0].x
            imad r8.w, r8.w, l(15), l(-15)
            mad r9.w, |r12.w|, l(-0.200000), l(0.400000)
            lt r17.w, r12.w, l(0.000000)
            and r17.w, r4.z, r17.w
            movc r9.w, r17.w, -r9.w, r9.w
            mad r19.xyz, r12.xyzx, r9.wwww, r11.xyzx
            mov r20.xyz, cb9[r8.w + 6].yzwy
            mov r20.w, cb9[r8.w + 7].x
            mov r19.w, l(1.000000)
            dp4 r9.w, r20.xyzw, r19.xyzw
            mov r20.xyz, cb9[r8.w + 7].yzwy
            mov r20.w, cb9[r8.w + 8].x
            dp4 r17.w, r20.xyzw, r19.xyzw
            lt r18.w, r17.w, r9.w
            if_z r18.w
              mov r20.xyz, cb9[r8.w + 4].yzwy
              mov r20.w, cb9[r8.w + 5].x
              dp4 r20.x, r20.xyzw, r19.xyzw
              mov r21.xyz, cb9[r8.w + 5].yzwy
              mov r21.w, cb9[r8.w + 6].x
              dp4 r20.y, r21.xyzw, r19.xyzw
              div r19.xy, r20.xyxx, r17.wwww
              mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r20.x, r19.x, cb9[r8.w + 9].w
              add r20.y, r19.y, cb9[r8.w + 10].x
              mul r19.xy, r20.xyxx, cb9[r8.w + 9].yzyy
              div r19.zw, cb9[r8.w + 3].yyyy, cb9[r8.w + 8].yyyw
              add r20.xy, -r19.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r20.xy, r19.xyxx, r20.xyxx
              ge r19.zw, r19.zzzw, r19.xxxy
              or r19.zw, r19.zzzw, r20.xxxy
              or r19.z, r19.w, r19.z
              if_z r19.z
                mov_sat r19.xy, r19.xyxx
                mad r20.x, r19.x, cb9[r8.w + 8].y, cb9[r8.w + 8].z
                mad r20.y, r19.y, cb9[r8.w + 8].w, cb9[r8.w + 9].x
                mul r19.x, r17.w, cb9[r8.w + 10].z
                mad r9.w, cb9[r8.w + 10].y, r17.w, r9.w
                div r9.w, r9.w, r19.x
              endif 
            else 
              mov r19.z, l(-1)
            endif 
            or r17.w, r18.w, r19.z
            if_z r17.w
              max r9.w, r9.w, l(0.00006104)
              and r17.w, l(0x0000ffff), cb9[r8.w + 1].w
              if_nz cb2[58].y
                mov r19.x, -r13.x
                utof r21.z, r17.w
                mov r19.y, r14.x
                mov r19.z, r13.x
                mov r18.w, l(0)
                mov r19.w, l(0)
                loop 
                  ige r20.w, r19.w, l(8)
                  breakc_nz r20.w
                  dp2 r22.x, icb[r19.w + 0].yxyy, r19.xyxx
                  dp2 r22.y, icb[r19.w + 0].yxyy, r19.yzyy
                  mad r21.xy, r22.xyxx, cb9[r8.w + 3].yyyy, r20.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r21.xyzx, t9.xxxx, s13, r9.w
                  mad r18.w, r20.w, l(0.125000), r18.w
                  iadd r19.w, r19.w, l(1)
                endloop 
              else 
                utof r20.z, r17.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r20.xyzx, t9.xxxx, s13, r9.w
              endif 
              mul r8.w, r18.w, r18.w
              mul r8.w, r18.w, r8.w
            else 
              mov r8.w, l(1.000000)
            endif 
            mul r10.w, r8.w, r10.w
          endif 
        endif 
        mad r8.w, -r2.x, l(0.500000), l(1.000000)
        mad r8.w, -r15.w, r8.w, l(1.000000)
        mul r8.w, r8.w, r8.w
        mad r8.w, -r8.w, l(0.620000), l(0.620000)
        add r8.w, -r15.w, r8.w
        mad r8.w, r1.w, r8.w, r15.w
        mul r8.w, r10.w, r8.w
        mov r19.x, cb9[r2.w + 0].w
        mov r19.yz, cb9[r2.w + 1].xxyx
        mul r20.xyz, r8.wwww, r19.xyzx
        lt r9.w, l(0.000000), r12.w
        mad r20.xyz, r16.xyzx, r5.zzzz, r20.xyzx
        dp3_sat r12.w, r12.xyzx, r15.xyzx
        mad r13.yzw, r13.yyzw, r7.wwww, r5.xxyw
        dp3 r7.w, r13.yzwy, r13.yzwy
        rsq r7.w, r7.w
        mul r13.yzw, r7.wwww, r13.yyzw
        dp3 r7.w, r13.yzwy, r5.xywx
        dp3 r13.y, r12.xyzx, r13.yzwy
        mad r13.z, |r13.y|, r1.z, -|r13.y|
        mad r13.y, |r13.y|, r13.z, l(1.000000)
        mad r13.z, r12.w, r0.y, r2.y
        mul r13.y, r13.y, r13.y
        mul r13.y, r13.z, r13.y
        rcp r13.y, r13.y
        mul r12.w, r16.w, r12.w
        mul r12.w, r12.w, r13.y
        mul r12.w, r10.w, r12.w
        mad r13.yzw, r12.wwww, r19.xxyz, r17.xxyz
        add_sat r7.w, -r7.w, l(1.000000)
        mul r15.x, r7.w, r7.w
        mul r15.x, r15.x, r15.x
        mul r7.w, r7.w, r15.x
        mul r7.w, r7.w, r12.w
        mad r15.xyz, r7.wwww, r19.xyzx, r18.xyzx
        mad r19.xyz, r8.wwww, r19.xyzx, r14.yzwy
        and r19.xyz, r4.zzzz, r19.xyzx
        movc r3.yzw, r9.wwww, r20.xxyz, r3.yyzw
        movc r14.yzw, r9.wwww, r14.yyzw, r19.xxyz
        movc r18.xyz, r9.wwww, r15.xyzx, r18.xyzx
        movc r17.xyz, r9.wwww, r13.yzwy, r17.xyzx
        if_nz r2.z
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r7.w, cb2[52].x, l(112), u2.xxxx
          or r7.w, r7.w, l(8)
          store_structured u2.x, cb2[52].x, l(112), r7.w
          store_structured u2.x, cb2[52].x, l(132), r10.w
        endif 
        mov r6.w, l(0x00010101)
      else 
        mov r6.w, l(257)
      endif 
    else 
      mov r6.w, l(1)
    endif 
  else 
    mov r6.w, l(1)
  endif 
  break 
  case l(2)
  if_nz r2.z
    add r15.yzw, cb1[24].xxyz, cb9[r2.w + 0].xxyz
    mov r15.x, l(2)
    store_structured u2.xyzw, cb2[52].x, l(112), r15.xyzw
  endif 
  add r15.xy, -r11.xyxx, cb9[r2.w + 3].zwzz
  add r15.z, -r11.z, cb9[r2.w + 4].x
  dp3 r7.w, r15.xyzx, r15.xyzx
  rsq r7.w, r7.w
  mul r13.yzw, r7.wwww, r15.xxyz
  dp3 r8.w, r12.xyzx, r13.yzwy
  mov_sat r9.w, r8.w
  movc r10.w, r4.z, |r8.w|, r9.w
  lt r12.w, l(0.000000), r10.w
  if_nz r12.w
    mov r19.xyz, cb9[r2.w + 7].yzwy
    mov r19.w, cb9[r2.w + 8].x
    mov r11.w, l(1.000000)
    dp4 r12.w, r19.xyzw, r11.xyzw
    lt r13.y, r12.w, l(1.000000)
    if_nz r13.y
      mov r13.yzw, l(0,1.000000,1.000000,1.000000)
      mov r15.w, l(0)
    else 
      add r20.xyz, -r11.xyzx, cb9[r2.w + 0].xyzx
      mul r16.w, cb9[r2.w + 3].x, cb9[r2.w + 3].x
      dp3 r17.w, r20.xyzx, r20.xyzx
      div r16.w, r16.w, r17.w
      min r16.w, r16.w, l(1.000000)
      mad_sat r20.xy, r12.wwww, cb9[r2.w + 2].xzxx, cb9[r2.w + 2].ywyy
      mul r20.zw, r20.xxxy, r20.xxxy
      mad r20.xy, r20.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      mul r20.xy, r20.xyxx, r20.zwzz
      mul r16.w, r16.w, r20.x
      mul r16.w, r20.y, r16.w
      mov r20.xyz, cb9[r2.w + 4].yzwy
      mov r20.w, cb9[r2.w + 5].x
      dp4 r20.x, r20.xyzw, r11.xyzw
      mov r21.xyz, cb9[r2.w + 5].yzwy
      mov r21.w, cb9[r2.w + 6].x
      dp4 r20.y, r21.xyzw, r11.xyzw
      div r20.xy, r20.xyxx, r12.wwww
      lt r11.w, cb9[r2.w + 10].w, l(0.00048828)
      if_nz r11.w
        mad_sat r21.xy, |r20.xyxx|, cb9[r2.w + 12].xyxx, cb9[r2.w + 12].zwzz
        mul r21.zw, r21.xxxy, r21.xxxy
        mad r21.xy, r21.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r21.xy, r21.xyxx, r21.zwzz
        mul r11.w, r21.y, r21.x
      else 
        mul_sat r21.xyzw, |r20.yyxx|, cb9[r2.w + 11].xyzw
        log r21.xyzw, r21.xyzw
        mul r21.xyzw, r21.xyzw, cb9[r2.w + 12].zzzz
        exp r21.xyzw, r21.xyzw
        add r21.xy, r21.zwzz, r21.xyxx
        log r21.xy, r21.xyxx
        mul r21.xy, r21.xyxx, cb9[r2.w + 12].wwww
        exp r21.xy, r21.xyxx
        mul r12.w, r21.x, cb9[r2.w + 12].x
        mad r17.w, cb9[r2.w + 12].y, r21.y, l(-1.000000)
        mad r12.w, cb9[r2.w + 12].y, r21.y, -r12.w
        div_sat r12.w, r17.w, r12.w
        mul r17.w, r12.w, r12.w
        mad r12.w, r12.w, l(-2.000000), l(3.000000)
        mul r11.w, r12.w, r17.w
      endif 
      mul r15.w, r11.w, r16.w
      and r11.w, l(255), cb9[r2.w + 14].w
      if_nz r11.w
        mov r20.z, l(1.000000)
        dp3 r12.w, cb9[r2.w + 13].xyzx, r20.xyzx
        mov r21.x, cb9[r2.w + 13].w
        mov r21.yz, cb9[r2.w + 14].xxyx
        dp3 r16.w, r21.xyzx, r20.xyzx
        frc r20.x, r12.w
        frc r20.y, r16.w
        iadd r11.w, r11.w, l(-1)
        utof r20.z, r11.w
        sample_l_indexable(texture2darray)(float,float,float,float) r13.yzw, r20.xyzx, t20.wxyz, s2, l(0.000000)
      else 
        mov r13.yzw, l(0,1.000000,1.000000,1.000000)
      endif 
    endif 
    mov r20.x, cb9[r2.w + 0].w
    mov r20.yz, cb9[r2.w + 1].xxyx
    mul r13.yzw, r13.yyzw, r20.xxyz
    lt r11.w, l(0.000000), r15.w
    if_nz r11.w
      ubfe r11.w, l(3), l(27), cb9[r2.w + 1].w
      if_nz r2.z
        ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r12.w, cb2[52].x, l(112), u2.xxxx
        or r12.w, r12.w, l(4)
        store_structured u2.x, cb2[52].x, l(112), r12.w
        store_structured u2.x, cb2[52].x, l(128), r15.w
      endif 
      ine r11.w, r11.w, l(1)
      if_nz r11.w
        mad r11.w, |r8.w|, l(-0.200000), l(0.400000)
        lt r12.w, r8.w, l(0.000000)
        and r12.w, r4.z, r12.w
        movc r11.w, r12.w, -r11.w, r11.w
        mad r20.xyz, r12.xyzx, r11.wwww, r11.xyzx
        mov r21.xyz, cb9[r2.w + 6].yzwy
        mov r21.w, cb9[r2.w + 7].x
        mov r20.w, l(1.000000)
        dp4 r11.w, r21.xyzw, r20.xyzw
        dp4 r12.w, r19.xyzw, r20.xyzw
        ge r16.w, r12.w, r11.w
        if_nz r16.w
          mov r19.xyz, cb9[r2.w + 4].yzwy
          mov r19.w, cb9[r2.w + 5].x
          dp4 r19.x, r19.xyzw, r20.xyzw
          mov r21.xyz, cb9[r2.w + 5].yzwy
          mov r21.w, cb9[r2.w + 6].x
          dp4 r19.y, r21.xyzw, r20.xyzw
          div r19.xy, r19.xyxx, r12.wwww
          mad_sat r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
          mad r20.x, r19.x, cb9[r2.w + 8].y, cb9[r2.w + 8].z
          mad r20.y, r19.y, cb9[r2.w + 8].w, cb9[r2.w + 9].x
          div r11.w, r11.w, r12.w
          max r11.w, r11.w, l(0.00006104)
          and r12.w, l(0x0000ffff), cb9[r2.w + 1].w
          if_nz cb2[58].y
            mov r19.x, -r13.x
            utof r21.z, r12.w
            mov r19.y, r14.x
            mov r19.z, r13.x
            mov r16.w, l(0)
            mov r17.w, l(0)
            loop 
              ige r18.w, r17.w, l(8)
              breakc_nz r18.w
              dp2 r22.x, icb[r17.w + 0].yxyy, r19.xyxx
              dp2 r22.y, icb[r17.w + 0].yxyy, r19.yzyy
              mad r21.xy, r22.xyxx, cb9[r2.w + 3].yyyy, r20.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r21.xyzx, t9.xxxx, s13, r11.w
              mad r16.w, r18.w, l(0.125000), r16.w
              iadd r17.w, r17.w, l(1)
            endloop 
          else 
            utof r20.z, r12.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r20.xyzx, t9.xxxx, s13, r11.w
          endif 
          mul r11.w, r16.w, r16.w
          mul r11.w, r16.w, r11.w
        else 
          mov r11.w, l(1.000000)
        endif 
      else 
        mov r11.w, l(1.000000)
      endif 
      mul r11.w, r11.w, r15.w
      lt r12.w, l(0.000000), r11.w
      if_nz r12.w
        mul r12.w, r1.z, cb9[r2.w + 1].z
        mul r12.w, r9.w, r12.w
        ubfe r15.w, l(4), l(16), cb9[r2.w + 1].w
        ult r16.w, l(0), r15.w
        and r16.w, r3.x, r16.w
        if_nz r16.w
          iadd r15.w, r15.w, cb2[0].x
          imad r15.w, r15.w, l(15), l(-15)
          mad r16.w, |r8.w|, l(-0.200000), l(0.400000)
          lt r17.w, r8.w, l(0.000000)
          and r17.w, r4.z, r17.w
          movc r16.w, r17.w, -r16.w, r16.w
          mad r19.xyz, r12.xyzx, r16.wwww, r11.xyzx
          mov r20.xyz, cb9[r15.w + 6].yzwy
          mov r20.w, cb9[r15.w + 7].x
          mov r19.w, l(1.000000)
          dp4 r16.w, r20.xyzw, r19.xyzw
          mov r20.xyz, cb9[r15.w + 7].yzwy
          mov r20.w, cb9[r15.w + 8].x
          dp4 r17.w, r20.xyzw, r19.xyzw
          lt r18.w, r17.w, r16.w
          if_z r18.w
            mov r20.xyz, cb9[r15.w + 4].yzwy
            mov r20.w, cb9[r15.w + 5].x
            dp4 r20.x, r20.xyzw, r19.xyzw
            mov r21.xyz, cb9[r15.w + 5].yzwy
            mov r21.w, cb9[r15.w + 6].x
            dp4 r20.y, r21.xyzw, r19.xyzw
            div r19.xy, r20.xyxx, r17.wwww
            mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r20.x, r19.x, cb9[r15.w + 9].w
            add r20.y, r19.y, cb9[r15.w + 10].x
            mul r19.xy, r20.xyxx, cb9[r15.w + 9].yzyy
            div r19.zw, cb9[r15.w + 3].yyyy, cb9[r15.w + 8].yyyw
            add r20.xy, -r19.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
            ge r20.xy, r19.xyxx, r20.xyxx
            ge r19.zw, r19.zzzw, r19.xxxy
            or r19.zw, r19.zzzw, r20.xxxy
            or r19.z, r19.w, r19.z
            if_z r19.z
              mov_sat r19.xy, r19.xyxx
              mad r20.x, r19.x, cb9[r15.w + 8].y, cb9[r15.w + 8].z
              mad r20.y, r19.y, cb9[r15.w + 8].w, cb9[r15.w + 9].x
              mul r19.x, r17.w, cb9[r15.w + 10].z
              mad r16.w, cb9[r15.w + 10].y, r17.w, r16.w
              div r16.w, r16.w, r19.x
            endif 
          else 
            mov r19.z, l(-1)
          endif 
          or r17.w, r18.w, r19.z
          if_z r17.w
            max r16.w, r16.w, l(0.00006104)
            and r17.w, l(0x0000ffff), cb9[r15.w + 1].w
            if_nz cb2[58].y
              mov r19.x, -r13.x
              utof r21.z, r17.w
              mov r19.y, r14.x
              mov r19.z, r13.x
              mov r18.w, l(0)
              mov r19.w, l(0)
              loop 
                ige r20.w, r19.w, l(8)
                breakc_nz r20.w
                dp2 r22.x, icb[r19.w + 0].yxyy, r19.xyxx
                dp2 r22.y, icb[r19.w + 0].yxyy, r19.yzyy
                mad r21.xy, r22.xyxx, cb9[r15.w + 3].yyyy, r20.xyxx
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.w, r21.xyzx, t9.xxxx, s13, r16.w
                mad r18.w, r20.w, l(0.125000), r18.w
                iadd r19.w, r19.w, l(1)
              endloop 
            else 
              utof r20.z, r17.w
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.w, r20.xyzx, t9.xxxx, s13, r16.w
            endif 
            mul r15.w, r18.w, r18.w
            mul r15.w, r18.w, r15.w
          else 
            mov r15.w, l(1.000000)
          endif 
          mul r11.w, r11.w, r15.w
        else 
          ubfe r2.w, l(4), l(20), cb9[r2.w + 1].w
          ult r15.w, l(0), r2.w
          not r3.x, r3.x
          and r3.x, r3.x, r15.w
          if_nz r3.x
            iadd r2.w, r2.w, cb2[0].x
            imad r2.w, r2.w, l(15), l(-15)
            mad r3.x, |r8.w|, l(-0.200000), l(0.400000)
            lt r15.w, r8.w, l(0.000000)
            and r15.w, r4.z, r15.w
            movc r3.x, r15.w, -r3.x, r3.x
            mad r19.xyz, r12.xyzx, r3.xxxx, r11.xyzx
            mov r20.xyz, cb9[r2.w + 6].yzwy
            mov r20.w, cb9[r2.w + 7].x
            mov r19.w, l(1.000000)
            dp4 r3.x, r20.xyzw, r19.xyzw
            mov r20.xyz, cb9[r2.w + 7].yzwy
            mov r20.w, cb9[r2.w + 8].x
            dp4 r15.w, r20.xyzw, r19.xyzw
            lt r16.w, r15.w, r3.x
            if_z r16.w
              mov r20.xyz, cb9[r2.w + 4].yzwy
              mov r20.w, cb9[r2.w + 5].x
              dp4 r20.x, r20.xyzw, r19.xyzw
              mov r21.xyz, cb9[r2.w + 5].yzwy
              mov r21.w, cb9[r2.w + 6].x
              dp4 r20.y, r21.xyzw, r19.xyzw
              div r19.xy, r20.xyxx, r15.wwww
              mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r20.x, r19.x, cb9[r2.w + 9].w
              add r20.y, r19.y, cb9[r2.w + 10].x
              mul r19.xy, r20.xyxx, cb9[r2.w + 9].yzyy
              div r19.zw, cb9[r2.w + 3].yyyy, cb9[r2.w + 8].yyyw
              add r20.xy, -r19.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
              ge r20.xy, r19.xyxx, r20.xyxx
              ge r19.zw, r19.zzzw, r19.xxxy
              or r19.zw, r19.zzzw, r20.xxxy
              or r17.w, r19.w, r19.z
              if_z r17.w
                mov_sat r19.xy, r19.xyxx
                mad r20.x, r19.x, cb9[r2.w + 8].y, cb9[r2.w + 8].z
                mad r20.y, r19.y, cb9[r2.w + 8].w, cb9[r2.w + 9].x
                mul r18.w, r15.w, cb9[r2.w + 10].z
                mad r3.x, cb9[r2.w + 10].y, r15.w, r3.x
                div r3.x, r3.x, r18.w
              endif 
            else 
              mov r17.w, l(-1)
            endif 
            or r15.w, r16.w, r17.w
            if_z r15.w
              max r3.x, r3.x, l(0.00006104)
              and r15.w, l(0x0000ffff), cb9[r2.w + 1].w
              if_nz cb2[58].y
                mov r19.x, -r13.x
                utof r21.z, r15.w
                mov r19.y, r14.x
                mov r19.z, r13.x
                mov r13.x, l(0)
                mov r14.x, l(0)
                loop 
                  ige r16.w, r14.x, l(8)
                  breakc_nz r16.w
                  dp2 r22.x, icb[r14.x + 0].yxyy, r19.xyxx
                  dp2 r22.y, icb[r14.x + 0].yxyy, r19.yzyy
                  mad r21.xy, r22.xyxx, cb9[r2.w + 3].yyyy, r20.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.w, r21.xyzx, t9.xxxx, s13, r3.x
                  mad r13.x, r16.w, l(0.125000), r13.x
                  iadd r14.x, r14.x, l(1)
                endloop 
              else 
                utof r20.z, r15.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.x, r20.xyzx, t9.xxxx, s13, r3.x
              endif 
              mul r2.w, r13.x, r13.x
              mul r2.w, r13.x, r2.w
            else 
              mov r2.w, l(1.000000)
            endif 
            mul r11.w, r2.w, r11.w
          endif 
        endif 
        mad r2.x, -r2.x, l(0.500000), l(1.000000)
        mad r2.x, -r10.w, r2.x, l(1.000000)
        mul r2.x, r2.x, r2.x
        mad r2.x, -r2.x, l(0.620000), l(0.620000)
        add r2.x, -r10.w, r2.x
        mad r1.w, r1.w, r2.x, r10.w
        mul r1.w, r11.w, r1.w
        mul r19.xyz, r13.yzwy, r1.wwww
        lt r2.x, l(0.000000), r8.w
        mad r16.xyz, r16.xyzx, r5.zzzz, r19.xyzx
        mad r15.xyz, r15.xyzx, r7.wwww, r5.xywx
        dp3 r2.w, r15.xyzx, r15.xyzx
        rsq r2.w, r2.w
        mul r15.xyz, r2.wwww, r15.xyzx
        dp3 r2.w, r15.xyzx, r5.xywx
        dp3 r3.x, r12.xyzx, r15.xyzx
        mad r1.z, |r3.x|, r1.z, -|r3.x|
        mad r1.z, |r3.x|, r1.z, l(1.000000)
        mad r0.y, r9.w, r0.y, r2.y
        mul r1.z, r1.z, r1.z
        mul r0.y, r0.y, r1.z
        rcp r0.y, r0.y
        mul r0.y, r12.w, r0.y
        mul r0.y, r0.y, r11.w
        mul r0.y, r0.y, l(0.250000)
        mad r5.xyz, r0.yyyy, r13.yzwy, r17.xyzx
        add_sat r1.z, -r2.w, l(1.000000)
        mul r2.y, r1.z, r1.z
        mul r2.y, r2.y, r2.y
        mul r1.z, r1.z, r2.y
        mul r0.y, r0.y, r1.z
        mad r12.xyz, r0.yyyy, r13.yzwy, r18.xyzx
        mad r13.xyz, r1.wwww, r13.yzwy, r14.yzwy
        and r13.xyz, r4.zzzz, r13.xyzx
        movc r3.yzw, r2.xxxx, r16.xxyz, r3.yyzw
        movc r14.yzw, r2.xxxx, r14.yyzw, r13.xxyz
        movc r18.xyz, r2.xxxx, r12.xyzx, r18.xyzx
        movc r17.xyz, r2.xxxx, r5.xyzx, r17.xyzx
        if_nz r2.z
          ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r0.y, cb2[52].x, l(112), u2.xxxx
          or r0.y, r0.y, l(8)
          store_structured u2.x, cb2[52].x, l(112), r0.y
          store_structured u2.x, cb2[52].x, l(132), r11.w
        endif 
        mov r6.w, l(0x00010101)
      else 
        mov r6.w, l(257)
      endif 
    else 
      mov r6.w, l(1)
    endif 
  else 
    mov r6.w, l(1)
  endif 
  break 
  default 
  mov r6.w, l(0)
  break 
endswitch 
mad r5.xyz, r4.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.y, r5.y
mad r2.xyw, r7.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r1.z, r2.x
ieq r1.z, r0.y, r1.z
movc r1.zw, r1.zzzz, r2.yyyw, l(0,0,-1.000000,0)
mad r2.xyw, r8.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r2.x, r2.x
ieq r2.x, r0.y, r2.x
movc r2.xy, r2.xxxx, r2.ywyy, l(-1.000000,0,0,0)
mad r4.xyw, r9.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r2.w, r4.x
ieq r2.w, r0.y, r2.w
movc r4.xy, r2.wwww, r4.ywyy, l(-1.000000,0,0,0)
mad r7.xyz, r10.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r2.w, r7.x
ieq r0.y, r0.y, r2.w
movc r7.xy, r0.yyyy, r7.yzyy, l(-1.000000,0,0,0)
mov r8.x, r1.z
mov r8.y, r2.x
mov r8.z, r4.x
mov r8.w, r7.x
add r8.xyzw, -r5.xxxx, r8.xyzw
ge r8.xyzw, |r8.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r8.xyzw, r8.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.y, r8.y, r8.x
add r0.y, r8.z, r0.y
add r0.y, r8.w, r0.y
mul r1.z, r2.y, r8.y
mad r1.z, r8.x, r1.w, r1.z
mad r1.z, r8.z, r4.y, r1.z
mad r1.z, r8.w, r7.y, r1.z
div r5.w, r1.z, r0.y
ge r0.y, l(0.000000), r0.y
movc r5.yz, r0.yyyy, l(0,0,0,0), r5.zzwz
and r1.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.y, r1.w, r1.z
movc r2.xyw, r0.yyyy, r5.xyxz, r5.xzxy
mad r0.y, -r2.w, l(0.500000), r2.x
add r5.y, r0.y, r2.w
mad r5.z, -r2.y, l(0.500000), r0.y
add r5.x, r2.y, r5.z
mul r2.xyw, r6.xyxz, r3.yzyw
mad r2.xyw, r14.yzyw, r5.xyxz, r2.xyxw
mul r4.xyw, r18.xyxz, l(0.960000, 0.960000, 0.000000, 0.960000)
mad r4.xyw, r17.xyxz, l(0.040000, 0.040000, 0.000000, 0.040000), r4.xyxw
add r2.xyw, r2.xyxw, r4.xyxw
add r4.xyw, -r5.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
mul r4.xyw, r4.xyxw, r18.xyxz
mad r4.xyw, r17.xyxz, r5.xyxz, r4.xyxw
mad r3.xyz, r3.yzwy, r6.xyzx, r4.xywx
movc r2.xyw, r4.zzzz, r2.xyxw, r3.xyxz
lt r0.y, l(0.000000), cb2[9].z
if_nz r0.y
  dp3 r0.y, r11.xyzx, r11.xyzx
  rsq r1.z, r0.y
  mul r3.xyz, r1.zzzz, r11.xyzx
  sqrt r0.y, r0.y
  lt r1.z, l(0.000000), cb2[13].w
  if_nz r1.z
    mad r1.zw, r0.yyyy, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r3.w, l(0.010000), |r11.z|
    mul r4.xy, r11.zzzz, cb2[15].zwzz
    mul r4.zw, r4.xxxy, l(0.000000, 0.000000, -1.442695, -1.442695)
    exp r4.zw, r4.zzzw
    add r4.zw, -r4.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
    div r4.xy, r4.zwzz, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r3.wwww, r4.xxxy, r1.zzzw
    mul r4.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    mul r5.xyz, r1.wwww, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xyzx, r5.xyzx
    mad r4.xyz, cb2[13].wwww, r5.xyzx, r4.xyzx
  else 
    mad r1.z, r0.y, cb2[15].x, cb2[14].z
    mul r1.z, r1.z, cb2[16].x
    lt r1.w, l(0.010000), |r11.z|
    mul r3.w, r11.z, cb2[15].z
    mul r4.w, r3.w, l(-1.442695)
    exp r4.w, r4.w
    add r4.w, -r4.w, l(1.000000)
    div r3.w, r4.w, r3.w
    mul r3.w, r1.z, r3.w
    movc r1.z, r1.w, r3.w, r1.z
    mul r5.xyz, r1.zzzz, cb2[12].xyzx
    exp r4.xyz, r5.xyzx
  endif 
  mad r4.xyz, r4.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r4.xyz, r4.xyzx, -cb2[9].zzzz
  dp3 r1.z, cb2[7].yzwy, -r3.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r3.x, cb2[8].w, -r1.z, l(1.000000)
  mul r3.x, r3.x, r3.x
  mul r3.x, r3.x, l(12.566371)
  div r1.w, r1.w, r3.x
  add r0.y, r0.y, -cb2[10].w
  mul_sat r0.y, r0.y, cb2[11].w
  mul r0.y, r0.y, r1.w
  mov_sat r1.z, r1.z
  mad r1.z, r1.z, r1.z, l(1.000000)
  mad r1.z, r1.z, l(0.05968310), l(-1.000000)
  mad r1.z, cb2[8].z, r1.z, l(1.000000)
  mul r3.xyz, r0.yyyy, cb2[11].xyzx
  mad r3.xyz, r1.zzzz, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r5.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r5.xyzx
  mad r3.xyz, r2.xywx, r4.xyzx, r3.xyzx
else 
  mul r0.y, r11.z, cb2[6].x
  mad r1.z, cb2[6].x, r11.z, cb2[5].x
  lt r1.w, |r0.y|, l(0.000100)
  min r3.w, r1.z, l(64.000000)
  mul r3.w, r3.w, l(1.442695)
  exp r3.w, r3.w
  mov_sat r4.x, cb2[6].z
  lt r4.y, r1.z, l(0.000000)
  add r1.z, r1.z, l(1.000000)
  movc r1.z, r4.y, r3.w, r1.z
  add r1.z, r1.z, -cb2[6].z
  movc r0.y, r1.w, l(1.000000), r0.y
  div r0.y, r1.z, r0.y
  movc r0.y, r1.w, r4.x, r0.y
  mul r0.y, r0.y, cb2[5].z
  dp3 r1.z, r11.xyzx, r11.xyzx
  sqrt r1.w, r1.z
  mad r0.y, r0.y, r1.w, cb2[5].w
  exp r0.y, r0.y
  min r0.y, r0.y, l(1.000000)
  add r0.y, -r0.y, l(1.000000)
  rsq r1.z, r1.z
  mul r4.xyz, r1.zzzz, r11.xyzx
  dp3 r1.z, cb2[7].yzwy, r4.xyzx
  mad_sat r1.z, cb2[8].y, r1.z, cb2[8].x
  add r4.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r4.xyzw, r1.zzzz, r4.xyzw, cb2[4].xyzw
  mul r0.y, r0.y, r4.w
  add r4.xyz, -r2.xywx, r4.xyzx
  mad r3.xyz, r0.yyyy, r4.xyzx, r2.xywx
endif 
mul r2.xyw, r3.xyxz, cb1[85].yyyy
ge r3.xyz, r2.xywx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyw, r2.xyxw, r3.xyxz
min r2.xyw, r2.xyxw, l(65024.000000, 65024.000000, 0.000000, 64512.000000)
ilt r0.y, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(2, 12, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r1.z, cb2[55].w, l(16)
ine r1.w, r1.z, l(0)
ieq r1.z, r1.z, l(16)
and r1.z, r1.z, r1.w
and r3.z, r1.z, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xywx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xywx
movc r2.xyw, r0.yyyy, r3.xyxz, r2.xyxw
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.y, r6.w, l(1)
      break 
      case l(2)
      ubfe r0.y, l(1), l(8), r6.w
      break 
      case l(3)
      ushr r0.y, r6.w, l(16)
      break 
      case l(4)
      and r0.y, r0.x, l(15)
      break 
      case l(5)
      ushr r0.y, r0.x, l(8)
      break 
      default 
      mov r0.y, l(0)
      break 
    endswitch 
    utof r0.y, r0.y
    mul r0.y, r0.y, cb2[53].z
    mad r3.xyz, r0.yyyy, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xywx
    mad r2.xyw, cb2[53].wwww, r3.xyxz, r2.xyxw
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xywx
if_nz r2.z
  add r1.xyz, r11.xyzx, cb1[24].xyzx
  and r1.w, r6.w, l(1)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  and r0.y, r0.x, l(15)
  store_structured u2.x, cb2[52].x, l(108), r0.y
endif 
if_nz cb2[52].y
  and r0.y, r6.w, l(1)
  atomic_iadd g1, l(0), r0.y
  ubfe r1.x, l(1), l(8), r6.w
  atomic_iadd g1, l(4), r1.x
  ushr r1.y, r6.w, l(16)
  atomic_iadd g1, l(8), r1.y
  and r1.z, r0.x, l(15)
  atomic_iadd g1, l(12), r1.z
  ushr r0.x, r0.x, l(8)
  atomic_iadd g1, l(16), r0.x
  atomic_umax g2, l(0), r0.y
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), r1.z
  atomic_umax g2, l(16), r0.x
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.x, r1.x, l(63)
  if_nz r0.x
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.x, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.x
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.x, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.x
    ieq r0.yz, r0.zzwz, cb2[52].zzwz
    and r0.y, r0.z, r0.y
    if_nz r0.y
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.x
    endif 
  endif 
endif 
ret 
// Approximately 1659 instruction slots used
