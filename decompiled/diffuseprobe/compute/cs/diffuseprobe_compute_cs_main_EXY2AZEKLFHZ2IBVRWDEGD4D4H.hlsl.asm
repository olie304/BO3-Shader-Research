//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:24:20 2021
//
//
// Buffer Definitions: 
//
// cbuffer GenericsCBuffer
// {
//
//   float4 scriptVector0;              // Offset:    0 Size:    16
//   float4 scriptVector1;              // Offset:   16 Size:    16 [unused]
//   float4 scriptVector2;              // Offset:   32 Size:    16 [unused]
//   float4 scriptVector3;              // Offset:   48 Size:    16 [unused]
//   float4 scriptVector4;              // Offset:   64 Size:    16 [unused]
//   float4 scriptVector5;              // Offset:   80 Size:    16 [unused]
//   float4 scriptVector6;              // Offset:   96 Size:    16 [unused]
//   float4 scriptVector7;              // Offset:  112 Size:    16 [unused]
//   float4 weaponParam0;               // Offset:  128 Size:    16 [unused]
//   float4 weaponParam1;               // Offset:  144 Size:    16 [unused]
//   float4 weaponParam2;               // Offset:  160 Size:    16 [unused]
//   float4 weaponParam3;               // Offset:  176 Size:    16 [unused]
//   float4 weaponParam4;               // Offset:  192 Size:    16 [unused]
//   float4 weaponParam5;               // Offset:  208 Size:    16 [unused]
//   float4 weaponParam6;               // Offset:  224 Size:    16 [unused]
//   float4 weaponParam7;               // Offset:  240 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gReflectionProbeSampler           sampler      NA          NA             s0      1 
// gSRVReflectionArray               texture  float3   cubearray             t0      1 
// gUAVDiffuse                           UAV  float3     2darray             u0      1 
// GenericsCBuffer                   cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texturecubearray (float,float,float,float) t0
dcl_uav_typed_texture2darray (float,float,float,float) u0
dcl_input vThreadID.xyz
dcl_temps 9
dcl_thread_group 8, 8, 6
ftou r0.x, cb3[0].y
uge r0.yz, vThreadID.xxyx, r0.xxxx
or r0.y, r0.z, r0.y
if_nz r0.y
  ret 
endif 
utof r0.yz, vThreadID.xxyx
add r0.yz, r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
add r0.y, r0.y, r0.y
utof r0.x, r0.x
div r0.y, r0.y, r0.x
mul r0.z, r0.z, l(-2.000000)
div r0.x, r0.z, r0.x
add r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
switch vThreadID.z
  case l(0)
  mul r2.xyz, r0.xxxx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r2.xyz, r0.yyyy, l(0.000000, 0.000000, -1.000000, 0.000000), r2.xyzx
  add r2.xyz, r2.xyzx, l(1.000000, 0.000000, 0.000000, 0.000000)
  dp3 r0.z, r2.xyzx, r2.xyzx
  rsq r0.z, r0.z
  mul r1.xyz, r0.zzzz, r2.xyzx
  break 
  case l(1)
  mul r2.xyz, r0.xxxx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r2.xyz, r0.yyyy, l(0.000000, 0.000000, 1.000000, 0.000000), r2.xyzx
  add r2.xyz, r2.xyzx, l(-1.000000, 0.000000, 0.000000, 0.000000)
  dp3 r0.z, r2.xyzx, r2.xyzx
  rsq r0.z, r0.z
  mul r1.xyz, r0.zzzz, r2.xyzx
  break 
  case l(2)
  mul r2.xyz, r0.xxxx, l(0.000000, 0.000000, -1.000000, 0.000000)
  mad r2.xyz, r0.yyyy, l(1.000000, 0.000000, 0.000000, 0.000000), r2.xyzx
  add r2.xyz, r2.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
  dp3 r0.z, r2.xyzx, r2.xyzx
  rsq r0.z, r0.z
  mul r1.xyz, r0.zzzz, r2.xyzx
  break 
  case l(3)
  mul r2.xyz, r0.xxxx, l(0.000000, 0.000000, 1.000000, 0.000000)
  mad r2.xyz, r0.yyyy, l(1.000000, 0.000000, 0.000000, 0.000000), r2.xyzx
  add r2.xyz, r2.xyzx, l(0.000000, -1.000000, 0.000000, 0.000000)
  dp3 r0.z, r2.xyzx, r2.xyzx
  rsq r0.z, r0.z
  mul r1.xyz, r0.zzzz, r2.xyzx
  break 
  case l(4)
  mul r2.xyz, r0.xxxx, l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r2.xyz, r0.yyyy, l(1.000000, 0.000000, 0.000000, 0.000000), r2.xyzx
  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
  dp3 r0.z, r2.xyzx, r2.xyzx
  rsq r0.z, r0.z
  mul r1.xyz, r0.zzzz, r2.xyzx
  break 
  case l(5)
  mul r0.xzw, r0.xxxx, l(0.000000, 0.000000, 1.000000, 0.000000)
  mad r0.xyz, r0.yyyy, l(-1.000000, 0.000000, 0.000000, 0.000000), r0.xzwx
  add r0.xyz, r0.xyzx, l(0.000000, 0.000000, -1.000000, 0.000000)
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, r0.xyzx
  break 
  default 
  break 
endswitch 
ishl r0.x, vThreadID.y, l(4)
iadd r0.y, vThreadID.y, l(0x9e3779b9)
xor r0.x, r0.y, r0.x
ushr r0.y, vThreadID.y, l(5)
xor r0.x, r0.y, r0.x
iadd r0.x, r0.x, vThreadID.x
ishl r0.y, r0.x, l(4)
iadd r0.z, r0.x, l(0x9e3779b9)
xor r0.y, r0.z, r0.y
ushr r0.z, r0.x, l(5)
xor r0.y, r0.z, r0.y
iadd r0.y, r0.y, vThreadID.y
ishl r0.z, r0.y, l(4)
iadd r0.w, r0.y, l(0x3c6ef372)
xor r0.z, r0.w, r0.z
ushr r0.w, r0.y, l(5)
xor r0.z, r0.w, r0.z
iadd r0.x, r0.z, r0.x
ishl r0.z, r0.x, l(4)
iadd r0.w, r0.x, l(0x3c6ef372)
xor r0.z, r0.w, r0.z
ushr r0.w, r0.x, l(5)
xor r0.z, r0.w, r0.z
iadd r0.y, r0.z, r0.y
ishl r0.z, r0.y, l(4)
iadd r0.w, r0.y, l(0xdaa66d2b)
xor r0.z, r0.w, r0.z
ushr r0.w, r0.y, l(5)
xor r0.z, r0.w, r0.z
iadd r0.x, r0.z, r0.x
ishl r0.z, r0.x, l(4)
iadd r0.w, r0.x, l(0xdaa66d2b)
xor r0.z, r0.w, r0.z
ushr r0.w, r0.x, l(5)
xor r0.z, r0.w, r0.z
iadd r0.y, r0.z, r0.y
and r0.x, r0.x, l(0x0000ffff)
and r2.x, r0.y, l(0x0000ffff)
xor r0.y, r2.x, l(0x00008000)
lt r0.z, |r1.z|, l(0.999000)
movc r3.xyz, r0.zzzz, l(1.000000,0,0,0), l(0,1.000000,0,0)
mul r4.xyz, r1.yzxy, r3.xyzx
mad r3.xyz, r3.zxyz, r1.zxyz, -r4.xyzx
dp3 r0.z, r3.xyzx, r3.xyzx
rsq r0.z, r0.z
mul r3.xyz, r0.zzzz, r3.xyzx
mul r4.xyz, r1.zxyz, r3.yzxy
mad r4.xyz, r1.yzxy, r3.zxyz, -r4.xyzx
mov r5.w, l(0)
mov r6.xyz, l(0,0,0,0)
mov r2.y, l(0)
loop 
  ige r0.z, r2.y, l(128)
  breakc_nz r0.z
  ishl r0.z, r2.y, l(16)
  ushr r0.z, r0.z, l(7)
  xor r0.z, r0.x, r0.z
  ine r0.w, r2.y, l(0)
  and r1.w, r2.y, l(1)
  movc r7.x, r1.w, r0.y, r2.x
  ushr r7.y, r2.y, l(1)
  movc r2.zw, r2.yyyy, r7.xxxy, r2.xxxy
  ine r1.w, r2.w, l(0)
  and r0.w, r0.w, r1.w
  and r1.w, r2.w, l(1)
  xor r3.w, r2.z, l(0x0000c000)
  movc r7.x, r1.w, r3.w, r2.z
  ushr r7.y, r2.w, l(1)
  movc r2.zw, r0.wwww, r7.xxxy, r2.zzzw
  ine r1.w, r2.w, l(0)
  and r0.w, r0.w, r1.w
  and r1.w, r2.w, l(1)
  xor r3.w, r2.z, l(0x0000e000)
  movc r7.x, r1.w, r3.w, r2.z
  ushr r7.y, r2.w, l(1)
  movc r2.zw, r0.wwww, r7.xxxy, r2.zzzw
  ine r1.w, r2.w, l(0)
  and r0.w, r0.w, r1.w
  and r1.w, r2.w, l(1)
  xor r3.w, r2.z, l(0x0000f000)
  movc r7.x, r1.w, r3.w, r2.z
  ushr r7.y, r2.w, l(1)
  movc r2.zw, r0.wwww, r7.xxxy, r2.zzzw
  ine r1.w, r2.w, l(0)
  and r0.w, r0.w, r1.w
  and r1.w, r2.w, l(1)
  xor r3.w, r2.z, l(0x0000f800)
  movc r7.x, r1.w, r3.w, r2.z
  ushr r7.y, r2.w, l(1)
  movc r2.zw, r0.wwww, r7.xxxy, r2.zzzw
  ine r1.w, r2.w, l(0)
  and r0.w, r0.w, r1.w
  and r1.w, r2.w, l(1)
  xor r3.w, r2.z, l(0x0000fc00)
  movc r7.x, r1.w, r3.w, r2.z
  ushr r7.y, r2.w, l(1)
  movc r2.zw, r0.wwww, r7.xxxy, r2.zzzw
  ine r1.w, r2.w, l(0)
  and r0.w, r0.w, r1.w
  and r1.w, r2.w, l(1)
  xor r3.w, r2.z, l(0x0000fe00)
  movc r7.x, r1.w, r3.w, r2.z
  ushr r7.y, r2.w, l(1)
  movc r2.zw, r0.wwww, r7.xxxy, r2.zzzw
  ine r1.w, r2.w, l(0)
  and r0.w, r0.w, r1.w
  xor r1.w, r2.z, l(0x0000ff00)
  movc r0.w, r0.w, r1.w, r2.z
  utof r7.xy, r0.zwzz
  mul r0.zw, r7.xxxy, l(0.000000, 0.000000, 0.00001526, 0.00001526)
  min r0.zw, r0.zzzw, l(0.000000, 0.000000, 1.000000, 1.000000)
  mul r0.z, r0.z, l(6.28318548)
  sqrt r1.w, r0.w
  sincos r7.x, r8.x, r0.z
  mul r0.z, r1.w, r8.x
  mul r1.w, r1.w, r7.x
  add r0.w, -r0.w, l(1.000000)
  sqrt r0.w, r0.w
  mul r7.xyz, r1.wwww, r4.xyzx
  mad r7.xyz, r3.xyzx, r0.zzzz, r7.xyzx
  mad r7.xyz, r1.xyzx, r0.wwww, r7.xyzx
  dp3 r0.z, r7.xyzx, r7.xyzx
  rsq r0.z, r0.z
  mul r5.xyz, r0.zzzz, r7.xyzx
  sample_l_indexable(texturecubearray)(float,float,float,float) r5.xyz, r5.xyzw, t0.xyzw, s0, l(5.000000)
  add r6.xyz, r5.xyzx, r6.xyzx
  iadd r2.y, r2.y, l(1)
endloop 
mov r0.xyzw, r6.xyzx
mul r0.xyzw, r0.xyzw, l(0.00781250, 0.00781250, 0.00781250, 0.00781250)
store_uav_typed u0.xyzw, vThreadID.xyzz, r0.xyzw
ret 
// Approximately 198 instruction slots used
