//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:51 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4
//   uint enableCountDebug;             // Offset:  836 Size:     4
//   uint centerGroupIDx;               // Offset:  840 Size:     4
//   uint centerGroupIDy;               // Offset:  844 Size:     4
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4
//   float drawNumLighstScale;          // Offset:  856 Size:     4
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4
//   uint showAO;                       // Offset:  880 Size:     4
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// Resource bind info for gPermutedTilingBuffer
// {
//
//   struct PermutedTilingBuffer
//   {
//       
//       uint2 data;                    // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:     8
//
// }
//
// Resource bind info for gDeferredCullBits
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for lightingDebug
// {
//
//   struct LightingDebug
//   {
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:    0
//           uint activeLights;         // Offset:    4
//           uint litLights;            // Offset:    8
//           uint visibleProbes;        // Offset:   12
//           uint activeProbes;         // Offset:   16
//
//       } maxCounts;                   // Offset:    0
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   20
//           uint activeLights;         // Offset:   24
//           uint litLights;            // Offset:   28
//           uint visibleProbes;        // Offset:   32
//           uint activeProbes;         // Offset:   36
//
//       } centerCounts;                // Offset:   20
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   40
//           uint activeLights;         // Offset:   44
//           uint litLights;            // Offset:   48
//           uint visibleProbes;        // Offset:   52
//           uint activeProbes;         // Offset:   56
//
//       } sumDeferredCounts;           // Offset:   40
//       
//       struct LightingDebugCounts
//       {
//           
//           uint visibleLights;        // Offset:   60
//           uint activeLights;         // Offset:   64
//           uint litLights;            // Offset:   68
//           uint visibleProbes;        // Offset:   72
//           uint activeProbes;         // Offset:   76
//
//       } sumForwardCounts;            // Offset:   60
//       float3 cameraWorldPos;         // Offset:   80
//       float3 pickedWldPos;           // Offset:   92
//       uint numPickedLights;          // Offset:  104
//       uint numPickedProbes;          // Offset:  108
//       
//       struct LightingDebugLight
//       {
//           
//           uint flags;                // Offset:  112
//           float3 wldOrigin;          // Offset:  116
//           float activeAttenuation;   // Offset:  128
//           float litAttenuation;      // Offset:  132
//
//       } pickedLights[32];            // Offset:  112
//       
//       struct LightingDebugProbe
//       {
//           
//           uint flags;                // Offset:  880
//           float3 wldOrigin;          // Offset:  884
//           float weight;              // Offset:  896
//
//       } pickedProbes[32];            // Offset:  880
//       uint overdrawHistogram[64];    // Offset: 1520
//       uint overdrawSum;              // Offset: 1776
//       uint overdrawMax;              // Offset: 1780
//       float padding0;                // Offset: 1784
//       float padding1;                // Offset: 1788
//
//   } $Element;                        // Offset:    0 Size:  1792
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samplerPointClamp                 sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gDownsampledScene                 texture  float4          2d            t21      1 
// gMotionVectors                    texture  float4          2d            t22      1 
// gPermutedTilingBuffer             texture  struct         r/o            t25      1 
// gDeferredCullBits                 texture  struct         r/o            t26      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gSSAODepthTexture                 texture   float          2d            t28      1 
// litBuffer                             UAV  float3          2d             u0      1 
// lightingDebug                         UAV  struct         r/w             u2      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], immediateIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t25, 8
dcl_resource_structured t26, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2d (float,float,float,float) t28
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured u2, 1792
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 40
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 20
dcl_tgsm_raw g2, 20
dcl_thread_group 8, 8, 1
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(0)
  store_raw g1.xyzw, l(0), l(0,0,0,0)
  store_raw g1.x, l(16), l(0)
  store_raw g2.xyzw, l(0), l(0,0,0,0)
  store_raw g2.x, l(16), l(0)
endif 
sync_g_t
imad r0.x, cb2[57].x, l(52), vThreadGroupID.x
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.xy, r0.x, l(0), t25.xyxx
and r0.xy, r0.xyxx, l(4095, 4095, 0, 0)
imad r1.xy, r0.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ftou r0.zw, cb1[44].xxxy
ult r0.zw, r1.xxxy, r0.zzzw
and r0.z, r0.w, r0.z
lt r0.w, l(0.000000), r2.z
and r0.z, r0.w, r0.z
if_z r0.z
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
utof r4.xy, r1.xyxx
add r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
mul r5.xy, r4.zwzz, cb1[44].zwzz
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r5.xyxx, t27.yzwx, s4, l(0.000000)
mul r0.w, r0.w, r3.z
if_nz cb2[55].x
  mul r3.z, r0.w, l(0.750000)
  store_uav_typed u0.xyzw, r1.xyyy, r3.zzzz
  ret 
else 
  movc r3.z, cb2[54].w, r0.w, l(1.000000)
endif 
ge r0.w, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r5.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.yzw, r1.xyww, t0.wxyz
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r1.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r1.xyzw, t2.xywz
ge r10.x, r5.x, l(0.984375)
mul r1.z, r5.x, l(1.01587307)
mad r1.w, r5.x, l(64.000000), l(-63.000000)
movc r1.z, r10.x, r1.w, r1.z
max r1.z, r1.z, l(0.00000001)
rcp r10.y, r1.z
and r1.zw, r0.zzzz, r10.xxxy
add r4.zw, r4.zzzw, -cb1[71].xxxy
mul r4.zw, r4.zzzw, cb1[44].zzzw
mad r4.zw, r4.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mul r10.x, r4.z, cb1[12].x
mul r10.y, r4.w, cb1[13].y
mov r10.z, l(1.000000)
mul r10.xyz, r1.wwww, r10.xyzx
mul r11.xyz, r10.yyyy, cb1[17].xyzx
mad r10.xyw, r10.xxxx, cb1[16].xyxz, r11.xyxz
mad r10.xyz, r10.zzzz, cb1[18].xyzx, r10.xywx
mad r0.z, r2.w, l(3.000000), l(0.500000)
ftou r0.z, r0.z
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r11.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r11.z
mul r11.xy, r2.wwww, r2.xyxx
and r12.xyzw, r0.zzzz, l(2, 1, 2, 1)
movc r12.xyzw, r12.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r0.z, r12.w, r12.z
movc r12.z, r0.z, l(-1.000000), l(1.000000)
mul r2.xyw, r12.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r13.xyz, r12.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r11.xyz, r11.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r11.yyyy
mad r2.xyw, r13.xyxz, r11.xxxx, r2.xyxw
mad r11.xyz, r12.xyzx, r11.zzzz, r2.xywx
movc r0.z, r0.w, l(-0.500000), l(-0.00146628)
add r0.z, r0.z, r2.z
mul_sat r2.y, r0.z, l(2.00982332)
dp3 r0.z, -r10.xyzx, -r10.xyzx
rsq r0.z, r0.z
mul r12.xyz, r0.zzzz, -r10.xyzx
dp2 r0.z, r4.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.z, r0.z
mul r0.z, r0.z, l(52.982918)
frc r0.z, r0.z
mad r0.z, r0.z, l(6.28318548), cb1[70].w
sincos r4.x, r13.x, r0.z
utof r0.zw, r1.yyyx
dp2 r0.z, r0.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.z, r0.z
mul r0.z, r0.z, l(52.982918)
frc r0.z, r0.z
mad r0.z, r0.z, l(6.28318548), cb1[70].w
sincos r5.x, r14.x, r0.z
dp3_sat r2.x, r11.xyzx, r12.xyzx
dp3 r0.z, -r12.xyzx, r11.xyzx
add r0.z, r0.z, r0.z
mad r15.xyz, r11.xyzx, -r0.zzzz, -r12.xyzx
mul r0.z, r2.y, l(17.000000)
exp r0.z, r0.z
add r0.z, r0.z, l(2.000000)
div r0.z, l(2.000000), r0.z
sqrt r0.w, r0.z
mul r2.zw, cb1[44].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
ftou r4.zw, r2.zzzw
ieq r4.zw, r1.xxxy, r4.zzzw
and r4.z, r4.w, r4.z
lt r4.w, l(0.83333331), r2.y
lt r6.w, l(60.000000), r1.w
and r4.w, r4.w, r6.w
if_nz r4.w
  mul r14.yzw, r10.yyyy, cb1[9].xxyw
  mad r14.yzw, r10.xxxx, cb1[8].xxyw, r14.yyzw
  mad r14.yzw, r10.zzzz, cb1[10].xxyw, r14.yyzw
  add r14.yzw, r14.yyzw, cb1[11].xxyw
  mad r16.xyz, r15.xyzx, l(2000.000000, 2000.000000, 2000.000000, 0.000000), r10.xyzx
  mul r17.xyz, r16.yyyy, cb1[9].xywx
  mad r16.xyw, r16.xxxx, cb1[8].xyxw, r17.xyxz
  mad r16.xyz, r16.zzzz, cb1[10].xywx, r16.xywx
  add r16.xyz, r16.xyzx, cb1[11].xywx
  ge r4.w, r16.z, r14.w
  if_nz r4.w
    rcp r17.z, r14.w
    mul r17.xy, r14.yzyy, r17.zzzz
    rcp r18.z, r16.z
    mul r18.xy, r16.xyxx, r18.zzzz
    lt r14.yz, l(0.000000, 1.000000, 1.000000, 0.000000), r18.xxyx
    mad r19.xyzw, r16.xxyy, r18.zzzz, l(-1.000000, 1.000000, -1.000000, 1.000000)
    mad r20.xyzw, r16.xxyy, r18.zzzz, -r17.xxyy
    lt r16.xy, r18.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
    div r19.xyzw, r19.xyzw, r20.xyzw
    and r16.xy, r16.xyxx, r19.ywyy
    movc r14.yz, r14.yyzy, r19.xxzx, r16.xxyx
    max r4.w, r14.z, r14.y
    add r16.xyw, r17.xyxz, -r18.xyxz
    mad r16.xyw, r4.wwww, r16.xyxw, r18.xyxz
    mad r14.yz, r17.xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
    mad r18.xy, r16.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r14.yz, r14.yyzy, -r18.xxyx
    mul r14.yz, r2.zzwz, |r14.yyzy|
    max r4.w, r14.z, r14.y
    max r4.w, r4.w, l(1.000000)
    rcp r4.w, r4.w
    mad r17.xyz, r17.xyzx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mad r19.xyz, r16.xywx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r20.xyz, -r17.xyzx, r19.xyzx
    mad r17.xyz, r4.wwww, r20.xyzx, r17.xyzx
    add r19.xyz, -r17.xyzx, r19.xyzx
    mul r20.xyz, r19.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000)
    mul r2.zw, r2.zzzw, |r20.xxxy|
    max r2.z, r2.w, r2.z
    log r2.z, r2.z
    round_pi r2.z, r2.z
    max r2.z, r2.z, l(0.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r2.w, r17.xyxx, t28.yzwx, s1, r2.z
    mad r21.xyz, r19.xyzx, l(0.031250, 0.031250, 0.031250, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r2.w, |r2.w|, |r4.w|
    mul r2.w, r21.z, r2.w
    lt r2.w, r2.w, l(1.000000)
    and r6.w, r2.w, l(1)
    mad r21.xyz, r19.xyzx, l(0.062500, 0.062500, 0.062500, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r7.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r7.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    bfi r2.w, l(1), l(0), r2.w, l(2)
    movc r2.w, r4.w, r2.w, r6.w
    mad r21.xyz, r19.xyzx, l(0.093750, 0.093750, 0.093750, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r7.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(4)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.125000, 0.125000, 0.125000, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(8)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.156250, 0.156250, 0.156250, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(16)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.187500, 0.187500, 0.187500, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(32)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.218750, 0.218750, 0.218750, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(64)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(128)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.281250, 0.281250, 0.281250, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(256)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.312500, 0.312500, 0.312500, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(512)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.343750, 0.343750, 0.343750, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(1024)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.375000, 0.375000, 0.375000, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(2048)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.406250, 0.406250, 0.406250, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(4096)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.437500, 0.437500, 0.437500, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(8192)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.468750, 0.468750, 0.468750, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(0x00004000)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(0x00008000)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.531250, 0.531250, 0.531250, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(0x00010000)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.562500, 0.562500, 0.562500, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(0x00020000)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.593750, 0.593750, 0.593750, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(0x00040000)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.625000, 0.625000, 0.625000, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(0x00080000)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.656250, 0.656250, 0.656250, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(0x00100000)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.687500, 0.687500, 0.687500, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(0x00200000)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.718750, 0.718750, 0.718750, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(0x00400000)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.750000, 0.750000, 0.750000, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(0x00800000)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.781250, 0.781250, 0.781250, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(0x01000000)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.812500, 0.812500, 0.812500, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(0x02000000)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.843750, 0.843750, 0.843750, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(0x04000000)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.875000, 0.875000, 0.875000, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(0x08000000)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.906250, 0.906250, 0.906250, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(0x10000000)
    movc r2.w, r6.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.937500, 0.937500, 0.937500, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r6.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r4.w, |r4.w|, |r6.w|
    mul r4.w, r21.z, r4.w
    lt r4.w, r4.w, l(1.000000)
    iadd r7.w, r2.w, l(0x20000000)
    movc r2.w, r4.w, r7.w, r2.w
    mad r21.xyz, r19.xyzx, l(0.968750, 0.968750, 0.968750, 0.000000), r17.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r4.w, r21.xyxx, t28.yzwx, s1, r2.z
    min r6.w, |r6.w|, |r4.w|
    mul r6.w, r21.z, r6.w
    lt r6.w, r6.w, l(1.000000)
    iadd r7.w, r2.w, l(0x40000000)
    movc r2.w, r6.w, r7.w, r2.w
    sample_l_indexable(texture2d)(float,float,float,float) r2.z, r18.xyxx, t28.yzxw, s1, r2.z
    min r2.z, |r4.w|, |r2.z|
    mul r2.z, r16.w, r2.z
    lt r2.z, r2.z, l(1.000000)
    iadd r4.w, r2.w, l(0x80000000)
    movc r2.z, r2.z, r4.w, r2.w
    mov r21.w, l(-1)
    mov r22.z, l(-1)
    mov r14.yz, l(0,0,0,0)
    mov r2.w, l(0)
    mov r4.w, r2.z
    mov r6.w, r18.z
    mov r23.yz, l(0,0,0,0)
    mov r21.z, l(0)
    mov r7.w, l(0)
    loop 
      breakc_z r4.w
      firstbit_lo r21.y, r4.w
      ishl r8.w, l(1), r21.y
      xor r21.x, r4.w, r8.w
      utof r9.w, r21.y
      mul r9.w, r9.w, l(0.031250)
      mad r16.xyw, r19.xyxz, r9.wwww, r17.xyxz
      sample_l_indexable(texture2d)(float,float,float,float) r9.w, r16.xyxx, t28.yzwx, s1, l(0.000000)
      mul r12.w, r16.w, |r9.w|
      lt r12.w, r12.w, l(1.000000)
      if_nz r12.w
        if_nz r21.z
          lt r12.w, r14.w, |r9.w|
          lt r13.w, r6.w, r16.w
          and r12.w, r12.w, r13.w
          movc r18.xy, r12.wwww, r16.xyxx, r14.yzyy
          mov r21.z, r16.w
          mov r23.x, r6.w
          movc r24.xyz, r12.wwww, r21.zxyz, r23.xyzx
          mov r4.w, r21.x
          mov r21.z, l(-1)
          mov r14.yz, r18.xxyx
          mov r6.w, r24.x
          mov r23.yz, r24.yyzy
          continue 
        endif 
        mov r12.w, r23.y
        mov r13.w, l(0)
      else 
        not r8.w, r8.w
        and r12.w, r8.w, r23.y
        mov r13.w, r21.z
      endif 
      if_nz r7.w
        mov r4.w, r21.x
        mov r23.y, r12.w
        mov r21.z, r13.w
        mov r7.w, l(-1)
        continue 
      endif 
      mov r18.xy, r14.yzyy
      mov r8.w, r2.w
      mov r17.w, r6.w
      mov r23.y, r12.w
      mov r23.x, r23.z
      mov r21.z, r13.w
      mov r22.w, r7.w
      mov r18.w, r16.w
      mov r19.w, |r9.w|
      mov r20.w, l(0)
      loop 
        ige r23.w, r20.w, l(4)
        breakc_nz r23.w
        itof r23.w, r20.w
        add r23.w, r23.w, l(1.000000)
        mul r23.w, r23.w, l(0.250000)
        mad r24.xyz, r20.xyzx, r23.wwww, r16.xywx
        sample_l_indexable(texture2d)(float,float,float,float) r23.w, r24.xyxx, t28.yzwx, s1, l(0.000000)
        mul r24.w, r24.z, |r23.w|
        lt r24.w, r24.w, l(1.000000)
        if_nz r24.w
          lt r24.w, r14.w, |r23.w|
          add r25.x, -r18.w, r24.z
          add r25.y, -r19.w, |r23.w|
          mul r25.z, r18.w, r24.z
          mul r25.y, r25.z, |r25.y|
          lt r25.x, r25.y, |r25.x|
          lt r25.z, r17.w, r24.z
          and r25.yw, r24.wwww, r25.xxxz
          movc r22.xy, r25.wwww, r21.xyxx, r23.yxyy
          or r25.x, r25.x, r25.z
          and r24.w, r24.w, r25.x
          movc r24.xy, r24.wwww, r24.xyxx, r18.xyxx
          movc r25.x, r25.y, l(1.000000), r8.w
          movc r24.w, r24.w, r24.z, r17.w
          movc r26.xyzw, r25.yyyy, r21.xyzw, r22.xyzw
          mov r8.w, r25.x
          mov r18.xy, r24.xyxx
          mov r17.w, r24.w
          mov r23.xy, r26.yxyy
          mov r21.z, r26.z
          mov r22.w, r26.w
          break 
        endif 
        mov r18.w, r24.z
        mov r19.w, |r23.w|
        iadd r20.w, r20.w, l(1)
      endloop 
      mov r14.yz, r18.xxyx
      mov r2.w, r8.w
      mov r6.w, r17.w
      mov r23.yz, r23.yyxy
      mov r7.w, r22.w
      mov r4.w, r21.x
    endloop 
    rcp r2.z, r6.w
    add r2.z, -r14.w, r2.z
    add r4.w, -r14.w, r16.z
    div r2.z, |r2.z|, |r4.w|
    min r16.x, r2.z, l(1.000000)
    countbits r2.z, r23.y
    utof r2.z, r2.z
    add r2.z, r2.z, l(1.000000)
    iadd r4.w, -r23.z, l(32)
    utof r4.w, r4.w
    div r2.z, r2.z, r4.w
    min r16.y, r2.z, l(1.000000)
  else 
    mov r16.xy, l(1.000000,0,0,0)
    mov r2.w, l(0)
  endif 
  add r2.z, r2.y, l(-0.83333331)
  mul r2.z, r2.z, l(5.99999952)
  max r2.z, r2.z, l(0.000000)
  mad r4.w, r2.z, l(-2.000000), l(3.000000)
  mul r2.z, r2.z, r2.z
  mul r2.z, r2.z, r4.w
  add r1.w, r1.w, l(-60.000000)
  mul_sat r1.w, r1.w, l(0.01666667)
  mad r4.w, r1.w, l(-2.000000), l(3.000000)
  mul r1.w, r1.w, r1.w
  mul r1.w, r1.w, r4.w
  mul r1.w, r1.w, r2.z
  mul r1.w, r16.y, r1.w
  mad r16.yz, r14.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
  add r16.yz, |r16.yyzy|, l(0.000000, -0.500000, -0.500000, 0.000000)
  add_sat r16.yz, r16.yyzy, r16.yyzy
  mad r17.xy, r16.yzyy, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
  mul r16.yz, r16.yyzy, r16.yyzy
  mad r16.yz, -r17.xxyx, r16.yyzy, l(0.000000, 1.000000, 1.000000, 0.000000)
  mul r2.z, r16.z, r16.y
  mul r1.w, r1.w, r2.z
  mul r2.z, r16.x, l(10.000000)
  min r2.z, r2.z, l(1.000000)
  add r4.w, -r2.w, l(1.000000)
  mul r4.w, r1.w, r4.w
  add r2.z, r2.z, l(-1.000000)
  mad r2.z, r4.w, r2.z, l(1.000000)
  mul r1.w, r2.w, r1.w
  lt r2.w, l(0.000000), r1.w
  if_nz r2.w
    sample_l_indexable(texture2d)(float,float,float,float) r16.xy, r14.yzyy, t22.xyzw, s4, l(0.000000)
    add r16.zw, |r16.xxxy|, l(0.000000, 0.000000, -0.500000, -0.500000)
    add_sat r16.zw, r16.zzzw, r16.zzzw
    add r17.xy, |r16.xyxx|, |r16.xyxx|
    min r17.xy, r17.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    mul r17.xy, r17.xyxx, l(10.000000, 10.000000, 0.000000, 0.000000)
    mad r16.zw, r16.zzzw, l(0.000000, 0.000000, 30.000000, 30.000000), r17.xxxy
    ge r16.xy, r16.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
    movc r16.xy, r16.xyxx, r16.zwzz, -r16.zwzz
    mad r14.yz, -r16.xxyx, cb1[44].zzwz, r14.yyzy
    sample_l_indexable(texture2d)(float,float,float,float) r14.yzw, r14.yzyy, t21.wxyz, s4, l(0.000000)
    mul r14.yzw, r14.yyzw, cb1[85].xxxx
    mul r14.yzw, r1.wwww, r14.yyzw
  else 
    mov r14.yzw, l(0,0,0,0)
    mov r1.w, l(0)
  endif 
else 
  mov r14.yzw, l(0,0,0,0)
  mov r2.z, l(1.000000)
  mov r1.w, l(0)
endif 
add r2.w, -r2.y, l(1.000000)
mul r2.w, r2.w, l(5.000000)
add r16.xyz, r10.xyzx, -cb2[35].xyzx
mul r17.x, r16.x, cb2[35].w
mul r17.yz, r16.yyzy, cb2[36].xxyx
add_sat r16.xyz, r17.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mul r17.xy, r16.xyxx, cb2[36].zwzz
mul r17.z, r16.z, cb2[37].x
add r16.xyz, r17.xyzx, cb2[37].yzwy
lt r17.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r11.xyzx
movc r17.xyz, r17.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
mov r17.w, l(0)
add r18.xyz, r16.xyzx, r17.wwxw
sample_l_indexable(texture3d)(float,float,float,float) r18.xyz, r18.xyzx, t17.xyzw, s4, l(0.000000)
mul r19.xyz, r11.xyzx, r11.xyzx
mul r19.xyz, r19.xyzx, cb2[19].xxxx
add r20.xyz, r16.xyzx, r17.wwyw
sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t18.xyzw, s4, l(0.000000)
mul r20.xyz, r19.yyyy, r20.xyzx
mad r18.xyz, r18.xyzx, r19.xxxx, r20.xyzx
add r16.xyz, r16.xyzx, r17.wwzw
sample_l_indexable(texture3d)(float,float,float,float) r16.xyz, r16.xyzx, t19.xyzw, s4, l(0.000000)
mad r16.xyz, r16.xyzx, r19.zzzz, r18.xyzx
mov r11.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r11.xyzw, t8.xyzw, s2, l(6.000000)
mul r16.xyz, r16.xyzx, r17.xyzx
dp3 r4.w, r16.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
mov r15.w, l(0)
sample_l_indexable(texturecubearray)(float,float,float,float) r17.xyz, r15.xyzw, t8.xyzw, s2, r2.w
add r2.w, -r4.w, cb2[19].x
mad r2.w, r2.y, r2.w, r4.w
mul r17.xyz, r2.wwww, r17.xyzx
add r1.w, -r1.w, l(1.000000)
mad r14.yzw, r17.xxyz, r1.wwww, r14.yyzw
add r1.w, r3.z, r2.x
log r1.w, |r1.w|
mul r1.w, r0.w, r1.w
exp r1.w, r1.w
add r1.w, r3.z, r1.w
add_sat r1.w, r1.w, l(-1.000000)
mul r1.w, r2.z, r1.w
mul r16.xyz, r3.zzzz, r16.xyzx
mad r2.yz, r2.xxyx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.00781250, 0.00781250, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t5.zxyw, s2, l(0.000000)
mul r14.yzw, r1.wwww, r14.yyzw
mul r17.xyz, r2.yyyy, r14.yzwy
mul r2.yzw, r2.zzzz, r14.yyzw
sqrt r1.w, r0.w
mad r1.w, r1.w, l(0.500000), l(0.500000)
mul r1.w, r1.w, r1.w
mul r3.z, r1.w, l(0.500000)
mad r1.w, -r1.w, l(0.500000), l(1.000000)
mad r4.w, r2.x, r1.w, r3.z
mul r1.w, r1.w, r4.w
mul r3.z, r3.z, r4.w
ftou r4.w, cb1[44].x
iadd r4.w, r4.w, l(7)
ushr r4.w, r4.w, l(3)
imad r4.w, r0.y, r4.w, r0.x
ishl r4.w, r4.w, l(5)
not r6.w, r1.z
mov r18.x, -r4.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r19.x, l(2)
mov r10.w, l(1.000000)
mov r20.x, l(2)
mov r21.z, l(1.000000)
mov r22.w, l(1.000000)
mov r23.w, l(1.000000)
mov r24.w, l(1.000000)
mov r18.z, r4.x
mov r25.w, l(1.000000)
mov r18.yw, r13.xxxx
mov r4.y, r18.w
mov r13.y, r18.x
mov r26.x, r13.x
mov r26.y, r18.x
mov r26.z, r4.x
mov r13.z, r4.x
mov r27.w, l(1.000000)
mov r28.x, r13.x
mov r28.y, r18.x
mov r28.z, r4.x
mov r29.x, r13.x
mov r29.y, r18.x
mov r29.z, r4.x
mov r14.yzw, r16.xxyz
mov r30.xyz, r17.xyzx
mov r31.xyz, r2.yzwy
mov r7.w, cb2[58].y
mov r8.w, l(0)
mov r9.w, l(0)
loop 
  uge r11.w, r9.w, cb2[0].x
  breakc_nz r11.w
  ushr r11.w, r9.w, l(5)
  iadd r11.w, r4.w, r11.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r11.w, l(0), t26.xxxx
  mov r32.xyz, r14.yzwy
  mov r33.xyz, r30.xyzx
  mov r34.xyz, r31.xyzx
  mov r12.w, r7.w
  mov r13.w, r8.w
  mov r15.w, r11.w
  loop 
    breakc_z r15.w
    firstbit_lo r16.w, r15.w
    ishl r17.w, l(1), r16.w
    not r17.w, r17.w
    and r15.w, r15.w, r17.w
    iadd r16.w, r9.w, r16.w
    imul null, r16.w, r16.w, l(15)
    ubfe r17.w, l(3), l(24), cb9[r16.w + 1].w
    ieq r21.w, r17.w, l(2)
    if_nz r21.w
      ubfe r21.w, l(3), l(27), cb9[r16.w + 1].w
      and r26.w, r13.w, l(255)
      ult r28.w, r26.w, l(32)
      and r28.w, r4.z, r28.w
      if_nz r28.w
        imad r26.w, r26.w, l(24), l(112)
        add r19.yzw, cb1[24].xxyz, cb9[r16.w + 0].xxyz
        store_structured u2.xyzw, cb2[52].x, r26.w, r19.xyzw
      endif 
      iadd r19.y, r13.w, l(1)
      add r35.xy, -r10.xyxx, cb9[r16.w + 3].zwzz
      add r35.z, -r10.z, cb9[r16.w + 4].x
      dp3 r19.z, r35.xyzx, r35.xyzx
      rsq r19.z, r19.z
      mul r36.xyz, r19.zzzz, r35.xyzx
      mul r19.w, r0.z, cb9[r16.w + 1].z
      mul r19.w, r19.w, l(0.250000)
      dp3 r26.w, r11.xyzx, r36.xyzx
      mov_sat r28.w, r26.w
      lt r29.w, l(0.000000), r28.w
      if_nz r29.w
        mov r36.xyz, cb9[r16.w + 7].yzwy
        mov r36.w, cb9[r16.w + 8].x
        dp4 r29.w, r36.xyzw, r10.xyzw
        lt r30.w, r29.w, l(1.000000)
        if_nz r30.w
          mov r37.xyz, l(1.000000,1.000000,1.000000,0)
          mov r30.w, l(0)
        else 
          add r38.xyz, -r10.xyzx, cb9[r16.w + 0].xyzx
          mul r31.w, cb9[r16.w + 3].x, cb9[r16.w + 3].x
          dp3 r32.w, r38.xyzx, r38.xyzx
          div r31.w, r31.w, r32.w
          min r31.w, r31.w, l(1.000000)
          mad_sat r38.xy, r29.wwww, cb9[r16.w + 2].xzxx, cb9[r16.w + 2].ywyy
          mul r38.zw, r38.xxxy, r38.xxxy
          mad r38.xy, r38.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r38.xy, r38.xyxx, r38.zwzz
          mul r31.w, r31.w, r38.x
          mul r31.w, r38.y, r31.w
          mov r38.xyz, cb9[r16.w + 4].yzwy
          mov r38.w, cb9[r16.w + 5].x
          dp4 r38.x, r38.xyzw, r10.xyzw
          mov r39.xyz, cb9[r16.w + 5].yzwy
          mov r39.w, cb9[r16.w + 6].x
          dp4 r38.y, r39.xyzw, r10.xyzw
          div r21.xy, r38.xyxx, r29.wwww
          lt r29.w, cb9[r16.w + 10].w, l(0.00048828)
          if_nz r29.w
            mad_sat r38.xy, |r21.xyxx|, cb9[r16.w + 12].xyxx, cb9[r16.w + 12].zwzz
            mul r38.zw, r38.xxxy, r38.xxxy
            mad r38.xy, r38.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r38.xy, r38.xyxx, r38.zwzz
            mul r29.w, r38.y, r38.x
          else 
            mul_sat r38.xyzw, |r21.yyxx|, cb9[r16.w + 11].xyzw
            log r38.xyzw, r38.xyzw
            mul r38.xyzw, r38.xyzw, cb9[r16.w + 12].zzzz
            exp r38.xyzw, r38.xyzw
            add r38.xy, r38.zwzz, r38.xyxx
            log r38.xy, r38.xyxx
            mul r38.xy, r38.xyxx, cb9[r16.w + 12].wwww
            exp r38.xy, r38.xyxx
            mul r32.w, r38.x, cb9[r16.w + 12].x
            mad r33.w, cb9[r16.w + 12].y, r38.y, l(-1.000000)
            mad r32.w, cb9[r16.w + 12].y, r38.y, -r32.w
            div_sat r32.w, r33.w, r32.w
            mul r33.w, r32.w, r32.w
            mad r32.w, r32.w, l(-2.000000), l(3.000000)
            mul r29.w, r32.w, r33.w
          endif 
          mul r30.w, r29.w, r31.w
          and r29.w, l(255), cb9[r16.w + 14].w
          if_nz r29.w
            dp3 r31.w, cb9[r16.w + 13].xyzx, r21.xyzx
            mov r38.x, cb9[r16.w + 13].w
            mov r38.yz, cb9[r16.w + 14].xxyx
            dp3 r21.x, r38.xyzx, r21.xyzx
            frc r38.x, r31.w
            frc r38.y, r21.x
            iadd r21.x, r29.w, l(-1)
            utof r38.z, r21.x
            sample_l_indexable(texture2darray)(float,float,float,float) r37.xyz, r38.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r37.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r38.x, cb9[r16.w + 0].w
        mov r38.yz, cb9[r16.w + 1].xxyx
        mul r37.xyz, r37.xyzx, r38.xyzx
        lt r21.x, l(0.000000), r30.w
        if_nz r21.x
          and r21.x, r19.y, l(255)
          iadd r21.y, r21.x, l(-1)
          ult r21.y, r21.y, l(32)
          and r21.y, r4.z, r21.y
          if_nz r21.y
            imad r21.xy, r21.xxxx, l(24, 24, 0, 0), l(88, 104, 0, 0)
            ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r29.w, cb2[52].x, r21.x, u2.xxxx
            or r29.w, r29.w, l(4)
            store_structured u2.x, cb2[52].x, r21.x, r29.w
            store_structured u2.x, cb2[52].x, r21.y, r30.w
          endif 
          iadd r21.x, r13.w, l(257)
          ine r21.y, r21.w, l(1)
          if_nz r21.y
            mad r21.y, |r26.w|, l(-0.200000), l(0.400000)
            mad r22.xyz, r11.xyzx, r21.yyyy, r10.xyzx
            mov r38.xyz, cb9[r16.w + 6].yzwy
            mov r38.w, cb9[r16.w + 7].x
            dp4 r21.y, r38.xyzw, r22.xyzw
            dp4 r21.w, r36.xyzw, r22.xyzw
            ge r29.w, r21.w, r21.y
            if_nz r29.w
              mov r36.xyz, cb9[r16.w + 4].yzwy
              mov r36.w, cb9[r16.w + 5].x
              dp4 r36.x, r36.xyzw, r22.xyzw
              mov r38.xyz, cb9[r16.w + 5].yzwy
              mov r38.w, cb9[r16.w + 6].x
              dp4 r36.y, r38.xyzw, r22.xyzw
              div r22.xy, r36.xyxx, r21.wwww
              mad_sat r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r36.x, r22.x, cb9[r16.w + 8].y, cb9[r16.w + 8].z
              mad r36.y, r22.y, cb9[r16.w + 8].w, cb9[r16.w + 9].x
              div r21.y, r21.y, r21.w
              max r21.y, r21.y, l(0.00006104)
              and r21.w, l(0x0000ffff), cb9[r16.w + 1].w
              if_nz r12.w
                utof r22.z, r21.w
                mov r29.w, l(0)
                mov r31.w, l(0)
                loop 
                  ige r32.w, r31.w, l(8)
                  breakc_nz r32.w
                  dp2 r38.x, icb[r31.w + 0].yxyy, r18.xyxx
                  dp2 r38.y, icb[r31.w + 0].yxyy, r18.yzyy
                  mad r22.xy, r38.xyxx, cb9[r16.w + 3].yyyy, r36.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r21.y
                  mad r29.w, r22.x, l(0.125000), r29.w
                  iadd r31.w, r31.w, l(1)
                endloop 
              else 
                utof r36.z, r21.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r29.w, r36.xyzx, t9.xxxx, s13, r21.y
              endif 
              mul r21.y, r29.w, r29.w
              mul r21.y, r29.w, r21.y
            else 
              mov r21.y, l(1.000000)
            endif 
          else 
            mov r21.y, l(1.000000)
          endif 
          mul r21.y, r21.y, r30.w
          lt r21.w, l(0.000000), r21.y
          if_nz r21.w
            ubfe r21.w, l(4), l(16), cb9[r16.w + 1].w
            ult r22.x, l(0), r21.w
            and r22.x, r1.z, r22.x
            if_nz r22.x
              iadd r21.w, r21.w, cb2[0].x
              imad r21.w, r21.w, l(15), l(-15)
              mad r22.x, |r26.w|, l(-0.200000), l(0.400000)
              mad r23.xyz, r11.xyzx, r22.xxxx, r10.xyzx
              mov r36.xyz, cb9[r21.w + 6].yzwy
              mov r36.w, cb9[r21.w + 7].x
              dp4 r22.x, r36.xyzw, r23.xyzw
              mov r36.xyz, cb9[r21.w + 7].yzwy
              mov r36.w, cb9[r21.w + 8].x
              dp4 r22.y, r36.xyzw, r23.xyzw
              lt r22.z, r22.y, r22.x
              if_z r22.z
                mov r36.xyz, cb9[r21.w + 4].yzwy
                mov r36.w, cb9[r21.w + 5].x
                dp4 r36.x, r36.xyzw, r23.xyzw
                mov r38.xyz, cb9[r21.w + 5].yzwy
                mov r38.w, cb9[r21.w + 6].x
                dp4 r36.y, r38.xyzw, r23.xyzw
                div r23.xy, r36.xyxx, r22.yyyy
                mad r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r36.x, r23.x, cb9[r21.w + 9].w
                add r36.y, r23.y, cb9[r21.w + 10].x
                mul r23.xy, r36.xyxx, cb9[r21.w + 9].yzyy
                div r36.xy, cb9[r21.w + 3].yyyy, cb9[r21.w + 8].ywyy
                add r36.zw, -r36.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r36.zw, r23.xxxy, r36.zzzw
                ge r36.xy, r36.xyxx, r23.xyxx
                or r36.xy, r36.xyxx, r36.zwzz
                or r23.z, r36.y, r36.x
                if_z r23.z
                  mov_sat r23.xy, r23.xyxx
                  mad r36.x, r23.x, cb9[r21.w + 8].y, cb9[r21.w + 8].z
                  mad r36.y, r23.y, cb9[r21.w + 8].w, cb9[r21.w + 9].x
                  mul r23.x, r22.y, cb9[r21.w + 10].z
                  mad r22.x, cb9[r21.w + 10].y, r22.y, r22.x
                  div r22.x, r22.x, r23.x
                endif 
              else 
                mov r23.z, l(-1)
              endif 
              or r22.y, r22.z, r23.z
              if_z r22.y
                max r22.x, r22.x, l(0.00006104)
                and r22.y, l(0x0000ffff), cb9[r21.w + 1].w
                if_nz r12.w
                  utof r23.z, r22.y
                  mov r22.z, l(0)
                  mov r30.w, l(0)
                  loop 
                    ige r31.w, r30.w, l(8)
                    breakc_nz r31.w
                    dp2 r38.x, icb[r30.w + 0].yxyy, r18.xwxx
                    dp2 r38.y, icb[r30.w + 0].xyxx, r4.xyxx
                    mad r23.xy, r38.xyxx, cb9[r21.w + 3].yyyy, r36.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r22.x
                    mad r22.z, r23.x, l(0.125000), r22.z
                    iadd r30.w, r30.w, l(1)
                  endloop 
                else 
                  utof r36.z, r22.y
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.z, r36.xyzx, t9.xxxx, s13, r22.x
                endif 
                mul r21.w, r22.z, r22.z
                mul r21.w, r22.z, r21.w
              else 
                mov r21.w, l(1.000000)
              endif 
              mul r21.y, r21.w, r21.y
            else 
              ubfe r21.w, l(4), l(20), cb9[r16.w + 1].w
              ult r22.x, l(0), r21.w
              and r22.x, r6.w, r22.x
              if_nz r22.x
                iadd r21.w, r21.w, cb2[0].x
                imad r21.w, r21.w, l(15), l(-15)
                mad r22.x, |r26.w|, l(-0.200000), l(0.400000)
                mad r24.xyz, r11.xyzx, r22.xxxx, r10.xyzx
                mov r36.xyz, cb9[r21.w + 6].yzwy
                mov r36.w, cb9[r21.w + 7].x
                dp4 r22.x, r36.xyzw, r24.xyzw
                mov r36.xyz, cb9[r21.w + 7].yzwy
                mov r36.w, cb9[r21.w + 8].x
                dp4 r22.y, r36.xyzw, r24.xyzw
                lt r23.x, r22.y, r22.x
                if_z r23.x
                  mov r36.xyz, cb9[r21.w + 4].yzwy
                  mov r36.w, cb9[r21.w + 5].x
                  dp4 r36.x, r36.xyzw, r24.xyzw
                  mov r38.xyz, cb9[r21.w + 5].yzwy
                  mov r38.w, cb9[r21.w + 6].x
                  dp4 r36.y, r38.xyzw, r24.xyzw
                  div r23.yz, r36.xxyx, r22.yyyy
                  mad r23.yz, r23.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                  add r24.x, r23.y, cb9[r21.w + 9].w
                  add r24.y, r23.z, cb9[r21.w + 10].x
                  mul r23.yz, r24.xxyx, cb9[r21.w + 9].yyzy
                  div r24.xy, cb9[r21.w + 3].yyyy, cb9[r21.w + 8].ywyy
                  add r36.xy, -r24.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r36.xy, r23.yzyy, r36.xyxx
                  ge r24.xy, r24.xyxx, r23.yzyy
                  or r24.xy, r24.xyxx, r36.xyxx
                  or r24.x, r24.y, r24.x
                  if_z r24.x
                    mov_sat r23.yz, r23.yyzy
                    mad r36.x, r23.y, cb9[r21.w + 8].y, cb9[r21.w + 8].z
                    mad r36.y, r23.z, cb9[r21.w + 8].w, cb9[r21.w + 9].x
                    mul r23.y, r22.y, cb9[r21.w + 10].z
                    mad r22.x, cb9[r21.w + 10].y, r22.y, r22.x
                    div r22.x, r22.x, r23.y
                  endif 
                else 
                  mov r24.x, l(-1)
                endif 
                or r22.y, r23.x, r24.x
                if_z r22.y
                  max r22.x, r22.x, l(0.00006104)
                  and r22.y, l(0x0000ffff), cb9[r21.w + 1].w
                  if_nz r12.w
                    utof r23.z, r22.y
                    mov r24.xy, l(0,0,0,0)
                    loop 
                      ige r24.z, r24.y, l(8)
                      breakc_nz r24.z
                      dp2 r38.x, icb[r24.y + 0].xyxx, r26.xyxx
                      dp2 r38.y, icb[r24.y + 0].yxyy, r26.xzxx
                      mad r23.xy, r38.xyxx, cb9[r21.w + 3].yyyy, r36.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r22.x
                      mad r24.x, r23.x, l(0.125000), r24.x
                      iadd r24.y, r24.y, l(1)
                    endloop 
                  else 
                    utof r36.z, r22.y
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r36.xyzx, t9.xxxx, s13, r22.x
                  endif 
                  mul r21.w, r24.x, r24.x
                  mul r21.w, r24.x, r21.w
                else 
                  mov r21.w, l(1.000000)
                endif 
                mul r21.y, r21.w, r21.y
              endif 
            endif 
            mad r21.w, -r28.w, r2.x, l(1.000000)
            mul r21.w, r21.w, r21.w
            mad r21.w, -r21.w, l(0.620000), l(0.620000)
            add r21.w, -r28.w, r21.w
            mad r21.w, r0.w, r21.w, r28.w
            mul r21.w, r21.y, r21.w
            lt r22.x, l(0.000000), r26.w
            mad r23.xyz, r21.wwww, r37.xyzx, r32.xyzx
            mad r35.xyz, r35.xyzx, r19.zzzz, r12.xyzx
            dp3 r19.z, r35.xyzx, r35.xyzx
            rsq r19.z, r19.z
            mul r35.xyz, r19.zzzz, r35.xyzx
            dp3 r19.z, r35.xyzx, r12.xyzx
            dp3 r21.w, r11.xyzx, r35.xyzx
            mad r22.y, |r21.w|, r0.z, -|r21.w|
            mad r21.w, |r21.w|, r22.y, l(1.000000)
            mad r22.y, r28.w, r1.w, r3.z
            mul r21.w, r21.w, r21.w
            mul r21.w, r22.y, r21.w
            rcp r21.w, r21.w
            mul r19.w, r19.w, r28.w
            mul r19.w, r19.w, r21.w
            mul r19.w, r21.y, r19.w
            mad r35.xyz, r19.wwww, r37.xyzx, r34.xyzx
            add_sat r19.z, -r19.z, l(1.000000)
            mul r21.w, r19.z, r19.z
            mul r21.w, r21.w, r21.w
            mul r19.z, r19.z, r21.w
            mul r19.z, r19.z, r19.w
            mad r36.xyz, r19.zzzz, r37.xyzx, r33.xyzx
            movc r32.xyz, r22.xxxx, r23.xyzx, r32.xyzx
            movc r33.xyz, r22.xxxx, r36.xyzx, r33.xyzx
            movc r34.xyz, r22.xxxx, r35.xyzx, r34.xyzx
            and r19.z, r21.x, l(255)
            iadd r19.w, r19.z, l(-1)
            ult r19.w, r19.w, l(32)
            and r19.w, r4.z, r19.w
            if_nz r19.w
              imad r19.zw, r19.zzzz, l(0, 0, 24, 24), l(0, 0, 88, 108)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r21.w, cb2[52].x, r19.z, u2.xxxx
              or r21.w, r21.w, l(8)
              store_structured u2.x, cb2[52].x, r19.z, r21.w
              store_structured u2.x, cb2[52].x, r19.w, r21.y
            endif 
            iadd r13.w, r13.w, l(0x00010101)
          else 
            mov r13.w, r21.x
          endif 
        else 
          mov r13.w, r19.y
        endif 
      else 
        mov r13.w, r19.y
      endif 
    else 
      ieq r17.w, r17.w, l(4)
      if_nz r17.w
        ubfe r17.w, l(3), l(27), cb9[r16.w + 1].w
        and r19.y, r13.w, l(255)
        ult r19.z, r19.y, l(32)
        and r19.z, r4.z, r19.z
        if_nz r19.z
          imad r19.y, r19.y, l(24), l(112)
          add r20.yzw, cb1[24].xxyz, cb9[r16.w + 0].xxyz
          store_structured u2.xyzw, cb2[52].x, r19.y, r20.xyzw
        endif 
        iadd r19.y, r13.w, l(1)
        mul r19.z, r0.z, cb9[r16.w + 1].z
        mul r19.z, r19.z, l(0.250000)
        lt r19.w, l(0.000000), cb9[r16.w + 6].y
        mov r23.xy, cb9[r16.w + 5].zwzz
        mov r23.z, cb9[r16.w + 6].x
        mad r20.yzw, -r23.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[r16.w + 0].xxyz
        add r21.xyw, -r10.xyxz, r20.yzyw
        dp3 r22.x, r23.xyzx, r15.xyzx
        dp3 r22.y, r23.xyzx, r21.xywx
        dp3 r21.x, r15.xyzx, r21.xywx
        mad r21.y, -r22.x, r22.x, cb9[r16.w + 6].y
        mad r21.x, r22.x, r21.x, -r22.y
        div_sat r21.w, -r22.y, cb9[r16.w + 6].y
        div_sat r21.x, r21.x, r21.y
        div r21.y, r21.y, cb9[r16.w + 6].y
        mul r21.y, r21.y, l(10.000000)
        min r21.y, r21.y, l(1.000000)
        add r21.x, -r21.w, r21.x
        mad r21.x, r21.y, r21.x, r21.w
        mad r35.xyz, r21.xxxx, r23.xyzx, r20.yzwy
        mad r20.yzw, r21.wwww, r23.xxyz, r20.yyzw
        movc r20.yzw, r19.wwww, r20.yyzw, cb9[r16.w + 0].xxyz
        movc r21.xyw, r19.wwww, r35.xyxz, cb9[r16.w + 0].xyxz
        add r21.xyw, -r10.xyxz, r21.xyxw
        add r20.yzw, -r10.xxyz, r20.yyzw
        dp3 r19.w, r21.xywx, r21.xywx
        rsq r19.w, r19.w
        mul r23.xyz, r19.wwww, r21.xywx
        dp3 r22.x, r20.yzwy, r20.yzwy
        rsq r22.y, r22.x
        mul r20.yzw, r20.yyzw, r22.yyyy
        dp3 r20.y, r11.xyzx, r20.yzwy
        mov_sat r20.z, r20.y
        lt r20.w, l(0.000000), r20.z
        if_nz r20.w
          sqrt r20.w, r22.x
          mul r22.y, cb9[r16.w + 3].x, cb9[r16.w + 3].x
          div r22.x, r22.y, r22.x
          min r22.x, r22.x, l(1.000000)
          mad_sat r24.yz, r20.wwww, cb9[r16.w + 2].xxzx, cb9[r16.w + 2].yywy
          mul r35.xy, r24.yzyy, r24.yzyy
          mad r24.yz, r24.yyzy, l(0.000000, -2.000000, -2.000000, 0.000000), l(0.000000, 3.000000, 3.000000, 0.000000)
          mul r24.yz, r24.yyzy, r35.xxyx
          mul r20.w, r22.x, r24.y
          mul r20.w, r24.z, r20.w
          lt r22.x, l(0.000000), r20.w
          if_nz r22.x
            and r22.x, r19.y, l(255)
            iadd r22.y, r22.x, l(-1)
            ult r22.y, r22.y, l(32)
            and r22.y, r4.z, r22.y
            if_nz r22.y
              imad r22.xy, r22.xxxx, l(24, 24, 0, 0), l(88, 104, 0, 0)
              ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r24.y, cb2[52].x, r22.x, u2.xxxx
              or r24.y, r24.y, l(4)
              store_structured u2.x, cb2[52].x, r22.x, r24.y
              store_structured u2.x, cb2[52].x, r22.y, r20.w
            endif 
            iadd r22.x, r13.w, l(257)
            ine r17.w, r17.w, l(1)
            if_nz r17.w
              mad r17.w, |r20.y|, l(-0.200000), l(0.400000)
              mad r35.xyz, r11.xyzx, r17.wwww, r10.xyzx
              add r35.xyz, r35.xyzx, -cb9[r16.w + 4].yzwy
              max r17.w, |r35.z|, |r35.y|
              max r17.w, r17.w, |r35.x|
              div r17.w, cb9[r16.w + 5].x, r17.w
              add r17.w, r17.w, cb9[r16.w + 5].y
              dp3 r22.y, r35.xyzx, r35.xyzx
              rsq r22.y, r22.y
              max r17.w, r17.w, l(0.00006104)
              and r24.y, l(0x0000ffff), cb9[r16.w + 1].w
              utof r36.w, r24.y
              mov r24.yz, l(0,0,0,0)
              loop 
                ige r26.w, r24.z, l(8)
                breakc_nz r26.w
                dp2 r37.y, icb[r24.z + 0].xyxx, r13.xyxx
                dp2 r37.z, icb[r24.z + 0].yxyy, r13.xzxx
                mul r37.yz, r37.yyzy, cb9[r16.w + 3].yyyy
                mul r37.x, r14.x, r37.y
                mul r37.w, r5.x, r37.y
                mad r36.xyz, r35.xyzx, r22.yyyy, r37.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r26.w, r36.xyzw, t10.xxxx, s13, r17.w
                mad r24.y, r26.w, l(0.125000), r24.y
                iadd r24.z, r24.z, l(1)
              endloop 
            else 
              mov r24.y, l(1.000000)
            endif 
            mul r17.w, r20.w, r24.y
            lt r20.w, l(0.000000), r17.w
            if_nz r20.w
              ubfe r20.w, l(4), l(16), cb9[r16.w + 1].w
              ult r22.y, l(0), r20.w
              and r22.y, r1.z, r22.y
              if_nz r22.y
                iadd r20.w, r20.w, cb2[0].x
                imad r20.w, r20.w, l(15), l(-15)
                mad r22.y, |r20.y|, l(-0.200000), l(0.400000)
                mad r25.xyz, r11.xyzx, r22.yyyy, r10.xyzx
                mov r35.xyz, cb9[r20.w + 6].yzwy
                mov r35.w, cb9[r20.w + 7].x
                dp4 r22.y, r35.xyzw, r25.xyzw
                mov r35.xyz, cb9[r20.w + 7].yzwy
                mov r35.w, cb9[r20.w + 8].x
                dp4 r24.z, r35.xyzw, r25.xyzw
                lt r26.w, r24.z, r22.y
                if_z r26.w
                  mov r35.xyz, cb9[r20.w + 4].yzwy
                  mov r35.w, cb9[r20.w + 5].x
                  dp4 r35.x, r35.xyzw, r25.xyzw
                  mov r36.xyz, cb9[r20.w + 5].yzwy
                  mov r36.w, cb9[r20.w + 6].x
                  dp4 r35.y, r36.xyzw, r25.xyzw
                  div r25.xy, r35.xyxx, r24.zzzz
                  mad r25.xy, r25.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r35.x, r25.x, cb9[r20.w + 9].w
                  add r35.y, r25.y, cb9[r20.w + 10].x
                  mul r25.xy, r35.xyxx, cb9[r20.w + 9].yzyy
                  div r35.xy, cb9[r20.w + 3].yyyy, cb9[r20.w + 8].ywyy
                  add r35.zw, -r35.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                  ge r35.zw, r25.xxxy, r35.zzzw
                  ge r35.xy, r35.xyxx, r25.xyxx
                  or r35.xy, r35.xyxx, r35.zwzz
                  or r25.z, r35.y, r35.x
                  if_z r25.z
                    mov_sat r25.xy, r25.xyxx
                    mad r35.x, r25.x, cb9[r20.w + 8].y, cb9[r20.w + 8].z
                    mad r35.y, r25.y, cb9[r20.w + 8].w, cb9[r20.w + 9].x
                    mul r25.x, r24.z, cb9[r20.w + 10].z
                    mad r22.y, cb9[r20.w + 10].y, r24.z, r22.y
                    div r22.y, r22.y, r25.x
                  endif 
                else 
                  mov r25.z, l(-1)
                endif 
                or r24.z, r26.w, r25.z
                if_z r24.z
                  max r22.y, r22.y, l(0.00006104)
                  and r24.z, l(0x0000ffff), cb9[r20.w + 1].w
                  if_nz r12.w
                    utof r25.z, r24.z
                    mov r26.w, l(0)
                    mov r28.w, l(0)
                    loop 
                      ige r30.w, r28.w, l(8)
                      breakc_nz r30.w
                      dp2 r36.x, icb[r28.w + 0].xyxx, r28.xyxx
                      dp2 r36.y, icb[r28.w + 0].yxyy, r28.xzxx
                      mad r25.xy, r36.xyxx, cb9[r20.w + 3].yyyy, r35.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r25.xyzx, t9.xxxx, s13, r22.y
                      mad r26.w, r25.x, l(0.125000), r26.w
                      iadd r28.w, r28.w, l(1)
                    endloop 
                  else 
                    utof r35.z, r24.z
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r26.w, r35.xyzx, t9.xxxx, s13, r22.y
                  endif 
                  mul r20.w, r26.w, r26.w
                  mul r20.w, r26.w, r20.w
                else 
                  mov r20.w, l(1.000000)
                endif 
                mul r17.w, r17.w, r20.w
              else 
                ubfe r20.w, l(4), l(20), cb9[r16.w + 1].w
                ult r22.y, l(0), r20.w
                and r22.y, r6.w, r22.y
                if_nz r22.y
                  iadd r20.w, r20.w, cb2[0].x
                  imad r20.w, r20.w, l(15), l(-15)
                  mad r22.y, |r20.y|, l(-0.200000), l(0.400000)
                  mad r27.xyz, r11.xyzx, r22.yyyy, r10.xyzx
                  mov r35.xyz, cb9[r20.w + 6].yzwy
                  mov r35.w, cb9[r20.w + 7].x
                  dp4 r22.y, r35.xyzw, r27.xyzw
                  mov r35.xyz, cb9[r20.w + 7].yzwy
                  mov r35.w, cb9[r20.w + 8].x
                  dp4 r24.z, r35.xyzw, r27.xyzw
                  lt r25.x, r24.z, r22.y
                  if_z r25.x
                    mov r35.xyz, cb9[r20.w + 4].yzwy
                    mov r35.w, cb9[r20.w + 5].x
                    dp4 r35.x, r35.xyzw, r27.xyzw
                    mov r36.xyz, cb9[r20.w + 5].yzwy
                    mov r36.w, cb9[r20.w + 6].x
                    dp4 r35.y, r36.xyzw, r27.xyzw
                    div r25.yz, r35.xxyx, r24.zzzz
                    mad r25.yz, r25.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                    add r27.x, r25.y, cb9[r20.w + 9].w
                    add r27.y, r25.z, cb9[r20.w + 10].x
                    mul r25.yz, r27.xxyx, cb9[r20.w + 9].yyzy
                    div r27.xy, cb9[r20.w + 3].yyyy, cb9[r20.w + 8].ywyy
                    add r35.xy, -r27.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r35.xy, r25.yzyy, r35.xyxx
                    ge r27.xy, r27.xyxx, r25.yzyy
                    or r27.xy, r27.xyxx, r35.xyxx
                    or r27.x, r27.y, r27.x
                    if_z r27.x
                      mov_sat r25.yz, r25.yyzy
                      mad r35.x, r25.y, cb9[r20.w + 8].y, cb9[r20.w + 8].z
                      mad r35.y, r25.z, cb9[r20.w + 8].w, cb9[r20.w + 9].x
                      mul r25.y, r24.z, cb9[r20.w + 10].z
                      mad r22.y, cb9[r20.w + 10].y, r24.z, r22.y
                      div r22.y, r22.y, r25.y
                    endif 
                  else 
                    mov r27.x, l(-1)
                  endif 
                  or r24.z, r25.x, r27.x
                  if_z r24.z
                    max r22.y, r22.y, l(0.00006104)
                    and r24.z, l(0x0000ffff), cb9[r20.w + 1].w
                    if_nz r12.w
                      utof r25.z, r24.z
                      mov r27.xy, l(0,0,0,0)
                      loop 
                        ige r27.z, r27.y, l(8)
                        breakc_nz r27.z
                        dp2 r36.x, icb[r27.y + 0].xyxx, r29.xyxx
                        dp2 r36.y, icb[r27.y + 0].yxyy, r29.xzxx
                        mad r25.xy, r36.xyxx, cb9[r20.w + 3].yyyy, r35.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r25.x, r25.xyzx, t9.xxxx, s13, r22.y
                        mad r27.x, r25.x, l(0.125000), r27.x
                        iadd r27.y, r27.y, l(1)
                      endloop 
                    else 
                      utof r35.z, r24.z
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r27.x, r35.xyzx, t9.xxxx, s13, r22.y
                    endif 
                    mul r20.w, r27.x, r27.x
                    mul r20.w, r27.x, r20.w
                  else 
                    mov r20.w, l(1.000000)
                  endif 
                  mul r17.w, r17.w, r20.w
                endif 
              endif 
              mad r20.w, -r20.z, r2.x, l(1.000000)
              mul r20.w, r20.w, r20.w
              mad r20.w, -r20.w, l(0.620000), l(0.620000)
              add r20.w, -r20.z, r20.w
              mad r20.z, r0.w, r20.w, r20.z
              mul r20.z, r17.w, r20.z
              mov r25.x, cb9[r16.w + 0].w
              mov r25.yz, cb9[r16.w + 1].xxyx
              lt r16.w, l(0.000000), r20.y
              mad r20.yzw, r20.zzzz, r25.xxyz, r32.xxyz
              dp3_sat r22.y, r11.xyzx, r23.xyzx
              mad r21.xyw, r21.xyxw, r19.wwww, r12.xyxz
              dp3 r19.w, r21.xywx, r21.xywx
              rsq r19.w, r19.w
              mul r21.xyw, r19.wwww, r21.xyxw
              dp3 r19.w, r21.xywx, r12.xyzx
              dp3 r21.x, r11.xyzx, r21.xywx
              mad r21.y, |r21.x|, r0.z, -|r21.x|
              mad r21.x, |r21.x|, r21.y, l(1.000000)
              mad r21.y, r22.y, r1.w, r3.z
              mul r21.x, r21.x, r21.x
              mul r21.x, r21.y, r21.x
              rcp r21.x, r21.x
              mul r19.z, r19.z, r22.y
              mul r19.z, r19.z, r21.x
              mul r19.z, r17.w, r19.z
              mad r21.xyw, r19.zzzz, r25.xyxz, r34.xyxz
              add_sat r19.w, -r19.w, l(1.000000)
              mul r22.y, r19.w, r19.w
              mul r22.y, r22.y, r22.y
              mul r19.w, r19.w, r22.y
              mul r19.z, r19.w, r19.z
              mad r23.xyz, r19.zzzz, r25.xyzx, r33.xyzx
              movc r32.xyz, r16.wwww, r20.yzwy, r32.xyzx
              movc r33.xyz, r16.wwww, r23.xyzx, r33.xyzx
              movc r34.xyz, r16.wwww, r21.xywx, r34.xyzx
              and r16.w, r22.x, l(255)
              iadd r19.z, r16.w, l(-1)
              ult r19.z, r19.z, l(32)
              and r19.z, r4.z, r19.z
              if_nz r19.z
                imad r19.zw, r16.wwww, l(0, 0, 24, 24), l(0, 0, 88, 108)
                ld_structured_indexable(structured_buffer, stride=1792)(mixed,mixed,mixed,mixed) r16.w, cb2[52].x, r19.z, u2.xxxx
                or r16.w, r16.w, l(8)
                store_structured u2.x, cb2[52].x, r19.z, r16.w
                store_structured u2.x, cb2[52].x, r19.w, r17.w
              endif 
              iadd r13.w, r13.w, l(0x00010101)
            else 
              mov r13.w, r22.x
            endif 
          else 
            mov r13.w, r19.y
          endif 
        else 
          mov r13.w, r19.y
        endif 
      endif 
    endif 
  endloop 
  mov r14.yzw, r32.xxyz
  mov r30.xyz, r33.xyzx
  mov r31.xyz, r34.xyzx
  mov r8.w, r13.w
  iadd r9.w, r9.w, l(32)
endloop 
mad r2.xyz, r3.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.z, r2.y
mad r3.xyz, r6.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r3.x
ieq r0.w, r0.z, r0.w
movc r1.zw, r0.wwww, r3.yyyz, l(0,0,-1.000000,0)
mad r3.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r3.x
ieq r0.w, r0.z, r0.w
movc r3.xy, r0.wwww, r3.yzyy, l(-1.000000,0,0,0)
mad r4.xyw, r8.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r0.w, r4.x
ieq r0.w, r0.z, r0.w
movc r3.zw, r0.wwww, r4.yyyw, l(0,0,-1.000000,0)
mad r4.xyw, r9.zxzy, l(3.000000, 1.000000, 0.000000, 2.000000), l(0.500000, 0.000000, 0.000000, -1.000000)
ftou r0.w, r4.x
ieq r0.z, r0.z, r0.w
movc r0.zw, r0.zzzz, r4.yyyw, l(0,0,-1.000000,0)
mov r6.x, r1.z
mov r6.yz, r3.xxzx
mov r6.w, r0.z
add r6.xyzw, -r2.xxxx, r6.xyzw
ge r6.xyzw, |r6.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r6.xyzw, r6.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.z, r6.y, r6.x
add r0.z, r6.z, r0.z
add r0.z, r6.w, r0.z
mul r1.z, r3.y, r6.y
mad r1.z, r6.x, r1.w, r1.z
mad r1.z, r6.z, r3.w, r1.z
mad r0.w, r6.w, r0.w, r1.z
div r2.w, r0.w, r0.z
ge r0.z, l(0.000000), r0.z
movc r2.yz, r0.zzzz, l(0,0,0,0), r2.zzwz
and r0.zw, r1.xxxy, l(0, 0, 1, 1)
ieq r0.z, r0.w, r0.z
movc r2.xyz, r0.zzzz, r2.xyzx, r2.xzyx
mad r0.z, -r2.z, l(0.500000), r2.x
add r3.y, r0.z, r2.z
mad r3.z, -r2.y, l(0.500000), r0.z
add r3.x, r2.y, r3.z
add r2.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, r30.xyzx
mad r2.xyz, r31.xyzx, r3.xyzx, r2.xyzx
mad r2.xyz, r14.yzwy, r5.yzwy, r2.xyzx
lt r0.z, l(0.000000), cb2[9].z
if_nz r0.z
  dp3 r0.z, r10.xyzx, r10.xyzx
  rsq r0.w, r0.z
  mul r3.xyz, r0.wwww, r10.xyzx
  sqrt r0.z, r0.z
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r1.zw, r0.zzzz, cb2[15].xxxy, cb2[14].zzzw
    mul r1.zw, r1.zzzw, cb2[16].xxxy
    lt r0.w, l(0.010000), |r10.z|
    mul r4.xy, r10.zzzz, cb2[15].zwzz
    mul r5.xy, r4.xyxx, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r5.xy, r5.xyxx
    add r5.xy, -r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r4.xy, r5.xyxx, r4.xyxx
    mul r4.xy, r1.zwzz, r4.xyxx
    movc r1.zw, r0.wwww, r4.xxxy, r1.zzzw
    mul r4.xyw, r1.zzzz, cb2[12].xyxz
    exp r4.xyw, r4.xyxw
    mul r5.xyz, r1.wwww, cb2[12].xyzx
    exp r5.xyz, r5.xyzx
    add r5.xyz, -r4.xywx, r5.xyzx
    mad r4.xyw, cb2[13].wwww, r5.xyxz, r4.xyxw
  else 
    mad r0.w, r0.z, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.z, l(0.010000), |r10.z|
    mul r1.w, r10.z, cb2[15].z
    mul r2.w, r1.w, l(-1.442695)
    exp r2.w, r2.w
    add r2.w, -r2.w, l(1.000000)
    div r1.w, r2.w, r1.w
    mul r1.w, r0.w, r1.w
    movc r0.w, r1.z, r1.w, r0.w
    mul r5.xyz, r0.wwww, cb2[12].xyzx
    exp r4.xyw, r5.xyxz
  endif 
  mad r4.xyw, r4.xyxw, cb2[9].zzzz, l(1.000000, 1.000000, 0.000000, 1.000000)
  add_sat r4.xyw, r4.xyxw, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r3.xyzx
  mad r1.z, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r1.w, cb2[8].w, -r0.w, l(1.000000)
  mul r1.w, r1.w, r1.w
  mul r1.w, r1.w, l(12.566371)
  div r1.z, r1.z, r1.w
  add r0.z, r0.z, -cb2[10].w
  mul_sat r0.z, r0.z, cb2[11].w
  mul r0.z, r0.z, r1.z
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r3.xyz, r0.zzzz, cb2[11].xyzx
  mad r3.xyz, r0.wwww, cb2[10].xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, cb2[9].wwww
  add r5.xyz, -r4.xywx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r3.xyz, r3.xyzx, r5.xyzx
  mad r3.xyz, r2.xyzx, r4.xywx, r3.xyzx
else 
  mul r0.z, r10.z, cb2[6].x
  mad r0.w, cb2[6].x, r10.z, cb2[5].x
  lt r1.z, |r0.z|, l(0.000100)
  min r1.w, r0.w, l(64.000000)
  mul r1.w, r1.w, l(1.442695)
  exp r1.w, r1.w
  mov_sat r2.w, cb2[6].z
  lt r3.w, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r3.w, r1.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.z, r1.z, l(1.000000), r0.z
  div r0.z, r0.w, r0.z
  movc r0.z, r1.z, r2.w, r0.z
  mul r0.z, r0.z, cb2[5].z
  dp3 r0.w, r10.xyzx, r10.xyzx
  sqrt r1.z, r0.w
  mad r0.z, r0.z, r1.z, cb2[5].w
  exp r0.z, r0.z
  min r0.z, r0.z, l(1.000000)
  add r0.z, -r0.z, l(1.000000)
  rsq r0.w, r0.w
  mul r4.xyw, r0.wwww, r10.xyxz
  dp3 r0.w, cb2[7].yzwy, r4.xywx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r5.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r5.xyzw, r0.wwww, r5.xyzw, cb2[4].xyzw
  mul r0.z, r0.z, r5.w
  add r4.xyw, -r2.xyxz, r5.xyxz
  mad r3.xyz, r0.zzzz, r4.xywx, r2.xyzx
endif 
mul r2.xyz, r3.xyzx, cb1[85].yyyy
ge r3.xyz, r2.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r2.xyz, r2.xyzx, r3.xyzx
min r2.xyz, r2.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
ilt r0.z, l(0), cb2[55].w
and r3.xyzw, cb2[55].wwww, l(32, 3, 64, 12)
ine r1.zw, r3.xxxz, l(0, 0, 0, 0)
ieq r3.xy, r3.ywyy, l(0, 4, 0, 0)
and r1.zw, r1.zzzw, r3.xxxy
and r3.xy, r1.zwzz, l(0x3e4ccccd, 0x3e4ccccd, 0, 0)
and r0.w, cb2[55].w, l(16)
ine r1.z, r0.w, l(0)
ieq r0.w, r0.w, l(16)
and r0.w, r0.w, r1.z
and r3.z, r0.w, l(0x3e4ccccd)
mad r3.xyz, r3.xyzx, cb1[85].xxxx, -r2.xyzx
mad r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r2.xyzx
movc r2.xyz, r0.zzzz, r3.xyzx, r2.xyzx
if_nz cb2[52].y
  if_nz cb2[53].y
    switch cb2[53].y
      case l(1)
      and r0.z, r8.w, l(255)
      break 
      case l(2)
      ubfe r0.z, l(8), l(8), r8.w
      break 
      case l(3)
      ubfe r0.z, l(8), l(16), r8.w
      break 
      case l(4)
      mov r0.z, l(0)
      break 
      case l(5)
      mov r0.z, l(1)
      break 
      default 
      mov r0.z, l(0)
      break 
    endswitch 
    utof r0.z, r0.z
    mul r0.z, r0.z, cb2[53].z
    mad r3.xyz, r0.zzzz, l(0.500000, 0.500000, 0.500000, 0.000000), -r2.xyzx
    mad r2.xyz, cb2[53].wwww, r3.xyzx, r2.xyzx
  endif 
endif 
store_uav_typed u0.xyzw, r1.xyyy, r2.xyzx
if_nz r4.z
  add r1.xyz, r10.xyzx, cb1[24].xyzx
  and r1.w, r8.w, l(255)
  store_structured u2.xyzw, cb2[52].x, l(92), r1.xyzw
  store_structured u2.x, cb2[52].x, l(108), l(0)
endif 
if_nz cb2[52].y
  and r0.z, r8.w, l(255)
  atomic_iadd g1, l(0), r0.z
  ubfe r1.xy, l(8, 8, 0, 0), l(8, 16, 0, 0), r8.wwww
  atomic_iadd g1, l(4), r1.x
  atomic_iadd g1, l(8), r1.y
  atomic_iadd g1, l(12), l(0)
  atomic_iadd g1, l(16), l(1)
  atomic_umax g2, l(0), r0.z
  atomic_umax g2, l(4), r1.x
  atomic_umax g2, l(8), r1.y
  atomic_umax g2, l(12), l(0)
  atomic_umax g2, l(16), l(1)
  imm_atomic_iadd r1.x, g0, l(0), l(1)
  ieq r0.z, r1.x, l(63)
  if_nz r0.z
    ld_raw r1.xyzw, l(0), g1.xyzw
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,40,0,44)
    atomic_iadd u2, r2.xyxx, r1.x
    atomic_iadd u2, r2.zwzz, r1.y
    mov r2.xz, cb2[52].xxxx
    mov r2.yw, l(0,48,0,52)
    atomic_iadd u2, r2.xyxx, r1.z
    atomic_iadd u2, r2.zwzz, r1.w
    ld_raw r0.z, l(16), g1.xxxx
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,56,0,0)
    atomic_iadd u2, r1.xyxx, r0.z
    ld_raw r2.xyzw, l(0), g2.xyzw
    atomic_umax u2, r1.zwzz, r2.x
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,4,0,8)
    atomic_umax u2, r1.xyxx, r2.y
    atomic_umax u2, r1.zwzz, r2.z
    mov r1.xz, cb2[52].xxxx
    mov r1.yw, l(0,12,0,16)
    atomic_umax u2, r1.xyxx, r2.w
    ld_raw r0.z, l(16), g2.xxxx
    atomic_umax u2, r1.zwzz, r0.z
    ieq r0.xy, r0.xyxx, cb2[52].zwzz
    and r0.x, r0.y, r0.x
    if_nz r0.x
      store_structured u2.xyzw, cb2[52].x, l(20), r2.xyzw
      store_structured u2.x, cb2[52].x, l(36), r0.z
    endif 
  endif 
endif 
ret 
// Approximately 1579 instruction slots used
