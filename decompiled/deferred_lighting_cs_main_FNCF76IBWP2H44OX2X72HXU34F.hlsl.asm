//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:23:21 2021
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// cbuffer RefProbePackCBuffer
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } refProbeConstantsCB[273];        // Offset:    0 Size: 61152
//
// }
//
// cbuffer RefProbeBlendPackCBuffer
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } refProbeAttenuationConstantsCB[682];// Offset:    0 Size: 65472
//
// }
//
// Resource bind info for gCullConstants
// {
//
//   struct CoreCullConstantsPack
//   {
//       
//       uint4 data[5];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    80
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// GBufferDiffuseColor               texture  float4          2d             t0      1 
// GBufferNormalAndGloss             texture  float4          2d             t1      1 
// GBufferSpecularColorAndOcclusion    texture  float4          2d             t2      1 
// GBufferDepth                      texture   float          2d             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gCullConstants                    texture  struct         r/o            t11      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// gSSAOTexture                      texture   float          2d            t27      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// litBuffer                             UAV  float3          2d             u0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
// RefProbePackCBuffer               cbuffer      NA          NA           cb10      1 
// RefProbeBlendPackCBuffer          cbuffer      NA          NA           cb11      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB1[86], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_constantbuffer CB10[3822], dynamicIndexed
dcl_constantbuffer CB11[4092], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s4, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_structured t11, 80
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_structured t23, 4
dcl_resource_texture2d (float,float,float,float) t27
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.xy
dcl_input vThreadIDInGroup.xy
dcl_temps 42
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 4
dcl_tgsm_structured g2, 12, 8
dcl_tgsm_raw g3, 96
dcl_tgsm_raw g4, 12
dcl_tgsm_raw g5, 12
dcl_tgsm_structured g6, 4, 32
dcl_thread_group 8, 8, 1
imad r0.xy, vThreadGroupID.xyxx, l(8, 8, 0, 0), vThreadIDInGroup.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyww, t1.xyzw
ftou r1.yz, cb1[44].xxyx
ult r1.yz, r0.xxyx, r1.yyzy
and r1.w, r1.z, r1.y
lt r3.x, l(0.000000), r1.x
and r1.w, r1.w, r3.x
ge r3.x, r1.x, l(0.984375)
mul r3.z, r1.x, l(1.01587307)
mad r1.x, r1.x, l(64.000000), l(-63.000000)
movc r1.x, r3.x, r1.x, r3.z
max r1.x, r1.x, l(0.00000001)
rcp r3.y, r1.x
and r3.yz, r1.wwww, r3.xxyx
if_z vThreadIDInGroupFlattened.x
  store_raw g0.x, l(0), l(340282346638528859811704183484516925440.000000)
  store_raw g1.x, l(0), l(0)
endif 
sync_g_t
if_nz r1.w
  atomic_umin g0, l(0), r3.z
  add r1.x, r3.z, l(0.001000)
  atomic_umax g1, l(0), r1.x
endif 
sync_g_t
ld_raw r4.x, l(0), g0.xxxx
ld_raw r4.y, l(0), g1.xxxx
ult r4.zw, vThreadIDInGroupFlattened.xxxx, l(0, 0, 8, 6)
if_nz r4.z
  ishl r5.xy, vThreadGroupID.xyxx, l(3, 3, 0, 0)
  and r1.x, vThreadIDInGroupFlattened.x, l(1)
  ubfe r5.zw, l(0, 0, 1, 1), l(0, 0, 1, 2), vThreadIDInGroupFlattened.xxxx
  xor r1.x, r1.x, r5.z
  ishl r1.x, r1.x, l(3)
  iadd r1.x, r1.x, r5.x
  ishl r3.w, r5.z, l(3)
  iadd r3.w, r3.w, r5.y
  dp2 r4.x, r4.xyxx, icb[r5.w + 0].xyxx
  utof r5.x, r1.x
  utof r5.y, r3.w
  add r5.xy, r5.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
  add r5.xy, r5.xyxx, -cb1[71].xyxx
  mul r5.xy, r5.xyxx, cb1[44].zwzz
  mad r5.xy, r5.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
  mov r6.x, cb1[12].x
  mov r6.y, cb1[13].y
  mul r5.xy, r5.xyxx, r6.xyxx
  mov r5.z, l(1.000000)
  mul r5.xyz, r4.xxxx, r5.xyzx
  mul r6.xyz, r5.yyyy, cb1[17].xyzx
  mad r5.xyw, r5.xxxx, cb1[16].xyxz, r6.xyxz
  mad r5.xyz, r5.zzzz, cb1[18].xyzx, r5.xywx
  store_structured g2.xyz, vThreadIDInGroupFlattened.x, l(0), r5.xyzx
endif 
sync_g_t
if_z vThreadIDInGroupFlattened.x
  ld_structured r5.xyz, l(0), l(0), g2.xyzx
  mul r5.xyz, r5.xyzx, l(0.125000, 0.125000, 0.125000, 0.000000)
  ftoi r5.xyz, r5.xyzx
  store_raw g4.xyz, l(0), r5.xyzx
  store_raw g5.xyz, l(0), l(0,0,0,0)
endif 
sync_g_t
ult r1.x, l(0), vThreadIDInGroupFlattened.x
and r1.x, r4.z, r1.x
if_nz r1.x
  ld_structured r5.xyz, vThreadIDInGroupFlattened.x, l(0), g2.xyzx
  mul r5.xyz, r5.xyzx, l(0.125000, 0.125000, 0.125000, 0.000000)
  ftoi r5.xyz, r5.xyzx
  atomic_iadd g4, l(0), r5.x
  atomic_iadd g4, l(4), r5.y
  atomic_iadd g4, l(8), r5.z
endif 
sync_g_t
if_nz r4.z
  ld_structured r4.xyz, vThreadIDInGroupFlattened.x, l(0), g2.xyzx
  ld_raw r5.xyz, l(0), g4.xyzx
  itof r5.xyz, r5.xyzx
  add r4.xyz, r4.xyzx, -r5.xyzx
  mov r4.xyz, |r4.xyzx|
  atomic_umax g5, l(0), r4.x
  atomic_umax g5, l(4), r4.y
  atomic_umax g5, l(8), r4.z
endif 
sync_g_t
ld_raw r4.xyz, l(0), g4.xyzx
itof r4.xyz, r4.xyzx
ld_raw r5.xyz, l(0), g5.xyzx
if_nz r4.w
  ishl r6.xy, vThreadIDInGroupFlattened.xxxx, l(2, 4, 0, 0)
  ushr r6.xzw, l(0x00603210, 0, 0x00517654, 0x00420321), r6.xxxx
  and r6.xzw, r6.xxzw, l(7, 0, 7, 7)
  ld_structured r7.xyz, r6.x, l(0), g2.xyzx
  ld_structured r8.xyz, r6.z, l(0), g2.xyzx
  ld_structured r6.xzw, r6.w, l(0), g2.xxyz
  add r8.xyz, -r7.zxyz, r8.zxyz
  add r6.xzw, -r7.yyzx, r6.zzwx
  mul r9.xyz, r6.xzwx, r8.xyzx
  mad r6.xzw, r8.zzxy, r6.zzwx, -r9.xxyz
  dp3 r1.x, r6.xzwx, r6.xzwx
  rsq r1.x, r1.x
  mul r8.xyz, r1.xxxx, r6.xzwx
  dp3 r1.x, r8.xyzx, r7.xyzx
  mov r8.w, -r1.x
  store_raw g3.xyzw, r6.y, r8.xyzw
endif 
sync_g_t
ld_raw r6.xyzw, l(0), g3.xyzw
ld_raw r7.xyzw, l(16), g3.xyzw
ld_raw r8.xyzw, l(32), g3.xyzw
ld_raw r9.xyzw, l(48), g3.xyzw
ld_raw r10.xyzw, l(64), g3.xyzw
ld_raw r11.xyzw, l(80), g3.xyzw
mov r1.x, vThreadIDInGroupFlattened.x
loop 
  uge r3.w, r1.x, l(32)
  breakc_nz r3.w
  store_structured g6.x, r1.x, l(0), l(0)
  iadd r1.x, r1.x, l(64)
endloop 
sync_g_t
iadd r1.x, cb2[0].y, cb2[0].x
mov r12.y, l(0)
mov r3.w, vThreadIDInGroupFlattened.x
loop 
  uge r4.w, r3.w, r1.x
  breakc_nz r4.w
  ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r13.xyzw, r3.w, l(0), t11.xyzw
  ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r14.xy, r3.w, l(16), t11.xyxx
  add r15.xyz, -r4.xyzx, r13.xyzx
  mov r14.z, r13.w
  add r16.xyz, r5.xyzx, r14.zxyz
  lt r15.xyz, r16.xyzx, |r15.xyzx|
  or r4.w, r15.y, r15.x
  or r4.w, r15.z, r4.w
  if_z r4.w
    dp3 r4.w, r13.xyzx, r6.xyzx
    dp3 r5.w, r14.zxyz, |r6.xyzx|
    add r4.w, r4.w, r5.w
    lt r4.w, r4.w, -r6.w
    not r5.w, r4.w
    dp3 r12.z, r13.xyzx, r7.xyzx
    dp3 r12.w, r14.zxyz, |r7.xyzx|
    add r12.z, r12.w, r12.z
    lt r12.z, r12.z, -r7.w
    or r12.z, r4.w, r12.z
    and r5.w, r5.w, r12.z
    or r4.w, r4.w, r5.w
    dp3 r5.w, r13.xyzx, r8.xyzx
    dp3 r12.z, r14.zxyz, |r8.xyzx|
    add r5.w, r5.w, r12.z
    lt r5.w, r5.w, -r8.w
    or r4.w, r4.w, r5.w
    dp3 r5.w, r13.xyzx, r9.xyzx
    dp3 r12.z, r14.zxyz, |r9.xyzx|
    add r5.w, r5.w, r12.z
    lt r5.w, r5.w, -r9.w
    or r4.w, r4.w, r5.w
    dp3 r5.w, r13.xyzx, r10.xyzx
    dp3 r12.z, r14.zxyz, |r10.xyzx|
    add r5.w, r5.w, r12.z
    lt r5.w, r5.w, -r10.w
    or r4.w, r4.w, r5.w
    dp3 r5.w, r13.xyzx, r11.xyzx
    dp3 r12.z, r14.zxyz, |r11.xyzx|
    add r5.w, r5.w, r12.z
    lt r5.w, r5.w, -r11.w
    or r4.w, r4.w, r5.w
    if_z r4.w
      ult r4.w, r3.w, cb2[0].x
      iadd r5.w, r3.w, -cb2[0].x
      movc r5.w, r4.w, r3.w, r5.w
      movc r4.w, r4.w, l(0), l(16)
      ushr r12.z, r5.w, l(5)
      ishl r5.w, l(1), r5.w
      iadd r12.x, r4.w, r12.z
      atomic_or g6, r12.xyxx, r5.w
    endif 
  endif 
  iadd r3.w, r3.w, l(64)
endloop 
sync_g_t
lt r1.x, l(0.000000), r2.z
and r1.x, r1.x, r1.w
if_z r1.x
  ret 
endif 
ge r1.x, r2.z, l(0.500000)
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r0.xyww, t0.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r0.xyww, t2.xyzw
ld_aoffimmi_indexable(-1,0,0)(texture2d)(float,float,float,float) r6.xyz, r0.xyww, t2.xywz
ld_aoffimmi_indexable(0,-1,0)(texture2d)(float,float,float,float) r7.xyz, r0.xyww, t2.xywz
ld_aoffimmi_indexable(1,0,0)(texture2d)(float,float,float,float) r8.xyz, r0.xyww, t2.xywz
ld_aoffimmi_indexable(0,1,0)(texture2d)(float,float,float,float) r9.xyz, r0.xyzw, t2.xywz
utof r0.zw, r0.yyyx
add r10.xy, r0.wzww, l(0.500000, 0.500000, 0.000000, 0.000000)
add r10.zw, r10.xxxy, -cb1[71].xxxy
mul r10.zw, r10.zzzw, cb1[44].zzzw
mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
mov r11.x, cb1[12].x
mov r11.y, cb1[13].y
mul r11.xy, r10.zwzz, r11.xyxx
mov r11.z, l(1.000000)
mul r11.xyz, r3.zzzz, r11.xyzx
mul r12.xyz, r11.yyyy, cb1[17].xyzx
mad r11.xyw, r11.xxxx, cb1[16].xyxz, r12.xyxz
mad r11.xyz, r11.zzzz, cb1[18].xyzx, r11.xywx
mad r1.w, r2.w, l(3.000000), l(0.500000)
ftou r1.w, r1.w
mad r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r2.xyxx, l(0.850000, 0.850000, 0.000000, 0.000000)
dp2 r2.w, r2.xyxx, r2.xyxx
add r12.zw, -r2.wwww, l(0.000000, 0.000000, 2.000000, 1.000000)
sqrt r2.w, r12.z
mul r12.xy, r2.wwww, r2.xyxx
and r13.xyzw, r1.wwww, l(2, 1, 2, 1)
movc r13.xyzw, r13.zwxy, l(-1.000000,-1.000000,1,1), l(1.000000,1.000000,0,0)
xor r1.w, r13.w, r13.z
movc r13.z, r1.w, l(-1.000000), l(1.000000)
mul r2.xyw, r13.xyxz, l(-1.000000, 0.000000, 0.000000, 1.000000)
mul r14.xyz, r13.xyzx, l(1.000000, -2.000000, 1.000000, 0.000000)
mul r12.xyz, r12.xywx, l(0.40824831, 0.70710677, 0.57735026, 0.000000)
mul r2.xyw, r2.xyxw, r12.yyyy
mad r2.xyw, r14.xyxz, r12.xxxx, r2.xyxw
mad r12.xyz, r13.xyzx, r12.zzzz, r2.xywx
movc r1.w, r1.x, l(-0.500000), l(-0.00146628)
add r1.w, r1.w, r2.z
mul_sat r2.y, r1.w, l(2.00982332)
dp3 r1.w, -r11.xyzx, -r11.xyzx
rsq r1.w, r1.w
mul r13.xyz, r1.wwww, -r11.xyzx
dp2 r2.z, r0.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r2.z, r2.z
mul r2.z, r2.z, l(52.982918)
frc r2.z, r2.z
mad r2.z, r2.z, l(6.28318548), cb1[70].w
sincos r14.x, r15.x, r2.z
dp2 r0.z, r0.zwzz, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r0.z, r0.z
mul r0.z, r0.z, l(52.982918)
frc r0.z, r0.z
mad r0.z, r0.z, l(6.28318548), cb1[70].w
sincos r16.x, r17.x, r0.z
dp3_sat r2.x, r12.xyzx, r13.xyzx
dp3 r0.z, -r13.xyzx, r12.xyzx
add r0.z, r0.z, r0.z
mad r18.xyz, r12.xyzx, -r0.zzzz, -r13.xyzx
mul r0.z, r2.y, l(17.000000)
exp r0.z, r0.z
add r0.z, r0.z, l(2.000000)
div r0.z, l(2.000000), r0.z
sqrt r0.w, r0.z
mul r2.zw, r10.xxxy, cb1[44].zzzw
sample_l_indexable(texture2d)(float,float,float,float) r2.z, r2.zwzz, t27.yzxw, s4, l(0.000000)
mul r2.w, r2.z, r5.z
dp3 r3.z, r12.xyzx, cb2[17].xyzx
mov_sat r3.w, r3.z
movc r4.w, r1.x, |r3.z|, r3.w
ge r6.w, l(0.000000), r4.w
if_nz r6.w
  mov r7.w, l(0)
endif 
if_z r6.w
  mul r10.xyz, r11.yyyy, cb2[29].xyzx
  mad r10.xyz, r11.xxxx, cb2[28].xyzx, r10.xyzx
  mad r10.xyz, r11.zzzz, cb2[30].xyzx, r10.xyzx
  add r10.xyz, r10.xyzx, cb2[31].xyzx
  add r6.w, r10.z, -cb2[17].w
  mad r6.w, -r6.w, l(0.00006104), l(1.000000)
  mov_sat r8.w, r6.w
  eq r8.w, r6.w, r8.w
  if_nz r8.w
    mov r8.w, l(0)
    mov r9.w, l(0)
    loop 
      ge r10.w, r8.w, l(3.000000)
      breakc_nz r10.w
      ftou r10.w, r8.w
      add r14.zw, r10.xxxy, -cb2[r10.w + 20].xxxy
      max r13.w, |r14.w|, |r14.z|
      mul r9.w, r13.w, cb2[r10.w + 20].z
      lt r10.w, r9.w, l(1.000000)
      if_nz r10.w
        break 
      endif 
      add r8.w, r8.w, l(1.000000)
      mov r9.w, l(0)
    endloop 
  else 
    mov r8.w, l(3.000000)
    mov r9.w, l(0)
  endif 
  ge r10.w, r8.w, l(3.000000)
  if_nz r10.w
    mul r16.yzw, l(0.000000, 128.000000, 0.500000, 0.500000), cb2[27].zzxy
    rcp r19.xz, r16.yyyy
    mov r19.y, -r19.z
    mad r16.yzw, r10.xxyx, r19.xxyz, r16.zzwz
    add r17.yzw, l(0.000000, -0.00781250, -0.00781250, -0.00781250), cb2[27].xxyx
    max r16.yzw, r16.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r16.yzw, r17.yyzw, r16.yyzw
    mul r14.zw, r16.wwwz, cb2[32].xxxx
    round_ni r14.zw, r14.zzzw
    mul r13.w, r14.w, cb2[27].x
    mad r13.w, r13.w, cb2[32].x, r14.z
    ftou r13.w, r13.w
    iadd r13.w, r13.w, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.z, r13.w, l(0), t23.xxxx
    and r14.w, r14.z, l(0x40000000)
    ishl r15.w, r14.z, l(2)
    if_z r14.w
      and r14.w, r14.z, l(0x01ffffff)
      iadd r19.x, r13.w, r14.w
      ushr r13.w, r14.z, l(25)
      utof r13.w, r13.w
      mul r16.yzw, r13.wwww, r16.yyzw
      frc r16.yzw, r16.yyzw
      mul r16.yzw, r16.yyzw, l(0.000000, 128.000000, 128.000000, 128.000000)
      ftou r16.yzw, r16.yyzw
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.z, r19.x, l(0), t23.xxxx
      ushr r14.zw, r16.wwwz, l(0, 0, 6, 6)
      and r13.w, r19.z, l(0xc0000000)
      iadd r17.y, r19.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.y, r17.y, l(0), t23.xxxx
      movc r14.w, r14.w, r19.z, r17.y
      ushr r17.y, r14.w, l(13)
      movc r14.z, r14.z, r17.y, r14.w
      and r14.z, r14.z, l(8191)
      iadd r20.x, r14.z, r19.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
      mov r19.y, l(0)
      mov r20.y, l(1)
      movc r17.yzw, r13.wwww, r19.xxyz, r20.xxyz
      movc r20.yz, r13.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r14.zw, r16.wwwz, r20.yyyy
      and r14.zw, r14.zzzw, l(0, 0, 1, 1)
      and r19.w, r17.w, l(0xc0000000)
      iadd r20.y, r17.y, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.y, r20.y, l(0), t23.xxxx
      movc r14.w, r14.w, r17.w, r20.y
      ushr r20.y, r14.w, l(13)
      movc r14.z, r14.z, r20.y, r14.w
      and r14.z, r14.z, l(8191)
      iadd r20.x, r14.z, r17.y
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.w, r20.x, l(0), t23.xxxx
      movc r17.yzw, r19.wwww, r17.yyzw, r20.xxzw
      movc r17.yzw, r13.wwww, r19.xxyz, r17.yyzw
      and r13.w, r17.w, l(0xc0000000)
      if_z r13.w
        iadd r13.w, -r17.z, l(6)
        ushr r14.zw, r16.wwwz, r13.wwww
        or r13.w, r17.w, l(0x40000000)
        bfi r14.w, l(1), l(1), r14.w, l(0)
        bfi r14.z, l(1), l(0), r14.z, r14.w
        imul null, r14.z, r14.z, l(10)
        ushr r13.w, r13.w, r14.z
        and r13.w, r13.w, l(1023)
        iadd r19.x, r13.w, r17.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r19.w, r19.x, l(0), t23.xxxx
        iadd r19.yz, r17.zzzz, l(0, 1, 2, 0)
        iadd r13.w, -r19.y, l(6)
        ushr r14.zw, r16.wwwz, r13.wwww
        and r13.w, r19.w, l(0xc0000000)
        or r17.z, r19.w, l(0x40000000)
        bfi r14.w, l(1), l(1), r14.w, l(0)
        bfi r14.z, l(1), l(0), r14.z, r14.w
        imul null, r14.z, r14.z, l(10)
        ushr r14.z, r17.z, r14.z
        and r14.z, r14.z, l(1023)
        iadd r20.x, r14.z, r19.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r20.z, r20.x, l(0), t23.xxxx
        mov r20.y, r19.z
        movc r20.xyz, r13.wwww, r19.xywx, r20.xyzx
        iadd r14.z, -r20.y, l(6)
        ushr r14.zw, r16.wwwz, r14.zzzz
        and r17.z, r20.z, l(0xc0000000)
        or r19.y, r20.z, l(0x40000000)
        bfi r14.w, l(1), l(1), r14.w, l(0)
        bfi r14.z, l(1), l(0), r14.z, r14.w
        imul null, r14.z, r14.z, l(10)
        ushr r14.z, r19.y, r14.z
        and r14.z, r14.z, l(1023)
        iadd r21.x, r14.z, r20.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r21.y, r21.x, l(0), t23.xxxx
        movc r14.zw, r17.zzzz, r20.xxxz, r21.xxxy
        movc r17.yw, r13.wwww, r19.xxxw, r14.zzzw
      endif 
      and r13.w, r17.w, l(0xc0000000)
      if_z r13.w
        ubfe r14.z, l(14), l(15), r17.w
        utof r14.z, r14.z
        mul r14.z, r14.z, cb2[27].w
        and r19.xy, r17.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r14.w, r19.x
        mul r14.w, r14.w, cb2[27].w
        mul r14.zw, r14.zzzw, l(0.000000, 0.000000, 0.00006104, 0.00003052)
        and r17.z, r16.z, l(3)
        iadd r17.z, r17.z, r17.y
        iadd r17.z, r17.z, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r17.z, r17.z, l(0), t23.xxxx
        bfi r19.xzw, l(2, 0, 2, 1), l(3, 0, 1, 4), r16.yyzw, l(0, 0, 0, 0)
        ushr r16.y, r17.z, r19.x
        and r16.y, r16.y, l(255)
        utof r16.y, r16.y
        mul r16.y, r14.w, r16.y
        mad r16.y, r16.y, l(0.00392157), r14.z
        iadd r16.z, r19.z, l(1)
        ubfe r16.w, l(1), l(1), r16.w
        iadd r16.z, r16.w, r16.z
        iadd r16.z, r16.z, r17.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.z, r16.z, l(0), t23.xxxx
        ushr r16.z, r16.z, r19.w
        and r16.z, r16.z, l(0x0000ffff)
        utof r16.z, r16.z
        mul r14.w, r14.w, r16.z
        mad r14.z, r14.w, l(0.00001526), r14.z
        movc r15.w, r19.y, r16.y, r14.z
      else 
        and r14.z, r17.w, l(0x80000000)
        iadd r14.w, r17.y, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.w, l(0), t23.xxxx
        movc r14.z, r14.z, r14.w, l(0)
        ishl r14.w, r17.w, l(2)
        ushr r16.y, r14.z, l(16)
        f16tof32 r16.y, r16.y
        and r14.z, r14.z, l(0x0000ffff)
        f16tof32 r14.z, r14.z
        mad r14.w, r10.x, r16.y, r14.w
        mad r14.z, r10.y, r14.z, r14.w
        movc r15.w, r13.w, r14.z, r15.w
      endif 
    endif 
    mad r10.z, -cb2[27].z, l(2.000000), r10.z
    lt r10.z, r15.w, r10.z
    movc r7.w, r10.z, l(0), l(1.000000)
  endif 
  if_z r10.w
    if_z cb2[58].y
      ftou r10.z, r8.w
      add r14.zw, r10.xxxy, -cb2[r10.z + 20].xxxy
      mul r10.zw, r14.zzzw, cb2[r10.z + 20].zzzz
      mad r19.xy, r10.zwzz, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r10.z, cb2[26].y
      add r19.z, r8.w, r10.z
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.z, r19.xyzx, t13.xxxx, s13, r6.w
      sample_l_indexable(texture2darray)(float,float,float,float) r10.w, r19.xyzx, t31.yzwx, s0, l(0.000000)
      add r10.z, r10.w, r10.z
      add_sat r10.z, r10.z, l(-1.000000)
      mul r10.w, r10.z, r10.z
      mul r7.w, r10.z, r10.w
    endif 
    if_nz cb2[58].y
      mov r19.x, -r14.x
      ftou r10.z, r8.w
      add r8.w, r8.w, l(1.000000)
      min r8.w, r8.w, l(2.000000)
      ftou r8.w, r8.w
      add r9.w, -r9.w, l(1.000000)
      mul r9.w, r9.w, l(28.000000)
      ftou r9.w, r9.w
      add r14.zw, r10.xxxy, -cb2[r10.z + 20].xxxy
      mul r14.zw, r14.zzzw, cb2[r10.z + 20].zzzz
      mad r14.zw, r14.zzzw, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r10.xy, r10.xyxx, -cb2[r8.w + 20].xyxx
      mul r10.xy, r10.xyxx, cb2[r8.w + 20].zzzz
      mad r10.xy, r10.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      mov r19.y, r15.x
      mov r19.z, r14.x
      mov r10.w, l(0)
      mov r13.w, l(0)
      loop 
        uge r15.w, r13.w, l(8)
        breakc_nz r15.w
        ult r15.w, r9.w, r13.w
        movc r16.yz, r15.wwww, r10.xxyx, r14.zzwz
        movc r16.w, r15.w, cb2[r8.w + 20].w, cb2[r10.z + 20].w
        movc r15.w, r15.w, r8.w, r10.z
        dp2 r20.x, icb[r13.w + 4].yxyy, r19.xyxx
        dp2 r20.y, icb[r13.w + 4].yxyy, r19.yzyy
        mad r20.xy, r20.xyxx, r16.wwww, r16.yzyy
        iadd r15.w, r15.w, cb2[26].y
        utof r20.z, r15.w
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r15.w, r20.xyzx, t13.xxxx, s13, r6.w
        sample_l_indexable(texture2darray)(float,float,float,float) r16.y, r20.xyzx, t31.yxzw, s0, l(0.000000)
        add r15.w, r15.w, r16.y
        add_sat r15.w, r15.w, l(-1.000000)
        mad r10.w, r15.w, l(0.125000), r10.w
        iadd r13.w, r13.w, l(1)
      endloop 
      mul r6.w, r10.w, r10.w
      mul r7.w, r10.w, r6.w
    endif 
  endif 
endif 
add r6.w, -r2.y, l(1.000000)
mul r8.w, r6.w, l(5.000000)
mad r9.w, r6.w, l(5.000000), l(-2.500000)
mul r9.w, r9.w, l(0.400000)
max r9.w, r9.w, l(0.000000)
mul r9.w, r9.w, l(100.000000)
mad r10.xy, -r6.wwww, l(10.000000, 5.000000, 0.000000, 0.000000), l(6.857410, 7.085000, 0.000000, 0.000000)
exp r10.x, r10.x
mul r10.x, r2.x, r10.x
mul r10.z, r6.w, r8.w
mad r10.y, -r10.z, l(2.015905), r10.y
exp r10.y, r10.y
mul r10.y, r2.x, r10.y
mul r10.xy, r10.xyxx, l(9.136810, 9.708090, 0.000000, 0.000000)
max r10.x, r10.y, r10.x
max r10.x, r10.x, l(1.268160)
iadd r10.y, cb2[0].y, -cb2[58].x
and r10.z, r10.y, l(-32)
iadd r10.w, -r10.z, r10.y
and r13.w, cb2[0].y, l(-32)
iadd r14.z, -r13.w, cb2[0].y
mov r19.yz, l(0,0,1.000000,0)
mov r20.xy, l(0,0,0,0)
mov r21.x, l(1.000000)
mov r22.xy, l(0,0,0,0)
mov r23.xy, l(0,0,0,0)
mov r24.xyzw, l(0,0,0,0)
mov r25.yzw, l(0,0,0,0)
mov r14.w, r10.z
loop 
  uge r15.w, r14.w, cb2[0].y
  breakc_nz r15.w
  ushr r15.w, r14.w, l(5)
  iadd r15.w, r15.w, l(16)
  ld_structured r15.w, r15.w, l(0), g6.xxxx
  ieq r16.y, r10.z, r14.w
  bfi r16.z, r10.w, l(0), l(0), r15.w
  movc r15.w, r16.y, r16.z, r15.w
  ieq r16.y, r13.w, r14.w
  ubfe r16.z, r14.z, l(0), r15.w
  movc r15.w, r16.y, r16.z, r15.w
  mov r26.xyzw, r24.xyzw
  mov r27.xyz, r25.yzwy
  mov r16.y, r15.w
  loop 
    breakc_z r16.y
    firstbit_lo r16.z, r16.y
    ishl r16.w, l(1), r16.z
    not r16.w, r16.w
    and r16.y, r16.w, r16.y
    iadd r16.z, r14.w, r16.z
    imul null, r16.z, r16.z, l(14)
    add r17.yzw, r11.xxyz, -cb10[r16.z + 0].xxyz
    and r16.w, l(0x0000ffff), cb10[r16.z + 7].z
    ubfe r19.w, l(6), l(25), cb10[r16.z + 7].z
    imul null, r20.w, r16.w, l(6)
    dp3 r21.z, cb11[r20.w + 0].xyzx, r17.yzwy
    add_sat r21.z, r21.z, cb11[r20.w + 0].w
    dp3 r21.w, cb11[r20.w + 1].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r20.w + 1].w
    mul r21.z, r21.w, r21.z
    dp3 r21.w, cb11[r20.w + 2].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r20.w + 2].w
    mul r21.z, r21.w, r21.z
    dp3 r21.w, cb11[r20.w + 3].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r20.w + 3].w
    mul r21.z, r21.w, r21.z
    dp3 r21.w, cb11[r20.w + 4].xyzx, r17.yzwy
    add_sat r21.w, r21.w, cb11[r20.w + 4].w
    mul r21.z, r21.w, r21.z
    dp3 r21.w, cb11[r20.w + 5].xyzx, r17.yzwy
    add_sat r20.w, r21.w, cb11[r20.w + 5].w
    mul r19.x, r20.w, r21.z
    and r20.w, l(1), cb10[r16.z + 6].x
    movc r21.zw, r20.wwww, r19.xxxy, r19.zzzx
    mov r19.x, cb10[r16.z + 6].x
    mov r28.xy, r21.zwzz
    mov r20.w, l(1)
    loop 
      ige r22.w, r20.w, r19.w
      breakc_nz r22.w
      iadd r22.w, r16.w, r20.w
      imul null, r22.w, r22.w, l(6)
      dp3 r23.w, cb11[r22.w + 0].xyzx, r17.yzwy
      add_sat r23.w, r23.w, cb11[r22.w + 0].w
      mul r23.w, r23.w, r28.x
      dp3 r28.z, cb11[r22.w + 1].xyzx, r17.yzwy
      add_sat r28.z, r28.z, cb11[r22.w + 1].w
      mul r23.w, r23.w, r28.z
      dp3 r28.z, cb11[r22.w + 2].xyzx, r17.yzwy
      add_sat r28.z, r28.z, cb11[r22.w + 2].w
      mul r23.w, r23.w, r28.z
      dp3 r28.z, cb11[r22.w + 3].xyzx, r17.yzwy
      add_sat r28.z, r28.z, cb11[r22.w + 3].w
      mul r23.w, r23.w, r28.z
      dp3 r28.z, cb11[r22.w + 4].xyzx, r17.yzwy
      add_sat r28.z, r28.z, cb11[r22.w + 4].w
      mul r23.w, r23.w, r28.z
      dp3 r28.z, cb11[r22.w + 5].xyzx, r17.yzwy
      add_sat r22.w, r28.z, cb11[r22.w + 5].w
      mul r28.x, r22.w, r23.w
      ushr r28.z, r19.x, l(2)
      ubfe r28.w, l(1), l(2), r19.x
      and r29.x, r28.z, l(2)
      max r29.y, r28.x, r28.y
      mad r22.w, -r23.w, r22.w, l(1.000000)
      mul r22.w, r22.w, r28.y
      movc r21.y, r29.x, r22.w, r29.y
      movc r28.xy, r28.wwww, r28.xyxx, r21.xyxx
      iadd r20.w, r20.w, l(1)
      mov r19.x, r28.z
    endloop 
    mov_sat r28.y, r28.y
    mul r16.w, r28.y, cb10[r16.z + 6].y
    lt r19.x, l(0.000000), r16.w
    if_nz r19.x
      mad r27.z, r28.y, cb10[r16.z + 6].y, r27.z
      mul r16.w, r16.w, cb10[r16.z + 7].y
      mov r29.x, cb10[r16.z + 7].w
      mov r29.yz, cb10[r16.z + 8].xxyx
      dp3 r19.x, r18.xyzx, r29.xyzx
      dp3 r19.w, r17.yzwy, r29.xyzx
      add r19.w, r19.w, -cb10[r16.z + 8].z
      ge r20.w, r19.w, l(0.000000)
      max r19.w, r9.w, |r19.w|
      movc r19.w, r20.w, r19.w, -r19.w
      max r19.x, -r19.x, l(0.00000010)
      div r19.x, r19.w, r19.x
      min r19.x, |r19.x|, l(131072.000000)
      mov r29.x, cb10[r16.z + 8].w
      mov r29.yz, cb10[r16.z + 9].xxyx
      dp3 r19.w, r18.xyzx, r29.xyzx
      dp3 r20.w, r17.yzwy, r29.xyzx
      add r20.w, r20.w, -cb10[r16.z + 9].z
      ge r21.y, r20.w, l(0.000000)
      max r20.w, r9.w, |r20.w|
      movc r20.w, r21.y, r20.w, -r20.w
      max r19.w, -r19.w, l(0.00000010)
      div r19.w, r20.w, r19.w
      min r19.x, |r19.w|, r19.x
      mov r29.x, cb10[r16.z + 9].w
      mov r29.yz, cb10[r16.z + 10].xxyx
      dp3 r19.w, r18.xyzx, r29.xyzx
      dp3 r20.w, r17.yzwy, r29.xyzx
      add r20.w, r20.w, -cb10[r16.z + 10].z
      ge r21.y, r20.w, l(0.000000)
      max r20.w, r9.w, |r20.w|
      movc r20.w, r21.y, r20.w, -r20.w
      max r19.w, -r19.w, l(0.00000010)
      div r19.w, r20.w, r19.w
      min r19.x, |r19.w|, r19.x
      mov r29.x, cb10[r16.z + 10].w
      mov r29.yz, cb10[r16.z + 11].xxyx
      dp3 r19.w, r18.xyzx, r29.xyzx
      dp3 r20.w, r17.yzwy, r29.xyzx
      add r20.w, r20.w, -cb10[r16.z + 11].z
      ge r21.y, r20.w, l(0.000000)
      max r20.w, r9.w, |r20.w|
      movc r20.w, r21.y, r20.w, -r20.w
      max r19.w, -r19.w, l(0.00000010)
      div r19.w, r20.w, r19.w
      min r19.x, |r19.w|, r19.x
      mov r29.x, cb10[r16.z + 11].w
      mov r29.yz, cb10[r16.z + 12].xxyx
      dp3 r19.w, r18.xyzx, r29.xyzx
      dp3 r20.w, r17.yzwy, r29.xyzx
      add r20.w, r20.w, -cb10[r16.z + 12].z
      ge r21.y, r20.w, l(0.000000)
      max r20.w, r9.w, |r20.w|
      movc r20.w, r21.y, r20.w, -r20.w
      max r19.w, -r19.w, l(0.00000010)
      div r19.w, r20.w, r19.w
      min r19.x, |r19.w|, r19.x
      mov r29.x, cb10[r16.z + 12].w
      mov r29.yz, cb10[r16.z + 13].xxyx
      dp3 r19.w, r18.xyzx, r29.xyzx
      dp3 r20.w, r17.yzwy, r29.xyzx
      add r20.w, r20.w, -cb10[r16.z + 13].z
      ge r21.y, r20.w, l(0.000000)
      max r20.w, r9.w, |r20.w|
      movc r20.w, r21.y, r20.w, -r20.w
      max r19.w, -r19.w, l(0.00000010)
      div r19.w, r20.w, r19.w
      min r19.x, |r19.w|, r19.x
      add r29.x, r17.y, cb10[r16.z + 3].w
      add r29.yz, r17.zzwz, cb10[r16.z + 4].xxyx
      mad r21.yzw, r18.xxyz, r19.xxxx, r29.xxyz
      dp3 r19.w, r21.yzwy, r21.yzwy
      sqrt r19.w, r19.w
      div r19.x, r19.x, r19.w
      add r19.x, r19.x, r19.x
      sqrt r19.x, r19.x
      mad r19.x, r6.w, l(5.000000), r19.x
      add r19.x, r19.x, l(-0.844800)
      mov r29.x, cb10[r16.z + 0].w
      mov r29.y, cb10[r16.z + 1].z
      mov r29.z, cb10[r16.z + 2].y
      dp3 r30.x, r21.yzwy, r29.xyzx
      mov r31.xy, cb10[r16.z + 1].xwxx
      mov r31.z, cb10[r16.z + 2].z
      dp3 r30.y, r21.yzwy, r31.xyzx
      mov r32.x, cb10[r16.z + 1].y
      mov r32.yz, cb10[r16.z + 2].xxwx
      dp3 r30.z, r21.yzwy, r32.xyzx
      ubfe r19.w, l(9), l(16), cb10[r16.z + 7].z
      utof r30.w, r19.w
      sample_l_indexable(texturecubearray)(float,float,float,float) r21.yzw, r30.xyzw, t8.wxyz, s2, r19.x
      dp3 r33.x, r17.yzwy, r29.xyzx
      dp3 r33.y, r17.yzwy, r31.xyzx
      dp3 r33.z, r17.yzwy, r32.xyzx
      mad_sat r17.yzw, r33.xxyz, cb10[r16.z + 3].xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
      mul r33.xy, r17.yzyy, cb10[r16.z + 4].zwzz
      mul r33.z, r17.w, cb10[r16.z + 5].x
      add r17.yzw, r33.xxyz, cb10[r16.z + 5].yyzw
      dp3 r30.x, r12.xyzx, r29.xyzx
      dp3 r30.y, r12.xyzx, r31.xyzx
      dp3 r30.z, r12.xyzx, r32.xyzx
      lt r28.xzw, l(0.000000, 0.000000, 0.000000, 0.000000), r30.xxyz
      movc r20.z, r28.x, l(0), l(0.500000)
      add r29.xyz, r17.yzwy, r20.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r29.xyz, r29.xyzx, t17.xyzw, s4, l(0.000000)
      mul r31.xyz, r30.xyzx, r30.xyzx
      mul r31.xyz, r16.wwww, r31.xyzx
      movc r22.z, r28.z, l(0), l(0.500000)
      add r32.xyz, r17.yzwy, r22.xyzx
      sample_l_indexable(texture3d)(float,float,float,float) r32.xyz, r32.xyzx, t18.xyzw, s4, l(0.000000)
      mul r32.xyz, r31.yyyy, r32.xyzx
      mad r29.xyz, r29.xyzx, r31.xxxx, r32.xyzx
      movc r23.z, r28.w, l(0), l(0.500000)
      add r17.yzw, r17.yyzw, r23.xxyz
      sample_l_indexable(texture3d)(float,float,float,float) r17.yzw, r17.yzwy, t19.wxyz, s4, l(0.000000)
      mad r17.yzw, r17.yyzw, r31.zzzz, r29.xxyz
      sample_l_indexable(texturecubearray)(float,float,float,float) r28.xzw, r30.xyzw, t8.xwyz, s2, l(6.000000)
      mul r29.xyz, r17.yzwy, r28.xzwx
      dp3 r16.z, r29.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r26.xyz, r17.yzwy, r28.xzwx, r26.xyzx
      mul r17.y, r10.x, r16.z
      mul r21.yzw, r16.wwww, r21.yyzw
      dp3 r16.w, r21.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
      mad r16.z, r10.x, r16.z, r16.w
      div r16.z, r17.y, r16.z
      mov r29.x, r26.w
      mov r29.yz, r27.xxyx
      mad r27.xyw, r21.zwzy, r16.zzzz, r29.yzyx
      mov r26.w, r27.w
    endif 
  endloop 
  mov r24.xyzw, r26.xyzw
  mov r25.yzw, r27.xxyz
  iadd r14.w, r14.w, l(32)
endloop 
lt r13.w, r25.w, l(1.000000)
if_nz r13.w
  mov r19.yz, l(0,0,1.000000,0)
  mov r20.xy, l(0,0,0,0)
  mov r21.x, l(1.000000)
  mov r22.xy, l(0,0,0,0)
  mov r23.xy, l(0,0,0,0)
  mov r26.x, r24.w
  mov r26.yzw, r25.yyzw
  mov r16.yzw, r24.xxyz
  mov r13.w, r25.w
  mov r14.z, l(0)
  loop 
    uge r14.w, r14.z, r10.y
    breakc_nz r14.w
    ushr r14.w, r14.z, l(5)
    iadd r14.w, r14.w, l(16)
    ld_structured r14.w, r14.w, l(0), g6.xxxx
    ieq r15.w, r10.z, r14.z
    ubfe r17.y, r10.w, l(0), r14.w
    movc r14.w, r15.w, r17.y, r14.w
    mov r27.xyzw, r26.xyzw
    mov r17.yzw, r16.yyzw
    mov r15.w, r13.w
    mov r19.w, r14.w
    loop 
      breakc_z r19.w
      firstbit_lo r20.w, r19.w
      ishl r21.z, l(1), r20.w
      not r21.z, r21.z
      and r19.w, r19.w, r21.z
      iadd r20.w, r14.z, r20.w
      imul null, r20.w, r20.w, l(14)
      add r28.xyz, r11.xyzx, -cb10[r20.w + 0].xyzx
      and r21.z, l(0x0000ffff), cb10[r20.w + 7].z
      ubfe r21.w, l(6), l(25), cb10[r20.w + 7].z
      imul null, r22.w, r21.z, l(6)
      dp3 r23.w, cb11[r22.w + 0].xyzx, r28.xyzx
      add_sat r23.w, r23.w, cb11[r22.w + 0].w
      dp3 r28.w, cb11[r22.w + 1].xyzx, r28.xyzx
      add_sat r28.w, r28.w, cb11[r22.w + 1].w
      mul r23.w, r23.w, r28.w
      dp3 r28.w, cb11[r22.w + 2].xyzx, r28.xyzx
      add_sat r28.w, r28.w, cb11[r22.w + 2].w
      mul r23.w, r23.w, r28.w
      dp3 r28.w, cb11[r22.w + 3].xyzx, r28.xyzx
      add_sat r28.w, r28.w, cb11[r22.w + 3].w
      mul r23.w, r23.w, r28.w
      dp3 r28.w, cb11[r22.w + 4].xyzx, r28.xyzx
      add_sat r28.w, r28.w, cb11[r22.w + 4].w
      mul r23.w, r23.w, r28.w
      dp3 r28.w, cb11[r22.w + 5].xyzx, r28.xyzx
      add_sat r22.w, r28.w, cb11[r22.w + 5].w
      mul r19.x, r22.w, r23.w
      and r22.w, l(1), cb10[r20.w + 6].x
      movc r29.xy, r22.wwww, r19.xyxx, r19.zxzz
      mov r19.x, cb10[r20.w + 6].x
      mov r30.xy, r29.xyxx
      mov r22.w, l(1)
      loop 
        ige r23.w, r22.w, r21.w
        breakc_nz r23.w
        iadd r23.w, r21.z, r22.w
        imul null, r23.w, r23.w, l(6)
        dp3 r28.w, cb11[r23.w + 0].xyzx, r28.xyzx
        add_sat r28.w, r28.w, cb11[r23.w + 0].w
        mul r28.w, r28.w, r30.x
        dp3 r29.z, cb11[r23.w + 1].xyzx, r28.xyzx
        add_sat r29.z, r29.z, cb11[r23.w + 1].w
        mul r28.w, r28.w, r29.z
        dp3 r29.z, cb11[r23.w + 2].xyzx, r28.xyzx
        add_sat r29.z, r29.z, cb11[r23.w + 2].w
        mul r28.w, r28.w, r29.z
        dp3 r29.z, cb11[r23.w + 3].xyzx, r28.xyzx
        add_sat r29.z, r29.z, cb11[r23.w + 3].w
        mul r28.w, r28.w, r29.z
        dp3 r29.z, cb11[r23.w + 4].xyzx, r28.xyzx
        add_sat r29.z, r29.z, cb11[r23.w + 4].w
        mul r28.w, r28.w, r29.z
        dp3 r29.z, cb11[r23.w + 5].xyzx, r28.xyzx
        add_sat r23.w, r29.z, cb11[r23.w + 5].w
        mul r30.x, r23.w, r28.w
        ushr r29.z, r19.x, l(2)
        ubfe r29.w, l(1), l(2), r19.x
        and r30.z, r29.z, l(2)
        max r30.w, r30.x, r30.y
        mad r23.w, -r28.w, r23.w, l(1.000000)
        mul r23.w, r23.w, r30.y
        movc r21.y, r30.z, r23.w, r30.w
        movc r30.xy, r29.wwww, r30.xyxx, r21.xyxx
        iadd r22.w, r22.w, l(1)
        mov r19.x, r29.z
      endloop 
      add_sat r19.x, -r15.w, r30.y
      mul r21.y, r19.x, cb10[r20.w + 6].y
      lt r21.z, l(0.000000), r21.y
      if_nz r21.z
        mad r27.w, r19.x, cb10[r20.w + 6].y, r27.w
        mul r19.x, r21.y, cb10[r20.w + 7].y
        mov r29.x, cb10[r20.w + 7].w
        mov r29.yz, cb10[r20.w + 8].xxyx
        dp3 r21.y, r18.xyzx, r29.xyzx
        dp3 r21.z, r28.xyzx, r29.xyzx
        add r21.z, r21.z, -cb10[r20.w + 8].z
        ge r21.w, r21.z, l(0.000000)
        max r21.z, r9.w, |r21.z|
        movc r21.z, r21.w, r21.z, -r21.z
        max r21.y, -r21.y, l(0.00000010)
        div r21.y, r21.z, r21.y
        min r21.y, |r21.y|, l(131072.000000)
        mov r29.x, cb10[r20.w + 8].w
        mov r29.yz, cb10[r20.w + 9].xxyx
        dp3 r21.z, r18.xyzx, r29.xyzx
        dp3 r21.w, r28.xyzx, r29.xyzx
        add r21.w, r21.w, -cb10[r20.w + 9].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r9.w, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r21.z, -r21.z, l(0.00000010)
        div r21.z, r21.w, r21.z
        min r21.y, |r21.z|, r21.y
        mov r29.x, cb10[r20.w + 9].w
        mov r29.yz, cb10[r20.w + 10].xxyx
        dp3 r21.z, r18.xyzx, r29.xyzx
        dp3 r21.w, r28.xyzx, r29.xyzx
        add r21.w, r21.w, -cb10[r20.w + 10].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r9.w, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r21.z, -r21.z, l(0.00000010)
        div r21.z, r21.w, r21.z
        min r21.y, |r21.z|, r21.y
        mov r29.x, cb10[r20.w + 10].w
        mov r29.yz, cb10[r20.w + 11].xxyx
        dp3 r21.z, r18.xyzx, r29.xyzx
        dp3 r21.w, r28.xyzx, r29.xyzx
        add r21.w, r21.w, -cb10[r20.w + 11].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r9.w, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r21.z, -r21.z, l(0.00000010)
        div r21.z, r21.w, r21.z
        min r21.y, |r21.z|, r21.y
        mov r29.x, cb10[r20.w + 11].w
        mov r29.yz, cb10[r20.w + 12].xxyx
        dp3 r21.z, r18.xyzx, r29.xyzx
        dp3 r21.w, r28.xyzx, r29.xyzx
        add r21.w, r21.w, -cb10[r20.w + 12].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r9.w, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r21.z, -r21.z, l(0.00000010)
        div r21.z, r21.w, r21.z
        min r21.y, |r21.z|, r21.y
        mov r29.x, cb10[r20.w + 12].w
        mov r29.yz, cb10[r20.w + 13].xxyx
        dp3 r21.z, r18.xyzx, r29.xyzx
        dp3 r21.w, r28.xyzx, r29.xyzx
        add r21.w, r21.w, -cb10[r20.w + 13].z
        ge r22.w, r21.w, l(0.000000)
        max r21.w, r9.w, |r21.w|
        movc r21.w, r22.w, r21.w, -r21.w
        max r21.z, -r21.z, l(0.00000010)
        div r21.z, r21.w, r21.z
        min r21.y, |r21.z|, r21.y
        add r29.x, r28.x, cb10[r20.w + 3].w
        add r29.yz, r28.yyzy, cb10[r20.w + 4].xxyx
        mad r29.xyz, r18.xyzx, r21.yyyy, r29.xyzx
        dp3 r21.z, r29.xyzx, r29.xyzx
        sqrt r21.z, r21.z
        div r21.y, r21.y, r21.z
        add r21.y, r21.y, r21.y
        sqrt r21.y, r21.y
        mad r21.y, r6.w, l(5.000000), r21.y
        add r21.y, r21.y, l(-0.844800)
        mov r31.x, cb10[r20.w + 0].w
        mov r31.y, cb10[r20.w + 1].z
        mov r31.z, cb10[r20.w + 2].y
        dp3 r32.x, r29.xyzx, r31.xyzx
        mov r33.xy, cb10[r20.w + 1].xwxx
        mov r33.z, cb10[r20.w + 2].z
        dp3 r32.y, r29.xyzx, r33.xyzx
        mov r34.x, cb10[r20.w + 1].y
        mov r34.yz, cb10[r20.w + 2].xxwx
        dp3 r32.z, r29.xyzx, r34.xyzx
        ubfe r21.z, l(9), l(16), cb10[r20.w + 7].z
        utof r32.w, r21.z
        sample_l_indexable(texturecubearray)(float,float,float,float) r21.yzw, r32.xyzw, t8.wxyz, s2, r21.y
        dp3 r29.x, r28.xyzx, r31.xyzx
        dp3 r29.y, r28.xyzx, r33.xyzx
        dp3 r29.z, r28.xyzx, r34.xyzx
        mad_sat r28.xyz, r29.xyzx, cb10[r20.w + 3].xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
        mul r29.xy, r28.xyxx, cb10[r20.w + 4].zwzz
        mul r29.z, r28.z, cb10[r20.w + 5].x
        add r28.xyz, r29.xyzx, cb10[r20.w + 5].yzwy
        dp3 r32.x, r12.xyzx, r31.xyzx
        dp3 r32.y, r12.xyzx, r33.xyzx
        dp3 r32.z, r12.xyzx, r34.xyzx
        lt r29.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r32.xyzx
        movc r20.z, r29.x, l(0), l(0.500000)
        add r30.xzw, r20.xxyz, r28.xxyz
        sample_l_indexable(texture3d)(float,float,float,float) r30.xzw, r30.xzwx, t17.xwyz, s4, l(0.000000)
        mul r31.xyz, r32.xyzx, r32.xyzx
        mul r31.xyz, r19.xxxx, r31.xyzx
        movc r22.z, r29.y, l(0), l(0.500000)
        add r29.xyw, r22.xyxz, r28.xyxz
        sample_l_indexable(texture3d)(float,float,float,float) r29.xyw, r29.xywx, t18.xywz, s4, l(0.000000)
        mul r29.xyw, r31.yyyy, r29.xyxw
        mad r29.xyw, r30.xzxw, r31.xxxx, r29.xyxw
        movc r23.z, r29.z, l(0), l(0.500000)
        add r28.xyz, r23.xyzx, r28.xyzx
        sample_l_indexable(texture3d)(float,float,float,float) r28.xyz, r28.xyzx, t19.xyzw, s4, l(0.000000)
        mad r28.xyz, r28.xyzx, r31.zzzz, r29.xywx
        sample_l_indexable(texturecubearray)(float,float,float,float) r29.xyz, r32.xyzw, t8.xyzw, s2, l(6.000000)
        mul r30.xzw, r28.xxyz, r29.xxyz
        dp3 r20.z, r30.xzwx, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r17.yzw, r28.xxyz, r29.xxyz, r17.yyzw
        mul r20.w, r10.x, r20.z
        mul r21.yzw, r19.xxxx, r21.yyzw
        dp3 r19.x, r21.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
        mad r19.x, r10.x, r20.z, r19.x
        div r19.x, r20.w, r19.x
        mad r27.xyz, r21.yzwy, r19.xxxx, r27.xyzx
      endif 
    endloop 
    mov r26.xyzw, r27.xyzw
    mov r16.yzw, r17.yyzw
    iadd r14.z, r14.z, l(32)
  endloop 
  mov r25.xyzw, r26.zxyw
  mov r24.xyz, r16.yzwy
  mov r25.xyzw, r25.yzxw
else 
  mov r25.x, r24.w
endif 
max r6.w, r25.w, l(1.000000)
rcp r6.w, r6.w
mov_sat r25.w, r25.w
mul r10.xyz, r6.wwww, r24.xyzx
mul r16.yzw, r6.wwww, r25.xxyz
lt r9.w, r25.w, l(0.990000)
if_nz r9.w
  add r9.w, -r25.w, l(1.000000)
  mul r10.w, r9.w, cb2[19].x
  add r17.yzw, r11.xxyz, -cb2[35].xxyz
  mul r19.x, r17.y, cb2[35].w
  mul r19.yz, r17.zzwz, cb2[36].xxyx
  add_sat r17.yzw, r19.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
  mul r19.xy, r17.yzyy, cb2[36].zwzz
  mul r19.z, r17.w, cb2[37].x
  add r17.yzw, r19.xxyz, cb2[37].yyzw
  lt r19.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r12.xyzx
  movc r19.xyz, r19.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r19.w, l(0)
  add r20.xyz, r17.yzwy, r19.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r20.xyz, r20.xyzx, t17.xyzw, s4, l(0.000000)
  mul r21.xyz, r12.xyzx, r12.xyzx
  mul r21.xyz, r10.wwww, r21.xyzx
  add r22.xyz, r17.yzwy, r19.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t18.xyzw, s4, l(0.000000)
  mul r22.xyz, r21.yyyy, r22.xyzx
  mad r20.xyz, r20.xyzx, r21.xxxx, r22.xyzx
  add r17.yzw, r17.yyzw, r19.wwwz
  sample_l_indexable(texture3d)(float,float,float,float) r17.yzw, r17.yzwy, t19.wxyz, s4, l(0.000000)
  mad r17.yzw, r17.yyzw, r21.zzzz, r20.xxyz
  mov r12.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r12.xyzw, t8.xyzw, s2, l(6.000000)
  mul r17.yzw, r17.yyzw, r19.xxyz
  dp3 r10.w, r17.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r10.xyz, r24.xyzx, r6.wwww, r17.yzwy
  mov r18.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r17.yzw, r18.xyzw, t8.wxyz, s2, r8.w
  mad r6.w, cb2[19].x, r9.w, -r10.w
  mad r6.w, r2.y, r6.w, r10.w
  mad r16.yzw, r17.yyzw, r6.wwww, r16.yyzw
endif 
mad r6.w, r5.z, r2.z, r2.x
log r6.w, |r6.w|
mul r6.w, r0.w, r6.w
exp r6.w, r6.w
mad r2.z, r5.z, r2.z, r6.w
add_sat r2.z, r2.z, l(-1.000000)
mul r19.xyz, r2.wwww, r10.xyzx
and r20.xyz, r1.xxxx, r19.yzxy
mad r14.zw, r2.xxxy, l(0.000000, 0.000000, 0.984375, 0.984375), l(0.000000, 0.000000, 0.00781250, 0.00781250)
sample_l_indexable(texture2d)(float,float,float,float) r14.zw, r14.zwzz, t5.zwxy, s2, l(0.000000)
mul r16.yzw, r2.zzzz, r16.yyzw
mul r17.yzw, r14.zzzz, r16.yyzw
mul r21.xyz, r14.wwww, r16.yzwy
sqrt r2.y, r0.w
mad r2.y, r2.y, l(0.500000), l(0.500000)
mul r2.y, r2.y, r2.y
mul r2.z, r2.y, l(0.500000)
mad r2.y, -r2.y, l(0.500000), l(1.000000)
mad r5.z, r2.x, r2.y, r2.z
mul r2.yz, r2.yyzy, r5.zzzz
lt r5.z, l(0.000000), r4.w
if_nz r5.z
  lt r5.z, l(0.000000), r7.w
  if_nz r5.z
    mul r5.z, r0.z, cb2[18].w
    mul r5.z, r3.w, r5.z
    if_nz cb2[23].x
      add r22.xyz, r11.xyzx, cb1[24].xyzx
      mov r22.w, l(1.000000)
      dp4 r6.w, cb2[24].xyzw, r22.xyzw
      dp4 r8.w, cb2[25].xyzw, r22.xyzw
      frc r22.x, r6.w
      frc r22.y, r8.w
      iadd r6.w, l(-1), cb2[23].x
      utof r22.z, r6.w
      sample_l_indexable(texture2darray)(float,float,float,float) r16.yzw, r22.xyzx, t20.wxyz, s2, l(0.000000)
      add r16.yzw, r16.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
      mad r16.yzw, cb2[23].yyyy, r16.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      mul r16.yzw, r16.yyzw, cb2[18].xxyz
    else 
      mov r16.yzw, cb2[18].xxyz
    endif 
    ushr r6.w, cb2[53].x, l(16)
    ult r8.w, l(0), r6.w
    and r8.w, r1.y, r8.w
    and r8.w, r1.z, r8.w
    and r8.w, r3.x, r8.w
    if_nz r8.w
      iadd r6.w, r6.w, cb2[0].x
      imad r6.w, r6.w, l(15), l(-15)
      mad r8.w, |r3.z|, l(-0.200000), l(0.400000)
      lt r9.w, r3.z, l(0.000000)
      and r9.w, r1.x, r9.w
      movc r8.w, r9.w, -r8.w, r8.w
      mad r22.xyz, r12.xyzx, r8.wwww, r11.xyzx
      mov r23.xyz, cb9[r6.w + 4].yzwy
      mov r23.w, cb9[r6.w + 5].x
      mov r22.w, l(1.000000)
      dp4 r23.x, r23.xyzw, r22.xyzw
      mov r24.xyz, cb9[r6.w + 5].yzwy
      mov r24.w, cb9[r6.w + 6].x
      dp4 r23.y, r24.xyzw, r22.xyzw
      mad r14.zw, r23.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r23.x, r14.z, cb9[r6.w + 9].w
      add r23.y, r14.w, cb9[r6.w + 10].x
      mul r14.zw, r23.xxxy, cb9[r6.w + 9].yyyz
      div r23.xy, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].ywyy
      add r23.zw, -r23.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      ge r23.zw, r14.zzzw, r23.zzzw
      ge r23.xy, r23.xyxx, r14.zwzz
      or r23.xy, r23.xyxx, r23.zwzz
      or r8.w, r23.y, r23.x
      if_z r8.w
        mov r23.xyz, cb9[r6.w + 6].yzwy
        mov r23.w, cb9[r6.w + 7].x
        dp4 r8.w, r23.xyzw, r22.xyzw
        mov_sat r14.zw, r14.zzzw
        mad r22.x, r14.z, cb9[r6.w + 8].y, cb9[r6.w + 8].z
        mad r22.y, r14.w, cb9[r6.w + 8].w, cb9[r6.w + 9].x
        add r8.w, r8.w, cb9[r6.w + 10].y
        div r8.w, r8.w, cb9[r6.w + 10].z
        max r8.w, r8.w, l(0.00006104)
        and r9.w, l(0x0000ffff), cb9[r6.w + 1].w
        if_nz cb2[58].y
          mov r23.x, -r14.x
          utof r24.z, r9.w
          mov r23.y, r15.x
          mov r23.z, r14.x
          mov r10.w, l(0)
          mov r12.w, l(0)
          loop 
            ige r13.w, r12.w, l(8)
            breakc_nz r13.w
            dp2 r25.x, icb[r12.w + 4].yxyy, r23.xyxx
            dp2 r25.y, icb[r12.w + 4].yxyy, r23.yzyy
            mad r24.xy, r25.xyxx, cb9[r6.w + 3].yyyy, r22.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r24.xyzx, t9.xxxx, s13, r8.w
            mad r10.w, r13.w, l(0.125000), r10.w
            iadd r12.w, r12.w, l(1)
          endloop 
        else 
          utof r22.z, r9.w
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r22.xyzx, t9.xxxx, s13, r8.w
        endif 
        mul r6.w, r10.w, r10.w
        mul r6.w, r10.w, r6.w
      else 
        mov r6.w, l(1.000000)
      endif 
      mul r7.w, r6.w, r7.w
    else 
      and r6.w, cb2[53].x, l(0x0000ffff)
      ult r8.w, l(0), r6.w
      not r9.w, r3.y
      and r8.w, r8.w, r9.w
      if_nz r8.w
        iadd r6.w, r6.w, cb2[0].x
        imad r6.w, r6.w, l(15), l(-15)
        mad r8.w, |r3.z|, l(-0.200000), l(0.400000)
        lt r9.w, r3.z, l(0.000000)
        and r9.w, r1.x, r9.w
        movc r8.w, r9.w, -r8.w, r8.w
        mad r22.xyz, r12.xyzx, r8.wwww, r11.xyzx
        mov r23.xyz, cb9[r6.w + 4].yzwy
        mov r23.w, cb9[r6.w + 5].x
        mov r22.w, l(1.000000)
        dp4 r23.x, r23.xyzw, r22.xyzw
        mov r24.xyz, cb9[r6.w + 5].yzwy
        mov r24.w, cb9[r6.w + 6].x
        dp4 r23.y, r24.xyzw, r22.xyzw
        mad r14.zw, r23.xxxy, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
        add r23.x, r14.z, cb9[r6.w + 9].w
        add r23.y, r14.w, cb9[r6.w + 10].x
        mul r14.zw, r23.xxxy, cb9[r6.w + 9].yyyz
        div r23.xy, cb9[r6.w + 3].yyyy, cb9[r6.w + 8].ywyy
        add r23.zw, -r23.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
        ge r23.zw, r14.zzzw, r23.zzzw
        ge r23.xy, r23.xyxx, r14.zwzz
        or r23.xy, r23.xyxx, r23.zwzz
        or r8.w, r23.y, r23.x
        if_z r8.w
          mov r23.xyz, cb9[r6.w + 6].yzwy
          mov r23.w, cb9[r6.w + 7].x
          dp4 r8.w, r23.xyzw, r22.xyzw
          mov_sat r14.zw, r14.zzzw
          mad r22.x, r14.z, cb9[r6.w + 8].y, cb9[r6.w + 8].z
          mad r22.y, r14.w, cb9[r6.w + 8].w, cb9[r6.w + 9].x
          add r8.w, r8.w, cb9[r6.w + 10].y
          div r8.w, r8.w, cb9[r6.w + 10].z
          max r8.w, r8.w, l(0.00006104)
          and r9.w, l(0x0000ffff), cb9[r6.w + 1].w
          if_nz cb2[58].y
            mov r23.x, -r14.x
            utof r24.z, r9.w
            mov r23.y, r15.x
            mov r23.z, r14.x
            mov r10.w, l(0)
            mov r12.w, l(0)
            loop 
              ige r13.w, r12.w, l(8)
              breakc_nz r13.w
              dp2 r25.x, icb[r12.w + 4].yxyy, r23.xyxx
              dp2 r25.y, icb[r12.w + 4].yxyy, r23.yzyy
              mad r24.xy, r25.xyxx, cb9[r6.w + 3].yyyy, r22.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.w, r24.xyzx, t9.xxxx, s13, r8.w
              mad r10.w, r13.w, l(0.125000), r10.w
              iadd r12.w, r12.w, l(1)
            endloop 
          else 
            utof r22.z, r9.w
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r10.w, r22.xyzx, t9.xxxx, s13, r8.w
          endif 
          mul r6.w, r10.w, r10.w
          mul r6.w, r10.w, r6.w
        else 
          mov r6.w, l(1.000000)
        endif 
        mul r7.w, r6.w, r7.w
      endif 
    endif 
    mad r6.w, -r2.x, l(0.500000), l(1.000000)
    mad r6.w, -r4.w, r6.w, l(1.000000)
    mul r6.w, r6.w, r6.w
    mad r6.w, -r6.w, l(0.620000), l(0.620000)
    add r6.w, -r4.w, r6.w
    mad r4.w, r0.w, r6.w, r4.w
    mul r4.w, r7.w, r4.w
    mul r22.xyz, r16.yzwy, r4.wwww
    lt r3.z, l(0.000000), r3.z
    mad r10.xyz, r10.xyzx, r2.wwww, r22.xyzx
    mad r22.xyz, -r11.xyzx, r1.wwww, cb2[17].xyzx
    dp3 r1.w, r22.xyzx, r22.xyzx
    rsq r1.w, r1.w
    mul r22.xyz, r1.wwww, r22.xyzx
    dp3 r1.w, r22.xyzx, r13.xyzx
    dp3 r2.w, r12.xyzx, r22.xyzx
    mad r6.w, |r2.w|, r0.z, -|r2.w|
    mad r2.w, |r2.w|, r6.w, l(1.000000)
    mad r3.w, r3.w, r2.y, r2.z
    mul r2.w, r2.w, r2.w
    mul r2.w, r3.w, r2.w
    rcp r2.w, r2.w
    mul r2.w, r5.z, r2.w
    mul r2.w, r2.w, r7.w
    mul r2.w, r2.w, l(0.250000)
    mad r22.yzw, r2.wwww, r16.yyzw, r21.xxyz
    add_sat r1.w, -r1.w, l(1.000000)
    mul r3.w, r1.w, r1.w
    mul r3.w, r3.w, r3.w
    mul r1.w, r1.w, r3.w
    mul r1.w, r1.w, r2.w
    mad r23.xyz, r1.wwww, r16.yzwy, r17.yzwy
    mad r16.yzw, r4.wwww, r16.yyzw, r20.zzxy
    and r24.xyz, r1.xxxx, r16.zwyz
    mov r10.w, r20.z
    mov r19.w, r24.z
    movc r19.xyzw, r3.zzzz, r10.xyzw, r19.xyzw
    mov r20.zw, r23.xxxy
    mov r24.zw, r17.yyyz
    movc r10.xyzw, r3.zzzz, r20.xyzw, r24.xyzw
    mov r22.x, r23.z
    mov r21.w, r17.w
    movc r21.xyzw, r3.zzzz, r22.yzwx, r21.xyzw
    mov r20.z, r19.w
    mov r20.xy, r10.xyxx
    mov r17.yz, r10.zzwz
    mov r17.w, r21.w
  endif 
endif 
not r1.w, r3.y
mov r10.x, -r14.x
mad r2.x, -r2.x, l(0.500000), l(1.000000)
mov r11.w, l(1.000000)
mov r22.z, l(1.000000)
mov r23.w, l(1.000000)
mov r24.w, l(1.000000)
mov r25.w, l(1.000000)
mov r10.z, r14.x
mov r26.w, l(1.000000)
mov r10.yw, r15.xxxx
mov r14.y, r10.w
mov r15.y, r10.x
mov r15.z, r14.x
mov r27.x, r15.x
mov r27.y, r10.x
mov r27.z, r14.x
mov r28.w, l(1.000000)
mov r29.x, r15.x
mov r29.y, r10.x
mov r29.z, r14.x
mov r30.x, r15.x
mov r30.y, r10.x
mov r30.z, r14.x
mov r3.yzw, r19.xxyz
mov r31.xyz, r20.zxyz
mov r32.xyz, r17.yzwy
mov r16.yzw, r21.xxyz
mov r2.w, cb2[58].y
mov r4.w, l(0)
loop 
  uge r5.z, r4.w, cb2[0].x
  breakc_nz r5.z
  ushr r5.z, r4.w, l(5)
  ld_structured r5.z, r5.z, l(0), g6.xxxx
  mov r33.xyz, r3.yzwy
  mov r34.xyz, r31.xyzx
  mov r35.xyz, r32.xyzx
  mov r36.xyz, r16.yzwy
  mov r6.w, r2.w
  mov r7.w, r5.z
  loop 
    breakc_z r7.w
    firstbit_lo r8.w, r7.w
    ishl r9.w, l(1), r8.w
    not r9.w, r9.w
    and r7.w, r7.w, r9.w
    iadd r8.w, r4.w, r8.w
    imul null, r8.w, r8.w, l(15)
    ubfe r9.w, l(3), l(24), cb9[r8.w + 1].w
    ieq r12.w, r9.w, l(2)
    if_nz r12.w
      ubfe r12.w, l(3), l(27), cb9[r8.w + 1].w
      add r37.xy, -r11.xyxx, cb9[r8.w + 3].zwzz
      add r37.z, -r11.z, cb9[r8.w + 4].x
      dp3 r13.w, r37.xyzx, r37.xyzx
      rsq r13.w, r13.w
      mul r38.xyz, r13.wwww, r37.xyzx
      mul r14.z, r0.z, cb9[r8.w + 1].z
      mul r14.z, r14.z, l(0.250000)
      dp3 r14.w, r12.xyzx, r38.xyzx
      mov_sat r15.w, r14.w
      movc r18.w, r1.x, |r14.w|, r15.w
      lt r19.w, l(0.000000), r18.w
      if_nz r19.w
        mov r38.xyz, cb9[r8.w + 7].yzwy
        mov r38.w, cb9[r8.w + 8].x
        dp4 r19.w, r38.xyzw, r11.xyzw
        lt r20.w, r19.w, l(1.000000)
        if_nz r20.w
          mov r39.xyz, l(1.000000,1.000000,1.000000,0)
          mov r20.w, l(0)
        else 
          add r40.xyz, -r11.xyzx, cb9[r8.w + 0].xyzx
          mul r21.w, cb9[r8.w + 3].x, cb9[r8.w + 3].x
          dp3 r22.w, r40.xyzx, r40.xyzx
          div r21.w, r21.w, r22.w
          min r21.w, r21.w, l(1.000000)
          mad_sat r40.xy, r19.wwww, cb9[r8.w + 2].xzxx, cb9[r8.w + 2].ywyy
          mul r40.zw, r40.xxxy, r40.xxxy
          mad r40.xy, r40.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r40.xy, r40.xyxx, r40.zwzz
          mul r21.w, r21.w, r40.x
          mul r21.w, r40.y, r21.w
          mov r40.xyz, cb9[r8.w + 4].yzwy
          mov r40.w, cb9[r8.w + 5].x
          dp4 r40.x, r40.xyzw, r11.xyzw
          mov r41.xyz, cb9[r8.w + 5].yzwy
          mov r41.w, cb9[r8.w + 6].x
          dp4 r40.y, r41.xyzw, r11.xyzw
          div r22.xy, r40.xyxx, r19.wwww
          lt r19.w, cb9[r8.w + 10].w, l(0.00048828)
          if_nz r19.w
            mad_sat r40.xy, |r22.xyxx|, cb9[r8.w + 12].xyxx, cb9[r8.w + 12].zwzz
            mul r40.zw, r40.xxxy, r40.xxxy
            mad r40.xy, r40.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r40.xy, r40.xyxx, r40.zwzz
            mul r19.w, r40.y, r40.x
          else 
            mul_sat r40.xyzw, |r22.yyxx|, cb9[r8.w + 11].xyzw
            log r40.xyzw, r40.xyzw
            mul r40.xyzw, r40.xyzw, cb9[r8.w + 12].zzzz
            exp r40.xyzw, r40.xyzw
            add r40.xy, r40.zwzz, r40.xyxx
            log r40.xy, r40.xyxx
            mul r40.xy, r40.xyxx, cb9[r8.w + 12].wwww
            exp r40.xy, r40.xyxx
            mul r22.w, r40.x, cb9[r8.w + 12].x
            mad r27.w, cb9[r8.w + 12].y, r40.y, l(-1.000000)
            mad r22.w, cb9[r8.w + 12].y, r40.y, -r22.w
            div_sat r22.w, r27.w, r22.w
            mul r27.w, r22.w, r22.w
            mad r22.w, r22.w, l(-2.000000), l(3.000000)
            mul r19.w, r22.w, r27.w
          endif 
          mul r20.w, r19.w, r21.w
          and r19.w, l(255), cb9[r8.w + 14].w
          if_nz r19.w
            dp3 r21.w, cb9[r8.w + 13].xyzx, r22.xyzx
            mov r40.x, cb9[r8.w + 13].w
            mov r40.yz, cb9[r8.w + 14].xxyx
            dp3 r22.x, r40.xyzx, r22.xyzx
            frc r40.x, r21.w
            frc r40.y, r22.x
            iadd r19.w, r19.w, l(-1)
            utof r40.z, r19.w
            sample_l_indexable(texture2darray)(float,float,float,float) r39.xyz, r40.xyzx, t20.xyzw, s2, l(0.000000)
          else 
            mov r39.xyz, l(1.000000,1.000000,1.000000,0)
          endif 
        endif 
        mov r40.x, cb9[r8.w + 0].w
        mov r40.yz, cb9[r8.w + 1].xxyx
        mul r22.xyw, r39.xyxz, r40.xyxz
        lt r19.w, l(0.000000), r20.w
        if_nz r19.w
          ine r12.w, r12.w, l(1)
          if_nz r12.w
            mad r12.w, |r14.w|, l(-0.200000), l(0.400000)
            lt r19.w, r14.w, l(0.000000)
            and r19.w, r1.x, r19.w
            movc r12.w, r19.w, -r12.w, r12.w
            mad r23.xyz, r12.xyzx, r12.wwww, r11.xyzx
            mov r39.xyz, cb9[r8.w + 6].yzwy
            mov r39.w, cb9[r8.w + 7].x
            dp4 r12.w, r39.xyzw, r23.xyzw
            dp4 r19.w, r38.xyzw, r23.xyzw
            ge r21.w, r19.w, r12.w
            if_nz r21.w
              mov r38.xyz, cb9[r8.w + 4].yzwy
              mov r38.w, cb9[r8.w + 5].x
              dp4 r38.x, r38.xyzw, r23.xyzw
              mov r39.xyz, cb9[r8.w + 5].yzwy
              mov r39.w, cb9[r8.w + 6].x
              dp4 r38.y, r39.xyzw, r23.xyzw
              div r23.xy, r38.xyxx, r19.wwww
              mad_sat r23.xy, r23.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              mad r38.x, r23.x, cb9[r8.w + 8].y, cb9[r8.w + 8].z
              mad r38.y, r23.y, cb9[r8.w + 8].w, cb9[r8.w + 9].x
              div r12.w, r12.w, r19.w
              max r12.w, r12.w, l(0.00006104)
              and r19.w, l(0x0000ffff), cb9[r8.w + 1].w
              if_nz r6.w
                utof r23.z, r19.w
                mov r21.w, l(0)
                mov r27.w, l(0)
                loop 
                  ige r29.w, r27.w, l(8)
                  breakc_nz r29.w
                  dp2 r39.x, icb[r27.w + 4].yxyy, r10.xyxx
                  dp2 r39.y, icb[r27.w + 4].yxyy, r10.yzyy
                  mad r23.xy, r39.xyxx, cb9[r8.w + 3].yyyy, r38.xyxx
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r23.xyzx, t9.xxxx, s13, r12.w
                  mad r21.w, r23.x, l(0.125000), r21.w
                  iadd r27.w, r27.w, l(1)
                endloop 
              else 
                utof r38.z, r19.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.w, r38.xyzx, t9.xxxx, s13, r12.w
              endif 
              mul r12.w, r21.w, r21.w
              mul r12.w, r21.w, r12.w
            else 
              mov r12.w, l(1.000000)
            endif 
          else 
            mov r12.w, l(1.000000)
          endif 
          mul r12.w, r12.w, r20.w
          lt r19.w, l(0.000000), r12.w
          if_nz r19.w
            ubfe r19.w, l(4), l(16), cb9[r8.w + 1].w
            ult r20.w, l(0), r19.w
            and r20.w, r1.y, r20.w
            and r20.w, r1.z, r20.w
            and r20.w, r3.x, r20.w
            if_nz r20.w
              iadd r19.w, r19.w, cb2[0].x
              imad r19.w, r19.w, l(15), l(-15)
              mad r20.w, |r14.w|, l(-0.200000), l(0.400000)
              lt r23.x, r14.w, l(0.000000)
              and r23.x, r1.x, r23.x
              movc r20.w, r23.x, -r20.w, r20.w
              mad r24.xyz, r12.xyzx, r20.wwww, r11.xyzx
              mov r38.xyz, cb9[r19.w + 6].yzwy
              mov r38.w, cb9[r19.w + 7].x
              dp4 r20.w, r38.xyzw, r24.xyzw
              mov r38.xyz, cb9[r19.w + 7].yzwy
              mov r38.w, cb9[r19.w + 8].x
              dp4 r23.x, r38.xyzw, r24.xyzw
              lt r23.y, r23.x, r20.w
              if_z r23.y
                mov r38.xyz, cb9[r19.w + 4].yzwy
                mov r38.w, cb9[r19.w + 5].x
                dp4 r38.x, r38.xyzw, r24.xyzw
                mov r39.xyz, cb9[r19.w + 5].yzwy
                mov r39.w, cb9[r19.w + 6].x
                dp4 r38.y, r39.xyzw, r24.xyzw
                div r24.xy, r38.xyxx, r23.xxxx
                mad r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r38.x, r24.x, cb9[r19.w + 9].w
                add r38.y, r24.y, cb9[r19.w + 10].x
                mul r24.xy, r38.xyxx, cb9[r19.w + 9].yzyy
                div r38.xy, cb9[r19.w + 3].yyyy, cb9[r19.w + 8].ywyy
                add r38.zw, -r38.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                ge r38.zw, r24.xxxy, r38.zzzw
                ge r38.xy, r38.xyxx, r24.xyxx
                or r38.xy, r38.xyxx, r38.zwzz
                or r23.z, r38.y, r38.x
                if_z r23.z
                  mov_sat r24.xy, r24.xyxx
                  mad r38.x, r24.x, cb9[r19.w + 8].y, cb9[r19.w + 8].z
                  mad r38.y, r24.y, cb9[r19.w + 8].w, cb9[r19.w + 9].x
                  mul r24.x, r23.x, cb9[r19.w + 10].z
                  mad r20.w, cb9[r19.w + 10].y, r23.x, r20.w
                  div r20.w, r20.w, r24.x
                endif 
              else 
                mov r23.z, l(-1)
              endif 
              or r23.x, r23.y, r23.z
              if_z r23.x
                max r20.w, r20.w, l(0.00006104)
                and r23.x, l(0x0000ffff), cb9[r19.w + 1].w
                if_nz r6.w
                  utof r24.z, r23.x
                  mov r23.yz, l(0,0,0,0)
                  loop 
                    ige r27.w, r23.z, l(8)
                    breakc_nz r27.w
                    dp2 r39.x, icb[r23.z + 4].yxyy, r10.xwxx
                    dp2 r39.y, icb[r23.z + 4].xyxx, r14.xyxx
                    mad r24.xy, r39.xyxx, cb9[r19.w + 3].yyyy, r38.xyxx
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r20.w
                    mad r23.y, r24.x, l(0.125000), r23.y
                    iadd r23.z, r23.z, l(1)
                  endloop 
                else 
                  utof r38.z, r23.x
                  sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.y, r38.xyzx, t9.xxxx, s13, r20.w
                endif 
                mul r19.w, r23.y, r23.y
                mul r19.w, r23.y, r19.w
              else 
                mov r19.w, l(1.000000)
              endif 
              mul r12.w, r12.w, r19.w
            else 
              ubfe r19.w, l(4), l(20), cb9[r8.w + 1].w
              ult r20.w, l(0), r19.w
              and r20.w, r1.w, r20.w
              if_nz r20.w
                iadd r19.w, r19.w, cb2[0].x
                imad r19.w, r19.w, l(15), l(-15)
                mad r20.w, |r14.w|, l(-0.200000), l(0.400000)
                lt r23.x, r14.w, l(0.000000)
                and r23.x, r1.x, r23.x
                movc r20.w, r23.x, -r20.w, r20.w
                mad r25.xyz, r12.xyzx, r20.wwww, r11.xyzx
                mov r38.xyz, cb9[r19.w + 6].yzwy
                mov r38.w, cb9[r19.w + 7].x
                dp4 r20.w, r38.xyzw, r25.xyzw
                mov r38.xyz, cb9[r19.w + 7].yzwy
                mov r38.w, cb9[r19.w + 8].x
                dp4 r23.x, r38.xyzw, r25.xyzw
                lt r23.z, r23.x, r20.w
                if_z r23.z
                  mov r38.xyz, cb9[r19.w + 4].yzwy
                  mov r38.w, cb9[r19.w + 5].x
                  dp4 r24.x, r38.xyzw, r25.xyzw
                  mov r38.xyz, cb9[r19.w + 5].yzwy
                  mov r38.w, cb9[r19.w + 6].x
                  dp4 r24.y, r38.xyzw, r25.xyzw
                  div r24.xy, r24.xyxx, r23.xxxx
                  mad r24.xy, r24.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r25.x, r24.x, cb9[r19.w + 9].w
                  add r25.y, r24.y, cb9[r19.w + 10].x
                  mul r24.xy, r25.xyxx, cb9[r19.w + 9].yzyy
                  div r25.xy, cb9[r19.w + 3].yyyy, cb9[r19.w + 8].ywyy
                  add r38.xy, -r25.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r38.xy, r24.xyxx, r38.xyxx
                  ge r25.xy, r25.xyxx, r24.xyxx
                  or r25.xy, r25.xyxx, r38.xyxx
                  or r24.z, r25.y, r25.x
                  if_z r24.z
                    mov_sat r24.xy, r24.xyxx
                    mad r25.x, r24.x, cb9[r19.w + 8].y, cb9[r19.w + 8].z
                    mad r25.y, r24.y, cb9[r19.w + 8].w, cb9[r19.w + 9].x
                    mul r24.x, r23.x, cb9[r19.w + 10].z
                    mad r20.w, cb9[r19.w + 10].y, r23.x, r20.w
                    div r20.w, r20.w, r24.x
                  endif 
                else 
                  mov r24.z, l(-1)
                endif 
                or r23.x, r23.z, r24.z
                if_z r23.x
                  max r20.w, r20.w, l(0.00006104)
                  and r23.x, l(0x0000ffff), cb9[r19.w + 1].w
                  if_nz r6.w
                    utof r24.z, r23.x
                    mov r23.z, l(0)
                    mov r27.w, l(0)
                    loop 
                      ige r29.w, r27.w, l(8)
                      breakc_nz r29.w
                      dp2 r38.x, icb[r27.w + 4].xyxx, r27.xyxx
                      dp2 r38.y, icb[r27.w + 4].yxyy, r27.xzxx
                      mad r24.xy, r38.xyxx, cb9[r19.w + 3].yyyy, r25.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.x, r24.xyzx, t9.xxxx, s13, r20.w
                      mad r23.z, r24.x, l(0.125000), r23.z
                      iadd r27.w, r27.w, l(1)
                    endloop 
                  else 
                    utof r25.z, r23.x
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.z, r25.xyzx, t9.xxxx, s13, r20.w
                  endif 
                  mul r19.w, r23.z, r23.z
                  mul r19.w, r23.z, r19.w
                else 
                  mov r19.w, l(1.000000)
                endif 
                mul r12.w, r12.w, r19.w
              endif 
            endif 
            mad r19.w, -r18.w, r2.x, l(1.000000)
            mul r19.w, r19.w, r19.w
            mad r19.w, -r19.w, l(0.620000), l(0.620000)
            add r19.w, -r18.w, r19.w
            mad r18.w, r0.w, r19.w, r18.w
            mul r18.w, r12.w, r18.w
            lt r14.w, l(0.000000), r14.w
            mad r24.xyz, r18.wwww, r22.xywx, r33.xyzx
            mad r25.xyz, r37.xyzx, r13.wwww, r13.xyzx
            dp3 r13.w, r25.xyzx, r25.xyzx
            rsq r13.w, r13.w
            mul r25.xyz, r13.wwww, r25.xyzx
            dp3 r13.w, r25.xyzx, r13.xyzx
            dp3 r19.w, r12.xyzx, r25.xyzx
            mad r20.w, |r19.w|, r0.z, -|r19.w|
            mad r19.w, |r19.w|, r20.w, l(1.000000)
            mad r20.w, r15.w, r2.y, r2.z
            mul r19.w, r19.w, r19.w
            mul r19.w, r20.w, r19.w
            rcp r19.w, r19.w
            mul r14.z, r14.z, r15.w
            mul r14.z, r14.z, r19.w
            mul r12.w, r12.w, r14.z
            mad r25.xyz, r12.wwww, r22.xywx, r36.xyzx
            add_sat r13.w, -r13.w, l(1.000000)
            mul r14.z, r13.w, r13.w
            mul r14.z, r14.z, r14.z
            mul r13.w, r13.w, r14.z
            mul r12.w, r12.w, r13.w
            mad r37.xyz, r12.wwww, r22.xywx, r35.xyzx
            mad r22.xyw, r18.wwww, r22.xyxw, r34.xyxz
            movc r22.xyw, r1.xxxx, r22.xyxw, r34.xyxz
            movc r33.xyz, r14.wwww, r24.xyzx, r33.xyzx
            movc r34.xyz, r14.wwww, r34.xyzx, r22.xywx
            movc r35.xyz, r14.wwww, r37.xyzx, r35.xyzx
            movc r36.xyz, r14.wwww, r25.xyzx, r36.xyzx
          endif 
        endif 
      endif 
    else 
      ieq r9.w, r9.w, l(4)
      if_nz r9.w
        ubfe r9.w, l(3), l(27), cb9[r8.w + 1].w
        mul r12.w, r0.z, cb9[r8.w + 1].z
        mul r12.w, r12.w, l(0.250000)
        lt r13.w, l(0.000000), cb9[r8.w + 6].y
        mov r24.xy, cb9[r8.w + 5].zwzz
        mov r24.z, cb9[r8.w + 6].x
        mad r22.xyw, -r24.xyxz, l(0.500000, 0.500000, 0.000000, 0.500000), cb9[r8.w + 0].xyxz
        add r25.xyz, -r11.xyzx, r22.xywx
        dp3 r14.z, r24.xyzx, r18.xyzx
        dp3 r14.w, r24.xyzx, r25.xyzx
        dp3 r15.w, r18.xyzx, r25.xyzx
        mad r18.w, -r14.z, r14.z, cb9[r8.w + 6].y
        mad r14.z, r14.z, r15.w, -r14.w
        div_sat r14.w, -r14.w, cb9[r8.w + 6].y
        div_sat r14.z, r14.z, r18.w
        div r15.w, r18.w, cb9[r8.w + 6].y
        mul r15.w, r15.w, l(10.000000)
        min r15.w, r15.w, l(1.000000)
        add r14.z, -r14.w, r14.z
        mad r14.z, r15.w, r14.z, r14.w
        mad r25.xyz, r14.zzzz, r24.xyzx, r22.xywx
        mad r22.xyw, r14.wwww, r24.xyxz, r22.xyxw
        movc r22.xyw, r13.wwww, r22.xyxw, cb9[r8.w + 0].xyxz
        movc r24.xyz, r13.wwww, r25.xyzx, cb9[r8.w + 0].xyzx
        add r24.xyz, -r11.xyzx, r24.xyzx
        add r22.xyw, -r11.xyxz, r22.xyxw
        dp3 r13.w, r24.xyzx, r24.xyzx
        rsq r13.w, r13.w
        mul r25.xyz, r13.wwww, r24.xyzx
        dp3 r14.z, r22.xywx, r22.xywx
        rsq r14.w, r14.z
        mul r22.xyw, r14.wwww, r22.xyxw
        dp3 r14.w, r12.xyzx, r22.xywx
        mov_sat r15.w, r14.w
        movc r15.w, r1.x, |r14.w|, r15.w
        lt r18.w, l(0.000000), r15.w
        if_nz r18.w
          sqrt r18.w, r14.z
          mul r19.w, cb9[r8.w + 3].x, cb9[r8.w + 3].x
          div r14.z, r19.w, r14.z
          min r14.z, r14.z, l(1.000000)
          mad_sat r22.xy, r18.wwww, cb9[r8.w + 2].xzxx, cb9[r8.w + 2].ywyy
          mul r37.xy, r22.xyxx, r22.xyxx
          mad r22.xy, r22.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
          mul r22.xy, r22.xyxx, r37.xyxx
          mul r14.z, r14.z, r22.x
          mul r14.z, r22.y, r14.z
          lt r18.w, l(0.000000), r14.z
          if_nz r18.w
            ine r9.w, r9.w, l(1)
            if_nz r9.w
              mad r9.w, |r14.w|, l(-0.200000), l(0.400000)
              lt r18.w, r14.w, l(0.000000)
              and r18.w, r1.x, r18.w
              movc r9.w, r18.w, -r9.w, r9.w
              mad r22.xyw, r12.xyxz, r9.wwww, r11.xyxz
              add r22.xyw, r22.xyxw, -cb9[r8.w + 4].yzyw
              max r9.w, |r22.w|, |r22.y|
              max r9.w, r9.w, |r22.x|
              div r9.w, cb9[r8.w + 5].x, r9.w
              add r9.w, r9.w, cb9[r8.w + 5].y
              dp3 r18.w, r22.xywx, r22.xywx
              rsq r18.w, r18.w
              max r9.w, r9.w, l(0.00006104)
              and r19.w, l(0x0000ffff), cb9[r8.w + 1].w
              utof r37.w, r19.w
              mov r19.w, l(0)
              mov r20.w, l(0)
              loop 
                ige r23.x, r20.w, l(8)
                breakc_nz r23.x
                dp2 r38.y, icb[r20.w + 4].xyxx, r15.xyxx
                dp2 r38.z, icb[r20.w + 4].yxyy, r15.xzxx
                mul r38.yz, r38.yyzy, cb9[r8.w + 3].yyyy
                mul r38.x, r17.x, r38.y
                mul r38.w, r16.x, r38.y
                mad r37.xyz, r22.xywx, r18.wwww, r38.xzwx
                sample_c_lz_indexable(texturecubearray)(float,float,float,float) r23.x, r37.xyzw, t10.xxxx, s13, r9.w
                mad r19.w, r23.x, l(0.125000), r19.w
                iadd r20.w, r20.w, l(1)
              endloop 
            else 
              mov r19.w, l(1.000000)
            endif 
            mul r9.w, r14.z, r19.w
            lt r14.z, l(0.000000), r9.w
            if_nz r14.z
              ubfe r14.z, l(4), l(16), cb9[r8.w + 1].w
              ult r18.w, l(0), r14.z
              and r18.w, r1.y, r18.w
              and r18.w, r1.z, r18.w
              and r18.w, r3.x, r18.w
              if_nz r18.w
                iadd r14.z, r14.z, cb2[0].x
                imad r14.z, r14.z, l(15), l(-15)
                mad r18.w, |r14.w|, l(-0.200000), l(0.400000)
                lt r20.w, r14.w, l(0.000000)
                and r20.w, r1.x, r20.w
                movc r18.w, r20.w, -r18.w, r18.w
                mad r26.xyz, r12.xyzx, r18.wwww, r11.xyzx
                mov r37.xyz, cb9[r14.z + 6].yzwy
                mov r37.w, cb9[r14.z + 7].x
                dp4 r18.w, r37.xyzw, r26.xyzw
                mov r37.xyz, cb9[r14.z + 7].yzwy
                mov r37.w, cb9[r14.z + 8].x
                dp4 r20.w, r37.xyzw, r26.xyzw
                lt r22.x, r20.w, r18.w
                if_z r22.x
                  mov r37.xyz, cb9[r14.z + 4].yzwy
                  mov r37.w, cb9[r14.z + 5].x
                  dp4 r37.x, r37.xyzw, r26.xyzw
                  mov r38.xyz, cb9[r14.z + 5].yzwy
                  mov r38.w, cb9[r14.z + 6].x
                  dp4 r37.y, r38.xyzw, r26.xyzw
                  div r22.yw, r37.xxxy, r20.wwww
                  mad r22.yw, r22.yyyw, l(0.000000, 0.500000, 0.000000, -0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
                  add r26.x, r22.y, cb9[r14.z + 9].w
                  add r26.y, r22.w, cb9[r14.z + 10].x
                  mul r22.yw, r26.xxxy, cb9[r14.z + 9].yyyz
                  div r26.xy, cb9[r14.z + 3].yyyy, cb9[r14.z + 8].ywyy
                  add r37.xy, -r26.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r37.xy, r22.ywyy, r37.xyxx
                  ge r26.xy, r26.xyxx, r22.ywyy
                  or r26.xy, r26.xyxx, r37.xyxx
                  or r23.x, r26.y, r26.x
                  if_z r23.x
                    mov_sat r22.yw, r22.yyyw
                    mad r26.x, r22.y, cb9[r14.z + 8].y, cb9[r14.z + 8].z
                    mad r26.y, r22.w, cb9[r14.z + 8].w, cb9[r14.z + 9].x
                    mul r22.y, r20.w, cb9[r14.z + 10].z
                    mad r18.w, cb9[r14.z + 10].y, r20.w, r18.w
                    div r18.w, r18.w, r22.y
                  endif 
                else 
                  mov r23.x, l(-1)
                endif 
                or r20.w, r22.x, r23.x
                if_z r20.w
                  max r18.w, r18.w, l(0.00006104)
                  and r20.w, l(0x0000ffff), cb9[r14.z + 1].w
                  if_nz r6.w
                    utof r37.z, r20.w
                    mov r22.xy, l(0,0,0,0)
                    loop 
                      ige r22.w, r22.y, l(8)
                      breakc_nz r22.w
                      dp2 r38.x, icb[r22.y + 4].xyxx, r29.xyxx
                      dp2 r38.y, icb[r22.y + 4].yxyy, r29.xzxx
                      mad r37.xy, r38.xyxx, cb9[r14.z + 3].yyyy, r26.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.w, r37.xyzx, t9.xxxx, s13, r18.w
                      mad r22.x, r22.w, l(0.125000), r22.x
                      iadd r22.y, r22.y, l(1)
                    endloop 
                  else 
                    utof r26.z, r20.w
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r26.xyzx, t9.xxxx, s13, r18.w
                  endif 
                  mul r14.z, r22.x, r22.x
                  mul r14.z, r22.x, r14.z
                else 
                  mov r14.z, l(1.000000)
                endif 
                mul r9.w, r9.w, r14.z
              else 
                ubfe r14.z, l(4), l(20), cb9[r8.w + 1].w
                ult r18.w, l(0), r14.z
                and r18.w, r1.w, r18.w
                if_nz r18.w
                  iadd r14.z, r14.z, cb2[0].x
                  imad r14.z, r14.z, l(15), l(-15)
                  mad r18.w, |r14.w|, l(-0.200000), l(0.400000)
                  lt r20.w, r14.w, l(0.000000)
                  and r20.w, r1.x, r20.w
                  movc r18.w, r20.w, -r18.w, r18.w
                  mad r28.xyz, r12.xyzx, r18.wwww, r11.xyzx
                  mov r37.xyz, cb9[r14.z + 6].yzwy
                  mov r37.w, cb9[r14.z + 7].x
                  dp4 r18.w, r37.xyzw, r28.xyzw
                  mov r37.xyz, cb9[r14.z + 7].yzwy
                  mov r37.w, cb9[r14.z + 8].x
                  dp4 r20.w, r37.xyzw, r28.xyzw
                  lt r22.y, r20.w, r18.w
                  if_z r22.y
                    mov r37.xyz, cb9[r14.z + 4].yzwy
                    mov r37.w, cb9[r14.z + 5].x
                    dp4 r26.x, r37.xyzw, r28.xyzw
                    mov r37.xyz, cb9[r14.z + 5].yzwy
                    mov r37.w, cb9[r14.z + 6].x
                    dp4 r26.y, r37.xyzw, r28.xyzw
                    div r26.xy, r26.xyxx, r20.wwww
                    mad r26.xy, r26.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                    add r28.x, r26.x, cb9[r14.z + 9].w
                    add r28.y, r26.y, cb9[r14.z + 10].x
                    mul r26.xy, r28.xyxx, cb9[r14.z + 9].yzyy
                    div r28.xy, cb9[r14.z + 3].yyyy, cb9[r14.z + 8].ywyy
                    add r37.xy, -r28.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r37.xy, r26.xyxx, r37.xyxx
                    ge r28.xy, r28.xyxx, r26.xyxx
                    or r28.xy, r28.xyxx, r37.xyxx
                    or r22.w, r28.y, r28.x
                    if_z r22.w
                      mov_sat r26.xy, r26.xyxx
                      mad r28.x, r26.x, cb9[r14.z + 8].y, cb9[r14.z + 8].z
                      mad r28.y, r26.y, cb9[r14.z + 8].w, cb9[r14.z + 9].x
                      mul r23.x, r20.w, cb9[r14.z + 10].z
                      mad r18.w, cb9[r14.z + 10].y, r20.w, r18.w
                      div r18.w, r18.w, r23.x
                    endif 
                  else 
                    mov r22.w, l(-1)
                  endif 
                  or r20.w, r22.y, r22.w
                  if_z r20.w
                    max r18.w, r18.w, l(0.00006104)
                    and r20.w, l(0x0000ffff), cb9[r14.z + 1].w
                    if_nz r6.w
                      utof r26.z, r20.w
                      mov r22.yw, l(0,0,0,0)
                      loop 
                        ige r23.x, r22.w, l(8)
                        breakc_nz r23.x
                        dp2 r37.x, icb[r22.w + 4].xyxx, r30.xyxx
                        dp2 r37.y, icb[r22.w + 4].yxyy, r30.xzxx
                        mad r26.xy, r37.xyxx, cb9[r14.z + 3].yyyy, r28.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r23.x, r26.xyzx, t9.xxxx, s13, r18.w
                        mad r22.y, r23.x, l(0.125000), r22.y
                        iadd r22.w, r22.w, l(1)
                      endloop 
                    else 
                      utof r28.z, r20.w
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.y, r28.xyzx, t9.xxxx, s13, r18.w
                    endif 
                    mul r14.z, r22.y, r22.y
                    mul r14.z, r22.y, r14.z
                  else 
                    mov r14.z, l(1.000000)
                  endif 
                  mul r9.w, r9.w, r14.z
                endif 
              endif 
              mad r14.z, -r15.w, r2.x, l(1.000000)
              mul r14.z, r14.z, r14.z
              mad r14.z, -r14.z, l(0.620000), l(0.620000)
              add r14.z, -r15.w, r14.z
              mad r14.z, r0.w, r14.z, r15.w
              mul r14.z, r9.w, r14.z
              mov r26.x, cb9[r8.w + 0].w
              mov r26.yz, cb9[r8.w + 1].xxyx
              lt r8.w, l(0.000000), r14.w
              mad r28.xyz, r14.zzzz, r26.xyzx, r33.xyzx
              dp3_sat r14.w, r12.xyzx, r25.xyzx
              mad r24.xyz, r24.xyzx, r13.wwww, r13.xyzx
              dp3 r13.w, r24.xyzx, r24.xyzx
              rsq r13.w, r13.w
              mul r24.xyz, r13.wwww, r24.xyzx
              dp3 r13.w, r24.xyzx, r13.xyzx
              dp3 r15.w, r12.xyzx, r24.xyzx
              mad r18.w, |r15.w|, r0.z, -|r15.w|
              mad r15.w, |r15.w|, r18.w, l(1.000000)
              mad r18.w, r14.w, r2.y, r2.z
              mul r15.w, r15.w, r15.w
              mul r15.w, r18.w, r15.w
              rcp r15.w, r15.w
              mul r12.w, r12.w, r14.w
              mul r12.w, r12.w, r15.w
              mul r9.w, r9.w, r12.w
              mad r24.xyz, r9.wwww, r26.xyzx, r36.xyzx
              add_sat r12.w, -r13.w, l(1.000000)
              mul r13.w, r12.w, r12.w
              mul r13.w, r13.w, r13.w
              mul r12.w, r12.w, r13.w
              mul r9.w, r9.w, r12.w
              mad r25.xyz, r9.wwww, r26.xyzx, r35.xyzx
              mad r26.xyz, r14.zzzz, r26.xyzx, r34.xyzx
              movc r26.xyz, r1.xxxx, r26.xyzx, r34.xyzx
              movc r33.xyz, r8.wwww, r28.xyzx, r33.xyzx
              movc r34.xyz, r8.wwww, r34.xyzx, r26.xyzx
              movc r35.xyz, r8.wwww, r25.xyzx, r35.xyzx
              movc r36.xyz, r8.wwww, r24.xyzx, r36.xyzx
            endif 
          endif 
        endif 
      endif 
    endif 
  endloop 
  mov r3.yzw, r33.xxyz
  mov r31.xyz, r34.xyzx
  mov r32.xyz, r35.xyzx
  mov r16.yzw, r36.xxyz
  iadd r4.w, r4.w, l(32)
endloop 
mad r2.xyz, r5.xwyx, l(1.000000, 3.000000, 2.000000, 0.000000), l(0.000000, 0.500000, -1.000000, 0.000000)
ftou r0.z, r2.y
mad r1.yzw, r6.zzxy, l(0.000000, 3.000000, 1.000000, 2.000000), l(0.000000, 0.500000, 0.000000, -1.000000)
ftou r0.w, r1.y
ieq r0.w, r0.z, r0.w
movc r1.yz, r0.wwww, r1.zzwz, l(0,-1.000000,0,0)
mad r5.xyz, r7.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r5.x
ieq r0.w, r0.z, r0.w
movc r5.xy, r0.wwww, r5.yzyy, l(-1.000000,0,0,0)
mad r6.xyz, r8.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r6.x
ieq r0.w, r0.z, r0.w
movc r5.zw, r0.wwww, r6.yyyz, l(0,0,-1.000000,0)
mad r6.xyz, r9.zxyz, l(3.000000, 1.000000, 2.000000, 0.000000), l(0.500000, 0.000000, -1.000000, 0.000000)
ftou r0.w, r6.x
ieq r0.z, r0.z, r0.w
movc r0.zw, r0.zzzz, r6.yyyz, l(0,0,-1.000000,0)
mov r6.x, r1.y
mov r6.yz, r5.xxzx
mov r6.w, r0.z
add r6.xyzw, -r2.xxxx, r6.xyzw
ge r6.xyzw, |r6.xyzw|, l(0.00902149, 0.00902149, 0.00902149, 0.00902149)
movc r6.xyzw, r6.xyzw, l(0,0,0,0), l(1.000000,1.000000,1.000000,1.000000)
add r0.z, r6.y, r6.x
add r0.z, r6.z, r0.z
add r0.z, r6.w, r0.z
mul r1.y, r5.y, r6.y
mad r1.y, r6.x, r1.z, r1.y
mad r1.y, r6.z, r5.w, r1.y
mad r0.w, r6.w, r0.w, r1.y
div r2.w, r0.w, r0.z
ge r0.z, l(0.000000), r0.z
movc r2.yz, r0.zzzz, l(0,0,0,0), r2.zzwz
and r0.zw, r0.xxxy, l(0, 0, 1, 1)
ieq r0.z, r0.w, r0.z
movc r1.yzw, r0.zzzz, r2.xxyz, r2.xxzy
mad r0.z, -r1.w, l(0.500000), r1.y
add r2.y, r0.z, r1.w
mad r2.z, -r1.z, l(0.500000), r0.z
add r2.x, r1.z, r2.z
mul r1.yzw, r4.xxyz, r3.yyzw
mad r1.yzw, r31.xxyz, r2.xxyz, r1.yyzw
mul r5.xyz, r32.xyzx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r5.xyz, r16.yzwy, l(0.040000, 0.040000, 0.040000, 0.000000), r5.xyzx
add r1.yzw, r1.yyzw, r5.xxyz
add r5.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r5.xyz, r5.xyzx, r32.xyzx
mad r2.xyz, r16.yzwy, r2.xyzx, r5.xyzx
mad r2.xyz, r3.yzwy, r4.xyzx, r2.xyzx
movc r1.xyz, r1.xxxx, r1.yzwy, r2.xyzx
lt r0.z, l(0.000000), cb2[9].z
if_nz r0.z
  dp3 r0.z, r11.xyzx, r11.xyzx
  rsq r0.w, r0.z
  mul r2.xyz, r0.wwww, r11.xyzx
  sqrt r0.z, r0.z
  lt r0.w, l(0.000000), cb2[13].w
  if_nz r0.w
    mad r3.xy, r0.zzzz, cb2[15].xyxx, cb2[14].zwzz
    mul r3.xy, r3.xyxx, cb2[16].xyxx
    lt r0.w, l(0.010000), |r11.z|
    mul r3.zw, r11.zzzz, cb2[15].zzzw
    mul r4.xy, r3.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r4.xy, r4.xyxx
    add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r3.zw, r4.xxxy, r3.zzzw
    mul r3.zw, r3.zzzw, r3.xxxy
    movc r3.xy, r0.wwww, r3.zwzz, r3.xyxx
    mul r3.xzw, r3.xxxx, cb2[12].xxyz
    exp r3.xzw, r3.xxzw
    mul r4.xyz, r3.yyyy, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xzwx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xzwx
  else 
    mad r0.w, r0.z, cb2[15].x, cb2[14].z
    mul r0.w, r0.w, cb2[16].x
    lt r1.w, l(0.010000), |r11.z|
    mul r2.w, r11.z, cb2[15].z
    mul r3.w, r2.w, l(-1.442695)
    exp r3.w, r3.w
    add r3.w, -r3.w, l(1.000000)
    div r2.w, r3.w, r2.w
    mul r2.w, r0.w, r2.w
    movc r0.w, r1.w, r2.w, r0.w
    mul r4.xyz, r0.wwww, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r0.w, cb2[7].yzwy, -r2.xyzx
  mad r1.w, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.x, cb2[8].w, -r0.w, l(1.000000)
  mul r2.x, r2.x, r2.x
  mul r2.x, r2.x, l(12.566371)
  div r1.w, r1.w, r2.x
  add r0.z, r0.z, -cb2[10].w
  mul_sat r0.z, r0.z, cb2[11].w
  mul r0.z, r0.z, r1.w
  mov_sat r0.w, r0.w
  mad r0.w, r0.w, r0.w, l(1.000000)
  mad r0.w, r0.w, l(0.05968310), l(-1.000000)
  mad r0.w, cb2[8].z, r0.w, l(1.000000)
  mul r2.xyz, r0.zzzz, cb2[11].xyzx
  mad r2.xyz, r0.wwww, cb2[10].xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r1.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.z, r11.z, cb2[6].x
  mad r0.w, cb2[6].x, r11.z, cb2[5].x
  lt r1.w, |r0.z|, l(0.000100)
  min r2.w, r0.w, l(64.000000)
  mul r2.w, r2.w, l(1.442695)
  exp r2.w, r2.w
  mov_sat r3.x, cb2[6].z
  lt r3.y, r0.w, l(0.000000)
  add r0.w, r0.w, l(1.000000)
  movc r0.w, r3.y, r2.w, r0.w
  add r0.w, r0.w, -cb2[6].z
  movc r0.z, r1.w, l(1.000000), r0.z
  div r0.z, r0.w, r0.z
  movc r0.z, r1.w, r3.x, r0.z
  mul r0.z, r0.z, cb2[5].z
  dp3 r0.w, r11.xyzx, r11.xyzx
  sqrt r1.w, r0.w
  mad r0.z, r0.z, r1.w, cb2[5].w
  exp r0.z, r0.z
  min r0.z, r0.z, l(1.000000)
  add r0.z, -r0.z, l(1.000000)
  rsq r0.w, r0.w
  mul r3.xyz, r0.wwww, r11.xyzx
  dp3 r0.w, cb2[7].yzwy, r3.xyzx
  mad_sat r0.w, cb2[8].y, r0.w, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r0.wwww, r3.xyzw, cb2[4].xyzw
  mul r0.z, r0.z, r3.w
  add r3.xyz, -r1.xyzx, r3.xyzx
  mad r2.xyz, r0.zzzz, r3.xyzx, r1.xyzx
endif 
mul r1.xyzw, r2.xyzx, cb1[85].yyyy
ge r2.xyzw, r1.wyzw, l(0.00006104, 0.00006104, 0.00006104, 0.00006104)
and r1.xyzw, r1.xyzw, r2.xyzw
min r1.xyzw, r1.xyzw, l(65024.000000, 65024.000000, 64512.000000, 65024.000000)
store_uav_typed u0.xyzw, r0.xyyy, r1.xyzw
ret 
// Approximately 2078 instruction slots used
