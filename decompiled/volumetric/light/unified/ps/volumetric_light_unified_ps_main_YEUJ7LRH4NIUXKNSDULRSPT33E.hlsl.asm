//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:43:57 2021
//
//
// Buffer Definitions: 
//
// cbuffer PostFxCBuffer
// {
//
//   float4 postFxControl0;             // Offset:    0 Size:    16
//   float4 postFxControl1;             // Offset:   16 Size:    16
//   float4 postFxControl2;             // Offset:   32 Size:    16
//   float4 postFxControl3;             // Offset:   48 Size:    16
//   float4 postFxControl4;             // Offset:   64 Size:    16
//   float4 postFxControl5;             // Offset:   80 Size:    16
//   float4 postFxControl6;             // Offset:   96 Size:    16
//   float4 postFxControl7;             // Offset:  112 Size:    16
//   float4 postFxControl8;             // Offset:  128 Size:    16 [unused]
//   float4 postFxControl9;             // Offset:  144 Size:    16 [unused]
//   float4 postFxControlA;             // Offset:  160 Size:    16
//   float4 postFxControlB;             // Offset:  176 Size:    16 [unused]
//   float4 postFxControlC;             // Offset:  192 Size:    16 [unused]
//   float4 postFxControlD;             // Offset:  208 Size:    16 [unused]
//   float4 postFxControlE;             // Offset:  224 Size:    16 [unused]
//   float4 postFxControlF;             // Offset:  240 Size:    16 [unused]
//   float4 postFxConst00;              // Offset:  256 Size:    16 [unused]
//   float4 postFxConst01;              // Offset:  272 Size:    16 [unused]
//   float4 postFxConst02;              // Offset:  288 Size:    16 [unused]
//   float4 postFxConst03;              // Offset:  304 Size:    16 [unused]
//   float4 postFxConst04;              // Offset:  320 Size:    16 [unused]
//   float4 postFxConst05;              // Offset:  336 Size:    16 [unused]
//   float4 postFxConst06;              // Offset:  352 Size:    16 [unused]
//   float4 postFxConst07;              // Offset:  368 Size:    16 [unused]
//   float4 postFxConst08;              // Offset:  384 Size:    16 [unused]
//   float4 postFxConst09;              // Offset:  400 Size:    16 [unused]
//   float4 postFxConst10;              // Offset:  416 Size:    16 [unused]
//   float4 postFxConst11;              // Offset:  432 Size:    16 [unused]
//   float4 postFxConst12;              // Offset:  448 Size:    16 [unused]
//   float4 postFxConst13;              // Offset:  464 Size:    16 [unused]
//   float4 postFxConst14;              // Offset:  480 Size:    16 [unused]
//   float4 postFxConst15;              // Offset:  496 Size:    16 [unused]
//   float4 postFxConst16;              // Offset:  512 Size:    16 [unused]
//   float4 postFxConst17;              // Offset:  528 Size:    16 [unused]
//   float4 postFxConst18;              // Offset:  544 Size:    16 [unused]
//   float4 postFxConst19;              // Offset:  560 Size:    16 [unused]
//   float4 postFxConst20;              // Offset:  576 Size:    16 [unused]
//   float4 postFxConst21;              // Offset:  592 Size:    16 [unused]
//   float4 postFxConst22;              // Offset:  608 Size:    16 [unused]
//   float4 postFxConst23;              // Offset:  624 Size:    16 [unused]
//   float4 postFxConst24;              // Offset:  640 Size:    16 [unused]
//   float4 postFxConst25;              // Offset:  656 Size:    16 [unused]
//   float4 postFxConst26;              // Offset:  672 Size:    16 [unused]
//   float4 postFxConst27;              // Offset:  688 Size:    16 [unused]
//   float4 postFxConst28;              // Offset:  704 Size:    16 [unused]
//   float4 postFxConst29;              // Offset:  720 Size:    16 [unused]
//   float4 postFxConst30;              // Offset:  736 Size:    16 [unused]
//   float4 postFxConst31;              // Offset:  752 Size:    16 [unused]
//   float4 postFxConst32;              // Offset:  768 Size:    16 [unused]
//   float4 postFxConst33;              // Offset:  784 Size:    16 [unused]
//   float4 postFxConst34;              // Offset:  800 Size:    16 [unused]
//   float4 postFxConst35;              // Offset:  816 Size:    16 [unused]
//   float4 postFxConst36;              // Offset:  832 Size:    16 [unused]
//   float4 postFxConst37;              // Offset:  848 Size:    16 [unused]
//   float4 postFxConst38;              // Offset:  864 Size:    16 [unused]
//   float4 postFxConst39;              // Offset:  880 Size:    16 [unused]
//   float4 postFxConst40;              // Offset:  896 Size:    16 [unused]
//   float4 postFxConst41;              // Offset:  912 Size:    16 [unused]
//   float4 postFxConst42;              // Offset:  928 Size:    16 [unused]
//   float4 postFxConst43;              // Offset:  944 Size:    16 [unused]
//   float4 postFxConst44;              // Offset:  960 Size:    16 [unused]
//   float4 postFxConst45;              // Offset:  976 Size:    16 [unused]
//   float4 postFxConst46;              // Offset:  992 Size:    16 [unused]
//   float4 postFxConst47;              // Offset: 1008 Size:    16 [unused]
//   float4 postFxConst48;              // Offset: 1024 Size:    16 [unused]
//   float4 postFxConst49;              // Offset: 1040 Size:    16 [unused]
//   float4 postFxConst50;              // Offset: 1056 Size:    16 [unused]
//   float4 postFxConst51;              // Offset: 1072 Size:    16 [unused]
//   float4 postFxConst52;              // Offset: 1088 Size:    16 [unused]
//   float4 postFxConst53;              // Offset: 1104 Size:    16 [unused]
//   float4 postFxConst54;              // Offset: 1120 Size:    16 [unused]
//   float4 postFxConst55;              // Offset: 1136 Size:    16 [unused]
//   float4 postFxConst56;              // Offset: 1152 Size:    16 [unused]
//   float4 postFxConst57;              // Offset: 1168 Size:    16 [unused]
//   float4 postFxConst58;              // Offset: 1184 Size:    16 [unused]
//   float4 postFxConst59;              // Offset: 1200 Size:    16 [unused]
//   float4 postFxConst60;              // Offset: 1216 Size:    16 [unused]
//   float4 postFxConst61;              // Offset: 1232 Size:    16 [unused]
//   float4 postFxConst62;              // Offset: 1248 Size:    16 [unused]
//   float4 postFxConst63;              // Offset: 1264 Size:    16 [unused]
//   float4 postFxBloom00;              // Offset: 1280 Size:    16 [unused]
//   float4 postFxBloom01;              // Offset: 1296 Size:    16 [unused]
//   float4 postFxBloom02;              // Offset: 1312 Size:    16 [unused]
//   float4 postFxBloom03;              // Offset: 1328 Size:    16 [unused]
//   float4 postFxBloom04;              // Offset: 1344 Size:    16 [unused]
//   float4 postFxBloom05;              // Offset: 1360 Size:    16 [unused]
//   float4 postFxBloom06;              // Offset: 1376 Size:    16 [unused]
//   float4 postFxBloom07;              // Offset: 1392 Size:    16 [unused]
//   float4 postFxBloom08;              // Offset: 1408 Size:    16 [unused]
//   float4 postFxBloom09;              // Offset: 1424 Size:    16 [unused]
//   float4 postFxBloom10;              // Offset: 1440 Size:    16 [unused]
//   float4 postFxBloom11;              // Offset: 1456 Size:    16 [unused]
//   float4 postFxBloom12;              // Offset: 1472 Size:    16 [unused]
//   float4 postFxBloom13;              // Offset: 1488 Size:    16 [unused]
//   float4 postFxBloom14;              // Offset: 1504 Size:    16 [unused]
//   float4 postFxBloom15;              // Offset: 1520 Size:    16 [unused]
//   float4 postFxBloom16;              // Offset: 1536 Size:    16 [unused]
//   float4 postFxBloom17;              // Offset: 1552 Size:    16 [unused]
//   float4 postFxBloom18;              // Offset: 1568 Size:    16 [unused]
//   float4 postFxBloom19;              // Offset: 1584 Size:    16 [unused]
//   float4 postFxBloom20;              // Offset: 1600 Size:    16 [unused]
//   float4 postFxBloom21;              // Offset: 1616 Size:    16 [unused]
//   float4 postFxBloom22;              // Offset: 1632 Size:    16 [unused]
//   float4 postFxBloom23;              // Offset: 1648 Size:    16 [unused]
//   float4 postFxBloom24;              // Offset: 1664 Size:    16 [unused]
//   float4 postFxBloom25;              // Offset: 1680 Size:    16 [unused]
//   float4 filterTap[8];               // Offset: 1696 Size:   128 [unused]
//   float4 postfxViewMatrix0;          // Offset: 1824 Size:    16 [unused]
//   float4 postfxViewMatrix1;          // Offset: 1840 Size:    16 [unused]
//   float4 postfxViewMatrix2;          // Offset: 1856 Size:    16 [unused]
//   float4 postfxViewMatrix3;          // Offset: 1872 Size:    16 [unused]
//   float4 postfxProjMatrix0;          // Offset: 1888 Size:    16 [unused]
//   float4 postfxProjMatrix1;          // Offset: 1904 Size:    16 [unused]
//   float4 postfxProjMatrix2;          // Offset: 1920 Size:    16 [unused]
//   float4 postfxProjMatrix3;          // Offset: 1936 Size:    16 [unused]
//   float4 postfxViewProjMatrix0;      // Offset: 1952 Size:    16 [unused]
//   float4 postfxViewProjMatrix1;      // Offset: 1968 Size:    16 [unused]
//   float4 postfxViewProjMatrix2;      // Offset: 1984 Size:    16 [unused]
//   float4 postfxViewProjMatrix3;      // Offset: 2000 Size:    16 [unused]
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16 [unused]
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16 [unused]
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4 [unused]
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224 [unused]
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48 [unused]
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4 [unused]
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for gLitFogVolumes
// {
//
//   struct CoreLitFogConstantsPack
//   {
//       
//       uint4 data[13];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   208
//
// }
//
// Resource bind info for gCullConstants
// {
//
//   struct CoreCullConstantsPack
//   {
//       
//       uint4 data[5];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    80
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// gTrilinearClampSampler            sampler      NA          NA             s0      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// downsampledDepth                  texture   float          2d             t0      1 
// gLitFogVolumes                    texture  struct         r/o             t1      1 
// volLightTexture                   texture  float3          3d             t2      1 
// visibleVolumetricSpotLights       texture    uint     2darray             t3      1 
// visibleVolumetricOmniLights       texture    uint     2darray             t4      1 
// downSampledDepthUV                texture    uint          2d             t5      1 
// adaptiveTransparencyDepth         texture  float4          2d             t7      1 
// adaptiveTransparencyTrans         texture  float4          2d             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// oitPixelAlpha                     texture   float          2d            t10      1 
// gCullConstants                    texture  struct         r/o            t11      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// PostFxCBuffer                     cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB8[11], immediateIndexed
dcl_constantbuffer CB1[45], immediateIndexed
dcl_constantbuffer CB2[51], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_structured t1, 208
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2darray (uint,uint,uint,uint) t3
dcl_resource_texture2darray (uint,uint,uint,uint) t4
dcl_resource_texture2d (uint,uint,uint,uint) t5
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_structured t11, 80
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture2darray (float,float,float,float) t20
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 61
ftou r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyww, t0.xyzw
lt r1.y, r1.x, l(0.000000)
if_nz r1.y
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
div r1.yz, v0.xxyx, cb1[44].xxyx
mad r1.yz, r1.yyzy, l(0.000000, 2.000000, -2.000000, 0.000000), l(0.000000, -1.000000, 1.000000, 0.000000)
mul r2.xy, r1.yzyy, cb8[4].xyxx
mov r2.z, l(1.000000)
mul r1.xyz, r1.xxxx, r2.xyzx
mul r2.xyz, r1.yyyy, cb8[1].xyzx
mad r1.xyw, r1.xxxx, cb8[0].xyxz, r2.xyxz
mad r1.xyz, r1.zzzz, cb8[2].xyzx, r1.xywx
add r1.xyz, r1.xyzx, cb8[3].xyzx
add r1.xyz, r1.xyzx, -cb8[5].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r2.x, r1.w
max r2.y, cb1[41].x, l(1.000000)
min r2.x, r2.x, l(8000.000000)
ge r2.z, r2.y, r2.x
if_nz r2.z
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
ld_indexable(texture2d)(uint,uint,uint,uint) r0.z, r0.xyzw, t5.yzxw
ushr r0.w, r0.z, l(2)
and r0.z, r0.z, l(3)
round_ni r2.zw, v0.xxxy
utof r3.xy, r0.wzww
mad r0.zw, r2.zzzw, cb8[7].xxxx, r3.xxxy
ftou r3.xy, r0.zwzz
rsq r0.z, r1.w
mul r1.xyz, r0.zzzz, r1.xyzx
and r0.z, cb8[4].z, l(0x0000ffff)
ushr r0.w, cb8[4].w, l(16)
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.xyww, t7.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r3.xyww, t8.xyzw
ld_indexable(texture2d)(float,float,float,float) r1.w, r3.xyzw, t10.yzwx
mul r3.xyzw, r4.xyzw, l(2000.000000, 2000.000000, 2000.000000, 2000.000000)
lt r1.w, l(0.900000), r1.w
movc r3.xyzw, r1.wwww, l(2000.000000,2000.000000,2000.000000,2000.000000), r3.xyzw
movc r4.xyzw, r1.wwww, l(1.000000,1.000000,1.000000,1.000000), r5.xyzw
utof r2.zw, r0.xxxy
mul r5.xy, r2.zwzz, cb8[7].xxxx
dp2 r1.w, r2.wzww, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r1.w, r1.w
mul r1.w, r1.w, l(52.982918)
frc r1.w, r1.w
add r1.w, r1.w, l(-0.500000)
resinfo_indexable(texture3d)(float,float,float,float)_uint r5.zw, l(0), t2.zwxy
add r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
utof r5.zw, r5.zzzw
div r6.x, l(16.000000), cb8[7].x
mul r5.zw, r5.zzzw, r6.xxxx
div r6.yz, r2.zzwz, r5.zzwz
mul r2.zw, r5.xxxy, l(0.000000, 0.000000, 0.015625, 0.015625)
ftou r5.xy, r2.zwzz
ushr r7.xyzw, cb2[50].xyzw, l(5, 5, 5, 5)
utof r0.w, r0.w
mov r8.w, l(1.000000)
mov r9.w, l(1.000000)
mov r10.w, l(1.000000)
mov r11.w, l(1.000000)
mov r12.w, l(1.000000)
mov r13.w, l(1.000000)
mov r14.w, l(1.000000)
mov r5.w, l(0)
mov r15.w, l(1.000000)
mov r16.xy, r5.xyxx
mov r17.w, l(1.000000)
mov r16.w, l(0)
mov r18.w, l(1.000000)
mov r19.w, l(1.000000)
mov r20.w, l(1.000000)
mov r21.w, l(1.000000)
mov r22.w, l(1.000000)
mov r23.y, l(0)
mov r24.z, l(1.000000)
mov r25.z, l(1.000000)
mov r26.z, l(1.000000)
mov r27.xyzw, cb2[24].xyzw
mov r28.xyzw, cb2[25].xyzw
mov r29.xyz, cb2[17].xyzx
mov r30.xyz, cb2[21].xyzx
mov r31.xyz, cb2[22].xyzx
mov r32.xyz, l(0,0,0,0)
mov r2.z, cb2[17].w
mov r2.w, cb2[23].x
mov r23.zw, cb2[23].yyyz
mov r24.w, cb2[26].y
mov r33.x, cb2[28].x
mov r34.x, cb2[28].y
mov r35.x, cb2[28].z
mov r33.y, cb2[29].x
mov r34.y, cb2[29].y
mov r35.y, cb2[29].z
mov r33.z, cb2[30].x
mov r34.z, cb2[30].y
mov r35.z, cb2[30].z
mov r33.w, cb2[31].x
mov r34.w, cb2[31].y
mov r35.w, cb2[31].z
mov r25.w, l(0)
loop 
  uge r26.w, r25.w, r0.z
  breakc_nz r26.w
  ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r36.xyzw, r25.w, l(132), t1.xyzw
  and r26.w, r36.w, l(2)
  if_nz r26.w
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r37.xyzw, r25.w, l(24), t1.xyzw
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r38.xyzw, r25.w, l(52), t1.xyzw
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r26.w, r25.w, l(68), t1.xxxx
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r39.xyzw, r25.w, l(84), t1.xyzw
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r29.w, r25.w, l(100), t1.xxxx
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r40.xyzw, r25.w, l(116), t1.xyzw
    dp3 r30.w, r1.xyzx, r37.xyzx
    max r31.w, |r30.w|, l(0.00000010)
    div r31.w, l(1.000000, 1.000000, 1.000000, 1.000000), r31.w
    mul r32.w, r31.w, r37.w
    mul r31.w, r31.w, r38.x
    lt r30.w, l(0.000000), -r30.w
    max r37.x, r32.w, l(-131072.000000)
    min r37.y, -r31.w, l(131072.000000)
    min r41.y, -r32.w, l(131072.000000)
    max r41.x, r31.w, l(-131072.000000)
    movc r37.xy, r30.wwww, r37.xyxx, r41.xyxx
    dp3 r30.w, r1.xyzx, r38.yzwy
    max r31.w, |r30.w|, l(0.00000010)
    div r31.w, l(1.000000, 1.000000, 1.000000, 1.000000), r31.w
    mul r26.w, r26.w, r31.w
    mul r31.w, r31.w, r39.x
    lt r30.w, l(0.000000), -r30.w
    max r38.x, r37.x, r26.w
    min r38.y, r37.y, -r31.w
    min r41.y, r37.y, -r26.w
    max r41.x, r37.x, r31.w
    movc r37.xy, r30.wwww, r38.xyxx, r41.xyxx
    dp3 r26.w, r1.xyzx, r39.yzwy
    max r30.w, |r26.w|, l(0.00000010)
    div r30.w, l(1.000000, 1.000000, 1.000000, 1.000000), r30.w
    mul r29.w, r29.w, r30.w
    mul r30.w, r30.w, r40.x
    lt r26.w, l(0.000000), -r26.w
    max r38.y, r37.x, r29.w
    min r38.z, r37.y, -r30.w
    min r37.z, r37.y, -r29.w
    max r37.y, r37.x, r30.w
    movc r37.yz, r26.wwww, r38.yyzy, r37.yyzy
    lt r26.w, r37.y, r37.z
    if_nz r26.w
      max r37.x, r37.y, l(0.000000)
      max r37.xy, r2.yyyy, r37.xzxx
      min r37.xy, r2.xxxx, r37.xyxx
      add r26.w, -r37.x, r37.y
      ge r26.w, r26.w, l(1.000000)
      if_nz r26.w
        ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r26.w, r25.w, l(196), t1.xxxx
        max r29.w, r36.x, r37.x
        add r30.w, -r29.w, r37.y
        min r26.w, r26.w, r30.w
        ge r30.w, r26.w, l(1.000000)
        if_nz r30.w
          ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r37.xyzw, r25.w, l(148), t1.xyzw
          ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r38.xyzw, r25.w, l(164), t1.zxyw
          ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r39.xyzw, r25.w, l(180), t1.xyzw
          add r37.xyz, r36.zzzz, r37.xyzx
          add r26.w, r26.w, r29.w
          and r30.w, r36.w, l(21)
          switch r30.w
            case l(16)
            add r30.w, r36.x, r29.w
            min r30.w, r26.w, r30.w
            add r31.w, r26.w, -r30.w
            div r32.w, r31.w, cb8[10].x
            min r32.w, r32.w, l(39.000000)
            round_ni r32.w, r32.w
            add r32.w, r32.w, l(1.000000)
            ftou r32.w, r32.w
            iadd r32.w, r32.w, l(1)
            and r32.w, r32.w, l(-2)
            utof r36.w, r32.w
            div r36.w, l(1.000000, 1.000000, 1.000000, 1.000000), r36.w
            mul r31.w, r31.w, r36.w
            mad r40.x, -r31.w, l(0.500000), r26.w
            mad r30.w, r31.w, l(0.500000), r30.w
            add r31.w, -r30.w, r40.x
            mul r31.w, r36.w, r31.w
            mul r36.w, r1.w, r31.w
            mad r30.w, r36.w, l(1.500000), r30.w
            mul r36.w, r40.y, l(100.000000)
            mad r40.x, r1.z, r30.w, r40.w
            mul r40.x, r40.x, -r40.z
            exp r40.x, r40.x
            min r40.x, r40.x, l(1.000000)
            mul r40.x, r40.x, r40.y
            min r40.x, r36.w, r40.x
            mul r41.xyz, r37.xyzx, r40.xxxx
            mul r41.xyz, r30.wwww, -r41.xyzx
            exp r41.xyz, r41.xyzx
            mul r41.xyz, r39.yyyy, r41.xyzx
            ge r42.xyzw, r3.xyzw, r30.wwww
            movc r41.w, r42.w, r4.z, r4.w
            movc r41.w, r42.z, r4.y, r41.w
            movc r41.w, r42.y, r4.x, r41.w
            movc r41.w, r42.x, l(1.000000), r41.w
            mul r41.xyz, r40.xxxx, r41.xyzx
            mov r38.x, r37.w
            mul r41.xyz, r38.xyzx, r41.xyzx
            mul r41.xyz, r41.wwww, r41.xyzx
            mov r42.xyz, r41.xyzx
            mov r43.xyz, r41.xyzx
            mov r40.x, r30.w
            mov r41.w, l(0)
            loop 
              uge r42.w, r41.w, r32.w
              breakc_nz r42.w
              mad r40.x, r31.w, l(2.000000), r40.x
              mad r42.w, r1.z, r40.x, r40.w
              mul r42.w, -r40.z, r42.w
              exp r42.w, r42.w
              min r42.w, r42.w, l(1.000000)
              mul r42.w, r40.y, r42.w
              min r42.w, r36.w, r42.w
              mul r44.xyz, r37.xyzx, r42.wwww
              mul r44.xyz, r40.xxxx, -r44.xyzx
              exp r44.xyz, r44.xyzx
              mul r44.xyz, r39.yyyy, r44.xyzx
              ge r45.xyzw, r3.xyzw, r40.xxxx
              movc r43.w, r45.w, r4.z, r4.w
              movc r43.w, r45.z, r4.y, r43.w
              movc r43.w, r45.y, r4.x, r43.w
              movc r43.w, r45.x, l(1.000000), r43.w
              mul r44.xyz, r42.wwww, r44.xyzx
              mul r44.xyz, r38.xyzx, r44.xyzx
              mul r45.xyz, r43.wwww, r44.xyzx
              mad r46.xyz, r44.xyzx, r43.wwww, r42.xyzx
              dp3 r42.w, l(0.299000, 0.587000, 0.114000, 0.000000), r43.xyzx
              dp3 r44.w, l(0.299000, 0.587000, 0.114000, 0.000000), r45.xyzx
              max r45.w, r42.w, r44.w
              min r42.w, r42.w, r44.w
              div r42.w, r42.w, r45.w
              lt r42.w, r42.w, l(0.800000)
              if_nz r42.w
                mov r47.xyz, l(0,0,0,0)
              else 
                mad r44.xyz, r44.xyzx, r43.wwww, r43.xyzx
                mul r47.xyz, r44.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              endif 
              add r42.xyz, r46.xyzx, r47.xyzx
              iadd r41.w, r41.w, l(2)
              mov r43.xyz, r45.xyzx
            endloop 
            mul r30.w, r31.w, r36.z
            mul r41.xyz, r30.wwww, r42.xyzx
            mad r32.xyz, r41.xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.000000), r32.xyzx
            break 
            case l(1)
            add r30.w, r36.x, r29.w
            min r30.w, r26.w, r30.w
            add r31.w, r26.w, -r30.w
            div r32.w, r31.w, cb8[10].x
            min r32.w, r32.w, l(39.000000)
            round_ni r32.w, r32.w
            add r32.w, r32.w, l(1.000000)
            ftou r32.w, r32.w
            iadd r32.w, r32.w, l(1)
            and r32.w, r32.w, l(-2)
            utof r36.w, r32.w
            div r36.w, l(1.000000, 1.000000, 1.000000, 1.000000), r36.w
            dp3 r40.x, r29.xyzx, -r1.xyzx
            mul r31.w, r31.w, r36.w
            mad r41.x, -r31.w, l(0.500000), r26.w
            mad r30.w, r31.w, l(0.500000), r30.w
            add r31.w, -r30.w, r41.x
            mul r41.x, r36.w, r31.w
            max r40.x, r40.x, l(-1.000000)
            min r40.x, r40.x, l(1.000000)
            mad r40.x, r36.y, r40.x, l(1.000000)
            max r40.x, r40.x, l(0.000001)
            min r40.x, r40.x, l(2.000000)
            mad r41.y, -r36.y, r36.y, l(1.000000)
            mul r41.y, r41.y, l(0.07957747)
            mul r40.x, r40.x, r40.x
            rcp r40.x, r40.x
            mul r40.x, r40.x, r41.y
            max r40.x, r40.x, l(0.000000)
            min r40.x, r40.x, l(10000.000000)
            mov r43.xy, r38.xwxx
            mov r43.z, r39.x
            mul r41.yzw, r40.xxxx, r43.xxyz
            mul r41.yzw, r39.wwww, r41.yyzw
            mul r41.yzw, r41.yyzw, l(0.000000, 12.566371, 12.566371, 12.566371)
            mul r40.x, r1.w, r41.x
            mad r30.w, r40.x, l(1.500000), r30.w
            mul r8.xyz, r1.xyzx, r30.wwww
            mul r40.x, r40.y, l(100.000000)
            mad r42.w, r1.z, r30.w, r40.w
            mul r42.w, -r40.z, r42.w
            exp r42.w, r42.w
            min r42.w, r42.w, l(1.000000)
            mul r42.w, r40.y, r42.w
            min r42.w, r40.x, r42.w
            mul r43.xyz, r37.xyzx, r42.wwww
            mul r43.xyz, r30.wwww, -r43.xyzx
            exp r43.xyz, r43.xyzx
            mul r43.xyz, r39.yyyy, r43.xyzx
            ge r44.xyzw, r3.xyzw, r30.wwww
            movc r43.w, r44.w, r4.z, r4.w
            movc r43.w, r44.z, r4.y, r43.w
            movc r43.w, r44.y, r4.x, r43.w
            movc r43.w, r44.x, l(1.000000), r43.w
            mad r10.xyz, r1.xyzx, r30.wwww, cb8[5].xyzx
            dp3 r44.x, r10.xyzx, cb8[6].xyzx
            add r44.x, r44.x, cb8[6].w
            mul r44.x, r44.x, l(0.003000)
            max r44.x, r44.x, l(1.000000)
            min r44.x, r44.x, l(2.000000)
            ftou r44.x, r44.x
            dp4 r44.y, r8.xyzw, r33.xyzw
            dp4 r44.z, r8.xyzw, r34.xyzw
            dp4 r8.x, r8.xyzw, r35.xyzw
            iadd r8.y, r44.x, l(-1)
            mul r45.xyz, r30.xyzx, icb[r8.y + 0].xxxx
            mad r45.xyz, icb[r8.y + 0].yyyy, r31.xyzx, r45.xyzx
            add r46.xy, r44.yzyy, -r45.xyxx
            mul r8.yz, r45.zzzz, r46.xxyx
            mad r45.xy, r8.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r8.x, -r2.z, r8.x
            mad r8.x, -r8.x, l(0.00006104), l(0.999500)
            iadd r8.y, r24.w, r44.x
            utof r45.z, r8.y
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r8.x, r45.xyzx, t13.xxxx, s13, r8.x
            mul r8.x, r43.w, r8.x
            lt r8.y, l(0.000000), r23.w
            ult r8.z, l(0), r2.w
            and r8.y, r8.z, r8.y
            if_nz r8.y
              dp4 r8.z, r27.xyzw, r10.xyzw
              dp4 r10.x, r28.xyzw, r10.xyzw
              frc r44.x, r8.z
              frc r44.y, r10.x
              iadd r8.z, r2.w, l(-1)
              utof r44.z, r8.z
              sample_l_indexable(texture2darray)(float,float,float,float) r10.xyz, r44.xyzx, t20.xyzw, s2, l(0.000000)
              mul r8.z, r23.w, r23.z
              add r10.xyz, r10.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
              mad r10.xyz, r8.zzzz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
              mul r44.xyz, r42.wwww, r43.xyzx
              mul r44.xyz, r8.xxxx, r44.xyzx
              mul r10.xyz, r10.xyzx, r44.xyzx
            else 
              mul r44.xyz, r42.wwww, r43.xyzx
              mul r10.xyz, r8.xxxx, r44.xyzx
            endif 
            mul r43.xyz, r42.wwww, r43.xyzx
            mov r38.x, r37.w
            mul r43.xyz, r38.xyzx, r43.xyzx
            mul r43.xyz, r43.wwww, r43.xyzx
            mad r10.xyz, r10.xyzx, r41.yzwy, r43.xyzx
            iadd r8.x, r2.w, l(-1)
            utof r43.z, r8.x
            mul r8.x, r23.w, r23.z
            mov r44.xyz, r10.xyzx
            mov r45.xyz, r10.xyzx
            mov r8.z, r30.w
            mov r37.w, l(0)
            loop 
              uge r42.w, r37.w, r32.w
              breakc_nz r42.w
              mad r42.w, r41.x, l(2.000000), r8.z
              mul r11.xyz, r1.xyzx, r42.wwww
              mad r43.w, r1.z, r42.w, r40.w
              mul r43.w, -r40.z, r43.w
              exp r43.w, r43.w
              min r43.w, r43.w, l(1.000000)
              mul r43.w, r40.y, r43.w
              min r43.w, r40.x, r43.w
              mul r46.xyz, r37.xyzx, r43.wwww
              mul r46.xyz, r42.wwww, -r46.xyzx
              exp r46.xyz, r46.xyzx
              mul r46.xyz, r39.yyyy, r46.xyzx
              ge r47.xyzw, r3.xyzw, r42.wwww
              movc r44.w, r47.w, r4.z, r4.w
              movc r44.w, r47.z, r4.y, r44.w
              movc r44.w, r47.y, r4.x, r44.w
              movc r44.w, r47.x, l(1.000000), r44.w
              mad r13.xyz, r1.xyzx, r42.wwww, cb8[5].xyzx
              dp3 r45.w, r13.xyzx, cb8[6].xyzx
              add r45.w, r45.w, cb8[6].w
              mul r45.w, r45.w, l(0.003000)
              max r45.w, r45.w, l(1.000000)
              min r45.w, r45.w, l(2.000000)
              ftou r45.w, r45.w
              dp4 r46.w, r11.xyzw, r33.xyzw
              dp4 r47.x, r11.xyzw, r34.xyzw
              dp4 r11.x, r11.xyzw, r35.xyzw
              iadd r11.y, r45.w, l(-1)
              mul r47.yzw, r30.xxyz, icb[r11.y + 0].xxxx
              mad r47.yzw, icb[r11.y + 0].yyyy, r31.xxyz, r47.yyzw
              add r48.x, r46.w, -r47.y
              add r48.y, -r47.z, r47.x
              mul r11.yz, r47.wwww, r48.xxyx
              mad r47.xy, r11.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r11.x, -r2.z, r11.x
              mad r11.x, -r11.x, l(0.00006104), l(0.999500)
              iadd r11.y, r24.w, r45.w
              utof r47.z, r11.y
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.x, r47.xyzx, t13.xxxx, s13, r11.x
              mul r11.x, r44.w, r11.x
              if_nz r8.y
                dp4 r11.y, r27.xyzw, r13.xyzw
                dp4 r11.z, r28.xyzw, r13.xyzw
                frc r43.xy, r11.yzyy
                sample_l_indexable(texture2darray)(float,float,float,float) r13.xyz, r43.xyzx, t20.xyzw, s2, l(0.000000)
                add r13.xyz, r13.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                mad r13.xyz, r8.xxxx, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r47.xyz, r43.wwww, r46.xyzx
                mul r47.xyz, r11.xxxx, r47.xyzx
                mul r13.xyz, r13.xyzx, r47.xyzx
              else 
                mul r47.xyz, r43.wwww, r46.xyzx
                mul r13.xyz, r11.xxxx, r47.xyzx
              endif 
              mul r11.xyz, r43.wwww, r46.xyzx
              mul r11.xyz, r38.xyzx, r11.xyzx
              mul r11.xyz, r44.wwww, r11.xyzx
              mad r11.xyz, r13.xyzx, r41.yzwy, r11.xyzx
              add r13.xyz, r11.xyzx, r44.xyzx
              dp3 r43.w, l(0.299000, 0.587000, 0.114000, 0.000000), r45.xyzx
              dp3 r44.w, l(0.299000, 0.587000, 0.114000, 0.000000), r11.xyzx
              max r45.w, r43.w, r44.w
              min r43.w, r43.w, r44.w
              div r43.w, r43.w, r45.w
              lt r43.w, r43.w, l(0.800000)
              if_nz r43.w
                mad r43.w, r31.w, r36.w, r8.z
                mul r14.xyz, r1.xyzx, r43.wwww
                mad r44.w, r1.z, r43.w, r40.w
                mul r44.w, -r40.z, r44.w
                exp r44.w, r44.w
                min r44.w, r44.w, l(1.000000)
                mul r44.w, r40.y, r44.w
                min r44.w, r40.x, r44.w
                mul r46.xyz, r37.xyzx, r44.wwww
                mul r46.xyz, r43.wwww, -r46.xyzx
                exp r46.xyz, r46.xyzx
                mul r46.xyz, r39.yyyy, r46.xyzx
                ge r47.xyzw, r3.xyzw, r43.wwww
                movc r45.w, r47.w, r4.z, r4.w
                movc r45.w, r47.z, r4.y, r45.w
                movc r45.w, r47.y, r4.x, r45.w
                movc r45.w, r47.x, l(1.000000), r45.w
                mad r15.xyz, r1.xyzx, r43.wwww, cb8[5].xyzx
                dp3 r43.w, r15.xyzx, cb8[6].xyzx
                add r43.w, r43.w, cb8[6].w
                mul r43.w, r43.w, l(0.003000)
                max r43.w, r43.w, l(1.000000)
                min r43.w, r43.w, l(2.000000)
                ftou r43.w, r43.w
                dp4 r46.w, r14.xyzw, r33.xyzw
                dp4 r47.x, r14.xyzw, r34.xyzw
                dp4 r14.x, r14.xyzw, r35.xyzw
                iadd r14.y, r43.w, l(-1)
                mul r47.yzw, r30.xxyz, icb[r14.y + 0].xxxx
                mad r47.yzw, icb[r14.y + 0].yyyy, r31.xxyz, r47.yyzw
                add r48.x, r46.w, -r47.y
                add r48.y, -r47.z, r47.x
                mul r14.yz, r47.wwww, r48.xxyx
                mad r47.xy, r14.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r14.x, -r2.z, r14.x
                mad r14.x, -r14.x, l(0.00006104), l(0.999500)
                iadd r14.y, r24.w, r43.w
                utof r47.z, r14.y
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r14.x, r47.xyzx, t13.xxxx, s13, r14.x
                mul r14.x, r45.w, r14.x
                if_nz r8.y
                  dp4 r14.y, r27.xyzw, r15.xyzw
                  dp4 r14.z, r28.xyzw, r15.xyzw
                  frc r43.xy, r14.yzyy
                  sample_l_indexable(texture2darray)(float,float,float,float) r15.xyz, r43.xyzx, t20.xyzw, s2, l(0.000000)
                  add r15.xyz, r15.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                  mad r15.xyz, r8.xxxx, r15.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r43.xyw, r44.wwww, r46.xyxz
                  mul r43.xyw, r14.xxxx, r43.xyxw
                  mul r15.xyz, r15.xyzx, r43.xywx
                else 
                  mul r43.xyw, r44.wwww, r46.xyxz
                  mul r15.xyz, r14.xxxx, r43.xywx
                endif 
                mul r14.xyz, r41.yzwy, r15.xyzx
              else 
                add r15.xyz, r11.xyzx, r45.xyzx
                mul r14.xyz, r15.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              endif 
              add r44.xyz, r13.xyzx, r14.xyzx
              iadd r37.w, r37.w, l(2)
              mov r45.xyz, r11.xyzx
              mov r8.z, r42.w
            endloop 
            mul r8.x, r36.z, r41.x
            mul r8.xyz, r8.xxxx, r44.xyzx
            mad r32.xyz, r8.xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.000000), r32.xyzx
            break 
            case l(4)
            add r8.x, r36.x, r29.w
            min r8.x, r26.w, r8.x
            add r8.y, -r8.x, r26.w
            div r8.z, r8.y, cb8[10].x
            min r8.z, r8.z, l(39.000000)
            round_ni r8.z, r8.z
            add r8.z, r8.z, l(1.000000)
            ftou r8.z, r8.z
            iadd r8.z, r8.z, l(1)
            and r8.z, r8.z, l(-2)
            utof r10.x, r8.z
            div r10.x, l(1.000000, 1.000000, 1.000000, 1.000000), r10.x
            mul r8.y, r8.y, r10.x
            mad r10.y, -r8.y, l(0.500000), r26.w
            mad r8.x, r8.y, l(0.500000), r8.x
            add r8.y, -r8.x, r10.y
            mul r8.y, r10.x, r8.y
            mul r10.x, r1.w, r8.y
            mad r8.x, r10.x, l(1.500000), r8.x
            mul r10.x, r40.y, l(100.000000)
            mad r10.y, r1.z, r8.x, r40.w
            mul r10.y, r10.y, -r40.z
            exp r10.y, r10.y
            min r10.y, r10.y, l(1.000000)
            mul r10.y, r10.y, r40.y
            min r10.y, r10.x, r10.y
            mul r11.xyz, r10.yyyy, r37.xyzx
            mul r11.xyz, r8.xxxx, -r11.xyzx
            exp r11.xyz, r11.xyzx
            mul r11.xyz, r39.yyyy, r11.xyzx
            ge r41.xyzw, r3.xyzw, r8.xxxx
            movc r10.z, r41.w, r4.z, r4.w
            movc r10.z, r41.z, r4.y, r10.z
            movc r10.z, r41.y, r4.x, r10.z
            movc r10.z, r41.x, l(1.000000), r10.z
            mul_sat r6.x, r8.x, l(0.000500)
            sample_l_indexable(texture3d)(float,float,float,float) r13.xyz, r6.yzxy, t2.xyzw, s0, l(0.000000)
            mul r11.xyz, r11.xyzx, r13.xyzx
            mul r11.xyz, r10.yyyy, r11.xyzx
            mul r11.xyz, r39.zzzz, r11.xyzx
            mul r11.xyz, r10.zzzz, r11.xyzx
            mov r13.xyz, r11.xyzx
            mov r14.xyz, r11.xyzx
            mov r10.y, r8.x
            mov r10.z, l(0)
            loop 
              uge r15.x, r10.z, r8.z
              breakc_nz r15.x
              mad r10.y, r8.y, l(2.000000), r10.y
              mad r15.x, r1.z, r10.y, r40.w
              mul r15.x, r15.x, -r40.z
              exp r15.x, r15.x
              min r15.x, r15.x, l(1.000000)
              mul r15.x, r15.x, r40.y
              min r15.x, r10.x, r15.x
              mul r41.xyz, r15.xxxx, r37.xyzx
              mul r41.xyz, r10.yyyy, -r41.xyzx
              exp r41.xyz, r41.xyzx
              mul r41.xyz, r39.yyyy, r41.xyzx
              ge r43.xyzw, r3.xyzw, r10.yyyy
              movc r15.y, r43.w, r4.z, r4.w
              movc r15.y, r43.z, r4.y, r15.y
              movc r15.y, r43.y, r4.x, r15.y
              movc r15.y, r43.x, l(1.000000), r15.y
              mul_sat r6.w, r10.y, l(0.000500)
              sample_l_indexable(texture3d)(float,float,float,float) r43.xyz, r6.yzwy, t2.xyzw, s0, l(0.000000)
              mul r41.xyz, r41.xyzx, r43.xyzx
              mul r41.xyz, r15.xxxx, r41.xyzx
              mul r41.xyz, r39.zzzz, r41.xyzx
              mul r43.xyz, r15.yyyy, r41.xyzx
              mad r45.xyz, r41.xyzx, r15.yyyy, r13.xyzx
              dp3 r15.x, l(0.299000, 0.587000, 0.114000, 0.000000), r14.xyzx
              dp3 r15.z, l(0.299000, 0.587000, 0.114000, 0.000000), r43.xyzx
              max r30.w, r15.z, r15.x
              min r15.x, r15.z, r15.x
              div r15.x, r15.x, r30.w
              lt r15.x, r15.x, l(0.800000)
              if_nz r15.x
                mov r46.xyz, l(0,0,0,0)
              else 
                mad r15.xyz, r41.xyzx, r15.yyyy, r14.xyzx
                mul r46.xyz, r15.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              endif 
              add r13.xyz, r45.xyzx, r46.xyzx
              iadd r10.z, r10.z, l(2)
              mov r14.xyz, r43.xyzx
            endloop 
            mul r8.x, r8.y, r36.z
            mul r8.xyz, r8.xxxx, r13.xyzx
            mad r32.xyz, r8.xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.000000), r32.xyzx
            break 
            case l(5)
            add r8.x, r36.x, r29.w
            min r8.x, r26.w, r8.x
            add r8.y, -r8.x, r26.w
            div r8.z, r8.y, cb8[10].x
            min r8.z, r8.z, l(39.000000)
            round_ni r8.z, r8.z
            add r8.z, r8.z, l(1.000000)
            ftou r8.z, r8.z
            iadd r8.z, r8.z, l(1)
            and r8.z, r8.z, l(-2)
            utof r10.x, r8.z
            div r10.x, l(1.000000, 1.000000, 1.000000, 1.000000), r10.x
            dp3 r10.y, r29.xyzx, -r1.xyzx
            mul r8.y, r8.y, r10.x
            mad r10.z, -r8.y, l(0.500000), r26.w
            mad r8.x, r8.y, l(0.500000), r8.x
            add r8.y, -r8.x, r10.z
            mul r10.z, r10.x, r8.y
            max r10.y, r10.y, l(-1.000000)
            min r10.y, r10.y, l(1.000000)
            mad r10.y, r36.y, r10.y, l(1.000000)
            max r10.y, r10.y, l(0.000001)
            min r10.y, r10.y, l(2.000000)
            mad r11.x, -r36.y, r36.y, l(1.000000)
            mul r11.x, r11.x, l(0.07957747)
            mul r10.y, r10.y, r10.y
            rcp r10.y, r10.y
            mul r10.y, r10.y, r11.x
            max r10.y, r10.y, l(0.000000)
            min r10.y, r10.y, l(10000.000000)
            mov r38.y, r39.x
            mul r11.xyz, r10.yyyy, r38.xwyx
            mul r11.xyz, r39.wwww, r11.xyzx
            mul r11.xyz, r11.xyzx, l(12.566371, 12.566371, 12.566371, 0.000000)
            mul r10.y, r1.w, r10.z
            mad r8.x, r10.y, l(1.500000), r8.x
            mul r9.xyz, r1.xyzx, r8.xxxx
            mul r10.y, r40.y, l(100.000000)
            mad r14.x, r1.z, r8.x, r40.w
            mul r14.x, r14.x, -r40.z
            exp r14.x, r14.x
            min r14.x, r14.x, l(1.000000)
            mul r14.x, r14.x, r40.y
            min r14.x, r10.y, r14.x
            mul r15.xyz, r14.xxxx, r37.xyzx
            mul r15.xyz, r8.xxxx, -r15.xyzx
            exp r15.xyz, r15.xyzx
            mul r15.xyz, r39.yyyy, r15.xyzx
            ge r38.xyzw, r3.xyzw, r8.xxxx
            movc r14.y, r38.w, r4.z, r4.w
            movc r14.y, r38.z, r4.y, r14.y
            movc r14.y, r38.y, r4.x, r14.y
            movc r14.y, r38.x, l(1.000000), r14.y
            mad r12.xyz, r1.xyzx, r8.xxxx, cb8[5].xyzx
            dp3 r14.z, r12.xyzx, cb8[6].xyzx
            add r14.z, r14.z, cb8[6].w
            mul r14.z, r14.z, l(0.003000)
            max r14.z, r14.z, l(1.000000)
            min r14.z, r14.z, l(2.000000)
            ftou r14.z, r14.z
            dp4 r30.w, r9.xyzw, r33.xyzw
            dp4 r31.w, r9.xyzw, r34.xyzw
            dp4 r9.x, r9.xyzw, r35.xyzw
            iadd r9.y, r14.z, l(-1)
            mul r38.xyz, r30.xyzx, icb[r9.y + 0].xxxx
            mad r38.xyz, icb[r9.y + 0].yyyy, r31.xyzx, r38.xyzx
            add r41.x, r30.w, -r38.x
            add r41.y, r31.w, -r38.y
            mul r9.yz, r38.zzzz, r41.xxyx
            mad r38.xy, r9.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
            add r9.x, -r2.z, r9.x
            mad r9.x, -r9.x, l(0.00006104), l(0.999500)
            iadd r9.y, r24.w, r14.z
            utof r38.z, r9.y
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.x, r38.xyzx, t13.xxxx, s13, r9.x
            mul r9.x, r14.y, r9.x
            lt r9.y, l(0.000000), r23.w
            ult r9.z, l(0), r2.w
            and r9.y, r9.z, r9.y
            if_nz r9.y
              dp4 r9.z, r27.xyzw, r12.xyzw
              dp4 r12.x, r28.xyzw, r12.xyzw
              frc r38.x, r9.z
              frc r38.y, r12.x
              iadd r9.z, r2.w, l(-1)
              utof r38.z, r9.z
              sample_l_indexable(texture2darray)(float,float,float,float) r12.xyz, r38.xyzx, t20.xyzw, s2, l(0.000000)
              mul r9.z, r23.w, r23.z
              add r12.xyz, r12.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
              mad r12.xyz, r9.zzzz, r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
              mul r38.xyz, r14.xxxx, r15.xyzx
              mul r38.xyz, r9.xxxx, r38.xyzx
              mul r12.xyz, r12.xyzx, r38.xyzx
            else 
              mul r38.xyz, r14.xxxx, r15.xyzx
              mul r12.xyz, r9.xxxx, r38.xyzx
            endif 
            mul_sat r6.x, r8.x, l(0.000500)
            sample_l_indexable(texture3d)(float,float,float,float) r38.xyz, r6.yzxy, t2.xyzw, s0, l(0.000000)
            mul r15.xyz, r15.xyzx, r38.xyzx
            mul r15.xyz, r14.xxxx, r15.xyzx
            mul r15.xyz, r39.zzzz, r15.xyzx
            mul r14.xyz, r14.yyyy, r15.xyzx
            mad r12.xyz, r12.xyzx, r11.xyzx, r14.xyzx
            iadd r6.x, r2.w, l(-1)
            utof r14.z, r6.x
            mul r6.x, r23.w, r23.z
            mov r15.xyz, r12.xyzx
            mov r38.xyz, r12.xyzx
            mov r9.x, r8.x
            mov r9.z, l(0)
            loop 
              uge r30.w, r9.z, r8.z
              breakc_nz r30.w
              mad r30.w, r10.z, l(2.000000), r9.x
              mul r17.xyz, r1.xyzx, r30.wwww
              mad r31.w, r1.z, r30.w, r40.w
              mul r31.w, r31.w, -r40.z
              exp r31.w, r31.w
              min r31.w, r31.w, l(1.000000)
              mul r31.w, r31.w, r40.y
              min r31.w, r10.y, r31.w
              mul r41.xyz, r31.wwww, r37.xyzx
              mul r41.xyz, r30.wwww, -r41.xyzx
              exp r41.xyz, r41.xyzx
              mul r41.xyz, r39.yyyy, r41.xyzx
              ge r43.xyzw, r3.xyzw, r30.wwww
              movc r32.w, r43.w, r4.z, r4.w
              movc r32.w, r43.z, r4.y, r32.w
              movc r32.w, r43.y, r4.x, r32.w
              movc r32.w, r43.x, l(1.000000), r32.w
              mad r18.xyz, r1.xyzx, r30.wwww, cb8[5].xyzx
              dp3 r36.w, r18.xyzx, cb8[6].xyzx
              add r36.w, r36.w, cb8[6].w
              mul r36.w, r36.w, l(0.003000)
              max r36.w, r36.w, l(1.000000)
              min r36.w, r36.w, l(2.000000)
              ftou r36.w, r36.w
              dp4 r37.w, r17.xyzw, r33.xyzw
              dp4 r38.w, r17.xyzw, r34.xyzw
              dp4 r17.x, r17.xyzw, r35.xyzw
              iadd r17.y, r36.w, l(-1)
              mul r43.xyz, r30.xyzx, icb[r17.y + 0].xxxx
              mad r43.xyz, icb[r17.y + 0].yyyy, r31.xyzx, r43.xyzx
              add r45.x, r37.w, -r43.x
              add r45.y, r38.w, -r43.y
              mul r17.yz, r43.zzzz, r45.xxyx
              mad r43.xy, r17.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
              add r17.x, -r2.z, r17.x
              mad r17.x, -r17.x, l(0.00006104), l(0.999500)
              iadd r17.y, r24.w, r36.w
              utof r43.z, r17.y
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.x, r43.xyzx, t13.xxxx, s13, r17.x
              mul r17.x, r32.w, r17.x
              if_nz r9.y
                dp4 r17.y, r27.xyzw, r18.xyzw
                dp4 r17.z, r28.xyzw, r18.xyzw
                frc r14.xy, r17.yzyy
                sample_l_indexable(texture2darray)(float,float,float,float) r18.xyz, r14.xyzx, t20.xyzw, s2, l(0.000000)
                add r18.xyz, r18.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                mad r18.xyz, r6.xxxx, r18.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r43.xyz, r31.wwww, r41.xyzx
                mul r43.xyz, r17.xxxx, r43.xyzx
                mul r18.xyz, r18.xyzx, r43.xyzx
              else 
                mul r43.xyz, r31.wwww, r41.xyzx
                mul r18.xyz, r17.xxxx, r43.xyzx
              endif 
              mul_sat r6.w, r30.w, l(0.000500)
              sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r6.yzwy, t2.xyzw, s0, l(0.000000)
              mul r17.xyz, r41.xyzx, r17.xyzx
              mul r17.xyz, r31.wwww, r17.xyzx
              mul r17.xyz, r39.zzzz, r17.xyzx
              mul r17.xyz, r32.wwww, r17.xyzx
              mad r17.xyz, r18.xyzx, r11.xyzx, r17.xyzx
              add r18.xyz, r15.xyzx, r17.xyzx
              dp3 r6.w, l(0.299000, 0.587000, 0.114000, 0.000000), r38.xyzx
              dp3 r31.w, l(0.299000, 0.587000, 0.114000, 0.000000), r17.xyzx
              max r32.w, r6.w, r31.w
              min r6.w, r6.w, r31.w
              div r6.w, r6.w, r32.w
              lt r6.w, r6.w, l(0.800000)
              if_nz r6.w
                mad r6.w, r8.y, r10.x, r9.x
                mul r19.xyz, r1.xyzx, r6.wwww
                mad r31.w, r1.z, r6.w, r40.w
                mul r31.w, r31.w, -r40.z
                exp r31.w, r31.w
                min r31.w, r31.w, l(1.000000)
                mul r31.w, r31.w, r40.y
                min r31.w, r10.y, r31.w
                mul r41.xyz, r31.wwww, r37.xyzx
                mul r41.xyz, r6.wwww, -r41.xyzx
                exp r41.xyz, r41.xyzx
                mul r41.xyz, r39.yyyy, r41.xyzx
                ge r43.xyzw, r3.xyzw, r6.wwww
                movc r32.w, r43.w, r4.z, r4.w
                movc r32.w, r43.z, r4.y, r32.w
                movc r32.w, r43.y, r4.x, r32.w
                movc r32.w, r43.x, l(1.000000), r32.w
                mad r20.xyz, r1.xyzx, r6.wwww, cb8[5].xyzx
                dp3 r6.w, r20.xyzx, cb8[6].xyzx
                add r6.w, r6.w, cb8[6].w
                mul r6.w, r6.w, l(0.003000)
                max r6.w, r6.w, l(1.000000)
                min r6.w, r6.w, l(2.000000)
                ftou r6.w, r6.w
                dp4 r36.w, r19.xyzw, r33.xyzw
                dp4 r37.w, r19.xyzw, r34.xyzw
                dp4 r19.x, r19.xyzw, r35.xyzw
                iadd r19.y, r6.w, l(-1)
                mul r43.xyz, r30.xyzx, icb[r19.y + 0].xxxx
                mad r43.xyz, icb[r19.y + 0].yyyy, r31.xyzx, r43.xyzx
                add r45.x, r36.w, -r43.x
                add r45.y, r37.w, -r43.y
                mul r19.yz, r43.zzzz, r45.xxyx
                mad r43.xy, r19.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                add r19.x, -r2.z, r19.x
                mad r19.x, -r19.x, l(0.00006104), l(0.999500)
                iadd r6.w, r24.w, r6.w
                utof r43.z, r6.w
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r6.w, r43.xyzx, t13.xxxx, s13, r19.x
                mul r6.w, r32.w, r6.w
                if_nz r9.y
                  dp4 r19.x, r27.xyzw, r20.xyzw
                  dp4 r19.y, r28.xyzw, r20.xyzw
                  frc r14.xy, r19.xyxx
                  sample_l_indexable(texture2darray)(float,float,float,float) r19.xyz, r14.xyzx, t20.xyzw, s2, l(0.000000)
                  add r19.xyz, r19.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
                  mad r19.xyz, r6.xxxx, r19.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r20.xyz, r31.wwww, r41.xyzx
                  mul r20.xyz, r6.wwww, r20.xyzx
                  mul r19.xyz, r19.xyzx, r20.xyzx
                else 
                  mul r20.xyz, r31.wwww, r41.xyzx
                  mul r19.xyz, r6.wwww, r20.xyzx
                endif 
                mul r19.xyz, r11.xyzx, r19.xyzx
              else 
                add r20.xyz, r17.xyzx, r38.xyzx
                mul r19.xyz, r20.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
              endif 
              add r15.xyz, r18.xyzx, r19.xyzx
              iadd r9.z, r9.z, l(2)
              mov r38.xyz, r17.xyzx
              mov r9.x, r30.w
            endloop 
            mul r6.x, r10.z, r36.z
            mul r8.xyz, r6.xxxx, r15.xyzx
            mad r32.xyz, r8.xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.000000), r32.xyzx
            break 
            default 
            break 
          endswitch 
          add r6.x, r36.x, r29.w
          min r6.x, r26.w, r6.x
          mul r6.w, r40.y, l(100.000000)
          mad r8.x, -r36.y, r36.y, l(1.000000)
          mul r8.x, r8.x, l(0.07957747)
          mov r9.xyz, l(0,0,0,0)
          mov r5.z, r7.x
          loop 
            ult r8.y, r7.y, r5.z
            breakc_nz r8.y
            ld_indexable(texture2darray)(uint,uint,uint,uint) r8.y, r5.xyzw, t3.yxzw
            ishl r8.z, r5.z, l(5)
            mov r38.xyz, r9.xyzx
            mov r38.w, r8.y
            loop 
              breakc_z r38.w
              firstbit_lo r10.x, r38.w
              ishl r10.y, l(1), r10.x
              and r10.z, r10.y, r38.w
              if_nz r10.z
                xor r38.w, r10.y, r38.w
                iadd r23.x, r8.z, r10.x
                ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r10.xyz, r23.x, l(12), t11.xyzx
                dp3 r10.x, r10.xyzx, r10.xyzx
                ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r11.xyz, r23.x, l(0), t11.xyzx
                dp3 r10.y, -r11.xyzx, r1.xyzx
                dp3 r10.z, -r11.xyzx, -r11.xyzx
                add r10.x, -r10.x, r10.z
                mad r10.x, r10.y, r10.y, -r10.x
                lt r10.z, l(0.000000), r10.x
                sqrt r10.x, r10.x
                add r11.x, -r10.x, -r10.y
                add r10.x, r10.x, -r10.y
                min r10.y, r10.x, r11.x
                max r10.x, r10.x, r11.x
                max r10.xy, r6.xxxx, r10.xyxx
                min r10.xy, r26.wwww, r10.xyxx
                add r11.x, r10.y, l(0.000001)
                lt r11.x, r11.x, r10.x
                and r10.z, r10.z, r11.x
                if_z r10.z
                  mov r11.xyz, l(0,0,0,0)
                endif 
                if_nz r10.z
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r23.x, l(68), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r23.x, l(84), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r45.xyzw, r23.x, l(116), t12.xyzw
                  mul r21.xyz, r1.xyzx, r10.yyyy
                  mul r22.xyz, r1.xyzx, r10.xxxx
                  dp4 r46.x, r41.xyzw, r21.xyzw
                  dp4 r46.y, r43.xyzw, r21.xyzw
                  dp4 r46.w, r45.xyzw, r21.xyzw
                  dp4 r41.x, r41.xyzw, r22.xyzw
                  dp4 r41.y, r43.xyzw, r22.xyzw
                  dp4 r41.w, r45.xyzw, r22.xyzw
                  add r12.xy, r46.xyxx, r46.wwww
                  add r14.xy, -r46.xyxx, r46.wwww
                  add r17.xy, r41.xyxx, r41.wwww
                  add r18.xy, -r41.xyxx, r41.wwww
                  lt r19.xy, r12.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
                  add r20.xy, r12.xyxx, -r17.xyxx
                  div r20.xy, r12.xyxx, r20.xyxx
                  max r10.z, r20.x, l(0.000000)
                  and r10.z, r10.z, r19.x
                  lt r19.xz, r14.xxyx, l(0.000000, 0.000000, 0.000000, 0.000000)
                  add r20.xz, r14.xxyx, -r18.xxyx
                  div r20.xz, r14.xxyx, r20.xxzx
                  max r12.z, r10.z, r20.x
                  movc r10.z, r19.x, r12.z, r10.z
                  max r12.z, r20.y, r10.z
                  movc r10.z, r19.y, r12.z, r10.z
                  max r12.z, r20.z, r10.z
                  movc r10.z, r19.z, r12.z, r10.z
                  lt r19.xy, r17.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
                  add r12.xy, -r12.xyxx, r17.xyxx
                  div r12.xy, r17.xyxx, r12.xyxx
                  max r12.x, r12.x, l(0.000000)
                  and r12.x, r12.x, r19.x
                  lt r17.xy, r18.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
                  add r14.xy, -r14.xyxx, r18.xyxx
                  div r14.xy, r18.xyxx, r14.xyxx
                  max r12.z, r12.x, r14.x
                  movc r12.x, r17.x, r12.z, r12.x
                  max r12.y, r12.y, r12.x
                  movc r12.x, r19.y, r12.y, r12.x
                  max r12.y, r14.y, r12.x
                  movc r12.x, r17.y, r12.y, r12.x
                  min r10.z, r10.z, l(1.000000)
                  min r12.x, r12.x, l(1.000000)
                  add r12.x, -r12.x, l(1.000000)
                  add r12.y, r10.z, l(0.000001)
                  lt r12.y, r12.y, r12.x
                  if_nz r12.y
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r23.x, l(0), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xy, r23.x, l(16), t12.xyxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r45.xyzw, r23.x, l(28), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.yz, r23.x, l(44), t12.xxyx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r47.xyzw, r23.x, l(100), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r48.xyzw, r23.x, l(132), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r49.xyzw, r23.x, l(172), t12.yzwx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r50.xyzw, r23.x, l(188), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r51.xyzw, r23.x, l(204), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r52.xyzw, r23.x, l(220), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r17.x, r23.x, l(236), t12.xxxx
                    iadd r17.yz, r0.xxyx, r23.xxyx
                    utof r17.yz, r17.yyzy
                    dp2 r17.y, r17.yzyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
                    frc r17.y, r17.y
                    mul r17.y, r17.y, l(52.982918)
                    frc r17.y, r17.y
                    ubfe r17.z, l(3), l(27), r45.x
                    dp4 r46.z, r47.xyzw, r21.xyzw
                    dp4 r41.z, r47.xyzw, r22.xyzw
                    add r10.x, -r10.y, r10.x
                    mad r18.x, r10.z, r10.x, r10.y
                    add r18.x, r18.x, l(-1000.000000)
                    mul_sat r18.x, r18.x, l(0.000500)
                    add r18.x, -r18.x, l(1.000000)
                    mul r18.x, r0.w, r18.x
                    round_ni r18.x, r18.x
                    max r18.x, r18.x, l(2.000000)
                    ftou r18.x, r18.x
                    add r18.y, -r10.z, r12.x
                    utof r18.z, r18.x
                    div r18.y, r18.y, r18.z
                    mad r12.x, -r18.y, l(0.500000), r12.x
                    mad r10.z, r18.y, l(0.500000), r10.z
                    add r18.y, -r10.z, r12.x
                    div r18.y, r18.y, r18.z
                    add r17.y, r17.y, l(-0.500000)
                    mul r17.y, r17.y, r18.y
                    mad r10.z, r17.y, l(1.500000), r10.z
                    mad r12.x, r17.y, l(1.500000), r12.x
                    mad r17.y, r10.z, r10.x, r10.y
                    mad r10.x, r12.x, r10.x, r10.y
                    div r10.y, l(1.000000, 1.000000, 1.000000, 1.000000), r18.z
                    add r41.xyzw, -r46.xyzw, r41.xyzw
                    mad r47.xyzw, r41.xyzw, r12.xxxx, r46.xyzw
                    mad r41.xyzw, r41.xyzw, r10.zzzz, r46.xyzw
                    div r41.xyz, r41.xyzx, r41.wwww
                    div r47.xyz, r47.xyzx, r47.wwww
                    and r10.z, r45.x, l(0x0000ffff)
                    add r10.x, -r17.y, r10.x
                    mul r12.x, r10.y, r10.x
                    add r46.xyzw, -r41.xyzw, r47.xyzw
                    mul r47.xyzw, r10.yyyy, r46.xyzw
                    mad_sat r18.yz, r41.xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
                    mad r19.xy, r18.yzyy, r48.xzxx, r48.ywyy
                    utof r19.z, r10.z
                    ine r10.z, r17.z, l(1)
                    if_nz r10.z
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r17.z, r19.xyzx, t9.xxxx, s13, r41.z
                    else 
                      mov r17.z, l(1.000000)
                    endif 
                    ge r53.xyzw, r3.xyzw, r17.yyyy
                    movc r18.y, r53.w, r4.z, r4.w
                    movc r18.y, r53.z, r4.y, r18.y
                    movc r18.y, r53.y, r4.x, r18.y
                    movc r18.y, r53.x, l(1.000000), r18.y
                    mul r18.y, r17.z, r18.y
                    lt r18.z, l(0.000100), r18.y
                    if_nz r18.z
                      and r18.z, r17.x, l(255)
                      ushr r20.x, r45.x, l(31)
                      ine r20.x, r20.x, l(0)
                      ult r20.y, l(0), r18.z
                      and r20.x, r20.y, r20.x
                      if_nz r20.x
                        mov r24.xy, r41.xyxx
                        dp3 r20.x, r51.yzwy, r24.xyzx
                        dp3 r20.y, r52.xyzx, r24.xyzx
                        frc r21.xy, r20.xyxx
                        iadd r18.z, r18.z, l(-1)
                        utof r21.z, r18.z
                        sample_l_indexable(texture2darray)(float,float,float,float) r20.xyz, r21.xyzx, t20.xyzw, s2, l(0.000000)
                      else 
                        mov r20.xyz, l(1.000000,1.000000,1.000000,0)
                      endif 
                      mad r18.z, r17.y, r1.z, r40.w
                      mul r18.z, r18.z, -r40.z
                      exp r18.z, r18.z
                      min r18.z, r18.z, l(1.000000)
                      mul r18.z, r18.z, r40.y
                      min r18.z, r6.w, r18.z
                      mad r21.xyz, -r17.yyyy, r1.xyzx, r43.xyzx
                      mul r22.x, r12.z, r12.z
                      dp3 r22.y, r21.xyzx, r21.xyzx
                      div r22.x, r22.x, r22.y
                      min r22.x, r22.x, l(1.000000)
                      mad_sat r22.z, r41.w, r45.y, r45.z
                      mad_sat r23.x, r41.w, r45.w, r12.y
                      mul r24.x, r22.z, r22.z
                      mad r22.z, r22.z, l(-2.000000), l(3.000000)
                      mul r22.z, r22.z, r24.x
                      mul r22.x, r22.z, r22.x
                      mul r22.z, r23.x, r23.x
                      mad r23.x, r23.x, l(-2.000000), l(3.000000)
                      mul r22.z, r22.z, r23.x
                      mul r22.x, r22.z, r22.x
                      lt r22.z, r49.w, l(0.00048828)
                      if_nz r22.z
                        mov r24.x, r50.w
                        mov r24.y, r51.x
                        mad_sat r24.xy, |r41.xyxx|, r50.yzyy, r24.xyxx
                        mul r36.xw, r24.xxxy, r24.xxxy
                        mad r24.xy, r24.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
                        mul r24.xy, r24.xyxx, r36.xwxx
                        mul r22.z, r24.y, r24.x
                      else 
                        mov r53.xyz, r49.xyzx
                        mov r53.w, r50.x
                        mul_sat r53.xyzw, |r41.yyxx|, r53.xyzw
                        log r53.xyzw, r53.xyzw
                        mul r53.xyzw, r50.wwww, r53.xyzw
                        exp r53.xyzw, r53.xyzw
                        add r24.xy, r53.zwzz, r53.xyxx
                        log r24.xy, r24.xyxx
                        mul r24.xy, r24.xyxx, r51.xxxx
                        exp r24.xy, r24.xyxx
                        mul r23.x, r24.x, r50.y
                        mad r24.x, r50.z, r24.y, l(-1.000000)
                        mad r23.x, r50.z, r24.y, -r23.x
                        div_sat r23.x, r24.x, r23.x
                        mul r24.x, r23.x, r23.x
                        mad r23.x, r23.x, l(-2.000000), l(3.000000)
                        mul r22.z, r23.x, r24.x
                      endif 
                      mul r22.x, r22.z, r22.x
                      mul r18.y, r18.y, r22.x
                      mul r39.xzw, r18.zzzz, r37.xxyz
                      rsq r22.x, r22.y
                      mul r21.xyz, r21.xyzx, r22.xxxx
                      dp3 r21.x, -r1.xyzx, r21.xyzx
                      max r21.x, r21.x, l(-1.000000)
                      min r21.x, r21.x, l(1.000000)
                      mad r21.x, r36.y, r21.x, l(1.000000)
                      max r21.x, r21.x, l(0.000001)
                      min r21.x, r21.x, l(2.000000)
                      mul r21.x, r21.x, r21.x
                      rcp r21.x, r21.x
                      mul r21.x, r8.x, r21.x
                      max r21.x, r21.x, l(0.000000)
                      min r21.x, r21.x, l(10000.000000)
                      sqrt r21.y, r22.y
                      add r21.y, r17.y, r21.y
                      mul r22.xyz, -r21.yyyy, r39.xzwx
                      exp r22.xyz, r22.xyzx
                      min r22.xyz, r22.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                      mul r22.xyz, r18.zzzz, r22.xyzx
                      mul r21.xyz, r21.xxxx, r22.xyzx
                      mul r21.xyz, r18.yyyy, r21.xyzx
                      mul r20.xyz, r20.xyzx, r21.xyzx
                    else 
                      mov r20.xyz, l(0,0,0,0)
                    endif 
                    and r17.x, r17.x, l(255)
                    ushr r18.y, r45.x, l(31)
                    ine r18.y, r18.y, l(0)
                    ult r18.z, l(0), r17.x
                    and r18.y, r18.z, r18.y
                    iadd r17.x, r17.x, l(-1)
                    utof r21.z, r17.x
                    mul r12.z, r12.z, r12.z
                    lt r17.x, r49.w, l(0.00048828)
                    mov r53.xyz, r49.xyzx
                    mov r53.w, r50.x
                    mov r54.xz, r50.wwww
                    mov r54.yw, r51.xxxx
                    mov r49.w, r50.x
                    mov r55.xyzw, r41.xyzw
                    mov r22.xyz, r20.xyzx
                    mov r18.z, r17.y
                    mov r23.x, r17.z
                    mov r24.x, l(0)
                    loop 
                      uge r24.y, r24.x, r18.x
                      breakc_nz r24.y
                      mad r24.y, r12.x, l(2.000000), r18.z
                      mad r56.xyzw, r47.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), r55.xyzw
                      if_nz r10.z
                        mad_sat r36.xw, r56.xxxy, l(0.500000, 0.000000, 0.000000, -0.500000), l(0.500000, 0.000000, 0.000000, 0.500000)
                        mad r19.xy, r36.xwxx, r48.xzxx, r48.ywyy
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r29.w, r19.xyzx, t9.xxxx, s13, r56.z
                      else 
                        mov r29.w, l(1.000000)
                      endif 
                      ge r57.xyzw, r3.xyzw, r24.yyyy
                      movc r30.w, r57.w, r4.z, r4.w
                      movc r30.w, r57.z, r4.y, r30.w
                      movc r30.w, r57.y, r4.x, r30.w
                      movc r30.w, r57.x, l(1.000000), r30.w
                      mul r30.w, r29.w, r30.w
                      lt r31.w, l(0.000100), r30.w
                      if_nz r31.w
                        if_nz r18.y
                          mov r25.xy, r56.xyxx
                          dp3 r31.w, r51.yzwy, r25.xyzx
                          dp3 r25.x, r52.xyzx, r25.xyzx
                          frc r21.x, r31.w
                          frc r21.y, r25.x
                          sample_l_indexable(texture2darray)(float,float,float,float) r39.xzw, r21.xyzx, t20.xwyz, s2, l(0.000000)
                        else 
                          mov r39.xzw, l(1.000000,0,1.000000,1.000000)
                        endif 
                        mad r25.x, r24.y, r1.z, r40.w
                        mul r25.x, r25.x, -r40.z
                        exp r25.x, r25.x
                        min r25.x, r25.x, l(1.000000)
                        mul r25.x, r25.x, r40.y
                        min r25.x, r6.w, r25.x
                        mad r57.xyz, -r24.yyyy, r1.xyzx, r43.xyzx
                        dp3 r25.y, r57.xyzx, r57.xyzx
                        div r31.w, r12.z, r25.y
                        min r31.w, r31.w, l(1.000000)
                        mad_sat r32.w, r56.w, r45.y, r45.z
                        mad_sat r36.x, r56.w, r45.w, r12.y
                        mul r36.w, r32.w, r32.w
                        mad r32.w, r32.w, l(-2.000000), l(3.000000)
                        mul r32.w, r32.w, r36.w
                        mul r31.w, r31.w, r32.w
                        mul r32.w, r36.x, r36.x
                        mad r36.x, r36.x, l(-2.000000), l(3.000000)
                        mul r32.w, r32.w, r36.x
                        mul r31.w, r31.w, r32.w
                        if_nz r17.x
                          mad_sat r36.xw, |r56.xxxy|, r50.yyyz, r54.xxxy
                          mul r58.xy, r36.xwxx, r36.xwxx
                          mad r36.xw, r36.xxxw, l(-2.000000, 0.000000, 0.000000, -2.000000), l(3.000000, 0.000000, 0.000000, 3.000000)
                          mul r36.xw, r36.xxxw, r58.xxxy
                          mul r32.w, r36.w, r36.x
                        else 
                          mul_sat r58.xyzw, r53.xyzw, |r56.yyxx|
                          log r58.xyzw, r58.xyzw
                          mul r58.xyzw, r50.wwww, r58.xyzw
                          exp r58.xyzw, r58.xyzw
                          add r36.xw, r58.zzzw, r58.xxxy
                          log r36.xw, r36.xxxw
                          mul r36.xw, r36.xxxw, r51.xxxx
                          exp r36.xw, r36.xxxw
                          mul r36.x, r36.x, r50.y
                          mad r37.w, r50.z, r36.w, l(-1.000000)
                          mad r36.x, r50.z, r36.w, -r36.x
                          div_sat r36.x, r37.w, r36.x
                          mul r36.w, r36.x, r36.x
                          mad r36.x, r36.x, l(-2.000000), l(3.000000)
                          mul r32.w, r36.x, r36.w
                        endif 
                        mul r31.w, r31.w, r32.w
                        mul r30.w, r30.w, r31.w
                        mul r58.xyz, r25.xxxx, r37.xyzx
                        rsq r31.w, r25.y
                        mul r57.xyz, r31.wwww, r57.xyzx
                        dp3 r31.w, -r1.xyzx, r57.xyzx
                        max r31.w, r31.w, l(-1.000000)
                        min r31.w, r31.w, l(1.000000)
                        mad r31.w, r36.y, r31.w, l(1.000000)
                        max r31.w, r31.w, l(0.000001)
                        min r31.w, r31.w, l(2.000000)
                        mul r31.w, r31.w, r31.w
                        rcp r31.w, r31.w
                        mul r31.w, r8.x, r31.w
                        max r31.w, r31.w, l(0.000000)
                        min r31.w, r31.w, l(10000.000000)
                        sqrt r25.y, r25.y
                        add r25.y, r24.y, r25.y
                        mul r57.xyz, -r25.yyyy, r58.xyzx
                        exp r57.xyz, r57.xyzx
                        min r57.xyz, r57.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                        mul r57.xyz, r25.xxxx, r57.xyzx
                        mul r57.xyz, r31.wwww, r57.xyzx
                        mul r57.xyz, r30.wwww, r57.xyzx
                        mul r39.xzw, r39.xxzw, r57.xxyz
                      else 
                        mov r39.xzw, l(0,0,0,0)
                      endif 
                      add r57.xyz, r22.xyzx, r39.xzwx
                      add r25.x, r23.x, -r29.w
                      lt r25.x, l(0.250000), |r25.x|
                      if_nz r25.x
                        mad r25.x, r10.x, r10.y, r18.z
                        mad r58.xyzw, r46.xyzw, r10.yyyy, r55.xyzw
                        if_nz r10.z
                          mad_sat r36.xw, r58.xxxy, l(0.500000, 0.000000, 0.000000, -0.500000), l(0.500000, 0.000000, 0.000000, 0.500000)
                          mad r19.xy, r36.xwxx, r48.xzxx, r48.ywyy
                          sample_c_lz_indexable(texture2darray)(float,float,float,float) r19.x, r19.xyzx, t9.xxxx, s13, r58.z
                        else 
                          mov r19.x, l(1.000000)
                        endif 
                        ge r59.xyzw, r3.xyzw, r25.xxxx
                        movc r19.y, r59.w, r4.z, r4.w
                        movc r19.y, r59.z, r4.y, r19.y
                        movc r19.y, r59.y, r4.x, r19.y
                        movc r19.y, r59.x, l(1.000000), r19.y
                        mul r19.x, r19.y, r19.x
                        lt r19.y, l(0.000100), r19.x
                        if_nz r19.y
                          if_nz r18.y
                            mov r26.xy, r58.xyxx
                            dp3 r19.y, r51.yzwy, r26.xyzx
                            dp3 r25.y, r52.xyzx, r26.xyzx
                            frc r21.x, r19.y
                            frc r21.y, r25.y
                            sample_l_indexable(texture2darray)(float,float,float,float) r59.xyz, r21.xyzx, t20.xyzw, s2, l(0.000000)
                          else 
                            mov r59.xyz, l(1.000000,1.000000,1.000000,0)
                          endif 
                          mad r19.y, r25.x, r1.z, r40.w
                          mul r19.y, r19.y, -r40.z
                          exp r19.y, r19.y
                          min r19.y, r19.y, l(1.000000)
                          mul r19.y, r19.y, r40.y
                          min r19.y, r6.w, r19.y
                          mad r60.xyz, -r25.xxxx, r1.xyzx, r43.xyzx
                          dp3 r21.x, r60.xyzx, r60.xyzx
                          div r21.y, r12.z, r21.x
                          min r21.y, r21.y, l(1.000000)
                          mad_sat r25.y, r58.w, r45.y, r45.z
                          mad_sat r26.x, r58.w, r45.w, r12.y
                          mul r26.y, r25.y, r25.y
                          mad r25.y, r25.y, l(-2.000000), l(3.000000)
                          mul r25.y, r25.y, r26.y
                          mul r21.y, r21.y, r25.y
                          mul r25.y, r26.x, r26.x
                          mad r26.x, r26.x, l(-2.000000), l(3.000000)
                          mul r25.y, r25.y, r26.x
                          mul r21.y, r21.y, r25.y
                          if_nz r17.x
                            mad_sat r26.xy, |r58.xyxx|, r50.yzyy, r54.zwzz
                            mul r36.xw, r26.xxxy, r26.xxxy
                            mad r26.xy, r26.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
                            mul r26.xy, r26.xyxx, r36.xwxx
                            mul r25.y, r26.y, r26.x
                          else 
                            mul_sat r58.xyzw, r49.xyzw, |r58.yyxx|
                            log r58.xyzw, r58.xyzw
                            mul r58.xyzw, r50.wwww, r58.xyzw
                            exp r58.xyzw, r58.xyzw
                            add r26.xy, r58.zwzz, r58.xyxx
                            log r26.xy, r26.xyxx
                            mul r26.xy, r26.xyxx, r51.xxxx
                            exp r26.xy, r26.xyxx
                            mul r26.x, r26.x, r50.y
                            mad r30.w, r50.z, r26.y, l(-1.000000)
                            mad r26.x, r50.z, r26.y, -r26.x
                            div_sat r26.x, r30.w, r26.x
                            mul r26.y, r26.x, r26.x
                            mad r26.x, r26.x, l(-2.000000), l(3.000000)
                            mul r25.y, r26.x, r26.y
                          endif 
                          mul r21.y, r21.y, r25.y
                          mul r19.x, r19.x, r21.y
                          mul r58.xyz, r19.yyyy, r37.xyzx
                          rsq r21.y, r21.x
                          mul r60.xyz, r21.yyyy, r60.xyzx
                          dp3 r21.y, -r1.xyzx, r60.xyzx
                          max r21.y, r21.y, l(-1.000000)
                          min r21.y, r21.y, l(1.000000)
                          mad r21.y, r36.y, r21.y, l(1.000000)
                          max r21.y, r21.y, l(0.000001)
                          min r21.y, r21.y, l(2.000000)
                          mul r21.y, r21.y, r21.y
                          rcp r21.y, r21.y
                          mul r21.y, r8.x, r21.y
                          max r21.y, r21.y, l(0.000000)
                          min r21.y, r21.y, l(10000.000000)
                          sqrt r21.x, r21.x
                          add r21.x, r25.x, r21.x
                          mul r58.xyz, -r21.xxxx, r58.xyzx
                          exp r58.xyz, r58.xyzx
                          min r58.xyz, r58.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                          mul r58.xyz, r19.yyyy, r58.xyzx
                          mul r58.xyz, r21.yyyy, r58.xyzx
                          mul r58.xyz, r19.xxxx, r58.xyzx
                          mul r39.xzw, r59.xxyz, r58.xxyz
                        else 
                          mov r39.xzw, l(0,0,0,0)
                        endif 
                      endif 
                      add r22.xyz, r39.xzwx, r57.xyzx
                      iadd r24.x, r24.x, l(2)
                      mov r55.xyzw, r56.xyzw
                      mov r18.z, r24.y
                      mov r23.x, r29.w
                    endloop 
                    mul r10.x, r39.y, r12.x
                    mul r10.x, r36.z, r10.x
                    mul r10.xyz, r10.xxxx, r22.xyzx
                    mov r14.z, r43.w
                    mul r12.xyz, r14.zxyz, r52.wwww
                    mul r11.xyz, r10.xyzx, r12.xyzx
                  else 
                    mov r11.xyz, l(0,0,0,0)
                  endif 
                endif 
                add r38.xyz, r11.xyzx, r38.xyzx
              endif 
            endloop 
            mov r9.xyz, r38.xyzx
            iadd r5.z, r5.z, l(1)
          endloop 
          add r10.xyz, r9.xyzx, r32.xyzx
          mov r11.xyz, l(0,0,0,0)
          mov r16.z, r7.z
          loop 
            ult r5.z, r7.w, r16.z
            breakc_nz r5.z
            ld_indexable(texture2darray)(uint,uint,uint,uint) r5.z, r16.xyzw, t4.yzxw
            ishl r8.y, r16.z, l(5)
            mov r41.xyz, r11.xyzx
            mov r41.w, r5.z
            loop 
              breakc_z r41.w
              firstbit_lo r8.z, r41.w
              ishl r12.x, l(1), r8.z
              and r12.y, r12.x, r41.w
              if_nz r12.y
                xor r41.w, r12.x, r41.w
                iadd r8.z, r8.z, r8.y
                ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r12.xyz, r8.z, l(12), t11.xyzx
                max r12.y, r12.z, r12.y
                max r12.x, r12.y, r12.x
                ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r14.xyz, r8.z, l(0), t11.xyzx
                dp3 r12.y, -r14.xyzx, r1.xyzx
                dp3 r12.z, -r14.xyzx, -r14.xyzx
                mad r12.x, -r12.x, r12.x, r12.z
                mad r12.x, r12.y, r12.y, -r12.x
                lt r12.z, l(0.000000), r12.x
                sqrt r12.x, r12.x
                add r14.x, -r12.x, -r12.y
                add r12.x, r12.x, -r12.y
                min r12.y, r12.x, r14.x
                max r12.x, r12.x, r14.x
                max r12.xy, r6.xxxx, r12.xyxx
                min r12.xy, r26.wwww, r12.xyxx
                add r14.x, r12.y, l(0.000001)
                lt r14.x, r14.x, r12.x
                and r12.z, r12.z, r14.x
                if_z r12.z
                  mov r14.xyz, l(0,0,0,0)
                endif 
                if_nz r12.z
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r8.z, l(0), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r17.xy, r8.z, l(16), t12.xyxx
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r45.xyzw, r8.z, l(32), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.z, r8.z, l(48), t12.xxxx
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r18.xy, r8.z, l(104), t12.xyxx
                  and r8.z, r18.y, l(31)
                  add r18.y, r12.y, l(-1000.000000)
                  mul_sat r18.y, r18.y, l(0.000500)
                  add r18.y, -r18.y, l(1.000000)
                  utof r8.z, r8.z
                  mul r8.z, r18.y, r8.z
                  round_ni r8.z, r8.z
                  max r8.z, r8.z, l(2.000000)
                  ftou r8.z, r8.z
                  utof r18.y, r8.z
                  div r18.y, l(1.000000, 1.000000, 1.000000, 1.000000), r18.y
                  add r18.z, -r12.y, r12.x
                  mul r18.z, r18.y, r18.z
                  mad r12.x, -r18.z, l(0.500000), r12.x
                  mad r12.y, r18.z, l(0.500000), r12.y
                  add r12.x, -r12.y, r12.x
                  mul r18.z, r18.y, r12.x
                  mul r12.z, r12.z, r12.z
                  mov r19.xyz, l(0,0,0,0)
                  mov r20.x, r12.y
                  mov r20.y, l(0)
                  loop 
                    uge r20.z, r20.y, r8.z
                    breakc_nz r20.z
                    mad r20.x, r12.x, r18.y, r20.x
                    mad r21.xyz, -r1.xyzx, r20.xxxx, r43.xyzx
                    dp3 r20.z, r21.xyzx, r21.xyzx
                    sqrt r23.x, r20.z
                    div r24.x, r12.z, r20.z
                    min r24.x, r24.x, l(1.000000)
                    mad_sat r25.xy, r23.xxxx, r45.xzxx, r45.ywyy
                    mul r26.xy, r25.xyxx, r25.xyxx
                    mad r25.xy, r25.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
                    mul r25.xy, r25.xyxx, r26.xyxx
                    mul r24.x, r24.x, r25.x
                    mul r24.x, r25.y, r24.x
                    lt r24.y, l(0.000000), r24.x
                    if_nz r24.y
                      mad r24.y, r1.z, r20.x, r40.w
                      mul r24.y, r24.y, -r40.z
                      exp r24.y, r24.y
                      min r24.y, r24.y, l(1.000000)
                      mul r24.y, r24.y, r40.y
                      min r24.y, r6.w, r24.y
                      ge r46.xyzw, r3.xyzw, r20.xxxx
                      movc r25.x, r46.w, r4.z, r4.w
                      movc r25.x, r46.z, r4.y, r25.x
                      movc r25.x, r46.y, r4.x, r25.x
                      movc r25.x, r46.x, l(1.000000), r25.x
                      mul r24.x, r24.x, r25.x
                      mul r39.xzw, r24.yyyy, r37.xxyz
                      rsq r20.z, r20.z
                      mul r21.xyz, r20.zzzz, r21.xyzx
                      dp3 r20.z, -r1.xyzx, r21.xyzx
                      max r20.z, r20.z, l(-1.000000)
                      min r20.z, r20.z, l(1.000000)
                      mad r20.z, r36.y, r20.z, l(1.000000)
                      max r20.z, r20.z, l(0.000001)
                      min r20.z, r20.z, l(2.000000)
                      mul r20.z, r20.z, r20.z
                      rcp r20.z, r20.z
                      mul r20.z, r8.x, r20.z
                      max r20.z, r20.z, l(0.000000)
                      min r20.z, r20.z, l(10000.000000)
                      add r21.x, r20.x, r23.x
                      mul r21.xyz, -r21.xxxx, r39.xzwx
                      exp r21.xyz, r21.xyzx
                      min r21.xyz, r21.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                      mul r21.xyz, r24.yyyy, r21.xyzx
                      mul r21.xyz, r20.zzzz, r21.xyzx
                      mul r21.xyz, r24.xxxx, r21.xyzx
                    else 
                      mov r21.xyz, l(0,0,0,0)
                    endif 
                    add r19.xyz, r19.xyzx, r21.xyzx
                    iadd r20.y, r20.y, l(1)
                  endloop 
                  mul r8.z, r39.y, r18.z
                  mul r8.z, r36.z, r8.z
                  mul r12.xyz, r8.zzzz, r19.xyzx
                  mov r17.z, r43.w
                  mul r17.xyz, r17.zxyz, r18.xxxx
                  mul r14.xyz, r12.xyzx, r17.xyzx
                endif 
                add r41.xyz, r14.xyzx, r41.xyzx
              endif 
            endloop 
            mov r11.xyz, r41.xyzx
            iadd r16.z, r16.z, l(1)
          endloop 
          add r32.xyz, r10.xyzx, r11.xyzx
        endif 
      endif 
    endif 
  endif 
  iadd r25.w, r25.w, l(1)
endloop 
mov o0.xyz, r32.xyzx
mov o0.w, l(0)
ret 
// Approximately 1501 instruction slots used
