//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:43:55 2021
//
//
// Buffer Definitions: 
//
// cbuffer PostFxCBuffer
// {
//
//   float4 postFxControl0;             // Offset:    0 Size:    16 [unused]
//   float4 postFxControl1;             // Offset:   16 Size:    16 [unused]
//   float4 postFxControl2;             // Offset:   32 Size:    16 [unused]
//   float4 postFxControl3;             // Offset:   48 Size:    16 [unused]
//   float4 postFxControl4;             // Offset:   64 Size:    16
//   float4 postFxControl5;             // Offset:   80 Size:    16
//   float4 postFxControl6;             // Offset:   96 Size:    16
//   float4 postFxControl7;             // Offset:  112 Size:    16
//   float4 postFxControl8;             // Offset:  128 Size:    16 [unused]
//   float4 postFxControl9;             // Offset:  144 Size:    16 [unused]
//   float4 postFxControlA;             // Offset:  160 Size:    16
//   float4 postFxControlB;             // Offset:  176 Size:    16
//   float4 postFxControlC;             // Offset:  192 Size:    16
//   float4 postFxControlD;             // Offset:  208 Size:    16
//   float4 postFxControlE;             // Offset:  224 Size:    16
//   float4 postFxControlF;             // Offset:  240 Size:    16
//   float4 postFxConst00;              // Offset:  256 Size:    16
//   float4 postFxConst01;              // Offset:  272 Size:    16
//   float4 postFxConst02;              // Offset:  288 Size:    16
//   float4 postFxConst03;              // Offset:  304 Size:    16
//   float4 postFxConst04;              // Offset:  320 Size:    16 [unused]
//   float4 postFxConst05;              // Offset:  336 Size:    16 [unused]
//   float4 postFxConst06;              // Offset:  352 Size:    16 [unused]
//   float4 postFxConst07;              // Offset:  368 Size:    16 [unused]
//   float4 postFxConst08;              // Offset:  384 Size:    16 [unused]
//   float4 postFxConst09;              // Offset:  400 Size:    16 [unused]
//   float4 postFxConst10;              // Offset:  416 Size:    16 [unused]
//   float4 postFxConst11;              // Offset:  432 Size:    16 [unused]
//   float4 postFxConst12;              // Offset:  448 Size:    16 [unused]
//   float4 postFxConst13;              // Offset:  464 Size:    16 [unused]
//   float4 postFxConst14;              // Offset:  480 Size:    16 [unused]
//   float4 postFxConst15;              // Offset:  496 Size:    16 [unused]
//   float4 postFxConst16;              // Offset:  512 Size:    16 [unused]
//   float4 postFxConst17;              // Offset:  528 Size:    16 [unused]
//   float4 postFxConst18;              // Offset:  544 Size:    16 [unused]
//   float4 postFxConst19;              // Offset:  560 Size:    16 [unused]
//   float4 postFxConst20;              // Offset:  576 Size:    16 [unused]
//   float4 postFxConst21;              // Offset:  592 Size:    16 [unused]
//   float4 postFxConst22;              // Offset:  608 Size:    16 [unused]
//   float4 postFxConst23;              // Offset:  624 Size:    16 [unused]
//   float4 postFxConst24;              // Offset:  640 Size:    16 [unused]
//   float4 postFxConst25;              // Offset:  656 Size:    16 [unused]
//   float4 postFxConst26;              // Offset:  672 Size:    16 [unused]
//   float4 postFxConst27;              // Offset:  688 Size:    16 [unused]
//   float4 postFxConst28;              // Offset:  704 Size:    16 [unused]
//   float4 postFxConst29;              // Offset:  720 Size:    16 [unused]
//   float4 postFxConst30;              // Offset:  736 Size:    16 [unused]
//   float4 postFxConst31;              // Offset:  752 Size:    16 [unused]
//   float4 postFxConst32;              // Offset:  768 Size:    16 [unused]
//   float4 postFxConst33;              // Offset:  784 Size:    16 [unused]
//   float4 postFxConst34;              // Offset:  800 Size:    16 [unused]
//   float4 postFxConst35;              // Offset:  816 Size:    16 [unused]
//   float4 postFxConst36;              // Offset:  832 Size:    16 [unused]
//   float4 postFxConst37;              // Offset:  848 Size:    16 [unused]
//   float4 postFxConst38;              // Offset:  864 Size:    16 [unused]
//   float4 postFxConst39;              // Offset:  880 Size:    16 [unused]
//   float4 postFxConst40;              // Offset:  896 Size:    16 [unused]
//   float4 postFxConst41;              // Offset:  912 Size:    16 [unused]
//   float4 postFxConst42;              // Offset:  928 Size:    16 [unused]
//   float4 postFxConst43;              // Offset:  944 Size:    16 [unused]
//   float4 postFxConst44;              // Offset:  960 Size:    16 [unused]
//   float4 postFxConst45;              // Offset:  976 Size:    16 [unused]
//   float4 postFxConst46;              // Offset:  992 Size:    16 [unused]
//   float4 postFxConst47;              // Offset: 1008 Size:    16 [unused]
//   float4 postFxConst48;              // Offset: 1024 Size:    16 [unused]
//   float4 postFxConst49;              // Offset: 1040 Size:    16 [unused]
//   float4 postFxConst50;              // Offset: 1056 Size:    16 [unused]
//   float4 postFxConst51;              // Offset: 1072 Size:    16 [unused]
//   float4 postFxConst52;              // Offset: 1088 Size:    16 [unused]
//   float4 postFxConst53;              // Offset: 1104 Size:    16 [unused]
//   float4 postFxConst54;              // Offset: 1120 Size:    16 [unused]
//   float4 postFxConst55;              // Offset: 1136 Size:    16 [unused]
//   float4 postFxConst56;              // Offset: 1152 Size:    16 [unused]
//   float4 postFxConst57;              // Offset: 1168 Size:    16 [unused]
//   float4 postFxConst58;              // Offset: 1184 Size:    16 [unused]
//   float4 postFxConst59;              // Offset: 1200 Size:    16 [unused]
//   float4 postFxConst60;              // Offset: 1216 Size:    16 [unused]
//   float4 postFxConst61;              // Offset: 1232 Size:    16 [unused]
//   float4 postFxConst62;              // Offset: 1248 Size:    16 [unused]
//   float4 postFxConst63;              // Offset: 1264 Size:    16 [unused]
//   float4 postFxBloom00;              // Offset: 1280 Size:    16 [unused]
//   float4 postFxBloom01;              // Offset: 1296 Size:    16 [unused]
//   float4 postFxBloom02;              // Offset: 1312 Size:    16 [unused]
//   float4 postFxBloom03;              // Offset: 1328 Size:    16 [unused]
//   float4 postFxBloom04;              // Offset: 1344 Size:    16 [unused]
//   float4 postFxBloom05;              // Offset: 1360 Size:    16 [unused]
//   float4 postFxBloom06;              // Offset: 1376 Size:    16 [unused]
//   float4 postFxBloom07;              // Offset: 1392 Size:    16 [unused]
//   float4 postFxBloom08;              // Offset: 1408 Size:    16 [unused]
//   float4 postFxBloom09;              // Offset: 1424 Size:    16 [unused]
//   float4 postFxBloom10;              // Offset: 1440 Size:    16 [unused]
//   float4 postFxBloom11;              // Offset: 1456 Size:    16 [unused]
//   float4 postFxBloom12;              // Offset: 1472 Size:    16 [unused]
//   float4 postFxBloom13;              // Offset: 1488 Size:    16 [unused]
//   float4 postFxBloom14;              // Offset: 1504 Size:    16 [unused]
//   float4 postFxBloom15;              // Offset: 1520 Size:    16 [unused]
//   float4 postFxBloom16;              // Offset: 1536 Size:    16 [unused]
//   float4 postFxBloom17;              // Offset: 1552 Size:    16 [unused]
//   float4 postFxBloom18;              // Offset: 1568 Size:    16 [unused]
//   float4 postFxBloom19;              // Offset: 1584 Size:    16 [unused]
//   float4 postFxBloom20;              // Offset: 1600 Size:    16 [unused]
//   float4 postFxBloom21;              // Offset: 1616 Size:    16 [unused]
//   float4 postFxBloom22;              // Offset: 1632 Size:    16 [unused]
//   float4 postFxBloom23;              // Offset: 1648 Size:    16 [unused]
//   float4 postFxBloom24;              // Offset: 1664 Size:    16 [unused]
//   float4 postFxBloom25;              // Offset: 1680 Size:    16 [unused]
//   float4 filterTap[8];               // Offset: 1696 Size:   128 [unused]
//   float4 postfxViewMatrix0;          // Offset: 1824 Size:    16 [unused]
//   float4 postfxViewMatrix1;          // Offset: 1840 Size:    16 [unused]
//   float4 postfxViewMatrix2;          // Offset: 1856 Size:    16 [unused]
//   float4 postfxViewMatrix3;          // Offset: 1872 Size:    16 [unused]
//   float4 postfxProjMatrix0;          // Offset: 1888 Size:    16 [unused]
//   float4 postfxProjMatrix1;          // Offset: 1904 Size:    16 [unused]
//   float4 postfxProjMatrix2;          // Offset: 1920 Size:    16 [unused]
//   float4 postfxProjMatrix3;          // Offset: 1936 Size:    16 [unused]
//   float4 postfxViewProjMatrix0;      // Offset: 1952 Size:    16 [unused]
//   float4 postfxViewProjMatrix1;      // Offset: 1968 Size:    16 [unused]
//   float4 postfxViewProjMatrix2;      // Offset: 1984 Size:    16 [unused]
//   float4 postfxViewProjMatrix3;      // Offset: 2000 Size:    16 [unused]
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4 [unused]
//   uint numRefProbes;                 // Offset:    4 Size:     4 [unused]
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224 [unused]
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48 [unused]
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4 [unused]
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4 [unused]
//   uint enableDitheredShadow;         // Offset:  932 Size:     4 [unused]
//   uint oitMaxEntries;                // Offset:  936 Size:     4 [unused]
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// cbuffer LightingPackCBuffer
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } lightConstantsCB[273];           // Offset:    0 Size: 65520
//
// }
//
// Resource bind info for gLitFogVolumes
// {
//
//   struct CoreLitFogConstantsPack
//   {
//       
//       uint4 data[13];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   208
//
// }
//
// Resource bind info for gCullConstants
// {
//
//   struct CoreCullConstantsPack
//   {
//       
//       uint4 data[5];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    80
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// ScatterSampler                    sampler      NA          NA             s2      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// codeTexture0                      texture    uint     2darray             t0      1 
// gLitFogVolumes                    texture  struct         r/o             t1      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gCullConstants                    texture  struct         r/o            t11      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// codeTexture1                      texture    uint     2darray            t21      1 
// codeTexture7                      texture  float3          3d            t22      1 
// codeTexture4                      texture  float3          3d            t24      1 
// lightScatterVolumeOuputTexture        UAV  float3          3d             u0      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
// PostFxCBuffer                     cbuffer      NA          NA            cb8      1 
// LightingPackCBuffer               cbuffer      NA          NA            cb9      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.22813225, 0.67232430, 0, 0},
                              { 0.84855658, 0.13572347, 0, 0},
                              { 0.74820787, 0.63965076, 0, 0},
                              { 0.47254479, 0.35147414, 0, 0},
                              { 0.96288162, 0.38734287, 0, 0},
                              { 0.08759771, 0.89625019, 0, 0},
                              { 0.20323165, 0.12436704, 0, 0},
                              { 0.56452805, 0.97402436, 0, 0} }
dcl_constantbuffer CB8[20], immediateIndexed
dcl_constantbuffer CB2[51], dynamicIndexed
dcl_constantbuffer CB9[4095], dynamicIndexed
dcl_sampler s2, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_texture2darray (uint,uint,uint,uint) t0
dcl_resource_structured t1, 208
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_structured t11, 80
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_texture2darray (uint,uint,uint,uint) t21
dcl_resource_texture3d (float,float,float,float) t22
dcl_resource_texture3d (float,float,float,float) t24
dcl_uav_typed_texture3d (float,float,float,float) u0
dcl_input vThreadGroupID.z
dcl_input vThreadID.xy
dcl_temps 26
dcl_indexableTemp x0[1], 4
dcl_indexableTemp x1[1], 4
dcl_indexableTemp x2[1], 4
dcl_indexableTemp x3[1], 4
dcl_indexableTemp x4[1], 4
dcl_indexableTemp x5[1], 4
dcl_indexableTemp x6[1], 4
dcl_indexableTemp x7[1], 4
dcl_thread_group 8, 8, 1
ftou r0.x, cb8[14].x
iadd r0.x, r0.x, vThreadID.x
ishl r0.y, vThreadID.y, l(1)
iadd r0.x, r0.y, r0.x
and r0.x, r0.x, l(7)
add r0.xy, l(-0.500000, -0.500000, 0.000000, 0.000000), icb[r0.x + 0].xyxx
utof r0.zw, vThreadID.xxxy
mad r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), r0.zwzz
max r0.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
add r1.xy, r0.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, l(0.012500, -0.02222222, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
add r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, l(0.012500, -0.02222222, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r2.xyz, r0.yyyy, cb8[11].xyzx
mad r2.xyz, cb8[10].xyzx, r0.xxxx, r2.xyzx
add r2.xyz, r2.xyzx, cb8[12].xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r3.xyz, r0.xxxx, r2.xyzx
and r0.x, cb8[4].z, l(0x0000ffff)
ishl r0.y, vThreadGroupID.z, l(3)
imad r1.z, vThreadGroupID.z, l(8), l(7)
mul r0.zw, r0.zzzw, cb8[15].zzzw
mul r4.xy, r0.zwzz, cb8[7].xxxx
mul r4.xy, r4.xyxx, l(0.015625, 0.015625, 0.000000, 0.000000)
dp3 r1.w, cb2[17].xyzx, -r3.xyzx
resinfo_indexable(texture3d)(float,float,float,float)_uint r4.zw, l(0), t24.zwxy
ftou r0.zw, r0.zzzw
utof r0.zw, r0.zzzw
add r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
utof r4.zw, r4.zzzw
div r2.w, l(16.000000), cb8[7].x
mul r4.zw, r2.wwww, r4.zzzw
div r5.xy, r0.zwzz, r4.zwzz
max r0.z, r1.w, l(-1.000000)
min r0.z, r0.z, l(1.000000)
ftou r4.xy, r4.xyxx
ushr r6.xyzw, cb2[50].xyzw, l(5, 5, 5, 5)
mov r4.w, l(0)
mov r7.xy, r4.xyxx
mov r7.w, l(0)
mov r8.w, l(1.000000)
mov r9.xy, l(0,0,0,0)
loop 
  uge r0.w, r9.y, r0.x
  breakc_nz r0.w
  ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r10.xyzw, r9.y, l(24), t1.xyzw
  ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r11.xyzw, r9.y, l(52), t1.xyzw
  ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r0.w, r9.y, l(68), t1.xxxx
  ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r12.xyzw, r9.y, l(84), t1.xyzw
  ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r1.w, r9.y, l(100), t1.xxxx
  ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r13.xyzw, r9.y, l(116), t1.xyzw
  dp3 r2.w, r3.xyzx, r10.xyzx
  max r3.w, |r2.w|, l(0.00000010)
  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
  mul r9.z, r3.w, r10.w
  mul r3.w, r3.w, r11.x
  lt r2.w, l(0.000000), -r2.w
  max r10.x, r9.z, l(-131072.000000)
  min r10.y, -r3.w, l(131072.000000)
  min r14.y, -r9.z, l(131072.000000)
  max r14.x, r3.w, l(-131072.000000)
  movc r9.zw, r2.wwww, r10.xxxy, r14.xxxy
  dp3 r2.w, r3.xyzx, r11.yzwy
  max r3.w, |r2.w|, l(0.00000010)
  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
  mul r0.w, r0.w, r3.w
  mul r3.w, r3.w, r12.x
  lt r2.w, l(0.000000), -r2.w
  max r10.x, r9.z, r0.w
  min r10.y, r9.w, -r3.w
  min r11.y, r9.w, -r0.w
  max r11.x, r9.z, r3.w
  movc r9.zw, r2.wwww, r10.xxxy, r11.xxxy
  dp3 r0.w, r3.xyzx, r12.yzwy
  max r2.w, |r0.w|, l(0.00000010)
  div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
  mul r1.w, r1.w, r2.w
  mul r2.w, r2.w, r13.x
  lt r0.w, l(0.000000), -r0.w
  max r10.x, r9.z, r1.w
  min r10.y, r9.w, -r2.w
  min r11.y, r9.w, -r1.w
  max r11.x, r9.z, r2.w
  movc r9.zw, r0.wwww, r10.xxxy, r11.xxxy
  lt r0.w, r9.z, r9.w
  if_nz r0.w
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r10.xyzw, r9.y, l(136), t1.xyzw
    ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r11.xy, r9.y, l(152), t1.xyxx
    max r0.w, r9.z, l(0.000000)
    mov r11.z, r10.w
    add r11.xyz, r10.yyyy, r11.zxyz
    and r10.zw, r10.zzzz, l(0, 0, 5, 2)
    switch r10.z
      case l(1)
      mov r12.xyz, x0[0].xyzx
      mov x1[0].xyz, r12.xyzx
      mul r1.w, r0.w, l(0.00071429)
      rsq r1.w, r1.w
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
      mul r1.w, r1.w, l(127.000000)
      round_ni r1.w, r1.w
      ftou r1.w, r1.w
      umax r1.w, r0.y, r1.w
      mul r2.w, r9.w, l(0.00071429)
      rsq r2.w, r2.w
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
      mul r2.w, r2.w, l(127.000000)
      round_ni r2.w, r2.w
      ftou r2.w, r2.w
      umin r2.w, r1.z, r2.w
      mul r3.w, r13.y, l(100.000000)
      mad r9.z, r10.x, r0.z, l(1.000000)
      max r9.z, r9.z, l(0.000001)
      min r9.z, r9.z, l(2.000000)
      mad r10.z, -r10.x, r10.x, l(1.000000)
      mul r10.z, r10.z, l(0.07957747)
      mul r9.z, r9.z, r9.z
      rcp r9.z, r9.z
      mul r9.z, r9.z, r10.z
      max r9.z, r9.z, l(0.000000)
      min r9.z, r9.z, l(10000.000000)
      mov r10.z, r9.x
      mov r11.w, r1.w
      loop 
        ult r12.x, r2.w, r11.w
        breakc_nz r12.x
        utof r12.x, r11.w
        add r12.x, r12.x, l(0.500000)
        mul r12.y, r12.x, l(0.00781250)
        mul r12.y, r12.y, r12.y
        mul r12.y, r12.y, l(1400.000000)
        mad r12.x, r12.x, l(0.00781250), l(0.00781250)
        mul r12.x, r12.x, r12.x
        mad r12.x, r12.x, l(1400.000000), -r12.y
        mul r14.xyz, r2.xyzx, r12.yyyy
        dp3 r12.z, r14.xyzx, r14.xyzx
        sqrt r12.z, r12.z
        iadd r12.w, -r0.y, r11.w
        ishl r13.x, l(1), r12.w
        and r13.x, r10.z, r13.x
        mov r15.xyz, x1[0].xyzx
        movc r15.xyz, r13.xxxx, r15.xyzx, l(0,0,0,0)
        mad r13.x, r2.z, r12.y, r13.w
        mul r13.x, r13.x, -r13.z
        exp r13.x, r13.x
        min r13.x, r13.x, l(1.000000)
        mul r13.x, r13.x, r13.y
        min r13.x, r3.w, r13.x
        mul r16.xyz, r11.xyzx, r13.xxxx
        mul r13.x, r10.y, r13.x
        mul r16.xyz, r12.zzzz, -r16.xyzx
        exp r16.xyz, r16.xyzx
        mad r17.xyz, r2.xyzx, r12.yyyy, cb8[5].xyzx
        dp3 r12.y, r17.xyzx, cb8[6].xyzx
        add r12.y, r12.y, cb8[6].w
        mul r12.y, r12.y, l(0.003000)
        max r12.y, r12.y, l(1.000000)
        min r12.y, r12.y, l(2.000000)
        ftou r12.y, r12.y
        mul r17.xyz, r14.yyyy, cb2[29].xyzx
        mad r14.xyw, r14.xxxx, cb2[28].xyxz, r17.xyxz
        mad r14.xyz, r14.zzzz, cb2[30].xyzx, r14.xywx
        add r14.xyz, r14.xyzx, cb2[31].xyzx
        add r14.xy, r14.xyxx, -cb2[r12.y + 20].xyxx
        mul r14.xy, r14.xyxx, cb2[r12.y + 20].zzzz
        mad r17.xy, r14.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r14.x, r14.z, -cb2[17].w
        mad r14.x, -r14.x, l(0.00006104), l(0.999500)
        iadd r12.y, r12.y, cb2[26].y
        utof r17.z, r12.y
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.y, r17.xyzx, t13.xxxx, s13, r14.x
        mul r12.x, r12.x, r13.x
        mul r12.y, r12.y, r12.x
        mul r14.xyz, r12.yyyy, r16.xyzx
        mul r12.y, r12.z, l(0.000500)
        min r5.z, r12.y, l(1.000000)
        sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r5.xyzx, t24.xyzw, s2, l(0.000000)
        mul r16.xyz, r16.xyzx, r17.xyzx
        mul r12.xyz, r12.xxxx, r16.xyzx
        mul r14.xyz, r14.xyzx, cb2[18].xyzx
        mul r12.xyz, r12.xyzx, l(0.07957747, 0.07957747, 0.07957747, 0.000000)
        mad r12.xyz, r14.xyzx, r9.zzzz, r12.xyzx
        add r12.xyz, r12.xyzx, r15.xyzx
        mov x1[0].xyz, r12.xyzx
        bfi r10.z, l(1), r12.w, l(1), r10.z
        iadd r11.w, r11.w, l(1)
      endloop 
      mov r9.x, r10.z
      mov r12.xyz, x1[0].xyzx
      mov x0[0].xyz, r12.xyzx
      break 
      case l(4)
      mov r12.xyz, x0[0].xyzx
      mov x2[0].xyz, r12.xyzx
      mul r1.w, r0.w, l(0.00071429)
      rsq r1.w, r1.w
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
      mul r1.w, r1.w, l(127.000000)
      round_ni r1.w, r1.w
      ftou r1.w, r1.w
      umax r1.w, r0.y, r1.w
      mul r2.w, r9.w, l(0.00071429)
      rsq r2.w, r2.w
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
      mul r2.w, r2.w, l(127.000000)
      round_ni r2.w, r2.w
      ftou r2.w, r2.w
      umin r2.w, r1.z, r2.w
      mul r3.w, r13.y, l(100.000000)
      mad r9.z, r10.x, r0.z, l(1.000000)
      max r9.z, r9.z, l(0.000001)
      min r9.z, r9.z, l(2.000000)
      mad r11.w, -r10.x, r10.x, l(1.000000)
      mul r11.w, r11.w, l(0.07957747)
      mul r9.z, r9.z, r9.z
      rcp r9.z, r9.z
      mul r9.z, r9.z, r11.w
      max r9.z, r9.z, l(0.000000)
      min r9.z, r9.z, l(10000.000000)
      mov r11.w, r9.x
      mov r12.x, r1.w
      loop 
        ult r12.y, r2.w, r12.x
        breakc_nz r12.y
        utof r12.y, r12.x
        add r12.y, r12.y, l(0.500000)
        mul r12.z, r12.y, l(0.00781250)
        mul r12.z, r12.z, r12.z
        mul r12.z, r12.z, l(1400.000000)
        mad r12.y, r12.y, l(0.00781250), l(0.00781250)
        mul r12.y, r12.y, r12.y
        mad r12.y, r12.y, l(1400.000000), -r12.z
        mul r14.xyz, r2.xyzx, r12.zzzz
        dp3 r12.w, r14.xyzx, r14.xyzx
        sqrt r12.w, r12.w
        iadd r13.x, -r0.y, r12.x
        ishl r14.w, l(1), r13.x
        and r14.w, r11.w, r14.w
        mov r15.xyz, x2[0].xyzx
        movc r15.xyz, r14.wwww, r15.xyzx, l(0,0,0,0)
        mad r14.w, r2.z, r12.z, r13.w
        mul r14.w, -r13.z, r14.w
        exp r14.w, r14.w
        min r14.w, r14.w, l(1.000000)
        mul r14.w, r13.y, r14.w
        min r14.w, r3.w, r14.w
        mul r16.xyz, r11.xyzx, r14.wwww
        mul r14.w, r10.y, r14.w
        mul r16.xyz, r12.wwww, -r16.xyzx
        exp r16.xyz, r16.xyzx
        mad r17.xyz, r2.xyzx, r12.zzzz, cb8[5].xyzx
        dp3 r12.z, r17.xyzx, cb8[6].xyzx
        add r12.z, r12.z, cb8[6].w
        mul r12.z, r12.z, l(0.003000)
        max r12.z, r12.z, l(1.000000)
        min r12.z, r12.z, l(2.000000)
        ftou r12.z, r12.z
        mul r17.xyz, r14.yyyy, cb2[29].xyzx
        mad r17.xyz, r14.xxxx, cb2[28].xyzx, r17.xyzx
        mad r14.xyz, r14.zzzz, cb2[30].xyzx, r17.xyzx
        add r14.xyz, r14.xyzx, cb2[31].xyzx
        add r14.xy, r14.xyxx, -cb2[r12.z + 20].xyxx
        mul r14.xy, r14.xyxx, cb2[r12.z + 20].zzzz
        mad r17.xy, r14.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r14.x, r14.z, -cb2[17].w
        mad r14.x, -r14.x, l(0.00006104), l(0.999500)
        iadd r12.z, r12.z, cb2[26].y
        utof r17.z, r12.z
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.z, r17.xyzx, t13.xxxx, s13, r14.x
        mul r12.y, r12.y, r14.w
        mul r12.z, r12.z, r12.y
        mul r14.xyz, r12.zzzz, r16.xyzx
        mul r12.z, r12.w, l(0.000500)
        min r5.w, r12.z, l(1.000000)
        sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r5.xywx, t24.xyzw, s2, l(0.000000)
        mul r16.xyz, r16.xyzx, r17.xyzx
        mul r12.yzw, r12.yyyy, r16.xxyz
        mul r14.xyz, r14.xyzx, cb2[18].xyzx
        mul r12.yzw, r12.yyzw, l(0.000000, 0.07957747, 0.07957747, 0.07957747)
        mad r12.yzw, r14.xxyz, r9.zzzz, r12.yyzw
        add r12.yzw, r12.yyzw, r15.xxyz
        mov x2[0].xyz, r12.yzwy
        bfi r11.w, l(1), r13.x, l(1), r11.w
        iadd r12.x, r12.x, l(1)
      endloop 
      mov r9.x, r11.w
      mov r12.xyz, x2[0].xyzx
      mov x0[0].xyz, r12.xyzx
      break 
      case l(5)
      mov r12.xyz, x0[0].xyzx
      mov x3[0].xyz, r12.xyzx
      mul r1.w, r0.w, l(0.00071429)
      rsq r1.w, r1.w
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
      mul r1.w, r1.w, l(127.000000)
      round_ni r1.w, r1.w
      ftou r1.w, r1.w
      umax r1.w, r0.y, r1.w
      mul r2.w, r9.w, l(0.00071429)
      rsq r2.w, r2.w
      div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
      mul r2.w, r2.w, l(127.000000)
      round_ni r2.w, r2.w
      ftou r2.w, r2.w
      umin r2.w, r1.z, r2.w
      mul r3.w, r13.y, l(100.000000)
      mad r5.w, r10.x, r0.z, l(1.000000)
      max r5.w, r5.w, l(0.000001)
      min r5.w, r5.w, l(2.000000)
      mad r9.z, -r10.x, r10.x, l(1.000000)
      mul r9.z, r9.z, l(0.07957747)
      mul r5.w, r5.w, r5.w
      rcp r5.w, r5.w
      mul r5.w, r5.w, r9.z
      max r5.w, r5.w, l(0.000000)
      min r5.w, r5.w, l(10000.000000)
      mov r9.z, r9.x
      mov r12.x, r1.w
      loop 
        ult r12.y, r2.w, r12.x
        breakc_nz r12.y
        utof r12.y, r12.x
        add r12.y, r12.y, l(0.500000)
        mul r12.z, r12.y, l(0.00781250)
        mul r12.z, r12.z, r12.z
        mul r12.z, r12.z, l(1400.000000)
        mad r12.y, r12.y, l(0.00781250), l(0.00781250)
        mul r12.y, r12.y, r12.y
        mad r12.y, r12.y, l(1400.000000), -r12.z
        mul r14.xyz, r2.xyzx, r12.zzzz
        dp3 r12.w, r14.xyzx, r14.xyzx
        sqrt r12.w, r12.w
        iadd r13.x, -r0.y, r12.x
        ishl r14.w, l(1), r13.x
        and r14.w, r9.z, r14.w
        mov r15.xyz, x3[0].xyzx
        movc r15.xyz, r14.wwww, r15.xyzx, l(0,0,0,0)
        mad r14.w, r2.z, r12.z, r13.w
        mul r14.w, -r13.z, r14.w
        exp r14.w, r14.w
        min r14.w, r14.w, l(1.000000)
        mul r14.w, r13.y, r14.w
        min r14.w, r3.w, r14.w
        mul r16.xyz, r11.xyzx, r14.wwww
        mul r14.w, r10.y, r14.w
        mul r16.xyz, r12.wwww, -r16.xyzx
        exp r16.xyz, r16.xyzx
        mad r17.xyz, r2.xyzx, r12.zzzz, cb8[5].xyzx
        dp3 r12.z, r17.xyzx, cb8[6].xyzx
        add r12.z, r12.z, cb8[6].w
        mul r12.z, r12.z, l(0.003000)
        max r12.z, r12.z, l(1.000000)
        min r12.z, r12.z, l(2.000000)
        ftou r12.z, r12.z
        mul r17.xyz, r14.yyyy, cb2[29].xyzx
        mad r17.xyz, r14.xxxx, cb2[28].xyzx, r17.xyzx
        mad r14.xyz, r14.zzzz, cb2[30].xyzx, r17.xyzx
        add r14.xyz, r14.xyzx, cb2[31].xyzx
        add r14.xy, r14.xyxx, -cb2[r12.z + 20].xyxx
        mul r14.xy, r14.xyxx, cb2[r12.z + 20].zzzz
        mad r17.xy, r14.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
        add r14.x, r14.z, -cb2[17].w
        mad r14.x, -r14.x, l(0.00006104), l(0.999500)
        iadd r12.z, r12.z, cb2[26].y
        utof r17.z, r12.z
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.z, r17.xyzx, t13.xxxx, s13, r14.x
        mul r12.y, r12.y, r14.w
        mul r12.z, r12.z, r12.y
        mul r14.xyz, r12.zzzz, r16.xyzx
        mul r12.z, r12.w, l(0.000500)
        min r5.z, r12.z, l(1.000000)
        sample_l_indexable(texture3d)(float,float,float,float) r17.xyz, r5.xyzx, t24.xyzw, s2, l(0.000000)
        mul r16.xyz, r16.xyzx, r17.xyzx
        mul r12.yzw, r12.yyyy, r16.xxyz
        mul r14.xyz, r14.xyzx, cb2[18].xyzx
        mul r12.yzw, r12.yyzw, l(0.000000, 0.07957747, 0.07957747, 0.07957747)
        mad r12.yzw, r14.xxyz, r5.wwww, r12.yyzw
        add r12.yzw, r12.yyzw, r15.xxyz
        mov x3[0].xyz, r12.yzwy
        bfi r9.z, l(1), r13.x, l(1), r9.z
        iadd r12.x, r12.x, l(1)
      endloop 
      mov r9.x, r9.z
      mov r12.xyz, x3[0].xyzx
      mov x0[0].xyz, r12.xyzx
      break 
      default 
      break 
    endswitch 
    if_nz r10.w
      ld_structured_indexable(structured_buffer, stride=208)(mixed,mixed,mixed,mixed) r1.w, r9.y, l(184), t1.xxxx
      mov r12.xyz, x0[0].xyzx
      mov x4[0].xyz, r12.xyzx
      mul r2.w, r13.y, l(100.000000)
      mad r3.w, -r10.x, r10.x, l(1.000000)
      mul r3.w, r3.w, l(0.07957747)
      mov r5.z, r9.x
      mov r4.z, r6.x
      loop 
        ult r5.w, r6.y, r4.z
        breakc_nz r5.w
        ld_indexable(texture2darray)(uint,uint,uint,uint) r5.w, r4.xyzw, t0.yzwx
        ishl r10.w, r4.z, l(5)
        mov r12.x, r5.z
        mov r12.y, r5.w
        loop 
          breakc_z r12.y
          firstbit_lo r12.z, r12.y
          ishl r12.w, l(1), r12.z
          and r13.x, r12.w, r12.y
          if_nz r13.x
            xor r12.y, r12.w, r12.y
            iadd r12.z, r10.w, r12.z
            mov r14.xyz, x4[0].xyzx
            mov x5[0].xyz, r14.xyzx
            ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r14.xyz, r12.z, l(12), t11.xyzx
            dp3 r12.w, r14.xyzx, r14.xyzx
            ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r14.xyz, r12.z, l(0), t11.xyzx
            dp3 r13.x, -r14.xyzx, r3.xyzx
            dp3 r14.x, -r14.xyzx, -r14.xyzx
            add r12.w, -r12.w, r14.x
            mad r12.w, r13.x, r13.x, -r12.w
            lt r14.x, l(0.000000), r12.w
            sqrt r12.w, r12.w
            add r14.y, -r12.w, -r13.x
            add r12.w, r12.w, -r13.x
            min r13.x, r12.w, r14.y
            max r12.w, r12.w, r14.y
            max r13.x, r0.w, r13.x
            min r13.x, r9.w, r13.x
            max r12.w, r0.w, r12.w
            min r12.w, r9.w, r12.w
            add r14.y, r13.x, l(0.000001)
            lt r14.y, r14.y, r12.w
            and r14.x, r14.y, r14.x
            if_nz r14.x
              imul null, r12.z, r12.z, l(15)
              mul r14.x, r13.x, l(0.00071429)
              rsq r14.x, r14.x
              div r14.x, l(1.000000, 1.000000, 1.000000, 1.000000), r14.x
              mul r14.x, r14.x, l(127.000000)
              round_ni r14.x, r14.x
              ftou r14.x, r14.x
              umax r14.x, r0.y, r14.x
              mul r12.w, r12.w, l(0.00071429)
              rsq r12.w, r12.w
              div r12.w, l(1.000000, 1.000000, 1.000000, 1.000000), r12.w
              mul r12.w, r12.w, l(127.000000)
              round_ni r12.w, r12.w
              ftou r12.w, r12.w
              umin r12.w, r1.z, r12.w
              ubfe r14.y, l(3), l(27), cb9[r12.z + 1].w
              and r14.z, l(0x0000ffff), cb9[r12.z + 1].w
              mul r14.w, cb9[r12.z + 3].x, cb9[r12.z + 3].x
              lt r15.x, cb9[r12.z + 10].w, l(0.00048828)
              utof r16.z, r14.z
              ine r14.y, r14.y, l(1)
              mov r17.xyz, cb9[r12.z + 7].yzwy
              mov r17.w, cb9[r12.z + 8].x
              mov r18.xyz, cb9[r12.z + 4].yzwy
              mov r18.w, cb9[r12.z + 5].x
              mov r19.xyz, cb9[r12.z + 5].yzwy
              mov r19.w, cb9[r12.z + 6].x
              mov r20.xyz, cb9[r12.z + 6].yzwy
              mov r20.w, cb9[r12.z + 7].x
              mov r14.z, r12.x
              mov r15.y, r14.x
              loop 
                ult r15.z, r12.w, r15.y
                breakc_nz r15.z
                utof r15.z, r15.y
                add r15.z, r15.z, l(0.500000)
                mul r15.w, r15.z, l(0.00781250)
                mul r15.w, r15.w, r15.w
                mul r15.w, r15.w, l(1400.000000)
                mul r8.xyz, r2.xyzx, r15.wwww
                iadd r16.w, -r0.y, r15.y
                ishl r21.x, l(1), r16.w
                and r21.x, r14.z, r21.x
                mov r21.yzw, x5[0].xxyz
                movc r21.xyz, r21.xxxx, r21.yzwy, l(0,0,0,0)
                dp4 r21.w, r17.xyzw, r8.xyzw
                div r22.x, l(1.000000, 1.000000, 1.000000, 1.000000), r21.w
                lt r22.y, r22.x, l(1.000000)
                if_nz r22.y
                  dp4 r23.x, r18.xyzw, r8.xyzw
                  dp4 r23.y, r19.xyzw, r8.xyzw
                  dp4 r23.z, r20.xyzw, r8.xyzw
                  mul r22.xyz, r22.xxxx, r23.xyzx
                  mad r23.xyz, -r2.xyzx, r15.wwww, cb9[r12.z + 0].xyzx
                  dp3 r22.w, r23.xyzx, r23.xyzx
                  div r23.w, r14.w, r22.w
                  min r23.w, r23.w, l(1.000000)
                  mad_sat r24.xy, r21.wwww, cb9[r12.z + 2].xzxx, cb9[r12.z + 2].ywyy
                  mul r24.zw, r24.xxxy, r24.xxxy
                  mad r24.xy, r24.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
                  mul r24.xy, r24.xyxx, r24.zwzz
                  mul r23.w, r23.w, r24.x
                  mul r23.w, r24.y, r23.w
                  if_nz r15.x
                    mad_sat r24.xy, |r22.xyxx|, cb9[r12.z + 12].xyxx, cb9[r12.z + 12].zwzz
                    mul r24.zw, r24.xxxy, r24.xxxy
                    mad r24.xy, r24.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
                    mul r24.xy, r24.xyxx, r24.zwzz
                    mul r24.x, r24.y, r24.x
                  else 
                    mul_sat r25.xyzw, |r22.yyxx|, cb9[r12.z + 11].xyzw
                    log r25.xyzw, r25.xyzw
                    mul r25.xyzw, r25.xyzw, cb9[r12.z + 12].zzzz
                    exp r25.xyzw, r25.xyzw
                    add r24.yz, r25.zzwz, r25.xxyx
                    log r24.yz, r24.yyzy
                    mul r24.yz, r24.yyzy, cb9[r12.z + 12].wwww
                    exp r24.yz, r24.yyzy
                    mul r24.y, r24.y, cb9[r12.z + 12].x
                    mad r24.w, cb9[r12.z + 12].y, r24.z, l(-1.000000)
                    mad r24.y, cb9[r12.z + 12].y, r24.z, -r24.y
                    div_sat r24.y, r24.w, r24.y
                    mul r24.z, r24.y, r24.y
                    mad r24.y, r24.y, l(-2.000000), l(3.000000)
                    mul r24.x, r24.y, r24.z
                  endif 
                  mul r23.w, r23.w, r24.x
                  lt r24.x, l(0.000000), r23.w
                  if_nz r24.x
                    if_nz r14.y
                      mad_sat r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                      mad r16.x, r22.x, cb9[r12.z + 8].y, cb9[r12.z + 8].z
                      mad r16.y, r22.y, cb9[r12.z + 8].w, cb9[r12.z + 9].x
                      add r24.xyz, r16.xyzx, l(0.00292969, 0.00292969, 0.000000, 0.000000)
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r24.xyzx, t9.xxxx, s13, r22.z
                      add r24.xyz, r16.xyzx, l(-0.00292969, 0.00292969, 0.000000, 0.000000)
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.y, r24.xyzx, t9.xxxx, s13, r22.z
                      add r22.x, r22.y, r22.x
                      add r24.xyz, r16.xyzx, l(0.00292969, -0.00292969, 0.000000, 0.000000)
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.y, r24.xyzx, t9.xxxx, s13, r22.z
                      add r22.x, r22.y, r22.x
                      add r24.xyz, r16.xyzx, l(-0.00292969, -0.00292969, 0.000000, 0.000000)
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r16.x, r24.xyzx, t9.xxxx, s13, r22.z
                      add r16.x, r16.x, r22.x
                      mul r16.x, r16.x, l(0.250000)
                    else 
                      mov r16.x, l(1.000000)
                    endif 
                    mul r16.x, r23.w, r16.x
                    lt r16.y, l(0.000000), r16.x
                    if_nz r16.y
                      mad r15.z, r15.z, l(0.00781250), l(0.00781250)
                      mul r15.z, r15.z, r15.z
                      mad r15.z, r15.z, l(1400.000000), -r15.w
                      dp3 r8.x, r8.xyzx, r8.xyzx
                      sqrt r8.x, r8.x
                      mad r8.y, r2.z, r15.w, r13.w
                      mul r8.y, r8.y, -r13.z
                      exp r8.y, r8.y
                      min r8.y, r8.y, l(1.000000)
                      mul r8.y, r8.y, r13.y
                      min r8.y, r2.w, r8.y
                      mul r22.xyz, r8.yyyy, r11.xyzx
                      mul r8.y, r8.y, r10.y
                      rsq r8.z, r22.w
                      mul r23.xyz, r8.zzzz, r23.xyzx
                      dp3 r8.z, -r3.xyzx, r23.xyzx
                      max r8.z, r8.z, l(-1.000000)
                      min r8.z, r8.z, l(1.000000)
                      mad r8.z, r10.x, r8.z, l(1.000000)
                      max r8.z, r8.z, l(0.000001)
                      min r8.z, r8.z, l(2.000000)
                      mul r8.z, r8.z, r8.z
                      rcp r8.z, r8.z
                      mul r8.z, r3.w, r8.z
                      max r8.z, r8.z, l(0.000000)
                      min r8.z, r8.z, l(10000.000000)
                      add r15.w, -r13.x, r8.x
                      max r15.w, r15.w, l(0.000000)
                      min r15.z, r15.w, r15.z
                      add r8.x, r8.x, r21.w
                      mul r22.xyz, -r8.xxxx, r22.xyzx
                      exp r22.xyz, r22.xyzx
                      min r22.xyz, r22.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                      mul r8.x, r8.z, r8.y
                      mul r8.x, r15.z, r8.x
                      mul r8.x, r16.x, r8.x
                      mul r8.xyz, r8.xxxx, r22.xyzx
                      mul r8.xyz, r1.wwww, r8.xyzx
                      mul r22.x, r8.x, cb9[r12.z + 0].w
                      mul r22.yz, r8.yyzy, cb9[r12.z + 1].xxyx
                    else 
                      mov r22.xyz, l(0,0,0,0)
                    endif 
                  else 
                    mov r22.xyz, l(0,0,0,0)
                    mov r16.y, l(0)
                  endif 
                else 
                  mov r22.xyz, l(0,0,0,0)
                  mov r16.y, l(0)
                endif 
                add r8.xyz, r21.xyzx, r22.xyzx
                mov r21.xyz, x5[0].xyzx
                movc r8.xyz, r16.yyyy, r8.xyzx, r21.xyzx
                mov x5[0].xyz, r8.xyzx
                bfi r8.x, l(1), r16.w, l(1), r14.z
                movc r14.z, r16.y, r8.x, r14.z
                iadd r15.y, r15.y, l(1)
              endloop 
              mov r12.x, r14.z
            endif 
            mov r8.xyz, x5[0].xyzx
            mov x4[0].xyz, r8.xyzx
          endif 
        endloop 
        mov r5.z, r12.x
        iadd r4.z, r4.z, l(1)
      endloop 
      mov r8.xyz, x4[0].xyzx
      mov x6[0].xyz, r8.xyzx
      mov r9.x, r5.z
      mov r7.z, r6.z
      loop 
        ult r4.z, r6.w, r7.z
        breakc_nz r4.z
        ld_indexable(texture2darray)(uint,uint,uint,uint) r4.z, r7.xyzw, t21.yzxw
        ishl r5.w, r7.z, l(5)
        mov r8.x, r9.x
        mov r8.y, r4.z
        loop 
          breakc_z r8.y
          firstbit_lo r8.z, r8.y
          ishl r10.w, l(1), r8.z
          and r12.y, r8.y, r10.w
          if_nz r12.y
            xor r8.y, r8.y, r10.w
            iadd r8.z, r5.w, r8.z
            mov r12.yzw, x6[0].xxyz
            mov x7[0].xyz, r12.yzwy
            ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r12.yzw, r8.z, l(12), t11.xxyz
            max r10.w, r12.w, r12.z
            max r10.w, r10.w, r12.y
            ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r12.yzw, r8.z, l(0), t11.xxyz
            dp3 r13.x, -r12.yzwy, r3.xyzx
            dp3 r12.y, -r12.yzwy, -r12.yzwy
            mad r10.w, -r10.w, r10.w, r12.y
            mad r10.w, r13.x, r13.x, -r10.w
            lt r12.y, l(0.000000), r10.w
            sqrt r10.w, r10.w
            add r12.z, -r10.w, -r13.x
            add r10.w, r10.w, -r13.x
            min r12.w, r10.w, r12.z
            max r10.w, r10.w, r12.z
            max r12.z, r0.w, r12.w
            min r12.z, r9.w, r12.z
            max r10.w, r0.w, r10.w
            min r10.w, r9.w, r10.w
            add r12.w, r12.z, l(0.000001)
            lt r12.w, r12.w, r10.w
            and r12.y, r12.w, r12.y
            if_nz r12.y
              imul null, r8.z, r8.z, l(15)
              mul r12.y, r12.z, l(0.00071429)
              rsq r12.y, r12.y
              div r12.y, l(1.000000, 1.000000, 1.000000, 1.000000), r12.y
              mul r12.y, r12.y, l(127.000000)
              round_ni r12.y, r12.y
              ftou r12.y, r12.y
              umax r12.y, r0.y, r12.y
              mul r10.w, r10.w, l(0.00071429)
              rsq r10.w, r10.w
              div r10.w, l(1.000000, 1.000000, 1.000000, 1.000000), r10.w
              mul r10.w, r10.w, l(127.000000)
              round_ni r10.w, r10.w
              ftou r10.w, r10.w
              umin r10.w, r1.z, r10.w
              mul r12.z, cb9[r8.z + 3].x, cb9[r8.z + 3].x
              mov r12.w, r8.x
              mov r13.x, r12.y
              loop 
                ult r14.x, r10.w, r13.x
                breakc_nz r14.x
                utof r14.x, r13.x
                add r14.x, r14.x, l(0.500000)
                mul r14.y, r14.x, l(0.00781250)
                mul r14.y, r14.y, r14.y
                mul r14.y, r14.y, l(1400.000000)
                mul r15.xyz, r2.xyzx, r14.yyyy
                iadd r14.w, -r0.y, r13.x
                ishl r15.w, l(1), r14.w
                and r15.w, r12.w, r15.w
                mov r16.xyz, x7[0].xyzx
                movc r16.xyz, r15.wwww, r16.xyzx, l(0,0,0,0)
                mad r17.xyz, -r2.xyzx, r14.yyyy, cb9[r8.z + 0].xyzx
                dp3 r15.w, r17.xyzx, r17.xyzx
                sqrt r16.w, r15.w
                div r17.w, r12.z, r15.w
                min r17.w, r17.w, l(1.000000)
                mad_sat r18.xy, r16.wwww, cb9[r8.z + 2].xzxx, cb9[r8.z + 2].ywyy
                mul r18.zw, r18.xxxy, r18.xxxy
                mad r18.xy, r18.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
                mul r18.xy, r18.xyxx, r18.zwzz
                mul r17.w, r17.w, r18.x
                mul r17.w, r18.y, r17.w
                lt r18.x, l(0.000000), r17.w
                if_nz r18.x
                  mad r14.x, r14.x, l(0.00781250), l(0.00781250)
                  mul r14.x, r14.x, r14.x
                  mad r14.x, r14.x, l(1400.000000), -r14.y
                  dp3 r15.x, r15.xyzx, r15.xyzx
                  sqrt r15.x, r15.x
                  mad r14.y, r2.z, r14.y, r13.w
                  mul r14.y, -r13.z, r14.y
                  exp r14.y, r14.y
                  min r14.y, r14.y, l(1.000000)
                  mul r14.y, r13.y, r14.y
                  min r14.y, r2.w, r14.y
                  mul r18.yzw, r11.xxyz, r14.yyyy
                  mul r14.y, r10.y, r14.y
                  rsq r15.y, r15.w
                  mul r15.yzw, r15.yyyy, r17.xxyz
                  dp3 r15.y, -r3.xyzx, r15.yzwy
                  max r15.y, r15.y, l(-1.000000)
                  min r15.y, r15.y, l(1.000000)
                  mad r15.y, r10.x, r15.y, l(1.000000)
                  max r15.y, r15.y, l(0.000001)
                  min r15.y, r15.y, l(2.000000)
                  mul r15.y, r15.y, r15.y
                  rcp r15.y, r15.y
                  mul r15.y, r3.w, r15.y
                  max r15.y, r15.y, l(0.000000)
                  add r15.x, r15.x, r16.w
                  mul r15.xzw, -r15.xxxx, r18.yyzw
                  exp r15.xzw, r15.xxzw
                  min r15.xyzw, r15.xyzw, l(1.000000, 10000.000000, 1.000000, 1.000000)
                  mul r14.y, r14.y, r15.y
                  mul r14.x, r14.x, r14.y
                  mul r14.x, r17.w, r14.x
                  mul r15.xyz, r14.xxxx, r15.xzwx
                  mul r15.xyz, r1.wwww, r15.xyzx
                  mul r17.x, r15.x, cb9[r8.z + 0].w
                  mul r17.yz, r15.yyzy, cb9[r8.z + 1].xxyx
                else 
                  mov r17.xyz, l(0,0,0,0)
                endif 
                add r15.xyz, r16.xyzx, r17.xyzx
                mov r16.xyz, x7[0].xyzx
                movc r15.xyz, r18.xxxx, r15.xyzx, r16.xyzx
                mov x7[0].xyz, r15.xyzx
                bfi r14.x, l(1), r14.w, l(1), r12.w
                movc r12.w, r18.x, r14.x, r12.w
                iadd r13.x, r13.x, l(1)
              endloop 
              mov r8.x, r12.w
            endif 
            mov r14.xyw, x7[0].xyxz
            mov x6[0].xyz, r14.xywx
          endif 
        endloop 
        mov r9.x, r8.x
        iadd r7.z, r7.z, l(1)
      endloop 
      mov r10.xyw, x6[0].xyxz
      mov x0[0].xyz, r10.xywx
    endif 
  endif 
  iadd r9.y, r9.y, l(1)
endloop 
mul r0.xzw, r1.yyyy, cb8[11].xxyz
mad r0.xzw, cb8[10].xxyz, r1.xxxx, r0.xxzw
add r0.xzw, r0.xxzw, cb8[12].xxyz
mov r1.xyz, x0[0].xyzx
mov r2.xy, vThreadID.xyxx
mov r3.xy, vThreadID.xyxx
mov r1.w, l(0)
loop 
  uge r4.x, r1.w, l(8)
  breakc_nz r4.x
  iadd r2.zw, r0.yyyy, r1.wwww
  ishl r4.x, l(1), r1.w
  and r4.x, r4.x, r9.x
  if_z r4.x
    store_uav_typed u0.xyzw, r2.xyzw, l(0,0,0,0)
  else 
    utof r2.z, r2.w
    mul r2.z, r2.z, l(0.00787402)
    mul r2.z, r2.z, r2.z
    mul r2.z, r2.z, l(1400.000000)
    mad r4.xyz, r0.xzwx, r2.zzzz, cb8[13].xyzx
    mul r5.xyz, r4.yyyy, cb8[17].xywx
    mad r4.xyw, r4.xxxx, cb8[16].xyxw, r5.xyxz
    mad r4.xyz, r4.zzzz, cb8[18].xywx, r4.xywx
    add r4.xyz, r4.xyzx, cb8[19].xywx
    div r4.xy, r4.xyxx, r4.zzzz
    mad r5.xy, r4.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mul r2.z, r4.z, l(0.00071429)
    rsq r2.z, r2.z
    div r5.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
    mov_sat r4.xyz, r5.xyzx
    add r4.xyz, -r4.xyzx, r5.xyzx
    dp3 r2.z, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    lt r2.z, |r2.z|, l(0.000001)
    and r2.z, r2.z, l(0x3f59999a)
    sample_l_indexable(texture3d)(float,float,float,float) r4.xyz, r5.xyzx, t22.xyzw, s2, l(0.000000)
    add r4.xyzw, -r1.xyzx, r4.xyzx
    mad r4.xyzw, r2.zzzz, r4.xyzw, r1.xyzx
    mov r3.zw, r2.wwww
    store_uav_typed u0.xyzw, r3.xyzw, r4.xyzw
  endif 
  iadd r1.w, r1.w, l(1)
endloop 
ret 
// Approximately 811 instruction slots used
