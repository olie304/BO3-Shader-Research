//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:43:39 2021
//
//
// Buffer Definitions: 
//
// cbuffer GenericsCBuffer
// {
//
//   float4 scriptVector0;              // Offset:    0 Size:    16
//   float4 scriptVector1;              // Offset:   16 Size:    16
//   float4 scriptVector2;              // Offset:   32 Size:    16
//   float4 scriptVector3;              // Offset:   48 Size:    16
//   float4 scriptVector4;              // Offset:   64 Size:    16 [unused]
//   float4 scriptVector5;              // Offset:   80 Size:    16 [unused]
//   float4 scriptVector6;              // Offset:   96 Size:    16 [unused]
//   float4 scriptVector7;              // Offset:  112 Size:    16 [unused]
//   float4 weaponParam0;               // Offset:  128 Size:    16 [unused]
//   float4 weaponParam1;               // Offset:  144 Size:    16 [unused]
//   float4 weaponParam2;               // Offset:  160 Size:    16 [unused]
//   float4 weaponParam3;               // Offset:  176 Size:    16 [unused]
//   float4 weaponParam4;               // Offset:  192 Size:    16 [unused]
//   float4 weaponParam5;               // Offset:  208 Size:    16 [unused]
//   float4 weaponParam6;               // Offset:  224 Size:    16 [unused]
//   float4 weaponParam7;               // Offset:  240 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// GenericsCBuffer                   cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[4], immediateIndexed
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 6
mul r0.x, cb3[3].x, l(0.500000)
mad r0.y, -cb3[3].x, l(0.500000), l(1.000000)
mad r0.z, -cb3[3].x, l(0.500000), r0.y
add r0.w, v2.y, -cb3[0].x
add r1.x, -cb3[0].x, cb3[1].x
mad r1.y, -cb3[3].x, l(0.500000), v2.x
mul r1.x, r1.y, r1.x
mad r0.z, r0.z, r0.w, -r1.x
mul r1.xyz, v1.xyzx, cb3[2].xyzx
mul r0.z, |r0.z|, l(100.000000)
min r0.z, r0.z, l(1.000000)
mad r0.w, r0.z, l(-2.000000), l(3.000000)
mul r0.z, r0.z, r0.z
mad r0.z, -r0.w, r0.z, l(1.000000)
mul r0.z, r0.z, v1.w
lt r2.xy, l(0.000000, 0.000000, 0.000000, 0.000000), cb3[3].wzww
add r0.w, -cb3[3].x, l(1.000000)
ge r2.z, v2.x, r0.w
and r2.w, r2.z, r2.x
lt r3.x, v2.x, cb3[3].x
and r3.y, r2.y, r3.x
or r2.w, r2.w, r3.y
if_nz r2.w
  lt r2.w, l(0.500000), cb3[0].x
  and r2.w, r2.w, r2.y
  and r2.w, r3.x, r2.w
  mad r3.y, cb3[3].y, l(0.500000), cb3[0].x
  lt r3.y, v2.y, r3.y
  mad r3.z, -cb3[3].y, l(0.500000), cb3[0].x
  lt r3.z, r3.z, v2.y
  and r3.y, r3.z, r3.y
  and r2.w, r2.w, r3.y
  lt r3.z, l(0.500000), cb3[1].x
  and r3.z, r2.x, r3.z
  lt r0.w, r0.w, v2.x
  and r3.z, r0.w, r3.z
  mad r3.w, cb3[3].y, l(0.500000), cb3[1].x
  lt r3.w, v2.y, r3.w
  mad r4.x, -cb3[3].y, l(0.500000), cb3[1].x
  lt r4.x, r4.x, v2.y
  and r3.w, r3.w, r4.x
  and r3.z, r3.w, r3.z
  or r2.w, r2.w, r3.z
  ge r3.z, l(0.500000), cb3[0].x
  and r2.y, r2.y, r3.z
  and r2.y, r3.x, r2.y
  and r2.y, r3.y, r2.y
  lt r3.y, cb3[1].x, l(0.500000)
  and r2.x, r2.x, r3.y
  and r0.w, r0.w, r2.x
  and r0.w, r3.w, r0.w
  or r0.w, r0.w, r2.y
  ge r2.x, v2.x, r0.y
  lt r2.y, v2.x, r0.x
  or r2.x, r2.y, r2.x
  movc r1.w, r2.x, l(0), r0.z
  mov r4.xy, l(0,1.000000,0,0)
  mov r4.w, v1.w
  movc r5.xyzw, r0.wwww, r4.xyxw, r1.xyzw
  movc o0.xyzw, r2.wwww, r4.yxxw, r5.xyzw
else 
  eq r2.xy, cb3[3].zwzz, l(0.000000, 0.000000, 0.000000, 0.000000)
  and r0.w, r3.x, r2.x
  mad r1.w, cb3[3].y, l(0.500000), cb3[0].x
  lt r1.w, v2.y, r1.w
  mad r2.w, -cb3[3].y, l(0.500000), cb3[0].x
  lt r2.w, r2.w, v2.y
  and r1.w, r1.w, r2.w
  and r0.w, r0.w, r1.w
  lt r0.x, v2.x, r0.x
  and r0.x, r0.x, r2.x
  or r0.x, r0.x, r0.w
  and r0.w, r2.z, r2.y
  mad r1.w, cb3[3].y, l(0.500000), cb3[1].x
  lt r1.w, v2.y, r1.w
  mad r2.x, -cb3[3].y, l(0.500000), cb3[1].x
  lt r2.x, r2.x, v2.y
  and r1.w, r1.w, r2.x
  and r0.w, r0.w, r1.w
  or r0.x, r0.w, r0.x
  ge r0.y, v2.x, r0.y
  and r0.y, r0.y, r2.y
  or r0.x, r0.y, r0.x
  movc o0.w, r0.x, l(0), r0.z
  mov o0.xyz, r1.xyzx
endif 
ret 
// Approximately 87 instruction slots used
