//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.45 on Thu Jul 15 15:42:42 2021
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 flagParams;                 // Offset:    0 Size:    16 [unused]
//   float4 colorObjMin;                // Offset:   16 Size:    16 [unused]
//   float4 colorObjMax;                // Offset:   32 Size:    16 [unused]
//   float colorObjMinBaseBlend;        // Offset:   48 Size:     4 [unused]
//   float colorObjMaxBaseBlend;        // Offset:   52 Size:     4 [unused]
//   float2 uvScroll;                   // Offset:   56 Size:     8 [unused]
//   float4 detailScale;                // Offset:   64 Size:    16 [unused]
//   float4 detailScale1;               // Offset:   80 Size:    16 [unused]
//   float4 detailScale2;               // Offset:   96 Size:    16 [unused]
//   float4 detailScale3;               // Offset:  112 Size:    16 [unused]
//   float4 alphaRevealParms;           // Offset:  128 Size:    16 [unused]
//   float4 colorDetailScale;           // Offset:  144 Size:    16 [unused]
//   float alphaRevealSoftEdge;         // Offset:  160 Size:     4
//   float alphaRevealRamp;             // Offset:  164 Size:     4
//   float2 revealScale;                // Offset:  168 Size:     8
//   float3 colorTint;                  // Offset:  176 Size:    12
//   float baseNormalHeight;            // Offset:  188 Size:     4
//   float2 glossRange;                 // Offset:  192 Size:     8
//   float2 rotateUVs;                  // Offset:  200 Size:     8 [unused]
//   float2 scrollUVs;                  // Offset:  208 Size:     8
//   float2 scaleUVs;                   // Offset:  216 Size:     8
//   float2 offsetUVs;                  // Offset:  224 Size:     8 [unused]
//   float2 zoomUVs;                    // Offset:  232 Size:     8 [unused]
//   float zoomRate;                    // Offset:  240 Size:     4 [unused]
//   float layerDepth;                  // Offset:  244 Size:     4 [unused]
//   bool clampU;                       // Offset:  248 Size:     4 [unused]
//   bool clampV;                       // Offset:  252 Size:     4 [unused]
//   float2 flickerSeed;                // Offset:  256 Size:     8
//   float flickerSpeed;                // Offset:  264 Size:     4
//   float2 flickerRange;               // Offset:  272 Size:     8
//   float flickerPower;                // Offset:  280 Size:     4
//   float hdrScale;                    // Offset:  284 Size:     4
//   float emissiveFalloffPower;        // Offset:  288 Size:     4
//   bool invertFalloff;                // Offset:  292 Size:     4
//   float shieldCushion;               // Offset:  296 Size:     4 [unused]
//   float shieldOpacity;               // Offset:  300 Size:     4
//   float warpPixels;                  // Offset:  304 Size:     4
//   float2 normalScale;                // Offset:  308 Size:     8
//   float2 normalScroll;               // Offset:  320 Size:     8
//   float4 scanlineConsts;             // Offset:  336 Size:    16
//
// }
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16
//   float4 gameTick;                   // Offset: 1120 Size:    16
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4
//
// }
//
// cbuffer LightingGlobals
// {
//
//   uint numLights;                    // Offset:    0 Size:     4
//   uint numRefProbes;                 // Offset:    4 Size:     4
//   uint numRefProbeBlends;            // Offset:    8 Size:     4 [unused]
//   uint numDedicatedLights;           // Offset:   12 Size:     4 [unused]
//   float4 clearColor;                 // Offset:   16 Size:    16 [unused]
//   float4 sssParams;                  // Offset:   32 Size:    16 [unused]
//   
//   struct CoreFogConstants
//   {
//       
//       float4 fogColor;               // Offset:   48
//       float4 sunFogColor;            // Offset:   64
//       float K0;                      // Offset:   80
//       float skyK0;                   // Offset:   84
//       float expMul;                  // Offset:   88
//       float expAdd;                  // Offset:   92
//       float heightFalloff;           // Offset:   96
//       float skyHeightFalloff;        // Offset:  100
//       float K0b;                     // Offset:  104
//       float padding0;                // Offset:  108
//       float skyK0b;                  // Offset:  112
//       float3 wldSunFogDir;           // Offset:  116
//       float2 sunFogAngles;           // Offset:  128
//       float atmospheresunstrength;   // Offset:  136
//       float atmosphereMieSchlickK;   // Offset:  140
//       float2 atmosphereskyfogdensityatcamera;// Offset:  144
//       float atmosphereExtinctionIntensity;// Offset:  152
//       float atmosphereInScatterIntensity;// Offset:  156
//       float3 atmosphereRayleighDensity;// Offset:  160
//       float atmospherehazebasedist;  // Offset:  172
//       float3 atmosphereMieDensity;   // Offset:  176
//       float atmospherehazefadedist;  // Offset:  188
//       float3 atmosphereTotalDensity; // Offset:  192
//       float worldfogskysize;         // Offset:  204
//       float3 atmosphereInScatterIntensityOverTotalDensity;// Offset:  208
//       float blendAmount;             // Offset:  220
//       float2 atmosphereskyfogheightdensityscale;// Offset:  224
//       float2 atmospherefogdistanceoffset;// Offset:  232
//       float2 atmospherefogdistancedensityscale;// Offset:  240
//       float2 atmospherefogheightdensityscale;// Offset:  248
//       float2 atmospherefogdensityatcamera;// Offset:  256
//       float2 padding1;               // Offset:  264
//
//   } fogConstants;                    // Offset:   48 Size:   224
//   
//   struct CoreSunConstants
//   {
//       
//       float3 wldDir;                 // Offset:  272
//       float splitDepthOffset;        // Offset:  284
//       float3 color;                  // Offset:  288
//       float specScale;               // Offset:  300
//       float globalProbeExposure;     // Offset:  304
//       float3 avgGlobalProbeColor;    // Offset:  308
//       float4 splitPinTransform[3];   // Offset:  320
//       uint sunCookieIndex;           // Offset:  368
//       float sunCookieIntensity;      // Offset:  372
//       float sunVolumetricCookieIntensity;// Offset:  376
//       uint toolsGfxDisableSunShadow; // Offset:  380
//       float4 sunCookieTransform[2];  // Offset:  384
//       float intensity;               // Offset:  416
//       int splitArrayOffset;          // Offset:  420
//       float2 pad0;                   // Offset:  424
//       
//       struct SSTLightingConstants
//       {
//           
//           struct SSTConstants
//           {
//               
//               float2 dimensionInTiles;// Offset:  432
//               float inchesPerTexel;  // Offset:  440
//               float spanInInches;    // Offset:  444
//
//           } constants;               // Offset:  432
//           row_major float4x4 offToPinTransform;// Offset:  448
//           float coordScale;          // Offset:  512
//           uint rootOffset;           // Offset:  516
//           uint2 pad0;                // Offset:  520
//
//       } sstLightingConstants;        // Offset:  432
//
//   } sunConstants;                    // Offset:  272 Size:   256
//   
//   struct SSTMinMaxConstants
//   {
//       
//       float2 sstToMinMaxScale;       // Offset:  528
//       float2 pad0;                   // Offset:  536
//       float2 halfMinTexelSize;       // Offset:  544
//       float rcpInchesDimLevel0;      // Offset:  552
//       float shadowBiasInches;        // Offset:  556
//
//   } minMaxConstants;                 // Offset:  528 Size:    32 [unused]
//   
//   struct CoreGlobalProbePack
//   {
//       
//       uint4 data[3];                 // Offset:  560
//
//   } globalProbeConstants;            // Offset:  560 Size:    48
//   
//   struct CoreWeatherConsts
//   {
//       
//       float rain;                    // Offset:  608
//       float windSpeed;               // Offset:  612
//       float windDirSin;              // Offset:  616
//       float windDirCos;              // Offset:  620
//       float weatherTile;             // Offset:  624
//       float3 weatherVector;          // Offset:  628
//       float3 weatherVector2;         // Offset:  640
//       float padding0;                // Offset:  652
//       float3 weatherTint;            // Offset:  656
//       float padding1;                // Offset:  668
//       float3 weatherTint2;           // Offset:  672
//       float padding2;                // Offset:  684
//
//   } weather;                         // Offset:  608 Size:    80 [unused]
//   
//   struct SSTLightingConstants
//   {
//       
//       struct SSTConstants
//       {
//           
//           float2 dimensionInTiles;   // Offset:  688
//           float inchesPerTexel;      // Offset:  696
//           float spanInInches;        // Offset:  700
//
//       } constants;                   // Offset:  688
//       row_major float4x4 offToPinTransform;// Offset:  704
//       float coordScale;              // Offset:  768
//       uint rootOffset;               // Offset:  772
//       uint2 pad0;                    // Offset:  776
//
//   } outdoorSSTConstants;             // Offset:  688 Size:    96 [unused]
//   float4 pinToWorldZ;                // Offset:  784 Size:    16 [unused]
//   
//   struct CoreVolumetricConstants
//   {
//       
//       uint firstSpotLight;           // Offset:  800
//       uint lastSpotLight;            // Offset:  804
//       uint firstOmniLight;           // Offset:  808
//       uint lastOmniLight;            // Offset:  812
//       uint firstProbe;               // Offset:  816
//       uint lastProbe;                // Offset:  820
//       uint padding0;                 // Offset:  824
//       uint padding1;                 // Offset:  828
//
//   } volumetric;                      // Offset:  800 Size:    32 [unused]
//   uint viewID;                       // Offset:  832 Size:     4 [unused]
//   uint enableCountDebug;             // Offset:  836 Size:     4 [unused]
//   uint centerGroupIDx;               // Offset:  840 Size:     4 [unused]
//   uint centerGroupIDy;               // Offset:  844 Size:     4 [unused]
//   uint viewmodelSunShadowRaw;        // Offset:  848 Size:     4
//   uint debugDrawOverlayType;         // Offset:  852 Size:     4 [unused]
//   float drawNumLighstScale;          // Offset:  856 Size:     4 [unused]
//   float drawNumLightsAlpha;          // Offset:  860 Size:     4 [unused]
//   uint probeDebug;                   // Offset:  864 Size:     4 [unused]
//   float probeDebugRadius;            // Offset:  868 Size:     4 [unused]
//   uint showSunVis;                   // Offset:  872 Size:     4 [unused]
//   uint enableAO;                     // Offset:  876 Size:     4 [unused]
//   uint showAO;                       // Offset:  880 Size:     4 [unused]
//   uint numGpuCullTilesWidth;         // Offset:  884 Size:     4 [unused]
//   uint numGpuCullTilesHeight;        // Offset:  888 Size:     4 [unused]
//   int permuteHighlight;              // Offset:  892 Size:     4 [unused]
//   uint overdrawOverlayMaxValue;      // Offset:  896 Size:     4 [unused]
//   float overdrawOverlayAlpha;        // Offset:  900 Size:     4 [unused]
//   uint overdrawDecals;               // Offset:  904 Size:     4 [unused]
//   uint overdrawDecalsLayers;         // Offset:  908 Size:     4 [unused]
//   uint permuteStride;                // Offset:  912 Size:     4 [unused]
//   uint numDecals;                    // Offset:  916 Size:     4 [unused]
//   uint numStaticDecals;              // Offset:  920 Size:     4 [unused]
//   uint numDynamicDecals;             // Offset:  924 Size:     4 [unused]
//   uint numOverrideProbes;            // Offset:  928 Size:     4
//   uint enableDitheredShadow;         // Offset:  932 Size:     4
//   uint oitMaxEntries;                // Offset:  936 Size:     4
//   uint numAttenuationVolumes;        // Offset:  940 Size:     4 [unused]
//
// }
//
// Resource bind info for shaderConstantSetBuffer
// {
//
//   struct GpuShaderConstantSet
//   {
//       
//       float4 scriptVector0;          // Offset:    0
//       float4 scriptVector1;          // Offset:   16
//       float4 scriptVector2;          // Offset:   32
//       float4 scriptVector3;          // Offset:   48
//       float4 scriptVector4;          // Offset:   64
//       float4 scriptVector5;          // Offset:   80
//       float4 scriptVector6;          // Offset:   96
//       float4 scriptVector7;          // Offset:  112
//       float4 weaponParam0;           // Offset:  128
//       float4 weaponParam1;           // Offset:  144
//       float4 weaponParam2;           // Offset:  160
//       float4 weaponParam3;           // Offset:  176
//       float4 weaponParam4;           // Offset:  192
//       float4 weaponParam5;           // Offset:  208
//       float4 weaponParam6;           // Offset:  224
//       float4 weaponParam7;           // Offset:  240
//       float4 characterParam0;        // Offset:  256
//       float4 characterParam1;        // Offset:  272
//       float4 characterParam2;        // Offset:  288
//       float4 characterParam3;        // Offset:  304
//       float4 characterParam4;        // Offset:  320
//       float4 characterParam5;        // Offset:  336
//       float4 characterParam6;        // Offset:  352
//       float4 characterParam7;        // Offset:  368
//
//   } $Element;                        // Offset:    0 Size:   384
//
// }
//
// Resource bind info for modelInstanceBuffer
// {
//
//   struct ModelInstanceData
//   {
//       
//       uint boneArrayIndex;           // Offset:    0
//       uint shaderConstantSet;        // Offset:    4
//       uint flagsAndPrevFrameIndex;   // Offset:    8
//       uint worldMatrix;              // Offset:   12
//       uint siegeAnimStateOffset;     // Offset:   16
//       uint prevFrameSiegeAnimStateOffset;// Offset:   20
//
//   } $Element;                        // Offset:    0 Size:    24
//
// }
//
// Resource bind info for gCullConstants
// {
//
//   struct CoreCullConstantsPack
//   {
//       
//       uint4 data[5];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    80
//
// }
//
// Resource bind info for lightConstants
// {
//
//   struct CoreLightConstantsPack
//   {
//       
//       uint4 data[15];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   240
//
// }
//
// Resource bind info for refProbeConstants
// {
//
//   struct CoreReflectionProbePack
//   {
//       
//       uint4 data[14];                // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:   224
//
// }
//
// Resource bind info for refProbeAttenuationConstants
// {
//
//   struct CoreReflectionProbeAttenuationPack
//   {
//       
//       uint4 data[6];                 // Offset:    0
//
//   } $Element;                        // Offset:    0 Size:    96
//
// }
//
// Resource bind info for gSunShadowTree
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// samp0                             sampler      NA          NA             s0      1 
// revealSampler                     sampler      NA          NA             s1      1 
// samplerLinear                     sampler      NA          NA             s2      1 
// colorSampler                      sampler      NA          NA             s3      1 
// samplerLinearClamp                sampler      NA          NA             s4      1 
// normalSampler                     sampler      NA          NA             s5      1 
// lookupSampler                     sampler      NA          NA             s6      1 
// ShadowSamplerComparisonState    sampler_c      NA          NA            s13      1 
// shaderConstantSetBuffer           texture  struct         r/o             t0      1 
// modelInstanceBuffer               texture  struct         r/o             t4      1 
// gEnvBRDFGeneric                   texture  float2          2d             t5      1 
// visibleLights                     texture    uint     2darray             t6      1 
// visibleProbes                     texture    uint     2darray             t7      1 
// gReflectionProbeArray             texture  float3   cubearray             t8      1 
// gSpotShadowmapArray               texture   float     2darray             t9      1 
// gOmniShadowmapArray               texture   float   cubearray            t10      1 
// gCullConstants                    texture  struct         r/o            t11      1 
// lightConstants                    texture  struct         r/o            t12      1 
// gSunShadowmapArray                texture   float     2darray            t13      1 
// refProbeConstants                 texture  struct         r/o            t15      1 
// refProbeAttenuationConstants      texture  struct         r/o            t16      1 
// gProbeXArray                      texture  float3          3d            t17      1 
// gProbeYArray                      texture  float3          3d            t18      1 
// gProbeZArray                      texture  float3          3d            t19      1 
// gCookieArray                      texture  float4     2darray            t20      1 
// revealMap                         texture  float4          2d            t21      1 
// colorMap                          texture  float4          2d            t22      1 
// gSunShadowTree                    texture  struct         r/o            t23      1 
// tintMask                          texture  float4          2d            t24      1 
// normalMap                         texture  float4          2d            t25      1 
// flickerLookupMap                  texture  float4          2d            t26      1 
// emissiveMap                       texture  float4          2d            t29      1 
// gTransShadowmapArray              texture   float     2darray            t31      1 
// gOit_Pixels                           UAV    uint          2d             u6      1 
// gOit_Nodes                            UAV   uint2     2darray             u7      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// PerSceneConsts                    cbuffer      NA          NA            cb1      1 
// LightingGlobals                   cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyz 
// COLOR                    0   xyz         1     NONE   float   xyz 
// COLOR                    1      w        1     NONE   float      w
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 9     zw        2     NONE   float     zw
// UVOFFSETS                0   xyz         3     NONE   float   xyz 
// TEXCOORD                 4      w        3     NONE    uint      w
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
// TEXCOORD                11      w        4     NONE   float      w
// TEXCOORD                 2   xyz         5     NONE   float   xyz 
// TEXCOORD                 3   xyz         6     NONE   float   xyz 
// OFFPOSITION              0   xyz         7     NONE   float   xyz 
// TEXCOORD                10   xyz         8     NONE   float   xyz 
// SV_IsFrontFace           0   x           9    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_immediateConstantBuffer { { -0.80811429, 0.80811429, 0, 0},
                              { 0, -1.000000, 0, 0},
                              { 0.60605717, 0.60605717, 0, 0},
                              { -0.71428573, 0, 0, 0},
                              { 0.40411428, -0.40411428, 0, 0},
                              { 0, 0.42857143, 0, 0},
                              { -0.20205714, -0.20205714, 0, 0},
                              { 0.14285715, 0, 0, 0} }
dcl_constantbuffer CB0[22], immediateIndexed
dcl_constantbuffer CB1[93], immediateIndexed
dcl_constantbuffer CB2[59], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s13, mode_comparison
dcl_resource_structured t0, 384
dcl_resource_structured t4, 24
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2darray (uint,uint,uint,uint) t6
dcl_resource_texture2darray (uint,uint,uint,uint) t7
dcl_resource_texturecubearray (float,float,float,float) t8
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_structured t11, 80
dcl_resource_structured t12, 240
dcl_resource_texture2darray (float,float,float,float) t13
dcl_resource_structured t15, 224
dcl_resource_structured t16, 96
dcl_resource_texture3d (float,float,float,float) t17
dcl_resource_texture3d (float,float,float,float) t18
dcl_resource_texture3d (float,float,float,float) t19
dcl_resource_texture2darray (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_resource_texture2d (float,float,float,float) t22
dcl_resource_structured t23, 4
dcl_resource_texture2d (float,float,float,float) t24
dcl_resource_texture2d (float,float,float,float) t25
dcl_resource_texture2d (float,float,float,float) t26
dcl_resource_texture2d (float,float,float,float) t29
dcl_resource_texture2darray (float,float,float,float) t31
dcl_uav_typed_texture2d (uint,uint,uint,uint) u6
dcl_uav_typed_texture2darray (uint,uint,uint,uint) u7
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xy
dcl_input_ps linear v2.zw
dcl_input_ps constant v3.xyz
dcl_input_ps constant v3.w
dcl_input_ps linear v4.xyz
dcl_input_ps linear v4.w
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyz
dcl_input_ps_sgv constant v9.x, is_front_face
dcl_output o0.xyzw
dcl_temps 46
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t22.xyzw, s3
mul r0.w, r0.w, v1.w
mul r1.xy, v2.xyxx, cb0[10].zwzz
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t21.xyzw, s1
mad_sat r1.y, v1.w, l(0.998000), l(0.001000)
add r1.z, -r1.y, l(1.000000)
mov_sat r1.w, cb0[10].y
log r1.y, r1.y
mul r1.y, r1.y, r1.w
exp r1.y, r1.y
mov r2.x, -r1.y
log r1.y, r1.z
mul r1.y, r1.y, r1.w
exp r2.y, r1.y
mad_sat r1.yz, cb0[10].xxxx, r2.xxyx, r1.zzzz
add r1.x, -r1.y, r1.x
add r1.y, -r1.y, r1.z
div_sat r1.x, r1.x, r1.y
mul r0.w, r0.w, r1.x
mul r0.w, r0.w, v4.w
mul r1.xy, cb0[20].xyxx, cb1[69].wwww
mad r1.xy, v2.zwzz, cb0[19].yzyy, r1.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t25.xyzw, s5
eq r1.w, r0.w, l(0.000000)
mul r2.xy, cb0[13].xyxx, cb1[69].wwww
mad r2.xy, v2.zwzz, cb0[13].zwzz, r2.xyxx
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t29.xyzw, s3
if_nz r1.w
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
sample_indexable(texture2d)(float,float,float,float) r1.w, v2.xyxx, t24.yzwx, s3
add r3.xyz, cb0[11].xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r3.xyz, r1.wwww, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, r3.xyzx
mul r0.xyz, r0.xyzx, v1.xyzx
mul_sat r1.w, cb0[12].y, l(0.05882353)
add r1.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.000000, 0.000000)
mad r1.xyz, cb0[11].wwww, r1.xyzx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, l(1.99218750, 1.99218750, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r2.w, r1.xyxx, r1.xyxx
add r2.w, -r2.w, l(1.000000)
max r2.w, r2.w, l(0.000000)
sqrt r2.w, r2.w
mul r1.z, r1.z, r1.z
mul r1.z, r1.z, l(0.33333334)
min r1.z, r1.z, l(1.000000)
movc r3.x, v9.x, l(1.000000), l(-1.000000)
dp3 r3.y, v4.xyzx, v4.xyzx
rsq r3.y, r3.y
mul r3.yzw, r3.yyyy, v4.xxyz
mul r3.yzw, r3.xxxx, r3.yyzw
dp3 r4.x, v5.xyzx, v5.xyzx
rsq r4.x, r4.x
mul r4.xyz, r4.xxxx, v5.xyzx
mul r4.xyz, r3.xxxx, r4.xyzx
dp3 r4.w, v6.xyzx, v6.xyzx
rsq r4.w, r4.w
mul r5.xyz, r4.wwww, v6.xyzx
mul r5.xyz, r3.xxxx, r5.xyzx
mul r1.w, r1.w, l(-17.000000)
exp r1.w, r1.w
add r1.z, r1.w, r1.z
log r1.z, r1.z
mul r1.z, r1.z, l(-0.05882353)
max r6.y, r1.z, l(0.000000)
mul r1.yzw, r1.yyyy, r5.xxyz
mad r1.xyz, r4.xyzx, r1.xxxx, r1.yzwy
mad r1.xyz, r3.yzwy, r2.wwww, r1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r4.xy, cb0[19].xxxx, cb1[44].zwzz
max r2.w, r4.y, r4.x
mad r4.xyz, r2.wwww, r1.yxxy, v8.zxyz
mul r2.w, cb0[21].z, cb1[69].w
mad r4.xyz, r4.xyzx, cb0[21].wwww, r2.wwww
sincos r4.xyz, null, r4.xyzx
mad r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
log r4.xyz, r4.xyzx
mul r4.xyz, r4.xyzx, cb0[21].xxxx
exp r4.xyz, r4.xyzx
add_sat r2.w, -cb0[21].y, l(1.000000)
add r4.xyz, r2.wwww, r4.xyzx
ge r2.w, v0.z, l(0.984375)
min r4.xyz, r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r4.xy, r4.yzyy, r4.xxxx
movc r3.x, r2.w, r4.x, r4.y
add r2.xyz, r2.xyzx, r3.xxxx
ld_structured_indexable(structured_buffer, stride=24)(mixed,mixed,mixed,mixed) r3.x, v3.w, l(4), t4.xxxx
ld_structured_indexable(structured_buffer, stride=384)(mixed,mixed,mixed,mixed) r4.xyz, r3.x, l(52), t0.xyzx
mul r2.xyz, r2.xyzx, r4.xyzx
dp3 r3.x, -v7.xyzx, -v7.xyzx
rsq r3.x, r3.x
mul r4.xyz, r3.xxxx, -v7.xyzx
dp3_sat r3.y, r4.xyzx, r3.yzwy
log r3.z, r3.y
mul r3.z, r3.z, cb0[18].x
exp r3.z, r3.z
add r3.y, -r3.y, l(1.000000)
log r3.y, r3.y
mul r3.y, r3.y, cb0[18].x
exp r3.y, r3.y
movc r3.y, cb0[18].y, r3.y, r3.z
eq r3.z, cb0[18].x, l(0.000000)
movc r3.y, r3.z, l(1.000000), r3.y
mul r3.y, r3.y, cb0[17].w
mul r2.xyz, r2.xyzx, r3.yyyy
add r3.y, v3.y, v3.x
add r3.y, r3.y, v3.z
add r3.y, r3.y, cb0[16].y
frc r3.y, r3.y
mad r5.y, cb1[69].w, cb0[16].z, r3.y
mov r5.x, cb0[16].x
sample_l_indexable(texture2d)(float,float,float,float) r3.y, r5.xyxx, t26.yxzw, s6, l(0.000000)
log r3.y, |r3.y|
mul r3.y, r3.y, cb0[17].z
exp r3.y, r3.y
add r3.z, -cb0[17].x, cb0[17].y
mad r3.y, r3.y, r3.z, cb0[17].x
mul r2.xyz, r2.xyzx, r3.yyyy
ftou r3.yz, v0.xxyx
mul r3.w, v0.z, l(1.01587307)
mad r4.w, v0.z, l(64.000000), l(-63.000000)
movc r2.w, r2.w, r4.w, r3.w
max r2.w, r2.w, l(0.00000001)
rcp r2.w, r2.w
ine r3.w, cb1[92].x, l(0)
utof r5.xy, r3.zyzz
dp2 r4.w, r5.yxyy, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r4.w, r4.w
mul r4.w, r4.w, l(52.982918)
frc r4.w, r4.w
mad r4.w, r4.w, l(6.28318548), cb1[70].w
sincos r7.x, r8.x, r4.w
dp2 r4.w, r5.xyxx, l(0.06711056, 0.00583715, 0.000000, 0.000000)
frc r4.w, r4.w
mul r4.w, r4.w, l(52.982918)
frc r4.w, r4.w
mad r4.w, r4.w, l(6.28318548), cb1[70].w
sincos r5.x, r9.x, r4.w
dp3_sat r6.x, r1.xyzx, r4.xyzx
dp3 r4.w, -r4.xyzx, r1.xyzx
add r4.w, r4.w, r4.w
mad r10.xyz, r1.xyzx, -r4.wwww, -r4.xyzx
mul r4.w, r6.y, l(17.000000)
exp r4.w, r4.w
add r4.w, r4.w, l(2.000000)
div r4.w, l(2.000000), r4.w
sqrt r5.y, r4.w
sqrt r5.z, r5.y
mad r5.z, r5.z, l(0.500000), l(0.500000)
mul r5.z, r5.z, r5.z
mul r5.w, r5.z, l(0.500000)
mad r5.z, -r5.z, l(0.500000), l(1.000000)
mad r6.z, r6.x, r5.z, r5.w
mul r5.zw, r5.zzzw, r6.zzzz
dp3 r6.z, r1.xyzx, cb2[17].xyzx
mov_sat r6.w, r6.z
ge r7.z, l(0.000000), r6.w
if_nz r7.z
  mov r7.w, l(0)
endif 
if_z r7.z
  mul r9.yzw, v7.yyyy, cb2[29].xxyz
  mad r9.yzw, v7.xxxx, cb2[28].xxyz, r9.yyzw
  mad r9.yzw, v7.zzzz, cb2[30].xxyz, r9.yyzw
  add r9.yzw, r9.yyzw, cb2[31].xxyz
  add r7.z, r9.w, -cb2[17].w
  mad r7.z, -r7.z, l(0.00006104), l(1.000000)
  mov_sat r8.w, r7.z
  eq r8.w, r7.z, r8.w
  if_nz r8.w
    mov r8.w, l(0)
    mov r11.x, l(0)
    loop 
      ge r11.y, r8.w, l(3.000000)
      breakc_nz r11.y
      ftou r11.y, r8.w
      add r11.zw, r9.yyyz, -cb2[r11.y + 20].xxxy
      max r11.z, |r11.w|, |r11.z|
      mul r11.x, r11.z, cb2[r11.y + 20].z
      lt r11.y, r11.x, l(1.000000)
      if_nz r11.y
        break 
      endif 
      add r8.w, r8.w, l(1.000000)
      mov r11.x, l(0)
    endloop 
  else 
    mov r8.w, l(3.000000)
    mov r11.x, l(0)
  endif 
  ge r11.y, r8.w, l(3.000000)
  if_nz r11.y
    mul r12.xyz, l(128.000000, 0.500000, 0.500000, 0.000000), cb2[27].zxyz
    rcp r13.xz, r12.xxxx
    mov r13.y, -r13.z
    mad r12.xyz, r9.yzyy, r13.xyzx, r12.yzyy
    add r13.xyz, l(-0.00781250, -0.00781250, -0.00781250, 0.000000), cb2[27].xyxx
    max r12.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    min r12.xyz, r13.xyzx, r12.xyzx
    mul r11.zw, r12.zzzy, cb2[32].xxxx
    round_ni r11.zw, r11.zzzw
    mul r11.w, r11.w, cb2[27].x
    mad r11.z, r11.w, cb2[32].x, r11.z
    ftou r11.z, r11.z
    iadd r11.z, r11.z, cb2[32].y
    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r11.z, l(0), t23.xxxx
    and r12.w, r11.w, l(0x40000000)
    ishl r13.x, r11.w, l(2)
    if_z r12.w
      and r12.w, r11.w, l(0x01ffffff)
      iadd r14.x, r11.z, r12.w
      ushr r11.z, r11.w, l(25)
      utof r11.z, r11.z
      mul r12.xyz, r11.zzzz, r12.xyzx
      frc r12.xyz, r12.xyzx
      mul r12.xyz, r12.xyzx, l(128.000000, 128.000000, 128.000000, 0.000000)
      ftou r12.xyz, r12.xyzx
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.z, r14.x, l(0), t23.xxxx
      ushr r11.zw, r12.zzzy, l(0, 0, 6, 6)
      and r12.w, r14.z, l(0xc0000000)
      iadd r13.y, r14.x, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.y, r13.y, l(0), t23.xxxx
      movc r11.w, r11.w, r14.z, r13.y
      ushr r13.y, r11.w, l(13)
      movc r11.z, r11.z, r13.y, r11.w
      and r11.z, r11.z, l(8191)
      iadd r15.x, r11.z, r14.x
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.z, r15.x, l(0), t23.xxxx
      mov r14.y, l(0)
      mov r15.y, l(1)
      movc r13.yzw, r12.wwww, r14.xxyz, r15.xxyz
      movc r15.yz, r12.wwww, l(0,6,1,0), l(0,5,2,0)
      ushr r11.zw, r12.zzzy, r15.yyyy
      and r11.zw, r11.zzzw, l(0, 0, 1, 1)
      and r14.w, r13.w, l(0xc0000000)
      iadd r15.y, r13.y, l(1)
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.y, r15.y, l(0), t23.xxxx
      movc r11.w, r11.w, r13.w, r15.y
      ushr r15.y, r11.w, l(13)
      movc r11.z, r11.z, r15.y, r11.w
      and r11.z, r11.z, l(8191)
      iadd r15.x, r11.z, r13.y
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.w, r15.x, l(0), t23.xxxx
      movc r13.yzw, r14.wwww, r13.yyzw, r15.xxzw
      movc r13.yzw, r12.wwww, r14.xxyz, r13.yyzw
      and r11.z, r13.w, l(0xc0000000)
      if_z r11.z
        iadd r11.z, -r13.z, l(6)
        ushr r11.zw, r12.zzzy, r11.zzzz
        or r12.w, r13.w, l(0x40000000)
        bfi r11.w, l(1), l(1), r11.w, l(0)
        bfi r11.z, l(1), l(0), r11.z, r11.w
        imul null, r11.z, r11.z, l(10)
        ushr r11.z, r12.w, r11.z
        and r11.z, r11.z, l(1023)
        iadd r14.x, r11.z, r13.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r14.w, r14.x, l(0), t23.xxxx
        iadd r14.yz, r13.zzzz, l(0, 1, 2, 0)
        iadd r11.z, -r14.y, l(6)
        ushr r11.zw, r12.zzzy, r11.zzzz
        and r12.w, r14.w, l(0xc0000000)
        or r13.z, r14.w, l(0x40000000)
        bfi r11.w, l(1), l(1), r11.w, l(0)
        bfi r11.z, l(1), l(0), r11.z, r11.w
        imul null, r11.z, r11.z, l(10)
        ushr r11.z, r13.z, r11.z
        and r11.z, r11.z, l(1023)
        iadd r15.x, r11.z, r14.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r15.z, r15.x, l(0), t23.xxxx
        mov r15.y, r14.z
        movc r15.xyz, r12.wwww, r14.xywx, r15.xyzx
        iadd r11.z, -r15.y, l(6)
        ushr r11.zw, r12.zzzy, r11.zzzz
        and r13.z, r15.z, l(0xc0000000)
        or r14.y, r15.z, l(0x40000000)
        bfi r11.w, l(1), l(1), r11.w, l(0)
        bfi r11.z, l(1), l(0), r11.z, r11.w
        imul null, r11.z, r11.z, l(10)
        ushr r11.z, r14.y, r11.z
        and r11.z, r11.z, l(1023)
        iadd r16.x, r11.z, r15.x
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r16.y, r16.x, l(0), t23.xxxx
        movc r11.zw, r13.zzzz, r15.xxxz, r16.xxxy
        movc r13.yw, r12.wwww, r14.xxxw, r11.zzzw
      endif 
      and r11.z, r13.w, l(0xc0000000)
      if_z r11.z
        ubfe r11.w, l(14), l(15), r13.w
        utof r11.w, r11.w
        mul r11.w, r11.w, cb2[27].w
        mul r11.w, r11.w, l(0.00006104)
        and r14.xy, r13.wwww, l(0x00007fff, 0x20000000, 0, 0)
        utof r12.w, r14.x
        mul r12.w, r12.w, cb2[27].w
        mul r12.w, r12.w, l(0.00003052)
        and r13.z, r12.y, l(3)
        iadd r13.z, r13.z, r13.y
        iadd r13.z, r13.z, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r13.z, r13.z, l(0), t23.xxxx
        bfi r14.xzw, l(2, 0, 2, 1), l(3, 0, 1, 4), r12.xxyz, l(0, 0, 0, 0)
        ushr r12.x, r13.z, r14.x
        and r12.x, r12.x, l(255)
        utof r12.x, r12.x
        mul r12.x, r12.w, r12.x
        mad r12.x, r12.x, l(0.00392157), r11.w
        iadd r12.y, r14.z, l(1)
        ubfe r12.z, l(1), l(1), r12.z
        iadd r12.y, r12.z, r12.y
        iadd r12.y, r12.y, r13.y
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.y, r12.y, l(0), t23.xxxx
        ushr r12.y, r12.y, r14.w
        and r12.y, r12.y, l(0x0000ffff)
        utof r12.y, r12.y
        mul r12.y, r12.w, r12.y
        mad r11.w, r12.y, l(0.00001526), r11.w
        movc r13.x, r14.y, r12.x, r11.w
      else 
        and r11.w, r13.w, l(0x80000000)
        iadd r12.x, r13.y, l(1)
        ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r12.x, r12.x, l(0), t23.xxxx
        movc r11.w, r11.w, r12.x, l(0)
        ishl r12.x, r13.w, l(2)
        ushr r12.y, r11.w, l(16)
        f16tof32 r12.y, r12.y
        and r11.w, r11.w, l(0x0000ffff)
        f16tof32 r11.w, r11.w
        mad r12.x, r9.y, r12.y, r12.x
        mad r11.w, r9.z, r11.w, r12.x
        movc r13.x, r11.z, r11.w, r13.x
      endif 
    endif 
    mad r9.w, -cb2[27].z, l(2.000000), r9.w
    lt r9.w, r13.x, r9.w
    movc r7.w, r9.w, l(0), l(1.000000)
  endif 
  if_z r11.y
    if_z cb2[58].y
      ftou r9.w, r8.w
      add r11.yz, r9.yyzy, -cb2[r9.w + 20].xxyx
      mul r11.yz, r11.yyzy, cb2[r9.w + 20].zzzz
      mad r12.xy, r11.yzyy, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      itof r9.w, cb2[26].y
      add r12.z, r8.w, r9.w
      sample_c_lz_indexable(texture2darray)(float,float,float,float) r9.w, r12.xyzx, t13.xxxx, s13, r7.z
      sample_l_indexable(texture2darray)(float,float,float,float) r11.y, r12.xyzx, t31.yxzw, s0, l(0.000000)
      add r9.w, r9.w, r11.y
      add_sat r9.w, r9.w, l(-1.000000)
      mul r11.y, r9.w, r9.w
      mul r7.w, r9.w, r11.y
    endif 
    if_nz cb2[58].y
      mov r12.x, -r7.x
      ftou r9.w, r8.w
      add r8.w, r8.w, l(1.000000)
      min r8.w, r8.w, l(2.000000)
      ftou r8.w, r8.w
      add r11.x, -r11.x, l(1.000000)
      mul r11.x, r11.x, l(28.000000)
      ftou r11.x, r11.x
      add r11.yz, r9.yyzy, -cb2[r9.w + 20].xxyx
      mul r11.yz, r11.yyzy, cb2[r9.w + 20].zzzz
      mad r11.yz, r11.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      add r9.yz, r9.yyzy, -cb2[r8.w + 20].xxyx
      mul r9.yz, r9.yyzy, cb2[r8.w + 20].zzzz
      mad r9.yz, r9.yyzy, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      mov r12.y, r8.x
      mov r12.z, r7.x
      mov r11.w, l(0)
      mov r12.w, l(0)
      loop 
        uge r13.x, r12.w, l(8)
        breakc_nz r13.x
        ult r13.x, r11.x, r12.w
        movc r13.yz, r13.xxxx, r9.yyzy, r11.yyzy
        movc r13.w, r13.x, cb2[r8.w + 20].w, cb2[r9.w + 20].w
        movc r13.x, r13.x, r8.w, r9.w
        dp2 r14.x, icb[r12.w + 0].yxyy, r12.xyxx
        dp2 r14.y, icb[r12.w + 0].yxyy, r12.yzyy
        mad r14.xy, r14.xyxx, r13.wwww, r13.yzyy
        iadd r13.x, r13.x, cb2[26].y
        utof r14.z, r13.x
        sample_c_lz_indexable(texture2darray)(float,float,float,float) r13.x, r14.xyzx, t13.xxxx, s13, r7.z
        sample_l_indexable(texture2darray)(float,float,float,float) r13.y, r14.xyzx, t31.yxzw, s0, l(0.000000)
        add r13.x, r13.y, r13.x
        add_sat r13.x, r13.x, l(-1.000000)
        mad r11.w, r13.x, l(0.125000), r11.w
        iadd r12.w, r12.w, l(1)
      endloop 
      mul r7.z, r11.w, r11.w
      mul r7.w, r11.w, r7.z
    endif 
  endif 
endif 
lt r7.z, l(0.000000), r6.w
if_nz r7.z
  lt r7.z, l(0.000000), r7.w
  if_nz r7.z
    mul r7.z, r4.w, cb2[18].w
    mul r7.z, r6.w, r7.z
    if_nz cb2[23].x
      add r11.xyz, v7.xyzx, cb1[24].xyzx
      mov r11.w, l(1.000000)
      dp4 r8.w, cb2[24].xyzw, r11.xyzw
      dp4 r9.y, cb2[25].xyzw, r11.xyzw
      frc r11.x, r8.w
      frc r11.y, r9.y
      iadd r8.w, l(-1), cb2[23].x
      utof r11.z, r8.w
      sample_l_indexable(texture2darray)(float,float,float,float) r9.yzw, r11.xyzx, t20.wxyz, s2, l(0.000000)
      add r9.yzw, r9.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
      mad r9.yzw, cb2[23].yyyy, r9.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
      mul r9.yzw, r9.yyzw, cb2[18].xxyz
    else 
      mov r9.yzw, cb2[18].xxyz
    endif 
    ushr r8.w, cb2[53].x, l(16)
    ult r11.x, l(0), r8.w
    and r11.x, r3.w, r11.x
    if_nz r11.x
      iadd r8.w, r8.w, cb2[0].x
      iadd r8.w, r8.w, l(-1)
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.x, r8.w, l(52), t12.xxxx
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r8.w, l(68), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.xyzw, r8.w, l(84), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r8.w, l(132), t12.xyzw
      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r8.w, l(148), t12.xyzw
      mad r11.y, |r6.z|, l(-0.200000), l(0.400000)
      mad r16.xyz, r1.xyzx, r11.yyyy, v7.xyzx
      mov r16.w, l(1.000000)
      dp4 r12.x, r12.xyzw, r16.xyzw
      dp4 r12.y, r13.xyzw, r16.xyzw
      mad r11.yz, r12.xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
      add r11.yz, r15.zzwz, r11.yyzy
      mul r11.yz, r15.xxyx, r11.yyzy
      div r12.xy, r11.xxxx, r14.xzxx
      add r12.zw, -r12.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
      ge r12.zw, r11.yyyz, r12.zzzw
      ge r12.xy, r12.xyxx, r11.yzyy
      or r12.xy, r12.xyxx, r12.zwzz
      or r11.w, r12.y, r12.x
      if_z r11.w
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.w, r8.w, l(28), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r8.w, l(100), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.xy, r8.w, l(164), t12.xyxx
        dp4 r8.w, r12.xyzw, r16.xyzw
        mov_sat r11.yz, r11.yyzy
        mad r12.xy, r11.yzyy, r14.xzxx, r14.ywyy
        add r8.w, r13.x, r8.w
        div r8.w, r8.w, r13.y
        max r8.w, r8.w, l(0.00006104)
        and r11.y, r11.w, l(0x0000ffff)
        if_nz cb2[58].y
          mov r13.x, -r7.x
          utof r14.z, r11.y
          mov r13.y, r8.x
          mov r13.z, r7.x
          mov r11.zw, l(0,0,0,0)
          loop 
            ige r12.w, r11.w, l(8)
            breakc_nz r12.w
            dp2 r15.x, icb[r11.w + 0].yxyy, r13.xyxx
            dp2 r15.y, icb[r11.w + 0].yxyy, r13.yzyy
            mad r14.xy, r15.xyxx, r11.xxxx, r12.xyxx
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r14.xyzx, t9.xxxx, s13, r8.w
            mad r11.z, r12.w, l(0.125000), r11.z
            iadd r11.w, r11.w, l(1)
          endloop 
        else 
          utof r12.z, r11.y
          sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.z, r12.xyzx, t9.xxxx, s13, r8.w
        endif 
        mul r8.w, r11.z, r11.z
        mul r8.w, r11.z, r8.w
      else 
        mov r8.w, l(1.000000)
      endif 
      mul r7.w, r7.w, r8.w
    else 
      and r8.w, cb2[53].x, l(0x0000ffff)
      ult r11.x, l(0), r8.w
      not r11.y, r3.w
      and r11.x, r11.y, r11.x
      if_nz r11.x
        iadd r8.w, r8.w, cb2[0].x
        iadd r8.w, r8.w, l(-1)
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.x, r8.w, l(52), t12.xxxx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r8.w, l(68), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.xyzw, r8.w, l(84), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r14.xyzw, r8.w, l(132), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.xyzw, r8.w, l(148), t12.xyzw
        mad r11.y, |r6.z|, l(-0.200000), l(0.400000)
        mad r16.xyz, r1.xyzx, r11.yyyy, v7.xyzx
        mov r16.w, l(1.000000)
        dp4 r12.x, r12.xyzw, r16.xyzw
        dp4 r12.y, r13.xyzw, r16.xyzw
        mad r11.yz, r12.xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
        add r11.yz, r15.zzwz, r11.yyzy
        mul r11.yz, r15.xxyx, r11.yyzy
        div r12.xy, r11.xxxx, r14.xzxx
        add r12.zw, -r12.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
        ge r12.zw, r11.yyyz, r12.zzzw
        ge r12.xy, r12.xyxx, r11.yzyy
        or r12.xy, r12.xyxx, r12.zwzz
        or r11.w, r12.y, r12.x
        if_z r11.w
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r11.w, r8.w, l(28), t12.xxxx
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r12.xyzw, r8.w, l(100), t12.xyzw
          ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r13.xy, r8.w, l(164), t12.xyxx
          dp4 r8.w, r12.xyzw, r16.xyzw
          mov_sat r11.yz, r11.yyzy
          mad r12.xy, r11.yzyy, r14.xzxx, r14.ywyy
          add r8.w, r13.x, r8.w
          div r8.w, r8.w, r13.y
          max r8.w, r8.w, l(0.00006104)
          and r11.y, r11.w, l(0x0000ffff)
          if_nz cb2[58].y
            mov r13.x, -r7.x
            utof r14.z, r11.y
            mov r13.y, r8.x
            mov r13.z, r7.x
            mov r11.zw, l(0,0,0,0)
            loop 
              ige r12.w, r11.w, l(8)
              breakc_nz r12.w
              dp2 r15.x, icb[r11.w + 0].yxyy, r13.xyxx
              dp2 r15.y, icb[r11.w + 0].yxyy, r13.yzyy
              mad r14.xy, r15.xyxx, r11.xxxx, r12.xyxx
              sample_c_lz_indexable(texture2darray)(float,float,float,float) r12.w, r14.xyzx, t9.xxxx, s13, r8.w
              mad r11.z, r12.w, l(0.125000), r11.z
              iadd r11.w, r11.w, l(1)
            endloop 
          else 
            utof r12.z, r11.y
            sample_c_lz_indexable(texture2darray)(float,float,float,float) r11.z, r12.xyzx, t9.xxxx, s13, r8.w
          endif 
          mul r8.w, r11.z, r11.z
          mul r8.w, r11.z, r8.w
        else 
          mov r8.w, l(1.000000)
        endif 
        mul r7.w, r7.w, r8.w
      endif 
    endif 
    mad r8.w, -r6.x, l(0.500000), l(1.000000)
    mad r8.w, -r6.w, r8.w, l(1.000000)
    mul r8.w, r8.w, r8.w
    mad r8.w, -r8.w, l(0.620000), l(0.620000)
    add r8.w, -r6.w, r8.w
    mad r8.w, r5.y, r8.w, r6.w
    mul r8.w, r7.w, r8.w
    mul r11.xyz, r9.yzwy, r8.wwww
    lt r6.z, l(0.000000), r6.z
    mad r12.xyz, -v7.xyzx, r3.xxxx, cb2[17].xyzx
    dp3 r3.x, r12.xyzx, r12.xyzx
    rsq r3.x, r3.x
    mul r12.xyz, r3.xxxx, r12.xyzx
    dp3 r3.x, r12.xyzx, r4.xyzx
    dp3 r8.w, r1.xyzx, r12.xyzx
    mad r12.x, |r8.w|, r4.w, -|r8.w|
    mad r8.w, |r8.w|, r12.x, l(1.000000)
    mad r6.w, r6.w, r5.z, r5.w
    mul r8.w, r8.w, r8.w
    mul r6.w, r6.w, r8.w
    rcp r6.w, r6.w
    mul r6.w, r7.z, r6.w
    mul r6.w, r6.w, r7.w
    mul r6.w, r6.w, l(0.250000)
    mul r12.xyz, r9.yzwy, r6.wwww
    add_sat r3.x, -r3.x, l(1.000000)
    mul r7.z, r3.x, r3.x
    mul r7.z, r7.z, r7.z
    mul r3.x, r3.x, r7.z
    mul r3.x, r3.x, r6.w
    mul r13.xyz, r9.zwyz, r3.xxxx
    mov r11.w, r13.z
    and r11.xyzw, r6.zzzz, r11.xyzw
    mov r13.zw, r12.xxxy
    and r13.xyzw, r6.zzzz, r13.xyzw
    and r3.x, r6.z, r12.z
  else 
    mov r11.xyzw, l(0,0,0,0)
    mov r13.xyzw, l(0,0,0,0)
    mov r3.x, l(0)
  endif 
else 
  mov r11.xyzw, l(0,0,0,0)
  mov r13.xyzw, l(0,0,0,0)
  mov r3.x, l(0)
endif 
mul r2.w, r2.w, l(0.00781250)
min r2.w, r2.w, l(15.000000)
ftou r2.w, r2.w
ushr r12.xy, r3.yzyy, l(6, 6, 0, 0)
ishl r12.z, r2.w, l(4)
mov r14.x, -r7.x
not r2.w, r3.w
mad r3.y, -r6.x, l(0.500000), l(1.000000)
mov r15.xy, l(0,0,0,0)
mov r16.w, l(0)
mov r17.xyz, v7.xyzx
mov r17.w, l(1.000000)
mov r18.w, l(1.000000)
mov r14.z, r7.x
mov r19.w, l(1.000000)
mov r20.z, l(1.000000)
mov r21.w, l(1.000000)
mov r14.yw, r8.xxxx
mov r7.y, r14.w
mov r22.w, l(1.000000)
mov r8.y, r14.x
mov r8.z, r7.x
mov r23.w, l(1.000000)
mov r24.x, r8.x
mov r24.y, r14.x
mov r24.z, r7.x
mov r25.x, r8.x
mov r25.y, r14.x
mov r25.z, r7.x
mov r26.x, r8.x
mov r26.y, r14.x
mov r26.z, r7.x
mov r9.yzw, r11.xxyz
mov r27.x, r11.w
mov r27.yz, r13.xxyx
mov r28.xy, r13.zwzz
mov r28.z, r3.x
mov r3.z, cb2[58].y
mov r6.z, l(0)
loop 
  uge r6.w, r6.z, cb2[0].x
  breakc_nz r6.w
  ushr r15.z, r6.z, l(5)
  iadd r16.xyz, r12.xyzx, r15.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r6.w, r16.xyzw, t6.yzwx
  mov r16.xyz, r9.yzwy
  mov r29.xyz, r27.xyzx
  mov r30.xyz, r28.xyzx
  mov r7.z, r3.z
  mov r7.w, r6.w
  loop 
    breakc_z r7.w
    firstbit_lo r8.w, r7.w
    ishl r12.w, l(1), r8.w
    and r15.z, r7.w, r12.w
    if_nz r15.z
      xor r7.w, r7.w, r12.w
      iadd r8.w, r6.z, r8.w
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r31.xyzw, r8.w, l(0), t11.xyzw
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r32.xy, r8.w, l(16), t11.xyxx
      add r31.xyz, r31.xyzx, -v7.xyzx
      mov r32.z, r31.w
      lt r31.xyz, |r31.xyzx|, r32.zxyz
      and r12.w, r31.y, r31.x
      and r12.w, r31.z, r12.w
      if_nz r12.w
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r31.xyzw, r8.w, l(0), t12.wxyz
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r32.xyzw, r8.w, l(16), t12.zxyw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r33.xyzw, r8.w, l(32), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r34.xyzw, r8.w, l(48), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r35.xyzw, r8.w, l(64), t12.yzwx
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r36.xyzw, r8.w, l(80), t12.xyzw
        ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r37.xyzw, r8.w, l(96), t12.yzwx
        ubfe r12.w, l(3), l(24), r32.w
        switch r12.w
          case l(4)
          lt r12.w, l(0.000000), r37.x
          mov r38.xy, r36.zwzz
          mov r38.z, r37.w
          mad r39.xyz, -r38.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r31.yzwy
          add r40.xyz, r39.xyzx, -v7.xyzx
          dp3 r15.z, r38.xyzx, r40.xyzx
          div_sat r15.w, -r15.z, r37.x
          mad r41.xyz, r15.wwww, r38.xyzx, r39.xyzx
          movc r41.xyz, r12.wwww, r41.xyzx, r31.yzwy
          add r41.xyz, r41.xyzx, -v7.xyzx
          dp3 r20.w, r41.xyzx, r41.xyzx
          rsq r24.w, r20.w
          mul r41.xyz, r24.wwww, r41.xyzx
          dp3 r24.w, r1.xyzx, r41.xyzx
          mov_sat r25.w, r24.w
          lt r26.w, l(0.000000), r25.w
          if_nz r26.w
            sqrt r26.w, r20.w
            mul r27.w, r34.x, r34.x
            div r20.w, r27.w, r20.w
            min r20.w, r20.w, l(1.000000)
            mad_sat r41.xy, r26.wwww, r33.xzxx, r33.ywyy
            mul r41.zw, r41.xxxy, r41.xxxy
            mad r41.xy, r41.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
            mul r41.xy, r41.xyxx, r41.zwzz
            mul r20.w, r20.w, r41.x
            mul r20.w, r41.y, r20.w
            lt r26.w, l(0.000000), r20.w
            if_nz r26.w
              ubfe r26.w, l(3), l(27), r32.w
              ine r26.w, r26.w, l(1)
              if_nz r26.w
                mad r26.w, |r24.w|, l(-0.200000), l(0.400000)
                mad r41.xyz, r1.xyzx, r26.wwww, v7.xyzx
                add r41.xyz, -r35.xyzx, r41.xyzx
                max r26.w, |r41.z|, |r41.y|
                max r26.w, r26.w, |r41.x|
                div r26.w, r36.x, r26.w
                add r26.w, r36.y, r26.w
                dp3 r27.w, r41.xyzx, r41.xyzx
                rsq r27.w, r27.w
                max r26.w, r26.w, l(0.00006104)
                and r28.w, r32.w, l(0x0000ffff)
                utof r42.w, r28.w
                mov r28.w, l(0)
                mov r29.w, l(0)
                loop 
                  ige r30.w, r29.w, l(8)
                  breakc_nz r30.w
                  dp2 r43.y, icb[r29.w + 0].yxyy, r14.xyxx
                  dp2 r43.z, icb[r29.w + 0].yxyy, r14.yzyy
                  mul r43.yz, r34.yyyy, r43.yyzy
                  mul r43.x, r9.x, r43.y
                  mul r43.w, r5.x, r43.y
                  mad r42.xyz, r41.xyzx, r27.wwww, r43.xzwx
                  sample_c_lz_indexable(texturecubearray)(float,float,float,float) r30.w, r42.xyzw, t10.xxxx, s13, r26.w
                  mad r28.w, r30.w, l(0.125000), r28.w
                  iadd r29.w, r29.w, l(1)
                endloop 
              else 
                mov r28.w, l(1.000000)
              endif 
              mul r20.w, r20.w, r28.w
              lt r26.w, l(0.000000), r20.w
              if_nz r26.w
                mul r26.w, r4.w, r32.x
                mul r26.w, r26.w, l(0.250000)
                dp3 r27.w, r38.xyzx, r10.xyzx
                dp3 r29.w, r10.xyzx, r40.xyzx
                mad r30.w, -r27.w, r27.w, r37.x
                mad r15.z, r27.w, r29.w, -r15.z
                div_sat r15.z, r15.z, r30.w
                div r27.w, r30.w, r37.x
                mul r27.w, r27.w, l(10.000000)
                min r27.w, r27.w, l(1.000000)
                add r15.z, -r15.w, r15.z
                mad r15.z, r27.w, r15.z, r15.w
                mad r38.xyz, r15.zzzz, r38.xyzx, r39.xyzx
                movc r38.xyz, r12.wwww, r38.xyzx, r31.yzwy
                add r38.xyz, r38.xyzx, -v7.xyzx
                dp3 r12.w, r38.xyzx, r38.xyzx
                rsq r12.w, r12.w
                mul r39.xyz, r12.wwww, r38.xyzx
                ubfe r15.z, l(4), l(16), r32.w
                ult r15.w, l(0), r15.z
                and r15.w, r3.w, r15.w
                if_nz r15.w
                  iadd r15.z, r15.z, cb2[0].x
                  iadd r15.z, r15.z, l(-1)
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.w, r15.z, l(52), t12.xxxx
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r40.xyzw, r15.z, l(100), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r15.z, l(116), t12.xyzw
                  mad r27.w, |r24.w|, l(-0.200000), l(0.400000)
                  mad r18.xyz, r1.xyzx, r27.wwww, v7.xyzx
                  dp4 r27.w, r40.xyzw, r18.xyzw
                  dp4 r29.w, r41.xyzw, r18.xyzw
                  lt r30.w, r29.w, r27.w
                  if_z r30.w
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r40.xyzw, r15.z, l(68), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r15.z, l(84), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.xyzw, r15.z, l(132), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r15.z, l(148), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r44.xy, r15.z, l(164), t12.xyxx
                    dp4 r40.x, r40.xyzw, r18.xyzw
                    dp4 r40.y, r41.xyzw, r18.xyzw
                    div r18.xy, r40.xyxx, r29.wwww
                    mad r18.xy, r18.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                    add r18.xy, r43.zwzz, r18.xyxx
                    mul r18.xy, r43.xyxx, r18.xyxx
                    div r40.xy, r15.wwww, r42.xzxx
                    add r40.zw, -r40.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                    ge r40.zw, r18.xxxy, r40.zzzw
                    ge r40.xy, r40.xyxx, r18.xyxx
                    or r40.xy, r40.xyxx, r40.zwzz
                    or r18.z, r40.y, r40.x
                    mov_sat r18.xy, r18.xyxx
                    mad r40.xy, r18.xyxx, r42.xzxx, r42.ywyy
                    mul r18.x, r29.w, r44.y
                    mad r18.y, r44.x, r29.w, r27.w
                    div r18.x, r18.y, r18.x
                  else 
                    mov r18.z, l(-1)
                  endif 
                  or r18.y, r30.w, r18.z
                  if_z r18.y
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.z, r15.z, l(28), t12.xxxx
                    max r18.x, r18.x, l(0.00006104)
                    and r15.z, r15.z, l(0x0000ffff)
                    if_nz r7.z
                      utof r41.z, r15.z
                      mov r18.yz, l(0,0,0,0)
                      loop 
                        ige r27.w, r18.z, l(8)
                        breakc_nz r27.w
                        dp2 r42.x, icb[r18.z + 0].yxyy, r14.xwxx
                        dp2 r42.y, icb[r18.z + 0].xyxx, r7.xyxx
                        mad r41.xy, r42.xyxx, r15.wwww, r40.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r27.w, r41.xyzx, t9.xxxx, s13, r18.x
                        mad r18.y, r27.w, l(0.125000), r18.y
                        iadd r18.z, r18.z, l(1)
                      endloop 
                    else 
                      utof r40.z, r15.z
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.y, r40.xyzx, t9.xxxx, s13, r18.x
                    endif 
                    mul r15.z, r18.y, r18.y
                    mul r15.z, r18.y, r15.z
                  else 
                    mov r15.z, l(1.000000)
                  endif 
                  mul r20.w, r15.z, r20.w
                else 
                  ubfe r15.z, l(4), l(20), r32.w
                  ult r15.w, l(0), r15.z
                  and r15.w, r2.w, r15.w
                  if_nz r15.w
                    iadd r15.z, r15.z, cb2[0].x
                    iadd r15.z, r15.z, l(-1)
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.w, r15.z, l(52), t12.xxxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r40.xyzw, r15.z, l(100), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r15.z, l(116), t12.xyzw
                    mad r18.x, |r24.w|, l(-0.200000), l(0.400000)
                    mad r19.xyz, r1.xyzx, r18.xxxx, v7.xyzx
                    dp4 r18.x, r40.xyzw, r19.xyzw
                    dp4 r18.z, r41.xyzw, r19.xyzw
                    lt r27.w, r18.z, r18.x
                    if_z r27.w
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r40.xyzw, r15.z, l(68), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r41.xyzw, r15.z, l(84), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.xyzw, r15.z, l(132), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r15.z, l(148), t12.xyzw
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r44.xy, r15.z, l(164), t12.xyxx
                      dp4 r40.x, r40.xyzw, r19.xyzw
                      dp4 r40.y, r41.xyzw, r19.xyzw
                      div r19.xy, r40.xyxx, r18.zzzz
                      mad r19.xy, r19.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                      add r19.xy, r43.zwzz, r19.xyxx
                      mul r19.xy, r43.xyxx, r19.xyxx
                      div r40.xy, r15.wwww, r42.xzxx
                      add r40.zw, -r40.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
                      ge r40.zw, r19.xxxy, r40.zzzw
                      ge r40.xy, r40.xyxx, r19.xyxx
                      or r40.xy, r40.xyxx, r40.zwzz
                      or r19.z, r40.y, r40.x
                      mov_sat r19.xy, r19.xyxx
                      mad r40.xy, r19.xyxx, r42.xzxx, r42.ywyy
                      mul r19.x, r18.z, r44.y
                      mad r18.x, r44.x, r18.z, r18.x
                      div r18.x, r18.x, r19.x
                    else 
                      mov r19.z, l(-1)
                    endif 
                    or r18.z, r27.w, r19.z
                    if_z r18.z
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r15.z, r15.z, l(28), t12.xxxx
                      max r18.x, r18.x, l(0.00006104)
                      and r15.z, r15.z, l(0x0000ffff)
                      if_nz r7.z
                        utof r19.z, r15.z
                        mov r18.z, l(0)
                        mov r27.w, l(0)
                        loop 
                          ige r29.w, r27.w, l(8)
                          breakc_nz r29.w
                          dp2 r41.x, icb[r27.w + 0].xyxx, r8.xyxx
                          dp2 r41.y, icb[r27.w + 0].yxyy, r8.xzxx
                          mad r19.xy, r41.xyxx, r15.wwww, r40.xyxx
                          sample_c_lz_indexable(texture2darray)(float,float,float,float) r19.x, r19.xyzx, t9.xxxx, s13, r18.x
                          mad r18.z, r19.x, l(0.125000), r18.z
                          iadd r27.w, r27.w, l(1)
                        endloop 
                      else 
                        utof r40.z, r15.z
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r18.z, r40.xyzx, t9.xxxx, s13, r18.x
                      endif 
                      mul r15.z, r18.z, r18.z
                      mul r15.z, r18.z, r15.z
                    else 
                      mov r15.z, l(1.000000)
                    endif 
                    mul r20.w, r15.z, r20.w
                  endif 
                endif 
                mad r15.z, -r25.w, r3.y, l(1.000000)
                mul r15.z, r15.z, r15.z
                mad r15.z, -r15.z, l(0.620000), l(0.620000)
                add r15.z, -r25.w, r15.z
                mad r15.z, r5.y, r15.z, r25.w
                mul r15.z, r20.w, r15.z
                mov r32.x, r31.x
                lt r15.w, l(0.000000), r24.w
                mad r19.xyz, r15.zzzz, r32.xyzx, r16.xyzx
                dp3_sat r15.z, r1.xyzx, r39.xyzx
                mad r38.xyz, r38.xyzx, r12.wwww, r4.xyzx
                dp3 r12.w, r38.xyzx, r38.xyzx
                rsq r12.w, r12.w
                mul r38.xyz, r12.wwww, r38.xyzx
                dp3 r12.w, r38.xyzx, r4.xyzx
                dp3 r18.x, r1.xyzx, r38.xyzx
                mad r24.w, |r18.x|, r4.w, -|r18.x|
                mad r18.x, |r18.x|, r24.w, l(1.000000)
                mad r24.w, r15.z, r5.z, r5.w
                mul r18.x, r18.x, r18.x
                mul r18.x, r24.w, r18.x
                rcp r18.x, r18.x
                mul r15.z, r26.w, r15.z
                mul r15.z, r15.z, r18.x
                mul r15.z, r20.w, r15.z
                mad r38.xyz, r15.zzzz, r32.xyzx, r30.xyzx
                add_sat r12.w, -r12.w, l(1.000000)
                mul r18.x, r12.w, r12.w
                mul r18.x, r18.x, r18.x
                mul r12.w, r12.w, r18.x
                mul r12.w, r12.w, r15.z
                mad r39.xyz, r12.wwww, r32.xyzx, r29.xyzx
                movc r16.xyz, r15.wwww, r19.xyzx, r16.xyzx
                movc r29.xyz, r15.wwww, r39.xyzx, r29.xyzx
                movc r30.xyz, r15.wwww, r38.xyzx, r30.xyzx
              endif 
            endif 
          endif 
          break 
          case l(2)
          mov r19.xy, r34.zwzz
          mov r19.z, r35.w
          add r19.xyz, r19.xyzx, -v7.xyzx
          dp3 r12.w, r19.xyzx, r19.xyzx
          rsq r12.w, r12.w
          mul r38.xyz, r12.wwww, r19.xyzx
          dp3 r15.z, r1.xyzx, r38.xyzx
          mov_sat r15.w, r15.z
          lt r18.x, l(0.000000), r15.w
          if_nz r18.x
            ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r38.xyzw, r8.w, l(112), t12.yzwx
            ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r39.xyzw, r8.w, l(128), t12.zxyw
            mov r40.xyz, r38.xyzx
            mov r40.w, r39.y
            dp4 r18.x, r40.xyzw, r17.xyzw
            lt r20.w, r18.x, l(1.000000)
            if_nz r20.w
              mov r41.xyz, l(1.000000,1.000000,1.000000,0)
              mov r20.w, l(0)
            else 
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r42.xyzw, r8.w, l(172), t12.yzwx
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r43.xyzw, r8.w, l(188), t12.wxyz
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r44.xyzw, r8.w, l(204), t12.xyzw
              ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r24.w, r8.w, l(236), t12.xxxx
              add r45.xyz, r31.yzwy, -v7.xyzx
              mul r25.w, r34.x, r34.x
              dp3 r26.w, r45.xyzx, r45.xyzx
              div r25.w, r25.w, r26.w
              min r25.w, r25.w, l(1.000000)
              mad_sat r33.xy, r18.xxxx, r33.xzxx, r33.ywyy
              mul r33.zw, r33.xxxy, r33.xxxy
              mad r33.xy, r33.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
              mul r33.xy, r33.xyxx, r33.zwzz
              mul r25.w, r25.w, r33.x
              mul r25.w, r33.y, r25.w
              mov r35.w, r36.x
              dp4 r33.x, r35.xyzw, r17.xyzw
              mov r45.xyz, r36.yzwy
              mov r45.w, r37.w
              dp4 r33.y, r45.xyzw, r17.xyzw
              div r20.xy, r33.xyxx, r18.xxxx
              lt r18.x, r42.w, l(0.00048828)
              if_nz r18.x
                mov r43.y, r44.x
                mad_sat r33.xy, |r20.xyxx|, r43.zwzz, r43.xyxx
                mul r33.zw, r33.xxxy, r33.xxxy
                mad r33.xy, r33.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
                mul r33.xy, r33.xyxx, r33.zwzz
                mul r18.x, r33.y, r33.x
              else 
                mov r42.w, r43.y
                mul_sat r33.xyzw, |r20.yyxx|, r42.xyzw
                log r33.xyzw, r33.xyzw
                mul r33.xyzw, r33.xyzw, r43.xxxx
                exp r33.xyzw, r33.xyzw
                add r33.xy, r33.zwzz, r33.xyxx
                log r33.xy, r33.xyxx
                mul r33.xy, r33.xyxx, r44.xxxx
                exp r33.xy, r33.xyxx
                mul r26.w, r33.x, r43.z
                mad r27.w, r43.w, r33.y, l(-1.000000)
                mad r26.w, r43.w, r33.y, -r26.w
                div_sat r26.w, r27.w, r26.w
                mul r27.w, r26.w, r26.w
                mad r26.w, r26.w, l(-2.000000), l(3.000000)
                mul r18.x, r26.w, r27.w
              endif 
              mul r20.w, r18.x, r25.w
              and r18.x, r24.w, l(255)
              if_nz r18.x
                ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r33.xyz, r8.w, l(220), t12.xyzx
                dp3 r24.w, r44.yzwy, r20.xyzx
                dp3 r20.x, r33.xyzx, r20.xyzx
                frc r33.x, r24.w
                frc r33.y, r20.x
                iadd r18.x, r18.x, l(-1)
                utof r33.z, r18.x
                sample_l_indexable(texture2darray)(float,float,float,float) r41.xyz, r33.xyzx, t20.xyzw, s2, l(0.000000)
              else 
                mov r41.xyz, l(1.000000,1.000000,1.000000,0)
              endif 
            endif 
            mov r31.yz, r32.yyzy
            mul r31.xyz, r41.xyzx, r31.xyzx
            lt r18.x, l(0.000000), r20.w
            if_nz r18.x
              ubfe r18.x, l(3), l(27), r32.w
              ine r18.x, r18.x, l(1)
              if_nz r18.x
                mad r18.x, |r15.z|, l(-0.200000), l(0.400000)
                mad r21.xyz, r1.xyzx, r18.xxxx, v7.xyzx
                mov r38.xyz, r37.xyzx
                dp4 r18.x, r38.xyzw, r21.xyzw
                dp4 r20.x, r40.xyzw, r21.xyzw
                ge r20.y, r20.x, r18.x
                if_nz r20.y
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r39.y, r8.w, l(144), t12.xxxx
                  mov r35.w, r36.x
                  dp4 r33.x, r35.xyzw, r21.xyzw
                  mov r37.xyz, r36.yzwy
                  dp4 r33.y, r37.xyzw, r21.xyzw
                  div r21.xy, r33.xyxx, r20.xxxx
                  mad_sat r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  mad r21.xy, r21.xyxx, r39.zwzz, r39.xyxx
                  div r8.w, r18.x, r20.x
                  max r8.w, r8.w, l(0.00006104)
                  and r18.x, r32.w, l(0x0000ffff)
                  if_nz r7.z
                    utof r33.z, r18.x
                    mov r20.xy, l(0,0,0,0)
                    loop 
                      ige r24.w, r20.y, l(8)
                      breakc_nz r24.w
                      dp2 r35.x, icb[r20.y + 0].xyxx, r24.xyxx
                      dp2 r35.y, icb[r20.y + 0].yxyy, r24.xzxx
                      mad r33.xy, r35.xyxx, r34.yyyy, r21.xyxx
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r24.w, r33.xyzx, t9.xxxx, s13, r8.w
                      mad r20.x, r24.w, l(0.125000), r20.x
                      iadd r20.y, r20.y, l(1)
                    endloop 
                  else 
                    utof r21.z, r18.x
                    sample_c_lz_indexable(texture2darray)(float,float,float,float) r20.x, r21.xyzx, t9.xxxx, s13, r8.w
                  endif 
                  mul r8.w, r20.x, r20.x
                  mul r8.w, r20.x, r8.w
                else 
                  mov r8.w, l(1.000000)
                endif 
              else 
                mov r8.w, l(1.000000)
              endif 
              mul r8.w, r8.w, r20.w
              lt r18.x, l(0.000000), r8.w
              if_nz r18.x
                mul r18.x, r4.w, r32.x
                mul r18.x, r15.w, r18.x
                ubfe r20.y, l(4), l(16), r32.w
                ult r20.w, l(0), r20.y
                and r20.w, r3.w, r20.w
                if_nz r20.w
                  iadd r20.y, r20.y, cb2[0].x
                  iadd r20.y, r20.y, l(-1)
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r20.w, r20.y, l(52), t12.xxxx
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r33.xyzw, r20.y, l(68), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r34.xyzw, r20.y, l(84), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r35.xyzw, r20.y, l(100), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r36.xyzw, r20.y, l(116), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r37.xyzw, r20.y, l(132), t12.xyzw
                  ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r38.xyzw, r20.y, l(148), t12.xyzw
                  mad r21.x, |r15.z|, l(-0.200000), l(0.400000)
                  mad r22.xyz, r1.xyzx, r21.xxxx, v7.xyzx
                  dp4 r21.x, r33.xyzw, r22.xyzw
                  dp4 r21.y, r34.xyzw, r22.xyzw
                  dp4 r21.z, r35.xyzw, r22.xyzw
                  dp4 r22.x, r36.xyzw, r22.xyzw
                  lt r22.y, r22.x, r21.z
                  div r21.xy, r21.xyxx, r22.xxxx
                  mad r21.xy, r21.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                  add r21.xy, r38.zwzz, r21.xyxx
                  mul r21.xy, r38.xyxx, r21.xyxx
                  div r32.xy, r20.wwww, r37.xzxx
                  add r33.xy, -r32.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                  ge r33.xy, r21.xyxx, r33.xyxx
                  ge r32.xy, r32.xyxx, r21.xyxx
                  or r32.xy, r32.xyxx, r33.xyxx
                  or r22.z, r32.y, r32.x
                  or r22.y, r22.y, r22.z
                  if_z r22.y
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r22.y, r20.y, l(28), t12.xxxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r32.xy, r20.y, l(164), t12.xyxx
                    mov_sat r21.xy, r21.xyxx
                    mad r33.xy, r21.xyxx, r37.xzxx, r37.ywyy
                    mul r20.y, r22.x, r32.y
                    mad r21.x, r32.x, r22.x, r21.z
                    div r20.y, r21.x, r20.y
                    max r20.y, r20.y, l(0.00006104)
                    and r21.x, r22.y, l(0x0000ffff)
                    if_nz r7.z
                      utof r22.z, r21.x
                      mov r21.yz, l(0,0,0,0)
                      loop 
                        ige r24.w, r21.z, l(8)
                        breakc_nz r24.w
                        dp2 r32.x, icb[r21.z + 0].xyxx, r25.xyxx
                        dp2 r32.y, icb[r21.z + 0].yxyy, r25.xzxx
                        mad r22.xy, r32.xyxx, r20.wwww, r33.xyxx
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r20.y
                        mad r21.y, r22.x, l(0.125000), r21.y
                        iadd r21.z, r21.z, l(1)
                      endloop 
                    else 
                      utof r33.z, r21.x
                      sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.y, r33.xyzx, t9.xxxx, s13, r20.y
                    endif 
                    mul r20.y, r21.y, r21.y
                    mul r20.y, r21.y, r20.y
                  else 
                    mov r20.y, l(1.000000)
                  endif 
                  mul r8.w, r8.w, r20.y
                else 
                  ubfe r20.y, l(4), l(20), r32.w
                  ult r20.w, l(0), r20.y
                  and r20.w, r2.w, r20.w
                  if_nz r20.w
                    iadd r20.y, r20.y, cb2[0].x
                    iadd r20.y, r20.y, l(-1)
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r20.w, r20.y, l(52), t12.xxxx
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r32.xyzw, r20.y, l(68), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r33.xyzw, r20.y, l(84), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r34.xyzw, r20.y, l(100), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r35.xyzw, r20.y, l(116), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r36.xyzw, r20.y, l(132), t12.xyzw
                    ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r37.xyzw, r20.y, l(148), t12.xyzw
                    mad r21.x, |r15.z|, l(-0.200000), l(0.400000)
                    mad r23.xyz, r1.xyzx, r21.xxxx, v7.xyzx
                    dp4 r22.x, r32.xyzw, r23.xyzw
                    dp4 r22.y, r33.xyzw, r23.xyzw
                    dp4 r21.x, r34.xyzw, r23.xyzw
                    dp4 r21.z, r35.xyzw, r23.xyzw
                    lt r22.z, r21.z, r21.x
                    div r22.xy, r22.xyxx, r21.zzzz
                    mad r22.xy, r22.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                    add r22.xy, r37.zwzz, r22.xyxx
                    mul r22.xy, r37.xyxx, r22.xyxx
                    div r23.xy, r20.wwww, r36.xzxx
                    add r32.xy, -r23.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
                    ge r32.xy, r22.xyxx, r32.xyxx
                    ge r23.xy, r23.xyxx, r22.xyxx
                    or r23.xy, r23.xyxx, r32.xyxx
                    or r23.x, r23.y, r23.x
                    or r22.z, r22.z, r23.x
                    if_z r22.z
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r22.z, r20.y, l(28), t12.xxxx
                      ld_structured_indexable(structured_buffer, stride=240)(mixed,mixed,mixed,mixed) r23.xy, r20.y, l(164), t12.xyxx
                      mov_sat r22.xy, r22.xyxx
                      mad r32.xy, r22.xyxx, r36.xzxx, r36.ywyy
                      mul r20.y, r21.z, r23.y
                      mad r21.x, r23.x, r21.z, r21.x
                      div r20.y, r21.x, r20.y
                      max r20.y, r20.y, l(0.00006104)
                      and r21.x, r22.z, l(0x0000ffff)
                      if_nz r7.z
                        utof r22.z, r21.x
                        mov r21.z, l(0)
                        mov r23.x, l(0)
                        loop 
                          ige r23.y, r23.x, l(8)
                          breakc_nz r23.y
                          dp2 r33.x, icb[r23.x + 0].xyxx, r26.xyxx
                          dp2 r33.y, icb[r23.x + 0].yxyy, r26.xzxx
                          mad r22.xy, r33.xyxx, r20.wwww, r32.xyxx
                          sample_c_lz_indexable(texture2darray)(float,float,float,float) r22.x, r22.xyzx, t9.xxxx, s13, r20.y
                          mad r21.z, r22.x, l(0.125000), r21.z
                          iadd r23.x, r23.x, l(1)
                        endloop 
                      else 
                        utof r32.z, r21.x
                        sample_c_lz_indexable(texture2darray)(float,float,float,float) r21.z, r32.xyzx, t9.xxxx, s13, r20.y
                      endif 
                      mul r20.y, r21.z, r21.z
                      mul r20.y, r21.z, r20.y
                    else 
                      mov r20.y, l(1.000000)
                    endif 
                    mul r8.w, r8.w, r20.y
                  endif 
                endif 
                mad r20.y, -r15.w, r3.y, l(1.000000)
                mul r20.y, r20.y, r20.y
                mad r20.y, -r20.y, l(0.620000), l(0.620000)
                add r20.y, -r15.w, r20.y
                mad r20.y, r5.y, r20.y, r15.w
                mul r20.y, r8.w, r20.y
                lt r15.z, l(0.000000), r15.z
                mad r22.xyz, r20.yyyy, r31.xyzx, r16.xyzx
                mad r19.xyz, r19.xyzx, r12.wwww, r4.xyzx
                dp3 r12.w, r19.xyzx, r19.xyzx
                rsq r12.w, r12.w
                mul r19.xyz, r12.wwww, r19.xyzx
                dp3 r12.w, r19.xyzx, r4.xyzx
                dp3 r19.x, r1.xyzx, r19.xyzx
                mad r19.y, |r19.x|, r4.w, -|r19.x|
                mad r19.x, |r19.x|, r19.y, l(1.000000)
                mad r15.w, r15.w, r5.z, r5.w
                mul r19.x, r19.x, r19.x
                mul r15.w, r15.w, r19.x
                rcp r15.w, r15.w
                mul r15.w, r18.x, r15.w
                mul r8.w, r8.w, r15.w
                mul r8.w, r8.w, l(0.250000)
                mad r19.xyz, r8.wwww, r31.xyzx, r30.xyzx
                add_sat r12.w, -r12.w, l(1.000000)
                mul r15.w, r12.w, r12.w
                mul r15.w, r15.w, r15.w
                mul r12.w, r12.w, r15.w
                mul r8.w, r8.w, r12.w
                mad r23.xyz, r8.wwww, r31.xyzx, r29.xyzx
                movc r16.xyz, r15.zzzz, r22.xyzx, r16.xyzx
                movc r29.xyz, r15.zzzz, r23.xyzx, r29.xyzx
                movc r30.xyz, r15.zzzz, r19.xyzx, r30.xyzx
              endif 
            endif 
          endif 
          break 
          default 
          break 
        endswitch 
      endif 
    endif 
  endloop 
  mov r9.yzw, r16.xxyz
  mov r27.xyz, r29.xyzx
  mov r28.xyz, r30.xyzx
  iadd r6.z, r6.z, l(32)
endloop 
add r2.w, -r6.y, l(1.000000)
mul r3.x, r2.w, l(5.000000)
mad r3.y, r2.w, l(5.000000), l(-2.500000)
mul r3.y, r3.y, l(0.400000)
max r3.y, r3.y, l(0.000000)
mad r3.zw, -r2.wwww, l(0.000000, 0.000000, 10.000000, 5.000000), l(0.000000, 0.000000, 6.857410, 7.085000)
exp r3.z, r3.z
mul r3.z, r3.z, r6.x
mul r4.x, r2.w, r3.x
mad r3.w, -r4.x, l(2.015905), r3.w
exp r3.w, r3.w
mul r3.w, r3.w, r6.x
mul r3.yzw, r3.yyzw, l(0.000000, 100.000000, 9.136810, 9.708090)
max r3.z, r3.w, r3.z
max r3.z, r3.z, l(1.268160)
iadd r3.w, cb2[0].y, -cb2[58].x
and r4.x, r3.w, l(-32)
iadd r4.y, r3.w, -r4.x
and r4.z, cb2[0].y, l(-32)
iadd r4.w, -r4.z, cb2[0].y
mov r5.xy, l(0,0,0,0)
mov r7.w, l(0)
mov r8.yz, l(0,0,1.000000,0)
mov r11.xy, l(0,0,0,0)
mov r13.x, l(1.000000)
mov r14.xy, l(0,0,0,0)
mov r15.xy, l(0,0,0,0)
mov r16.xyzw, l(0,0,0,0)
mov r17.yzw, l(0,0,0,0)
mov r5.w, r4.x
loop 
  uge r6.z, r5.w, cb2[0].y
  breakc_nz r6.z
  ushr r5.z, r5.w, l(5)
  iadd r7.xyz, r5.xyzx, r12.xyzx
  ld_indexable(texture2darray)(uint,uint,uint,uint) r5.z, r7.xyzw, t7.yzxw
  ieq r6.z, r4.x, r5.w
  bfi r6.w, r4.y, l(0), l(0), r5.z
  movc r5.z, r6.z, r6.w, r5.z
  ieq r6.z, r4.z, r5.w
  ubfe r6.w, r4.w, l(0), r5.z
  movc r5.z, r6.z, r6.w, r5.z
  iadd r6.z, r5.w, cb2[0].x
  mov r18.xyzw, r16.xyzw
  mov r19.xyz, r17.yzwy
  mov r6.w, r5.z
  loop 
    breakc_z r6.w
    firstbit_lo r7.x, r6.w
    ishl r7.y, l(1), r7.x
    and r7.z, r6.w, r7.y
    if_nz r7.z
      xor r6.w, r6.w, r7.y
      iadd r7.y, r6.z, r7.x
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r20.xyzw, r7.y, l(0), t11.xyzw
      ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r21.xy, r7.y, l(16), t11.xyxx
      add r20.xyz, r20.xyzx, -v7.xyzx
      mov r21.z, r20.w
      lt r20.xyz, |r20.xyzx|, r21.zxyz
      and r7.y, r20.y, r20.x
      and r7.y, r20.z, r7.y
      if_nz r7.y
        iadd r7.x, r5.w, r7.x
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r20.xyzw, r7.x, l(0), t15.wxyz
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r7.yz, r7.x, l(96), t15.xxyx
        ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r21.xyzw, r7.x, l(116), t15.zwxy
        add r22.xyz, -r20.yzwy, v7.xyzx
        and r8.w, r21.w, l(0x0000ffff)
        ubfe r9.x, l(6), l(25), r21.w
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r23.xyzw, r8.w, l(0), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r24.xyzw, r8.w, l(16), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r25.xyzw, r8.w, l(32), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r26.xyzw, r8.w, l(48), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r29.xyzw, r8.w, l(64), t16.xyzw
        ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r30.xyzw, r8.w, l(80), t16.xyzw
        dp3 r11.w, r23.xyzx, r22.xyzx
        add_sat r11.w, r23.w, r11.w
        dp3 r12.w, r24.xyzx, r22.xyzx
        add_sat r12.w, r24.w, r12.w
        mul r11.w, r11.w, r12.w
        dp3 r12.w, r25.xyzx, r22.xyzx
        add_sat r12.w, r25.w, r12.w
        mul r11.w, r11.w, r12.w
        dp3 r12.w, r26.xyzx, r22.xyzx
        add_sat r12.w, r26.w, r12.w
        mul r11.w, r11.w, r12.w
        dp3 r12.w, r29.xyzx, r22.xyzx
        add_sat r12.w, r29.w, r12.w
        mul r11.w, r11.w, r12.w
        dp3 r12.w, r30.xyzx, r22.xyzx
        add_sat r12.w, r30.w, r12.w
        mul r8.x, r11.w, r12.w
        and r11.w, r7.y, l(1)
        movc r13.zw, r11.wwww, r8.xxxy, r8.zzzx
        mov r8.x, r7.y
        mov r23.xy, r13.zwzz
        mov r11.w, l(1)
        loop 
          ige r12.w, r11.w, r9.x
          breakc_nz r12.w
          iadd r12.w, r8.w, r11.w
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r24.xyzw, r12.w, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r25.xyzw, r12.w, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r26.xyzw, r12.w, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r29.xyzw, r12.w, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r30.xyzw, r12.w, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r12.w, l(80), t16.xyzw
          dp3 r12.w, r24.xyzx, r22.xyzx
          add_sat r12.w, r24.w, r12.w
          mul r12.w, r12.w, r23.x
          dp3 r14.w, r25.xyzx, r22.xyzx
          add_sat r14.w, r25.w, r14.w
          mul r12.w, r12.w, r14.w
          dp3 r14.w, r26.xyzx, r22.xyzx
          add_sat r14.w, r26.w, r14.w
          mul r12.w, r12.w, r14.w
          dp3 r14.w, r29.xyzx, r22.xyzx
          add_sat r14.w, r29.w, r14.w
          mul r12.w, r12.w, r14.w
          dp3 r14.w, r30.xyzx, r22.xyzx
          add_sat r14.w, r30.w, r14.w
          mul r12.w, r12.w, r14.w
          dp3 r14.w, r31.xyzx, r22.xyzx
          add_sat r14.w, r31.w, r14.w
          mul r23.x, r12.w, r14.w
          ushr r15.w, r8.x, l(2)
          ubfe r20.w, l(1), l(2), r8.x
          and r22.w, r15.w, l(2)
          max r23.z, r23.x, r23.y
          mad r12.w, -r12.w, r14.w, l(1.000000)
          mul r12.w, r12.w, r23.y
          movc r13.y, r22.w, r12.w, r23.z
          movc r23.xy, r20.wwww, r23.xyxx, r13.xyxx
          iadd r11.w, r11.w, l(1)
          mov r8.x, r15.w
        endloop 
        mov_sat r23.y, r23.y
        mul r7.y, r7.z, r23.y
        lt r8.x, l(0.000000), r7.y
        if_nz r8.x
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r24.xyzw, r7.x, l(16), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r25.xyzw, r7.x, l(32), t15.yxwz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r26.xyzw, r7.x, l(48), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r29.xyzw, r7.x, l(64), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r30.xyzw, r7.x, l(80), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r31.xyzw, r7.x, l(132), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r32.xyzw, r7.x, l(148), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r33.xyzw, r7.x, l(164), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r34.xyzw, r7.x, l(180), t15.zwxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r35.xyzw, r7.x, l(196), t15.xyzw
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r36.xy, r7.x, l(212), t15.xyxx
          mad r19.z, r23.y, r7.z, r19.z
          mul r7.x, r21.z, r7.y
          mov r21.z, r31.z
          dp3 r7.y, r10.xyzx, r21.xyzx
          dp3 r7.z, r22.xyzx, r21.xyzx
          add r7.z, -r31.w, r7.z
          ge r8.x, r7.z, l(0.000000)
          max r7.z, r3.y, |r7.z|
          movc r7.z, r8.x, r7.z, -r7.z
          max r7.y, -r7.y, l(0.00000010)
          div r7.y, r7.z, r7.y
          min r7.y, |r7.y|, l(131072.000000)
          mov r31.z, r32.z
          dp3 r7.z, r10.xyzx, r31.xyzx
          dp3 r8.x, r22.xyzx, r31.xyzx
          add r8.x, -r32.w, r8.x
          ge r8.w, r8.x, l(0.000000)
          max r8.x, r3.y, |r8.x|
          movc r8.x, r8.w, r8.x, -r8.x
          max r7.z, -r7.z, l(0.00000010)
          div r7.z, r8.x, r7.z
          min r7.y, |r7.z|, r7.y
          mov r32.z, r33.z
          dp3 r7.z, r10.xyzx, r32.xyzx
          dp3 r8.x, r22.xyzx, r32.xyzx
          add r8.x, -r33.w, r8.x
          ge r8.w, r8.x, l(0.000000)
          max r8.x, r3.y, |r8.x|
          movc r8.x, r8.w, r8.x, -r8.x
          max r7.z, -r7.z, l(0.00000010)
          div r7.z, r8.x, r7.z
          min r7.y, |r7.z|, r7.y
          mov r33.z, r34.z
          dp3 r7.z, r10.xyzx, r33.xyzx
          dp3 r8.x, r22.xyzx, r33.xyzx
          add r8.x, -r34.w, r8.x
          ge r8.w, r8.x, l(0.000000)
          max r8.x, r3.y, |r8.x|
          movc r8.x, r8.w, r8.x, -r8.x
          max r7.z, -r7.z, l(0.00000010)
          div r7.z, r8.x, r7.z
          min r7.y, |r7.z|, r7.y
          mov r34.z, r35.x
          dp3 r7.z, r10.xyzx, r34.xyzx
          dp3 r8.x, r22.xyzx, r34.xyzx
          add r8.x, -r35.y, r8.x
          ge r8.w, r8.x, l(0.000000)
          max r8.x, r3.y, |r8.x|
          movc r8.x, r8.w, r8.x, -r8.x
          max r7.z, -r7.z, l(0.00000010)
          div r7.z, r8.x, r7.z
          min r7.y, |r7.z|, r7.y
          mov r36.zw, r35.zzzw
          dp3 r7.z, r10.zxyz, r36.xzwx
          dp3 r8.x, r22.zxyz, r36.xzwx
          add r8.x, -r36.y, r8.x
          ge r8.w, r8.x, l(0.000000)
          max r8.x, r3.y, |r8.x|
          movc r8.x, r8.w, r8.x, -r8.x
          max r7.z, -r7.z, l(0.00000010)
          div r7.z, r8.x, r7.z
          min r7.y, |r7.z|, r7.y
          mov r21.x, r26.w
          mov r21.yz, r29.zzwz
          add r13.yzw, r22.xxyz, r21.xxyz
          mad r13.yzw, r10.xxyz, r7.yyyy, r13.yyzw
          dp3 r7.z, r13.yzwy, r13.yzwy
          sqrt r7.z, r7.z
          div r7.y, r7.y, r7.z
          add r7.y, r7.y, r7.y
          sqrt r7.y, r7.y
          mad r7.y, r2.w, l(5.000000), r7.y
          add r7.y, r7.y, l(-0.844800)
          mov r20.y, r24.z
          mov r20.z, r25.x
          dp3 r31.x, r13.yzwy, r20.xyzx
          mov r21.xy, r24.xwxx
          mov r21.z, r25.w
          dp3 r31.y, r13.yzwy, r21.xyzx
          mov r25.x, r24.y
          dp3 r31.z, r13.yzwy, r25.xyzx
          ubfe r7.z, l(9), l(16), r21.w
          utof r31.w, r7.z
          sample_l_indexable(texturecubearray)(float,float,float,float) r13.yzw, r31.xyzw, t8.wxyz, s2, r7.y
          dp3 r24.x, r22.xyzx, r20.xyzx
          dp3 r24.y, r22.xyzx, r21.xyzx
          dp3 r24.z, r22.xyzx, r25.xyzx
          mad_sat r22.xyz, r24.xyzx, r26.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
          mov r29.z, r30.x
          mad r22.xyz, r22.xyzx, r29.xyzx, r30.yzwy
          dp3 r31.x, r1.xyzx, r20.xyzx
          dp3 r31.y, r1.xyzx, r21.xyzx
          dp3 r31.z, r1.xyzx, r25.xyzx
          lt r20.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r31.xyzx
          movc r11.z, r20.x, l(0), l(0.500000)
          add r21.xyz, r11.xyzx, r22.xyzx
          sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t17.xyzw, s4, l(0.000000)
          mul r23.xzw, r31.xxyz, r31.xxyz
          mul r23.xzw, r7.xxxx, r23.xxzw
          movc r14.z, r20.y, l(0), l(0.500000)
          add r20.xyw, r14.xyxz, r22.xyxz
          sample_l_indexable(texture3d)(float,float,float,float) r20.xyw, r20.xywx, t18.xywz, s4, l(0.000000)
          mul r20.xyw, r23.zzzz, r20.xyxw
          mad r20.xyw, r21.xyxz, r23.xxxx, r20.xyxw
          movc r15.z, r20.z, l(0), l(0.500000)
          add r21.xyz, r15.xyzx, r22.xyzx
          sample_l_indexable(texture3d)(float,float,float,float) r21.xyz, r21.xyzx, t19.xyzw, s4, l(0.000000)
          mad r20.xyz, r21.xyzx, r23.wwww, r20.xywx
          sample_l_indexable(texturecubearray)(float,float,float,float) r21.xyz, r31.xyzw, t8.xyzw, s2, l(6.000000)
          mul r22.xyz, r20.xyzx, r21.xyzx
          dp3 r7.y, r22.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
          mad r18.xyz, r20.xyzx, r21.xyzx, r18.xyzx
          mul r7.z, r3.z, r7.y
          mul r13.yzw, r7.xxxx, r13.yyzw
          dp3 r7.x, r13.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
          mad r7.x, r3.z, r7.y, r7.x
          div r7.x, r7.z, r7.x
          mov r20.x, r18.w
          mov r20.yz, r19.xxyx
          mad r19.xyw, r13.zwzy, r7.xxxx, r20.yzyx
          mov r18.w, r19.w
        endif 
      endif 
    endif 
  endloop 
  mov r16.xyzw, r18.xyzw
  mov r17.yzw, r19.xxyz
  iadd r5.w, r5.w, l(32)
endloop 
lt r4.z, r17.w, l(1.000000)
if_nz r4.z
  mov r5.xy, l(0,0,0,0)
  mov r7.w, l(0)
  mov r8.yz, l(0,0,1.000000,0)
  mov r11.xy, l(0,0,0,0)
  mov r13.x, l(1.000000)
  mov r14.xy, l(0,0,0,0)
  mov r15.xy, l(0,0,0,0)
  mov r18.x, r16.w
  mov r18.yzw, r17.yyzw
  mov r19.xyz, r16.xyzx
  mov r4.z, r17.w
  mov r4.w, l(0)
  loop 
    uge r5.w, r4.w, r3.w
    breakc_nz r5.w
    ushr r5.z, r4.w, l(5)
    iadd r7.xyz, r5.xyzx, r12.xyzx
    ld_indexable(texture2darray)(uint,uint,uint,uint) r5.z, r7.xyzw, t7.yzxw
    ieq r5.w, r4.x, r4.w
    ubfe r6.z, r4.y, l(0), r5.z
    movc r5.z, r5.w, r6.z, r5.z
    iadd r5.w, r4.w, cb2[0].x
    mov r20.xyzw, r18.xyzw
    mov r7.xyz, r19.xyzx
    mov r6.z, r4.z
    mov r6.w, r5.z
    loop 
      breakc_z r6.w
      firstbit_lo r8.w, r6.w
      ishl r9.x, l(1), r8.w
      and r11.w, r6.w, r9.x
      if_nz r11.w
        xor r6.w, r6.w, r9.x
        iadd r9.x, r5.w, r8.w
        ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r21.xyzw, r9.x, l(0), t11.xyzw
        ld_structured_indexable(structured_buffer, stride=80)(mixed,mixed,mixed,mixed) r22.xy, r9.x, l(16), t11.xyxx
        add r21.xyz, r21.xyzx, -v7.xyzx
        mov r22.z, r21.w
        lt r21.xyz, |r21.xyzx|, r22.zxyz
        and r9.x, r21.y, r21.x
        and r9.x, r21.z, r9.x
        if_nz r9.x
          iadd r8.w, r4.w, r8.w
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r21.xyzw, r8.w, l(0), t15.wxyz
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r13.zw, r8.w, l(96), t15.xxxy
          ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r22.xyzw, r8.w, l(116), t15.zwxy
          add r23.xyz, -r21.yzwy, v7.xyzx
          and r9.x, r22.w, l(0x0000ffff)
          ubfe r11.w, l(6), l(25), r22.w
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r24.xyzw, r9.x, l(0), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r25.xyzw, r9.x, l(16), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r26.xyzw, r9.x, l(32), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r29.xyzw, r9.x, l(48), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r30.xyzw, r9.x, l(64), t16.xyzw
          ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r9.x, l(80), t16.xyzw
          dp3 r12.w, r24.xyzx, r23.xyzx
          add_sat r12.w, r24.w, r12.w
          dp3 r14.w, r25.xyzx, r23.xyzx
          add_sat r14.w, r25.w, r14.w
          mul r12.w, r12.w, r14.w
          dp3 r14.w, r26.xyzx, r23.xyzx
          add_sat r14.w, r26.w, r14.w
          mul r12.w, r12.w, r14.w
          dp3 r14.w, r29.xyzx, r23.xyzx
          add_sat r14.w, r29.w, r14.w
          mul r12.w, r12.w, r14.w
          dp3 r14.w, r30.xyzx, r23.xyzx
          add_sat r14.w, r30.w, r14.w
          mul r12.w, r12.w, r14.w
          dp3 r14.w, r31.xyzx, r23.xyzx
          add_sat r14.w, r31.w, r14.w
          mul r8.x, r12.w, r14.w
          and r12.w, r13.z, l(1)
          movc r24.xy, r12.wwww, r8.xyxx, r8.zxzz
          mov r8.x, r13.z
          mov r25.xy, r24.xyxx
          mov r12.w, l(1)
          loop 
            ige r14.w, r12.w, r11.w
            breakc_nz r14.w
            iadd r14.w, r9.x, r12.w
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r26.xyzw, r14.w, l(0), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r29.xyzw, r14.w, l(16), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r30.xyzw, r14.w, l(32), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r31.xyzw, r14.w, l(48), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r32.xyzw, r14.w, l(64), t16.xyzw
            ld_structured_indexable(structured_buffer, stride=96)(mixed,mixed,mixed,mixed) r33.xyzw, r14.w, l(80), t16.xyzw
            dp3 r14.w, r26.xyzx, r23.xyzx
            add_sat r14.w, r26.w, r14.w
            mul r14.w, r14.w, r25.x
            dp3 r15.w, r29.xyzx, r23.xyzx
            add_sat r15.w, r29.w, r15.w
            mul r14.w, r14.w, r15.w
            dp3 r15.w, r30.xyzx, r23.xyzx
            add_sat r15.w, r30.w, r15.w
            mul r14.w, r14.w, r15.w
            dp3 r15.w, r31.xyzx, r23.xyzx
            add_sat r15.w, r31.w, r15.w
            mul r14.w, r14.w, r15.w
            dp3 r15.w, r32.xyzx, r23.xyzx
            add_sat r15.w, r32.w, r15.w
            mul r14.w, r14.w, r15.w
            dp3 r15.w, r33.xyzx, r23.xyzx
            add_sat r15.w, r33.w, r15.w
            mul r25.x, r14.w, r15.w
            ushr r19.w, r8.x, l(2)
            ubfe r21.w, l(1), l(2), r8.x
            and r23.w, r19.w, l(2)
            max r24.z, r25.x, r25.y
            mad r14.w, -r14.w, r15.w, l(1.000000)
            mul r14.w, r14.w, r25.y
            movc r13.y, r23.w, r14.w, r24.z
            movc r25.xy, r21.wwww, r25.xyxx, r13.xyxx
            iadd r12.w, r12.w, l(1)
            mov r8.x, r19.w
          endloop 
          add_sat r8.x, -r6.z, r25.y
          mul r9.x, r13.w, r8.x
          lt r11.w, l(0.000000), r9.x
          if_nz r11.w
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r24.xyzw, r8.w, l(16), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r26.xyzw, r8.w, l(32), t15.yxwz
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r29.xyzw, r8.w, l(48), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r30.xyzw, r8.w, l(64), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r31.xyzw, r8.w, l(80), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r32.xyzw, r8.w, l(132), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r33.xyzw, r8.w, l(148), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r34.xyzw, r8.w, l(164), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r35.xyzw, r8.w, l(180), t15.zwxy
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r36.xyzw, r8.w, l(196), t15.xyzw
            ld_structured_indexable(structured_buffer, stride=224)(mixed,mixed,mixed,mixed) r37.xy, r8.w, l(212), t15.xyxx
            mad r20.w, r8.x, r13.w, r20.w
            mul r8.x, r22.z, r9.x
            mov r22.z, r32.z
            dp3 r8.w, r10.xyzx, r22.xyzx
            dp3 r9.x, r23.xyzx, r22.xyzx
            add r9.x, -r32.w, r9.x
            ge r11.w, r9.x, l(0.000000)
            max r9.x, r3.y, |r9.x|
            movc r9.x, r11.w, r9.x, -r9.x
            max r8.w, -r8.w, l(0.00000010)
            div r8.w, r9.x, r8.w
            min r8.w, |r8.w|, l(131072.000000)
            mov r32.z, r33.z
            dp3 r9.x, r10.xyzx, r32.xyzx
            dp3 r11.w, r23.xyzx, r32.xyzx
            add r11.w, -r33.w, r11.w
            ge r12.w, r11.w, l(0.000000)
            max r11.w, r3.y, |r11.w|
            movc r11.w, r12.w, r11.w, -r11.w
            max r9.x, -r9.x, l(0.00000010)
            div r9.x, r11.w, r9.x
            min r8.w, r8.w, |r9.x|
            mov r33.z, r34.z
            dp3 r9.x, r10.xyzx, r33.xyzx
            dp3 r11.w, r23.xyzx, r33.xyzx
            add r11.w, -r34.w, r11.w
            ge r12.w, r11.w, l(0.000000)
            max r11.w, r3.y, |r11.w|
            movc r11.w, r12.w, r11.w, -r11.w
            max r9.x, -r9.x, l(0.00000010)
            div r9.x, r11.w, r9.x
            min r8.w, r8.w, |r9.x|
            mov r34.z, r35.z
            dp3 r9.x, r10.xyzx, r34.xyzx
            dp3 r11.w, r23.xyzx, r34.xyzx
            add r11.w, -r35.w, r11.w
            ge r12.w, r11.w, l(0.000000)
            max r11.w, r3.y, |r11.w|
            movc r11.w, r12.w, r11.w, -r11.w
            max r9.x, -r9.x, l(0.00000010)
            div r9.x, r11.w, r9.x
            min r8.w, r8.w, |r9.x|
            mov r35.z, r36.x
            dp3 r9.x, r10.xyzx, r35.xyzx
            dp3 r11.w, r23.xyzx, r35.xyzx
            add r11.w, -r36.y, r11.w
            ge r12.w, r11.w, l(0.000000)
            max r11.w, r3.y, |r11.w|
            movc r11.w, r12.w, r11.w, -r11.w
            max r9.x, -r9.x, l(0.00000010)
            div r9.x, r11.w, r9.x
            min r8.w, r8.w, |r9.x|
            mov r37.zw, r36.zzzw
            dp3 r9.x, r10.zxyz, r37.xzwx
            dp3 r11.w, r23.zxyz, r37.xzwx
            add r11.w, -r37.y, r11.w
            ge r12.w, r11.w, l(0.000000)
            max r11.w, r3.y, |r11.w|
            movc r11.w, r12.w, r11.w, -r11.w
            max r9.x, -r9.x, l(0.00000010)
            div r9.x, r11.w, r9.x
            min r8.w, r8.w, |r9.x|
            mov r22.x, r29.w
            mov r22.yz, r30.zzwz
            add r13.yzw, r23.xxyz, r22.xxyz
            mad r13.yzw, r10.xxyz, r8.wwww, r13.yyzw
            dp3 r9.x, r13.yzwy, r13.yzwy
            sqrt r9.x, r9.x
            div r8.w, r8.w, r9.x
            add r8.w, r8.w, r8.w
            sqrt r8.w, r8.w
            mad r8.w, r2.w, l(5.000000), r8.w
            add r8.w, r8.w, l(-0.844800)
            mov r21.y, r24.z
            mov r21.z, r26.x
            dp3 r32.x, r13.yzwy, r21.xyzx
            mov r22.xy, r24.xwxx
            mov r22.z, r26.w
            dp3 r32.y, r13.yzwy, r22.xyzx
            mov r26.x, r24.y
            dp3 r32.z, r13.yzwy, r26.xyzx
            ubfe r9.x, l(9), l(16), r22.w
            utof r32.w, r9.x
            sample_l_indexable(texturecubearray)(float,float,float,float) r13.yzw, r32.xyzw, t8.wxyz, s2, r8.w
            dp3 r24.x, r23.xyzx, r21.xyzx
            dp3 r24.y, r23.xyzx, r22.xyzx
            dp3 r24.z, r23.xyzx, r26.xyzx
            mad_sat r23.xyz, r24.xyzx, r29.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
            mov r30.z, r31.x
            mad r23.xyz, r23.xyzx, r30.xyzx, r31.yzwy
            dp3 r32.x, r1.xyzx, r21.xyzx
            dp3 r32.y, r1.xyzx, r22.xyzx
            dp3 r32.z, r1.xyzx, r26.xyzx
            lt r21.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r32.xyzx
            movc r11.z, r21.x, l(0), l(0.500000)
            add r22.xyz, r11.xyzx, r23.xyzx
            sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t17.xyzw, s4, l(0.000000)
            mul r24.xyz, r32.xyzx, r32.xyzx
            mul r24.xyz, r8.xxxx, r24.xyzx
            movc r14.z, r21.y, l(0), l(0.500000)
            add r21.xyw, r14.xyxz, r23.xyxz
            sample_l_indexable(texture3d)(float,float,float,float) r21.xyw, r21.xywx, t18.xywz, s4, l(0.000000)
            mul r21.xyw, r24.yyyy, r21.xyxw
            mad r21.xyw, r22.xyxz, r24.xxxx, r21.xyxw
            movc r15.z, r21.z, l(0), l(0.500000)
            add r22.xyz, r15.xyzx, r23.xyzx
            sample_l_indexable(texture3d)(float,float,float,float) r22.xyz, r22.xyzx, t19.xyzw, s4, l(0.000000)
            mad r21.xyz, r22.xyzx, r24.zzzz, r21.xywx
            sample_l_indexable(texturecubearray)(float,float,float,float) r22.xyz, r32.xyzw, t8.xyzw, s2, l(6.000000)
            mul r23.xyz, r21.xyzx, r22.xyzx
            dp3 r8.w, r23.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
            mad r7.xyz, r21.xyzx, r22.xyzx, r7.xyzx
            mul r9.x, r3.z, r8.w
            mul r13.yzw, r8.xxxx, r13.yyzw
            dp3 r8.x, r13.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
            mad r8.x, r3.z, r8.w, r8.x
            div r8.x, r9.x, r8.x
            mad r20.xyz, r13.yzwy, r8.xxxx, r20.xyzx
          endif 
        endif 
      endif 
    endloop 
    mov r18.xyzw, r20.xyzw
    mov r19.xyz, r7.xyzx
    iadd r4.w, r4.w, l(32)
  endloop 
  mov r17.xyzw, r18.zxyw
  mov r16.xyz, r19.xyzx
  mov r17.xyzw, r17.yzxw
else 
  mov r17.x, r16.w
endif 
max r2.w, r17.w, l(1.000000)
rcp r2.w, r2.w
mov_sat r17.w, r17.w
mul r3.yzw, r2.wwww, r16.xxyz
mul r4.xyz, r2.wwww, r17.xyzx
lt r4.w, r17.w, l(0.990000)
if_nz r4.w
  add r4.w, -r17.w, l(1.000000)
  mul r5.x, r4.w, cb2[19].x
  add r5.yzw, v7.xxyz, -cb2[35].xxyz
  mul r7.x, r5.y, cb2[35].w
  mul r7.yz, r5.zzwz, cb2[36].xxyx
  add_sat r5.yzw, r7.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
  mul r7.xy, r5.yzyy, cb2[36].zwzz
  mul r7.z, r5.w, cb2[37].x
  add r5.yzw, r7.xxyz, cb2[37].yyzw
  lt r7.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xyzx
  movc r7.xyz, r7.xyzx, l(0,0,0,0), l(0.500000,0.500000,0.500000,0)
  mov r7.w, l(0)
  add r8.xyz, r5.yzwy, r7.wwxw
  sample_l_indexable(texture3d)(float,float,float,float) r8.xyz, r8.xyzx, t17.xyzw, s4, l(0.000000)
  mul r11.xyz, r1.xyzx, r1.xyzx
  mul r11.xyz, r5.xxxx, r11.xyzx
  add r12.xyz, r5.yzwy, r7.wwyw
  sample_l_indexable(texture3d)(float,float,float,float) r12.xyz, r12.xyzx, t18.xyzw, s4, l(0.000000)
  mul r12.xyz, r11.yyyy, r12.xyzx
  mad r8.xyz, r8.xyzx, r11.xxxx, r12.xyzx
  add r5.xyz, r5.yzwy, r7.wwzw
  sample_l_indexable(texture3d)(float,float,float,float) r5.xyz, r5.xyzx, t19.xyzw, s4, l(0.000000)
  mad r5.xyz, r5.xyzx, r11.zzzz, r8.xyzx
  mov r1.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r1.xyz, r1.xyzw, t8.xyzw, s2, l(6.000000)
  mul r1.xyz, r1.xyzx, r5.xyzx
  dp3 r1.w, r1.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
  mad r3.yzw, r16.xxyz, r2.wwww, r1.xxyz
  mov r10.w, l(0)
  sample_l_indexable(texturecubearray)(float,float,float,float) r1.xyz, r10.xyzw, t8.xyzw, s2, r3.x
  mad r2.w, cb2[19].x, r4.w, -r1.w
  mad r1.w, r6.y, r2.w, r1.w
  mad r4.xyz, r1.xyzx, r1.wwww, r4.xyzx
endif 
add r1.xyz, r3.yzwy, r9.yzwy
mad r3.xy, r6.xyxx, l(0.984375, 0.984375, 0.000000, 0.000000), l(0.00781250, 0.00781250, 0.000000, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t5.xyzw, s2, l(0.000000)
mad r3.xzw, r4.xxyz, r3.xxxx, r27.xxyz
mad r4.xyz, r4.xyzx, r3.yyyy, r28.xyzx
mul r3.xyz, r3.xzwx, l(0.960000, 0.960000, 0.960000, 0.000000)
mad r3.xyz, r4.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000), r3.xyzx
mad r0.xyz, r1.xyzx, r0.xyzx, r3.xyzx
dp3 r1.x, r0.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
max r1.x, r1.x, l(0.000100)
max r1.x, r1.x, cb1[85].x
mad r0.xyz, r2.xyzx, r1.xxxx, r0.xyzx
mul r1.w, r0.w, cb0[18].w
lt r0.w, l(0.000000), cb2[9].z
if_nz r0.w
  dp3 r0.w, v7.xyzx, v7.xyzx
  rsq r2.x, r0.w
  mul r2.xyz, r2.xxxx, v7.xyzx
  sqrt r0.w, r0.w
  lt r2.w, l(0.000000), cb2[13].w
  if_nz r2.w
    mad r3.xy, r0.wwww, cb2[15].xyxx, cb2[14].zwzz
    mul r3.xy, r3.xyxx, cb2[16].xyxx
    lt r2.w, l(0.010000), |v7.z|
    mul r3.zw, v7.zzzz, cb2[15].zzzw
    mul r4.xy, r3.zwzz, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r4.xy, r4.xyxx
    add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    div r3.zw, r4.xxxy, r3.zzzw
    mul r3.zw, r3.zzzw, r3.xxxy
    movc r3.xy, r2.wwww, r3.zwzz, r3.xyxx
    mul r3.xzw, r3.xxxx, cb2[12].xxyz
    exp r3.xzw, r3.xxzw
    mul r4.xyz, r3.yyyy, cb2[12].xyzx
    exp r4.xyz, r4.xyzx
    add r4.xyz, -r3.xzwx, r4.xyzx
    mad r3.xyz, cb2[13].wwww, r4.xyzx, r3.xzwx
  else 
    mad r2.w, r0.w, cb2[15].x, cb2[14].z
    mul r2.w, r2.w, cb2[16].x
    lt r3.w, l(0.010000), |v7.z|
    mul r4.x, v7.z, cb2[15].z
    mul r4.y, r4.x, l(-1.442695)
    exp r4.y, r4.y
    add r4.y, -r4.y, l(1.000000)
    div r4.x, r4.y, r4.x
    mul r4.x, r2.w, r4.x
    movc r2.w, r3.w, r4.x, r2.w
    mul r4.xyz, r2.wwww, cb2[12].xyzx
    exp r3.xyz, r4.xyzx
  endif 
  mad r3.xyz, r3.xyzx, cb2[9].zzzz, l(1.000000, 1.000000, 1.000000, 0.000000)
  add_sat r3.xyz, r3.xyzx, -cb2[9].zzzz
  dp3 r2.x, cb2[7].yzwy, -r2.xyzx
  mad r2.y, -cb2[8].w, cb2[8].w, l(1.000000)
  mad r2.z, cb2[8].w, -r2.x, l(1.000000)
  mul r2.z, r2.z, r2.z
  mul r2.z, r2.z, l(12.566371)
  div r2.y, r2.y, r2.z
  add r0.w, r0.w, -cb2[10].w
  mul_sat r0.w, r0.w, cb2[11].w
  mul r0.w, r0.w, r2.y
  mov_sat r2.x, r2.x
  mad r2.x, r2.x, r2.x, l(1.000000)
  mad r2.x, r2.x, l(0.05968310), l(-1.000000)
  mad r2.x, cb2[8].z, r2.x, l(1.000000)
  mul r2.yzw, r0.wwww, cb2[11].xxyz
  mad r2.xyz, r2.xxxx, cb2[10].xyzx, r2.yzwy
  mul r2.xyz, r2.xyzx, cb2[9].wwww
  add r4.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r2.xyz, r2.xyzx, r4.xyzx
  mad r2.xyz, r0.xyzx, r3.xyzx, r2.xyzx
else 
  mul r0.w, v7.z, cb2[6].x
  mad r2.w, cb2[6].x, v7.z, cb2[5].x
  lt r3.x, |r0.w|, l(0.000100)
  min r3.y, r2.w, l(64.000000)
  mul r3.y, r3.y, l(1.442695)
  exp r3.y, r3.y
  mov_sat r3.z, cb2[6].z
  lt r3.w, r2.w, l(0.000000)
  add r2.w, r2.w, l(1.000000)
  movc r2.w, r3.w, r3.y, r2.w
  add r2.w, r2.w, -cb2[6].z
  movc r0.w, r3.x, l(1.000000), r0.w
  div r0.w, r2.w, r0.w
  movc r0.w, r3.x, r3.z, r0.w
  mul r0.w, r0.w, cb2[5].z
  dp3 r2.w, v7.xyzx, v7.xyzx
  sqrt r3.x, r2.w
  mad r0.w, r0.w, r3.x, cb2[5].w
  exp r0.w, r0.w
  min r0.w, r0.w, l(1.000000)
  add r0.w, -r0.w, l(1.000000)
  rsq r2.w, r2.w
  mul r3.xyz, r2.wwww, v7.xyzx
  dp3 r2.w, cb2[7].yzwy, r3.xyzx
  mad_sat r2.w, cb2[8].y, r2.w, cb2[8].x
  add r3.xyzw, cb2[3].xyzw, -cb2[4].xyzw
  mad r3.xyzw, r2.wwww, r3.xyzw, cb2[4].xyzw
  mul r0.w, r0.w, r3.w
  add r3.xyz, -r0.xyzx, r3.xyzx
  mad r2.xyz, r0.wwww, r3.xyzx, r0.xyzx
endif 
mul r0.xyz, r2.xyzx, cb1[85].yyyy
ge r2.xyz, r0.xyzx, l(0.00006104, 0.00006104, 0.00006104, 0.000000)
and r0.xyz, r0.xyzx, r2.xyzx
min r0.xyz, r0.xyzx, l(65024.000000, 65024.000000, 64512.000000, 0.000000)
max r2.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r1.xyz, r1.wwww, r2.xyzx
and r0.w, r1.w, l(0x7f800000)
ieq r0.w, r0.w, l(0x7f800000)
eq r3.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
and r3.xy, r3.zwzz, r3.xyxx
and r2.w, r3.y, r3.x
or r0.w, r0.w, r2.w
if_z r0.w
  ftou r3.xy, v0.xyxx
  imm_atomic_iadd r4.x, u6, r3.xyxx, l(1)
  and r3.zw, r4.xxxx, l(0, 0, 0x0000ffff, 0x0000ffff)
  ult r0.w, r3.w, cb2[58].z
  if_nz r0.w
    max r0.w, r1.z, r1.y
    max r0.w, r0.w, r1.x
    mov r0.w, |r0.w|
    and r0.w, r0.w, l(0x7f800000)
    iadd r0.w, r0.w, l(0x00800000)
    mad r2.xyz, r2.xyzx, r1.wwww, r0.wwww
    ubfe r2.x, l(8), l(15), r2.x
    ushr r2.yz, r2.yyzy, l(0, 15, 15, 0)
    bfi r2.yz, l(0, 8, 8, 0), l(0, 8, 16, 0), r2.yyzy, l(0, 0, 0, 0)
    iadd r2.x, r2.y, r2.x
    iadd r2.x, r2.z, r2.x
    ishl r0.w, r0.w, l(1)
    iadd r2.xzw, r0.wwww, r2.xxxx
    mov_sat r0.w, r1.w
    mul r0.w, r0.w, l(2046.000000)
    ftou r0.w, r0.w
    ishl r4.x, v0.z, l(2)
    and r0.w, r0.w, l(2046)
    bfi r2.y, l(11), l(0), r0.w, r4.x
    store_uav_typed u7.xyzw, r3.xyzw, r2.xyzw
    mov r0.w, l(-1)
  else 
    mov r0.w, l(0)
  endif 
else 
  mov r0.w, l(-1)
endif 
mul r1.xyz, r1.wwww, r0.xyzx
movc o0.xyzw, r0.wwww, l(0,0,0,0), r1.xyzw
ret 
// Approximately 1986 instruction slots used
